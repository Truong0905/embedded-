
DATN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087ec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080089ec  080089ec  000189ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b4c  08008b4c  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08008b4c  08008b4c  00018b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b54  08008b54  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08008b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000193e0  20000038  08008b94  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019418  08008b94  00029418  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d696  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f8b  00000000  00000000  0003d6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  00041688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001780  00000000  00000000  00042fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d0c2  00000000  00000000  00044730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ec7  00000000  00000000  000717f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108e68  00000000  00000000  000936b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019c521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006928  00000000  00000000  0019c574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000038 	.word	0x20000038
 800021c:	00000000 	.word	0x00000000
 8000220:	080089d4 	.word	0x080089d4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000003c 	.word	0x2000003c
 800023c:	080089d4 	.word	0x080089d4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <read_Pin_Input>:
}



void read_Pin_Input()
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	I0_0 = HAL_GPIO_ReadPin(I0_0_PORT, I0_0_PIN);
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <read_Pin_Input+0x1c>)
 800054e:	f001 fb57 	bl	8001c00 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	4b03      	ldr	r3, [pc, #12]	; (8000564 <read_Pin_Input+0x20>)
 8000558:	701a      	strb	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40020800 	.word	0x40020800
 8000564:	20000054 	.word	0x20000054

08000568 <write_Pin_Output>:
void write_Pin_Output()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	if (Q0_0 >= 1)
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <write_Pin_Output+0x74>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d006      	beq.n	8000584 <write_Pin_Output+0x1c>
	{
		HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, ENABLE);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057c:	4818      	ldr	r0, [pc, #96]	; (80005e0 <write_Pin_Output+0x78>)
 800057e:	f001 fb57 	bl	8001c30 <HAL_GPIO_WritePin>
 8000582:	e005      	b.n	8000590 <write_Pin_Output+0x28>
	}
	else
	{
		HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, DISABLE);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058a:	4815      	ldr	r0, [pc, #84]	; (80005e0 <write_Pin_Output+0x78>)
 800058c:	f001 fb50 	bl	8001c30 <HAL_GPIO_WritePin>
	}
	if (Q0_1 >= 1)
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <write_Pin_Output+0x74>)
 8000592:	785b      	ldrb	r3, [r3, #1]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d006      	beq.n	80005a8 <write_Pin_Output+0x40>
	{
		HAL_GPIO_WritePin(Q0_1_PORT, Q0_1_PIN, ENABLE);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a0:	480f      	ldr	r0, [pc, #60]	; (80005e0 <write_Pin_Output+0x78>)
 80005a2:	f001 fb45 	bl	8001c30 <HAL_GPIO_WritePin>
 80005a6:	e005      	b.n	80005b4 <write_Pin_Output+0x4c>
	}
	else
	{
		HAL_GPIO_WritePin(Q0_1_PORT, Q0_1_PIN, DISABLE);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <write_Pin_Output+0x78>)
 80005b0:	f001 fb3e 	bl	8001c30 <HAL_GPIO_WritePin>
	}
	if (Q0_2 >= 1)
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <write_Pin_Output+0x74>)
 80005b6:	789b      	ldrb	r3, [r3, #2]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d006      	beq.n	80005cc <write_Pin_Output+0x64>
	{
		HAL_GPIO_WritePin(Q0_2_PORT, Q0_2_PIN, ENABLE);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <write_Pin_Output+0x78>)
 80005c6:	f001 fb33 	bl	8001c30 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(Q0_2_PORT, Q0_2_PIN, DISABLE);
	}
}
 80005ca:	e005      	b.n	80005d8 <write_Pin_Output+0x70>
		HAL_GPIO_WritePin(Q0_2_PORT, Q0_2_PIN, DISABLE);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <write_Pin_Output+0x78>)
 80005d4:	f001 fb2c 	bl	8001c30 <HAL_GPIO_WritePin>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000064 	.word	0x20000064
 80005e0:	40020800 	.word	0x40020800

080005e4 <Main_task>:
void Main_task(void *param)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
	volatile static const uint32_t datC2 = 2;
	volatile static uint8_t startC2 = 0;
	volatile static uint8_t checkC2 = 0;
	while (1)
	{
		read_Pin_Input();
 80005ec:	f7ff ffaa 	bl	8000544 <read_Pin_Input>
		/*--------------NetWork 1 -----------*/

		volatile uint8_t tempC2_0 = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
		if (countC2 < 2)
 80005f4:	4b98      	ldr	r3, [pc, #608]	; (8000858 <Main_task+0x274>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d801      	bhi.n	8000600 <Main_task+0x1c>
		{
			tempC2_0 = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
		}
		M0_0 = ((I0_0 + M0_0) * tempC2_0);
 8000600:	4b96      	ldr	r3, [pc, #600]	; (800085c <Main_task+0x278>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b96      	ldr	r3, [pc, #600]	; (8000860 <Main_task+0x27c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4413      	add	r3, r2
 800060e:	b2da      	uxtb	r2, r3
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	fb12 f303 	smulbb	r3, r2, r3
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b91      	ldr	r3, [pc, #580]	; (8000860 <Main_task+0x27c>)
 800061c:	701a      	strb	r2, [r3, #0]
		if (M0_0 > 0)
 800061e:	4b90      	ldr	r3, [pc, #576]	; (8000860 <Main_task+0x27c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d003      	beq.n	8000630 <Main_task+0x4c>
		{
			M0_0 = 1;
 8000628:	4b8d      	ldr	r3, [pc, #564]	; (8000860 <Main_task+0x27c>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	e002      	b.n	8000636 <Main_task+0x52>
		}
		else
		{
			M0_0 = 0;
 8000630:	4b8b      	ldr	r3, [pc, #556]	; (8000860 <Main_task+0x27c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
		}
		/*--------------NetWork 2 -----------*/

		if (!T37reset)
 8000636:	4b8b      	ldr	r3, [pc, #556]	; (8000864 <Main_task+0x280>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d148      	bne.n	80006d0 <Main_task+0xec>
		{
			vaoT37 = (M0_0);
 800063e:	4b88      	ldr	r3, [pc, #544]	; (8000860 <Main_task+0x27c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b88      	ldr	r3, [pc, #544]	; (8000868 <Main_task+0x284>)
 8000646:	701a      	strb	r2, [r3, #0]
			T37;
 8000648:	4b88      	ldr	r3, [pc, #544]	; (800086c <Main_task+0x288>)
 800064a:	781b      	ldrb	r3, [r3, #0]
			if (vaoT37)
 800064c:	4b86      	ldr	r3, [pc, #536]	; (8000868 <Main_task+0x284>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d023      	beq.n	800069e <Main_task+0xba>
			{
				if (countT37 >= datT37)
 8000656:	4b86      	ldr	r3, [pc, #536]	; (8000870 <Main_task+0x28c>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	4b86      	ldr	r3, [pc, #536]	; (8000874 <Main_task+0x290>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	429a      	cmp	r2, r3
 8000660:	d302      	bcc.n	8000668 <Main_task+0x84>
					T37 = 1;
 8000662:	4b82      	ldr	r3, [pc, #520]	; (800086c <Main_task+0x288>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]

				if ((T37 == 0) && (checkT37 == 0))
 8000668:	4b80      	ldr	r3, [pc, #512]	; (800086c <Main_task+0x288>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d141      	bne.n	80006f6 <Main_task+0x112>
 8000672:	4b81      	ldr	r3, [pc, #516]	; (8000878 <Main_task+0x294>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	d13c      	bne.n	80006f6 <Main_task+0x112>
				{
					xTimerStart(handle_timerPLC[0], portMAX_DELAY);
 800067c:	4b7f      	ldr	r3, [pc, #508]	; (800087c <Main_task+0x298>)
 800067e:	681c      	ldr	r4, [r3, #0]
 8000680:	f006 f92e 	bl	80068e0 <xTaskGetTickCount>
 8000684:	4602      	mov	r2, r0
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	2101      	movs	r1, #1
 8000690:	4620      	mov	r0, r4
 8000692:	f006 fd91 	bl	80071b8 <xTimerGenericCommand>
					checkT37 = 1;
 8000696:	4b78      	ldr	r3, [pc, #480]	; (8000878 <Main_task+0x294>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
 800069c:	e02b      	b.n	80006f6 <Main_task+0x112>
				}
			}
			else
			{
				if (checkT37 == 1)
 800069e:	4b76      	ldr	r3, [pc, #472]	; (8000878 <Main_task+0x294>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d10c      	bne.n	80006c2 <Main_task+0xde>
				{
					xTimerStop(handle_timerPLC[0], portMAX_DELAY);
 80006a8:	4b74      	ldr	r3, [pc, #464]	; (800087c <Main_task+0x298>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2300      	movs	r3, #0
 80006b4:	2200      	movs	r2, #0
 80006b6:	2103      	movs	r1, #3
 80006b8:	f006 fd7e 	bl	80071b8 <xTimerGenericCommand>
					checkT37 = 0;
 80006bc:	4b6e      	ldr	r3, [pc, #440]	; (8000878 <Main_task+0x294>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
				}
				T37 = 0;
 80006c2:	4b6a      	ldr	r3, [pc, #424]	; (800086c <Main_task+0x288>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
				countT37 = 0;
 80006c8:	4b69      	ldr	r3, [pc, #420]	; (8000870 <Main_task+0x28c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e012      	b.n	80006f6 <Main_task+0x112>
			}
		}
		else
		{
			xTimerStop(handle_timerPLC[0], portMAX_DELAY);
 80006d0:	4b6a      	ldr	r3, [pc, #424]	; (800087c <Main_task+0x298>)
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2300      	movs	r3, #0
 80006dc:	2200      	movs	r2, #0
 80006de:	2103      	movs	r1, #3
 80006e0:	f006 fd6a 	bl	80071b8 <xTimerGenericCommand>
			countT37 = 0;
 80006e4:	4b62      	ldr	r3, [pc, #392]	; (8000870 <Main_task+0x28c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
			T37 = 0;
 80006ea:	4b60      	ldr	r3, [pc, #384]	; (800086c <Main_task+0x288>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
			checkT37 = 0;
 80006f0:	4b61      	ldr	r3, [pc, #388]	; (8000878 <Main_task+0x294>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
		}
		/*--------------NetWork 3 -----------*/

		volatile uint8_t T37sl0 = T37;
 80006f6:	4b5d      	ldr	r3, [pc, #372]	; (800086c <Main_task+0x288>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	73bb      	strb	r3, [r7, #14]
		volatile static uint8_t checkEU0 = 0;
		if (!(T37))
 80006fe:	4b5b      	ldr	r3, [pc, #364]	; (800086c <Main_task+0x288>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <Main_task+0x12a>
		{
			checkEU0 = 0;
 8000708:	4b5d      	ldr	r3, [pc, #372]	; (8000880 <Main_task+0x29c>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
		}
		if ((!checkEU0) && (T37))
 800070e:	4b5c      	ldr	r3, [pc, #368]	; (8000880 <Main_task+0x29c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d109      	bne.n	800072c <Main_task+0x148>
 8000718:	4b54      	ldr	r3, [pc, #336]	; (800086c <Main_task+0x288>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <Main_task+0x148>
		{
			checkEU0 = 0;
 8000722:	4b57      	ldr	r3, [pc, #348]	; (8000880 <Main_task+0x29c>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
			T37sl0 = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
		}
		volatile uint8_t tempC1_1 = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	737b      	strb	r3, [r7, #13]
		if (countC1 >= 50)
 8000730:	4b54      	ldr	r3, [pc, #336]	; (8000884 <Main_task+0x2a0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b31      	cmp	r3, #49	; 0x31
 8000736:	d901      	bls.n	800073c <Main_task+0x158>
		{
			tempC1_1 = 1;
 8000738:	2301      	movs	r3, #1
 800073a:	737b      	strb	r3, [r7, #13]
		}
		vaoC1 = (T37sl0);
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b51      	ldr	r3, [pc, #324]	; (8000888 <Main_task+0x2a4>)
 8000742:	701a      	strb	r2, [r3, #0]
		resetC1 = (tempC1_1 + (!M0_0));
 8000744:	4b46      	ldr	r3, [pc, #280]	; (8000860 <Main_task+0x27c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	bf0c      	ite	eq
 800074e:	2301      	moveq	r3, #1
 8000750:	2300      	movne	r3, #0
 8000752:	b2db      	uxtb	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	7b7b      	ldrb	r3, [r7, #13]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4413      	add	r3, r2
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b4b      	ldr	r3, [pc, #300]	; (800088c <Main_task+0x2a8>)
 8000760:	701a      	strb	r2, [r3, #0]
		if (resetC1)
 8000762:	4b4a      	ldr	r3, [pc, #296]	; (800088c <Main_task+0x2a8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d009      	beq.n	8000780 <Main_task+0x19c>
		{
			countC1 = 0;
 800076c:	4b45      	ldr	r3, [pc, #276]	; (8000884 <Main_task+0x2a0>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
			C1 = 0;
 8000772:	4b47      	ldr	r3, [pc, #284]	; (8000890 <Main_task+0x2ac>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
			startC1 = 1;
 8000778:	4b46      	ldr	r3, [pc, #280]	; (8000894 <Main_task+0x2b0>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
 800077e:	e025      	b.n	80007cc <Main_task+0x1e8>
		}
		else
		{
			if (vaoC1)
 8000780:	4b41      	ldr	r3, [pc, #260]	; (8000888 <Main_task+0x2a4>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d01d      	beq.n	80007c6 <Main_task+0x1e2>
			{
				if (((checkC1 == 1) || (startC1 == 1)) && (countC1 <= 4294967295))
 800078a:	4b43      	ldr	r3, [pc, #268]	; (8000898 <Main_task+0x2b4>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b01      	cmp	r3, #1
 8000792:	d004      	beq.n	800079e <Main_task+0x1ba>
 8000794:	4b3f      	ldr	r3, [pc, #252]	; (8000894 <Main_task+0x2b0>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b01      	cmp	r3, #1
 800079c:	d109      	bne.n	80007b2 <Main_task+0x1ce>
 800079e:	4b39      	ldr	r3, [pc, #228]	; (8000884 <Main_task+0x2a0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
				{
					countC1++;
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <Main_task+0x2a0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a36      	ldr	r2, [pc, #216]	; (8000884 <Main_task+0x2a0>)
 80007aa:	6013      	str	r3, [r2, #0]
					startC1 = 0;
 80007ac:	4b39      	ldr	r3, [pc, #228]	; (8000894 <Main_task+0x2b0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
				}
				if (countC1 >= datC1)
 80007b2:	4b34      	ldr	r3, [pc, #208]	; (8000884 <Main_task+0x2a0>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b39      	ldr	r3, [pc, #228]	; (800089c <Main_task+0x2b8>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d306      	bcc.n	80007cc <Main_task+0x1e8>
				{
					C1 = 1;
 80007be:	4b34      	ldr	r3, [pc, #208]	; (8000890 <Main_task+0x2ac>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	e002      	b.n	80007cc <Main_task+0x1e8>
				}
			}
			else
			{
				checkC1 = 1;
 80007c6:	4b34      	ldr	r3, [pc, #208]	; (8000898 <Main_task+0x2b4>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
			}
		}
		/*--------------NetWork 4 -----------*/

		volatile uint8_t tempC1_2 = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	733b      	strb	r3, [r7, #12]
		if (countC1 <= 20)
 80007d0:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <Main_task+0x2a0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b14      	cmp	r3, #20
 80007d6:	d801      	bhi.n	80007dc <Main_task+0x1f8>
		{
			tempC1_2 = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	733b      	strb	r3, [r7, #12]
		}
		Q0_0 = (tempC1_2 * M0_0);
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <Main_task+0x27c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	7b3b      	ldrb	r3, [r7, #12]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	fb12 f303 	smulbb	r3, r2, r3
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <Main_task+0x2bc>)
 80007ee:	701a      	strb	r2, [r3, #0]
		if (Q0_0 > 0)
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <Main_task+0x2bc>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d003      	beq.n	8000802 <Main_task+0x21e>
		{
			Q0_0 = 1;
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <Main_task+0x2bc>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	701a      	strb	r2, [r3, #0]
 8000800:	e002      	b.n	8000808 <Main_task+0x224>
		}
		else
		{
			Q0_0 = 0;
 8000802:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <Main_task+0x2bc>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
		}
		/*--------------NetWork 5 -----------*/

		volatile uint8_t tempC1_3 = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	72fb      	strb	r3, [r7, #11]
		if (countC1 > 20)
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <Main_task+0x2a0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b14      	cmp	r3, #20
 8000812:	d901      	bls.n	8000818 <Main_task+0x234>
		{
			tempC1_3 = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	72fb      	strb	r3, [r7, #11]
		}
		volatile uint8_t tempC1_4 = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	72bb      	strb	r3, [r7, #10]
		if (countC1 <= 25)
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <Main_task+0x2a0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b19      	cmp	r3, #25
 8000822:	d801      	bhi.n	8000828 <Main_task+0x244>
		{
			tempC1_4 = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	72bb      	strb	r3, [r7, #10]
		}
		Q0_2 = (tempC1_3 * tempC1_4 * M0_0);
 8000828:	7afb      	ldrb	r3, [r7, #11]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	7abb      	ldrb	r3, [r7, #10]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	fb12 f303 	smulbb	r3, r2, r3
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <Main_task+0x27c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	fb12 f303 	smulbb	r3, r2, r3
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <Main_task+0x2bc>)
 8000844:	709a      	strb	r2, [r3, #2]
		if (Q0_2 > 0)
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <Main_task+0x2bc>)
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d029      	beq.n	80008a4 <Main_task+0x2c0>
		{
			Q0_2 = 1;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <Main_task+0x2bc>)
 8000852:	2201      	movs	r2, #1
 8000854:	709a      	strb	r2, [r3, #2]
 8000856:	e028      	b.n	80008aa <Main_task+0x2c6>
 8000858:	200000a0 	.word	0x200000a0
 800085c:	20000054 	.word	0x20000054
 8000860:	20000074 	.word	0x20000074
 8000864:	20000090 	.word	0x20000090
 8000868:	200000a4 	.word	0x200000a4
 800086c:	20000088 	.word	0x20000088
 8000870:	2000008c 	.word	0x2000008c
 8000874:	20000000 	.word	0x20000000
 8000878:	200000a5 	.word	0x200000a5
 800087c:	200001e4 	.word	0x200001e4
 8000880:	200000a6 	.word	0x200000a6
 8000884:	20000098 	.word	0x20000098
 8000888:	200000a7 	.word	0x200000a7
 800088c:	200000a8 	.word	0x200000a8
 8000890:	20000094 	.word	0x20000094
 8000894:	200000a9 	.word	0x200000a9
 8000898:	200000aa 	.word	0x200000aa
 800089c:	20000004 	.word	0x20000004
 80008a0:	20000064 	.word	0x20000064
		}
		else
		{
			Q0_2 = 0;
 80008a4:	4b48      	ldr	r3, [pc, #288]	; (80009c8 <Main_task+0x3e4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	709a      	strb	r2, [r3, #2]
		}
		/*--------------NetWork 6 -----------*/

		volatile uint8_t tempC1_5 = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	727b      	strb	r3, [r7, #9]
		if (countC1 > 25)
 80008ae:	4b47      	ldr	r3, [pc, #284]	; (80009cc <Main_task+0x3e8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b19      	cmp	r3, #25
 80008b4:	d901      	bls.n	80008ba <Main_task+0x2d6>
		{
			tempC1_5 = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	727b      	strb	r3, [r7, #9]
		}
		Q0_1 = (tempC1_5 * M0_0);
 80008ba:	4b45      	ldr	r3, [pc, #276]	; (80009d0 <Main_task+0x3ec>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	7a7b      	ldrb	r3, [r7, #9]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	fb12 f303 	smulbb	r3, r2, r3
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b3f      	ldr	r3, [pc, #252]	; (80009c8 <Main_task+0x3e4>)
 80008cc:	705a      	strb	r2, [r3, #1]
		if (Q0_1 > 0)
 80008ce:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <Main_task+0x3e4>)
 80008d0:	785b      	ldrb	r3, [r3, #1]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d003      	beq.n	80008e0 <Main_task+0x2fc>
		{
			Q0_1 = 1;
 80008d8:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <Main_task+0x3e4>)
 80008da:	2201      	movs	r2, #1
 80008dc:	705a      	strb	r2, [r3, #1]
 80008de:	e002      	b.n	80008e6 <Main_task+0x302>
		}
		else
		{
			Q0_1 = 0;
 80008e0:	4b39      	ldr	r3, [pc, #228]	; (80009c8 <Main_task+0x3e4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	705a      	strb	r2, [r3, #1]
		}
		/*--------------NetWork 7 -----------*/

		volatile uint8_t T37sl1 = T37;
 80008e6:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <Main_task+0x3f0>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	723b      	strb	r3, [r7, #8]
		volatile static uint8_t checkEU1 = 0;
		if (!(T37))
 80008ee:	4b39      	ldr	r3, [pc, #228]	; (80009d4 <Main_task+0x3f0>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <Main_task+0x31a>
		{
			checkEU1 = 0;
 80008f8:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <Main_task+0x3f4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
		}
		if ((!checkEU1) && (T37))
 80008fe:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <Main_task+0x3f4>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d109      	bne.n	800091c <Main_task+0x338>
 8000908:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <Main_task+0x3f0>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d004      	beq.n	800091c <Main_task+0x338>
		{
			checkEU1 = 0;
 8000912:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <Main_task+0x3f4>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
			T37sl1 = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	723b      	strb	r3, [r7, #8]
		}
		T37reset = (T37sl1);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <Main_task+0x3f8>)
 8000924:	601a      	str	r2, [r3, #0]
		if (T37reset > 0)
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <Main_task+0x3f8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d003      	beq.n	8000936 <Main_task+0x352>
		{
			T37reset = 1;
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <Main_task+0x3f8>)
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	e002      	b.n	800093c <Main_task+0x358>
		}
		else
		{
			T37reset = 0;
 8000936:	4b29      	ldr	r3, [pc, #164]	; (80009dc <Main_task+0x3f8>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
		}
		/*--------------NetWork 8 -----------*/

		vaoC2 = (I0_0);
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <Main_task+0x3fc>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <Main_task+0x400>)
 8000944:	701a      	strb	r2, [r3, #0]
		resetC2 = (C2);
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <Main_task+0x404>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <Main_task+0x408>)
 800094e:	701a      	strb	r2, [r3, #0]
		if (resetC2)
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <Main_task+0x408>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d009      	beq.n	800096e <Main_task+0x38a>
		{
			countC2 = 0;
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <Main_task+0x40c>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
			C2 = 0;
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <Main_task+0x404>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
			startC2 = 1;
 8000966:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <Main_task+0x410>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
 800096c:	e025      	b.n	80009ba <Main_task+0x3d6>
		}
		else
		{
			if (vaoC2)
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <Main_task+0x400>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d01d      	beq.n	80009b4 <Main_task+0x3d0>
			{
				if (((checkC2 == 1) || (startC2 == 1)) && (countC2 <= 4294967295))
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <Main_task+0x414>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b01      	cmp	r3, #1
 8000980:	d004      	beq.n	800098c <Main_task+0x3a8>
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <Main_task+0x410>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d109      	bne.n	80009a0 <Main_task+0x3bc>
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <Main_task+0x40c>)
 800098e:	681b      	ldr	r3, [r3, #0]
				{
					countC2++;
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <Main_task+0x40c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	4a16      	ldr	r2, [pc, #88]	; (80009f0 <Main_task+0x40c>)
 8000998:	6013      	str	r3, [r2, #0]
					startC2 = 0;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <Main_task+0x410>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
				}
				if (countC2 >= datC2)
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <Main_task+0x40c>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <Main_task+0x418>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d306      	bcc.n	80009ba <Main_task+0x3d6>
				{
					C2 = 1;
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <Main_task+0x404>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
 80009b2:	e002      	b.n	80009ba <Main_task+0x3d6>
				}
			}
			else
			{
				checkC2 = 1;
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <Main_task+0x414>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
			}
		}
		write_Pin_Output();
 80009ba:	f7ff fdd5 	bl	8000568 <write_Pin_Output>
		vTaskDelay(2);
 80009be:	2002      	movs	r0, #2
 80009c0:	f005 fe68 	bl	8006694 <vTaskDelay>
	{
 80009c4:	e612      	b.n	80005ec <Main_task+0x8>
 80009c6:	bf00      	nop
 80009c8:	20000064 	.word	0x20000064
 80009cc:	20000098 	.word	0x20000098
 80009d0:	20000074 	.word	0x20000074
 80009d4:	20000088 	.word	0x20000088
 80009d8:	200000ab 	.word	0x200000ab
 80009dc:	20000090 	.word	0x20000090
 80009e0:	20000054 	.word	0x20000054
 80009e4:	200000ac 	.word	0x200000ac
 80009e8:	2000009c 	.word	0x2000009c
 80009ec:	200000ad 	.word	0x200000ad
 80009f0:	200000a0 	.word	0x200000a0
 80009f4:	200000ae 	.word	0x200000ae
 80009f8:	200000af 	.word	0x200000af
 80009fc:	20000008 	.word	0x20000008

08000a00 <TimerCallBack>:
	}
}
void TimerCallBack(TimerHandle_t xTimer)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f006 feb9 	bl	8007780 <pvTimerGetTimerID>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	60fb      	str	r3, [r7, #12]
	switch (id)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d105      	bne.n	8000a24 <TimerCallBack+0x24>
	{
	case 1:
		countT37++;
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <TimerCallBack+0x2c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <TimerCallBack+0x2c>)
 8000a20:	6013      	str	r3, [r2, #0]
		break;
 8000a22:	bf00      	nop
	}
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000008c 	.word	0x2000008c

08000a30 <initTimer>:
void initTimer(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af02      	add	r7, sp, #8
	handle_timerPLC[0] = xTimerCreate("timerTONT37", pdMS_TO_TICKS(100), pdTRUE, (void *)(0 + 1), TimerCallBack);
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <initTimer+0x24>)
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <initTimer+0x28>)
 8000a44:	f006 fb5e 	bl	8007104 <xTimerCreate>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <initTimer+0x2c>)
 8000a4c:	6013      	str	r3, [r2, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	08000a01 	.word	0x08000a01
 8000a58:	080089ec 	.word	0x080089ec
 8000a5c:	200001e4 	.word	0x200001e4

08000a60 <Start_task>:


void Start_task ( void *param)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	;
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <Send_task>:
void Send_task ( void *param)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	;
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <Setting_task>:
void Setting_task( void *param)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
;
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa2:	f000 fd60 	bl	8001566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa6:	f000 f891 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aaa:	f000 f9ab 	bl	8000e04 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000aae:	f000 f8fb 	bl	8000ca8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ab2:	f000 f939 	bl	8000d28 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ab6:	f000 f975 	bl	8000da4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000aba:	f004 fe9d 	bl	80057f8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(Main_task, "menu_task", 50000,NULL,2, &handle_main_task) ;
 8000abe:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <main+0xf0>)
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000acc:	4930      	ldr	r1, [pc, #192]	; (8000b90 <main+0xf4>)
 8000ace:	4831      	ldr	r0, [pc, #196]	; (8000b94 <main+0xf8>)
 8000ad0:	f005 fc9e 	bl	8006410 <xTaskCreate>
 8000ad4:	6078      	str	r0, [r7, #4]
  configASSERT(status == pdPASS) ;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d003      	beq.n	8000ae4 <main+0x48>
 8000adc:	492e      	ldr	r1, [pc, #184]	; (8000b98 <main+0xfc>)
 8000ade:	2073      	movs	r0, #115	; 0x73
 8000ae0:	f000 faca 	bl	8001078 <vAssertCalled>
  status = xTaskCreate(Start_task, "start_task", 500,NULL,2, &handle_start_task) ;
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <main+0x100>)
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	2302      	movs	r3, #2
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2300      	movs	r3, #0
 8000aee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000af2:	492b      	ldr	r1, [pc, #172]	; (8000ba0 <main+0x104>)
 8000af4:	482b      	ldr	r0, [pc, #172]	; (8000ba4 <main+0x108>)
 8000af6:	f005 fc8b 	bl	8006410 <xTaskCreate>
 8000afa:	6078      	str	r0, [r7, #4]
  configASSERT(status == pdPASS) ;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d003      	beq.n	8000b0a <main+0x6e>
 8000b02:	4925      	ldr	r1, [pc, #148]	; (8000b98 <main+0xfc>)
 8000b04:	2075      	movs	r0, #117	; 0x75
 8000b06:	f000 fab7 	bl	8001078 <vAssertCalled>
  status = xTaskCreate(Send_task, "send_task", 500,NULL,2, &handle_send_task) ;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <main+0x10c>)
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	2302      	movs	r3, #2
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2300      	movs	r3, #0
 8000b14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b18:	4924      	ldr	r1, [pc, #144]	; (8000bac <main+0x110>)
 8000b1a:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <main+0x114>)
 8000b1c:	f005 fc78 	bl	8006410 <xTaskCreate>
 8000b20:	6078      	str	r0, [r7, #4]
  configASSERT(status == pdPASS) ;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d003      	beq.n	8000b30 <main+0x94>
 8000b28:	491b      	ldr	r1, [pc, #108]	; (8000b98 <main+0xfc>)
 8000b2a:	2077      	movs	r0, #119	; 0x77
 8000b2c:	f000 faa4 	bl	8001078 <vAssertCalled>
  status = xTaskCreate(Setting_task, "Setting_task", 500,NULL,2, &handle_setting_task) ;
 8000b30:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <main+0x118>)
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	2302      	movs	r3, #2
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b3e:	491e      	ldr	r1, [pc, #120]	; (8000bb8 <main+0x11c>)
 8000b40:	481e      	ldr	r0, [pc, #120]	; (8000bbc <main+0x120>)
 8000b42:	f005 fc65 	bl	8006410 <xTaskCreate>
 8000b46:	6078      	str	r0, [r7, #4]
  configASSERT(status == pdPASS) ;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d003      	beq.n	8000b56 <main+0xba>
 8000b4e:	4912      	ldr	r1, [pc, #72]	; (8000b98 <main+0xfc>)
 8000b50:	2079      	movs	r0, #121	; 0x79
 8000b52:	f000 fa91 	bl	8001078 <vAssertCalled>

  q_data = xQueueCreate(128,sizeof(char)) ;
 8000b56:	2200      	movs	r2, #0
 8000b58:	2101      	movs	r1, #1
 8000b5a:	2080      	movs	r0, #128	; 0x80
 8000b5c:	f005 f828 	bl	8005bb0 <xQueueGenericCreate>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <main+0x124>)
 8000b64:	6013      	str	r3, [r2, #0]
  configASSERT(q_data != NULL) ;
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <main+0x124>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d103      	bne.n	8000b76 <main+0xda>
 8000b6e:	490a      	ldr	r1, [pc, #40]	; (8000b98 <main+0xfc>)
 8000b70:	207c      	movs	r0, #124	; 0x7c
 8000b72:	f000 fa81 	bl	8001078 <vAssertCalled>

  /* USER CODE END 2 */
  initTimer();
 8000b76:	f7ff ff5b 	bl	8000a30 <initTimer>

  HAL_UART_Receive_IT(&huart3,(uint8_t *)&user_data,1);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4911      	ldr	r1, [pc, #68]	; (8000bc4 <main+0x128>)
 8000b7e:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <main+0x12c>)
 8000b80:	f003 fc04 	bl	800438c <HAL_UART_Receive_IT>
  vTaskStartScheduler();
 8000b84:	f005 fdb6 	bl	80066f4 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <main+0xec>
 8000b8a:	bf00      	nop
 8000b8c:	200001ec 	.word	0x200001ec
 8000b90:	080089f8 	.word	0x080089f8
 8000b94:	080005e5 	.word	0x080005e5
 8000b98:	08008a04 	.word	0x08008a04
 8000b9c:	200001e8 	.word	0x200001e8
 8000ba0:	08008a18 	.word	0x08008a18
 8000ba4:	08000a61 	.word	0x08000a61
 8000ba8:	200001f0 	.word	0x200001f0
 8000bac:	08008a24 	.word	0x08008a24
 8000bb0:	08000a75 	.word	0x08000a75
 8000bb4:	200001f4 	.word	0x200001f4
 8000bb8:	08008a30 	.word	0x08008a30
 8000bbc:	08000a89 	.word	0x08000a89
 8000bc0:	200001f8 	.word	0x200001f8
 8000bc4:	200001fc 	.word	0x200001fc
 8000bc8:	20000160 	.word	0x20000160

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b094      	sub	sp, #80	; 0x50
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	2234      	movs	r2, #52	; 0x34
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f007 fef2 	bl	80089c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemClock_Config+0xd4>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	4a2a      	ldr	r2, [pc, #168]	; (8000ca0 <SystemClock_Config+0xd4>)
 8000bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfc:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemClock_Config+0xd4>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <SystemClock_Config+0xd8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a25      	ldr	r2, [pc, #148]	; (8000ca4 <SystemClock_Config+0xd8>)
 8000c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <SystemClock_Config+0xd8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c24:	2301      	movs	r3, #1
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c30:	2300      	movs	r3, #0
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c34:	2308      	movs	r3, #8
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c38:	23d8      	movs	r3, #216	; 0xd8
 8000c3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 f981 	bl	8001f54 <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c58:	f000 fa3e 	bl	80010d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c5c:	f001 f92a 	bl	8001eb4 <HAL_PWREx_EnableOverDrive>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c66:	f000 fa37 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	2107      	movs	r1, #7
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 fc11 	bl	80024b0 <HAL_RCC_ClockConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c94:	f000 fa20 	bl	80010d8 <Error_Handler>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3750      	adds	r7, #80	; 0x50
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40007000 	.word	0x40007000

08000ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <MX_I2C1_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <MX_I2C1_Init+0x7c>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000ce4:	f000 ffbe 	bl	8001c64 <HAL_I2C_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cee:	f000 f9f3 	bl	80010d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cf6:	f001 f845 	bl	8001d84 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d00:	f000 f9ea 	bl	80010d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000d08:	f001 f887 	bl	8001e1a <HAL_I2CEx_ConfigDigitalFilter>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 f9e1 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000b0 	.word	0x200000b0
 8000d20:	40005400 	.word	0x40005400
 8000d24:	6000030d 	.word	0x6000030d

08000d28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <MX_SPI1_Init+0x78>)
 8000d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d5e:	2210      	movs	r2, #16
 8000d60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d76:	2207      	movs	r2, #7
 8000d78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d88:	f002 fa10 	bl	80031ac <HAL_SPI_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d92:	f000 f9a1 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200000fc 	.word	0x200000fc
 8000da0:	40013000 	.word	0x40013000

08000da4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000daa:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <MX_USART3_UART_Init+0x5c>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000de8:	f003 fa82 	bl	80042f0 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000df2:	f000 f971 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000160 	.word	0x20000160
 8000e00:	40004800 	.word	0x40004800

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	; 0x30
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b91      	ldr	r3, [pc, #580]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a90      	ldr	r2, [pc, #576]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b8e      	ldr	r3, [pc, #568]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	4b8b      	ldr	r3, [pc, #556]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a8a      	ldr	r2, [pc, #552]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b88      	ldr	r3, [pc, #544]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b85      	ldr	r3, [pc, #532]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a84      	ldr	r2, [pc, #528]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b82      	ldr	r3, [pc, #520]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b7f      	ldr	r3, [pc, #508]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a7e      	ldr	r2, [pc, #504]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b7c      	ldr	r3, [pc, #496]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7a:	4b79      	ldr	r3, [pc, #484]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a78      	ldr	r2, [pc, #480]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b76      	ldr	r3, [pc, #472]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0320 	and.w	r3, r3, #32
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	4b73      	ldr	r3, [pc, #460]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a72      	ldr	r2, [pc, #456]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b70      	ldr	r3, [pc, #448]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eaa:	4b6d      	ldr	r3, [pc, #436]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a6c      	ldr	r2, [pc, #432]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b6a      	ldr	r3, [pc, #424]	; (8001060 <MX_GPIO_Init+0x25c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ec8:	4866      	ldr	r0, [pc, #408]	; (8001064 <MX_GPIO_Init+0x260>)
 8000eca:	f000 feb1 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_Pin_SDCard_GPIO_Port, CS_Pin_SDCard_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed4:	4864      	ldr	r0, [pc, #400]	; (8001068 <MX_GPIO_Init+0x264>)
 8000ed6:	f000 feab 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2140      	movs	r1, #64	; 0x40
 8000ede:	4863      	ldr	r0, [pc, #396]	; (800106c <MX_GPIO_Init+0x268>)
 8000ee0:	f000 fea6 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000eea:	4861      	ldr	r0, [pc, #388]	; (8001070 <MX_GPIO_Init+0x26c>)
 8000eec:	f000 fea0 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	485a      	ldr	r0, [pc, #360]	; (8001070 <MX_GPIO_Init+0x26c>)
 8000f06:	f000 fccf 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f0a:	2332      	movs	r3, #50	; 0x32
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4852      	ldr	r0, [pc, #328]	; (8001070 <MX_GPIO_Init+0x26c>)
 8000f26:	f000 fcbf 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f2a:	2386      	movs	r3, #134	; 0x86
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3a:	230b      	movs	r3, #11
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	484b      	ldr	r0, [pc, #300]	; (8001074 <MX_GPIO_Init+0x270>)
 8000f46:	f000 fcaf 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f4a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	4840      	ldr	r0, [pc, #256]	; (8001064 <MX_GPIO_Init+0x260>)
 8000f64:	f000 fca0 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin_SDCard_Pin */
  GPIO_InitStruct.Pin = CS_Pin_SDCard_Pin;
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_Pin_SDCard_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4839      	ldr	r0, [pc, #228]	; (8001068 <MX_GPIO_Init+0x264>)
 8000f82:	f000 fc91 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f98:	230b      	movs	r3, #11
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4830      	ldr	r0, [pc, #192]	; (8001064 <MX_GPIO_Init+0x260>)
 8000fa4:	f000 fc80 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fa8:	2340      	movs	r3, #64	; 0x40
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	482b      	ldr	r0, [pc, #172]	; (800106c <MX_GPIO_Init+0x268>)
 8000fc0:	f000 fc72 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_GPIO_Init+0x268>)
 8000fd8:	f000 fc66 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fdc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fee:	230a      	movs	r3, #10
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481e      	ldr	r0, [pc, #120]	; (8001074 <MX_GPIO_Init+0x270>)
 8000ffa:	f000 fc55 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4818      	ldr	r0, [pc, #96]	; (8001074 <MX_GPIO_Init+0x270>)
 8001014:	f000 fc48 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001018:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	480f      	ldr	r0, [pc, #60]	; (8001070 <MX_GPIO_Init+0x26c>)
 8001032:	f000 fc39 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001036:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001048:	230b      	movs	r3, #11
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <MX_GPIO_Init+0x268>)
 8001054:	f000 fc28 	bl	80018a8 <HAL_GPIO_Init>

}
 8001058:	bf00      	nop
 800105a:	3730      	adds	r7, #48	; 0x30
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40020400 	.word	0x40020400
 8001068:	40021400 	.word	0x40021400
 800106c:	40021800 	.word	0x40021800
 8001070:	40020800 	.word	0x40020800
 8001074:	40020000 	.word	0x40020000

08001078 <vAssertCalled>:

/* USER CODE BEGIN 4 */
void vAssertCalled(uint32_t ulLine, const char *pcFile)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
    volatile unsigned long ul = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
    (void)pcFile;
    (void)ulLine;
    taskENTER_CRITICAL();
 8001086:	f006 fc9f 	bl	80079c8 <vPortEnterCritical>
    {
        /* Set ul to a non-zero value using the debugger to step out of this
        function. */
        while (ul == 0)
 800108a:	e000      	b.n	800108e <vAssertCalled+0x16>
        {
            __NOP();
 800108c:	bf00      	nop
        while (ul == 0)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0fb      	beq.n	800108c <vAssertCalled+0x14>
        }
    }
    taskEXIT_CRITICAL();
 8001094:	f006 fcc4 	bl	8007a20 <vPortExitCritical>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	;
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010c6:	f000 fa5b 	bl	8001580 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40001000 	.word	0x40001000

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_MspInit+0x44>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_MspInit+0x44>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_MspInit+0x44>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_MspInit+0x44>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_MspInit+0x44>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_MspInit+0x44>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b0ae      	sub	sp, #184	; 0xb8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2290      	movs	r2, #144	; 0x90
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f007 fc39 	bl	80089c4 <memset>
  if(hi2c->Instance==I2C1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <HAL_I2C_MspInit+0xb4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d13c      	bne.n	80011d6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800115c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001160:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001162:	2300      	movs	r3, #0
 8001164:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4618      	mov	r0, r3
 800116c:	f001 fbf6 	bl	800295c <HAL_RCCEx_PeriphCLKConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001176:	f7ff ffaf 	bl	80010d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <HAL_I2C_MspInit+0xb8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <HAL_I2C_MspInit+0xb8>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_I2C_MspInit+0xb8>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001192:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119a:	2312      	movs	r3, #18
 800119c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ac:	2304      	movs	r3, #4
 80011ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b6:	4619      	mov	r1, r3
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <HAL_I2C_MspInit+0xbc>)
 80011ba:	f000 fb75 	bl	80018a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_I2C_MspInit+0xb8>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_I2C_MspInit+0xb8>)
 80011c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_I2C_MspInit+0xb8>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	37b8      	adds	r7, #184	; 0xb8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40005400 	.word	0x40005400
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020400 	.word	0x40020400

080011ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a25      	ldr	r2, [pc, #148]	; (80012a0 <HAL_SPI_MspInit+0xb4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d143      	bne.n	8001296 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800120e:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a24      	ldr	r2, [pc, #144]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 8001214:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001256:	2360      	movs	r3, #96	; 0x60
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001266:	2305      	movs	r3, #5
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <HAL_SPI_MspInit+0xbc>)
 8001272:	f000 fb19 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001286:	2305      	movs	r3, #5
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	4806      	ldr	r0, [pc, #24]	; (80012ac <HAL_SPI_MspInit+0xc0>)
 8001292:	f000 fb09 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	; 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40013000 	.word	0x40013000
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020c00 	.word	0x40020c00

080012b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0ae      	sub	sp, #184	; 0xb8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2290      	movs	r2, #144	; 0x90
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f007 fb77 	bl	80089c4 <memset>
  if(huart->Instance==USART3)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_UART_MspInit+0xc4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d144      	bne.n	800136a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 fb34 	bl	800295c <HAL_RCCEx_PeriphCLKConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012fa:	f7ff feed 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_UART_MspInit+0xc8>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_UART_MspInit+0xc8>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_UART_MspInit+0xc8>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_UART_MspInit+0xc8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <HAL_UART_MspInit+0xc8>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_UART_MspInit+0xc8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800132e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001348:	2307      	movs	r3, #7
 800134a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001352:	4619      	mov	r1, r3
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <HAL_UART_MspInit+0xcc>)
 8001356:	f000 faa7 	bl	80018a8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2106      	movs	r1, #6
 800135e:	2027      	movs	r0, #39	; 0x27
 8001360:	f000 f9e6 	bl	8001730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001364:	2027      	movs	r0, #39	; 0x27
 8001366:	f000 f9ff 	bl	8001768 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	37b8      	adds	r7, #184	; 0xb8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40004800 	.word	0x40004800
 8001378:	40023800 	.word	0x40023800
 800137c:	40020c00 	.word	0x40020c00

08001380 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	2036      	movs	r0, #54	; 0x36
 8001396:	f000 f9cb 	bl	8001730 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800139a:	2036      	movs	r0, #54	; 0x36
 800139c:	f000 f9e4 	bl	8001768 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <HAL_InitTick+0xa0>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <HAL_InitTick+0xa0>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <HAL_InitTick+0xa0>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013b8:	f107 0210 	add.w	r2, r7, #16
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fa98 	bl	80028f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80013c8:	f001 fa6e 	bl	80028a8 <HAL_RCC_GetPCLK1Freq>
 80013cc:	4603      	mov	r3, r0
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d4:	4a13      	ldr	r2, [pc, #76]	; (8001424 <HAL_InitTick+0xa4>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0c9b      	lsrs	r3, r3, #18
 80013dc:	3b01      	subs	r3, #1
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_InitTick+0xa8>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <HAL_InitTick+0xac>)
 80013e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_InitTick+0xa8>)
 80013e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ee:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <HAL_InitTick+0xa8>)
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_InitTick+0xa8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_InitTick+0xa8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001400:	4809      	ldr	r0, [pc, #36]	; (8001428 <HAL_InitTick+0xa8>)
 8001402:	f002 fc95 	bl	8003d30 <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d104      	bne.n	8001416 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800140c:	4806      	ldr	r0, [pc, #24]	; (8001428 <HAL_InitTick+0xa8>)
 800140e:	f002 fcf1 	bl	8003df4 <HAL_TIM_Base_Start_IT>
 8001412:	4603      	mov	r3, r0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	431bde83 	.word	0x431bde83
 8001428:	20000200 	.word	0x20000200
 800142c:	40001000 	.word	0x40001000

08001430 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <SDTimer_Handler+0x40>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b29b      	uxth	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <SDTimer_Handler+0x1c>
    Timer1--;
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <SDTimer_Handler+0x40>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	3b01      	subs	r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <SDTimer_Handler+0x40>)
 800144a:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <SDTimer_Handler+0x44>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <SDTimer_Handler+0x34>
    Timer2--;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <SDTimer_Handler+0x44>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SDTimer_Handler+0x44>)
 8001462:	801a      	strh	r2, [r3, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	2000024e 	.word	0x2000024e
 8001474:	20000250 	.word	0x20000250

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <USART3_IRQHandler+0x10>)
 80014aa:	f002 ffbd 	bl	8004428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000160 	.word	0x20000160

080014b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	  FatFsCnt++;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <TIM6_DAC_IRQHandler+0x30>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <TIM6_DAC_IRQHandler+0x30>)
 80014c8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <TIM6_DAC_IRQHandler+0x30>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b09      	cmp	r3, #9
 80014d2:	d904      	bls.n	80014de <TIM6_DAC_IRQHandler+0x26>
	  {
	    FatFsCnt = 0;
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <TIM6_DAC_IRQHandler+0x30>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80014da:	f7ff ffa9 	bl	8001430 <SDTimer_Handler>
	  }
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <TIM6_DAC_IRQHandler+0x34>)
 80014e0:	f002 fd00 	bl	8003ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000024c 	.word	0x2000024c
 80014ec:	20000200 	.word	0x20000200

080014f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <SystemInit+0x20>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <SystemInit+0x20>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800154c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800151a:	490e      	ldr	r1, [pc, #56]	; (8001554 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001530:	4c0b      	ldr	r4, [pc, #44]	; (8001560 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800153e:	f7ff ffd7 	bl	80014f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001542:	f007 fa0d 	bl	8008960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001546:	f7ff faa9 	bl	8000a9c <main>
  bx  lr    
 800154a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800154c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001558:	08008b5c 	.word	0x08008b5c
  ldr r2, =_sbss
 800155c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001560:	20019418 	.word	0x20019418

08001564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC_IRQHandler>

08001566 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156a:	2003      	movs	r0, #3
 800156c:	f000 f8d5 	bl	800171a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001570:	200f      	movs	r0, #15
 8001572:	f7ff ff05 	bl	8001380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001576:	f7ff fdb5 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x20>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x24>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_IncTick+0x24>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000014 	.word	0x20000014
 80015a4:	20000254 	.word	0x20000254

080015a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000254 	.word	0x20000254

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <__NVIC_SetPriorityGrouping+0x40>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x40>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00
 8001604:	05fa0000 	.word	0x05fa0000

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0b      	blt.n	800164e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <__NVIC_EnableIRQ+0x38>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff4c 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001742:	f7ff ff61 	bl	8001608 <__NVIC_GetPriorityGrouping>
 8001746:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	6978      	ldr	r0, [r7, #20]
 800174e:	f7ff ffb1 	bl	80016b4 <NVIC_EncodePriority>
 8001752:	4602      	mov	r2, r0
 8001754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff80 	bl	8001660 <__NVIC_SetPriority>
}
 8001760:	bf00      	nop
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff54 	bl	8001624 <__NVIC_EnableIRQ>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001792:	f7ff ff09 	bl	80015a8 <HAL_GetTick>
 8001796:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d008      	beq.n	80017b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e052      	b.n	800185c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0216 	bic.w	r2, r2, #22
 80017c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d103      	bne.n	80017e6 <HAL_DMA_Abort+0x62>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0208 	bic.w	r2, r2, #8
 80017f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001806:	e013      	b.n	8001830 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001808:	f7ff fece 	bl	80015a8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b05      	cmp	r3, #5
 8001814:	d90c      	bls.n	8001830 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2220      	movs	r2, #32
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e015      	b.n	800185c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1e4      	bne.n	8001808 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	223f      	movs	r2, #63	; 0x3f
 8001844:	409a      	lsls	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d004      	beq.n	8001882 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00c      	b.n	800189c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2205      	movs	r2, #5
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e175      	b.n	8001bb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 8164 	bne.w	8001bae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d005      	beq.n	80018fe <HAL_GPIO_Init+0x56>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d130      	bne.n	8001960 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 0201 	and.w	r2, r3, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b03      	cmp	r3, #3
 800196a:	d017      	beq.n	800199c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d123      	bne.n	80019f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80be 	beq.w	8001bae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	4b66      	ldr	r3, [pc, #408]	; (8001bcc <HAL_GPIO_Init+0x324>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a65      	ldr	r2, [pc, #404]	; (8001bcc <HAL_GPIO_Init+0x324>)
 8001a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_GPIO_Init+0x324>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a4a:	4a61      	ldr	r2, [pc, #388]	; (8001bd0 <HAL_GPIO_Init+0x328>)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	220f      	movs	r2, #15
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a58      	ldr	r2, [pc, #352]	; (8001bd4 <HAL_GPIO_Init+0x32c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d037      	beq.n	8001ae6 <HAL_GPIO_Init+0x23e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a57      	ldr	r2, [pc, #348]	; (8001bd8 <HAL_GPIO_Init+0x330>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d031      	beq.n	8001ae2 <HAL_GPIO_Init+0x23a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a56      	ldr	r2, [pc, #344]	; (8001bdc <HAL_GPIO_Init+0x334>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d02b      	beq.n	8001ade <HAL_GPIO_Init+0x236>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a55      	ldr	r2, [pc, #340]	; (8001be0 <HAL_GPIO_Init+0x338>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d025      	beq.n	8001ada <HAL_GPIO_Init+0x232>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a54      	ldr	r2, [pc, #336]	; (8001be4 <HAL_GPIO_Init+0x33c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01f      	beq.n	8001ad6 <HAL_GPIO_Init+0x22e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a53      	ldr	r2, [pc, #332]	; (8001be8 <HAL_GPIO_Init+0x340>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_GPIO_Init+0x22a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a52      	ldr	r2, [pc, #328]	; (8001bec <HAL_GPIO_Init+0x344>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0x226>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a51      	ldr	r2, [pc, #324]	; (8001bf0 <HAL_GPIO_Init+0x348>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00d      	beq.n	8001aca <HAL_GPIO_Init+0x222>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a50      	ldr	r2, [pc, #320]	; (8001bf4 <HAL_GPIO_Init+0x34c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x21e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4f      	ldr	r2, [pc, #316]	; (8001bf8 <HAL_GPIO_Init+0x350>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x21a>
 8001abe:	2309      	movs	r3, #9
 8001ac0:	e012      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ac2:	230a      	movs	r3, #10
 8001ac4:	e010      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	e00e      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001aca:	2307      	movs	r3, #7
 8001acc:	e00c      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ace:	2306      	movs	r3, #6
 8001ad0:	e00a      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	e008      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e004      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	f002 0203 	and.w	r2, r2, #3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4093      	lsls	r3, r2
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001af8:	4935      	ldr	r1, [pc, #212]	; (8001bd0 <HAL_GPIO_Init+0x328>)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2a:	4a34      	ldr	r2, [pc, #208]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b30:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	f67f ae86 	bls.w	80018c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40021400 	.word	0x40021400
 8001bec:	40021800 	.word	0x40021800
 8001bf0:	40021c00 	.word	0x40021c00
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	40022400 	.word	0x40022400
 8001bfc:	40013c00 	.word	0x40013c00

08001c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e001      	b.n	8001c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e07f      	b.n	8001d76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d106      	bne.n	8001c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fa4e 	bl	800112c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2224      	movs	r2, #36	; 0x24
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d107      	bne.n	8001cde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	e006      	b.n	8001cec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d104      	bne.n	8001cfe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_I2C_Init+0x11c>)
 8001d0a:	430b      	orrs	r3, r1
 8001d0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69d9      	ldr	r1, [r3, #28]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1a      	ldr	r2, [r3, #32]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	02008000 	.word	0x02008000

08001d84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d138      	bne.n	8001e0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e032      	b.n	8001e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2224      	movs	r2, #36	; 0x24
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6819      	ldr	r1, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e000      	b.n	8001e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e0c:	2302      	movs	r3, #2
  }
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d139      	bne.n	8001ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e033      	b.n	8001ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2224      	movs	r2, #36	; 0x24
 8001e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0201 	bic.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e000      	b.n	8001ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ea4:	2302      	movs	r3, #2
  }
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee2:	f7ff fb61 	bl	80015a8 <HAL_GetTick>
 8001ee6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ee8:	e009      	b.n	8001efe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eea:	f7ff fb5d 	bl	80015a8 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef8:	d901      	bls.n	8001efe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e022      	b.n	8001f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0a:	d1ee      	bne.n	8001eea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f18:	f7ff fb46 	bl	80015a8 <HAL_GetTick>
 8001f1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f1e:	e009      	b.n	8001f34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f20:	f7ff fb42 	bl	80015a8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f2e:	d901      	bls.n	8001f34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e007      	b.n	8001f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f40:	d1ee      	bne.n	8001f20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000

08001f54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e29b      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8087 	beq.w	8002086 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f78:	4b96      	ldr	r3, [pc, #600]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d00c      	beq.n	8001f9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f84:	4b93      	ldr	r3, [pc, #588]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d112      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62>
 8001f90:	4b90      	ldr	r3, [pc, #576]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9e:	4b8d      	ldr	r3, [pc, #564]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d06c      	beq.n	8002084 <HAL_RCC_OscConfig+0x130>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d168      	bne.n	8002084 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e275      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x7a>
 8001fc0:	4b84      	ldr	r3, [pc, #528]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a83      	ldr	r2, [pc, #524]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	e02e      	b.n	800202c <HAL_RCC_OscConfig+0xd8>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x9c>
 8001fd6:	4b7f      	ldr	r3, [pc, #508]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7e      	ldr	r2, [pc, #504]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b7c      	ldr	r3, [pc, #496]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7b      	ldr	r2, [pc, #492]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e01d      	b.n	800202c <HAL_RCC_OscConfig+0xd8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0xc0>
 8001ffa:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a75      	ldr	r2, [pc, #468]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b73      	ldr	r3, [pc, #460]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a72      	ldr	r2, [pc, #456]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0xd8>
 8002014:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a6e      	ldr	r2, [pc, #440]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 800201a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b6c      	ldr	r3, [pc, #432]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6b      	ldr	r2, [pc, #428]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d013      	beq.n	800205c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7ff fab8 	bl	80015a8 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff fab4 	bl	80015a8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e229      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0xe8>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff faa4 	bl	80015a8 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff faa0 	bl	80015a8 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e215      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	4b57      	ldr	r3, [pc, #348]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x110>
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d069      	beq.n	8002166 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002092:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209e:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d11c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x190>
 80020aa:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_RCC_OscConfig+0x17a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e1e9      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	493d      	ldr	r1, [pc, #244]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	e040      	b.n	8002166 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d023      	beq.n	8002134 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ec:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7ff fa56 	bl	80015a8 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002100:	f7ff fa52 	bl	80015a8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e1c7      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4929      	ldr	r1, [pc, #164]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
 8002132:	e018      	b.n	8002166 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a26      	ldr	r2, [pc, #152]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7ff fa32 	bl	80015a8 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7ff fa2e 	bl	80015a8 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1a3      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d038      	beq.n	80021e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d019      	beq.n	80021ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 800217c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7ff fa0f 	bl	80015a8 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218e:	f7ff fa0b 	bl	80015a8 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e180      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80021a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x23a>
 80021ac:	e01a      	b.n	80021e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80021b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7ff f9f5 	bl	80015a8 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c2:	f7ff f9f1 	bl	80015a8 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d903      	bls.n	80021d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e166      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
 80021d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	4b92      	ldr	r3, [pc, #584]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80021da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ee      	bne.n	80021c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80a4 	beq.w	800233a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f2:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10d      	bne.n	800221a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a88      	ldr	r2, [pc, #544]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b86      	ldr	r3, [pc, #536]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221a:	4b83      	ldr	r3, [pc, #524]	; (8002428 <HAL_RCC_OscConfig+0x4d4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d118      	bne.n	8002258 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002226:	4b80      	ldr	r3, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x4d4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x4d4>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002232:	f7ff f9b9 	bl	80015a8 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223a:	f7ff f9b5 	bl	80015a8 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	; 0x64
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e12a      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800224c:	4b76      	ldr	r3, [pc, #472]	; (8002428 <HAL_RCC_OscConfig+0x4d4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x31a>
 8002260:	4b70      	ldr	r3, [pc, #448]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a6f      	ldr	r2, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	e02d      	b.n	80022ca <HAL_RCC_OscConfig+0x376>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x33c>
 8002276:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6713      	str	r3, [r2, #112]	; 0x70
 8002282:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	4a67      	ldr	r2, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	6713      	str	r3, [r2, #112]	; 0x70
 800228e:	e01c      	b.n	80022ca <HAL_RCC_OscConfig+0x376>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b05      	cmp	r3, #5
 8002296:	d10c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x35e>
 8002298:	4b62      	ldr	r3, [pc, #392]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a61      	ldr	r2, [pc, #388]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
 80022a4:	4b5f      	ldr	r3, [pc, #380]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	4a5e      	ldr	r2, [pc, #376]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6713      	str	r3, [r2, #112]	; 0x70
 80022b0:	e00b      	b.n	80022ca <HAL_RCC_OscConfig+0x376>
 80022b2:	4b5c      	ldr	r3, [pc, #368]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a5b      	ldr	r2, [pc, #364]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
 80022be:	4b59      	ldr	r3, [pc, #356]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a58      	ldr	r2, [pc, #352]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d015      	beq.n	80022fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7ff f969 	bl	80015a8 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7ff f965 	bl	80015a8 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0d8      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ee      	beq.n	80022da <HAL_RCC_OscConfig+0x386>
 80022fc:	e014      	b.n	8002328 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7ff f953 	bl	80015a8 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7ff f94f 	bl	80015a8 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0c2      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ee      	bne.n	8002306 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a3c      	ldr	r2, [pc, #240]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 80ae 	beq.w	80024a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002344:	4b37      	ldr	r3, [pc, #220]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d06d      	beq.n	800242c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d14b      	bne.n	80023f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a31      	ldr	r2, [pc, #196]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800235e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7ff f920 	bl	80015a8 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7ff f91c 	bl	80015a8 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e091      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237e:	4b29      	ldr	r3, [pc, #164]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	019b      	lsls	r3, r3, #6
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	3b01      	subs	r3, #1
 80023a4:	041b      	lsls	r3, r3, #16
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	071b      	lsls	r3, r3, #28
 80023b6:	491b      	ldr	r1, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a18      	ldr	r2, [pc, #96]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80023c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff f8ee 	bl	80015a8 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d0:	f7ff f8ea 	bl	80015a8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e05f      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x47c>
 80023ee:	e057      	b.n	80024a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80023f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff f8d4 	bl	80015a8 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7ff f8d0 	bl	80015a8 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e045      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x4b0>
 8002422:	e03d      	b.n	80024a0 <HAL_RCC_OscConfig+0x54c>
 8002424:	40023800 	.word	0x40023800
 8002428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800242c:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <HAL_RCC_OscConfig+0x558>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d030      	beq.n	800249c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d129      	bne.n	800249c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d122      	bne.n	800249c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800245c:	4013      	ands	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002462:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002464:	4293      	cmp	r3, r2
 8002466:	d119      	bne.n	800249c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	085b      	lsrs	r3, r3, #1
 8002474:	3b01      	subs	r3, #1
 8002476:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d10f      	bne.n	800249c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d107      	bne.n	800249c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800

080024b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0d0      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b6a      	ldr	r3, [pc, #424]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d910      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 020f 	bic.w	r2, r3, #15
 80024de:	4965      	ldr	r1, [pc, #404]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b8      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a58      	ldr	r2, [pc, #352]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800251a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 800252e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002532:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	494d      	ldr	r1, [pc, #308]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d040      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d115      	bne.n	8002592 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e073      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06b      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4936      	ldr	r1, [pc, #216]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a4:	f7ff f800 	bl	80015a8 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7fe fffc 	bl	80015a8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e053      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d210      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 020f 	bic.w	r2, r3, #15
 80025ea:	4922      	ldr	r1, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e032      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4916      	ldr	r1, [pc, #88]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f821 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002646:	4602      	mov	r2, r0
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	490a      	ldr	r1, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x1cc>)
 8002654:	5ccb      	ldrb	r3, [r1, r3]
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1d0>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1d4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fe8c 	bl	8001380 <HAL_InitTick>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00
 8002678:	40023800 	.word	0x40023800
 800267c:	08008b34 	.word	0x08008b34
 8002680:	2000000c 	.word	0x2000000c
 8002684:	20000010 	.word	0x20000010

08002688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800268c:	b094      	sub	sp, #80	; 0x50
 800268e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
 8002694:	2300      	movs	r3, #0
 8002696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002698:	2300      	movs	r3, #0
 800269a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a0:	4b79      	ldr	r3, [pc, #484]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d00d      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x40>
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	f200 80e1 	bhi.w	8002874 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x34>
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d003      	beq.n	80026c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ba:	e0db      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026bc:	4b73      	ldr	r3, [pc, #460]	; (800288c <HAL_RCC_GetSysClockFreq+0x204>)
 80026be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c0:	e0db      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026c2:	4b72      	ldr	r3, [pc, #456]	; (800288c <HAL_RCC_GetSysClockFreq+0x204>)
 80026c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c6:	e0d8      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026d2:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d063      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026de:	4b6a      	ldr	r3, [pc, #424]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	099b      	lsrs	r3, r3, #6
 80026e4:	2200      	movs	r2, #0
 80026e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
 80026f2:	2300      	movs	r3, #0
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
 80026f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026fa:	4622      	mov	r2, r4
 80026fc:	462b      	mov	r3, r5
 80026fe:	f04f 0000 	mov.w	r0, #0
 8002702:	f04f 0100 	mov.w	r1, #0
 8002706:	0159      	lsls	r1, r3, #5
 8002708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800270c:	0150      	lsls	r0, r2, #5
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4621      	mov	r1, r4
 8002714:	1a51      	subs	r1, r2, r1
 8002716:	6139      	str	r1, [r7, #16]
 8002718:	4629      	mov	r1, r5
 800271a:	eb63 0301 	sbc.w	r3, r3, r1
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800272c:	4659      	mov	r1, fp
 800272e:	018b      	lsls	r3, r1, #6
 8002730:	4651      	mov	r1, sl
 8002732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002736:	4651      	mov	r1, sl
 8002738:	018a      	lsls	r2, r1, #6
 800273a:	4651      	mov	r1, sl
 800273c:	ebb2 0801 	subs.w	r8, r2, r1
 8002740:	4659      	mov	r1, fp
 8002742:	eb63 0901 	sbc.w	r9, r3, r1
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800275a:	4690      	mov	r8, r2
 800275c:	4699      	mov	r9, r3
 800275e:	4623      	mov	r3, r4
 8002760:	eb18 0303 	adds.w	r3, r8, r3
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	462b      	mov	r3, r5
 8002768:	eb49 0303 	adc.w	r3, r9, r3
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800277a:	4629      	mov	r1, r5
 800277c:	028b      	lsls	r3, r1, #10
 800277e:	4621      	mov	r1, r4
 8002780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002784:	4621      	mov	r1, r4
 8002786:	028a      	lsls	r2, r1, #10
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800278e:	2200      	movs	r2, #0
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
 8002792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002798:	f7fd fd52 	bl	8000240 <__aeabi_uldivmod>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4613      	mov	r3, r2
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a4:	e058      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a6:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	099b      	lsrs	r3, r3, #6
 80027ac:	2200      	movs	r2, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	4611      	mov	r1, r2
 80027b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027b6:	623b      	str	r3, [r7, #32]
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
 80027bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027c0:	4642      	mov	r2, r8
 80027c2:	464b      	mov	r3, r9
 80027c4:	f04f 0000 	mov.w	r0, #0
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	0159      	lsls	r1, r3, #5
 80027ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027d2:	0150      	lsls	r0, r2, #5
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4641      	mov	r1, r8
 80027da:	ebb2 0a01 	subs.w	sl, r2, r1
 80027de:	4649      	mov	r1, r9
 80027e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027f8:	ebb2 040a 	subs.w	r4, r2, sl
 80027fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	00eb      	lsls	r3, r5, #3
 800280a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800280e:	00e2      	lsls	r2, r4, #3
 8002810:	4614      	mov	r4, r2
 8002812:	461d      	mov	r5, r3
 8002814:	4643      	mov	r3, r8
 8002816:	18e3      	adds	r3, r4, r3
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	464b      	mov	r3, r9
 800281c:	eb45 0303 	adc.w	r3, r5, r3
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800282e:	4629      	mov	r1, r5
 8002830:	028b      	lsls	r3, r1, #10
 8002832:	4621      	mov	r1, r4
 8002834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002838:	4621      	mov	r1, r4
 800283a:	028a      	lsls	r2, r1, #10
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002842:	2200      	movs	r2, #0
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	61fa      	str	r2, [r7, #28]
 8002848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800284c:	f7fd fcf8 	bl	8000240 <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4613      	mov	r3, r2
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	3301      	adds	r3, #1
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800286a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002872:	e002      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetSysClockFreq+0x204>)
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800287c:	4618      	mov	r0, r3
 800287e:	3750      	adds	r7, #80	; 0x50
 8002880:	46bd      	mov	sp, r7
 8002882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	00f42400 	.word	0x00f42400

08002890 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002896:	681b      	ldr	r3, [r3, #0]
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	2000000c 	.word	0x2000000c

080028a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028ac:	f7ff fff0 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	0a9b      	lsrs	r3, r3, #10
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4903      	ldr	r1, [pc, #12]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40023800 	.word	0x40023800
 80028cc:	08008b44 	.word	0x08008b44

080028d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d4:	f7ff ffdc 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	0b5b      	lsrs	r3, r3, #13
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4903      	ldr	r1, [pc, #12]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40023800 	.word	0x40023800
 80028f4:	08008b44 	.word	0x08008b44

080028f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	220f      	movs	r2, #15
 8002906:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_RCC_GetClockConfig+0x5c>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0203 	and.w	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HAL_RCC_GetClockConfig+0x5c>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_RCC_GetClockConfig+0x5c>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_GetClockConfig+0x5c>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	08db      	lsrs	r3, r3, #3
 8002932:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <HAL_RCC_GetClockConfig+0x60>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40023c00 	.word	0x40023c00

0800295c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d012      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002984:	4b69      	ldr	r3, [pc, #420]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a68      	ldr	r2, [pc, #416]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800298e:	6093      	str	r3, [r2, #8]
 8002990:	4b66      	ldr	r3, [pc, #408]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002998:	4964      	ldr	r1, [pc, #400]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d017      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029b6:	4b5d      	ldr	r3, [pc, #372]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c4:	4959      	ldr	r1, [pc, #356]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d4:	d101      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80029e2:	2301      	movs	r3, #1
 80029e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d017      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029f2:	4b4e      	ldr	r3, [pc, #312]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	494a      	ldr	r1, [pc, #296]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a10:	d101      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 808b 	beq.w	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b3a      	ldr	r3, [pc, #232]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4a39      	ldr	r2, [pc, #228]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4c:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a34      	ldr	r2, [pc, #208]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a64:	f7fe fda0 	bl	80015a8 <HAL_GetTick>
 8002a68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7fe fd9c 	bl	80015a8 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e38f      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a8a:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d035      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d02e      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aa8:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ab2:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002abe:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002aca:	4a18      	ldr	r2, [pc, #96]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d114      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fd64 	bl	80015a8 <HAL_GetTick>
 8002ae0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae2:	e00a      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fd60 	bl	80015a8 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e351      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0ee      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b12:	d111      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b22:	400b      	ands	r3, r1
 8002b24:	4901      	ldr	r1, [pc, #4]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40007000 	.word	0x40007000
 8002b34:	0ffffcff 	.word	0x0ffffcff
 8002b38:	4bac      	ldr	r3, [pc, #688]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4aab      	ldr	r2, [pc, #684]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b42:	6093      	str	r3, [r2, #8]
 8002b44:	4ba9      	ldr	r3, [pc, #676]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b50:	49a6      	ldr	r1, [pc, #664]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d010      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b62:	4ba2      	ldr	r3, [pc, #648]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b68:	4aa0      	ldr	r2, [pc, #640]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b72:	4b9e      	ldr	r3, [pc, #632]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	499b      	ldr	r1, [pc, #620]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b90:	4b96      	ldr	r3, [pc, #600]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b9e:	4993      	ldr	r1, [pc, #588]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bb2:	4b8e      	ldr	r3, [pc, #568]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bc0:	498a      	ldr	r1, [pc, #552]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bd4:	4b85      	ldr	r3, [pc, #532]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be2:	4982      	ldr	r1, [pc, #520]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bf6:	4b7d      	ldr	r3, [pc, #500]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4979      	ldr	r1, [pc, #484]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c18:	4b74      	ldr	r3, [pc, #464]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f023 0203 	bic.w	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4971      	ldr	r1, [pc, #452]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c3a:	4b6c      	ldr	r3, [pc, #432]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c40:	f023 020c 	bic.w	r2, r3, #12
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c48:	4968      	ldr	r1, [pc, #416]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c5c:	4b63      	ldr	r3, [pc, #396]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	4960      	ldr	r1, [pc, #384]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c7e:	4b5b      	ldr	r3, [pc, #364]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8c:	4957      	ldr	r1, [pc, #348]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ca0:	4b52      	ldr	r3, [pc, #328]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	494f      	ldr	r1, [pc, #316]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	4946      	ldr	r1, [pc, #280]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ce4:	4b41      	ldr	r3, [pc, #260]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	493e      	ldr	r1, [pc, #248]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d06:	4b39      	ldr	r3, [pc, #228]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d14:	4935      	ldr	r1, [pc, #212]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d28:	4b30      	ldr	r3, [pc, #192]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d36:	492d      	ldr	r1, [pc, #180]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d011      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d4a:	4b28      	ldr	r3, [pc, #160]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d58:	4924      	ldr	r1, [pc, #144]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d68:	d101      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d8a:	4b18      	ldr	r3, [pc, #96]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d98:	4914      	ldr	r1, [pc, #80]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dbc:	490b      	ldr	r1, [pc, #44]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00f      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de0:	4902      	ldr	r1, [pc, #8]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002de8:	e002      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00b      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dfc:	4b8a      	ldr	r3, [pc, #552]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	4986      	ldr	r1, [pc, #536]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00b      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e20:	4b81      	ldr	r3, [pc, #516]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e30:	497d      	ldr	r1, [pc, #500]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d006      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80d6 	beq.w	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e4c:	4b76      	ldr	r3, [pc, #472]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a75      	ldr	r2, [pc, #468]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e58:	f7fe fba6 	bl	80015a8 <HAL_GetTick>
 8002e5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e60:	f7fe fba2 	bl	80015a8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e195      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e72:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d021      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11d      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e92:	4b65      	ldr	r3, [pc, #404]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ea0:	4b61      	ldr	r3, [pc, #388]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea6:	0e1b      	lsrs	r3, r3, #24
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	019a      	lsls	r2, r3, #6
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	061b      	lsls	r3, r3, #24
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	071b      	lsls	r3, r3, #28
 8002ec6:	4958      	ldr	r1, [pc, #352]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee2:	d00a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d02e      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef8:	d129      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002efa:	4b4b      	ldr	r3, [pc, #300]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f08:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f0e:	0f1b      	lsrs	r3, r3, #28
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	019a      	lsls	r2, r3, #6
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	061b      	lsls	r3, r3, #24
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	071b      	lsls	r3, r3, #28
 8002f2e:	493e      	ldr	r1, [pc, #248]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f36:	4b3c      	ldr	r3, [pc, #240]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3c:	f023 021f 	bic.w	r2, r3, #31
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	3b01      	subs	r3, #1
 8002f46:	4938      	ldr	r1, [pc, #224]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01d      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f5a:	4b33      	ldr	r3, [pc, #204]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f60:	0e1b      	lsrs	r3, r3, #24
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f68:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6e:	0f1b      	lsrs	r3, r3, #28
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	019a      	lsls	r2, r3, #6
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	041b      	lsls	r3, r3, #16
 8002f82:	431a      	orrs	r2, r3
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	061b      	lsls	r3, r3, #24
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	071b      	lsls	r3, r3, #28
 8002f8e:	4926      	ldr	r1, [pc, #152]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d011      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	019a      	lsls	r2, r3, #6
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	071b      	lsls	r3, r3, #28
 8002fbe:	491a      	ldr	r1, [pc, #104]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fc6:	4b18      	ldr	r3, [pc, #96]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a17      	ldr	r2, [pc, #92]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd2:	f7fe fae9 	bl	80015a8 <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fda:	f7fe fae5 	bl	80015a8 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	; 0x64
 8002fe6:	d901      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0d8      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fec:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	f040 80ce 	bne.w	800319c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a08      	ldr	r2, [pc, #32]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300c:	f7fe facc 	bl	80015a8 <HAL_GetTick>
 8003010:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003012:	e00b      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003014:	f7fe fac8 	bl	80015a8 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	; 0x64
 8003020:	d904      	bls.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0bb      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800302c:	4b5e      	ldr	r3, [pc, #376]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003038:	d0ec      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003056:	2b00      	cmp	r3, #0
 8003058:	d02e      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d12a      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003062:	4b51      	ldr	r3, [pc, #324]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003070:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	0f1b      	lsrs	r3, r3, #28
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	019a      	lsls	r2, r3, #6
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	041b      	lsls	r3, r3, #16
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	061b      	lsls	r3, r3, #24
 8003090:	431a      	orrs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	071b      	lsls	r3, r3, #28
 8003096:	4944      	ldr	r1, [pc, #272]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800309e:	4b42      	ldr	r3, [pc, #264]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	3b01      	subs	r3, #1
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	493d      	ldr	r1, [pc, #244]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d022      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030cc:	d11d      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030ce:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d4:	0e1b      	lsrs	r3, r3, #24
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030dc:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	0f1b      	lsrs	r3, r3, #28
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	019a      	lsls	r2, r3, #6
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	431a      	orrs	r2, r3
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	061b      	lsls	r3, r3, #24
 80030fc:	431a      	orrs	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	071b      	lsls	r3, r3, #28
 8003102:	4929      	ldr	r1, [pc, #164]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d028      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003116:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	0e1b      	lsrs	r3, r3, #24
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003124:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	019a      	lsls	r2, r3, #6
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	041b      	lsls	r3, r3, #16
 800313c:	431a      	orrs	r2, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	071b      	lsls	r3, r3, #28
 800314a:	4917      	ldr	r1, [pc, #92]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003158:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	4911      	ldr	r1, [pc, #68]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800316e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003174:	f7fe fa18 	bl	80015a8 <HAL_GetTick>
 8003178:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800317c:	f7fe fa14 	bl	80015a8 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e007      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800319a:	d1ef      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e09d      	b.n	80032fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d108      	bne.n	80031d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ce:	d009      	beq.n	80031e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
 80031d6:	e005      	b.n	80031e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fff4 	bl	80011ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003224:	d902      	bls.n	800322c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e002      	b.n	8003232 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800322c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003230:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800323a:	d007      	beq.n	800324c <HAL_SPI_Init+0xa0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003244:	d002      	beq.n	800324c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	ea42 0103 	orr.w	r1, r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	0c1b      	lsrs	r3, r3, #16
 80032a8:	f003 0204 	and.w	r2, r3, #4
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032c8:	ea42 0103 	orr.w	r1, r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b088      	sub	sp, #32
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_SPI_Transmit+0x22>
 8003320:	2302      	movs	r3, #2
 8003322:	e158      	b.n	80035d6 <HAL_SPI_Transmit+0x2d4>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800332c:	f7fe f93c 	bl	80015a8 <HAL_GetTick>
 8003330:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d002      	beq.n	8003348 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003346:	e13d      	b.n	80035c4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_SPI_Transmit+0x52>
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003358:	e134      	b.n	80035c4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2203      	movs	r2, #3
 800335e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	88fa      	ldrh	r2, [r7, #6]
 8003372:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a4:	d10f      	bne.n	80033c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d007      	beq.n	80033e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033ec:	d94b      	bls.n	8003486 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_SPI_Transmit+0xfa>
 80033f6:	8afb      	ldrh	r3, [r7, #22]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d13e      	bne.n	800347a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	881a      	ldrh	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	1c9a      	adds	r2, r3, #2
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003420:	e02b      	b.n	800347a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d112      	bne.n	8003456 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	1c9a      	adds	r2, r3, #2
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003454:	e011      	b.n	800347a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003456:	f7fe f8a7 	bl	80015a8 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d803      	bhi.n	800346e <HAL_SPI_Transmit+0x16c>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d102      	bne.n	8003474 <HAL_SPI_Transmit+0x172>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003478:	e0a4      	b.n	80035c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ce      	bne.n	8003422 <HAL_SPI_Transmit+0x120>
 8003484:	e07c      	b.n	8003580 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_SPI_Transmit+0x192>
 800348e:	8afb      	ldrh	r3, [r7, #22]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d170      	bne.n	8003576 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d912      	bls.n	80034c4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	1c9a      	adds	r2, r3, #2
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b02      	subs	r3, #2
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034c2:	e058      	b.n	8003576 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	7812      	ldrb	r2, [r2, #0]
 80034d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80034ea:	e044      	b.n	8003576 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d12b      	bne.n	8003552 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d912      	bls.n	800352a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	881a      	ldrh	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	1c9a      	adds	r2, r3, #2
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b02      	subs	r3, #2
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003528:	e025      	b.n	8003576 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	330c      	adds	r3, #12
 8003534:	7812      	ldrb	r2, [r2, #0]
 8003536:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003550:	e011      	b.n	8003576 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003552:	f7fe f829 	bl	80015a8 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d803      	bhi.n	800356a <HAL_SPI_Transmit+0x268>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d102      	bne.n	8003570 <HAL_SPI_Transmit+0x26e>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003574:	e026      	b.n	80035c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1b5      	bne.n	80034ec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	6839      	ldr	r1, [r7, #0]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fb69 	bl	8003c5c <SPI_EndRxTxTransaction>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e000      	b.n	80035c4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80035c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b08a      	sub	sp, #40	; 0x28
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035ec:	2301      	movs	r3, #1
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x26>
 8003600:	2302      	movs	r3, #2
 8003602:	e1fb      	b.n	80039fc <HAL_SPI_TransmitReceive+0x41e>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800360c:	f7fd ffcc 	bl	80015a8 <HAL_GetTick>
 8003610:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003618:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003624:	887b      	ldrh	r3, [r7, #2]
 8003626:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003628:	7efb      	ldrb	r3, [r7, #27]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d00e      	beq.n	800364c <HAL_SPI_TransmitReceive+0x6e>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003634:	d106      	bne.n	8003644 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <HAL_SPI_TransmitReceive+0x66>
 800363e:	7efb      	ldrb	r3, [r7, #27]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d003      	beq.n	800364c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003644:	2302      	movs	r3, #2
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800364a:	e1cd      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_SPI_TransmitReceive+0x80>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_SPI_TransmitReceive+0x80>
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003664:	e1c0      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b04      	cmp	r3, #4
 8003670:	d003      	beq.n	800367a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2205      	movs	r2, #5
 8003676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	887a      	ldrh	r2, [r7, #2]
 800368a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	887a      	ldrh	r2, [r7, #2]
 8003692:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	887a      	ldrh	r2, [r7, #2]
 80036a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	887a      	ldrh	r2, [r7, #2]
 80036a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036bc:	d802      	bhi.n	80036c4 <HAL_SPI_TransmitReceive+0xe6>
 80036be:	8a3b      	ldrh	r3, [r7, #16]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d908      	bls.n	80036d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036d2:	605a      	str	r2, [r3, #4]
 80036d4:	e007      	b.n	80036e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d007      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003702:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800370c:	d97c      	bls.n	8003808 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_SPI_TransmitReceive+0x13e>
 8003716:	8a7b      	ldrh	r3, [r7, #18]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d169      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	1c9a      	adds	r2, r3, #2
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003740:	e056      	b.n	80037f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b02      	cmp	r3, #2
 800374e:	d11b      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x1aa>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <HAL_SPI_TransmitReceive+0x1aa>
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	2b01      	cmp	r3, #1
 800375e:	d113      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	881a      	ldrh	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	1c9a      	adds	r2, r3, #2
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d11c      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x1f2>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	b292      	uxth	r2, r2
 80037ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	1c9a      	adds	r2, r3, #2
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037cc:	2301      	movs	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037d0:	f7fd feea 	bl	80015a8 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037dc:	429a      	cmp	r2, r3
 80037de:	d807      	bhi.n	80037f0 <HAL_SPI_TransmitReceive+0x212>
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d003      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80037ee:	e0fb      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1a3      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x164>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d19d      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x164>
 8003806:	e0df      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x23a>
 8003810:	8a7b      	ldrh	r3, [r7, #18]
 8003812:	2b01      	cmp	r3, #1
 8003814:	f040 80cb 	bne.w	80039ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d912      	bls.n	8003848 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	881a      	ldrh	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	1c9a      	adds	r2, r3, #2
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b02      	subs	r3, #2
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003846:	e0b2      	b.n	80039ae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	7812      	ldrb	r2, [r2, #0]
 8003854:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800386e:	e09e      	b.n	80039ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d134      	bne.n	80038e8 <HAL_SPI_TransmitReceive+0x30a>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d02f      	beq.n	80038e8 <HAL_SPI_TransmitReceive+0x30a>
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	2b01      	cmp	r3, #1
 800388c:	d12c      	bne.n	80038e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d912      	bls.n	80038be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	881a      	ldrh	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	1c9a      	adds	r2, r3, #2
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b02      	subs	r3, #2
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038bc:	e012      	b.n	80038e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	7812      	ldrb	r2, [r2, #0]
 80038ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d148      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x3aa>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d042      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d923      	bls.n	8003956 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	b292      	uxth	r2, r2
 800391a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	1c9a      	adds	r2, r3, #2
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b02      	subs	r3, #2
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d81f      	bhi.n	8003984 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	e016      	b.n	8003984 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f103 020c 	add.w	r2, r3, #12
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003984:	2301      	movs	r3, #1
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003988:	f7fd fe0e 	bl	80015a8 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003994:	429a      	cmp	r2, r3
 8003996:	d803      	bhi.n	80039a0 <HAL_SPI_TransmitReceive+0x3c2>
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d102      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x3c8>
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d103      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80039ac:	e01c      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f47f af5b 	bne.w	8003870 <HAL_SPI_TransmitReceive+0x292>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f47f af54 	bne.w	8003870 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f945 	bl	8003c5c <SPI_EndRxTxTransaction>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	661a      	str	r2, [r3, #96]	; 0x60
 80039e4:	e000      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80039e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3728      	adds	r7, #40	; 0x28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a12:	b2db      	uxtb	r3, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a30:	f7fd fdba 	bl	80015a8 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a40:	f7fd fdb2 	bl	80015a8 <HAL_GetTick>
 8003a44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a46:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	015b      	lsls	r3, r3, #5
 8003a4c:	0d1b      	lsrs	r3, r3, #20
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a56:	e054      	b.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5e:	d050      	beq.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a60:	f7fd fda2 	bl	80015a8 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d902      	bls.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d13d      	bne.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a8e:	d111      	bne.n	8003ab4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a98:	d004      	beq.n	8003aa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa2:	d107      	bne.n	8003ab4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abc:	d10f      	bne.n	8003ade <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003adc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e017      	b.n	8003b22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d19b      	bne.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	2000000c 	.word	0x2000000c

08003b30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b42:	f7fd fd31 	bl	80015a8 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	4413      	add	r3, r2
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003b52:	f7fd fd29 	bl	80015a8 <HAL_GetTick>
 8003b56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b60:	4b3d      	ldr	r3, [pc, #244]	; (8003c58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	00da      	lsls	r2, r3, #3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	0d1b      	lsrs	r3, r3, #20
 8003b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b72:	fb02 f303 	mul.w	r3, r2, r3
 8003b76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b78:	e060      	b.n	8003c3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b80:	d107      	bne.n	8003b92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d104      	bne.n	8003b92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d050      	beq.n	8003c3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b9a:	f7fd fd05 	bl	80015a8 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d902      	bls.n	8003bb0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d13d      	bne.n	8003c2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc8:	d111      	bne.n	8003bee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd2:	d004      	beq.n	8003bde <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bdc:	d107      	bne.n	8003bee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf6:	d10f      	bne.n	8003c18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e010      	b.n	8003c4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d196      	bne.n	8003b7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3728      	adds	r7, #40	; 0x28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	2000000c 	.word	0x2000000c

08003c5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f7ff ff5b 	bl	8003b30 <SPI_WaitFifoStateUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e046      	b.n	8003d1e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c90:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <SPI_EndRxTxTransaction+0xcc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <SPI_EndRxTxTransaction+0xd0>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	0d5b      	lsrs	r3, r3, #21
 8003c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cae:	d112      	bne.n	8003cd6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff feb0 	bl	8003a20 <SPI_WaitFlagStateUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cca:	f043 0220 	orr.w	r2, r3, #32
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e023      	b.n	8003d1e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d0f2      	beq.n	8003cd6 <SPI_EndRxTxTransaction+0x7a>
 8003cf0:	e000      	b.n	8003cf4 <SPI_EndRxTxTransaction+0x98>
        break;
 8003cf2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff ff15 	bl	8003b30 <SPI_WaitFifoStateUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e000      	b.n	8003d1e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	2000000c 	.word	0x2000000c
 8003d2c:	165e9f81 	.word	0x165e9f81

08003d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e049      	b.n	8003dd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f841 	bl	8003dde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f000 fa00 	bl	8004174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d001      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e054      	b.n	8003eb6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a26      	ldr	r2, [pc, #152]	; (8003ec4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d022      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x80>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e36:	d01d      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x80>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a22      	ldr	r2, [pc, #136]	; (8003ec8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d018      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x80>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a21      	ldr	r2, [pc, #132]	; (8003ecc <HAL_TIM_Base_Start_IT+0xd8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d013      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x80>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00e      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x80>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d009      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x80>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x80>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	; (8003edc <HAL_TIM_Base_Start_IT+0xe8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d115      	bne.n	8003ea0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <HAL_TIM_Base_Start_IT+0xec>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d015      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0xbe>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8c:	d011      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0201 	orr.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9e:	e008      	b.n	8003eb2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e000      	b.n	8003eb4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800
 8003ed0:	40000c00 	.word	0x40000c00
 8003ed4:	40010400 	.word	0x40010400
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40001800 	.word	0x40001800
 8003ee0:	00010007 	.word	0x00010007

08003ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d122      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d11b      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0202 	mvn.w	r2, #2
 8003f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f905 	bl	8004136 <HAL_TIM_IC_CaptureCallback>
 8003f2c:	e005      	b.n	8003f3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8f7 	bl	8004122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f908 	bl	800414a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d122      	bne.n	8003f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d11b      	bne.n	8003f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0204 	mvn.w	r2, #4
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8db 	bl	8004136 <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8cd 	bl	8004122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f8de 	bl	800414a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d122      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d11b      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0208 	mvn.w	r2, #8
 8003fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8b1 	bl	8004136 <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8a3 	bl	8004122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8b4 	bl	800414a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	2b10      	cmp	r3, #16
 8003ff4:	d122      	bne.n	800403c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b10      	cmp	r3, #16
 8004002:	d11b      	bne.n	800403c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0210 	mvn.w	r2, #16
 800400c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2208      	movs	r2, #8
 8004012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f887 	bl	8004136 <HAL_TIM_IC_CaptureCallback>
 8004028:	e005      	b.n	8004036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f879 	bl	8004122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f88a 	bl	800414a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b01      	cmp	r3, #1
 8004048:	d10e      	bne.n	8004068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	d107      	bne.n	8004068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0201 	mvn.w	r2, #1
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd f826 	bl	80010b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004072:	2b80      	cmp	r3, #128	; 0x80
 8004074:	d10e      	bne.n	8004094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	2b80      	cmp	r3, #128	; 0x80
 8004082:	d107      	bne.n	8004094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800408c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f91a 	bl	80042c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a2:	d10e      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	2b80      	cmp	r3, #128	; 0x80
 80040b0:	d107      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f90d 	bl	80042dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d10e      	bne.n	80040ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b40      	cmp	r3, #64	; 0x40
 80040dc:	d107      	bne.n	80040ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f838 	bl	800415e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d10e      	bne.n	800411a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b20      	cmp	r3, #32
 8004108:	d107      	bne.n	800411a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f06f 0220 	mvn.w	r2, #32
 8004112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f8cd 	bl	80042b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a40      	ldr	r2, [pc, #256]	; (8004288 <TIM_Base_SetConfig+0x114>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d013      	beq.n	80041b4 <TIM_Base_SetConfig+0x40>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004192:	d00f      	beq.n	80041b4 <TIM_Base_SetConfig+0x40>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a3d      	ldr	r2, [pc, #244]	; (800428c <TIM_Base_SetConfig+0x118>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00b      	beq.n	80041b4 <TIM_Base_SetConfig+0x40>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a3c      	ldr	r2, [pc, #240]	; (8004290 <TIM_Base_SetConfig+0x11c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d007      	beq.n	80041b4 <TIM_Base_SetConfig+0x40>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a3b      	ldr	r2, [pc, #236]	; (8004294 <TIM_Base_SetConfig+0x120>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_Base_SetConfig+0x40>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a3a      	ldr	r2, [pc, #232]	; (8004298 <TIM_Base_SetConfig+0x124>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d108      	bne.n	80041c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a2f      	ldr	r2, [pc, #188]	; (8004288 <TIM_Base_SetConfig+0x114>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d02b      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d4:	d027      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a2c      	ldr	r2, [pc, #176]	; (800428c <TIM_Base_SetConfig+0x118>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d023      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a2b      	ldr	r2, [pc, #172]	; (8004290 <TIM_Base_SetConfig+0x11c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01f      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a2a      	ldr	r2, [pc, #168]	; (8004294 <TIM_Base_SetConfig+0x120>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01b      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a29      	ldr	r2, [pc, #164]	; (8004298 <TIM_Base_SetConfig+0x124>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d017      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a28      	ldr	r2, [pc, #160]	; (800429c <TIM_Base_SetConfig+0x128>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a27      	ldr	r2, [pc, #156]	; (80042a0 <TIM_Base_SetConfig+0x12c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00f      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a26      	ldr	r2, [pc, #152]	; (80042a4 <TIM_Base_SetConfig+0x130>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00b      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a25      	ldr	r2, [pc, #148]	; (80042a8 <TIM_Base_SetConfig+0x134>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d007      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a24      	ldr	r2, [pc, #144]	; (80042ac <TIM_Base_SetConfig+0x138>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d003      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a23      	ldr	r2, [pc, #140]	; (80042b0 <TIM_Base_SetConfig+0x13c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d108      	bne.n	8004238 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <TIM_Base_SetConfig+0x114>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_Base_SetConfig+0xf8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a0c      	ldr	r2, [pc, #48]	; (8004298 <TIM_Base_SetConfig+0x124>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d103      	bne.n	8004274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	615a      	str	r2, [r3, #20]
}
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40010000 	.word	0x40010000
 800428c:	40000400 	.word	0x40000400
 8004290:	40000800 	.word	0x40000800
 8004294:	40000c00 	.word	0x40000c00
 8004298:	40010400 	.word	0x40010400
 800429c:	40014000 	.word	0x40014000
 80042a0:	40014400 	.word	0x40014400
 80042a4:	40014800 	.word	0x40014800
 80042a8:	40001800 	.word	0x40001800
 80042ac:	40001c00 	.word	0x40001c00
 80042b0:	40002000 	.word	0x40002000

080042b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e040      	b.n	8004384 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fc ffcc 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2224      	movs	r2, #36	; 0x24
 800431c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fb84 	bl	8004a3c <UART_SetConfig>
 8004334:	4603      	mov	r3, r0
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e022      	b.n	8004384 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fddc 	bl	8004f04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800435a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800436a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fe63 	bl	8005048 <UART_CheckIdleState>
 8004382:	4603      	mov	r3, r0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	; 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	4613      	mov	r3, r2
 8004398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d13d      	bne.n	800441e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_UART_Receive_IT+0x22>
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e036      	b.n	8004420 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_UART_Receive_IT+0x34>
 80043bc:	2302      	movs	r3, #2
 80043be:	e02f      	b.n	8004420 <HAL_UART_Receive_IT+0x94>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d018      	beq.n	800440e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	623b      	str	r3, [r7, #32]
 80043fc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	69f9      	ldr	r1, [r7, #28]
 8004400:	6a3a      	ldr	r2, [r7, #32]
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	61bb      	str	r3, [r7, #24]
   return(result);
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e6      	bne.n	80043dc <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	461a      	mov	r2, r3
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 ff25 	bl	8005264 <UART_Start_Receive_IT>
 800441a:	4603      	mov	r3, r0
 800441c:	e000      	b.n	8004420 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800441e:	2302      	movs	r3, #2
  }
}
 8004420:	4618      	mov	r0, r3
 8004422:	3728      	adds	r7, #40	; 0x28
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b0ba      	sub	sp, #232	; 0xe8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800444e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004452:	f640 030f 	movw	r3, #2063	; 0x80f
 8004456:	4013      	ands	r3, r2
 8004458:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800445c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d115      	bne.n	8004490 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00f      	beq.n	8004490 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d009      	beq.n	8004490 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 82a4 	beq.w	80049ce <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	4798      	blx	r3
      }
      return;
 800448e:	e29e      	b.n	80049ce <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8117 	beq.w	80046c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800449a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80044a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044aa:	4b85      	ldr	r3, [pc, #532]	; (80046c0 <HAL_UART_IRQHandler+0x298>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 810a 	beq.w	80046c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d011      	beq.n	80044e4 <HAL_UART_IRQHandler+0xbc>
 80044c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2201      	movs	r2, #1
 80044d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044da:	f043 0201 	orr.w	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d011      	beq.n	8004514 <HAL_UART_IRQHandler+0xec>
 80044f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2202      	movs	r2, #2
 8004502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800450a:	f043 0204 	orr.w	r2, r3, #4
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d011      	beq.n	8004544 <HAL_UART_IRQHandler+0x11c>
 8004520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00b      	beq.n	8004544 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2204      	movs	r2, #4
 8004532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800453a:	f043 0202 	orr.w	r2, r3, #2
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d017      	beq.n	8004580 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d105      	bne.n	8004568 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800455c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004560:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00b      	beq.n	8004580 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2208      	movs	r2, #8
 800456e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004576:	f043 0208 	orr.w	r2, r3, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004588:	2b00      	cmp	r3, #0
 800458a:	d012      	beq.n	80045b2 <HAL_UART_IRQHandler+0x18a>
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00c      	beq.n	80045b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a8:	f043 0220 	orr.w	r2, r3, #32
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 820a 	beq.w	80049d2 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	d005      	beq.n	800460a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004602:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004606:	2b00      	cmp	r3, #0
 8004608:	d04f      	beq.n	80046aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fef4 	bl	80053f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d141      	bne.n	80046a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3308      	adds	r3, #8
 8004624:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800464a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800464e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1d9      	bne.n	800461e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	2b00      	cmp	r3, #0
 8004670:	d013      	beq.n	800469a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <HAL_UART_IRQHandler+0x29c>)
 8004678:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	4618      	mov	r0, r3
 8004680:	f7fd f8f0 	bl	8001864 <HAL_DMA_Abort_IT>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d017      	beq.n	80046ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004694:	4610      	mov	r0, r2
 8004696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004698:	e00f      	b.n	80046ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f9ae 	bl	80049fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a0:	e00b      	b.n	80046ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f9aa 	bl	80049fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a8:	e007      	b.n	80046ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f9a6 	bl	80049fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80046b8:	e18b      	b.n	80049d2 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ba:	bf00      	nop
    return;
 80046bc:	e189      	b.n	80049d2 <HAL_UART_IRQHandler+0x5aa>
 80046be:	bf00      	nop
 80046c0:	04000120 	.word	0x04000120
 80046c4:	080054bf 	.word	0x080054bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	f040 8144 	bne.w	800495a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 813d 	beq.w	800495a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 8136 	beq.w	800495a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2210      	movs	r2, #16
 80046f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	f040 80b2 	bne.w	800486a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004712:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 815d 	beq.w	80049d6 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004726:	429a      	cmp	r2, r3
 8004728:	f080 8155 	bcs.w	80049d6 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004732:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004740:	f000 8085 	beq.w	800484e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800475c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800476e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004772:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800477a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1da      	bne.n	8004744 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3308      	adds	r3, #8
 8004794:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800479e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3308      	adds	r3, #8
 80047ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e1      	bne.n	800478e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3308      	adds	r3, #8
 80047d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3308      	adds	r3, #8
 80047ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e3      	bne.n	80047ca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800481c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481e:	f023 0310 	bic.w	r3, r3, #16
 8004822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004830:	65bb      	str	r3, [r7, #88]	; 0x58
 8004832:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800483e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e4      	bne.n	800480e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	4618      	mov	r0, r3
 800484a:	f7fc ff9b 	bl	8001784 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800485a:	b29b      	uxth	r3, r3
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	4619      	mov	r1, r3
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f8d4 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004868:	e0b5      	b.n	80049d6 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004876:	b29b      	uxth	r3, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80a7 	beq.w	80049da <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800488c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80a2 	beq.w	80049da <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048b8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e4      	bne.n	8004896 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	623b      	str	r3, [r7, #32]
   return(result);
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3308      	adds	r3, #8
 80048ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048f0:	633a      	str	r2, [r7, #48]	; 0x30
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e3      	bne.n	80048cc <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	60fb      	str	r3, [r7, #12]
   return(result);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0310 	bic.w	r3, r3, #16
 800492a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	69b9      	ldr	r1, [r7, #24]
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	617b      	str	r3, [r7, #20]
   return(result);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e4      	bne.n	8004916 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800494c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f85c 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004958:	e03f      	b.n	80049da <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800495a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00e      	beq.n	8004984 <HAL_UART_IRQHandler+0x55c>
 8004966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800496a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800497a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f853 	bl	8004a28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004982:	e02d      	b.n	80049e0 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00e      	beq.n	80049ae <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01c      	beq.n	80049de <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	4798      	blx	r3
    }
    return;
 80049ac:	e017      	b.n	80049de <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d012      	beq.n	80049e0 <HAL_UART_IRQHandler+0x5b8>
 80049ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00c      	beq.n	80049e0 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fd8f 	bl	80054ea <UART_EndTransmit_IT>
    return;
 80049cc:	e008      	b.n	80049e0 <HAL_UART_IRQHandler+0x5b8>
      return;
 80049ce:	bf00      	nop
 80049d0:	e006      	b.n	80049e0 <HAL_UART_IRQHandler+0x5b8>
    return;
 80049d2:	bf00      	nop
 80049d4:	e004      	b.n	80049e0 <HAL_UART_IRQHandler+0x5b8>
      return;
 80049d6:	bf00      	nop
 80049d8:	e002      	b.n	80049e0 <HAL_UART_IRQHandler+0x5b8>
      return;
 80049da:	bf00      	nop
 80049dc:	e000      	b.n	80049e0 <HAL_UART_IRQHandler+0x5b8>
    return;
 80049de:	bf00      	nop
  }

}
 80049e0:	37e8      	adds	r7, #232	; 0xe8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop

080049e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4ba6      	ldr	r3, [pc, #664]	; (8004d00 <UART_SetConfig+0x2c4>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	6979      	ldr	r1, [r7, #20]
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a94      	ldr	r2, [pc, #592]	; (8004d04 <UART_SetConfig+0x2c8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d120      	bne.n	8004afa <UART_SetConfig+0xbe>
 8004ab8:	4b93      	ldr	r3, [pc, #588]	; (8004d08 <UART_SetConfig+0x2cc>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d816      	bhi.n	8004af4 <UART_SetConfig+0xb8>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <UART_SetConfig+0x90>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004add 	.word	0x08004add
 8004ad0:	08004ae9 	.word	0x08004ae9
 8004ad4:	08004ae3 	.word	0x08004ae3
 8004ad8:	08004aef 	.word	0x08004aef
 8004adc:	2301      	movs	r3, #1
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e150      	b.n	8004d84 <UART_SetConfig+0x348>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e14d      	b.n	8004d84 <UART_SetConfig+0x348>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e14a      	b.n	8004d84 <UART_SetConfig+0x348>
 8004aee:	2308      	movs	r3, #8
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e147      	b.n	8004d84 <UART_SetConfig+0x348>
 8004af4:	2310      	movs	r3, #16
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e144      	b.n	8004d84 <UART_SetConfig+0x348>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a83      	ldr	r2, [pc, #524]	; (8004d0c <UART_SetConfig+0x2d0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d132      	bne.n	8004b6a <UART_SetConfig+0x12e>
 8004b04:	4b80      	ldr	r3, [pc, #512]	; (8004d08 <UART_SetConfig+0x2cc>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0a:	f003 030c 	and.w	r3, r3, #12
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d828      	bhi.n	8004b64 <UART_SetConfig+0x128>
 8004b12:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <UART_SetConfig+0xdc>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b4d 	.word	0x08004b4d
 8004b1c:	08004b65 	.word	0x08004b65
 8004b20:	08004b65 	.word	0x08004b65
 8004b24:	08004b65 	.word	0x08004b65
 8004b28:	08004b59 	.word	0x08004b59
 8004b2c:	08004b65 	.word	0x08004b65
 8004b30:	08004b65 	.word	0x08004b65
 8004b34:	08004b65 	.word	0x08004b65
 8004b38:	08004b53 	.word	0x08004b53
 8004b3c:	08004b65 	.word	0x08004b65
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b65 	.word	0x08004b65
 8004b48:	08004b5f 	.word	0x08004b5f
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e118      	b.n	8004d84 <UART_SetConfig+0x348>
 8004b52:	2302      	movs	r3, #2
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e115      	b.n	8004d84 <UART_SetConfig+0x348>
 8004b58:	2304      	movs	r3, #4
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e112      	b.n	8004d84 <UART_SetConfig+0x348>
 8004b5e:	2308      	movs	r3, #8
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e10f      	b.n	8004d84 <UART_SetConfig+0x348>
 8004b64:	2310      	movs	r3, #16
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e10c      	b.n	8004d84 <UART_SetConfig+0x348>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a68      	ldr	r2, [pc, #416]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d120      	bne.n	8004bb6 <UART_SetConfig+0x17a>
 8004b74:	4b64      	ldr	r3, [pc, #400]	; (8004d08 <UART_SetConfig+0x2cc>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b7e:	2b30      	cmp	r3, #48	; 0x30
 8004b80:	d013      	beq.n	8004baa <UART_SetConfig+0x16e>
 8004b82:	2b30      	cmp	r3, #48	; 0x30
 8004b84:	d814      	bhi.n	8004bb0 <UART_SetConfig+0x174>
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d009      	beq.n	8004b9e <UART_SetConfig+0x162>
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d810      	bhi.n	8004bb0 <UART_SetConfig+0x174>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <UART_SetConfig+0x15c>
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d006      	beq.n	8004ba4 <UART_SetConfig+0x168>
 8004b96:	e00b      	b.n	8004bb0 <UART_SetConfig+0x174>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e0f2      	b.n	8004d84 <UART_SetConfig+0x348>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e0ef      	b.n	8004d84 <UART_SetConfig+0x348>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e0ec      	b.n	8004d84 <UART_SetConfig+0x348>
 8004baa:	2308      	movs	r3, #8
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e0e9      	b.n	8004d84 <UART_SetConfig+0x348>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e0e6      	b.n	8004d84 <UART_SetConfig+0x348>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a56      	ldr	r2, [pc, #344]	; (8004d14 <UART_SetConfig+0x2d8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d120      	bne.n	8004c02 <UART_SetConfig+0x1c6>
 8004bc0:	4b51      	ldr	r3, [pc, #324]	; (8004d08 <UART_SetConfig+0x2cc>)
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bca:	2bc0      	cmp	r3, #192	; 0xc0
 8004bcc:	d013      	beq.n	8004bf6 <UART_SetConfig+0x1ba>
 8004bce:	2bc0      	cmp	r3, #192	; 0xc0
 8004bd0:	d814      	bhi.n	8004bfc <UART_SetConfig+0x1c0>
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d009      	beq.n	8004bea <UART_SetConfig+0x1ae>
 8004bd6:	2b80      	cmp	r3, #128	; 0x80
 8004bd8:	d810      	bhi.n	8004bfc <UART_SetConfig+0x1c0>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <UART_SetConfig+0x1a8>
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d006      	beq.n	8004bf0 <UART_SetConfig+0x1b4>
 8004be2:	e00b      	b.n	8004bfc <UART_SetConfig+0x1c0>
 8004be4:	2300      	movs	r3, #0
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e0cc      	b.n	8004d84 <UART_SetConfig+0x348>
 8004bea:	2302      	movs	r3, #2
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e0c9      	b.n	8004d84 <UART_SetConfig+0x348>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e0c6      	b.n	8004d84 <UART_SetConfig+0x348>
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e0c3      	b.n	8004d84 <UART_SetConfig+0x348>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e0c0      	b.n	8004d84 <UART_SetConfig+0x348>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a44      	ldr	r2, [pc, #272]	; (8004d18 <UART_SetConfig+0x2dc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d125      	bne.n	8004c58 <UART_SetConfig+0x21c>
 8004c0c:	4b3e      	ldr	r3, [pc, #248]	; (8004d08 <UART_SetConfig+0x2cc>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1a:	d017      	beq.n	8004c4c <UART_SetConfig+0x210>
 8004c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c20:	d817      	bhi.n	8004c52 <UART_SetConfig+0x216>
 8004c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c26:	d00b      	beq.n	8004c40 <UART_SetConfig+0x204>
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2c:	d811      	bhi.n	8004c52 <UART_SetConfig+0x216>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <UART_SetConfig+0x1fe>
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c36:	d006      	beq.n	8004c46 <UART_SetConfig+0x20a>
 8004c38:	e00b      	b.n	8004c52 <UART_SetConfig+0x216>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e0a1      	b.n	8004d84 <UART_SetConfig+0x348>
 8004c40:	2302      	movs	r3, #2
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e09e      	b.n	8004d84 <UART_SetConfig+0x348>
 8004c46:	2304      	movs	r3, #4
 8004c48:	77fb      	strb	r3, [r7, #31]
 8004c4a:	e09b      	b.n	8004d84 <UART_SetConfig+0x348>
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e098      	b.n	8004d84 <UART_SetConfig+0x348>
 8004c52:	2310      	movs	r3, #16
 8004c54:	77fb      	strb	r3, [r7, #31]
 8004c56:	e095      	b.n	8004d84 <UART_SetConfig+0x348>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a2f      	ldr	r2, [pc, #188]	; (8004d1c <UART_SetConfig+0x2e0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d125      	bne.n	8004cae <UART_SetConfig+0x272>
 8004c62:	4b29      	ldr	r3, [pc, #164]	; (8004d08 <UART_SetConfig+0x2cc>)
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c70:	d017      	beq.n	8004ca2 <UART_SetConfig+0x266>
 8004c72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c76:	d817      	bhi.n	8004ca8 <UART_SetConfig+0x26c>
 8004c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7c:	d00b      	beq.n	8004c96 <UART_SetConfig+0x25a>
 8004c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c82:	d811      	bhi.n	8004ca8 <UART_SetConfig+0x26c>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <UART_SetConfig+0x254>
 8004c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8c:	d006      	beq.n	8004c9c <UART_SetConfig+0x260>
 8004c8e:	e00b      	b.n	8004ca8 <UART_SetConfig+0x26c>
 8004c90:	2301      	movs	r3, #1
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	e076      	b.n	8004d84 <UART_SetConfig+0x348>
 8004c96:	2302      	movs	r3, #2
 8004c98:	77fb      	strb	r3, [r7, #31]
 8004c9a:	e073      	b.n	8004d84 <UART_SetConfig+0x348>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	e070      	b.n	8004d84 <UART_SetConfig+0x348>
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	77fb      	strb	r3, [r7, #31]
 8004ca6:	e06d      	b.n	8004d84 <UART_SetConfig+0x348>
 8004ca8:	2310      	movs	r3, #16
 8004caa:	77fb      	strb	r3, [r7, #31]
 8004cac:	e06a      	b.n	8004d84 <UART_SetConfig+0x348>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <UART_SetConfig+0x2e4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d138      	bne.n	8004d2a <UART_SetConfig+0x2ee>
 8004cb8:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <UART_SetConfig+0x2cc>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004cc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cc6:	d017      	beq.n	8004cf8 <UART_SetConfig+0x2bc>
 8004cc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ccc:	d82a      	bhi.n	8004d24 <UART_SetConfig+0x2e8>
 8004cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd2:	d00b      	beq.n	8004cec <UART_SetConfig+0x2b0>
 8004cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd8:	d824      	bhi.n	8004d24 <UART_SetConfig+0x2e8>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <UART_SetConfig+0x2aa>
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	d006      	beq.n	8004cf2 <UART_SetConfig+0x2b6>
 8004ce4:	e01e      	b.n	8004d24 <UART_SetConfig+0x2e8>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e04b      	b.n	8004d84 <UART_SetConfig+0x348>
 8004cec:	2302      	movs	r3, #2
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e048      	b.n	8004d84 <UART_SetConfig+0x348>
 8004cf2:	2304      	movs	r3, #4
 8004cf4:	77fb      	strb	r3, [r7, #31]
 8004cf6:	e045      	b.n	8004d84 <UART_SetConfig+0x348>
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e042      	b.n	8004d84 <UART_SetConfig+0x348>
 8004cfe:	bf00      	nop
 8004d00:	efff69f3 	.word	0xefff69f3
 8004d04:	40011000 	.word	0x40011000
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	40004400 	.word	0x40004400
 8004d10:	40004800 	.word	0x40004800
 8004d14:	40004c00 	.word	0x40004c00
 8004d18:	40005000 	.word	0x40005000
 8004d1c:	40011400 	.word	0x40011400
 8004d20:	40007800 	.word	0x40007800
 8004d24:	2310      	movs	r3, #16
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e02c      	b.n	8004d84 <UART_SetConfig+0x348>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a72      	ldr	r2, [pc, #456]	; (8004ef8 <UART_SetConfig+0x4bc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d125      	bne.n	8004d80 <UART_SetConfig+0x344>
 8004d34:	4b71      	ldr	r3, [pc, #452]	; (8004efc <UART_SetConfig+0x4c0>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d42:	d017      	beq.n	8004d74 <UART_SetConfig+0x338>
 8004d44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d48:	d817      	bhi.n	8004d7a <UART_SetConfig+0x33e>
 8004d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4e:	d00b      	beq.n	8004d68 <UART_SetConfig+0x32c>
 8004d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d54:	d811      	bhi.n	8004d7a <UART_SetConfig+0x33e>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <UART_SetConfig+0x326>
 8004d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d5e:	d006      	beq.n	8004d6e <UART_SetConfig+0x332>
 8004d60:	e00b      	b.n	8004d7a <UART_SetConfig+0x33e>
 8004d62:	2300      	movs	r3, #0
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e00d      	b.n	8004d84 <UART_SetConfig+0x348>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e00a      	b.n	8004d84 <UART_SetConfig+0x348>
 8004d6e:	2304      	movs	r3, #4
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e007      	b.n	8004d84 <UART_SetConfig+0x348>
 8004d74:	2308      	movs	r3, #8
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e004      	b.n	8004d84 <UART_SetConfig+0x348>
 8004d7a:	2310      	movs	r3, #16
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e001      	b.n	8004d84 <UART_SetConfig+0x348>
 8004d80:	2310      	movs	r3, #16
 8004d82:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d8c:	d15b      	bne.n	8004e46 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004d8e:	7ffb      	ldrb	r3, [r7, #31]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d828      	bhi.n	8004de6 <UART_SetConfig+0x3aa>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0x360>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dc9 	.word	0x08004dc9
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	08004de7 	.word	0x08004de7
 8004dac:	08004dd7 	.word	0x08004dd7
 8004db0:	08004de7 	.word	0x08004de7
 8004db4:	08004de7 	.word	0x08004de7
 8004db8:	08004de7 	.word	0x08004de7
 8004dbc:	08004ddf 	.word	0x08004ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f7fd fd72 	bl	80028a8 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	61b8      	str	r0, [r7, #24]
        break;
 8004dc6:	e013      	b.n	8004df0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc8:	f7fd fd82 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 8004dcc:	61b8      	str	r0, [r7, #24]
        break;
 8004dce:	e00f      	b.n	8004df0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd0:	4b4b      	ldr	r3, [pc, #300]	; (8004f00 <UART_SetConfig+0x4c4>)
 8004dd2:	61bb      	str	r3, [r7, #24]
        break;
 8004dd4:	e00c      	b.n	8004df0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dd6:	f7fd fc57 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8004dda:	61b8      	str	r0, [r7, #24]
        break;
 8004ddc:	e008      	b.n	8004df0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de2:	61bb      	str	r3, [r7, #24]
        break;
 8004de4:	e004      	b.n	8004df0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	77bb      	strb	r3, [r7, #30]
        break;
 8004dee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d074      	beq.n	8004ee0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	005a      	lsls	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	441a      	add	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2b0f      	cmp	r3, #15
 8004e10:	d916      	bls.n	8004e40 <UART_SetConfig+0x404>
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e18:	d212      	bcs.n	8004e40 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f023 030f 	bic.w	r3, r3, #15
 8004e22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	89fb      	ldrh	r3, [r7, #14]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	89fa      	ldrh	r2, [r7, #14]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	e04f      	b.n	8004ee0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	77bb      	strb	r3, [r7, #30]
 8004e44:	e04c      	b.n	8004ee0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e46:	7ffb      	ldrb	r3, [r7, #31]
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d828      	bhi.n	8004e9e <UART_SetConfig+0x462>
 8004e4c:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <UART_SetConfig+0x418>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004e79 	.word	0x08004e79
 8004e58:	08004e81 	.word	0x08004e81
 8004e5c:	08004e89 	.word	0x08004e89
 8004e60:	08004e9f 	.word	0x08004e9f
 8004e64:	08004e8f 	.word	0x08004e8f
 8004e68:	08004e9f 	.word	0x08004e9f
 8004e6c:	08004e9f 	.word	0x08004e9f
 8004e70:	08004e9f 	.word	0x08004e9f
 8004e74:	08004e97 	.word	0x08004e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e78:	f7fd fd16 	bl	80028a8 <HAL_RCC_GetPCLK1Freq>
 8004e7c:	61b8      	str	r0, [r7, #24]
        break;
 8004e7e:	e013      	b.n	8004ea8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e80:	f7fd fd26 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 8004e84:	61b8      	str	r0, [r7, #24]
        break;
 8004e86:	e00f      	b.n	8004ea8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e88:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <UART_SetConfig+0x4c4>)
 8004e8a:	61bb      	str	r3, [r7, #24]
        break;
 8004e8c:	e00c      	b.n	8004ea8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e8e:	f7fd fbfb 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8004e92:	61b8      	str	r0, [r7, #24]
        break;
 8004e94:	e008      	b.n	8004ea8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e9a:	61bb      	str	r3, [r7, #24]
        break;
 8004e9c:	e004      	b.n	8004ea8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ea6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	085a      	lsrs	r2, r3, #1
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	441a      	add	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b0f      	cmp	r3, #15
 8004ec6:	d909      	bls.n	8004edc <UART_SetConfig+0x4a0>
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ece:	d205      	bcs.n	8004edc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60da      	str	r2, [r3, #12]
 8004eda:	e001      	b.n	8004ee0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004eec:	7fbb      	ldrb	r3, [r7, #30]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40007c00 	.word	0x40007c00
 8004efc:	40023800 	.word	0x40023800
 8004f00:	00f42400 	.word	0x00f42400

08004f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01a      	beq.n	800501a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005002:	d10a      	bne.n	800501a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	605a      	str	r2, [r3, #4]
  }
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af02      	add	r7, sp, #8
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005058:	f7fc faa6 	bl	80015a8 <HAL_GetTick>
 800505c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b08      	cmp	r3, #8
 800506a:	d10e      	bne.n	800508a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800506c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f82d 	bl	80050da <UART_WaitOnFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e023      	b.n	80050d2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d10e      	bne.n	80050b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f817 	bl	80050da <UART_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e00d      	b.n	80050d2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b09c      	sub	sp, #112	; 0x70
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	603b      	str	r3, [r7, #0]
 80050e6:	4613      	mov	r3, r2
 80050e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ea:	e0a5      	b.n	8005238 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f2:	f000 80a1 	beq.w	8005238 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fc fa57 	bl	80015a8 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <UART_WaitOnFlagUntilTimeout+0x32>
 8005106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005108:	2b00      	cmp	r3, #0
 800510a:	d13e      	bne.n	800518a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005120:	667b      	str	r3, [r7, #100]	; 0x64
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800512a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800512c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e6      	bne.n	800510c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3308      	adds	r3, #8
 8005144:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	663b      	str	r3, [r7, #96]	; 0x60
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3308      	adds	r3, #8
 800515c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800515e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005160:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800516c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e5      	bne.n	800513e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e067      	b.n	800525a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d04f      	beq.n	8005238 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a6:	d147      	bne.n	8005238 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d0:	637b      	str	r3, [r7, #52]	; 0x34
 80051d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e6      	bne.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3308      	adds	r3, #8
 80051ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	613b      	str	r3, [r7, #16]
   return(result);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f023 0301 	bic.w	r3, r3, #1
 80051fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3308      	adds	r3, #8
 8005202:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005204:	623a      	str	r2, [r7, #32]
 8005206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	69f9      	ldr	r1, [r7, #28]
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	61bb      	str	r3, [r7, #24]
   return(result);
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e5      	bne.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e010      	b.n	800525a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4013      	ands	r3, r2
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	429a      	cmp	r2, r3
 8005246:	bf0c      	ite	eq
 8005248:	2301      	moveq	r3, #1
 800524a:	2300      	movne	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	429a      	cmp	r2, r3
 8005254:	f43f af4a 	beq.w	80050ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3770      	adds	r7, #112	; 0x70
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005264:	b480      	push	{r7}
 8005266:	b097      	sub	sp, #92	; 0x5c
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	4613      	mov	r3, r2
 8005270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005296:	d10e      	bne.n	80052b6 <UART_Start_Receive_IT+0x52>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <UART_Start_Receive_IT+0x48>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80052a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052aa:	e02d      	b.n	8005308 <UART_Start_Receive_IT+0xa4>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	22ff      	movs	r2, #255	; 0xff
 80052b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052b4:	e028      	b.n	8005308 <UART_Start_Receive_IT+0xa4>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10d      	bne.n	80052da <UART_Start_Receive_IT+0x76>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <UART_Start_Receive_IT+0x6c>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	22ff      	movs	r2, #255	; 0xff
 80052ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052ce:	e01b      	b.n	8005308 <UART_Start_Receive_IT+0xa4>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	227f      	movs	r2, #127	; 0x7f
 80052d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052d8:	e016      	b.n	8005308 <UART_Start_Receive_IT+0xa4>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052e2:	d10d      	bne.n	8005300 <UART_Start_Receive_IT+0x9c>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <UART_Start_Receive_IT+0x92>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	227f      	movs	r2, #127	; 0x7f
 80052f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052f4:	e008      	b.n	8005308 <UART_Start_Receive_IT+0xa4>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	223f      	movs	r2, #63	; 0x3f
 80052fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052fe:	e003      	b.n	8005308 <UART_Start_Receive_IT+0xa4>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2222      	movs	r2, #34	; 0x22
 8005314:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3308      	adds	r3, #8
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	657b      	str	r3, [r7, #84]	; 0x54
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3308      	adds	r3, #8
 8005334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005336:	64ba      	str	r2, [r7, #72]	; 0x48
 8005338:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800533c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	d107      	bne.n	8005364 <UART_Start_Receive_IT+0x100>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d103      	bne.n	8005364 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4a24      	ldr	r2, [pc, #144]	; (80053f0 <UART_Start_Receive_IT+0x18c>)
 8005360:	665a      	str	r2, [r3, #100]	; 0x64
 8005362:	e002      	b.n	800536a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a23      	ldr	r2, [pc, #140]	; (80053f4 <UART_Start_Receive_IT+0x190>)
 8005368:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d019      	beq.n	80053ae <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800538e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
 800539a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800539e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e6      	bne.n	800537a <UART_Start_Receive_IT+0x116>
 80053ac:	e018      	b.n	80053e0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	613b      	str	r3, [r7, #16]
   return(result);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f043 0320 	orr.w	r3, r3, #32
 80053c2:	653b      	str	r3, [r7, #80]	; 0x50
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053cc:	623b      	str	r3, [r7, #32]
 80053ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	69f9      	ldr	r1, [r7, #28]
 80053d2:	6a3a      	ldr	r2, [r7, #32]
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e6      	bne.n	80053ae <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	375c      	adds	r7, #92	; 0x5c
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	0800569b 	.word	0x0800569b
 80053f4:	0800553f 	.word	0x0800553f

080053f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b095      	sub	sp, #84	; 0x54
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005414:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541e:	643b      	str	r3, [r7, #64]	; 0x40
 8005420:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e6      	bne.n	8005400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3308      	adds	r3, #8
 8005438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	61fb      	str	r3, [r7, #28]
   return(result);
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	64bb      	str	r3, [r7, #72]	; 0x48
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3308      	adds	r3, #8
 8005450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e5      	bne.n	8005432 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546a:	2b01      	cmp	r3, #1
 800546c:	d118      	bne.n	80054a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	60bb      	str	r3, [r7, #8]
   return(result);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f023 0310 	bic.w	r3, r3, #16
 8005482:	647b      	str	r3, [r7, #68]	; 0x44
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6979      	ldr	r1, [r7, #20]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	613b      	str	r3, [r7, #16]
   return(result);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e6      	bne.n	800546e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80054b2:	bf00      	nop
 80054b4:	3754      	adds	r7, #84	; 0x54
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff fa8d 	bl	80049fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054e2:	bf00      	nop
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b088      	sub	sp, #32
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	461a      	mov	r2, r3
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6979      	ldr	r1, [r7, #20]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	613b      	str	r3, [r7, #16]
   return(result);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e6      	bne.n	80054f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fa59 	bl	80049e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005536:	bf00      	nop
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b096      	sub	sp, #88	; 0x58
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800554c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005554:	2b22      	cmp	r3, #34	; 0x22
 8005556:	f040 8094 	bne.w	8005682 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005564:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005568:	b2d9      	uxtb	r1, r3
 800556a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800556e:	b2da      	uxtb	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005574:	400a      	ands	r2, r1
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d177      	bne.n	8005692 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055b6:	653b      	str	r3, [r7, #80]	; 0x50
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c0:	647b      	str	r3, [r7, #68]	; 0x44
 80055c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e6      	bne.n	80055a2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3308      	adds	r3, #8
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	623b      	str	r3, [r7, #32]
   return(result);
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055f4:	633a      	str	r2, [r7, #48]	; 0x30
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e5      	bne.n	80055d4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005618:	2b01      	cmp	r3, #1
 800561a:	d12e      	bne.n	800567a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0310 	bic.w	r3, r3, #16
 8005636:	64bb      	str	r3, [r7, #72]	; 0x48
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	69b9      	ldr	r1, [r7, #24]
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	617b      	str	r3, [r7, #20]
   return(result);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e6      	bne.n	8005622 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b10      	cmp	r3, #16
 8005660:	d103      	bne.n	800566a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2210      	movs	r2, #16
 8005668:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff f9cc 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005678:	e00b      	b.n	8005692 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fb fd10 	bl	80010a0 <HAL_UART_RxCpltCallback>
}
 8005680:	e007      	b.n	8005692 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0208 	orr.w	r2, r2, #8
 8005690:	619a      	str	r2, [r3, #24]
}
 8005692:	bf00      	nop
 8005694:	3758      	adds	r7, #88	; 0x58
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b096      	sub	sp, #88	; 0x58
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b0:	2b22      	cmp	r3, #34	; 0x22
 80056b2:	f040 8094 	bne.w	80057de <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80056c6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80056ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80056ce:	4013      	ands	r3, r2
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	1c9a      	adds	r2, r3, #2
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d177      	bne.n	80057ee <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571c:	643b      	str	r3, [r7, #64]	; 0x40
 800571e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e6      	bne.n	80056fe <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3308      	adds	r3, #8
 8005736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	64bb      	str	r3, [r7, #72]	; 0x48
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e5      	bne.n	8005730 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005774:	2b01      	cmp	r3, #1
 8005776:	d12e      	bne.n	80057d6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	60bb      	str	r3, [r7, #8]
   return(result);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f023 0310 	bic.w	r3, r3, #16
 8005792:	647b      	str	r3, [r7, #68]	; 0x44
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6979      	ldr	r1, [r7, #20]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	613b      	str	r3, [r7, #16]
   return(result);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e6      	bne.n	800577e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f003 0310 	and.w	r3, r3, #16
 80057ba:	2b10      	cmp	r3, #16
 80057bc:	d103      	bne.n	80057c6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2210      	movs	r2, #16
 80057c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff f91e 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057d4:	e00b      	b.n	80057ee <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fb fc62 	bl	80010a0 <HAL_UART_RxCpltCallback>
}
 80057dc:	e007      	b.n	80057ee <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0208 	orr.w	r2, r2, #8
 80057ec:	619a      	str	r2, [r3, #24]
}
 80057ee:	bf00      	nop
 80057f0:	3758      	adds	r7, #88	; 0x58
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80057fc:	4904      	ldr	r1, [pc, #16]	; (8005810 <MX_FATFS_Init+0x18>)
 80057fe:	4805      	ldr	r0, [pc, #20]	; (8005814 <MX_FATFS_Init+0x1c>)
 8005800:	f000 f8ae 	bl	8005960 <FATFS_LinkDriver>
 8005804:	4603      	mov	r3, r0
 8005806:	461a      	mov	r2, r3
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <MX_FATFS_Init+0x20>)
 800580a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800580c:	bf00      	nop
 800580e:	bd80      	pop	{r7, pc}
 8005810:	2000025c 	.word	0x2000025c
 8005814:	20000018 	.word	0x20000018
 8005818:	20000258 	.word	0x20000258

0800581c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	4618      	mov	r0, r3
 800582a:	f002 fd79 	bl	8008320 <SD_disk_initialize>
 800582e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	4618      	mov	r0, r3
 8005846:	f002 fe55 	bl	80084f4 <SD_disk_status>
 800584a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4603      	mov	r3, r0
 8005862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8005864:	7bf8      	ldrb	r0, [r7, #15]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	f002 fe58 	bl	8008520 <SD_disk_read>
 8005870:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	4603      	mov	r3, r0
 8005888:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800588a:	7bf8      	ldrb	r0, [r7, #15]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	f002 feaf 	bl	80085f4 <SD_disk_write>
 8005896:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	603a      	str	r2, [r7, #0]
 80058aa:	71fb      	strb	r3, [r7, #7]
 80058ac:	460b      	mov	r3, r1
 80058ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 80058b0:	79b9      	ldrb	r1, [r7, #6]
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f002 ff20 	bl	80086fc <SD_disk_ioctl>
 80058bc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	4613      	mov	r3, r2
 80058d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80058d6:	2301      	movs	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80058de:	4b1f      	ldr	r3, [pc, #124]	; (800595c <FATFS_LinkDriverEx+0x94>)
 80058e0:	7a5b      	ldrb	r3, [r3, #9]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d131      	bne.n	800594c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80058e8:	4b1c      	ldr	r3, [pc, #112]	; (800595c <FATFS_LinkDriverEx+0x94>)
 80058ea:	7a5b      	ldrb	r3, [r3, #9]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	4b1a      	ldr	r3, [pc, #104]	; (800595c <FATFS_LinkDriverEx+0x94>)
 80058f2:	2100      	movs	r1, #0
 80058f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80058f6:	4b19      	ldr	r3, [pc, #100]	; (800595c <FATFS_LinkDriverEx+0x94>)
 80058f8:	7a5b      	ldrb	r3, [r3, #9]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	4a17      	ldr	r2, [pc, #92]	; (800595c <FATFS_LinkDriverEx+0x94>)
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005906:	4b15      	ldr	r3, [pc, #84]	; (800595c <FATFS_LinkDriverEx+0x94>)
 8005908:	7a5b      	ldrb	r3, [r3, #9]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	4b13      	ldr	r3, [pc, #76]	; (800595c <FATFS_LinkDriverEx+0x94>)
 8005910:	4413      	add	r3, r2
 8005912:	79fa      	ldrb	r2, [r7, #7]
 8005914:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005916:	4b11      	ldr	r3, [pc, #68]	; (800595c <FATFS_LinkDriverEx+0x94>)
 8005918:	7a5b      	ldrb	r3, [r3, #9]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	b2d1      	uxtb	r1, r2
 8005920:	4a0e      	ldr	r2, [pc, #56]	; (800595c <FATFS_LinkDriverEx+0x94>)
 8005922:	7251      	strb	r1, [r2, #9]
 8005924:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005926:	7dbb      	ldrb	r3, [r7, #22]
 8005928:	3330      	adds	r3, #48	; 0x30
 800592a:	b2da      	uxtb	r2, r3
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	3301      	adds	r3, #1
 8005934:	223a      	movs	r2, #58	; 0x3a
 8005936:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	3302      	adds	r3, #2
 800593c:	222f      	movs	r2, #47	; 0x2f
 800593e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	3303      	adds	r3, #3
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005948:	2300      	movs	r3, #0
 800594a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800594c:	7dfb      	ldrb	r3, [r7, #23]
}
 800594e:	4618      	mov	r0, r3
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20000260 	.word	0x20000260

08005960 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800596a:	2200      	movs	r2, #0
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7ff ffaa 	bl	80058c8 <FATFS_LinkDriverEx>
 8005974:	4603      	mov	r3, r0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f103 0208 	add.w	r2, r3, #8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f04f 32ff 	mov.w	r2, #4294967295
 8005996:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f103 0208 	add.w	r2, r3, #8
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f103 0208 	add.w	r2, r3, #8
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	601a      	str	r2, [r3, #0]
}
 8005a14:	bf00      	nop
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d103      	bne.n	8005a40 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	e00c      	b.n	8005a5a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3308      	adds	r3, #8
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	e002      	b.n	8005a4e <vListInsert+0x2e>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d2f6      	bcs.n	8005a48 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	601a      	str	r2, [r3, #0]
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a92:	b480      	push	{r7}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6892      	ldr	r2, [r2, #8]
 8005aa8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6852      	ldr	r2, [r2, #4]
 8005ab2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d103      	bne.n	8005ac6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	1e5a      	subs	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d104      	bne.n	8005b06 <xQueueGenericReset+0x1e>
 8005afc:	492a      	ldr	r1, [pc, #168]	; (8005ba8 <xQueueGenericReset+0xc0>)
 8005afe:	f240 100d 	movw	r0, #269	; 0x10d
 8005b02:	f7fb fab9 	bl	8001078 <vAssertCalled>

    taskENTER_CRITICAL();
 8005b06:	f001 ff5f 	bl	80079c8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b16:	fb01 f303 	mul.w	r3, r1, r3
 8005b1a:	441a      	add	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b36:	3b01      	subs	r3, #1
 8005b38:	68f9      	ldr	r1, [r7, #12]
 8005b3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	441a      	add	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	22ff      	movs	r2, #255	; 0xff
 8005b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	22ff      	movs	r2, #255	; 0xff
 8005b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d114      	bne.n	8005b86 <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01a      	beq.n	8005b9a <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3310      	adds	r3, #16
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 f81b 	bl	8006ba4 <xTaskRemoveFromEventList>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d012      	beq.n	8005b9a <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005b74:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <xQueueGenericReset+0xc4>)
 8005b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	e009      	b.n	8005b9a <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3310      	adds	r3, #16
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fef7 	bl	800597e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3324      	adds	r3, #36	; 0x24
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff fef2 	bl	800597e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005b9a:	f001 ff41 	bl	8007a20 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8005b9e:	2301      	movs	r3, #1
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	08008a40 	.word	0x08008a40
 8005bac:	e000ed04 	.word	0xe000ed04

08005bb0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d104      	bne.n	8005bce <xQueueGenericCreate+0x1e>
 8005bc4:	4921      	ldr	r1, [pc, #132]	; (8005c4c <xQueueGenericCreate+0x9c>)
 8005bc6:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8005bca:	f7fb fa55 	bl	8001078 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d006      	beq.n	8005bec <xQueueGenericCreate+0x3c>
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d101      	bne.n	8005bf0 <xQueueGenericCreate+0x40>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <xQueueGenericCreate+0x42>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d104      	bne.n	8005c00 <xQueueGenericCreate+0x50>
 8005bf6:	4915      	ldr	r1, [pc, #84]	; (8005c4c <xQueueGenericCreate+0x9c>)
 8005bf8:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 8005bfc:	f7fb fa3c 	bl	8001078 <vAssertCalled>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005c06:	d904      	bls.n	8005c12 <xQueueGenericCreate+0x62>
 8005c08:	4910      	ldr	r1, [pc, #64]	; (8005c4c <xQueueGenericCreate+0x9c>)
 8005c0a:	f240 1091 	movw	r0, #401	; 0x191
 8005c0e:	f7fb fa33 	bl	8001078 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	3350      	adds	r3, #80	; 0x50
 8005c16:	4618      	mov	r0, r3
 8005c18:	f001 ffe6 	bl	8007be8 <pvPortMalloc>
 8005c1c:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <xQueueGenericCreate+0x90>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	3350      	adds	r3, #80	; 0x50
 8005c2c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c2e:	79fa      	ldrb	r2, [r7, #7]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	4613      	mov	r3, r2
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f808 	bl	8005c50 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005c40:	69bb      	ldr	r3, [r7, #24]
    }
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	08008a40 	.word	0x08008a40

08005c50 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d103      	bne.n	8005c6c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	e002      	b.n	8005c72 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c7e:	2101      	movs	r1, #1
 8005c80:	69b8      	ldr	r0, [r7, #24]
 8005c82:	f7ff ff31 	bl	8005ae8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	78fa      	ldrb	r2, [r7, #3]
 8005c8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005c8e:	bf00      	nop
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <xQueueGenericSend+0x26>
 8005cb4:	496a      	ldr	r1, [pc, #424]	; (8005e60 <xQueueGenericSend+0x1c8>)
 8005cb6:	f44f 7043 	mov.w	r0, #780	; 0x30c
 8005cba:	f7fb f9dd 	bl	8001078 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <xQueueGenericSend+0x34>
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <xQueueGenericSend+0x38>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <xQueueGenericSend+0x3a>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <xQueueGenericSend+0x48>
 8005cd6:	4962      	ldr	r1, [pc, #392]	; (8005e60 <xQueueGenericSend+0x1c8>)
 8005cd8:	f240 300d 	movw	r0, #781	; 0x30d
 8005cdc:	f7fb f9cc 	bl	8001078 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d103      	bne.n	8005cee <xQueueGenericSend+0x56>
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <xQueueGenericSend+0x5a>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <xQueueGenericSend+0x5c>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <xQueueGenericSend+0x6a>
 8005cf8:	4959      	ldr	r1, [pc, #356]	; (8005e60 <xQueueGenericSend+0x1c8>)
 8005cfa:	f240 300e 	movw	r0, #782	; 0x30e
 8005cfe:	f7fb f9bb 	bl	8001078 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d02:	f001 f8dd 	bl	8006ec0 <xTaskGetSchedulerState>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <xQueueGenericSend+0x7a>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <xQueueGenericSend+0x7e>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <xQueueGenericSend+0x80>
 8005d16:	2300      	movs	r3, #0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d104      	bne.n	8005d26 <xQueueGenericSend+0x8e>
 8005d1c:	4950      	ldr	r1, [pc, #320]	; (8005e60 <xQueueGenericSend+0x1c8>)
 8005d1e:	f240 3011 	movw	r0, #785	; 0x311
 8005d22:	f7fb f9a9 	bl	8001078 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005d26:	f001 fe4f 	bl	80079c8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d302      	bcc.n	8005d3c <xQueueGenericSend+0xa4>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d129      	bne.n	8005d90 <xQueueGenericSend+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	6a38      	ldr	r0, [r7, #32]
 8005d42:	f000 f9f7 	bl	8006134 <prvCopyDataToQueue>
 8005d46:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d010      	beq.n	8005d72 <xQueueGenericSend+0xda>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	3324      	adds	r3, #36	; 0x24
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 ff25 	bl	8006ba4 <xTaskRemoveFromEventList>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d013      	beq.n	8005d88 <xQueueGenericSend+0xf0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005d60:	4b40      	ldr	r3, [pc, #256]	; (8005e64 <xQueueGenericSend+0x1cc>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	e00a      	b.n	8005d88 <xQueueGenericSend+0xf0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <xQueueGenericSend+0xf0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005d78:	4b3a      	ldr	r3, [pc, #232]	; (8005e64 <xQueueGenericSend+0x1cc>)
 8005d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005d88:	f001 fe4a 	bl	8007a20 <vPortExitCritical>
                return pdPASS;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e063      	b.n	8005e58 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d103      	bne.n	8005d9e <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005d96:	f001 fe43 	bl	8007a20 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e05c      	b.n	8005e58 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 ff59 	bl	8006c60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005dae:	2301      	movs	r3, #1
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005db2:	f001 fe35 	bl	8007a20 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005db6:	f000 fced 	bl	8006794 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005dba:	f001 fe05 	bl	80079c8 <vPortEnterCritical>
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dc4:	b25b      	sxtb	r3, r3
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d103      	bne.n	8005dd4 <xQueueGenericSend+0x13c>
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dda:	b25b      	sxtb	r3, r3
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de0:	d103      	bne.n	8005dea <xQueueGenericSend+0x152>
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dea:	f001 fe19 	bl	8007a20 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dee:	1d3a      	adds	r2, r7, #4
 8005df0:	f107 0314 	add.w	r3, r7, #20
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 ff48 	bl	8006c8c <xTaskCheckForTimeOut>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d124      	bne.n	8005e4c <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e02:	6a38      	ldr	r0, [r7, #32]
 8005e04:	f000 fa8e 	bl	8006324 <prvIsQueueFull>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d018      	beq.n	8005e40 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	3310      	adds	r3, #16
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fe7c 	bl	8006b14 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005e1c:	6a38      	ldr	r0, [r7, #32]
 8005e1e:	f000 fa19 	bl	8006254 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005e22:	f000 fcc5 	bl	80067b0 <xTaskResumeAll>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f47f af7c 	bne.w	8005d26 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <xQueueGenericSend+0x1cc>)
 8005e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	e772      	b.n	8005d26 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005e40:	6a38      	ldr	r0, [r7, #32]
 8005e42:	f000 fa07 	bl	8006254 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005e46:	f000 fcb3 	bl	80067b0 <xTaskResumeAll>
 8005e4a:	e76c      	b.n	8005d26 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005e4c:	6a38      	ldr	r0, [r7, #32]
 8005e4e:	f000 fa01 	bl	8006254 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005e52:	f000 fcad 	bl	80067b0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005e56:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3728      	adds	r7, #40	; 0x28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	08008a40 	.word	0x08008a40
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08c      	sub	sp, #48	; 0x30
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <xQueueGenericSendFromISR+0x22>
 8005e80:	4943      	ldr	r1, [pc, #268]	; (8005f90 <xQueueGenericSendFromISR+0x128>)
 8005e82:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8005e86:	f7fb f8f7 	bl	8001078 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <xQueueGenericSendFromISR+0x30>
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <xQueueGenericSendFromISR+0x34>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <xQueueGenericSendFromISR+0x36>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <xQueueGenericSendFromISR+0x44>
 8005ea2:	493b      	ldr	r1, [pc, #236]	; (8005f90 <xQueueGenericSendFromISR+0x128>)
 8005ea4:	f240 30e1 	movw	r0, #993	; 0x3e1
 8005ea8:	f7fb f8e6 	bl	8001078 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d103      	bne.n	8005eba <xQueueGenericSendFromISR+0x52>
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <xQueueGenericSendFromISR+0x56>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <xQueueGenericSendFromISR+0x58>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d104      	bne.n	8005ece <xQueueGenericSendFromISR+0x66>
 8005ec4:	4932      	ldr	r1, [pc, #200]	; (8005f90 <xQueueGenericSendFromISR+0x128>)
 8005ec6:	f240 30e2 	movw	r0, #994	; 0x3e2
 8005eca:	f7fb f8d5 	bl	8001078 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ece:	f001 fe57 	bl	8007b80 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8005ed6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005eda:	b672      	cpsid	i
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	b662      	cpsie	i
 8005eea:	61ba      	str	r2, [r7, #24]
 8005eec:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005eee:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d302      	bcc.n	8005f04 <xQueueGenericSendFromISR+0x9c>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d138      	bne.n	8005f76 <xQueueGenericSendFromISR+0x10e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f1a:	f000 f90b 	bl	8006134 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005f1e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d112      	bne.n	8005f4e <xQueueGenericSendFromISR+0xe6>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01f      	beq.n	8005f70 <xQueueGenericSendFromISR+0x108>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	3324      	adds	r3, #36	; 0x24
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fe35 	bl	8006ba4 <xTaskRemoveFromEventList>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d017      	beq.n	8005f70 <xQueueGenericSendFromISR+0x108>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d014      	beq.n	8005f70 <xQueueGenericSendFromISR+0x108>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	e010      	b.n	8005f70 <xQueueGenericSendFromISR+0x108>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005f4e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005f52:	2b7f      	cmp	r3, #127	; 0x7f
 8005f54:	d104      	bne.n	8005f60 <xQueueGenericSendFromISR+0xf8>
 8005f56:	490e      	ldr	r1, [pc, #56]	; (8005f90 <xQueueGenericSendFromISR+0x128>)
 8005f58:	f240 406b 	movw	r0, #1131	; 0x46b
 8005f5c:	f7fb f88c 	bl	8001078 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f64:	3301      	adds	r3, #1
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	b25a      	sxtb	r2, r3
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005f70:	2301      	movs	r3, #1
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        {
 8005f74:	e001      	b.n	8005f7a <xQueueGenericSendFromISR+0x112>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005f84:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3730      	adds	r7, #48	; 0x30
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	08008a40 	.word	0x08008a40

08005f94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	; 0x28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <xQueueReceive+0x24>
 8005fae:	495f      	ldr	r1, [pc, #380]	; (800612c <xQueueReceive+0x198>)
 8005fb0:	f240 502f 	movw	r0, #1327	; 0x52f
 8005fb4:	f7fb f860 	bl	8001078 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d103      	bne.n	8005fc6 <xQueueReceive+0x32>
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <xQueueReceive+0x36>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <xQueueReceive+0x38>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d104      	bne.n	8005fda <xQueueReceive+0x46>
 8005fd0:	4956      	ldr	r1, [pc, #344]	; (800612c <xQueueReceive+0x198>)
 8005fd2:	f240 5033 	movw	r0, #1331	; 0x533
 8005fd6:	f7fb f84f 	bl	8001078 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fda:	f000 ff71 	bl	8006ec0 <xTaskGetSchedulerState>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d102      	bne.n	8005fea <xQueueReceive+0x56>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <xQueueReceive+0x5a>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <xQueueReceive+0x5c>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d104      	bne.n	8005ffe <xQueueReceive+0x6a>
 8005ff4:	494d      	ldr	r1, [pc, #308]	; (800612c <xQueueReceive+0x198>)
 8005ff6:	f44f 60a7 	mov.w	r0, #1336	; 0x538
 8005ffa:	f7fb f83d 	bl	8001078 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005ffe:	f001 fce3 	bl	80079c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01f      	beq.n	800604e <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	6a38      	ldr	r0, [r7, #32]
 8006012:	f000 f8f9 	bl	8006208 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	1e5a      	subs	r2, r3, #1
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00f      	beq.n	8006046 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	3310      	adds	r3, #16
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fdba 	bl	8006ba4 <xTaskRemoveFromEventList>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d007      	beq.n	8006046 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006036:	4b3e      	ldr	r3, [pc, #248]	; (8006130 <xQueueReceive+0x19c>)
 8006038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006046:	f001 fceb 	bl	8007a20 <vPortExitCritical>
                return pdPASS;
 800604a:	2301      	movs	r3, #1
 800604c:	e069      	b.n	8006122 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d103      	bne.n	800605c <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006054:	f001 fce4 	bl	8007a20 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006058:	2300      	movs	r3, #0
 800605a:	e062      	b.n	8006122 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006062:	f107 0314 	add.w	r3, r7, #20
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fdfa 	bl	8006c60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800606c:	2301      	movs	r3, #1
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006070:	f001 fcd6 	bl	8007a20 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006074:	f000 fb8e 	bl	8006794 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006078:	f001 fca6 	bl	80079c8 <vPortEnterCritical>
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006082:	b25b      	sxtb	r3, r3
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d103      	bne.n	8006092 <xQueueReceive+0xfe>
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006098:	b25b      	sxtb	r3, r3
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d103      	bne.n	80060a8 <xQueueReceive+0x114>
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060a8:	f001 fcba 	bl	8007a20 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060ac:	1d3a      	adds	r2, r7, #4
 80060ae:	f107 0314 	add.w	r3, r7, #20
 80060b2:	4611      	mov	r1, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fde9 	bl	8006c8c <xTaskCheckForTimeOut>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d123      	bne.n	8006108 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060c0:	6a38      	ldr	r0, [r7, #32]
 80060c2:	f000 f919 	bl	80062f8 <prvIsQueueEmpty>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d017      	beq.n	80060fc <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	3324      	adds	r3, #36	; 0x24
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	4611      	mov	r1, r2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fd1d 	bl	8006b14 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80060da:	6a38      	ldr	r0, [r7, #32]
 80060dc:	f000 f8ba 	bl	8006254 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80060e0:	f000 fb66 	bl	80067b0 <xTaskResumeAll>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d189      	bne.n	8005ffe <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 80060ea:	4b11      	ldr	r3, [pc, #68]	; (8006130 <xQueueReceive+0x19c>)
 80060ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	e780      	b.n	8005ffe <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80060fc:	6a38      	ldr	r0, [r7, #32]
 80060fe:	f000 f8a9 	bl	8006254 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006102:	f000 fb55 	bl	80067b0 <xTaskResumeAll>
 8006106:	e77a      	b.n	8005ffe <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006108:	6a38      	ldr	r0, [r7, #32]
 800610a:	f000 f8a3 	bl	8006254 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800610e:	f000 fb4f 	bl	80067b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006112:	6a38      	ldr	r0, [r7, #32]
 8006114:	f000 f8f0 	bl	80062f8 <prvIsQueueEmpty>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	f43f af6f 	beq.w	8005ffe <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006120:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006122:	4618      	mov	r0, r3
 8006124:	3728      	adds	r7, #40	; 0x28
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	08008a40 	.word	0x08008a40
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10d      	bne.n	800616e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d14d      	bne.n	80061f6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fecc 	bl	8006efc <xTaskPriorityDisinherit>
 8006164:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	609a      	str	r2, [r3, #8]
 800616c:	e043      	b.n	80061f6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d119      	bne.n	80061a8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6858      	ldr	r0, [r3, #4]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	461a      	mov	r2, r3
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	f002 fc12 	bl	80089a8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	441a      	add	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	429a      	cmp	r2, r3
 800619c:	d32b      	bcc.n	80061f6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	e026      	b.n	80061f6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	68d8      	ldr	r0, [r3, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	461a      	mov	r2, r3
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	f002 fbf8 	bl	80089a8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	425b      	negs	r3, r3
 80061c2:	441a      	add	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d207      	bcs.n	80061e4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	425b      	negs	r3, r3
 80061de:	441a      	add	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d105      	bne.n	80061f6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80061fe:	697b      	ldr	r3, [r7, #20]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d018      	beq.n	800624c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	441a      	add	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	429a      	cmp	r2, r3
 8006232:	d303      	bcc.n	800623c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68d9      	ldr	r1, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	461a      	mov	r2, r3
 8006246:	6838      	ldr	r0, [r7, #0]
 8006248:	f002 fbae 	bl	80089a8 <memcpy>
    }
}
 800624c:	bf00      	nop
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800625c:	f001 fbb4 	bl	80079c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006266:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006268:	e011      	b.n	800628e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	2b00      	cmp	r3, #0
 8006270:	d012      	beq.n	8006298 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3324      	adds	r3, #36	; 0x24
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fc94 	bl	8006ba4 <xTaskRemoveFromEventList>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006282:	f000 fd5f 	bl	8006d44 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	3b01      	subs	r3, #1
 800628a:	b2db      	uxtb	r3, r3
 800628c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800628e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006292:	2b00      	cmp	r3, #0
 8006294:	dce9      	bgt.n	800626a <prvUnlockQueue+0x16>
 8006296:	e000      	b.n	800629a <prvUnlockQueue+0x46>
                        break;
 8006298:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	22ff      	movs	r2, #255	; 0xff
 800629e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80062a2:	f001 fbbd 	bl	8007a20 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80062a6:	f001 fb8f 	bl	80079c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062b0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80062b2:	e011      	b.n	80062d8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d012      	beq.n	80062e2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3310      	adds	r3, #16
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fc6f 	bl	8006ba4 <xTaskRemoveFromEventList>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80062cc:	f000 fd3a 	bl	8006d44 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80062d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	dce9      	bgt.n	80062b4 <prvUnlockQueue+0x60>
 80062e0:	e000      	b.n	80062e4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80062e2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	22ff      	movs	r2, #255	; 0xff
 80062e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80062ec:	f001 fb98 	bl	8007a20 <vPortExitCritical>
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006300:	f001 fb62 	bl	80079c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	e001      	b.n	8006316 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006316:	f001 fb83 	bl	8007a20 <vPortExitCritical>

    return xReturn;
 800631a:	68fb      	ldr	r3, [r7, #12]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800632c:	f001 fb4c 	bl	80079c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006338:	429a      	cmp	r2, r3
 800633a:	d102      	bne.n	8006342 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800633c:	2301      	movs	r3, #1
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e001      	b.n	8006346 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006346:	f001 fb6b 	bl	8007a20 <vPortExitCritical>

    return xReturn;
 800634a:	68fb      	ldr	r3, [r7, #12]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e014      	b.n	800638e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006364:	4a0f      	ldr	r2, [pc, #60]	; (80063a4 <vQueueAddToRegistry+0x50>)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10b      	bne.n	8006388 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006370:	490c      	ldr	r1, [pc, #48]	; (80063a4 <vQueueAddToRegistry+0x50>)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800637a:	4a0a      	ldr	r2, [pc, #40]	; (80063a4 <vQueueAddToRegistry+0x50>)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	4413      	add	r3, r2
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006386:	e006      	b.n	8006396 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b07      	cmp	r3, #7
 8006392:	d9e7      	bls.n	8006364 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	2000026c 	.word	0x2000026c

080063a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80063b8:	f001 fb06 	bl	80079c8 <vPortEnterCritical>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063c2:	b25b      	sxtb	r3, r3
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d103      	bne.n	80063d2 <vQueueWaitForMessageRestricted+0x2a>
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d8:	b25b      	sxtb	r3, r3
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063de:	d103      	bne.n	80063e8 <vQueueWaitForMessageRestricted+0x40>
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063e8:	f001 fb1a 	bl	8007a20 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d106      	bne.n	8006402 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	3324      	adds	r3, #36	; 0x24
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fba9 	bl	8006b54 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006402:	6978      	ldr	r0, [r7, #20]
 8006404:	f7ff ff26 	bl	8006254 <prvUnlockQueue>
    }
 8006408:	bf00      	nop
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006410:	b580      	push	{r7, lr}
 8006412:	b08c      	sub	sp, #48	; 0x30
 8006414:	af04      	add	r7, sp, #16
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	4613      	mov	r3, r2
 800641e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4618      	mov	r0, r3
 8006426:	f001 fbdf 	bl	8007be8 <pvPortMalloc>
 800642a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00e      	beq.n	8006450 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006432:	2058      	movs	r0, #88	; 0x58
 8006434:	f001 fbd8 	bl	8007be8 <pvPortMalloc>
 8006438:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	631a      	str	r2, [r3, #48]	; 0x30
 8006446:	e005      	b.n	8006454 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006448:	6978      	ldr	r0, [r7, #20]
 800644a:	f001 fc9b 	bl	8007d84 <vPortFree>
 800644e:	e001      	b.n	8006454 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8006450:	2300      	movs	r3, #0
 8006452:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d013      	beq.n	8006482 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	2300      	movs	r3, #0
 800645e:	9303      	str	r3, [sp, #12]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	9302      	str	r3, [sp, #8]
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68b9      	ldr	r1, [r7, #8]
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 f80f 	bl	8006494 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006476:	69f8      	ldr	r0, [r7, #28]
 8006478:	f000 f89e 	bl	80065b8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800647c:	2301      	movs	r3, #1
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	e002      	b.n	8006488 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006482:	f04f 33ff 	mov.w	r3, #4294967295
 8006486:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006488:	69bb      	ldr	r3, [r7, #24]
    }
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	461a      	mov	r2, r3
 80064ac:	21a5      	movs	r1, #165	; 0xa5
 80064ae:	f002 fa89 	bl	80089c4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80064bc:	440b      	add	r3, r1
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f023 0307 	bic.w	r3, r3, #7
 80064ca:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <prvInitialiseNewTask+0x4c>
 80064d6:	4937      	ldr	r1, [pc, #220]	; (80065b4 <prvInitialiseNewTask+0x120>)
 80064d8:	f240 3069 	movw	r0, #873	; 0x369
 80064dc:	f7fa fdcc 	bl	8001078 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d01f      	beq.n	8006526 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	e012      	b.n	8006512 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	4413      	add	r3, r2
 80064f2:	7819      	ldrb	r1, [r3, #0]
 80064f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	4413      	add	r3, r2
 80064fa:	3334      	adds	r3, #52	; 0x34
 80064fc:	460a      	mov	r2, r1
 80064fe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	4413      	add	r3, r2
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d006      	beq.n	800651a <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	3301      	adds	r3, #1
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b09      	cmp	r3, #9
 8006516:	d9e9      	bls.n	80064ec <prvInitialiseNewTask+0x58>
 8006518:	e000      	b.n	800651c <prvInitialiseNewTask+0x88>
            {
                break;
 800651a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006524:	e003      	b.n	800652e <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	2b04      	cmp	r3, #4
 8006532:	d901      	bls.n	8006538 <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006534:	2304      	movs	r3, #4
 8006536:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	6a3a      	ldr	r2, [r7, #32]
 800653c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	6a3a      	ldr	r2, [r7, #32]
 8006542:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	2200      	movs	r2, #0
 8006548:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	3304      	adds	r3, #4
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff fa35 	bl	80059be <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	3318      	adds	r3, #24
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fa30 	bl	80059be <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006562:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	f1c3 0205 	rsb	r2, r3, #5
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006572:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	3350      	adds	r3, #80	; 0x50
 8006578:	2204      	movs	r2, #4
 800657a:	2100      	movs	r1, #0
 800657c:	4618      	mov	r0, r3
 800657e:	f002 fa21 	bl	80089c4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	3354      	adds	r3, #84	; 0x54
 8006586:	2201      	movs	r2, #1
 8006588:	2100      	movs	r1, #0
 800658a:	4618      	mov	r0, r3
 800658c:	f002 fa1a 	bl	80089c4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	6938      	ldr	r0, [r7, #16]
 8006596:	f001 f90f 	bl	80077b8 <pxPortInitialiseStack>
 800659a:	4602      	mov	r2, r0
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065aa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80065ac:	bf00      	nop
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	08008a60 	.word	0x08008a60

080065b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80065c0:	f001 fa02 	bl	80079c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80065c4:	4b2c      	ldr	r3, [pc, #176]	; (8006678 <prvAddNewTaskToReadyList+0xc0>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a2b      	ldr	r2, [pc, #172]	; (8006678 <prvAddNewTaskToReadyList+0xc0>)
 80065cc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80065ce:	4b2b      	ldr	r3, [pc, #172]	; (800667c <prvAddNewTaskToReadyList+0xc4>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d109      	bne.n	80065ea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80065d6:	4a29      	ldr	r2, [pc, #164]	; (800667c <prvAddNewTaskToReadyList+0xc4>)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065dc:	4b26      	ldr	r3, [pc, #152]	; (8006678 <prvAddNewTaskToReadyList+0xc0>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d110      	bne.n	8006606 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80065e4:	f000 fbd2 	bl	8006d8c <prvInitialiseTaskLists>
 80065e8:	e00d      	b.n	8006606 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80065ea:	4b25      	ldr	r3, [pc, #148]	; (8006680 <prvAddNewTaskToReadyList+0xc8>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065f2:	4b22      	ldr	r3, [pc, #136]	; (800667c <prvAddNewTaskToReadyList+0xc4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d802      	bhi.n	8006606 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006600:	4a1e      	ldr	r2, [pc, #120]	; (800667c <prvAddNewTaskToReadyList+0xc4>)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006606:	4b1f      	ldr	r3, [pc, #124]	; (8006684 <prvAddNewTaskToReadyList+0xcc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3301      	adds	r3, #1
 800660c:	4a1d      	ldr	r2, [pc, #116]	; (8006684 <prvAddNewTaskToReadyList+0xcc>)
 800660e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006610:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <prvAddNewTaskToReadyList+0xcc>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	2201      	movs	r2, #1
 800661e:	409a      	lsls	r2, r3
 8006620:	4b19      	ldr	r3, [pc, #100]	; (8006688 <prvAddNewTaskToReadyList+0xd0>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4313      	orrs	r3, r2
 8006626:	4a18      	ldr	r2, [pc, #96]	; (8006688 <prvAddNewTaskToReadyList+0xd0>)
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662e:	4613      	mov	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4a15      	ldr	r2, [pc, #84]	; (800668c <prvAddNewTaskToReadyList+0xd4>)
 8006638:	441a      	add	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f7ff f9c9 	bl	80059d8 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006646:	f001 f9eb 	bl	8007a20 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800664a:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <prvAddNewTaskToReadyList+0xc8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00e      	beq.n	8006670 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <prvAddNewTaskToReadyList+0xc4>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	429a      	cmp	r2, r3
 800665e:	d207      	bcs.n	8006670 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <prvAddNewTaskToReadyList+0xd8>)
 8006662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20000384 	.word	0x20000384
 800667c:	200002ac 	.word	0x200002ac
 8006680:	20000390 	.word	0x20000390
 8006684:	200003a0 	.word	0x200003a0
 8006688:	2000038c 	.word	0x2000038c
 800668c:	200002b0 	.word	0x200002b0
 8006690:	e000ed04 	.word	0xe000ed04

08006694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d011      	beq.n	80066ca <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80066a6:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <vTaskDelay+0x54>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <vTaskDelay+0x24>
 80066ae:	490f      	ldr	r1, [pc, #60]	; (80066ec <vTaskDelay+0x58>)
 80066b0:	f240 504a 	movw	r0, #1354	; 0x54a
 80066b4:	f7fa fce0 	bl	8001078 <vAssertCalled>
            vTaskSuspendAll();
 80066b8:	f000 f86c 	bl	8006794 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066bc:	2100      	movs	r1, #0
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fc8c 	bl	8006fdc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80066c4:	f000 f874 	bl	80067b0 <xTaskResumeAll>
 80066c8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d107      	bne.n	80066e0 <vTaskDelay+0x4c>
        {
            portYIELD_WITHIN_API();
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <vTaskDelay+0x5c>)
 80066d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80066e0:	bf00      	nop
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	200003ac 	.word	0x200003ac
 80066ec:	08008a60 	.word	0x08008a60
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80066fa:	4b1e      	ldr	r3, [pc, #120]	; (8006774 <vTaskStartScheduler+0x80>)
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	2300      	movs	r3, #0
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	2300      	movs	r3, #0
 8006704:	2282      	movs	r2, #130	; 0x82
 8006706:	491c      	ldr	r1, [pc, #112]	; (8006778 <vTaskStartScheduler+0x84>)
 8006708:	481c      	ldr	r0, [pc, #112]	; (800677c <vTaskStartScheduler+0x88>)
 800670a:	f7ff fe81 	bl	8006410 <xTaskCreate>
 800670e:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d102      	bne.n	800671c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8006716:	f000 fcc7 	bl	80070a8 <xTimerCreateTimerTask>
 800671a:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d118      	bne.n	8006754 <vTaskStartScheduler+0x60>
        __asm volatile
 8006722:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006726:	b672      	cpsid	i
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	b662      	cpsie	i
 8006736:	603b      	str	r3, [r7, #0]
    }
 8006738:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800673a:	4b11      	ldr	r3, [pc, #68]	; (8006780 <vTaskStartScheduler+0x8c>)
 800673c:	f04f 32ff 	mov.w	r2, #4294967295
 8006740:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006742:	4b10      	ldr	r3, [pc, #64]	; (8006784 <vTaskStartScheduler+0x90>)
 8006744:	2201      	movs	r2, #1
 8006746:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <vTaskStartScheduler+0x94>)
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800674e:	f001 f8b9 	bl	80078c4 <xPortStartScheduler>
 8006752:	e008      	b.n	8006766 <vTaskStartScheduler+0x72>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675a:	d104      	bne.n	8006766 <vTaskStartScheduler+0x72>
 800675c:	490b      	ldr	r1, [pc, #44]	; (800678c <vTaskStartScheduler+0x98>)
 800675e:	f640 0041 	movw	r0, #2113	; 0x841
 8006762:	f7fa fc89 	bl	8001078 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006766:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <vTaskStartScheduler+0x9c>)
 8006768:	681b      	ldr	r3, [r3, #0]
}
 800676a:	bf00      	nop
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200003a8 	.word	0x200003a8
 8006778:	08008a80 	.word	0x08008a80
 800677c:	08006d5d 	.word	0x08006d5d
 8006780:	200003a4 	.word	0x200003a4
 8006784:	20000390 	.word	0x20000390
 8006788:	20000388 	.word	0x20000388
 800678c:	08008a60 	.word	0x08008a60
 8006790:	2000002c 	.word	0x2000002c

08006794 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006798:	4b04      	ldr	r3, [pc, #16]	; (80067ac <vTaskSuspendAll+0x18>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3301      	adds	r3, #1
 800679e:	4a03      	ldr	r2, [pc, #12]	; (80067ac <vTaskSuspendAll+0x18>)
 80067a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80067a2:	bf00      	nop
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	200003ac 	.word	0x200003ac

080067b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80067be:	4b3e      	ldr	r3, [pc, #248]	; (80068b8 <xTaskResumeAll+0x108>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d104      	bne.n	80067d0 <xTaskResumeAll+0x20>
 80067c6:	493d      	ldr	r1, [pc, #244]	; (80068bc <xTaskResumeAll+0x10c>)
 80067c8:	f640 00b4 	movw	r0, #2228	; 0x8b4
 80067cc:	f7fa fc54 	bl	8001078 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80067d0:	f001 f8fa 	bl	80079c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80067d4:	4b38      	ldr	r3, [pc, #224]	; (80068b8 <xTaskResumeAll+0x108>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3b01      	subs	r3, #1
 80067da:	4a37      	ldr	r2, [pc, #220]	; (80068b8 <xTaskResumeAll+0x108>)
 80067dc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067de:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <xTaskResumeAll+0x108>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d161      	bne.n	80068aa <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067e6:	4b36      	ldr	r3, [pc, #216]	; (80068c0 <xTaskResumeAll+0x110>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d05d      	beq.n	80068aa <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067ee:	e02e      	b.n	800684e <xTaskResumeAll+0x9e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f0:	4b34      	ldr	r3, [pc, #208]	; (80068c4 <xTaskResumeAll+0x114>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3318      	adds	r3, #24
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff f948 	bl	8005a92 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3304      	adds	r3, #4
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff f943 	bl	8005a92 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	2201      	movs	r2, #1
 8006812:	409a      	lsls	r2, r3
 8006814:	4b2c      	ldr	r3, [pc, #176]	; (80068c8 <xTaskResumeAll+0x118>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4313      	orrs	r3, r2
 800681a:	4a2b      	ldr	r2, [pc, #172]	; (80068c8 <xTaskResumeAll+0x118>)
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4a28      	ldr	r2, [pc, #160]	; (80068cc <xTaskResumeAll+0x11c>)
 800682c:	441a      	add	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3304      	adds	r3, #4
 8006832:	4619      	mov	r1, r3
 8006834:	4610      	mov	r0, r2
 8006836:	f7ff f8cf 	bl	80059d8 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683e:	4b24      	ldr	r3, [pc, #144]	; (80068d0 <xTaskResumeAll+0x120>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	429a      	cmp	r2, r3
 8006846:	d302      	bcc.n	800684e <xTaskResumeAll+0x9e>
                    {
                        xYieldPending = pdTRUE;
 8006848:	4b22      	ldr	r3, [pc, #136]	; (80068d4 <xTaskResumeAll+0x124>)
 800684a:	2201      	movs	r2, #1
 800684c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800684e:	4b1d      	ldr	r3, [pc, #116]	; (80068c4 <xTaskResumeAll+0x114>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1cc      	bne.n	80067f0 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <xTaskResumeAll+0xb0>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800685c:	f000 fb14 	bl	8006e88 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006860:	4b1d      	ldr	r3, [pc, #116]	; (80068d8 <xTaskResumeAll+0x128>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d010      	beq.n	800688e <xTaskResumeAll+0xde>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800686c:	f000 f848 	bl	8006900 <xTaskIncrementTick>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <xTaskResumeAll+0xcc>
                            {
                                xYieldPending = pdTRUE;
 8006876:	4b17      	ldr	r3, [pc, #92]	; (80068d4 <xTaskResumeAll+0x124>)
 8006878:	2201      	movs	r2, #1
 800687a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3b01      	subs	r3, #1
 8006880:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1f1      	bne.n	800686c <xTaskResumeAll+0xbc>

                        xPendedTicks = 0;
 8006888:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <xTaskResumeAll+0x128>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800688e:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <xTaskResumeAll+0x124>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <xTaskResumeAll+0xfa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006896:	2301      	movs	r3, #1
 8006898:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800689a:	4b10      	ldr	r3, [pc, #64]	; (80068dc <xTaskResumeAll+0x12c>)
 800689c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80068aa:	f001 f8b9 	bl	8007a20 <vPortExitCritical>

    return xAlreadyYielded;
 80068ae:	68bb      	ldr	r3, [r7, #8]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	200003ac 	.word	0x200003ac
 80068bc:	08008a60 	.word	0x08008a60
 80068c0:	20000384 	.word	0x20000384
 80068c4:	20000344 	.word	0x20000344
 80068c8:	2000038c 	.word	0x2000038c
 80068cc:	200002b0 	.word	0x200002b0
 80068d0:	200002ac 	.word	0x200002ac
 80068d4:	20000398 	.word	0x20000398
 80068d8:	20000394 	.word	0x20000394
 80068dc:	e000ed04 	.word	0xe000ed04

080068e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80068e6:	4b05      	ldr	r3, [pc, #20]	; (80068fc <xTaskGetTickCount+0x1c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80068ec:	687b      	ldr	r3, [r7, #4]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	20000388 	.word	0x20000388

08006900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006906:	2300      	movs	r3, #0
 8006908:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800690a:	4b4b      	ldr	r3, [pc, #300]	; (8006a38 <xTaskIncrementTick+0x138>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f040 8088 	bne.w	8006a24 <xTaskIncrementTick+0x124>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006914:	4b49      	ldr	r3, [pc, #292]	; (8006a3c <xTaskIncrementTick+0x13c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800691c:	4a47      	ldr	r2, [pc, #284]	; (8006a3c <xTaskIncrementTick+0x13c>)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11a      	bne.n	800695e <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8006928:	4b45      	ldr	r3, [pc, #276]	; (8006a40 <xTaskIncrementTick+0x140>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d004      	beq.n	800693c <xTaskIncrementTick+0x3c>
 8006932:	4944      	ldr	r1, [pc, #272]	; (8006a44 <xTaskIncrementTick+0x144>)
 8006934:	f640 20c7 	movw	r0, #2759	; 0xac7
 8006938:	f7fa fb9e 	bl	8001078 <vAssertCalled>
 800693c:	4b40      	ldr	r3, [pc, #256]	; (8006a40 <xTaskIncrementTick+0x140>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	4b41      	ldr	r3, [pc, #260]	; (8006a48 <xTaskIncrementTick+0x148>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a3e      	ldr	r2, [pc, #248]	; (8006a40 <xTaskIncrementTick+0x140>)
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	4a3f      	ldr	r2, [pc, #252]	; (8006a48 <xTaskIncrementTick+0x148>)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	4b3e      	ldr	r3, [pc, #248]	; (8006a4c <xTaskIncrementTick+0x14c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a3d      	ldr	r2, [pc, #244]	; (8006a4c <xTaskIncrementTick+0x14c>)
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	f000 fa95 	bl	8006e88 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800695e:	4b3c      	ldr	r3, [pc, #240]	; (8006a50 <xTaskIncrementTick+0x150>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	429a      	cmp	r2, r3
 8006966:	d348      	bcc.n	80069fa <xTaskIncrementTick+0xfa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006968:	4b35      	ldr	r3, [pc, #212]	; (8006a40 <xTaskIncrementTick+0x140>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d104      	bne.n	800697c <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006972:	4b37      	ldr	r3, [pc, #220]	; (8006a50 <xTaskIncrementTick+0x150>)
 8006974:	f04f 32ff 	mov.w	r2, #4294967295
 8006978:	601a      	str	r2, [r3, #0]
                    break;
 800697a:	e03e      	b.n	80069fa <xTaskIncrementTick+0xfa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800697c:	4b30      	ldr	r3, [pc, #192]	; (8006a40 <xTaskIncrementTick+0x140>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d203      	bcs.n	800699c <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006994:	4a2e      	ldr	r2, [pc, #184]	; (8006a50 <xTaskIncrementTick+0x150>)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800699a:	e02e      	b.n	80069fa <xTaskIncrementTick+0xfa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	3304      	adds	r3, #4
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff f876 	bl	8005a92 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d004      	beq.n	80069b8 <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	3318      	adds	r3, #24
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff f86d 	bl	8005a92 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	2201      	movs	r2, #1
 80069be:	409a      	lsls	r2, r3
 80069c0:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <xTaskIncrementTick+0x154>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	4a23      	ldr	r2, [pc, #140]	; (8006a54 <xTaskIncrementTick+0x154>)
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4a20      	ldr	r2, [pc, #128]	; (8006a58 <xTaskIncrementTick+0x158>)
 80069d8:	441a      	add	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	3304      	adds	r3, #4
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f7fe fff9 	bl	80059d8 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ea:	4b1c      	ldr	r3, [pc, #112]	; (8006a5c <xTaskIncrementTick+0x15c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d3b9      	bcc.n	8006968 <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 80069f4:	2301      	movs	r3, #1
 80069f6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069f8:	e7b6      	b.n	8006968 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069fa:	4b18      	ldr	r3, [pc, #96]	; (8006a5c <xTaskIncrementTick+0x15c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a00:	4915      	ldr	r1, [pc, #84]	; (8006a58 <xTaskIncrementTick+0x158>)
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d901      	bls.n	8006a16 <xTaskIncrementTick+0x116>
                {
                    xSwitchRequired = pdTRUE;
 8006a12:	2301      	movs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006a16:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <xTaskIncrementTick+0x160>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	e004      	b.n	8006a2e <xTaskIncrementTick+0x12e>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <xTaskIncrementTick+0x164>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	4a0e      	ldr	r2, [pc, #56]	; (8006a64 <xTaskIncrementTick+0x164>)
 8006a2c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006a2e:	697b      	ldr	r3, [r7, #20]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	200003ac 	.word	0x200003ac
 8006a3c:	20000388 	.word	0x20000388
 8006a40:	2000033c 	.word	0x2000033c
 8006a44:	08008a60 	.word	0x08008a60
 8006a48:	20000340 	.word	0x20000340
 8006a4c:	2000039c 	.word	0x2000039c
 8006a50:	200003a4 	.word	0x200003a4
 8006a54:	2000038c 	.word	0x2000038c
 8006a58:	200002b0 	.word	0x200002b0
 8006a5c:	200002ac 	.word	0x200002ac
 8006a60:	20000398 	.word	0x20000398
 8006a64:	20000394 	.word	0x20000394

08006a68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a6e:	4b23      	ldr	r3, [pc, #140]	; (8006afc <vTaskSwitchContext+0x94>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006a76:	4b22      	ldr	r3, [pc, #136]	; (8006b00 <vTaskSwitchContext+0x98>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006a7c:	e039      	b.n	8006af2 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8006a7e:	4b20      	ldr	r3, [pc, #128]	; (8006b00 <vTaskSwitchContext+0x98>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a84:	4b1f      	ldr	r3, [pc, #124]	; (8006b04 <vTaskSwitchContext+0x9c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	fab3 f383 	clz	r3, r3
 8006a90:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	f1c3 031f 	rsb	r3, r3, #31
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	491b      	ldr	r1, [pc, #108]	; (8006b08 <vTaskSwitchContext+0xa0>)
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <vTaskSwitchContext+0x50>
 8006aae:	4917      	ldr	r1, [pc, #92]	; (8006b0c <vTaskSwitchContext+0xa4>)
 8006ab0:	f640 4002 	movw	r0, #3074	; 0xc02
 8006ab4:	f7fa fae0 	bl	8001078 <vAssertCalled>
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4a11      	ldr	r2, [pc, #68]	; (8006b08 <vTaskSwitchContext+0xa0>)
 8006ac4:	4413      	add	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	605a      	str	r2, [r3, #4]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d104      	bne.n	8006ae8 <vTaskSwitchContext+0x80>
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	605a      	str	r2, [r3, #4]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	4a08      	ldr	r2, [pc, #32]	; (8006b10 <vTaskSwitchContext+0xa8>)
 8006af0:	6013      	str	r3, [r2, #0]
}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	200003ac 	.word	0x200003ac
 8006b00:	20000398 	.word	0x20000398
 8006b04:	2000038c 	.word	0x2000038c
 8006b08:	200002b0 	.word	0x200002b0
 8006b0c:	08008a60 	.word	0x08008a60
 8006b10:	200002ac 	.word	0x200002ac

08006b14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <vTaskPlaceOnEventList+0x1a>
 8006b24:	4909      	ldr	r1, [pc, #36]	; (8006b4c <vTaskPlaceOnEventList+0x38>)
 8006b26:	f640 401c 	movw	r0, #3100	; 0xc1c
 8006b2a:	f7fa faa5 	bl	8001078 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b2e:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <vTaskPlaceOnEventList+0x3c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3318      	adds	r3, #24
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fe ff72 	bl	8005a20 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	6838      	ldr	r0, [r7, #0]
 8006b40:	f000 fa4c 	bl	8006fdc <prvAddCurrentTaskToDelayedList>
}
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	08008a60 	.word	0x08008a60
 8006b50:	200002ac 	.word	0x200002ac

08006b54 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d104      	bne.n	8006b70 <vTaskPlaceOnEventListRestricted+0x1c>
 8006b66:	490d      	ldr	r1, [pc, #52]	; (8006b9c <vTaskPlaceOnEventListRestricted+0x48>)
 8006b68:	f640 404b 	movw	r0, #3147	; 0xc4b
 8006b6c:	f7fa fa84 	bl	8001078 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b70:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <vTaskPlaceOnEventListRestricted+0x4c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3318      	adds	r3, #24
 8006b76:	4619      	mov	r1, r3
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7fe ff2d 	bl	80059d8 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 8006b84:	f04f 33ff 	mov.w	r3, #4294967295
 8006b88:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	68b8      	ldr	r0, [r7, #8]
 8006b8e:	f000 fa25 	bl	8006fdc <prvAddCurrentTaskToDelayedList>
    }
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	08008a60 	.word	0x08008a60
 8006ba0:	200002ac 	.word	0x200002ac

08006ba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <xTaskRemoveFromEventList+0x20>
 8006bba:	4922      	ldr	r1, [pc, #136]	; (8006c44 <xTaskRemoveFromEventList+0xa0>)
 8006bbc:	f640 407b 	movw	r0, #3195	; 0xc7b
 8006bc0:	f7fa fa5a 	bl	8001078 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	3318      	adds	r3, #24
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe ff62 	bl	8005a92 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bce:	4b1e      	ldr	r3, [pc, #120]	; (8006c48 <xTaskRemoveFromEventList+0xa4>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d11c      	bne.n	8006c10 <xTaskRemoveFromEventList+0x6c>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe ff59 	bl	8005a92 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	2201      	movs	r2, #1
 8006be6:	409a      	lsls	r2, r3
 8006be8:	4b18      	ldr	r3, [pc, #96]	; (8006c4c <xTaskRemoveFromEventList+0xa8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <xTaskRemoveFromEventList+0xa8>)
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4a14      	ldr	r2, [pc, #80]	; (8006c50 <xTaskRemoveFromEventList+0xac>)
 8006c00:	441a      	add	r2, r3
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	3304      	adds	r3, #4
 8006c06:	4619      	mov	r1, r3
 8006c08:	4610      	mov	r0, r2
 8006c0a:	f7fe fee5 	bl	80059d8 <vListInsertEnd>
 8006c0e:	e005      	b.n	8006c1c <xTaskRemoveFromEventList+0x78>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	3318      	adds	r3, #24
 8006c14:	4619      	mov	r1, r3
 8006c16:	480f      	ldr	r0, [pc, #60]	; (8006c54 <xTaskRemoveFromEventList+0xb0>)
 8006c18:	f7fe fede 	bl	80059d8 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	4b0d      	ldr	r3, [pc, #52]	; (8006c58 <xTaskRemoveFromEventList+0xb4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d905      	bls.n	8006c36 <xTaskRemoveFromEventList+0x92>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006c2e:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <xTaskRemoveFromEventList+0xb8>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e001      	b.n	8006c3a <xTaskRemoveFromEventList+0x96>
    }
    else
    {
        xReturn = pdFALSE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	08008a60 	.word	0x08008a60
 8006c48:	200003ac 	.word	0x200003ac
 8006c4c:	2000038c 	.word	0x2000038c
 8006c50:	200002b0 	.word	0x200002b0
 8006c54:	20000344 	.word	0x20000344
 8006c58:	200002ac 	.word	0x200002ac
 8006c5c:	20000398 	.word	0x20000398

08006c60 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c68:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <vTaskInternalSetTimeOutState+0x24>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006c70:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <vTaskInternalSetTimeOutState+0x28>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	605a      	str	r2, [r3, #4]
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	2000039c 	.word	0x2000039c
 8006c88:	20000388 	.word	0x20000388

08006c8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <xTaskCheckForTimeOut+0x1a>
 8006c9c:	4926      	ldr	r1, [pc, #152]	; (8006d38 <xTaskCheckForTimeOut+0xac>)
 8006c9e:	f640 40f6 	movw	r0, #3318	; 0xcf6
 8006ca2:	f7fa f9e9 	bl	8001078 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <xTaskCheckForTimeOut+0x2a>
 8006cac:	4922      	ldr	r1, [pc, #136]	; (8006d38 <xTaskCheckForTimeOut+0xac>)
 8006cae:	f640 40f7 	movw	r0, #3319	; 0xcf7
 8006cb2:	f7fa f9e1 	bl	8001078 <vAssertCalled>

    taskENTER_CRITICAL();
 8006cb6:	f000 fe87 	bl	80079c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006cba:	4b20      	ldr	r3, [pc, #128]	; (8006d3c <xTaskCheckForTimeOut+0xb0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd2:	d102      	bne.n	8006cda <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e026      	b.n	8006d28 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	4b18      	ldr	r3, [pc, #96]	; (8006d40 <xTaskCheckForTimeOut+0xb4>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d00a      	beq.n	8006cfc <xTaskCheckForTimeOut+0x70>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d305      	bcc.n	8006cfc <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	e015      	b.n	8006d28 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d20b      	bcs.n	8006d1e <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	1ad2      	subs	r2, r2, r3
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff ffa4 	bl	8006c60 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	e004      	b.n	8006d28 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006d24:	2301      	movs	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8006d28:	f000 fe7a 	bl	8007a20 <vPortExitCritical>

    return xReturn;
 8006d2c:	697b      	ldr	r3, [r7, #20]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	08008a60 	.word	0x08008a60
 8006d3c:	20000388 	.word	0x20000388
 8006d40:	2000039c 	.word	0x2000039c

08006d44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006d48:	4b03      	ldr	r3, [pc, #12]	; (8006d58 <vTaskMissedYield+0x14>)
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
}
 8006d4e:	bf00      	nop
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	20000398 	.word	0x20000398

08006d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006d64:	f000 f852 	bl	8006e0c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d68:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <prvIdleTask+0x28>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d9f9      	bls.n	8006d64 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006d70:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <prvIdleTask+0x2c>)
 8006d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006d80:	e7f0      	b.n	8006d64 <prvIdleTask+0x8>
 8006d82:	bf00      	nop
 8006d84:	200002b0 	.word	0x200002b0
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
 8006d96:	e00c      	b.n	8006db2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4a12      	ldr	r2, [pc, #72]	; (8006dec <prvInitialiseTaskLists+0x60>)
 8006da4:	4413      	add	r3, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fe fde9 	bl	800597e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3301      	adds	r3, #1
 8006db0:	607b      	str	r3, [r7, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d9ef      	bls.n	8006d98 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006db8:	480d      	ldr	r0, [pc, #52]	; (8006df0 <prvInitialiseTaskLists+0x64>)
 8006dba:	f7fe fde0 	bl	800597e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006dbe:	480d      	ldr	r0, [pc, #52]	; (8006df4 <prvInitialiseTaskLists+0x68>)
 8006dc0:	f7fe fddd 	bl	800597e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006dc4:	480c      	ldr	r0, [pc, #48]	; (8006df8 <prvInitialiseTaskLists+0x6c>)
 8006dc6:	f7fe fdda 	bl	800597e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006dca:	480c      	ldr	r0, [pc, #48]	; (8006dfc <prvInitialiseTaskLists+0x70>)
 8006dcc:	f7fe fdd7 	bl	800597e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006dd0:	480b      	ldr	r0, [pc, #44]	; (8006e00 <prvInitialiseTaskLists+0x74>)
 8006dd2:	f7fe fdd4 	bl	800597e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006dd6:	4b0b      	ldr	r3, [pc, #44]	; (8006e04 <prvInitialiseTaskLists+0x78>)
 8006dd8:	4a05      	ldr	r2, [pc, #20]	; (8006df0 <prvInitialiseTaskLists+0x64>)
 8006dda:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <prvInitialiseTaskLists+0x7c>)
 8006dde:	4a05      	ldr	r2, [pc, #20]	; (8006df4 <prvInitialiseTaskLists+0x68>)
 8006de0:	601a      	str	r2, [r3, #0]
}
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	200002b0 	.word	0x200002b0
 8006df0:	20000314 	.word	0x20000314
 8006df4:	20000328 	.word	0x20000328
 8006df8:	20000344 	.word	0x20000344
 8006dfc:	20000358 	.word	0x20000358
 8006e00:	20000370 	.word	0x20000370
 8006e04:	2000033c 	.word	0x2000033c
 8006e08:	20000340 	.word	0x20000340

08006e0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e12:	e019      	b.n	8006e48 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006e14:	f000 fdd8 	bl	80079c8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e18:	4b10      	ldr	r3, [pc, #64]	; (8006e5c <prvCheckTasksWaitingTermination+0x50>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3304      	adds	r3, #4
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fe fe34 	bl	8005a92 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <prvCheckTasksWaitingTermination+0x54>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	4a0b      	ldr	r2, [pc, #44]	; (8006e60 <prvCheckTasksWaitingTermination+0x54>)
 8006e32:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006e34:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <prvCheckTasksWaitingTermination+0x58>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	4a0a      	ldr	r2, [pc, #40]	; (8006e64 <prvCheckTasksWaitingTermination+0x58>)
 8006e3c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006e3e:	f000 fdef 	bl	8007a20 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f810 	bl	8006e68 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e48:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <prvCheckTasksWaitingTermination+0x58>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e1      	bne.n	8006e14 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000358 	.word	0x20000358
 8006e60:	20000384 	.word	0x20000384
 8006e64:	2000036c 	.word	0x2000036c

08006e68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 ff85 	bl	8007d84 <vPortFree>
                vPortFree( pxTCB );
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 ff82 	bl	8007d84 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <prvResetNextTaskUnblockTime+0x30>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d104      	bne.n	8006ea0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006e96:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <prvResetNextTaskUnblockTime+0x34>)
 8006e98:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006e9e:	e005      	b.n	8006eac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ea0:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <prvResetNextTaskUnblockTime+0x30>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a04      	ldr	r2, [pc, #16]	; (8006ebc <prvResetNextTaskUnblockTime+0x34>)
 8006eaa:	6013      	str	r3, [r2, #0]
}
 8006eac:	bf00      	nop
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	2000033c 	.word	0x2000033c
 8006ebc:	200003a4 	.word	0x200003a4

08006ec0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006ec6:	4b0b      	ldr	r3, [pc, #44]	; (8006ef4 <xTaskGetSchedulerState+0x34>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d102      	bne.n	8006ed4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	607b      	str	r3, [r7, #4]
 8006ed2:	e008      	b.n	8006ee6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ed4:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <xTaskGetSchedulerState+0x38>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006edc:	2302      	movs	r3, #2
 8006ede:	607b      	str	r3, [r7, #4]
 8006ee0:	e001      	b.n	8006ee6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006ee6:	687b      	ldr	r3, [r7, #4]
    }
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	20000390 	.word	0x20000390
 8006ef8:	200003ac 	.word	0x200003ac

08006efc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d057      	beq.n	8006fc2 <xTaskPriorityDisinherit+0xc6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006f12:	4b2e      	ldr	r3, [pc, #184]	; (8006fcc <xTaskPriorityDisinherit+0xd0>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d004      	beq.n	8006f26 <xTaskPriorityDisinherit+0x2a>
 8006f1c:	492c      	ldr	r1, [pc, #176]	; (8006fd0 <xTaskPriorityDisinherit+0xd4>)
 8006f1e:	f241 0056 	movw	r0, #4182	; 0x1056
 8006f22:	f7fa f8a9 	bl	8001078 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <xTaskPriorityDisinherit+0x3c>
 8006f2e:	4928      	ldr	r1, [pc, #160]	; (8006fd0 <xTaskPriorityDisinherit+0xd4>)
 8006f30:	f241 0057 	movw	r0, #4183	; 0x1057
 8006f34:	f7fa f8a0 	bl	8001078 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3c:	1e5a      	subs	r2, r3, #1
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d039      	beq.n	8006fc2 <xTaskPriorityDisinherit+0xc6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d135      	bne.n	8006fc2 <xTaskPriorityDisinherit+0xc6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe fd99 	bl	8005a92 <uxListRemove>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	43da      	mvns	r2, r3
 8006f72:	4b18      	ldr	r3, [pc, #96]	; (8006fd4 <xTaskPriorityDisinherit+0xd8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4013      	ands	r3, r2
 8006f78:	4a16      	ldr	r2, [pc, #88]	; (8006fd4 <xTaskPriorityDisinherit+0xd8>)
 8006f7a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	f1c3 0205 	rsb	r2, r3, #5
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	2201      	movs	r2, #1
 8006f96:	409a      	lsls	r2, r3
 8006f98:	4b0e      	ldr	r3, [pc, #56]	; (8006fd4 <xTaskPriorityDisinherit+0xd8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	4a0d      	ldr	r2, [pc, #52]	; (8006fd4 <xTaskPriorityDisinherit+0xd8>)
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4a0a      	ldr	r2, [pc, #40]	; (8006fd8 <xTaskPriorityDisinherit+0xdc>)
 8006fb0:	441a      	add	r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f7fe fd0d 	bl	80059d8 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
    }
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	200002ac 	.word	0x200002ac
 8006fd0:	08008a60 	.word	0x08008a60
 8006fd4:	2000038c 	.word	0x2000038c
 8006fd8:	200002b0 	.word	0x200002b0

08006fdc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006fe6:	4b29      	ldr	r3, [pc, #164]	; (800708c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fec:	4b28      	ldr	r3, [pc, #160]	; (8007090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fd4d 	bl	8005a92 <uxListRemove>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006ffe:	4b24      	ldr	r3, [pc, #144]	; (8007090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	2201      	movs	r2, #1
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	43da      	mvns	r2, r3
 800700c:	4b21      	ldr	r3, [pc, #132]	; (8007094 <prvAddCurrentTaskToDelayedList+0xb8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4013      	ands	r3, r2
 8007012:	4a20      	ldr	r2, [pc, #128]	; (8007094 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007014:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d10a      	bne.n	8007034 <prvAddCurrentTaskToDelayedList+0x58>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d007      	beq.n	8007034 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007024:	4b1a      	ldr	r3, [pc, #104]	; (8007090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3304      	adds	r3, #4
 800702a:	4619      	mov	r1, r3
 800702c:	481a      	ldr	r0, [pc, #104]	; (8007098 <prvAddCurrentTaskToDelayedList+0xbc>)
 800702e:	f7fe fcd3 	bl	80059d8 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007032:	e026      	b.n	8007082 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4413      	add	r3, r2
 800703a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800703c:	4b14      	ldr	r3, [pc, #80]	; (8007090 <prvAddCurrentTaskToDelayedList+0xb4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	429a      	cmp	r2, r3
 800704a:	d209      	bcs.n	8007060 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800704c:	4b13      	ldr	r3, [pc, #76]	; (800709c <prvAddCurrentTaskToDelayedList+0xc0>)
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3304      	adds	r3, #4
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f7fe fce1 	bl	8005a20 <vListInsert>
}
 800705e:	e010      	b.n	8007082 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3304      	adds	r3, #4
 800706a:	4619      	mov	r1, r3
 800706c:	4610      	mov	r0, r2
 800706e:	f7fe fcd7 	bl	8005a20 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8007072:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	429a      	cmp	r2, r3
 800707a:	d202      	bcs.n	8007082 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800707c:	4a09      	ldr	r2, [pc, #36]	; (80070a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	6013      	str	r3, [r2, #0]
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000388 	.word	0x20000388
 8007090:	200002ac 	.word	0x200002ac
 8007094:	2000038c 	.word	0x2000038c
 8007098:	20000370 	.word	0x20000370
 800709c:	20000340 	.word	0x20000340
 80070a0:	2000033c 	.word	0x2000033c
 80070a4:	200003a4 	.word	0x200003a4

080070a8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80070b2:	f000 fb2f 	bl	8007714 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80070b6:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <xTimerCreateTimerTask+0x48>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00b      	beq.n	80070d6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80070be:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <xTimerCreateTimerTask+0x4c>)
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	2304      	movs	r3, #4
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	2300      	movs	r3, #0
 80070c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80070cc:	490a      	ldr	r1, [pc, #40]	; (80070f8 <xTimerCreateTimerTask+0x50>)
 80070ce:	480b      	ldr	r0, [pc, #44]	; (80070fc <xTimerCreateTimerTask+0x54>)
 80070d0:	f7ff f99e 	bl	8006410 <xTaskCreate>
 80070d4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d104      	bne.n	80070e6 <xTimerCreateTimerTask+0x3e>
 80070dc:	4908      	ldr	r1, [pc, #32]	; (8007100 <xTimerCreateTimerTask+0x58>)
 80070de:	f240 100d 	movw	r0, #269	; 0x10d
 80070e2:	f7f9 ffc9 	bl	8001078 <vAssertCalled>
        return xReturn;
 80070e6:	687b      	ldr	r3, [r7, #4]
    }
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	200003e0 	.word	0x200003e0
 80070f4:	200003e4 	.word	0x200003e4
 80070f8:	08008a98 	.word	0x08008a98
 80070fc:	080072e1 	.word	0x080072e1
 8007100:	08008aa0 	.word	0x08008aa0

08007104 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007112:	202c      	movs	r0, #44	; 0x2c
 8007114:	f000 fd68 	bl	8007be8 <pvPortMalloc>
 8007118:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00d      	beq.n	800713c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	68b9      	ldr	r1, [r7, #8]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 f806 	bl	8007148 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800713c:	697b      	ldr	r3, [r7, #20]
        }
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d104      	bne.n	8007166 <prvInitialiseNewTimer+0x1e>
 800715c:	4915      	ldr	r1, [pc, #84]	; (80071b4 <prvInitialiseNewTimer+0x6c>)
 800715e:	f240 105f 	movw	r0, #351	; 0x15f
 8007162:	f7f9 ff89 	bl	8001078 <vAssertCalled>

        if( pxNewTimer != NULL )
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01e      	beq.n	80071aa <prvInitialiseNewTimer+0x62>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800716c:	f000 fad2 	bl	8007714 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	3304      	adds	r3, #4
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe fc16 	bl	80059be <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <prvInitialiseNewTimer+0x62>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800719e:	f043 0304 	orr.w	r3, r3, #4
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	08008aa0 	.word	0x08008aa0

080071b8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08a      	sub	sp, #40	; 0x28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <xTimerGenericCommand+0x22>
 80071d0:	491c      	ldr	r1, [pc, #112]	; (8007244 <xTimerGenericCommand+0x8c>)
 80071d2:	f44f 70c1 	mov.w	r0, #386	; 0x182
 80071d6:	f7f9 ff4f 	bl	8001078 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80071da:	4b1b      	ldr	r3, [pc, #108]	; (8007248 <xTimerGenericCommand+0x90>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d02a      	beq.n	8007238 <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b05      	cmp	r3, #5
 80071f2:	dc18      	bgt.n	8007226 <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071f4:	f7ff fe64 	bl	8006ec0 <xTaskGetSchedulerState>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d109      	bne.n	8007212 <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071fe:	4b12      	ldr	r3, [pc, #72]	; (8007248 <xTimerGenericCommand+0x90>)
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	f107 0114 	add.w	r1, r7, #20
 8007206:	2300      	movs	r3, #0
 8007208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800720a:	f7fe fd45 	bl	8005c98 <xQueueGenericSend>
 800720e:	6278      	str	r0, [r7, #36]	; 0x24
 8007210:	e012      	b.n	8007238 <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007212:	4b0d      	ldr	r3, [pc, #52]	; (8007248 <xTimerGenericCommand+0x90>)
 8007214:	6818      	ldr	r0, [r3, #0]
 8007216:	f107 0114 	add.w	r1, r7, #20
 800721a:	2300      	movs	r3, #0
 800721c:	2200      	movs	r2, #0
 800721e:	f7fe fd3b 	bl	8005c98 <xQueueGenericSend>
 8007222:	6278      	str	r0, [r7, #36]	; 0x24
 8007224:	e008      	b.n	8007238 <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007226:	4b08      	ldr	r3, [pc, #32]	; (8007248 <xTimerGenericCommand+0x90>)
 8007228:	6818      	ldr	r0, [r3, #0]
 800722a:	f107 0114 	add.w	r1, r7, #20
 800722e:	2300      	movs	r3, #0
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	f7fe fe19 	bl	8005e68 <xQueueGenericSendFromISR>
 8007236:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800723a:	4618      	mov	r0, r3
 800723c:	3728      	adds	r7, #40	; 0x28
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	08008aa0 	.word	0x08008aa0
 8007248:	200003e0 	.word	0x200003e0

0800724c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af02      	add	r7, sp, #8
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007256:	4b20      	ldr	r3, [pc, #128]	; (80072d8 <prvProcessExpiredTimer+0x8c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3304      	adds	r3, #4
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe fc14 	bl	8005a92 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01d      	beq.n	80072b4 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	699a      	ldr	r2, [r3, #24]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	18d1      	adds	r1, r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f8cf 	bl	8007428 <prvInsertTimerInActiveList>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d01a      	beq.n	80072c6 <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007290:	2300      	movs	r3, #0
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	2300      	movs	r3, #0
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	2100      	movs	r1, #0
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7ff ff8c 	bl	80071b8 <xTimerGenericCommand>
 80072a0:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10e      	bne.n	80072c6 <prvProcessExpiredTimer+0x7a>
 80072a8:	490c      	ldr	r1, [pc, #48]	; (80072dc <prvProcessExpiredTimer+0x90>)
 80072aa:	f44f 7005 	mov.w	r0, #532	; 0x214
 80072ae:	f7f9 fee3 	bl	8001078 <vAssertCalled>
 80072b2:	e008      	b.n	80072c6 <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072ba:	f023 0301 	bic.w	r3, r3, #1
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	4798      	blx	r3
    }
 80072ce:	bf00      	nop
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	200003d8 	.word	0x200003d8
 80072dc:	08008aa0 	.word	0x08008aa0

080072e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072e8:	f107 0308 	add.w	r3, r7, #8
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 f857 	bl	80073a0 <prvGetNextExpireTime>
 80072f2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	4619      	mov	r1, r3
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f803 	bl	8007304 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80072fe:	f000 f8d5 	bl	80074ac <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007302:	e7f1      	b.n	80072e8 <prvTimerTask+0x8>

08007304 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800730e:	f7ff fa41 	bl	8006794 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007312:	f107 0308 	add.w	r3, r7, #8
 8007316:	4618      	mov	r0, r3
 8007318:	f000 f866 	bl	80073e8 <prvSampleTimeNow>
 800731c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d130      	bne.n	8007386 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <prvProcessTimerOrBlockTask+0x3c>
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	429a      	cmp	r2, r3
 8007330:	d806      	bhi.n	8007340 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007332:	f7ff fa3d 	bl	80067b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007336:	68f9      	ldr	r1, [r7, #12]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff ff87 	bl	800724c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800733e:	e024      	b.n	800738a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d008      	beq.n	8007358 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007346:	4b13      	ldr	r3, [pc, #76]	; (8007394 <prvProcessTimerOrBlockTask+0x90>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <prvProcessTimerOrBlockTask+0x50>
 8007350:	2301      	movs	r3, #1
 8007352:	e000      	b.n	8007356 <prvProcessTimerOrBlockTask+0x52>
 8007354:	2300      	movs	r3, #0
 8007356:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007358:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <prvProcessTimerOrBlockTask+0x94>)
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	4619      	mov	r1, r3
 8007366:	f7ff f81f 	bl	80063a8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800736a:	f7ff fa21 	bl	80067b0 <xTaskResumeAll>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10a      	bne.n	800738a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007374:	4b09      	ldr	r3, [pc, #36]	; (800739c <prvProcessTimerOrBlockTask+0x98>)
 8007376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	f3bf 8f6f 	isb	sy
    }
 8007384:	e001      	b.n	800738a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007386:	f7ff fa13 	bl	80067b0 <xTaskResumeAll>
    }
 800738a:	bf00      	nop
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	200003dc 	.word	0x200003dc
 8007398:	200003e0 	.word	0x200003e0
 800739c:	e000ed04 	.word	0xe000ed04

080073a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073a8:	4b0e      	ldr	r3, [pc, #56]	; (80073e4 <prvGetNextExpireTime+0x44>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <prvGetNextExpireTime+0x16>
 80073b2:	2201      	movs	r2, #1
 80073b4:	e000      	b.n	80073b8 <prvGetNextExpireTime+0x18>
 80073b6:	2200      	movs	r2, #0
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d105      	bne.n	80073d0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073c4:	4b07      	ldr	r3, [pc, #28]	; (80073e4 <prvGetNextExpireTime+0x44>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	e001      	b.n	80073d4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80073d4:	68fb      	ldr	r3, [r7, #12]
    }
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	200003d8 	.word	0x200003d8

080073e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80073f0:	f7ff fa76 	bl	80068e0 <xTaskGetTickCount>
 80073f4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80073f6:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <prvSampleTimeNow+0x3c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d205      	bcs.n	800740c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007400:	f000 f928 	bl	8007654 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	e002      	b.n	8007412 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007412:	4a04      	ldr	r2, [pc, #16]	; (8007424 <prvSampleTimeNow+0x3c>)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007418:	68fb      	ldr	r3, [r7, #12]
    }
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	200003e8 	.word	0x200003e8

08007428 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007436:	2300      	movs	r3, #0
 8007438:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	429a      	cmp	r2, r3
 800744c:	d812      	bhi.n	8007474 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	1ad2      	subs	r2, r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	429a      	cmp	r2, r3
 800745a:	d302      	bcc.n	8007462 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800745c:	2301      	movs	r3, #1
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	e01b      	b.n	800749a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007462:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <prvInsertTimerInActiveList+0x7c>)
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3304      	adds	r3, #4
 800746a:	4619      	mov	r1, r3
 800746c:	4610      	mov	r0, r2
 800746e:	f7fe fad7 	bl	8005a20 <vListInsert>
 8007472:	e012      	b.n	800749a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	429a      	cmp	r2, r3
 800747a:	d206      	bcs.n	800748a <prvInsertTimerInActiveList+0x62>
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d302      	bcc.n	800748a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007484:	2301      	movs	r3, #1
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	e007      	b.n	800749a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800748a:	4b07      	ldr	r3, [pc, #28]	; (80074a8 <prvInsertTimerInActiveList+0x80>)
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3304      	adds	r3, #4
 8007492:	4619      	mov	r1, r3
 8007494:	4610      	mov	r0, r2
 8007496:	f7fe fac3 	bl	8005a20 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800749a:	697b      	ldr	r3, [r7, #20]
    }
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	200003dc 	.word	0x200003dc
 80074a8:	200003d8 	.word	0x200003d8

080074ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08c      	sub	sp, #48	; 0x30
 80074b0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074b2:	e0b9      	b.n	8007628 <prvProcessReceivedCommands+0x17c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da13      	bge.n	80074e2 <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074ba:	f107 0308 	add.w	r3, r7, #8
 80074be:	3304      	adds	r3, #4
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d104      	bne.n	80074d2 <prvProcessReceivedCommands+0x26>
 80074c8:	4960      	ldr	r1, [pc, #384]	; (800764c <prvProcessReceivedCommands+0x1a0>)
 80074ca:	f240 20fa 	movw	r0, #762	; 0x2fa
 80074ce:	f7f9 fdd3 	bl	8001078 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d8:	6850      	ldr	r0, [r2, #4]
 80074da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074dc:	6892      	ldr	r2, [r2, #8]
 80074de:	4611      	mov	r1, r2
 80074e0:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f2c0 809e 	blt.w	8007626 <prvProcessReceivedCommands+0x17a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	3304      	adds	r3, #4
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fac9 	bl	8005a92 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007500:	1d3b      	adds	r3, r7, #4
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff ff70 	bl	80073e8 <prvSampleTimeNow>
 8007508:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b09      	cmp	r3, #9
 800750e:	f200 808b 	bhi.w	8007628 <prvProcessReceivedCommands+0x17c>
 8007512:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <prvProcessReceivedCommands+0x6c>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	08007541 	.word	0x08007541
 800751c:	08007541 	.word	0x08007541
 8007520:	08007541 	.word	0x08007541
 8007524:	080075ab 	.word	0x080075ab
 8007528:	080075bf 	.word	0x080075bf
 800752c:	080075fd 	.word	0x080075fd
 8007530:	08007541 	.word	0x08007541
 8007534:	08007541 	.word	0x08007541
 8007538:	080075ab 	.word	0x080075ab
 800753c:	080075bf 	.word	0x080075bf
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007546:	f043 0301 	orr.w	r3, r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	18d1      	adds	r1, r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	69fa      	ldr	r2, [r7, #28]
 800755e:	6a38      	ldr	r0, [r7, #32]
 8007560:	f7ff ff62 	bl	8007428 <prvInsertTimerInActiveList>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d05e      	beq.n	8007628 <prvProcessReceivedCommands+0x17c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	6a38      	ldr	r0, [r7, #32]
 8007570:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d053      	beq.n	8007628 <prvProcessReceivedCommands+0x17c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	441a      	add	r2, r3
 8007588:	2300      	movs	r3, #0
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	2300      	movs	r3, #0
 800758e:	2100      	movs	r1, #0
 8007590:	6a38      	ldr	r0, [r7, #32]
 8007592:	f7ff fe11 	bl	80071b8 <xTimerGenericCommand>
 8007596:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d144      	bne.n	8007628 <prvProcessReceivedCommands+0x17c>
 800759e:	492b      	ldr	r1, [pc, #172]	; (800764c <prvProcessReceivedCommands+0x1a0>)
 80075a0:	f240 3036 	movw	r0, #822	; 0x336
 80075a4:	f7f9 fd68 	bl	8001078 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80075a8:	e03e      	b.n	8007628 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80075bc:	e034      	b.n	8007628 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075c4:	f043 0301 	orr.w	r3, r3, #1
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d104      	bne.n	80075e8 <prvProcessReceivedCommands+0x13c>
 80075de:	491b      	ldr	r1, [pc, #108]	; (800764c <prvProcessReceivedCommands+0x1a0>)
 80075e0:	f240 304f 	movw	r0, #847	; 0x34f
 80075e4:	f7f9 fd48 	bl	8001078 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	699a      	ldr	r2, [r3, #24]
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	18d1      	adds	r1, r2, r3
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	6a38      	ldr	r0, [r7, #32]
 80075f6:	f7ff ff17 	bl	8007428 <prvInsertTimerInActiveList>
                        break;
 80075fa:	e015      	b.n	8007628 <prvProcessReceivedCommands+0x17c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 800760a:	6a38      	ldr	r0, [r7, #32]
 800760c:	f000 fbba 	bl	8007d84 <vPortFree>
 8007610:	e00a      	b.n	8007628 <prvProcessReceivedCommands+0x17c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007618:	f023 0301 	bic.w	r3, r3, #1
 800761c:	b2da      	uxtb	r2, r3
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007624:	e000      	b.n	8007628 <prvProcessReceivedCommands+0x17c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007626:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007628:	4b09      	ldr	r3, [pc, #36]	; (8007650 <prvProcessReceivedCommands+0x1a4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f107 0108 	add.w	r1, r7, #8
 8007630:	2200      	movs	r2, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fcae 	bl	8005f94 <xQueueReceive>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	f47f af3a 	bne.w	80074b4 <prvProcessReceivedCommands+0x8>
        }
    }
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	3728      	adds	r7, #40	; 0x28
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	08008aa0 	.word	0x08008aa0
 8007650:	200003e0 	.word	0x200003e0

08007654 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800765a:	e042      	b.n	80076e2 <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800765c:	4b2a      	ldr	r3, [pc, #168]	; (8007708 <prvSwitchTimerLists+0xb4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007666:	4b28      	ldr	r3, [pc, #160]	; (8007708 <prvSwitchTimerLists+0xb4>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3304      	adds	r3, #4
 8007674:	4618      	mov	r0, r3
 8007676:	f7fe fa0c 	bl	8005a92 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d028      	beq.n	80076e2 <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	4413      	add	r3, r2
 8007698:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d90e      	bls.n	80076c0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076ae:	4b16      	ldr	r3, [pc, #88]	; (8007708 <prvSwitchTimerLists+0xb4>)
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3304      	adds	r3, #4
 80076b6:	4619      	mov	r1, r3
 80076b8:	4610      	mov	r0, r2
 80076ba:	f7fe f9b1 	bl	8005a20 <vListInsert>
 80076be:	e010      	b.n	80076e2 <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076c0:	2300      	movs	r3, #0
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	2300      	movs	r3, #0
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	2100      	movs	r1, #0
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7ff fd74 	bl	80071b8 <xTimerGenericCommand>
 80076d0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d104      	bne.n	80076e2 <prvSwitchTimerLists+0x8e>
 80076d8:	490c      	ldr	r1, [pc, #48]	; (800770c <prvSwitchTimerLists+0xb8>)
 80076da:	f240 30a9 	movw	r0, #937	; 0x3a9
 80076de:	f7f9 fccb 	bl	8001078 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076e2:	4b09      	ldr	r3, [pc, #36]	; (8007708 <prvSwitchTimerLists+0xb4>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1b7      	bne.n	800765c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <prvSwitchTimerLists+0xb4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80076f2:	4b07      	ldr	r3, [pc, #28]	; (8007710 <prvSwitchTimerLists+0xbc>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a04      	ldr	r2, [pc, #16]	; (8007708 <prvSwitchTimerLists+0xb4>)
 80076f8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80076fa:	4a05      	ldr	r2, [pc, #20]	; (8007710 <prvSwitchTimerLists+0xbc>)
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	6013      	str	r3, [r2, #0]
    }
 8007700:	bf00      	nop
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	200003d8 	.word	0x200003d8
 800770c:	08008aa0 	.word	0x08008aa0
 8007710:	200003dc 	.word	0x200003dc

08007714 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007718:	f000 f956 	bl	80079c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800771c:	4b12      	ldr	r3, [pc, #72]	; (8007768 <prvCheckForValidListAndQueue+0x54>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d11d      	bne.n	8007760 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007724:	4811      	ldr	r0, [pc, #68]	; (800776c <prvCheckForValidListAndQueue+0x58>)
 8007726:	f7fe f92a 	bl	800597e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800772a:	4811      	ldr	r0, [pc, #68]	; (8007770 <prvCheckForValidListAndQueue+0x5c>)
 800772c:	f7fe f927 	bl	800597e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007730:	4b10      	ldr	r3, [pc, #64]	; (8007774 <prvCheckForValidListAndQueue+0x60>)
 8007732:	4a0e      	ldr	r2, [pc, #56]	; (800776c <prvCheckForValidListAndQueue+0x58>)
 8007734:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <prvCheckForValidListAndQueue+0x64>)
 8007738:	4a0d      	ldr	r2, [pc, #52]	; (8007770 <prvCheckForValidListAndQueue+0x5c>)
 800773a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800773c:	2200      	movs	r2, #0
 800773e:	2110      	movs	r1, #16
 8007740:	2005      	movs	r0, #5
 8007742:	f7fe fa35 	bl	8005bb0 <xQueueGenericCreate>
 8007746:	4603      	mov	r3, r0
 8007748:	4a07      	ldr	r2, [pc, #28]	; (8007768 <prvCheckForValidListAndQueue+0x54>)
 800774a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <prvCheckForValidListAndQueue+0x54>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007754:	4b04      	ldr	r3, [pc, #16]	; (8007768 <prvCheckForValidListAndQueue+0x54>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4908      	ldr	r1, [pc, #32]	; (800777c <prvCheckForValidListAndQueue+0x68>)
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fdfa 	bl	8006354 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007760:	f000 f95e 	bl	8007a20 <vPortExitCritical>
    }
 8007764:	bf00      	nop
 8007766:	bd80      	pop	{r7, pc}
 8007768:	200003e0 	.word	0x200003e0
 800776c:	200003b0 	.word	0x200003b0
 8007770:	200003c4 	.word	0x200003c4
 8007774:	200003d8 	.word	0x200003d8
 8007778:	200003dc 	.word	0x200003dc
 800777c:	08008ac0 	.word	0x08008ac0

08007780 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	60fb      	str	r3, [r7, #12]
        void * pvReturn;

        configASSERT( xTimer );
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d104      	bne.n	800779c <pvTimerGetTimerID+0x1c>
 8007792:	4908      	ldr	r1, [pc, #32]	; (80077b4 <pvTimerGetTimerID+0x34>)
 8007794:	f240 400a 	movw	r0, #1034	; 0x40a
 8007798:	f7f9 fc6e 	bl	8001078 <vAssertCalled>

        taskENTER_CRITICAL();
 800779c:	f000 f914 	bl	80079c8 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 80077a6:	f000 f93b 	bl	8007a20 <vPortExitCritical>

        return pvReturn;
 80077aa:	68bb      	ldr	r3, [r7, #8]
    }
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	08008aa0 	.word	0x08008aa0

080077b8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3b04      	subs	r3, #4
 80077c8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3b04      	subs	r3, #4
 80077d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f023 0201 	bic.w	r2, r3, #1
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3b04      	subs	r3, #4
 80077e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80077e8:	4a0c      	ldr	r2, [pc, #48]	; (800781c <pxPortInitialiseStack+0x64>)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3b14      	subs	r3, #20
 80077f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3b04      	subs	r3, #4
 80077fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f06f 0202 	mvn.w	r2, #2
 8007806:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3b20      	subs	r3, #32
 800780c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800780e:	68fb      	ldr	r3, [r7, #12]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	08007821 	.word	0x08007821

08007820 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007826:	2300      	movs	r3, #0
 8007828:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800782a:	4b0f      	ldr	r3, [pc, #60]	; (8007868 <prvTaskExitError+0x48>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	d003      	beq.n	800783c <prvTaskExitError+0x1c>
 8007834:	490d      	ldr	r1, [pc, #52]	; (800786c <prvTaskExitError+0x4c>)
 8007836:	20e3      	movs	r0, #227	; 0xe3
 8007838:	f7f9 fc1e 	bl	8001078 <vAssertCalled>
        __asm volatile
 800783c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007840:	b672      	cpsid	i
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	b662      	cpsie	i
 8007850:	607b      	str	r3, [r7, #4]
    }
 8007852:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007854:	bf00      	nop
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0fc      	beq.n	8007856 <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800785c:	bf00      	nop
 800785e:	bf00      	nop
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20000030 	.word	0x20000030
 800786c:	08008ac8 	.word	0x08008ac8

08007870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007870:	4b07      	ldr	r3, [pc, #28]	; (8007890 <pxCurrentTCBConst2>)
 8007872:	6819      	ldr	r1, [r3, #0]
 8007874:	6808      	ldr	r0, [r1, #0]
 8007876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787a:	f380 8809 	msr	PSP, r0
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f380 8811 	msr	BASEPRI, r0
 800788a:	4770      	bx	lr
 800788c:	f3af 8000 	nop.w

08007890 <pxCurrentTCBConst2>:
 8007890:	200002ac 	.word	0x200002ac
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop

08007898 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007898:	4808      	ldr	r0, [pc, #32]	; (80078bc <prvPortStartFirstTask+0x24>)
 800789a:	6800      	ldr	r0, [r0, #0]
 800789c:	6800      	ldr	r0, [r0, #0]
 800789e:	f380 8808 	msr	MSP, r0
 80078a2:	f04f 0000 	mov.w	r0, #0
 80078a6:	f380 8814 	msr	CONTROL, r0
 80078aa:	b662      	cpsie	i
 80078ac:	b661      	cpsie	f
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	df00      	svc	0
 80078b8:	bf00      	nop
 80078ba:	0000      	.short	0x0000
 80078bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80078c0:	bf00      	nop
 80078c2:	bf00      	nop

080078c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078ca:	4b38      	ldr	r3, [pc, #224]	; (80079ac <xPortStartScheduler+0xe8>)
 80078cc:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	22ff      	movs	r2, #255	; 0xff
 80078da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	4b30      	ldr	r3, [pc, #192]	; (80079b0 <xPortStartScheduler+0xec>)
 80078f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078f2:	4b30      	ldr	r3, [pc, #192]	; (80079b4 <xPortStartScheduler+0xf0>)
 80078f4:	2207      	movs	r2, #7
 80078f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078f8:	e009      	b.n	800790e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80078fa:	4b2e      	ldr	r3, [pc, #184]	; (80079b4 <xPortStartScheduler+0xf0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3b01      	subs	r3, #1
 8007900:	4a2c      	ldr	r2, [pc, #176]	; (80079b4 <xPortStartScheduler+0xf0>)
 8007902:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007904:	79fb      	ldrb	r3, [r7, #7]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	b2db      	uxtb	r3, r3
 800790c:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007916:	2b80      	cmp	r3, #128	; 0x80
 8007918:	d0ef      	beq.n	80078fa <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800791a:	4b26      	ldr	r3, [pc, #152]	; (80079b4 <xPortStartScheduler+0xf0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f1c3 0307 	rsb	r3, r3, #7
 8007922:	2b04      	cmp	r3, #4
 8007924:	d004      	beq.n	8007930 <xPortStartScheduler+0x6c>
 8007926:	4924      	ldr	r1, [pc, #144]	; (80079b8 <xPortStartScheduler+0xf4>)
 8007928:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800792c:	f7f9 fba4 	bl	8001078 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007930:	4b20      	ldr	r3, [pc, #128]	; (80079b4 <xPortStartScheduler+0xf0>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f1c3 0307 	rsb	r3, r3, #7
 8007938:	2b04      	cmp	r3, #4
 800793a:	d004      	beq.n	8007946 <xPortStartScheduler+0x82>
 800793c:	491e      	ldr	r1, [pc, #120]	; (80079b8 <xPortStartScheduler+0xf4>)
 800793e:	f240 1057 	movw	r0, #343	; 0x157
 8007942:	f7f9 fb99 	bl	8001078 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007946:	4b1b      	ldr	r3, [pc, #108]	; (80079b4 <xPortStartScheduler+0xf0>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	021b      	lsls	r3, r3, #8
 800794c:	4a19      	ldr	r2, [pc, #100]	; (80079b4 <xPortStartScheduler+0xf0>)
 800794e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007950:	4b18      	ldr	r3, [pc, #96]	; (80079b4 <xPortStartScheduler+0xf0>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007958:	4a16      	ldr	r2, [pc, #88]	; (80079b4 <xPortStartScheduler+0xf0>)
 800795a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	b2da      	uxtb	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007964:	4b15      	ldr	r3, [pc, #84]	; (80079bc <xPortStartScheduler+0xf8>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a14      	ldr	r2, [pc, #80]	; (80079bc <xPortStartScheduler+0xf8>)
 800796a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800796e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007970:	4b12      	ldr	r3, [pc, #72]	; (80079bc <xPortStartScheduler+0xf8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a11      	ldr	r2, [pc, #68]	; (80079bc <xPortStartScheduler+0xf8>)
 8007976:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800797a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800797c:	f000 f8d0 	bl	8007b20 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007980:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <xPortStartScheduler+0xfc>)
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007986:	f000 f8ef 	bl	8007b68 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800798a:	4b0e      	ldr	r3, [pc, #56]	; (80079c4 <xPortStartScheduler+0x100>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a0d      	ldr	r2, [pc, #52]	; (80079c4 <xPortStartScheduler+0x100>)
 8007990:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007994:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007996:	f7ff ff7f 	bl	8007898 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800799a:	f7ff f865 	bl	8006a68 <vTaskSwitchContext>
    prvTaskExitError();
 800799e:	f7ff ff3f 	bl	8007820 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	e000e400 	.word	0xe000e400
 80079b0:	200003ec 	.word	0x200003ec
 80079b4:	200003f0 	.word	0x200003f0
 80079b8:	08008ac8 	.word	0x08008ac8
 80079bc:	e000ed20 	.word	0xe000ed20
 80079c0:	20000030 	.word	0x20000030
 80079c4:	e000ef34 	.word	0xe000ef34

080079c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
        __asm volatile
 80079ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80079d2:	b672      	cpsid	i
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	b662      	cpsie	i
 80079e2:	607b      	str	r3, [r7, #4]
    }
 80079e4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80079e6:	4b0b      	ldr	r3, [pc, #44]	; (8007a14 <vPortEnterCritical+0x4c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3301      	adds	r3, #1
 80079ec:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <vPortEnterCritical+0x4c>)
 80079ee:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80079f0:	4b08      	ldr	r3, [pc, #32]	; (8007a14 <vPortEnterCritical+0x4c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d109      	bne.n	8007a0c <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079f8:	4b07      	ldr	r3, [pc, #28]	; (8007a18 <vPortEnterCritical+0x50>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d004      	beq.n	8007a0c <vPortEnterCritical+0x44>
 8007a02:	4906      	ldr	r1, [pc, #24]	; (8007a1c <vPortEnterCritical+0x54>)
 8007a04:	f240 10e9 	movw	r0, #489	; 0x1e9
 8007a08:	f7f9 fb36 	bl	8001078 <vAssertCalled>
    }
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20000030 	.word	0x20000030
 8007a18:	e000ed04 	.word	0xe000ed04
 8007a1c:	08008ac8 	.word	0x08008ac8

08007a20 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007a26:	4b0e      	ldr	r3, [pc, #56]	; (8007a60 <vPortExitCritical+0x40>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d104      	bne.n	8007a38 <vPortExitCritical+0x18>
 8007a2e:	490d      	ldr	r1, [pc, #52]	; (8007a64 <vPortExitCritical+0x44>)
 8007a30:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 8007a34:	f7f9 fb20 	bl	8001078 <vAssertCalled>
    uxCriticalNesting--;
 8007a38:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <vPortExitCritical+0x40>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	4a08      	ldr	r2, [pc, #32]	; (8007a60 <vPortExitCritical+0x40>)
 8007a40:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007a42:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <vPortExitCritical+0x40>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d105      	bne.n	8007a56 <vPortExitCritical+0x36>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	607b      	str	r3, [r7, #4]
        __asm volatile
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f383 8811 	msr	BASEPRI, r3
    }
 8007a54:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20000030 	.word	0x20000030
 8007a64:	08008ac8 	.word	0x08008ac8
	...

08007a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007a70:	f3ef 8009 	mrs	r0, PSP
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4b15      	ldr	r3, [pc, #84]	; (8007ad0 <pxCurrentTCBConst>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f01e 0f10 	tst.w	lr, #16
 8007a80:	bf08      	it	eq
 8007a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a90:	f04f 0040 	mov.w	r0, #64	; 0x40
 8007a94:	b672      	cpsid	i
 8007a96:	f380 8811 	msr	BASEPRI, r0
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	b662      	cpsie	i
 8007aa4:	f7fe ffe0 	bl	8006a68 <vTaskSwitchContext>
 8007aa8:	f04f 0000 	mov.w	r0, #0
 8007aac:	f380 8811 	msr	BASEPRI, r0
 8007ab0:	bc09      	pop	{r0, r3}
 8007ab2:	6819      	ldr	r1, [r3, #0]
 8007ab4:	6808      	ldr	r0, [r1, #0]
 8007ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	f01e 0f10 	tst.w	lr, #16
 8007abe:	bf08      	it	eq
 8007ac0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ac4:	f380 8809 	msr	PSP, r0
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop

08007ad0 <pxCurrentTCBConst>:
 8007ad0:	200002ac 	.word	0x200002ac
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
        __asm volatile
 8007ade:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007ae2:	b672      	cpsid	i
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	b662      	cpsie	i
 8007af2:	607b      	str	r3, [r7, #4]
    }
 8007af4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007af6:	f7fe ff03 	bl	8006900 <xTaskIncrementTick>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <SysTick_Handler+0x30>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b00:	4b06      	ldr	r3, [pc, #24]	; (8007b1c <SysTick_Handler+0x44>)
 8007b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	f383 8811 	msr	BASEPRI, r3
    }
 8007b12:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	e000ed04 	.word	0xe000ed04

08007b20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b24:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <vPortSetupTimerInterrupt+0x34>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b2a:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <vPortSetupTimerInterrupt+0x38>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b30:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <vPortSetupTimerInterrupt+0x3c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	4a0a      	ldr	r2, [pc, #40]	; (8007b60 <vPortSetupTimerInterrupt+0x40>)
 8007b38:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3c:	09db      	lsrs	r3, r3, #7
 8007b3e:	4a09      	ldr	r2, [pc, #36]	; (8007b64 <vPortSetupTimerInterrupt+0x44>)
 8007b40:	3b01      	subs	r3, #1
 8007b42:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b44:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <vPortSetupTimerInterrupt+0x34>)
 8007b46:	2207      	movs	r2, #7
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	e000e010 	.word	0xe000e010
 8007b58:	e000e018 	.word	0xe000e018
 8007b5c:	2000000c 	.word	0x2000000c
 8007b60:	0a7c5ac5 	.word	0x0a7c5ac5
 8007b64:	e000e014 	.word	0xe000e014

08007b68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007b68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b78 <vPortEnableVFP+0x10>
 8007b6c:	6801      	ldr	r1, [r0, #0]
 8007b6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b72:	6001      	str	r1, [r0, #0]
 8007b74:	4770      	bx	lr
 8007b76:	0000      	.short	0x0000
 8007b78:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007b7c:	bf00      	nop
 8007b7e:	bf00      	nop

08007b80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007b86:	f3ef 8305 	mrs	r3, IPSR
 8007b8a:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b0f      	cmp	r3, #15
 8007b90:	d90e      	bls.n	8007bb0 <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b92:	4a10      	ldr	r2, [pc, #64]	; (8007bd4 <vPortValidateInterruptPriority+0x54>)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4413      	add	r3, r2
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <vPortValidateInterruptPriority+0x58>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	78fa      	ldrb	r2, [r7, #3]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d204      	bcs.n	8007bb0 <vPortValidateInterruptPriority+0x30>
 8007ba6:	490d      	ldr	r1, [pc, #52]	; (8007bdc <vPortValidateInterruptPriority+0x5c>)
 8007ba8:	f240 3049 	movw	r0, #841	; 0x349
 8007bac:	f7f9 fa64 	bl	8001078 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bb0:	4b0b      	ldr	r3, [pc, #44]	; (8007be0 <vPortValidateInterruptPriority+0x60>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <vPortValidateInterruptPriority+0x64>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d904      	bls.n	8007bca <vPortValidateInterruptPriority+0x4a>
 8007bc0:	4906      	ldr	r1, [pc, #24]	; (8007bdc <vPortValidateInterruptPriority+0x5c>)
 8007bc2:	f240 3059 	movw	r0, #857	; 0x359
 8007bc6:	f7f9 fa57 	bl	8001078 <vAssertCalled>
    }
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	e000e3f0 	.word	0xe000e3f0
 8007bd8:	200003ec 	.word	0x200003ec
 8007bdc:	08008ac8 	.word	0x08008ac8
 8007be0:	e000ed0c 	.word	0xe000ed0c
 8007be4:	200003f0 	.word	0x200003f0

08007be8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8007bf4:	f7fe fdce 	bl	8006794 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007bf8:	4b5b      	ldr	r3, [pc, #364]	; (8007d68 <pvPortMalloc+0x180>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007c00:	f000 f918 	bl	8007e34 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c04:	4b59      	ldr	r3, [pc, #356]	; (8007d6c <pvPortMalloc+0x184>)
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f040 809a 	bne.w	8007d46 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d027      	beq.n	8007c68 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007c18:	2208      	movs	r2, #8
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d221      	bcs.n	8007c68 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 8007c24:	2208      	movs	r2, #8
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4413      	add	r3, r2
 8007c2a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d01b      	beq.n	8007c6e <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f023 0307 	bic.w	r3, r3, #7
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d20e      	bcs.n	8007c62 <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f023 0307 	bic.w	r3, r3, #7
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f003 0307 	and.w	r3, r3, #7
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <pvPortMalloc+0x86>
 8007c58:	4945      	ldr	r1, [pc, #276]	; (8007d70 <pvPortMalloc+0x188>)
 8007c5a:	209a      	movs	r0, #154	; 0x9a
 8007c5c:	f7f9 fa0c 	bl	8001078 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c60:	e005      	b.n	8007c6e <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c66:	e002      	b.n	8007c6e <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	607b      	str	r3, [r7, #4]
 8007c6c:	e000      	b.n	8007c70 <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d067      	beq.n	8007d46 <pvPortMalloc+0x15e>
 8007c76:	4b3f      	ldr	r3, [pc, #252]	; (8007d74 <pvPortMalloc+0x18c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d862      	bhi.n	8007d46 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007c80:	4b3d      	ldr	r3, [pc, #244]	; (8007d78 <pvPortMalloc+0x190>)
 8007c82:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8007c84:	4b3c      	ldr	r3, [pc, #240]	; (8007d78 <pvPortMalloc+0x190>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c8a:	e004      	b.n	8007c96 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d903      	bls.n	8007ca8 <pvPortMalloc+0xc0>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1f1      	bne.n	8007c8c <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007ca8:	4b2f      	ldr	r3, [pc, #188]	; (8007d68 <pvPortMalloc+0x180>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d049      	beq.n	8007d46 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	4413      	add	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	1ad2      	subs	r2, r2, r3
 8007ccc:	2308      	movs	r3, #8
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d918      	bls.n	8007d06 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4413      	add	r3, r2
 8007cda:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <pvPortMalloc+0x106>
 8007ce6:	4922      	ldr	r1, [pc, #136]	; (8007d70 <pvPortMalloc+0x188>)
 8007ce8:	20cd      	movs	r0, #205	; 0xcd
 8007cea:	f7f9 f9c5 	bl	8001078 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	1ad2      	subs	r2, r2, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d00:	68b8      	ldr	r0, [r7, #8]
 8007d02:	f000 f8f9 	bl	8007ef8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d06:	4b1b      	ldr	r3, [pc, #108]	; (8007d74 <pvPortMalloc+0x18c>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	4a18      	ldr	r2, [pc, #96]	; (8007d74 <pvPortMalloc+0x18c>)
 8007d12:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d14:	4b17      	ldr	r3, [pc, #92]	; (8007d74 <pvPortMalloc+0x18c>)
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	4b18      	ldr	r3, [pc, #96]	; (8007d7c <pvPortMalloc+0x194>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d203      	bcs.n	8007d28 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d20:	4b14      	ldr	r3, [pc, #80]	; (8007d74 <pvPortMalloc+0x18c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a15      	ldr	r2, [pc, #84]	; (8007d7c <pvPortMalloc+0x194>)
 8007d26:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	4b0f      	ldr	r3, [pc, #60]	; (8007d6c <pvPortMalloc+0x184>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	431a      	orrs	r2, r3
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007d3c:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <pvPortMalloc+0x198>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3301      	adds	r3, #1
 8007d42:	4a0f      	ldr	r2, [pc, #60]	; (8007d80 <pvPortMalloc+0x198>)
 8007d44:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007d46:	f7fe fd33 	bl	80067b0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f003 0307 	and.w	r3, r3, #7
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d004      	beq.n	8007d5e <pvPortMalloc+0x176>
 8007d54:	4906      	ldr	r1, [pc, #24]	; (8007d70 <pvPortMalloc+0x188>)
 8007d56:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007d5a:	f7f9 f98d 	bl	8001078 <vAssertCalled>
    return pvReturn;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	200193fc 	.word	0x200193fc
 8007d6c:	20019410 	.word	0x20019410
 8007d70:	08008b00 	.word	0x08008b00
 8007d74:	20019400 	.word	0x20019400
 8007d78:	200193f4 	.word	0x200193f4
 8007d7c:	20019404 	.word	0x20019404
 8007d80:	20019408 	.word	0x20019408

08007d84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d041      	beq.n	8007e1a <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007d96:	2308      	movs	r3, #8
 8007d98:	425b      	negs	r3, r3
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	4b1e      	ldr	r3, [pc, #120]	; (8007e24 <vPortFree+0xa0>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4013      	ands	r3, r2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d104      	bne.n	8007dbc <vPortFree+0x38>
 8007db2:	491d      	ldr	r1, [pc, #116]	; (8007e28 <vPortFree+0xa4>)
 8007db4:	f44f 7091 	mov.w	r0, #290	; 0x122
 8007db8:	f7f9 f95e 	bl	8001078 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d004      	beq.n	8007dce <vPortFree+0x4a>
 8007dc4:	4918      	ldr	r1, [pc, #96]	; (8007e28 <vPortFree+0xa4>)
 8007dc6:	f240 1023 	movw	r0, #291	; 0x123
 8007dca:	f7f9 f955 	bl	8001078 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	4b14      	ldr	r3, [pc, #80]	; (8007e24 <vPortFree+0xa0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01e      	beq.n	8007e1a <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d11a      	bne.n	8007e1a <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	4b0e      	ldr	r3, [pc, #56]	; (8007e24 <vPortFree+0xa0>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	43db      	mvns	r3, r3
 8007dee:	401a      	ands	r2, r3
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007df4:	f7fe fcce 	bl	8006794 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <vPortFree+0xa8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4413      	add	r3, r2
 8007e02:	4a0a      	ldr	r2, [pc, #40]	; (8007e2c <vPortFree+0xa8>)
 8007e04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e06:	68b8      	ldr	r0, [r7, #8]
 8007e08:	f000 f876 	bl	8007ef8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007e0c:	4b08      	ldr	r3, [pc, #32]	; (8007e30 <vPortFree+0xac>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3301      	adds	r3, #1
 8007e12:	4a07      	ldr	r2, [pc, #28]	; (8007e30 <vPortFree+0xac>)
 8007e14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007e16:	f7fe fccb 	bl	80067b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007e1a:	bf00      	nop
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20019410 	.word	0x20019410
 8007e28:	08008b00 	.word	0x08008b00
 8007e2c:	20019400 	.word	0x20019400
 8007e30:	2001940c 	.word	0x2001940c

08007e34 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e3a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8007e3e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007e40:	4b27      	ldr	r3, [pc, #156]	; (8007ee0 <prvHeapInit+0xac>)
 8007e42:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00c      	beq.n	8007e68 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3307      	adds	r3, #7
 8007e52:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0307 	bic.w	r3, r3, #7
 8007e5a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	4a1f      	ldr	r2, [pc, #124]	; (8007ee0 <prvHeapInit+0xac>)
 8007e64:	4413      	add	r3, r2
 8007e66:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <prvHeapInit+0xb0>)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007e72:	4b1c      	ldr	r3, [pc, #112]	; (8007ee4 <prvHeapInit+0xb0>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007e80:	2208      	movs	r2, #8
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	1a9b      	subs	r3, r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0307 	bic.w	r3, r3, #7
 8007e8e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4a15      	ldr	r2, [pc, #84]	; (8007ee8 <prvHeapInit+0xb4>)
 8007e94:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007e96:	4b14      	ldr	r3, [pc, #80]	; (8007ee8 <prvHeapInit+0xb4>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007e9e:	4b12      	ldr	r3, [pc, #72]	; (8007ee8 <prvHeapInit+0xb4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	1ad2      	subs	r2, r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <prvHeapInit+0xb4>)
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <prvHeapInit+0xb8>)
 8007ec2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	4a09      	ldr	r2, [pc, #36]	; (8007ef0 <prvHeapInit+0xbc>)
 8007eca:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ecc:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <prvHeapInit+0xc0>)
 8007ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ed2:	601a      	str	r2, [r3, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	200003f4 	.word	0x200003f4
 8007ee4:	200193f4 	.word	0x200193f4
 8007ee8:	200193fc 	.word	0x200193fc
 8007eec:	20019404 	.word	0x20019404
 8007ef0:	20019400 	.word	0x20019400
 8007ef4:	20019410 	.word	0x20019410

08007ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f00:	4b28      	ldr	r3, [pc, #160]	; (8007fa4 <prvInsertBlockIntoFreeList+0xac>)
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e002      	b.n	8007f0c <prvInsertBlockIntoFreeList+0x14>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d8f7      	bhi.n	8007f06 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	4413      	add	r3, r2
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d108      	bne.n	8007f3a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	441a      	add	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	441a      	add	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d118      	bne.n	8007f80 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	4b15      	ldr	r3, [pc, #84]	; (8007fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d00d      	beq.n	8007f76 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	441a      	add	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	e008      	b.n	8007f88 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f76:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	e003      	b.n	8007f88 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d002      	beq.n	8007f96 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007f96:	bf00      	nop
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	200193f4 	.word	0x200193f4
 8007fa8:	200193fc 	.word	0x200193fc

08007fac <SELECT>:
#define SD_CS_GPIO_Port GPIOF
#define SD_CS_Pin GPIO_PIN_12

/* SPI Chip Select */
static void SELECT(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007fb6:	4802      	ldr	r0, [pc, #8]	; (8007fc0 <SELECT+0x14>)
 8007fb8:	f7f9 fe3a 	bl	8001c30 <HAL_GPIO_WritePin>
}
 8007fbc:	bf00      	nop
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	40021400 	.word	0x40021400

08007fc4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007fce:	4802      	ldr	r0, [pc, #8]	; (8007fd8 <DESELECT+0x14>)
 8007fd0:	f7f9 fe2e 	bl	8001c30 <HAL_GPIO_WritePin>
}
 8007fd4:	bf00      	nop
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	40021400 	.word	0x40021400

08007fdc <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8007fe6:	bf00      	nop
 8007fe8:	4808      	ldr	r0, [pc, #32]	; (800800c <SPI_TxByte+0x30>)
 8007fea:	f7fb fd0b 	bl	8003a04 <HAL_SPI_GetState>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d1f9      	bne.n	8007fe8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8007ff4:	1df9      	adds	r1, r7, #7
 8007ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	4803      	ldr	r0, [pc, #12]	; (800800c <SPI_TxByte+0x30>)
 8007ffe:	f7fb f980 	bl	8003302 <HAL_SPI_Transmit>
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	200000fc 	.word	0x200000fc

08008010 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8008016:	23ff      	movs	r3, #255	; 0xff
 8008018:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800801e:	bf00      	nop
 8008020:	4809      	ldr	r0, [pc, #36]	; (8008048 <SPI_RxByte+0x38>)
 8008022:	f7fb fcef 	bl	8003a04 <HAL_SPI_GetState>
 8008026:	4603      	mov	r3, r0
 8008028:	2b01      	cmp	r3, #1
 800802a:	d1f9      	bne.n	8008020 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800802c:	1dba      	adds	r2, r7, #6
 800802e:	1df9      	adds	r1, r7, #7
 8008030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	2301      	movs	r3, #1
 8008038:	4803      	ldr	r0, [pc, #12]	; (8008048 <SPI_RxByte+0x38>)
 800803a:	f7fb fad0 	bl	80035de <HAL_SPI_TransmitReceive>

  return data;
 800803e:	79bb      	ldrb	r3, [r7, #6]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	200000fc 	.word	0x200000fc

0800804c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8008054:	f7ff ffdc 	bl	8008010 <SPI_RxByte>
 8008058:	4603      	mov	r3, r0
 800805a:	461a      	mov	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	701a      	strb	r2, [r3, #0]
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800806e:	4b0b      	ldr	r3, [pc, #44]	; (800809c <SD_ReadyWait+0x34>)
 8008070:	2232      	movs	r2, #50	; 0x32
 8008072:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8008074:	f7ff ffcc 	bl	8008010 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8008078:	f7ff ffca 	bl	8008010 <SPI_RxByte>
 800807c:	4603      	mov	r3, r0
 800807e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	2bff      	cmp	r3, #255	; 0xff
 8008084:	d004      	beq.n	8008090 <SD_ReadyWait+0x28>
 8008086:	4b05      	ldr	r3, [pc, #20]	; (800809c <SD_ReadyWait+0x34>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1f3      	bne.n	8008078 <SD_ReadyWait+0x10>

  return res;
 8008090:	79fb      	ldrb	r3, [r7, #7]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000250 	.word	0x20000250

080080a0 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80080a6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80080aa:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80080ac:	f7ff ff8a 	bl	8007fc4 <DESELECT>

  for(int i = 0; i < 10; i++)
 80080b0:	2300      	movs	r3, #0
 80080b2:	613b      	str	r3, [r7, #16]
 80080b4:	e005      	b.n	80080c2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80080b6:	20ff      	movs	r0, #255	; 0xff
 80080b8:	f7ff ff90 	bl	8007fdc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	3301      	adds	r3, #1
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b09      	cmp	r3, #9
 80080c6:	ddf6      	ble.n	80080b6 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80080c8:	f7ff ff70 	bl	8007fac <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80080cc:	2340      	movs	r3, #64	; 0x40
 80080ce:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80080e0:	2395      	movs	r3, #149	; 0x95
 80080e2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	e009      	b.n	80080fe <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80080ea:	1d3a      	adds	r2, r7, #4
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4413      	add	r3, r2
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff ff72 	bl	8007fdc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3301      	adds	r3, #1
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b05      	cmp	r3, #5
 8008102:	ddf2      	ble.n	80080ea <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8008104:	e002      	b.n	800810c <SD_PowerOn+0x6c>
  {
    Count--;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	3b01      	subs	r3, #1
 800810a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800810c:	f7ff ff80 	bl	8008010 <SPI_RxByte>
 8008110:	4603      	mov	r3, r0
 8008112:	2b01      	cmp	r3, #1
 8008114:	d002      	beq.n	800811c <SD_PowerOn+0x7c>
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1f4      	bne.n	8008106 <SD_PowerOn+0x66>
  }

  DESELECT();
 800811c:	f7ff ff52 	bl	8007fc4 <DESELECT>
  SPI_TxByte(0XFF);
 8008120:	20ff      	movs	r0, #255	; 0xff
 8008122:	f7ff ff5b 	bl	8007fdc <SPI_TxByte>

  PowerFlag = 1;
 8008126:	4b03      	ldr	r3, [pc, #12]	; (8008134 <SD_PowerOn+0x94>)
 8008128:	2201      	movs	r2, #1
 800812a:	701a      	strb	r2, [r3, #0]
}
 800812c:	bf00      	nop
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20019415 	.word	0x20019415

08008138 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8008138:	b480      	push	{r7}
 800813a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800813c:	4b03      	ldr	r3, [pc, #12]	; (800814c <SD_PowerOff+0x14>)
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]
}
 8008142:	bf00      	nop
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	20019415 	.word	0x20019415

08008150 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8008150:	b480      	push	{r7}
 8008152:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8008154:	4b03      	ldr	r3, [pc, #12]	; (8008164 <SD_CheckPower+0x14>)
 8008156:	781b      	ldrb	r3, [r3, #0]
}
 8008158:	4618      	mov	r0, r3
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20019415 	.word	0x20019415

08008168 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8008172:	4b17      	ldr	r3, [pc, #92]	; (80081d0 <SD_RxDataBlock+0x68>)
 8008174:	220a      	movs	r2, #10
 8008176:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8008178:	f7ff ff4a 	bl	8008010 <SPI_RxByte>
 800817c:	4603      	mov	r3, r0
 800817e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	2bff      	cmp	r3, #255	; 0xff
 8008184:	d104      	bne.n	8008190 <SD_RxDataBlock+0x28>
 8008186:	4b12      	ldr	r3, [pc, #72]	; (80081d0 <SD_RxDataBlock+0x68>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f3      	bne.n	8008178 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	2bfe      	cmp	r3, #254	; 0xfe
 8008194:	d001      	beq.n	800819a <SD_RxDataBlock+0x32>
    return FALSE;
 8008196:	2300      	movs	r3, #0
 8008198:	e016      	b.n	80081c8 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff ff53 	bl	800804c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7ff ff4d 	bl	800804c <SPI_RxBytePtr>
  } while(btr -= 2);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	3b02      	subs	r3, #2
 80081b6:	603b      	str	r3, [r7, #0]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1ed      	bne.n	800819a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80081be:	f7ff ff27 	bl	8008010 <SPI_RxByte>
  SPI_RxByte();
 80081c2:	f7ff ff25 	bl	8008010 <SPI_RxByte>

  return TRUE;
 80081c6:	2301      	movs	r3, #1
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	2000024e 	.word	0x2000024e

080081d4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80081e0:	2300      	movs	r3, #0
 80081e2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80081e4:	f7ff ff40 	bl	8008068 <SD_ReadyWait>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2bff      	cmp	r3, #255	; 0xff
 80081ec:	d001      	beq.n	80081f2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e040      	b.n	8008274 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff fef1 	bl	8007fdc <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80081fa:	78fb      	ldrb	r3, [r7, #3]
 80081fc:	2bfd      	cmp	r3, #253	; 0xfd
 80081fe:	d031      	beq.n	8008264 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	607a      	str	r2, [r7, #4]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	4618      	mov	r0, r3
 800820e:	f7ff fee5 	bl	8007fdc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff fede 	bl	8007fdc <SPI_TxByte>
    } while (--wc);
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	3b01      	subs	r3, #1
 8008224:	73bb      	strb	r3, [r7, #14]
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1eb      	bne.n	8008204 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 800822c:	f7ff fef0 	bl	8008010 <SPI_RxByte>
    SPI_RxByte();
 8008230:	f7ff feee 	bl	8008010 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8008234:	e00b      	b.n	800824e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8008236:	f7ff feeb 	bl	8008010 <SPI_RxByte>
 800823a:	4603      	mov	r3, r0
 800823c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	f003 031f 	and.w	r3, r3, #31
 8008244:	2b05      	cmp	r3, #5
 8008246:	d006      	beq.n	8008256 <SD_TxDataBlock+0x82>
        break;

      i++;
 8008248:	7b7b      	ldrb	r3, [r7, #13]
 800824a:	3301      	adds	r3, #1
 800824c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800824e:	7b7b      	ldrb	r3, [r7, #13]
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d9f0      	bls.n	8008236 <SD_TxDataBlock+0x62>
 8008254:	e000      	b.n	8008258 <SD_TxDataBlock+0x84>
        break;
 8008256:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8008258:	bf00      	nop
 800825a:	f7ff fed9 	bl	8008010 <SPI_RxByte>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d0fa      	beq.n	800825a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	f003 031f 	and.w	r3, r3, #31
 800826a:	2b05      	cmp	r3, #5
 800826c:	d101      	bne.n	8008272 <SD_TxDataBlock+0x9e>
    return TRUE;
 800826e:	2301      	movs	r3, #1
 8008270:	e000      	b.n	8008274 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	6039      	str	r1, [r7, #0]
 8008286:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8008288:	f7ff feee 	bl	8008068 <SD_ReadyWait>
 800828c:	4603      	mov	r3, r0
 800828e:	2bff      	cmp	r3, #255	; 0xff
 8008290:	d001      	beq.n	8008296 <SD_SendCmd+0x1a>
    return 0xFF;
 8008292:	23ff      	movs	r3, #255	; 0xff
 8008294:	e040      	b.n	8008318 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff fe9f 	bl	8007fdc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	0e1b      	lsrs	r3, r3, #24
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff fe99 	bl	8007fdc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	0c1b      	lsrs	r3, r3, #16
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff fe93 	bl	8007fdc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	0a1b      	lsrs	r3, r3, #8
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff fe8d 	bl	8007fdc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff fe88 	bl	8007fdc <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	2b40      	cmp	r3, #64	; 0x40
 80082d4:	d101      	bne.n	80082da <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80082d6:	2395      	movs	r3, #149	; 0x95
 80082d8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	2b48      	cmp	r3, #72	; 0x48
 80082de:	d101      	bne.n	80082e4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80082e0:	2387      	movs	r3, #135	; 0x87
 80082e2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff fe78 	bl	8007fdc <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	2b4c      	cmp	r3, #76	; 0x4c
 80082f0:	d101      	bne.n	80082f6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80082f2:	f7ff fe8d 	bl	8008010 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80082f6:	230a      	movs	r3, #10
 80082f8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80082fa:	f7ff fe89 	bl	8008010 <SPI_RxByte>
 80082fe:	4603      	mov	r3, r0
 8008300:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8008302:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008306:	2b00      	cmp	r3, #0
 8008308:	da05      	bge.n	8008316 <SD_SendCmd+0x9a>
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	3b01      	subs	r3, #1
 800830e:	73bb      	strb	r3, [r7, #14]
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1f1      	bne.n	80082fa <SD_SendCmd+0x7e>

  return res;
 8008316:	7b7b      	ldrb	r3, [r7, #13]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8008320:	b590      	push	{r4, r7, lr}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800832a:	79fb      	ldrb	r3, [r7, #7]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8008330:	2301      	movs	r3, #1
 8008332:	e0d5      	b.n	80084e0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8008334:	4b6c      	ldr	r3, [pc, #432]	; (80084e8 <SD_disk_initialize+0x1c8>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <SD_disk_initialize+0x2a>
    return Stat;
 8008342:	4b69      	ldr	r3, [pc, #420]	; (80084e8 <SD_disk_initialize+0x1c8>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	b2db      	uxtb	r3, r3
 8008348:	e0ca      	b.n	80084e0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800834a:	f7ff fea9 	bl	80080a0 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800834e:	f7ff fe2d 	bl	8007fac <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8008356:	2100      	movs	r1, #0
 8008358:	2040      	movs	r0, #64	; 0x40
 800835a:	f7ff ff8f 	bl	800827c <SD_SendCmd>
 800835e:	4603      	mov	r3, r0
 8008360:	2b01      	cmp	r3, #1
 8008362:	f040 80a5 	bne.w	80084b0 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8008366:	4b61      	ldr	r3, [pc, #388]	; (80084ec <SD_disk_initialize+0x1cc>)
 8008368:	2264      	movs	r2, #100	; 0x64
 800836a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800836c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008370:	2048      	movs	r0, #72	; 0x48
 8008372:	f7ff ff83 	bl	800827c <SD_SendCmd>
 8008376:	4603      	mov	r3, r0
 8008378:	2b01      	cmp	r3, #1
 800837a:	d158      	bne.n	800842e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800837c:	2300      	movs	r3, #0
 800837e:	73fb      	strb	r3, [r7, #15]
 8008380:	e00c      	b.n	800839c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8008382:	7bfc      	ldrb	r4, [r7, #15]
 8008384:	f7ff fe44 	bl	8008010 <SPI_RxByte>
 8008388:	4603      	mov	r3, r0
 800838a:	461a      	mov	r2, r3
 800838c:	f104 0310 	add.w	r3, r4, #16
 8008390:	443b      	add	r3, r7
 8008392:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	3301      	adds	r3, #1
 800839a:	73fb      	strb	r3, [r7, #15]
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d9ef      	bls.n	8008382 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80083a2:	7abb      	ldrb	r3, [r7, #10]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	f040 8083 	bne.w	80084b0 <SD_disk_initialize+0x190>
 80083aa:	7afb      	ldrb	r3, [r7, #11]
 80083ac:	2baa      	cmp	r3, #170	; 0xaa
 80083ae:	d17f      	bne.n	80084b0 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80083b0:	2100      	movs	r1, #0
 80083b2:	2077      	movs	r0, #119	; 0x77
 80083b4:	f7ff ff62 	bl	800827c <SD_SendCmd>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d807      	bhi.n	80083ce <SD_disk_initialize+0xae>
 80083be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80083c2:	2069      	movs	r0, #105	; 0x69
 80083c4:	f7ff ff5a 	bl	800827c <SD_SendCmd>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d005      	beq.n	80083da <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80083ce:	4b47      	ldr	r3, [pc, #284]	; (80084ec <SD_disk_initialize+0x1cc>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1eb      	bne.n	80083b0 <SD_disk_initialize+0x90>
 80083d8:	e000      	b.n	80083dc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80083da:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80083dc:	4b43      	ldr	r3, [pc, #268]	; (80084ec <SD_disk_initialize+0x1cc>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d064      	beq.n	80084b0 <SD_disk_initialize+0x190>
 80083e6:	2100      	movs	r1, #0
 80083e8:	207a      	movs	r0, #122	; 0x7a
 80083ea:	f7ff ff47 	bl	800827c <SD_SendCmd>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d15d      	bne.n	80084b0 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
 80083f8:	e00c      	b.n	8008414 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80083fa:	7bfc      	ldrb	r4, [r7, #15]
 80083fc:	f7ff fe08 	bl	8008010 <SPI_RxByte>
 8008400:	4603      	mov	r3, r0
 8008402:	461a      	mov	r2, r3
 8008404:	f104 0310 	add.w	r3, r4, #16
 8008408:	443b      	add	r3, r7
 800840a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	3301      	adds	r3, #1
 8008412:	73fb      	strb	r3, [r7, #15]
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	2b03      	cmp	r3, #3
 8008418:	d9ef      	bls.n	80083fa <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800841a:	7a3b      	ldrb	r3, [r7, #8]
 800841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <SD_disk_initialize+0x108>
 8008424:	2306      	movs	r3, #6
 8008426:	e000      	b.n	800842a <SD_disk_initialize+0x10a>
 8008428:	2302      	movs	r3, #2
 800842a:	73bb      	strb	r3, [r7, #14]
 800842c:	e040      	b.n	80084b0 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800842e:	2100      	movs	r1, #0
 8008430:	2077      	movs	r0, #119	; 0x77
 8008432:	f7ff ff23 	bl	800827c <SD_SendCmd>
 8008436:	4603      	mov	r3, r0
 8008438:	2b01      	cmp	r3, #1
 800843a:	d808      	bhi.n	800844e <SD_disk_initialize+0x12e>
 800843c:	2100      	movs	r1, #0
 800843e:	2069      	movs	r0, #105	; 0x69
 8008440:	f7ff ff1c 	bl	800827c <SD_SendCmd>
 8008444:	4603      	mov	r3, r0
 8008446:	2b01      	cmp	r3, #1
 8008448:	d801      	bhi.n	800844e <SD_disk_initialize+0x12e>
 800844a:	2302      	movs	r3, #2
 800844c:	e000      	b.n	8008450 <SD_disk_initialize+0x130>
 800844e:	2301      	movs	r3, #1
 8008450:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	2b02      	cmp	r3, #2
 8008456:	d10e      	bne.n	8008476 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8008458:	2100      	movs	r1, #0
 800845a:	2077      	movs	r0, #119	; 0x77
 800845c:	f7ff ff0e 	bl	800827c <SD_SendCmd>
 8008460:	4603      	mov	r3, r0
 8008462:	2b01      	cmp	r3, #1
 8008464:	d80e      	bhi.n	8008484 <SD_disk_initialize+0x164>
 8008466:	2100      	movs	r1, #0
 8008468:	2069      	movs	r0, #105	; 0x69
 800846a:	f7ff ff07 	bl	800827c <SD_SendCmd>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d107      	bne.n	8008484 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8008474:	e00d      	b.n	8008492 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8008476:	2100      	movs	r1, #0
 8008478:	2041      	movs	r0, #65	; 0x41
 800847a:	f7ff feff 	bl	800827c <SD_SendCmd>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d005      	beq.n	8008490 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8008484:	4b19      	ldr	r3, [pc, #100]	; (80084ec <SD_disk_initialize+0x1cc>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e1      	bne.n	8008452 <SD_disk_initialize+0x132>
 800848e:	e000      	b.n	8008492 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8008490:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8008492:	4b16      	ldr	r3, [pc, #88]	; (80084ec <SD_disk_initialize+0x1cc>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b00      	cmp	r3, #0
 800849a:	d007      	beq.n	80084ac <SD_disk_initialize+0x18c>
 800849c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084a0:	2050      	movs	r0, #80	; 0x50
 80084a2:	f7ff feeb 	bl	800827c <SD_SendCmd>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80084b0:	4a0f      	ldr	r2, [pc, #60]	; (80084f0 <SD_disk_initialize+0x1d0>)
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80084b6:	f7ff fd85 	bl	8007fc4 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80084ba:	f7ff fda9 	bl	8008010 <SPI_RxByte>

  if (type)
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d008      	beq.n	80084d6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80084c4:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <SD_disk_initialize+0x1c8>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	f023 0301 	bic.w	r3, r3, #1
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	4b05      	ldr	r3, [pc, #20]	; (80084e8 <SD_disk_initialize+0x1c8>)
 80084d2:	701a      	strb	r2, [r3, #0]
 80084d4:	e001      	b.n	80084da <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80084d6:	f7ff fe2f 	bl	8008138 <SD_PowerOff>
  }

  return Stat;
 80084da:	4b03      	ldr	r3, [pc, #12]	; (80084e8 <SD_disk_initialize+0x1c8>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	b2db      	uxtb	r3, r3
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd90      	pop	{r4, r7, pc}
 80084e8:	20000034 	.word	0x20000034
 80084ec:	2000024e 	.word	0x2000024e
 80084f0:	20019414 	.word	0x20019414

080084f4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <SD_disk_status+0x14>
    return STA_NOINIT;
 8008504:	2301      	movs	r3, #1
 8008506:	e002      	b.n	800850e <SD_disk_status+0x1a>

  return Stat;
 8008508:	4b04      	ldr	r3, [pc, #16]	; (800851c <SD_disk_status+0x28>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b2db      	uxtb	r3, r3
}
 800850e:	4618      	mov	r0, r3
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	20000034 	.word	0x20000034

08008520 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	607a      	str	r2, [r7, #4]
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d102      	bne.n	800853c <SD_disk_read+0x1c>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <SD_disk_read+0x20>
    return RES_PARERR;
 800853c:	2304      	movs	r3, #4
 800853e:	e051      	b.n	80085e4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8008540:	4b2a      	ldr	r3, [pc, #168]	; (80085ec <SD_disk_read+0xcc>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800854e:	2303      	movs	r3, #3
 8008550:	e048      	b.n	80085e4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8008552:	4b27      	ldr	r3, [pc, #156]	; (80085f0 <SD_disk_read+0xd0>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	025b      	lsls	r3, r3, #9
 8008562:	607b      	str	r3, [r7, #4]

  SELECT();
 8008564:	f7ff fd22 	bl	8007fac <SELECT>

  if (count == 1)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d111      	bne.n	8008592 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	2051      	movs	r0, #81	; 0x51
 8008572:	f7ff fe83 	bl	800827c <SD_SendCmd>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d129      	bne.n	80085d0 <SD_disk_read+0xb0>
 800857c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008580:	68b8      	ldr	r0, [r7, #8]
 8008582:	f7ff fdf1 	bl	8008168 <SD_RxDataBlock>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d021      	beq.n	80085d0 <SD_disk_read+0xb0>
      count = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	603b      	str	r3, [r7, #0]
 8008590:	e01e      	b.n	80085d0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	2052      	movs	r0, #82	; 0x52
 8008596:	f7ff fe71 	bl	800827c <SD_SendCmd>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d117      	bne.n	80085d0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80085a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085a4:	68b8      	ldr	r0, [r7, #8]
 80085a6:	f7ff fddf 	bl	8008168 <SD_RxDataBlock>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <SD_disk_read+0xa6>
          break;

        buff += 512;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80085b6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	603b      	str	r3, [r7, #0]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1ed      	bne.n	80085a0 <SD_disk_read+0x80>
 80085c4:	e000      	b.n	80085c8 <SD_disk_read+0xa8>
          break;
 80085c6:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80085c8:	2100      	movs	r1, #0
 80085ca:	204c      	movs	r0, #76	; 0x4c
 80085cc:	f7ff fe56 	bl	800827c <SD_SendCmd>
    }
  }

  DESELECT();
 80085d0:	f7ff fcf8 	bl	8007fc4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80085d4:	f7ff fd1c 	bl	8008010 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	bf14      	ite	ne
 80085de:	2301      	movne	r3, #1
 80085e0:	2300      	moveq	r3, #0
 80085e2:	b2db      	uxtb	r3, r3
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20000034 	.word	0x20000034
 80085f0:	20019414 	.word	0x20019414

080085f4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	607a      	str	r2, [r7, #4]
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	4603      	mov	r3, r0
 8008602:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d102      	bne.n	8008610 <SD_disk_write+0x1c>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <SD_disk_write+0x20>
    return RES_PARERR;
 8008610:	2304      	movs	r3, #4
 8008612:	e06b      	b.n	80086ec <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8008614:	4b37      	ldr	r3, [pc, #220]	; (80086f4 <SD_disk_write+0x100>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	b2db      	uxtb	r3, r3
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8008622:	2303      	movs	r3, #3
 8008624:	e062      	b.n	80086ec <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8008626:	4b33      	ldr	r3, [pc, #204]	; (80086f4 <SD_disk_write+0x100>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	b2db      	uxtb	r3, r3
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <SD_disk_write+0x44>
    return RES_WRPRT;
 8008634:	2302      	movs	r3, #2
 8008636:	e059      	b.n	80086ec <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8008638:	4b2f      	ldr	r3, [pc, #188]	; (80086f8 <SD_disk_write+0x104>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d102      	bne.n	800864a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	025b      	lsls	r3, r3, #9
 8008648:	607b      	str	r3, [r7, #4]

  SELECT();
 800864a:	f7ff fcaf 	bl	8007fac <SELECT>

  if (count == 1)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d110      	bne.n	8008676 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8008654:	6879      	ldr	r1, [r7, #4]
 8008656:	2058      	movs	r0, #88	; 0x58
 8008658:	f7ff fe10 	bl	800827c <SD_SendCmd>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d13a      	bne.n	80086d8 <SD_disk_write+0xe4>
 8008662:	21fe      	movs	r1, #254	; 0xfe
 8008664:	68b8      	ldr	r0, [r7, #8]
 8008666:	f7ff fdb5 	bl	80081d4 <SD_TxDataBlock>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d033      	beq.n	80086d8 <SD_disk_write+0xe4>
      count = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	603b      	str	r3, [r7, #0]
 8008674:	e030      	b.n	80086d8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8008676:	4b20      	ldr	r3, [pc, #128]	; (80086f8 <SD_disk_write+0x104>)
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	f003 0302 	and.w	r3, r3, #2
 800867e:	2b00      	cmp	r3, #0
 8008680:	d007      	beq.n	8008692 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8008682:	2100      	movs	r1, #0
 8008684:	2077      	movs	r0, #119	; 0x77
 8008686:	f7ff fdf9 	bl	800827c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	2057      	movs	r0, #87	; 0x57
 800868e:	f7ff fdf5 	bl	800827c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	2059      	movs	r0, #89	; 0x59
 8008696:	f7ff fdf1 	bl	800827c <SD_SendCmd>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d11b      	bne.n	80086d8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80086a0:	21fc      	movs	r1, #252	; 0xfc
 80086a2:	68b8      	ldr	r0, [r7, #8]
 80086a4:	f7ff fd96 	bl	80081d4 <SD_TxDataBlock>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80086b4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1ee      	bne.n	80086a0 <SD_disk_write+0xac>
 80086c2:	e000      	b.n	80086c6 <SD_disk_write+0xd2>
          break;
 80086c4:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80086c6:	21fd      	movs	r1, #253	; 0xfd
 80086c8:	2000      	movs	r0, #0
 80086ca:	f7ff fd83 	bl	80081d4 <SD_TxDataBlock>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <SD_disk_write+0xe4>
      {
        count = 1;
 80086d4:	2301      	movs	r3, #1
 80086d6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80086d8:	f7ff fc74 	bl	8007fc4 <DESELECT>
  SPI_RxByte();
 80086dc:	f7ff fc98 	bl	8008010 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bf14      	ite	ne
 80086e6:	2301      	movne	r3, #1
 80086e8:	2300      	moveq	r3, #0
 80086ea:	b2db      	uxtb	r3, r3
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000034 	.word	0x20000034
 80086f8:	20019414 	.word	0x20019414

080086fc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80086fc:	b590      	push	{r4, r7, lr}
 80086fe:	b08b      	sub	sp, #44	; 0x2c
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	603a      	str	r2, [r7, #0]
 8008706:	71fb      	strb	r3, [r7, #7]
 8008708:	460b      	mov	r3, r1
 800870a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8008716:	2304      	movs	r3, #4
 8008718:	e11b      	b.n	8008952 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8008720:	79bb      	ldrb	r3, [r7, #6]
 8008722:	2b05      	cmp	r3, #5
 8008724:	d129      	bne.n	800877a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	2b02      	cmp	r3, #2
 800872c:	d017      	beq.n	800875e <SD_disk_ioctl+0x62>
 800872e:	2b02      	cmp	r3, #2
 8008730:	dc1f      	bgt.n	8008772 <SD_disk_ioctl+0x76>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d002      	beq.n	800873c <SD_disk_ioctl+0x40>
 8008736:	2b01      	cmp	r3, #1
 8008738:	d00b      	beq.n	8008752 <SD_disk_ioctl+0x56>
 800873a:	e01a      	b.n	8008772 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800873c:	f7ff fd08 	bl	8008150 <SD_CheckPower>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8008746:	f7ff fcf7 	bl	8008138 <SD_PowerOff>
      res = RES_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008750:	e0fd      	b.n	800894e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8008752:	f7ff fca5 	bl	80080a0 <SD_PowerOn>
      res = RES_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800875c:	e0f7      	b.n	800894e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	1c5c      	adds	r4, r3, #1
 8008762:	f7ff fcf5 	bl	8008150 <SD_CheckPower>
 8008766:	4603      	mov	r3, r0
 8008768:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800876a:	2300      	movs	r3, #0
 800876c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008770:	e0ed      	b.n	800894e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8008772:	2304      	movs	r3, #4
 8008774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008778:	e0e9      	b.n	800894e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800877a:	4b78      	ldr	r3, [pc, #480]	; (800895c <SD_disk_ioctl+0x260>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	b2db      	uxtb	r3, r3
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8008788:	2303      	movs	r3, #3
 800878a:	e0e2      	b.n	8008952 <SD_disk_ioctl+0x256>

    SELECT();
 800878c:	f7ff fc0e 	bl	8007fac <SELECT>

    switch (ctrl)
 8008790:	79bb      	ldrb	r3, [r7, #6]
 8008792:	2b0d      	cmp	r3, #13
 8008794:	f200 80cc 	bhi.w	8008930 <SD_disk_ioctl+0x234>
 8008798:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <SD_disk_ioctl+0xa4>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	0800889b 	.word	0x0800889b
 80087a4:	080087d9 	.word	0x080087d9
 80087a8:	0800888b 	.word	0x0800888b
 80087ac:	08008931 	.word	0x08008931
 80087b0:	08008931 	.word	0x08008931
 80087b4:	08008931 	.word	0x08008931
 80087b8:	08008931 	.word	0x08008931
 80087bc:	08008931 	.word	0x08008931
 80087c0:	08008931 	.word	0x08008931
 80087c4:	08008931 	.word	0x08008931
 80087c8:	08008931 	.word	0x08008931
 80087cc:	080088ad 	.word	0x080088ad
 80087d0:	080088d1 	.word	0x080088d1
 80087d4:	080088f5 	.word	0x080088f5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80087d8:	2100      	movs	r1, #0
 80087da:	2049      	movs	r0, #73	; 0x49
 80087dc:	f7ff fd4e 	bl	800827c <SD_SendCmd>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f040 80a8 	bne.w	8008938 <SD_disk_ioctl+0x23c>
 80087e8:	f107 030c 	add.w	r3, r7, #12
 80087ec:	2110      	movs	r1, #16
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fcba 	bl	8008168 <SD_RxDataBlock>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 809e 	beq.w	8008938 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80087fc:	7b3b      	ldrb	r3, [r7, #12]
 80087fe:	099b      	lsrs	r3, r3, #6
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b01      	cmp	r3, #1
 8008804:	d10e      	bne.n	8008824 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8008806:	7d7b      	ldrb	r3, [r7, #21]
 8008808:	b29a      	uxth	r2, r3
 800880a:	7d3b      	ldrb	r3, [r7, #20]
 800880c:	b29b      	uxth	r3, r3
 800880e:	021b      	lsls	r3, r3, #8
 8008810:	b29b      	uxth	r3, r3
 8008812:	4413      	add	r3, r2
 8008814:	b29b      	uxth	r3, r3
 8008816:	3301      	adds	r3, #1
 8008818:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800881a:	8bfb      	ldrh	r3, [r7, #30]
 800881c:	029a      	lsls	r2, r3, #10
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	e02e      	b.n	8008882 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008824:	7c7b      	ldrb	r3, [r7, #17]
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	b2da      	uxtb	r2, r3
 800882c:	7dbb      	ldrb	r3, [r7, #22]
 800882e:	09db      	lsrs	r3, r3, #7
 8008830:	b2db      	uxtb	r3, r3
 8008832:	4413      	add	r3, r2
 8008834:	b2da      	uxtb	r2, r3
 8008836:	7d7b      	ldrb	r3, [r7, #21]
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	b2db      	uxtb	r3, r3
 800883c:	f003 0306 	and.w	r3, r3, #6
 8008840:	b2db      	uxtb	r3, r3
 8008842:	4413      	add	r3, r2
 8008844:	b2db      	uxtb	r3, r3
 8008846:	3302      	adds	r3, #2
 8008848:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800884c:	7d3b      	ldrb	r3, [r7, #20]
 800884e:	099b      	lsrs	r3, r3, #6
 8008850:	b2db      	uxtb	r3, r3
 8008852:	b29a      	uxth	r2, r3
 8008854:	7cfb      	ldrb	r3, [r7, #19]
 8008856:	b29b      	uxth	r3, r3
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	b29b      	uxth	r3, r3
 800885c:	4413      	add	r3, r2
 800885e:	b29a      	uxth	r2, r3
 8008860:	7cbb      	ldrb	r3, [r7, #18]
 8008862:	029b      	lsls	r3, r3, #10
 8008864:	b29b      	uxth	r3, r3
 8008866:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800886a:	b29b      	uxth	r3, r3
 800886c:	4413      	add	r3, r2
 800886e:	b29b      	uxth	r3, r3
 8008870:	3301      	adds	r3, #1
 8008872:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8008874:	8bfa      	ldrh	r2, [r7, #30]
 8008876:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800887a:	3b09      	subs	r3, #9
 800887c:	409a      	lsls	r2, r3
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8008888:	e056      	b.n	8008938 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008890:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008898:	e055      	b.n	8008946 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800889a:	f7ff fbe5 	bl	8008068 <SD_ReadyWait>
 800889e:	4603      	mov	r3, r0
 80088a0:	2bff      	cmp	r3, #255	; 0xff
 80088a2:	d14b      	bne.n	800893c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80088aa:	e047      	b.n	800893c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80088ac:	2100      	movs	r1, #0
 80088ae:	2049      	movs	r0, #73	; 0x49
 80088b0:	f7ff fce4 	bl	800827c <SD_SendCmd>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d142      	bne.n	8008940 <SD_disk_ioctl+0x244>
 80088ba:	2110      	movs	r1, #16
 80088bc:	6a38      	ldr	r0, [r7, #32]
 80088be:	f7ff fc53 	bl	8008168 <SD_RxDataBlock>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d03b      	beq.n	8008940 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80088ce:	e037      	b.n	8008940 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80088d0:	2100      	movs	r1, #0
 80088d2:	204a      	movs	r0, #74	; 0x4a
 80088d4:	f7ff fcd2 	bl	800827c <SD_SendCmd>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d132      	bne.n	8008944 <SD_disk_ioctl+0x248>
 80088de:	2110      	movs	r1, #16
 80088e0:	6a38      	ldr	r0, [r7, #32]
 80088e2:	f7ff fc41 	bl	8008168 <SD_RxDataBlock>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d02b      	beq.n	8008944 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80088f2:	e027      	b.n	8008944 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80088f4:	2100      	movs	r1, #0
 80088f6:	207a      	movs	r0, #122	; 0x7a
 80088f8:	f7ff fcc0 	bl	800827c <SD_SendCmd>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d116      	bne.n	8008930 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8008902:	2300      	movs	r3, #0
 8008904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008908:	e00b      	b.n	8008922 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800890a:	6a3c      	ldr	r4, [r7, #32]
 800890c:	1c63      	adds	r3, r4, #1
 800890e:	623b      	str	r3, [r7, #32]
 8008910:	f7ff fb7e 	bl	8008010 <SPI_RxByte>
 8008914:	4603      	mov	r3, r0
 8008916:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8008918:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800891c:	3301      	adds	r3, #1
 800891e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008922:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008926:	2b03      	cmp	r3, #3
 8008928:	d9ef      	bls.n	800890a <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8008930:	2304      	movs	r3, #4
 8008932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008936:	e006      	b.n	8008946 <SD_disk_ioctl+0x24a>
      break;
 8008938:	bf00      	nop
 800893a:	e004      	b.n	8008946 <SD_disk_ioctl+0x24a>
      break;
 800893c:	bf00      	nop
 800893e:	e002      	b.n	8008946 <SD_disk_ioctl+0x24a>
      break;
 8008940:	bf00      	nop
 8008942:	e000      	b.n	8008946 <SD_disk_ioctl+0x24a>
      break;
 8008944:	bf00      	nop
    }

    DESELECT();
 8008946:	f7ff fb3d 	bl	8007fc4 <DESELECT>
    SPI_RxByte();
 800894a:	f7ff fb61 	bl	8008010 <SPI_RxByte>
  }

  return res;
 800894e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008952:	4618      	mov	r0, r3
 8008954:	372c      	adds	r7, #44	; 0x2c
 8008956:	46bd      	mov	sp, r7
 8008958:	bd90      	pop	{r4, r7, pc}
 800895a:	bf00      	nop
 800895c:	20000034 	.word	0x20000034

08008960 <__libc_init_array>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	4d0d      	ldr	r5, [pc, #52]	; (8008998 <__libc_init_array+0x38>)
 8008964:	4c0d      	ldr	r4, [pc, #52]	; (800899c <__libc_init_array+0x3c>)
 8008966:	1b64      	subs	r4, r4, r5
 8008968:	10a4      	asrs	r4, r4, #2
 800896a:	2600      	movs	r6, #0
 800896c:	42a6      	cmp	r6, r4
 800896e:	d109      	bne.n	8008984 <__libc_init_array+0x24>
 8008970:	4d0b      	ldr	r5, [pc, #44]	; (80089a0 <__libc_init_array+0x40>)
 8008972:	4c0c      	ldr	r4, [pc, #48]	; (80089a4 <__libc_init_array+0x44>)
 8008974:	f000 f82e 	bl	80089d4 <_init>
 8008978:	1b64      	subs	r4, r4, r5
 800897a:	10a4      	asrs	r4, r4, #2
 800897c:	2600      	movs	r6, #0
 800897e:	42a6      	cmp	r6, r4
 8008980:	d105      	bne.n	800898e <__libc_init_array+0x2e>
 8008982:	bd70      	pop	{r4, r5, r6, pc}
 8008984:	f855 3b04 	ldr.w	r3, [r5], #4
 8008988:	4798      	blx	r3
 800898a:	3601      	adds	r6, #1
 800898c:	e7ee      	b.n	800896c <__libc_init_array+0xc>
 800898e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008992:	4798      	blx	r3
 8008994:	3601      	adds	r6, #1
 8008996:	e7f2      	b.n	800897e <__libc_init_array+0x1e>
 8008998:	08008b54 	.word	0x08008b54
 800899c:	08008b54 	.word	0x08008b54
 80089a0:	08008b54 	.word	0x08008b54
 80089a4:	08008b58 	.word	0x08008b58

080089a8 <memcpy>:
 80089a8:	440a      	add	r2, r1
 80089aa:	4291      	cmp	r1, r2
 80089ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80089b0:	d100      	bne.n	80089b4 <memcpy+0xc>
 80089b2:	4770      	bx	lr
 80089b4:	b510      	push	{r4, lr}
 80089b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089be:	4291      	cmp	r1, r2
 80089c0:	d1f9      	bne.n	80089b6 <memcpy+0xe>
 80089c2:	bd10      	pop	{r4, pc}

080089c4 <memset>:
 80089c4:	4402      	add	r2, r0
 80089c6:	4603      	mov	r3, r0
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d100      	bne.n	80089ce <memset+0xa>
 80089cc:	4770      	bx	lr
 80089ce:	f803 1b01 	strb.w	r1, [r3], #1
 80089d2:	e7f9      	b.n	80089c8 <memset+0x4>

080089d4 <_init>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	bf00      	nop
 80089d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089da:	bc08      	pop	{r3}
 80089dc:	469e      	mov	lr, r3
 80089de:	4770      	bx	lr

080089e0 <_fini>:
 80089e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e2:	bf00      	nop
 80089e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e6:	bc08      	pop	{r3}
 80089e8:	469e      	mov	lr, r3
 80089ea:	4770      	bx	lr
