
DATN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acf8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800aef8  0800aef8  0001aef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2ec  0800b2ec  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2ec  0800b2ec  0001b2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2f4  0800b2f4  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2f4  0800b2f4  0001b2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2f8  0800b2f8  0001b2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800b2fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019438  200000ac  0800b3a8  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200194e4  0800b3a8  000294e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ebca  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000428e  00000000  00000000  0003eca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b8  00000000  00000000  00042f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  000448f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d8b5  00000000  00000000  000460e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023351  00000000  00000000  00073995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109508  00000000  00000000  00096ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a01ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee8  00000000  00000000  001a0240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000ac 	.word	0x200000ac
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aee0 	.word	0x0800aee0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b0 	.word	0x200000b0
 800023c:	0800aee0 	.word	0x0800aee0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <get_number>:

int extract_command ( command_t *cmd ) ;
void process_command ( command_t *cmd) ;
void checkState( command_t *cmd );
uint8_t get_number(uint8_t *p , int len )
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	int value ;
	if (len>1)
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	dd0f      	ble.n	8000624 <get_number+0x30>
	{
		value = (((p[0]-48)*10) +(p[1]-48)) ;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800060c:	4613      	mov	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4413      	add	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	461a      	mov	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3301      	adds	r3, #1
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	3b30      	subs	r3, #48	; 0x30
 800061e:	4413      	add	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	e003      	b.n	800062c <get_number+0x38>
	}
	else
	value = p[0]-48 ;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	3b30      	subs	r3, #48	; 0x30
 800062a:	60fb      	str	r3, [r7, #12]
	return value ;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	b2db      	uxtb	r3, r3
}
 8000630:	4618      	mov	r0, r3
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <read_Pin_Input>:
}



void read_Pin_Input()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	I0_0 = HAL_GPIO_ReadPin(I0_0_PORT, I0_0_PIN);
 8000640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <read_Pin_Input+0x1c>)
 8000646:	f001 ff5f 	bl	8002508 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4b03      	ldr	r3, [pc, #12]	; (800065c <read_Pin_Input+0x20>)
 8000650:	701a      	strb	r2, [r3, #0]
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40020800 	.word	0x40020800
 800065c:	200000c8 	.word	0x200000c8

08000660 <write_Pin_Output>:
void write_Pin_Output()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	if (Q0_0 >= 1)
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <write_Pin_Output+0x74>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <write_Pin_Output+0x1c>
	{
		HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, ENABLE);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000674:	4818      	ldr	r0, [pc, #96]	; (80006d8 <write_Pin_Output+0x78>)
 8000676:	f001 ff5f 	bl	8002538 <HAL_GPIO_WritePin>
 800067a:	e005      	b.n	8000688 <write_Pin_Output+0x28>
	}
	else
	{
		HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, DISABLE);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	4815      	ldr	r0, [pc, #84]	; (80006d8 <write_Pin_Output+0x78>)
 8000684:	f001 ff58 	bl	8002538 <HAL_GPIO_WritePin>
	}
	if (Q0_1 >= 1)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <write_Pin_Output+0x74>)
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <write_Pin_Output+0x40>
	{
		HAL_GPIO_WritePin(Q0_1_PORT, Q0_1_PIN, ENABLE);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <write_Pin_Output+0x78>)
 800069a:	f001 ff4d 	bl	8002538 <HAL_GPIO_WritePin>
 800069e:	e005      	b.n	80006ac <write_Pin_Output+0x4c>
	}
	else
	{
		HAL_GPIO_WritePin(Q0_1_PORT, Q0_1_PIN, DISABLE);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <write_Pin_Output+0x78>)
 80006a8:	f001 ff46 	bl	8002538 <HAL_GPIO_WritePin>
	}
	if (Q0_2 >= 1)
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <write_Pin_Output+0x74>)
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d006      	beq.n	80006c4 <write_Pin_Output+0x64>
	{
		HAL_GPIO_WritePin(Q0_2_PORT, Q0_2_PIN, ENABLE);
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <write_Pin_Output+0x78>)
 80006be:	f001 ff3b 	bl	8002538 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(Q0_2_PORT, Q0_2_PIN, DISABLE);
	}
}
 80006c2:	e005      	b.n	80006d0 <write_Pin_Output+0x70>
		HAL_GPIO_WritePin(Q0_2_PORT, Q0_2_PIN, DISABLE);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	4803      	ldr	r0, [pc, #12]	; (80006d8 <write_Pin_Output+0x78>)
 80006cc:	f001 ff34 	bl	8002538 <HAL_GPIO_WritePin>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000d8 	.word	0x200000d8
 80006d8:	40020800 	.word	0x40020800

080006dc <Main_task>:
void Main_task(void *param)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b087      	sub	sp, #28
 80006e0:	af02      	add	r7, sp, #8
 80006e2:	6078      	str	r0, [r7, #4]
	volatile static const uint32_t datC2 = 2;
	volatile static uint8_t startC2 = 0;
	volatile static uint8_t checkC2 = 0;
	while (1)
	{
		read_Pin_Input();
 80006e4:	f7ff ffaa 	bl	800063c <read_Pin_Input>
		/*--------------NetWork 1 -----------*/

		volatile uint8_t tempC2_0 = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
		if (countC2 < 2)
 80006ec:	4b98      	ldr	r3, [pc, #608]	; (8000950 <Main_task+0x274>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d801      	bhi.n	80006f8 <Main_task+0x1c>
		{
			tempC2_0 = 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	73fb      	strb	r3, [r7, #15]
		}
		M0_0 = ((I0_0 + M0_0) * tempC2_0);
 80006f8:	4b96      	ldr	r3, [pc, #600]	; (8000954 <Main_task+0x278>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b96      	ldr	r3, [pc, #600]	; (8000958 <Main_task+0x27c>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4413      	add	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	fb12 f303 	smulbb	r3, r2, r3
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b91      	ldr	r3, [pc, #580]	; (8000958 <Main_task+0x27c>)
 8000714:	701a      	strb	r2, [r3, #0]
		if (M0_0 > 0)
 8000716:	4b90      	ldr	r3, [pc, #576]	; (8000958 <Main_task+0x27c>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d003      	beq.n	8000728 <Main_task+0x4c>
		{
			M0_0 = 1;
 8000720:	4b8d      	ldr	r3, [pc, #564]	; (8000958 <Main_task+0x27c>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	e002      	b.n	800072e <Main_task+0x52>
		}
		else
		{
			M0_0 = 0;
 8000728:	4b8b      	ldr	r3, [pc, #556]	; (8000958 <Main_task+0x27c>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
		}
		/*--------------NetWork 2 -----------*/

		if (!T37reset)
 800072e:	4b8b      	ldr	r3, [pc, #556]	; (800095c <Main_task+0x280>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d148      	bne.n	80007c8 <Main_task+0xec>
		{
			vaoT37 = (M0_0);
 8000736:	4b88      	ldr	r3, [pc, #544]	; (8000958 <Main_task+0x27c>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b88      	ldr	r3, [pc, #544]	; (8000960 <Main_task+0x284>)
 800073e:	701a      	strb	r2, [r3, #0]
			T37;
 8000740:	4b88      	ldr	r3, [pc, #544]	; (8000964 <Main_task+0x288>)
 8000742:	781b      	ldrb	r3, [r3, #0]
			if (vaoT37)
 8000744:	4b86      	ldr	r3, [pc, #536]	; (8000960 <Main_task+0x284>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d023      	beq.n	8000796 <Main_task+0xba>
			{
				if (countT37 >= datT37)
 800074e:	4b86      	ldr	r3, [pc, #536]	; (8000968 <Main_task+0x28c>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b86      	ldr	r3, [pc, #536]	; (800096c <Main_task+0x290>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	d302      	bcc.n	8000760 <Main_task+0x84>
					T37 = 1;
 800075a:	4b82      	ldr	r3, [pc, #520]	; (8000964 <Main_task+0x288>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]

				if ((T37 == 0) && (checkT37 == 0))
 8000760:	4b80      	ldr	r3, [pc, #512]	; (8000964 <Main_task+0x288>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d141      	bne.n	80007ee <Main_task+0x112>
 800076a:	4b81      	ldr	r3, [pc, #516]	; (8000970 <Main_task+0x294>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d13c      	bne.n	80007ee <Main_task+0x112>
				{
					xTimerStart(handle_timerPLC[0], portMAX_DELAY);
 8000774:	4b7f      	ldr	r3, [pc, #508]	; (8000974 <Main_task+0x298>)
 8000776:	681c      	ldr	r4, [r3, #0]
 8000778:	f007 fb58 	bl	8007e2c <xTaskGetTickCount>
 800077c:	4602      	mov	r2, r0
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2300      	movs	r3, #0
 8000786:	2101      	movs	r1, #1
 8000788:	4620      	mov	r0, r4
 800078a:	f008 f9f1 	bl	8008b70 <xTimerGenericCommand>
					checkT37 = 1;
 800078e:	4b78      	ldr	r3, [pc, #480]	; (8000970 <Main_task+0x294>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	e02b      	b.n	80007ee <Main_task+0x112>
				}
			}
			else
			{
				if (checkT37 == 1)
 8000796:	4b76      	ldr	r3, [pc, #472]	; (8000970 <Main_task+0x294>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b01      	cmp	r3, #1
 800079e:	d10c      	bne.n	80007ba <Main_task+0xde>
				{
					xTimerStop(handle_timerPLC[0], portMAX_DELAY);
 80007a0:	4b74      	ldr	r3, [pc, #464]	; (8000974 <Main_task+0x298>)
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2200      	movs	r2, #0
 80007ae:	2103      	movs	r1, #3
 80007b0:	f008 f9de 	bl	8008b70 <xTimerGenericCommand>
					checkT37 = 0;
 80007b4:	4b6e      	ldr	r3, [pc, #440]	; (8000970 <Main_task+0x294>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
				}
				T37 = 0;
 80007ba:	4b6a      	ldr	r3, [pc, #424]	; (8000964 <Main_task+0x288>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
				countT37 = 0;
 80007c0:	4b69      	ldr	r3, [pc, #420]	; (8000968 <Main_task+0x28c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	e012      	b.n	80007ee <Main_task+0x112>
			}
		}
		else
		{
			xTimerStop(handle_timerPLC[0], portMAX_DELAY);
 80007c8:	4b6a      	ldr	r3, [pc, #424]	; (8000974 <Main_task+0x298>)
 80007ca:	6818      	ldr	r0, [r3, #0]
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2300      	movs	r3, #0
 80007d4:	2200      	movs	r2, #0
 80007d6:	2103      	movs	r1, #3
 80007d8:	f008 f9ca 	bl	8008b70 <xTimerGenericCommand>
			countT37 = 0;
 80007dc:	4b62      	ldr	r3, [pc, #392]	; (8000968 <Main_task+0x28c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
			T37 = 0;
 80007e2:	4b60      	ldr	r3, [pc, #384]	; (8000964 <Main_task+0x288>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
			checkT37 = 0;
 80007e8:	4b61      	ldr	r3, [pc, #388]	; (8000970 <Main_task+0x294>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
		}
		/*--------------NetWork 3 -----------*/

		volatile uint8_t T37sl0 = T37;
 80007ee:	4b5d      	ldr	r3, [pc, #372]	; (8000964 <Main_task+0x288>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	73bb      	strb	r3, [r7, #14]
		volatile static uint8_t checkEU0 = 0;
		if (!(T37))
 80007f6:	4b5b      	ldr	r3, [pc, #364]	; (8000964 <Main_task+0x288>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <Main_task+0x12a>
		{
			checkEU0 = 0;
 8000800:	4b5d      	ldr	r3, [pc, #372]	; (8000978 <Main_task+0x29c>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
		}
		if ((!checkEU0) && (T37))
 8000806:	4b5c      	ldr	r3, [pc, #368]	; (8000978 <Main_task+0x29c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d109      	bne.n	8000824 <Main_task+0x148>
 8000810:	4b54      	ldr	r3, [pc, #336]	; (8000964 <Main_task+0x288>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <Main_task+0x148>
		{
			checkEU0 = 0;
 800081a:	4b57      	ldr	r3, [pc, #348]	; (8000978 <Main_task+0x29c>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
			T37sl0 = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	73bb      	strb	r3, [r7, #14]
		}
		volatile uint8_t tempC1_1 = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	737b      	strb	r3, [r7, #13]
		if (countC1 >= 50)
 8000828:	4b54      	ldr	r3, [pc, #336]	; (800097c <Main_task+0x2a0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b31      	cmp	r3, #49	; 0x31
 800082e:	d901      	bls.n	8000834 <Main_task+0x158>
		{
			tempC1_1 = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	737b      	strb	r3, [r7, #13]
		}
		vaoC1 = (T37sl0);
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b51      	ldr	r3, [pc, #324]	; (8000980 <Main_task+0x2a4>)
 800083a:	701a      	strb	r2, [r3, #0]
		resetC1 = (tempC1_1 + (!M0_0));
 800083c:	4b46      	ldr	r3, [pc, #280]	; (8000958 <Main_task+0x27c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf0c      	ite	eq
 8000846:	2301      	moveq	r3, #1
 8000848:	2300      	movne	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	461a      	mov	r2, r3
 800084e:	7b7b      	ldrb	r3, [r7, #13]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4413      	add	r3, r2
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b4b      	ldr	r3, [pc, #300]	; (8000984 <Main_task+0x2a8>)
 8000858:	701a      	strb	r2, [r3, #0]
		if (resetC1)
 800085a:	4b4a      	ldr	r3, [pc, #296]	; (8000984 <Main_task+0x2a8>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d009      	beq.n	8000878 <Main_task+0x19c>
		{
			countC1 = 0;
 8000864:	4b45      	ldr	r3, [pc, #276]	; (800097c <Main_task+0x2a0>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
			C1 = 0;
 800086a:	4b47      	ldr	r3, [pc, #284]	; (8000988 <Main_task+0x2ac>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
			startC1 = 1;
 8000870:	4b46      	ldr	r3, [pc, #280]	; (800098c <Main_task+0x2b0>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	e025      	b.n	80008c4 <Main_task+0x1e8>
		}
		else
		{
			if (vaoC1)
 8000878:	4b41      	ldr	r3, [pc, #260]	; (8000980 <Main_task+0x2a4>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d01d      	beq.n	80008be <Main_task+0x1e2>
			{
				if (((checkC1 == 1) || (startC1 == 1)) && (countC1 <= 4294967295))
 8000882:	4b43      	ldr	r3, [pc, #268]	; (8000990 <Main_task+0x2b4>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b01      	cmp	r3, #1
 800088a:	d004      	beq.n	8000896 <Main_task+0x1ba>
 800088c:	4b3f      	ldr	r3, [pc, #252]	; (800098c <Main_task+0x2b0>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b01      	cmp	r3, #1
 8000894:	d109      	bne.n	80008aa <Main_task+0x1ce>
 8000896:	4b39      	ldr	r3, [pc, #228]	; (800097c <Main_task+0x2a0>)
 8000898:	681b      	ldr	r3, [r3, #0]
				{
					countC1++;
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <Main_task+0x2a0>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	4a36      	ldr	r2, [pc, #216]	; (800097c <Main_task+0x2a0>)
 80008a2:	6013      	str	r3, [r2, #0]
					startC1 = 0;
 80008a4:	4b39      	ldr	r3, [pc, #228]	; (800098c <Main_task+0x2b0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
				}
				if (countC1 >= datC1)
 80008aa:	4b34      	ldr	r3, [pc, #208]	; (800097c <Main_task+0x2a0>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b39      	ldr	r3, [pc, #228]	; (8000994 <Main_task+0x2b8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d306      	bcc.n	80008c4 <Main_task+0x1e8>
				{
					C1 = 1;
 80008b6:	4b34      	ldr	r3, [pc, #208]	; (8000988 <Main_task+0x2ac>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	e002      	b.n	80008c4 <Main_task+0x1e8>
				}
			}
			else
			{
				checkC1 = 1;
 80008be:	4b34      	ldr	r3, [pc, #208]	; (8000990 <Main_task+0x2b4>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
			}
		}
		/*--------------NetWork 4 -----------*/

		volatile uint8_t tempC1_2 = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	733b      	strb	r3, [r7, #12]
		if (countC1 <= 20)
 80008c8:	4b2c      	ldr	r3, [pc, #176]	; (800097c <Main_task+0x2a0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b14      	cmp	r3, #20
 80008ce:	d801      	bhi.n	80008d4 <Main_task+0x1f8>
		{
			tempC1_2 = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	733b      	strb	r3, [r7, #12]
		}
		Q0_0 = (tempC1_2 * M0_0);
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <Main_task+0x27c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	7b3b      	ldrb	r3, [r7, #12]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	fb12 f303 	smulbb	r3, r2, r3
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <Main_task+0x2bc>)
 80008e6:	701a      	strb	r2, [r3, #0]
		if (Q0_0 > 0)
 80008e8:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <Main_task+0x2bc>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d003      	beq.n	80008fa <Main_task+0x21e>
		{
			Q0_0 = 1;
 80008f2:	4b29      	ldr	r3, [pc, #164]	; (8000998 <Main_task+0x2bc>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	e002      	b.n	8000900 <Main_task+0x224>
		}
		else
		{
			Q0_0 = 0;
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <Main_task+0x2bc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
		}
		/*--------------NetWork 5 -----------*/

		volatile uint8_t tempC1_3 = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	72fb      	strb	r3, [r7, #11]
		if (countC1 > 20)
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <Main_task+0x2a0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b14      	cmp	r3, #20
 800090a:	d901      	bls.n	8000910 <Main_task+0x234>
		{
			tempC1_3 = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	72fb      	strb	r3, [r7, #11]
		}
		volatile uint8_t tempC1_4 = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	72bb      	strb	r3, [r7, #10]
		if (countC1 <= 25)
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <Main_task+0x2a0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b19      	cmp	r3, #25
 800091a:	d801      	bhi.n	8000920 <Main_task+0x244>
		{
			tempC1_4 = 1;
 800091c:	2301      	movs	r3, #1
 800091e:	72bb      	strb	r3, [r7, #10]
		}
		Q0_2 = (tempC1_3 * tempC1_4 * M0_0);
 8000920:	7afb      	ldrb	r3, [r7, #11]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	7abb      	ldrb	r3, [r7, #10]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	fb12 f303 	smulbb	r3, r2, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <Main_task+0x27c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	fb12 f303 	smulbb	r3, r2, r3
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <Main_task+0x2bc>)
 800093c:	709a      	strb	r2, [r3, #2]
		if (Q0_2 > 0)
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <Main_task+0x2bc>)
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d029      	beq.n	800099c <Main_task+0x2c0>
		{
			Q0_2 = 1;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <Main_task+0x2bc>)
 800094a:	2201      	movs	r2, #1
 800094c:	709a      	strb	r2, [r3, #2]
 800094e:	e028      	b.n	80009a2 <Main_task+0x2c6>
 8000950:	20000114 	.word	0x20000114
 8000954:	200000c8 	.word	0x200000c8
 8000958:	200000e8 	.word	0x200000e8
 800095c:	20000104 	.word	0x20000104
 8000960:	20000118 	.word	0x20000118
 8000964:	200000fc 	.word	0x200000fc
 8000968:	20000100 	.word	0x20000100
 800096c:	20000008 	.word	0x20000008
 8000970:	20000119 	.word	0x20000119
 8000974:	2000025c 	.word	0x2000025c
 8000978:	2000011a 	.word	0x2000011a
 800097c:	2000010c 	.word	0x2000010c
 8000980:	2000011b 	.word	0x2000011b
 8000984:	2000011c 	.word	0x2000011c
 8000988:	20000108 	.word	0x20000108
 800098c:	2000011d 	.word	0x2000011d
 8000990:	2000011e 	.word	0x2000011e
 8000994:	2000000c 	.word	0x2000000c
 8000998:	200000d8 	.word	0x200000d8
		}
		else
		{
			Q0_2 = 0;
 800099c:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <Main_task+0x3e4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	709a      	strb	r2, [r3, #2]
		}
		/*--------------NetWork 6 -----------*/

		volatile uint8_t tempC1_5 = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	727b      	strb	r3, [r7, #9]
		if (countC1 > 25)
 80009a6:	4b47      	ldr	r3, [pc, #284]	; (8000ac4 <Main_task+0x3e8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b19      	cmp	r3, #25
 80009ac:	d901      	bls.n	80009b2 <Main_task+0x2d6>
		{
			tempC1_5 = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	727b      	strb	r3, [r7, #9]
		}
		Q0_1 = (tempC1_5 * M0_0);
 80009b2:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <Main_task+0x3ec>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	7a7b      	ldrb	r3, [r7, #9]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	fb12 f303 	smulbb	r3, r2, r3
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b3f      	ldr	r3, [pc, #252]	; (8000ac0 <Main_task+0x3e4>)
 80009c4:	705a      	strb	r2, [r3, #1]
		if (Q0_1 > 0)
 80009c6:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <Main_task+0x3e4>)
 80009c8:	785b      	ldrb	r3, [r3, #1]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <Main_task+0x2fc>
		{
			Q0_1 = 1;
 80009d0:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <Main_task+0x3e4>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	705a      	strb	r2, [r3, #1]
 80009d6:	e002      	b.n	80009de <Main_task+0x302>
		}
		else
		{
			Q0_1 = 0;
 80009d8:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <Main_task+0x3e4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	705a      	strb	r2, [r3, #1]
		}
		/*--------------NetWork 7 -----------*/

		volatile uint8_t T37sl1 = T37;
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <Main_task+0x3f0>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	723b      	strb	r3, [r7, #8]
		volatile static uint8_t checkEU1 = 0;
		if (!(T37))
 80009e6:	4b39      	ldr	r3, [pc, #228]	; (8000acc <Main_task+0x3f0>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <Main_task+0x31a>
		{
			checkEU1 = 0;
 80009f0:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <Main_task+0x3f4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
		}
		if ((!checkEU1) && (T37))
 80009f6:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <Main_task+0x3f4>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d109      	bne.n	8000a14 <Main_task+0x338>
 8000a00:	4b32      	ldr	r3, [pc, #200]	; (8000acc <Main_task+0x3f0>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d004      	beq.n	8000a14 <Main_task+0x338>
		{
			checkEU1 = 0;
 8000a0a:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <Main_task+0x3f4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
			T37sl1 = 1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	723b      	strb	r3, [r7, #8]
		}
		T37reset = (T37sl1);
 8000a14:	7a3b      	ldrb	r3, [r7, #8]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <Main_task+0x3f8>)
 8000a1c:	601a      	str	r2, [r3, #0]
		if (T37reset > 0)
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <Main_task+0x3f8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d003      	beq.n	8000a2e <Main_task+0x352>
		{
			T37reset = 1;
 8000a26:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <Main_task+0x3f8>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	e002      	b.n	8000a34 <Main_task+0x358>
		}
		else
		{
			T37reset = 0;
 8000a2e:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <Main_task+0x3f8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
		}
		/*--------------NetWork 8 -----------*/

		vaoC2 = (I0_0);
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <Main_task+0x3fc>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <Main_task+0x400>)
 8000a3c:	701a      	strb	r2, [r3, #0]
		resetC2 = (C2);
 8000a3e:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <Main_task+0x404>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <Main_task+0x408>)
 8000a46:	701a      	strb	r2, [r3, #0]
		if (resetC2)
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <Main_task+0x408>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d009      	beq.n	8000a66 <Main_task+0x38a>
		{
			countC2 = 0;
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <Main_task+0x40c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
			C2 = 0;
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <Main_task+0x404>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
			startC2 = 1;
 8000a5e:	4b23      	ldr	r3, [pc, #140]	; (8000aec <Main_task+0x410>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	e025      	b.n	8000ab2 <Main_task+0x3d6>
		}
		else
		{
			if (vaoC2)
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <Main_task+0x400>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d01d      	beq.n	8000aac <Main_task+0x3d0>
			{
				if (((checkC2 == 1) || (startC2 == 1)) && (countC2 <= 4294967295))
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <Main_task+0x414>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d004      	beq.n	8000a84 <Main_task+0x3a8>
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <Main_task+0x410>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d109      	bne.n	8000a98 <Main_task+0x3bc>
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <Main_task+0x40c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
				{
					countC2++;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <Main_task+0x40c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <Main_task+0x40c>)
 8000a90:	6013      	str	r3, [r2, #0]
					startC2 = 0;
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <Main_task+0x410>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
				}
				if (countC2 >= datC2)
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <Main_task+0x40c>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <Main_task+0x418>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d306      	bcc.n	8000ab2 <Main_task+0x3d6>
				{
					C2 = 1;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <Main_task+0x404>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e002      	b.n	8000ab2 <Main_task+0x3d6>
				}
			}
			else
			{
				checkC2 = 1;
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <Main_task+0x414>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
			}
		}
		write_Pin_Output();
 8000ab2:	f7ff fdd5 	bl	8000660 <write_Pin_Output>
		vTaskDelay(2);
 8000ab6:	2002      	movs	r0, #2
 8000ab8:	f007 f892 	bl	8007be0 <vTaskDelay>
	{
 8000abc:	e612      	b.n	80006e4 <Main_task+0x8>
 8000abe:	bf00      	nop
 8000ac0:	200000d8 	.word	0x200000d8
 8000ac4:	2000010c 	.word	0x2000010c
 8000ac8:	200000e8 	.word	0x200000e8
 8000acc:	200000fc 	.word	0x200000fc
 8000ad0:	2000011f 	.word	0x2000011f
 8000ad4:	20000104 	.word	0x20000104
 8000ad8:	200000c8 	.word	0x200000c8
 8000adc:	20000120 	.word	0x20000120
 8000ae0:	20000110 	.word	0x20000110
 8000ae4:	20000121 	.word	0x20000121
 8000ae8:	20000114 	.word	0x20000114
 8000aec:	20000122 	.word	0x20000122
 8000af0:	20000123 	.word	0x20000123
 8000af4:	20000010 	.word	0x20000010

08000af8 <TimerCallBack>:
	}
}
void TimerCallBack(TimerHandle_t xTimer)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f008 fb19 	bl	8009138 <pvTimerGetTimerID>
 8000b06:	4603      	mov	r3, r0
 8000b08:	60fb      	str	r3, [r7, #12]
	switch (id)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d105      	bne.n	8000b1c <TimerCallBack+0x24>
	{
	case 1:
		countT37++;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <TimerCallBack+0x2c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <TimerCallBack+0x2c>)
 8000b18:	6013      	str	r3, [r2, #0]
		break;
 8000b1a:	bf00      	nop
	}
}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000100 	.word	0x20000100

08000b28 <initTimer>:
void initTimer(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af02      	add	r7, sp, #8
	handle_timerPLC[0] = xTimerCreate("timerTONT37", pdMS_TO_TICKS(100), pdTRUE, (void *)(0 + 1), TimerCallBack);
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <initTimer+0x24>)
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2301      	movs	r3, #1
 8000b34:	2201      	movs	r2, #1
 8000b36:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <initTimer+0x28>)
 8000b3c:	f007 ffbe 	bl	8008abc <xTimerCreate>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <initTimer+0x2c>)
 8000b44:	6013      	str	r3, [r2, #0]
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	08000af9 	.word	0x08000af9
 8000b50:	0800aef8 	.word	0x0800aef8
 8000b54:	2000025c 	.word	0x2000025c

08000b58 <Start_task>:
#define MENU_MESS HAL_UART_Transmit(&huart3,(uint8_t*)msg_menu, strlen(msg_menu), HAL_MAX_DELAY)
#define INVALID_MESS HAL_UART_Transmit(&huart3,(uint8_t*)msg_inv, strlen(msg_inv), HAL_MAX_DELAY)


void Start_task ( void *param)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	6078      	str	r0, [r7, #4]
	BaseType_t status ;
	while(1)
	{
		status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2300      	movs	r3, #0
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f007 fcdb 	bl	8008528 <xTaskGenericNotifyWait>
 8000b72:	60f8      	str	r0, [r7, #12]
		if (status != pdTRUE) continue ;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d103      	bne.n	8000b82 <Start_task+0x2a>
		curr_state = sNone ;
 8000b7a:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <Start_task+0x30>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	e7ee      	b.n	8000b60 <Start_task+0x8>
		if (status != pdTRUE) continue ;
 8000b82:	bf00      	nop
		status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000b84:	e7ec      	b.n	8000b60 <Start_task+0x8>
 8000b86:	bf00      	nop
 8000b88:	20000014 	.word	0x20000014

08000b8c <Send_task>:

	}
}
void Send_task ( void *param)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if (curr_state != sNone)
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <Send_task+0x28>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b07      	cmp	r3, #7
 8000b9a:	d0fb      	beq.n	8000b94 <Send_task+0x8>
		{
			 xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f007 fcbd 	bl	8008528 <xTaskGenericNotifyWait>
			continue ;
 8000bae:	bf00      	nop
		if (curr_state != sNone)
 8000bb0:	e7f0      	b.n	8000b94 <Send_task+0x8>
 8000bb2:	bf00      	nop
 8000bb4:	20000014 	.word	0x20000014

08000bb8 <Setting_task>:
		}
	}
}
void Setting_task( void *param)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b097      	sub	sp, #92	; 0x5c
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8000bc0:	4ba6      	ldr	r3, [pc, #664]	; (8000e5c <Setting_task+0x2a4>)
 8000bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         Setting     |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8000bc4:	4ba6      	ldr	r3, [pc, #664]	; (8000e60 <Setting_task+0x2a8>)
 8000bc6:	64bb      	str	r3, [r7, #72]	; 0x48
							"Configure Date            ----> 1\n"
							"Exit                      ----> 2\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-24):";
 8000bc8:	4ba6      	ldr	r3, [pc, #664]	; (8000e64 <Setting_task+0x2ac>)
 8000bca:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8000bcc:	4ba6      	ldr	r3, [pc, #664]	; (8000e68 <Setting_task+0x2b0>)
 8000bce:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8000bd0:	4ba6      	ldr	r3, [pc, #664]	; (8000e6c <Setting_task+0x2b4>)
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8000bd4:	4ba6      	ldr	r3, [pc, #664]	; (8000e70 <Setting_task+0x2b8>)
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8000bd8:	4ba6      	ldr	r3, [pc, #664]	; (8000e74 <Setting_task+0x2bc>)
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8000bdc:	4ba6      	ldr	r3, [pc, #664]	; (8000e78 <Setting_task+0x2c0>)
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8000be0:	4ba6      	ldr	r3, [pc, #664]	; (8000e7c <Setting_task+0x2c4>)
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 8000be4:	4ba6      	ldr	r3, [pc, #664]	; (8000e80 <Setting_task+0x2c8>)
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
#define DAY_CONFIG		2
#define YEAR_CONFIG		3
BaseType_t status ;
	while(1)
	{
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f007 fc97 	bl	8008528 <xTaskGenericNotifyWait>
 8000bfa:	6278      	str	r0, [r7, #36]	; 0x24
			if (status != pdTRUE) continue ;
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	f040 822d 	bne.w	800105e <Setting_task+0x4a6>
			HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc1, strlen(msg_rtc1), HAL_MAX_DELAY);
 8000c04:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000c06:	f7ff fb1b 	bl	8000240 <strlen>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c14:	489b      	ldr	r0, [pc, #620]	; (8000e84 <Setting_task+0x2cc>)
 8000c16:	f004 fd11 	bl	800563c <HAL_UART_Transmit>
			show_time_date(&time);
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f008 ff7c 	bl	8009b1c <show_time_date>
			HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc2, strlen(msg_rtc2), HAL_MAX_DELAY);
 8000c24:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c26:	f7ff fb0b 	bl	8000240 <strlen>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000c34:	4893      	ldr	r0, [pc, #588]	; (8000e84 <Setting_task+0x2cc>)
 8000c36:	f004 fd01 	bl	800563c <HAL_UART_Transmit>

		while(curr_state != sMenu )
 8000c3a:	e20a      	b.n	8001052 <Setting_task+0x49a>
		{

			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	9200      	str	r2, [sp, #0]
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f007 fc6c 	bl	8008528 <xTaskGenericNotifyWait>
			cmd = (command_t *)cmd_addr ;
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	623b      	str	r3, [r7, #32]
			switch(curr_state)
 8000c54:	4b8c      	ldr	r3, [pc, #560]	; (8000e88 <Setting_task+0x2d0>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	f000 813f 	beq.w	8000edc <Setting_task+0x324>
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	f300 81f7 	bgt.w	8001052 <Setting_task+0x49a>
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <Setting_task+0xb6>
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d07c      	beq.n	8000d66 <Setting_task+0x1ae>
 8000c6c:	e1f1      	b.n	8001052 <Setting_task+0x49a>
			{
				case sSetting:
					{
						/*process RTC menu commands */
						if (cmd->len == 1)
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d15c      	bne.n	8000d30 <Setting_task+0x178>
						{
							menu_code = cmd->payload[0]-48 ;
 8000c76:	6a3b      	ldr	r3, [r7, #32]
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	3b30      	subs	r3, #48	; 0x30
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d027      	beq.n	8000cd4 <Setting_task+0x11c>
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	dc37      	bgt.n	8000cfa <Setting_task+0x142>
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <Setting_task+0xe0>
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d00f      	beq.n	8000cb6 <Setting_task+0xfe>
 8000c96:	e030      	b.n	8000cfa <Setting_task+0x142>
							switch(menu_code)
							{
							case 0:
								curr_state = sRtcTimeConfig ;
 8000c98:	4b7b      	ldr	r3, [pc, #492]	; (8000e88 <Setting_task+0x2d0>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	701a      	strb	r2, [r3, #0]
								//xQueueSend(q_printf,&msg_rtc_hh,portMAX_DELAY) ;
								HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_hh, strlen(msg_rtc_hh), HAL_MAX_DELAY);
 8000c9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000ca0:	f7ff face 	bl	8000240 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000cae:	4875      	ldr	r0, [pc, #468]	; (8000e84 <Setting_task+0x2cc>)
 8000cb0:	f004 fcc4 	bl	800563c <HAL_UART_Transmit>
								break ;
 8000cb4:	e056      	b.n	8000d64 <Setting_task+0x1ac>
							case 1:
								curr_state = sRtcDateConfig ;
 8000cb6:	4b74      	ldr	r3, [pc, #464]	; (8000e88 <Setting_task+0x2d0>)
 8000cb8:	2203      	movs	r2, #3
 8000cba:	701a      	strb	r2, [r3, #0]
								HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_dd, strlen(msg_rtc_dd), HAL_MAX_DELAY);
 8000cbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000cbe:	f7ff fabf 	bl	8000240 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000ccc:	486d      	ldr	r0, [pc, #436]	; (8000e84 <Setting_task+0x2cc>)
 8000cce:	f004 fcb5 	bl	800563c <HAL_UART_Transmit>
								break ;
 8000cd2:	e047      	b.n	8000d64 <Setting_task+0x1ac>
							case 2:
								curr_state = sMenu;
 8000cd4:	4b6c      	ldr	r3, [pc, #432]	; (8000e88 <Setting_task+0x2d0>)
 8000cd6:	2206      	movs	r2, #6
 8000cd8:	701a      	strb	r2, [r3, #0]
								MENU_MESS ;
 8000cda:	4b6c      	ldr	r3, [pc, #432]	; (8000e8c <Setting_task+0x2d4>)
 8000cdc:	681c      	ldr	r4, [r3, #0]
 8000cde:	4b6b      	ldr	r3, [pc, #428]	; (8000e8c <Setting_task+0x2d4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff faac 	bl	8000240 <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	4621      	mov	r1, r4
 8000cf2:	4864      	ldr	r0, [pc, #400]	; (8000e84 <Setting_task+0x2cc>)
 8000cf4:	f004 fca2 	bl	800563c <HAL_UART_Transmit>
								break ;
 8000cf8:	e034      	b.n	8000d64 <Setting_task+0x1ac>
							default:
								INVALID_MESS ;
 8000cfa:	4b65      	ldr	r3, [pc, #404]	; (8000e90 <Setting_task+0x2d8>)
 8000cfc:	681c      	ldr	r4, [r3, #0]
 8000cfe:	4b64      	ldr	r3, [pc, #400]	; (8000e90 <Setting_task+0x2d8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fa9c 	bl	8000240 <strlen>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d10:	4621      	mov	r1, r4
 8000d12:	485c      	ldr	r0, [pc, #368]	; (8000e84 <Setting_task+0x2cc>)
 8000d14:	f004 fc92 	bl	800563c <HAL_UART_Transmit>
								HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc2, strlen(msg_rtc2), HAL_MAX_DELAY);
 8000d18:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d1a:	f7ff fa91 	bl	8000240 <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000d28:	4856      	ldr	r0, [pc, #344]	; (8000e84 <Setting_task+0x2cc>)
 8000d2a:	f004 fc87 	bl	800563c <HAL_UART_Transmit>
 8000d2e:	e190      	b.n	8001052 <Setting_task+0x49a>
							}
						}
						else
						{
							INVALID_MESS ;
 8000d30:	4b57      	ldr	r3, [pc, #348]	; (8000e90 <Setting_task+0x2d8>)
 8000d32:	681c      	ldr	r4, [r3, #0]
 8000d34:	4b56      	ldr	r3, [pc, #344]	; (8000e90 <Setting_task+0x2d8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fa81 	bl	8000240 <strlen>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	4621      	mov	r1, r4
 8000d48:	484e      	ldr	r0, [pc, #312]	; (8000e84 <Setting_task+0x2cc>)
 8000d4a:	f004 fc77 	bl	800563c <HAL_UART_Transmit>
							HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc2, strlen(msg_rtc2), HAL_MAX_DELAY);
 8000d4e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d50:	f7ff fa76 	bl	8000240 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000d5e:	4849      	ldr	r0, [pc, #292]	; (8000e84 <Setting_task+0x2cc>)
 8000d60:	f004 fc6c 	bl	800563c <HAL_UART_Transmit>
						}

						break;
 8000d64:	e175      	b.n	8001052 <Setting_task+0x49a>
					}

				case sRtcTimeConfig:
					{
					/* get hh, mm, ss infor and configure RTC */
						switch(rtc_state)
 8000d66:	4b4b      	ldr	r3, [pc, #300]	; (8000e94 <Setting_task+0x2dc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d03b      	beq.n	8000de6 <Setting_task+0x22e>
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	f300 816f 	bgt.w	8001052 <Setting_task+0x49a>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <Setting_task+0x1c6>
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d01a      	beq.n	8000db2 <Setting_task+0x1fa>
 8000d7c:	e169      	b.n	8001052 <Setting_task+0x49a>
						{
						case HH_CONFIG:
							{
								uint8_t hour = get_number(cmd->payload, cmd->len) ;
 8000d7e:	6a3a      	ldr	r2, [r7, #32]
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	4619      	mov	r1, r3
 8000d86:	4610      	mov	r0, r2
 8000d88:	f7ff fc34 	bl	80005f4 <get_number>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	767b      	strb	r3, [r7, #25]
								time.hour = hour ;
 8000d90:	7e7b      	ldrb	r3, [r7, #25]
 8000d92:	72bb      	strb	r3, [r7, #10]
								rtc_state = MM_CONFIG ;
 8000d94:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <Setting_task+0x2dc>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
								HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_mm, strlen(msg_rtc_mm), HAL_MAX_DELAY);
 8000d9a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d9c:	f7ff fa50 	bl	8000240 <strlen>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000daa:	4836      	ldr	r0, [pc, #216]	; (8000e84 <Setting_task+0x2cc>)
 8000dac:	f004 fc46 	bl	800563c <HAL_UART_Transmit>
								break;
 8000db0:	e093      	b.n	8000eda <Setting_task+0x322>
							}
						case MM_CONFIG:
							{
								uint8_t min = get_number(cmd->payload, cmd->len) ;
 8000db2:	6a3a      	ldr	r2, [r7, #32]
 8000db4:	6a3b      	ldr	r3, [r7, #32]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	4619      	mov	r1, r3
 8000dba:	4610      	mov	r0, r2
 8000dbc:	f7ff fc1a 	bl	80005f4 <get_number>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	76bb      	strb	r3, [r7, #26]
								time.minutes = min ;
 8000dc4:	7ebb      	ldrb	r3, [r7, #26]
 8000dc6:	727b      	strb	r3, [r7, #9]
								rtc_state = SS_CONFIG ;
 8000dc8:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <Setting_task+0x2dc>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	601a      	str	r2, [r3, #0]
								HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_ss, strlen(msg_rtc_ss), HAL_MAX_DELAY);
 8000dce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000dd0:	f7ff fa36 	bl	8000240 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000dde:	4829      	ldr	r0, [pc, #164]	; (8000e84 <Setting_task+0x2cc>)
 8000de0:	f004 fc2c 	bl	800563c <HAL_UART_Transmit>
								break;
 8000de4:	e079      	b.n	8000eda <Setting_task+0x322>
							}

						case SS_CONFIG:
							{
								uint8_t sec = get_number(cmd->payload, cmd->len) ;
 8000de6:	6a3a      	ldr	r2, [r7, #32]
 8000de8:	6a3b      	ldr	r3, [r7, #32]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	4619      	mov	r1, r3
 8000dee:	4610      	mov	r0, r2
 8000df0:	f7ff fc00 	bl	80005f4 <get_number>
 8000df4:	4603      	mov	r3, r0
 8000df6:	76fb      	strb	r3, [r7, #27]
								time.seconds = sec ;
 8000df8:	7efb      	ldrb	r3, [r7, #27]
 8000dfa:	723b      	strb	r3, [r7, #8]
								if (!validate_rtc_information(&time))
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	4618      	mov	r0, r3
 8000e02:	f008 fec9 	bl	8009b98 <validate_rtc_information>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d145      	bne.n	8000e98 <Setting_task+0x2e0>
								{
									RTC_Set_Time(&time) ;
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	4618      	mov	r0, r3
 8000e12:	f008 fde9 	bl	80099e8 <RTC_Set_Time>
									HAL_UART_Transmit(&huart3,(uint8_t*)msg_conf, strlen(msg_conf), HAL_MAX_DELAY);
 8000e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e18:	f7ff fa12 	bl	8000240 <strlen>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
 8000e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <Setting_task+0x2cc>)
 8000e28:	f004 fc08 	bl	800563c <HAL_UART_Transmit>
									show_time_date(&time);
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4618      	mov	r0, r3
 8000e32:	f008 fe73 	bl	8009b1c <show_time_date>
									curr_state = sMenu ;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <Setting_task+0x2d0>)
 8000e38:	2206      	movs	r2, #6
 8000e3a:	701a      	strb	r2, [r3, #0]
									MENU_MESS ;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <Setting_task+0x2d4>)
 8000e3e:	681c      	ldr	r4, [r3, #0]
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <Setting_task+0x2d4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff f9fb 	bl	8000240 <strlen>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	4621      	mov	r1, r4
 8000e54:	480b      	ldr	r0, [pc, #44]	; (8000e84 <Setting_task+0x2cc>)
 8000e56:	f004 fbf1 	bl	800563c <HAL_UART_Transmit>
 8000e5a:	e03a      	b.n	8000ed2 <Setting_task+0x31a>
 8000e5c:	0800afa0 	.word	0x0800afa0
 8000e60:	0800afec 	.word	0x0800afec
 8000e64:	0800b06c 	.word	0x0800b06c
 8000e68:	0800b080 	.word	0x0800b080
 8000e6c:	0800b098 	.word	0x0800b098
 8000e70:	0800b0b0 	.word	0x0800b0b0
 8000e74:	0800b0c4 	.word	0x0800b0c4
 8000e78:	0800b0d8 	.word	0x0800b0d8
 8000e7c:	0800b0f0 	.word	0x0800b0f0
 8000e80:	0800b104 	.word	0x0800b104
 8000e84:	200001d8 	.word	0x200001d8
 8000e88:	20000014 	.word	0x20000014
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000004 	.word	0x20000004
 8000e94:	20000124 	.word	0x20000124

								}
								else
								{
									INVALID_MESS ;
 8000e98:	4b72      	ldr	r3, [pc, #456]	; (8001064 <Setting_task+0x4ac>)
 8000e9a:	681c      	ldr	r4, [r3, #0]
 8000e9c:	4b71      	ldr	r3, [pc, #452]	; (8001064 <Setting_task+0x4ac>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f9cd 	bl	8000240 <strlen>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	4621      	mov	r1, r4
 8000eb0:	486d      	ldr	r0, [pc, #436]	; (8001068 <Setting_task+0x4b0>)
 8000eb2:	f004 fbc3 	bl	800563c <HAL_UART_Transmit>
									curr_state = sSetting ;
 8000eb6:	4b6d      	ldr	r3, [pc, #436]	; (800106c <Setting_task+0x4b4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
									HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc2, strlen(msg_rtc2), HAL_MAX_DELAY);
 8000ebc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000ebe:	f7ff f9bf 	bl	8000240 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000ecc:	4866      	ldr	r0, [pc, #408]	; (8001068 <Setting_task+0x4b0>)
 8000ece:	f004 fbb5 	bl	800563c <HAL_UART_Transmit>
								}
								rtc_state = 0 ;
 8000ed2:	4b67      	ldr	r3, [pc, #412]	; (8001070 <Setting_task+0x4b8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
								break ;
 8000ed8:	bf00      	nop

							}
						} // switch(rtc_state)

					break;} // case sRtcTimeConfig:
 8000eda:	e0ba      	b.n	8001052 <Setting_task+0x49a>

				case sRtcDateConfig:
						{

							/* get date, month, day , year info and configure RTC */
							switch(rtc_state)
 8000edc:	4b64      	ldr	r3, [pc, #400]	; (8001070 <Setting_task+0x4b8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	f200 80b5 	bhi.w	8001050 <Setting_task+0x498>
 8000ee6:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <Setting_task+0x334>)
 8000ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eec:	08000efd 	.word	0x08000efd
 8000ef0:	08000f31 	.word	0x08000f31
 8000ef4:	08000f65 	.word	0x08000f65
 8000ef8:	08000f99 	.word	0x08000f99
								{
								case DATE_CONFIG:
									{
										uint8_t d = get_number(cmd->payload, cmd->len) ;
 8000efc:	6a3a      	ldr	r2, [r7, #32]
 8000efe:	6a3b      	ldr	r3, [r7, #32]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	4619      	mov	r1, r3
 8000f04:	4610      	mov	r0, r2
 8000f06:	f7ff fb75 	bl	80005f4 <get_number>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	773b      	strb	r3, [r7, #28]
										time.dayofmonth = d ;
 8000f0e:	7f3b      	ldrb	r3, [r7, #28]
 8000f10:	733b      	strb	r3, [r7, #12]
										rtc_state = MONTH_CONFIG ;
 8000f12:	4b57      	ldr	r3, [pc, #348]	; (8001070 <Setting_task+0x4b8>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
										HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_mo, strlen(msg_rtc_mo), HAL_MAX_DELAY);
 8000f18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f1a:	f7ff f991 	bl	8000240 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000f28:	484f      	ldr	r0, [pc, #316]	; (8001068 <Setting_task+0x4b0>)
 8000f2a:	f004 fb87 	bl	800563c <HAL_UART_Transmit>
										break;
 8000f2e:	e08f      	b.n	8001050 <Setting_task+0x498>
									}
								case MONTH_CONFIG:
									{
										uint8_t month = get_number(cmd->payload, cmd->len) ;
 8000f30:	6a3a      	ldr	r2, [r7, #32]
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4610      	mov	r0, r2
 8000f3a:	f7ff fb5b 	bl	80005f4 <get_number>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	777b      	strb	r3, [r7, #29]
										time.month = month ;
 8000f42:	7f7b      	ldrb	r3, [r7, #29]
 8000f44:	737b      	strb	r3, [r7, #13]
										rtc_state = DAY_CONFIG ;
 8000f46:	4b4a      	ldr	r3, [pc, #296]	; (8001070 <Setting_task+0x4b8>)
 8000f48:	2202      	movs	r2, #2
 8000f4a:	601a      	str	r2, [r3, #0]
										HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_dow, strlen(msg_rtc_dow), HAL_MAX_DELAY);
 8000f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f4e:	f7ff f977 	bl	8000240 <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000f5c:	4842      	ldr	r0, [pc, #264]	; (8001068 <Setting_task+0x4b0>)
 8000f5e:	f004 fb6d 	bl	800563c <HAL_UART_Transmit>
										break;
 8000f62:	e075      	b.n	8001050 <Setting_task+0x498>
									}
								case DAY_CONFIG:
								{
									uint8_t day = get_number(cmd->payload, cmd->len) ;
 8000f64:	6a3a      	ldr	r2, [r7, #32]
 8000f66:	6a3b      	ldr	r3, [r7, #32]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	f7ff fb41 	bl	80005f4 <get_number>
 8000f72:	4603      	mov	r3, r0
 8000f74:	77bb      	strb	r3, [r7, #30]
									time.dayofweek = day ;
 8000f76:	7fbb      	ldrb	r3, [r7, #30]
 8000f78:	72fb      	strb	r3, [r7, #11]
									rtc_state = YEAR_CONFIG ;
 8000f7a:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <Setting_task+0x4b8>)
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	601a      	str	r2, [r3, #0]
									HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_yr, strlen(msg_rtc_yr), HAL_MAX_DELAY);
 8000f80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f82:	f7ff f95d 	bl	8000240 <strlen>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f90:	4835      	ldr	r0, [pc, #212]	; (8001068 <Setting_task+0x4b0>)
 8000f92:	f004 fb53 	bl	800563c <HAL_UART_Transmit>
									break;
 8000f96:	e05b      	b.n	8001050 <Setting_task+0x498>
								}

								case YEAR_CONFIG:
									{
										uint8_t year = get_number(cmd->payload, cmd->len) ;
 8000f98:	6a3a      	ldr	r2, [r7, #32]
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	f7ff fb27 	bl	80005f4 <get_number>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	77fb      	strb	r3, [r7, #31]
										time.year = year ;
 8000faa:	7ffb      	ldrb	r3, [r7, #31]
 8000fac:	73bb      	strb	r3, [r7, #14]
										if (!validate_rtc_information(&time))
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f008 fdf0 	bl	8009b98 <validate_rtc_information>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d127      	bne.n	800100e <Setting_task+0x456>
										{
											RTC_Set_Time(&time) ;
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f008 fd10 	bl	80099e8 <RTC_Set_Time>
											HAL_UART_Transmit(&huart3,(uint8_t*)msg_conf, strlen(msg_conf), HAL_MAX_DELAY);
 8000fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fca:	f7ff f939 	bl	8000240 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fd8:	4823      	ldr	r0, [pc, #140]	; (8001068 <Setting_task+0x4b0>)
 8000fda:	f004 fb2f 	bl	800563c <HAL_UART_Transmit>
											show_time_date(&time);
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f008 fd9a 	bl	8009b1c <show_time_date>
											curr_state = sMenu ;
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <Setting_task+0x4b4>)
 8000fea:	2206      	movs	r2, #6
 8000fec:	701a      	strb	r2, [r3, #0]
											MENU_MESS ;
 8000fee:	4b21      	ldr	r3, [pc, #132]	; (8001074 <Setting_task+0x4bc>)
 8000ff0:	681c      	ldr	r4, [r3, #0]
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <Setting_task+0x4bc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff f922 	bl	8000240 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	4621      	mov	r1, r4
 8001006:	4818      	ldr	r0, [pc, #96]	; (8001068 <Setting_task+0x4b0>)
 8001008:	f004 fb18 	bl	800563c <HAL_UART_Transmit>
 800100c:	e01c      	b.n	8001048 <Setting_task+0x490>

										}
										else
										{
											INVALID_MESS ;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <Setting_task+0x4ac>)
 8001010:	681c      	ldr	r4, [r3, #0]
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <Setting_task+0x4ac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff f912 	bl	8000240 <strlen>
 800101c:	4603      	mov	r3, r0
 800101e:	b29a      	uxth	r2, r3
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	4621      	mov	r1, r4
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <Setting_task+0x4b0>)
 8001028:	f004 fb08 	bl	800563c <HAL_UART_Transmit>
											curr_state = sSetting ;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <Setting_task+0x4b4>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
											HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc2, strlen(msg_rtc2), HAL_MAX_DELAY);
 8001032:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001034:	f7ff f904 	bl	8000240 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	f04f 33ff 	mov.w	r3, #4294967295
 8001040:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <Setting_task+0x4b0>)
 8001044:	f004 fafa 	bl	800563c <HAL_UART_Transmit>
										}
										rtc_state = 0 ;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <Setting_task+0x4b8>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
										break ;
 800104e:	bf00      	nop

									}
								}
							break;
 8001050:	bf00      	nop
		while(curr_state != sMenu )
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <Setting_task+0x4b4>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b06      	cmp	r3, #6
 8001058:	f47f adf0 	bne.w	8000c3c <Setting_task+0x84>
 800105c:	e5c4      	b.n	8000be8 <Setting_task+0x30>
			if (status != pdTRUE) continue ;
 800105e:	bf00      	nop
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001060:	e5c2      	b.n	8000be8 <Setting_task+0x30>
 8001062:	bf00      	nop
 8001064:	20000004 	.word	0x20000004
 8001068:	200001d8 	.word	0x200001d8
 800106c:	20000014 	.word	0x20000014
 8001070:	20000124 	.word	0x20000124
 8001074:	20000000 	.word	0x20000000

08001078 <Command_task>:
		} //while end

		}//while super loop end
}
void Command_task( void *param)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]

	BaseType_t status ;
	command_t cmd ;
	MENU_MESS ;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <Command_task+0x5c>)
 8001082:	681c      	ldr	r4, [r3, #0]
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <Command_task+0x5c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f8d9 	bl	8000240 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	4621      	mov	r1, r4
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <Command_task+0x60>)
 800109a:	f004 facf 	bl	800563c <HAL_UART_Transmit>
	while(1)
	{
			/* Implement notify wait */
		status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2000      	movs	r0, #0
 80010ac:	f007 fa3c 	bl	8008528 <xTaskGenericNotifyWait>
 80010b0:	61f8      	str	r0, [r7, #28]

		if (status == pdTRUE)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d1f2      	bne.n	800109e <Command_task+0x26>
		{
			/* process the user data ( command) stored  in input data  queue */
			if (curr_state == sNone)
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <Command_task+0x64>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b07      	cmp	r3, #7
 80010be:	d102      	bne.n	80010c6 <Command_task+0x4e>
			{
				curr_state = sMenu ;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <Command_task+0x64>)
 80010c2:	2206      	movs	r2, #6
 80010c4:	701a      	strb	r2, [r3, #0]
			}
			process_command(&cmd) ;
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f808 	bl	80010e0 <process_command>
		status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80010d0:	e7e5      	b.n	800109e <Command_task+0x26>
 80010d2:	bf00      	nop
 80010d4:	20000000 	.word	0x20000000
 80010d8:	200001d8 	.word	0x200001d8
 80010dc:	20000014 	.word	0x20000014

080010e0 <process_command>:

	}
}

void process_command ( command_t *cmd)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f863 	bl	80011b4 <extract_command>

	if (curr_state != sNone)
 80010ee:	4b2b      	ldr	r3, [pc, #172]	; (800119c <process_command+0xbc>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b07      	cmp	r3, #7
 80010f4:	d04d      	beq.n	8001192 <process_command+0xb2>
	{
		if (curr_state == sMenu)
 80010f6:	4b29      	ldr	r3, [pc, #164]	; (800119c <process_command+0xbc>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d102      	bne.n	8001104 <process_command+0x24>
		checkState(cmd);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f892 	bl	8001228 <checkState>
		switch (curr_state )
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <process_command+0xbc>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d823      	bhi.n	8001154 <process_command+0x74>
 800110c:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <process_command+0x34>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	0800112d 	.word	0x0800112d
 8001118:	08001141 	.word	0x08001141
 800111c:	0800112d 	.word	0x0800112d
 8001120:	0800112d 	.word	0x0800112d
 8001124:	08001141 	.word	0x08001141
 8001128:	08001141 	.word	0x08001141
		{

		case sRtcDateConfig:
		case sRtcTimeConfig:
		case sSetting:
				xTaskNotify(handle_setting_task,(uint32_t)cmd ,eSetValueWithOverwrite) ;
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <process_command+0xc0>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	2300      	movs	r3, #0
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2303      	movs	r3, #3
 8001138:	2100      	movs	r1, #0
 800113a:	f007 fa71 	bl	8008620 <xTaskGenericNotify>
				break ;
 800113e:	e029      	b.n	8001194 <process_command+0xb4>
		case sRunToStart:
		case sRunToRestart:
		case sRun:
				xTaskNotify(handle_start_task,(uint32_t)cmd ,eSetValueWithOverwrite) ;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <process_command+0xc4>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	2300      	movs	r3, #0
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2303      	movs	r3, #3
 800114c:	2100      	movs	r1, #0
 800114e:	f007 fa67 	bl	8008620 <xTaskGenericNotify>
				break ;
 8001152:	e01f      	b.n	8001194 <process_command+0xb4>
		 default:
			 INVALID_MESS ;
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <process_command+0xc8>)
 8001156:	681c      	ldr	r4, [r3, #0]
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <process_command+0xc8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f86f 	bl	8000240 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	b29a      	uxth	r2, r3
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	4621      	mov	r1, r4
 800116c:	480f      	ldr	r0, [pc, #60]	; (80011ac <process_command+0xcc>)
 800116e:	f004 fa65 	bl	800563c <HAL_UART_Transmit>
			 MENU_MESS ;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <process_command+0xd0>)
 8001174:	681c      	ldr	r4, [r3, #0]
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <process_command+0xd0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f860 	bl	8000240 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	4621      	mov	r1, r4
 800118a:	4808      	ldr	r0, [pc, #32]	; (80011ac <process_command+0xcc>)
 800118c:	f004 fa56 	bl	800563c <HAL_UART_Transmit>
		}
	}



}
 8001190:	e000      	b.n	8001194 <process_command+0xb4>
	}
 8001192:	bf00      	nop
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	20000014 	.word	0x20000014
 80011a0:	2000026c 	.word	0x2000026c
 80011a4:	20000260 	.word	0x20000260
 80011a8:	20000004 	.word	0x20000004
 80011ac:	200001d8 	.word	0x200001d8
 80011b0:	20000000 	.word	0x20000000

080011b4 <extract_command>:

int extract_command ( command_t *cmd )
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	uint8_t item ;
	BaseType_t status ;
	status = uxQueueMessagesWaiting(q_data); // trả về số phần tử có sẵn trong hàng đợi
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <extract_command+0x70>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f006 fa23 	bl	800760c <uxQueueMessagesWaiting>
 80011c6:	4603      	mov	r3, r0
 80011c8:	613b      	str	r3, [r7, #16]
	if (!status) return  -1 ; // nếu không có phần tử nào
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <extract_command+0x22>
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	e022      	b.n	800121c <extract_command+0x68>

	uint8_t i = 0 ;
 80011d6:	2300      	movs	r3, #0
 80011d8:	75fb      	strb	r3, [r7, #23]
	do
	{
		status = xQueueReceive(q_data, &item, 0) ;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <extract_command+0x70>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f107 010f 	add.w	r1, r7, #15
 80011e2:	2200      	movs	r2, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f006 f8c1 	bl	800736c <xQueueReceive>
 80011ea:	6138      	str	r0, [r7, #16]
		if (status == pdTRUE) cmd->payload[i++] = item ;
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d106      	bne.n	8001200 <extract_command+0x4c>
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	75fa      	strb	r2, [r7, #23]
 80011f8:	461a      	mov	r2, r3
 80011fa:	7bf9      	ldrb	r1, [r7, #15]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	5499      	strb	r1, [r3, r2]

	}
	while (item !='\n');
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b0a      	cmp	r3, #10
 8001204:	d1e9      	bne.n	80011da <extract_command+0x26>
	cmd->payload[i-1] = '\0';
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	3b01      	subs	r3, #1
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	2100      	movs	r1, #0
 800120e:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1 ;
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	3b01      	subs	r3, #1
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60da      	str	r2, [r3, #12]
	return 0 ;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000274 	.word	0x20000274

08001228 <checkState>:

void checkState( command_t *cmd )
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	uint8_t option ;
	if (cmd->len == 1 )
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d116      	bne.n	8001266 <checkState+0x3e>
	{
		option = get_number(cmd->payload, cmd->len);
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	4619      	mov	r1, r3
 8001240:	4610      	mov	r0, r2
 8001242:	f7ff f9d7 	bl	80005f4 <get_number>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
		switch(option)
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <checkState+0x2e>
 8001250:	2b01      	cmp	r3, #1
 8001252:	d004      	beq.n	800125e <checkState+0x36>
			break;
		case 1:
			curr_state = sSetting ;
		}
	}
}
 8001254:	e008      	b.n	8001268 <checkState+0x40>
			curr_state = sRun;
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <checkState+0x48>)
 8001258:	2204      	movs	r2, #4
 800125a:	701a      	strb	r2, [r3, #0]
			break;
 800125c:	e004      	b.n	8001268 <checkState+0x40>
			curr_state = sSetting ;
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <checkState+0x48>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
}
 8001264:	e000      	b.n	8001268 <checkState+0x40>
	}
 8001266:	bf00      	nop
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000014 	.word	0x20000014

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127a:	f000 fdf8 	bl	8001e6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127e:	f000 f8a9 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001282:	f000 f9c3 	bl	800160c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001286:	f000 f913 	bl	80014b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800128a:	f000 f951 	bl	8001530 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800128e:	f000 f98d 	bl	80015ac <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001292:	f005 fc9d 	bl	8006bd0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(Main_task, "menu_task", 10000,NULL,2, &handle_main_task) ;
 8001296:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <main+0x114>)
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	2302      	movs	r3, #2
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2300      	movs	r3, #0
 80012a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80012a4:	4939      	ldr	r1, [pc, #228]	; (800138c <main+0x118>)
 80012a6:	483a      	ldr	r0, [pc, #232]	; (8001390 <main+0x11c>)
 80012a8:	f006 fb58 	bl	800795c <xTaskCreate>
 80012ac:	6078      	str	r0, [r7, #4]
  configASSERT(status == pdPASS) ;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d003      	beq.n	80012bc <main+0x48>
 80012b4:	4937      	ldr	r1, [pc, #220]	; (8001394 <main+0x120>)
 80012b6:	2075      	movs	r0, #117	; 0x75
 80012b8:	f000 fae2 	bl	8001880 <vAssertCalled>
  status = xTaskCreate(Start_task, "start_task", 500,NULL,2, &handle_start_task) ;
 80012bc:	4b36      	ldr	r3, [pc, #216]	; (8001398 <main+0x124>)
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	2302      	movs	r3, #2
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2300      	movs	r3, #0
 80012c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012ca:	4934      	ldr	r1, [pc, #208]	; (800139c <main+0x128>)
 80012cc:	4834      	ldr	r0, [pc, #208]	; (80013a0 <main+0x12c>)
 80012ce:	f006 fb45 	bl	800795c <xTaskCreate>
 80012d2:	6078      	str	r0, [r7, #4]
  configASSERT(status == pdPASS) ;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d003      	beq.n	80012e2 <main+0x6e>
 80012da:	492e      	ldr	r1, [pc, #184]	; (8001394 <main+0x120>)
 80012dc:	2077      	movs	r0, #119	; 0x77
 80012de:	f000 facf 	bl	8001880 <vAssertCalled>
  status = xTaskCreate(Send_task, "send_task", 500,NULL,2, &handle_send_task) ;
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <main+0x130>)
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	2302      	movs	r3, #2
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2300      	movs	r3, #0
 80012ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012f0:	492d      	ldr	r1, [pc, #180]	; (80013a8 <main+0x134>)
 80012f2:	482e      	ldr	r0, [pc, #184]	; (80013ac <main+0x138>)
 80012f4:	f006 fb32 	bl	800795c <xTaskCreate>
 80012f8:	6078      	str	r0, [r7, #4]
  configASSERT(status == pdPASS) ;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d003      	beq.n	8001308 <main+0x94>
 8001300:	4924      	ldr	r1, [pc, #144]	; (8001394 <main+0x120>)
 8001302:	2079      	movs	r0, #121	; 0x79
 8001304:	f000 fabc 	bl	8001880 <vAssertCalled>
  status = xTaskCreate(Setting_task, "Setting_task", 500,NULL,2, &handle_setting_task) ;
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <main+0x13c>)
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	2302      	movs	r3, #2
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2300      	movs	r3, #0
 8001312:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001316:	4927      	ldr	r1, [pc, #156]	; (80013b4 <main+0x140>)
 8001318:	4827      	ldr	r0, [pc, #156]	; (80013b8 <main+0x144>)
 800131a:	f006 fb1f 	bl	800795c <xTaskCreate>
 800131e:	6078      	str	r0, [r7, #4]
  configASSERT(status == pdPASS) ;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d003      	beq.n	800132e <main+0xba>
 8001326:	491b      	ldr	r1, [pc, #108]	; (8001394 <main+0x120>)
 8001328:	207b      	movs	r0, #123	; 0x7b
 800132a:	f000 faa9 	bl	8001880 <vAssertCalled>
  status = xTaskCreate(Command_task, "Command_task", 100,NULL,2, &handle_command_task) ;
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <main+0x148>)
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	2302      	movs	r3, #2
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	2264      	movs	r2, #100	; 0x64
 800133a:	4921      	ldr	r1, [pc, #132]	; (80013c0 <main+0x14c>)
 800133c:	4821      	ldr	r0, [pc, #132]	; (80013c4 <main+0x150>)
 800133e:	f006 fb0d 	bl	800795c <xTaskCreate>
 8001342:	6078      	str	r0, [r7, #4]
   configASSERT(status == pdPASS) ;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d003      	beq.n	8001352 <main+0xde>
 800134a:	4912      	ldr	r1, [pc, #72]	; (8001394 <main+0x120>)
 800134c:	207d      	movs	r0, #125	; 0x7d
 800134e:	f000 fa97 	bl	8001880 <vAssertCalled>

  q_data = xQueueCreate(10,sizeof(char)) ;
 8001352:	2200      	movs	r2, #0
 8001354:	2101      	movs	r1, #1
 8001356:	200a      	movs	r0, #10
 8001358:	f005 fe16 	bl	8006f88 <xQueueGenericCreate>
 800135c:	4603      	mov	r3, r0
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <main+0x154>)
 8001360:	6013      	str	r3, [r2, #0]
  configASSERT(q_data != NULL) ;
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <main+0x154>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d103      	bne.n	8001372 <main+0xfe>
 800136a:	490a      	ldr	r1, [pc, #40]	; (8001394 <main+0x120>)
 800136c:	2080      	movs	r0, #128	; 0x80
 800136e:	f000 fa87 	bl	8001880 <vAssertCalled>

  /* USER CODE END 2 */
  initTimer();
 8001372:	f7ff fbd9 	bl	8000b28 <initTimer>

  HAL_UART_Receive_IT(&huart3,(uint8_t *)&user_data,1);
 8001376:	2201      	movs	r2, #1
 8001378:	4914      	ldr	r1, [pc, #80]	; (80013cc <main+0x158>)
 800137a:	4815      	ldr	r0, [pc, #84]	; (80013d0 <main+0x15c>)
 800137c:	f004 f9f1 	bl	8005762 <HAL_UART_Receive_IT>
  vTaskStartScheduler();
 8001380:	f006 fc5e 	bl	8007c40 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001384:	e7fe      	b.n	8001384 <main+0x110>
 8001386:	bf00      	nop
 8001388:	20000264 	.word	0x20000264
 800138c:	0800b120 	.word	0x0800b120
 8001390:	080006dd 	.word	0x080006dd
 8001394:	0800b12c 	.word	0x0800b12c
 8001398:	20000260 	.word	0x20000260
 800139c:	0800b140 	.word	0x0800b140
 80013a0:	08000b59 	.word	0x08000b59
 80013a4:	20000268 	.word	0x20000268
 80013a8:	0800b14c 	.word	0x0800b14c
 80013ac:	08000b8d 	.word	0x08000b8d
 80013b0:	2000026c 	.word	0x2000026c
 80013b4:	0800b158 	.word	0x0800b158
 80013b8:	08000bb9 	.word	0x08000bb9
 80013bc:	20000270 	.word	0x20000270
 80013c0:	0800b168 	.word	0x0800b168
 80013c4:	08001079 	.word	0x08001079
 80013c8:	20000274 	.word	0x20000274
 80013cc:	20000278 	.word	0x20000278
 80013d0:	200001d8 	.word	0x200001d8

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	; 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	2234      	movs	r2, #52	; 0x34
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f009 f914 	bl	800a610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <SystemClock_Config+0xd4>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <SystemClock_Config+0xd4>)
 80013fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <SystemClock_Config+0xd4>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <SystemClock_Config+0xd8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a25      	ldr	r2, [pc, #148]	; (80014ac <SystemClock_Config+0xd8>)
 8001416:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <SystemClock_Config+0xd8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001428:	2302      	movs	r3, #2
 800142a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	2301      	movs	r3, #1
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001430:	2310      	movs	r3, #16
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001434:	2302      	movs	r3, #2
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001438:	2300      	movs	r3, #0
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800143c:	2308      	movs	r3, #8
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001440:	23d8      	movs	r3, #216	; 0xd8
 8001442:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001448:	2302      	movs	r3, #2
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4618      	mov	r0, r3
 8001456:	f001 fed5 	bl	8003204 <HAL_RCC_OscConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001460:	f000 fa88 	bl	8001974 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001464:	f001 fe7e 	bl	8003164 <HAL_PWREx_EnableOverDrive>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800146e:	f000 fa81 	bl	8001974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001472:	230f      	movs	r3, #15
 8001474:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001476:	2302      	movs	r3, #2
 8001478:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800147e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001482:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	2107      	movs	r1, #7
 8001490:	4618      	mov	r0, r3
 8001492:	f002 f965 	bl	8003760 <HAL_RCC_ClockConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800149c:	f000 fa6a 	bl	8001974 <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3750      	adds	r7, #80	; 0x50
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40007000 	.word	0x40007000

080014b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <MX_I2C1_Init+0x74>)
 80014b6:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <MX_I2C1_Init+0x78>)
 80014b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_I2C1_Init+0x74>)
 80014bc:	4a1b      	ldr	r2, [pc, #108]	; (800152c <MX_I2C1_Init+0x7c>)
 80014be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <MX_I2C1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <MX_I2C1_Init+0x74>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MX_I2C1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_I2C1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_I2C1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_I2C1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_I2C1_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ea:	480e      	ldr	r0, [pc, #56]	; (8001524 <MX_I2C1_Init+0x74>)
 80014ec:	f001 f83e 	bl	800256c <HAL_I2C_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014f6:	f000 fa3d 	bl	8001974 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014fa:	2100      	movs	r1, #0
 80014fc:	4809      	ldr	r0, [pc, #36]	; (8001524 <MX_I2C1_Init+0x74>)
 80014fe:	f001 fd99 	bl	8003034 <HAL_I2CEx_ConfigAnalogFilter>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001508:	f000 fa34 	bl	8001974 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800150c:	2100      	movs	r1, #0
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_I2C1_Init+0x74>)
 8001510:	f001 fddb 	bl	80030ca <HAL_I2CEx_ConfigDigitalFilter>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800151a:	f000 fa2b 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000128 	.word	0x20000128
 8001528:	40005400 	.word	0x40005400
 800152c:	6000030d 	.word	0x6000030d

08001530 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001536:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <MX_SPI1_Init+0x78>)
 8001538:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_SPI1_Init+0x74>)
 800153c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001540:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_SPI1_Init+0x74>)
 800154a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800154e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_SPI1_Init+0x74>)
 800155e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001562:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001566:	2210      	movs	r2, #16
 8001568:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_SPI1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_SPI1_Init+0x74>)
 800157e:	2207      	movs	r2, #7
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_SPI1_Init+0x74>)
 800158a:	2208      	movs	r2, #8
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001590:	f002 ff64 	bl	800445c <HAL_SPI_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800159a:	f000 f9eb 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000174 	.word	0x20000174
 80015a8:	40013000 	.word	0x40013000

080015ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_USART3_UART_Init+0x58>)
 80015b2:	4a15      	ldr	r2, [pc, #84]	; (8001608 <MX_USART3_UART_Init+0x5c>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_USART3_UART_Init+0x58>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_USART3_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_USART3_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_USART3_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USART3_UART_Init+0x58>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_USART3_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USART3_UART_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_USART3_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USART3_UART_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_USART3_UART_Init+0x58>)
 80015f0:	f003 ffd6 	bl	80055a0 <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015fa:	f000 f9bb 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200001d8 	.word	0x200001d8
 8001608:	40004800 	.word	0x40004800

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	4b91      	ldr	r3, [pc, #580]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a90      	ldr	r2, [pc, #576]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b8e      	ldr	r3, [pc, #568]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163a:	4b8b      	ldr	r3, [pc, #556]	; (8001868 <MX_GPIO_Init+0x25c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a8a      	ldr	r2, [pc, #552]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b88      	ldr	r3, [pc, #544]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b85      	ldr	r3, [pc, #532]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a84      	ldr	r2, [pc, #528]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b82      	ldr	r3, [pc, #520]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4b7f      	ldr	r3, [pc, #508]	; (8001868 <MX_GPIO_Init+0x25c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a7e      	ldr	r2, [pc, #504]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b7c      	ldr	r3, [pc, #496]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001682:	4b79      	ldr	r3, [pc, #484]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a78      	ldr	r2, [pc, #480]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001688:	f043 0320 	orr.w	r3, r3, #32
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b76      	ldr	r3, [pc, #472]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	4b73      	ldr	r3, [pc, #460]	; (8001868 <MX_GPIO_Init+0x25c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a72      	ldr	r2, [pc, #456]	; (8001868 <MX_GPIO_Init+0x25c>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b70      	ldr	r3, [pc, #448]	; (8001868 <MX_GPIO_Init+0x25c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016b2:	4b6d      	ldr	r3, [pc, #436]	; (8001868 <MX_GPIO_Init+0x25c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a6c      	ldr	r2, [pc, #432]	; (8001868 <MX_GPIO_Init+0x25c>)
 80016b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b6a      	ldr	r3, [pc, #424]	; (8001868 <MX_GPIO_Init+0x25c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f244 0181 	movw	r1, #16513	; 0x4081
 80016d0:	4866      	ldr	r0, [pc, #408]	; (800186c <MX_GPIO_Init+0x260>)
 80016d2:	f000 ff31 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_Pin_SDCard_GPIO_Port, CS_Pin_SDCard_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016dc:	4864      	ldr	r0, [pc, #400]	; (8001870 <MX_GPIO_Init+0x264>)
 80016de:	f000 ff2b 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2140      	movs	r1, #64	; 0x40
 80016e6:	4863      	ldr	r0, [pc, #396]	; (8001874 <MX_GPIO_Init+0x268>)
 80016e8:	f000 ff26 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80016f2:	4861      	ldr	r0, [pc, #388]	; (8001878 <MX_GPIO_Init+0x26c>)
 80016f4:	f000 ff20 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	485a      	ldr	r0, [pc, #360]	; (8001878 <MX_GPIO_Init+0x26c>)
 800170e:	f000 fd4f 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001712:	2332      	movs	r3, #50	; 0x32
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001722:	230b      	movs	r3, #11
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4619      	mov	r1, r3
 800172c:	4852      	ldr	r0, [pc, #328]	; (8001878 <MX_GPIO_Init+0x26c>)
 800172e:	f000 fd3f 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001732:	2386      	movs	r3, #134	; 0x86
 8001734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001742:	230b      	movs	r3, #11
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	4619      	mov	r1, r3
 800174c:	484b      	ldr	r0, [pc, #300]	; (800187c <MX_GPIO_Init+0x270>)
 800174e:	f000 fd2f 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001752:	f244 0381 	movw	r3, #16513	; 0x4081
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4840      	ldr	r0, [pc, #256]	; (800186c <MX_GPIO_Init+0x260>)
 800176c:	f000 fd20 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin_SDCard_Pin */
  GPIO_InitStruct.Pin = CS_Pin_SDCard_Pin;
 8001770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_Pin_SDCard_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	4839      	ldr	r0, [pc, #228]	; (8001870 <MX_GPIO_Init+0x264>)
 800178a:	f000 fd11 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800178e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2303      	movs	r3, #3
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017a0:	230b      	movs	r3, #11
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4830      	ldr	r0, [pc, #192]	; (800186c <MX_GPIO_Init+0x260>)
 80017ac:	f000 fd00 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80017b0:	2340      	movs	r3, #64	; 0x40
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	482b      	ldr	r0, [pc, #172]	; (8001874 <MX_GPIO_Init+0x268>)
 80017c8:	f000 fcf2 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4619      	mov	r1, r3
 80017de:	4825      	ldr	r0, [pc, #148]	; (8001874 <MX_GPIO_Init+0x268>)
 80017e0:	f000 fce6 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017e4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017f6:	230a      	movs	r3, #10
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	481e      	ldr	r0, [pc, #120]	; (800187c <MX_GPIO_Init+0x270>)
 8001802:	f000 fcd5 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4818      	ldr	r0, [pc, #96]	; (800187c <MX_GPIO_Init+0x270>)
 800181c:	f000 fcc8 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001820:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	480f      	ldr	r0, [pc, #60]	; (8001878 <MX_GPIO_Init+0x26c>)
 800183a:	f000 fcb9 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800183e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001850:	230b      	movs	r3, #11
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	4619      	mov	r1, r3
 800185a:	4806      	ldr	r0, [pc, #24]	; (8001874 <MX_GPIO_Init+0x268>)
 800185c:	f000 fca8 	bl	80021b0 <HAL_GPIO_Init>

}
 8001860:	bf00      	nop
 8001862:	3730      	adds	r7, #48	; 0x30
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	40020400 	.word	0x40020400
 8001870:	40021400 	.word	0x40021400
 8001874:	40021800 	.word	0x40021800
 8001878:	40020800 	.word	0x40020800
 800187c:	40020000 	.word	0x40020000

08001880 <vAssertCalled>:

/* USER CODE BEGIN 4 */
void vAssertCalled(uint32_t ulLine, const char *pcFile)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
    volatile unsigned long ul = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
    (void)pcFile;
    (void)ulLine;
    taskENTER_CRITICAL();
 800188e:	f007 fd7b 	bl	8009388 <vPortEnterCritical>
    {
        /* Set ul to a non-zero value using the debugger to step out of this
        function. */
        while (ul == 0)
 8001892:	e000      	b.n	8001896 <vAssertCalled+0x16>
        {
            __NOP();
 8001894:	bf00      	nop
        while (ul == 0)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0fb      	beq.n	8001894 <vAssertCalled+0x14>
        }
    }
    taskEXIT_CRITICAL();
 800189c:	f007 fda0 	bl	80093e0 <vPortExitCritical>
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	6078      	str	r0, [r7, #4]
	uint8_t dummy ;
		for (int i= 0 ; i < 4000 ; i++);
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e002      	b.n	80018bc <HAL_UART_RxCpltCallback+0x14>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3301      	adds	r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80018c2:	dbf8      	blt.n	80018b6 <HAL_UART_RxCpltCallback+0xe>

		if( !xQueueIsQueueFullFromISR(q_data)) // Kiểm tra hàng đợi đã đầy chưa nếu chưa sẽ trả về pdFALSE còn nếu đầy rồi thì trả về pdTRUE
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <HAL_UART_RxCpltCallback+0x98>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f005 ffc9 	bl	8007860 <xQueueIsQueueFullFromISR>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d107      	bne.n	80018e4 <HAL_UART_RxCpltCallback+0x3c>
		{
			/*Queue is not full */
			/*TODO: Enqueue data byte */
			xQueueSendFromISR(q_data,(void*)&user_data,NULL);  // user_data là nơi nhận data đc nhận về  thông qua khai báo HAL_UART_Receive_IT
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <HAL_UART_RxCpltCallback+0x98>)
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	2300      	movs	r3, #0
 80018da:	2200      	movs	r2, #0
 80018dc:	4919      	ldr	r1, [pc, #100]	; (8001944 <HAL_UART_RxCpltCallback+0x9c>)
 80018de:	f005 fcaf 	bl	8007240 <xQueueGenericSendFromISR>
 80018e2:	e013      	b.n	800190c <HAL_UART_RxCpltCallback+0x64>


		}else{
			/*Queue is full */

			if(user_data == '\n')
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_UART_RxCpltCallback+0x9c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	d10e      	bne.n	800190c <HAL_UART_RxCpltCallback+0x64>
			{
				/*user_data = '\n' */
				/*TODO: make sure that last data byte of the queue is '\n' */
				xQueueReceiveFromISR(q_data,(void *)&dummy,NULL);  // delete last data byte
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_UART_RxCpltCallback+0x98>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f107 010b 	add.w	r1, r7, #11
 80018f6:	2200      	movs	r2, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f005 fe07 	bl	800750c <xQueueReceiveFromISR>
				xQueueSendFromISR(q_data,(void *)&user_data,NULL);
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_UART_RxCpltCallback+0x98>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	2300      	movs	r3, #0
 8001904:	2200      	movs	r2, #0
 8001906:	490f      	ldr	r1, [pc, #60]	; (8001944 <HAL_UART_RxCpltCallback+0x9c>)
 8001908:	f005 fc9a 	bl	8007240 <xQueueGenericSendFromISR>
			}
		}


		/*TODO: send notification to command handling task if user_data = '\n' */
		if(user_data == '\n')
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_UART_RxCpltCallback+0x9c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b0a      	cmp	r3, #10
 8001914:	d10a      	bne.n	800192c <HAL_UART_RxCpltCallback+0x84>
		{
			xTaskNotifyFromISR(handle_command_task,0,eNoAction , NULL);
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_UART_RxCpltCallback+0xa0>)
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	2300      	movs	r3, #0
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	2300      	movs	r3, #0
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2300      	movs	r3, #0
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	f006 ff44 	bl	80087b4 <xTaskGenericNotifyFromISR>
		}

		/* TODO: Enable UART data byte reception again in IT mode */
		 HAL_UART_Receive_IT(&huart3,(uint8_t *)&user_data,1);
 800192c:	2201      	movs	r2, #1
 800192e:	4905      	ldr	r1, [pc, #20]	; (8001944 <HAL_UART_RxCpltCallback+0x9c>)
 8001930:	4806      	ldr	r0, [pc, #24]	; (800194c <HAL_UART_RxCpltCallback+0xa4>)
 8001932:	f003 ff16 	bl	8005762 <HAL_UART_Receive_IT>
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000274 	.word	0x20000274
 8001944:	20000278 	.word	0x20000278
 8001948:	20000270 	.word	0x20000270
 800194c:	200001d8 	.word	0x200001d8

08001950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001962:	f000 fa91 	bl	8001e88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40001000 	.word	0x40001000

08001974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001978:	b672      	cpsid	i
}
 800197a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800197c:	e7fe      	b.n	800197c <Error_Handler+0x8>
	...

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_MspInit+0x44>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <HAL_MspInit+0x44>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_MspInit+0x44>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_MspInit+0x44>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_MspInit+0x44>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_MspInit+0x44>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b0ae      	sub	sp, #184	; 0xb8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2290      	movs	r2, #144	; 0x90
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f008 fe11 	bl	800a610 <memset>
  if(hi2c->Instance==I2C1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <HAL_I2C_MspInit+0xb4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d13c      	bne.n	8001a72 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 f900 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a12:	f7ff ffaf 	bl	8001974 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <HAL_I2C_MspInit+0xb8>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a19      	ldr	r2, [pc, #100]	; (8001a80 <HAL_I2C_MspInit+0xb8>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <HAL_I2C_MspInit+0xb8>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a36:	2312      	movs	r3, #18
 8001a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a52:	4619      	mov	r1, r3
 8001a54:	480b      	ldr	r0, [pc, #44]	; (8001a84 <HAL_I2C_MspInit+0xbc>)
 8001a56:	f000 fbab 	bl	80021b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_I2C_MspInit+0xb8>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <HAL_I2C_MspInit+0xb8>)
 8001a60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_I2C_MspInit+0xb8>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	37b8      	adds	r7, #184	; 0xb8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020400 	.word	0x40020400

08001a88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a25      	ldr	r2, [pc, #148]	; (8001b3c <HAL_SPI_MspInit+0xb4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d143      	bne.n	8001b32 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aaa:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a24      	ldr	r2, [pc, #144]	; (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a18      	ldr	r2, [pc, #96]	; (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001af2:	2360      	movs	r3, #96	; 0x60
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b02:	2305      	movs	r3, #5
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <HAL_SPI_MspInit+0xbc>)
 8001b0e:	f000 fb4f 	bl	80021b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b22:	2305      	movs	r3, #5
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4806      	ldr	r0, [pc, #24]	; (8001b48 <HAL_SPI_MspInit+0xc0>)
 8001b2e:	f000 fb3f 	bl	80021b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	; 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40013000 	.word	0x40013000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020c00 	.word	0x40020c00

08001b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0ae      	sub	sp, #184	; 0xb8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2290      	movs	r2, #144	; 0x90
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f008 fd4f 	bl	800a610 <memset>
  if(huart->Instance==USART3)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <HAL_UART_MspInit+0xc4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d144      	bne.n	8001c06 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 f83e 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b96:	f7ff feed 	bl	8001974 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001bb8:	f043 0308 	orr.w	r3, r3, #8
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001be4:	2307      	movs	r3, #7
 8001be6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4809      	ldr	r0, [pc, #36]	; (8001c18 <HAL_UART_MspInit+0xcc>)
 8001bf2:	f000 fadd 	bl	80021b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2106      	movs	r1, #6
 8001bfa:	2027      	movs	r0, #39	; 0x27
 8001bfc:	f000 fa1c 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c00:	2027      	movs	r0, #39	; 0x27
 8001c02:	f000 fa35 	bl	8002070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c06:	bf00      	nop
 8001c08:	37b8      	adds	r7, #184	; 0xb8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40004800 	.word	0x40004800
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020c00 	.word	0x40020c00

08001c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	2036      	movs	r0, #54	; 0x36
 8001c32:	f000 fa01 	bl	8002038 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c36:	2036      	movs	r0, #54	; 0x36
 8001c38:	f000 fa1a 	bl	8002070 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <HAL_InitTick+0xa0>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <HAL_InitTick+0xa0>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6413      	str	r3, [r2, #64]	; 0x40
 8001c48:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <HAL_InitTick+0xa0>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c54:	f107 0210 	add.w	r2, r7, #16
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 ffa2 	bl	8003ba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c64:	f001 ff78 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <HAL_InitTick+0xa4>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0c9b      	lsrs	r3, r3, #18
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <HAL_InitTick+0xac>)
 8001c80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c9c:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c9e:	f003 f99f 	bl	8004fe0 <HAL_TIM_Base_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d104      	bne.n	8001cb2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ca8:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001caa:	f003 f9fb 	bl	80050a4 <HAL_TIM_Base_Start_IT>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	e000      	b.n	8001cb4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3730      	adds	r7, #48	; 0x30
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	431bde83 	.word	0x431bde83
 8001cc4:	2000027c 	.word	0x2000027c
 8001cc8:	40001000 	.word	0x40001000

08001ccc <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <SDTimer_Handler+0x40>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <SDTimer_Handler+0x1c>
    Timer1--;
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <SDTimer_Handler+0x40>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <SDTimer_Handler+0x40>)
 8001ce6:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <SDTimer_Handler+0x44>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d006      	beq.n	8001d00 <SDTimer_Handler+0x34>
    Timer2--;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <SDTimer_Handler+0x44>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SDTimer_Handler+0x44>)
 8001cfe:	801a      	strh	r2, [r3, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	200002ca 	.word	0x200002ca
 8001d10:	200002cc 	.word	0x200002cc

08001d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <NMI_Handler+0x4>

08001d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <MemManage_Handler+0x4>

08001d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <BusFault_Handler+0x4>

08001d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <UsageFault_Handler+0x4>

08001d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <USART3_IRQHandler+0x10>)
 8001d46:	f003 fd5b 	bl	8005800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200001d8 	.word	0x200001d8

08001d54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	  FatFsCnt++;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <TIM6_DAC_IRQHandler+0x30>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <TIM6_DAC_IRQHandler+0x30>)
 8001d64:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <TIM6_DAC_IRQHandler+0x30>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b09      	cmp	r3, #9
 8001d6e:	d904      	bls.n	8001d7a <TIM6_DAC_IRQHandler+0x26>
	  {
	    FatFsCnt = 0;
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <TIM6_DAC_IRQHandler+0x30>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001d76:	f7ff ffa9 	bl	8001ccc <SDTimer_Handler>
	  }
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d7a:	4803      	ldr	r0, [pc, #12]	; (8001d88 <TIM6_DAC_IRQHandler+0x34>)
 8001d7c:	f003 fa0a 	bl	8005194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200002c8 	.word	0x200002c8
 8001d88:	2000027c 	.word	0x2000027c

08001d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <_sbrk+0x5c>)
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <_sbrk+0x60>)
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <_sbrk+0x64>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <_sbrk+0x68>)
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d207      	bcs.n	8001dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dbc:	f008 fbf0 	bl	800a5a0 <__errno>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	e009      	b.n	8001de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <_sbrk+0x64>)
 8001ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20080000 	.word	0x20080000
 8001dec:	00000400 	.word	0x00000400
 8001df0:	200002d0 	.word	0x200002d0
 8001df4:	200194e8 	.word	0x200194e8

08001df8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e22:	490e      	ldr	r1, [pc, #56]	; (8001e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e38:	4c0b      	ldr	r4, [pc, #44]	; (8001e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e46:	f7ff ffd7 	bl	8001df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f008 fbaf 	bl	800a5ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4e:	f7ff fa11 	bl	8001274 <main>
  bx  lr    
 8001e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e54:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001e60:	0800b2fc 	.word	0x0800b2fc
  ldr r2, =_sbss
 8001e64:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001e68:	200194e4 	.word	0x200194e4

08001e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC_IRQHandler>

08001e6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e72:	2003      	movs	r0, #3
 8001e74:	f000 f8d5 	bl	8002022 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e78:	200f      	movs	r0, #15
 8001e7a:	f7ff fecf 	bl	8001c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e7e:	f7ff fd7f 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x24>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <HAL_IncTick+0x24>)
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000020 	.word	0x20000020
 8001eac:	200002d4 	.word	0x200002d4

08001eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_GetTick+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	200002d4 	.word	0x200002d4

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <__NVIC_SetPriorityGrouping+0x40>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <__NVIC_SetPriorityGrouping+0x40>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00
 8001f0c:	05fa0000 	.word	0x05fa0000

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <__NVIC_EnableIRQ+0x38>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff4c 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204a:	f7ff ff61 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 800204e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	6978      	ldr	r0, [r7, #20]
 8002056:	f7ff ffb1 	bl	8001fbc <NVIC_EncodePriority>
 800205a:	4602      	mov	r2, r0
 800205c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff80 	bl	8001f68 <__NVIC_SetPriority>
}
 8002068:	bf00      	nop
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff54 	bl	8001f2c <__NVIC_EnableIRQ>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800209a:	f7ff ff09 	bl	8001eb0 <HAL_GetTick>
 800209e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d008      	beq.n	80020be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e052      	b.n	8002164 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0216 	bic.w	r2, r2, #22
 80020cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <HAL_DMA_Abort+0x62>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0208 	bic.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210e:	e013      	b.n	8002138 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002110:	f7ff fece 	bl	8001eb0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b05      	cmp	r3, #5
 800211c:	d90c      	bls.n	8002138 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2220      	movs	r2, #32
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2203      	movs	r2, #3
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e015      	b.n	8002164 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1e4      	bne.n	8002110 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214a:	223f      	movs	r2, #63	; 0x3f
 800214c:	409a      	lsls	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d004      	beq.n	800218a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2280      	movs	r2, #128	; 0x80
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e00c      	b.n	80021a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2205      	movs	r2, #5
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	e175      	b.n	80024bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f040 8164 	bne.w	80024b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_GPIO_Init+0x56>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d130      	bne.n	8002268 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 0201 	and.w	r2, r3, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b03      	cmp	r3, #3
 8002272:	d017      	beq.n	80022a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d123      	bne.n	80022f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80be 	beq.w	80024b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <HAL_GPIO_Init+0x324>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4a65      	ldr	r2, [pc, #404]	; (80024d4 <HAL_GPIO_Init+0x324>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002344:	6453      	str	r3, [r2, #68]	; 0x44
 8002346:	4b63      	ldr	r3, [pc, #396]	; (80024d4 <HAL_GPIO_Init+0x324>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002352:	4a61      	ldr	r2, [pc, #388]	; (80024d8 <HAL_GPIO_Init+0x328>)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	3302      	adds	r3, #2
 800235a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	220f      	movs	r2, #15
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a58      	ldr	r2, [pc, #352]	; (80024dc <HAL_GPIO_Init+0x32c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d037      	beq.n	80023ee <HAL_GPIO_Init+0x23e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a57      	ldr	r2, [pc, #348]	; (80024e0 <HAL_GPIO_Init+0x330>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d031      	beq.n	80023ea <HAL_GPIO_Init+0x23a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a56      	ldr	r2, [pc, #344]	; (80024e4 <HAL_GPIO_Init+0x334>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d02b      	beq.n	80023e6 <HAL_GPIO_Init+0x236>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a55      	ldr	r2, [pc, #340]	; (80024e8 <HAL_GPIO_Init+0x338>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d025      	beq.n	80023e2 <HAL_GPIO_Init+0x232>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a54      	ldr	r2, [pc, #336]	; (80024ec <HAL_GPIO_Init+0x33c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01f      	beq.n	80023de <HAL_GPIO_Init+0x22e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a53      	ldr	r2, [pc, #332]	; (80024f0 <HAL_GPIO_Init+0x340>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d019      	beq.n	80023da <HAL_GPIO_Init+0x22a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_GPIO_Init+0x344>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0x226>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a51      	ldr	r2, [pc, #324]	; (80024f8 <HAL_GPIO_Init+0x348>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00d      	beq.n	80023d2 <HAL_GPIO_Init+0x222>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a50      	ldr	r2, [pc, #320]	; (80024fc <HAL_GPIO_Init+0x34c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <HAL_GPIO_Init+0x21e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4f      	ldr	r2, [pc, #316]	; (8002500 <HAL_GPIO_Init+0x350>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_GPIO_Init+0x21a>
 80023c6:	2309      	movs	r3, #9
 80023c8:	e012      	b.n	80023f0 <HAL_GPIO_Init+0x240>
 80023ca:	230a      	movs	r3, #10
 80023cc:	e010      	b.n	80023f0 <HAL_GPIO_Init+0x240>
 80023ce:	2308      	movs	r3, #8
 80023d0:	e00e      	b.n	80023f0 <HAL_GPIO_Init+0x240>
 80023d2:	2307      	movs	r3, #7
 80023d4:	e00c      	b.n	80023f0 <HAL_GPIO_Init+0x240>
 80023d6:	2306      	movs	r3, #6
 80023d8:	e00a      	b.n	80023f0 <HAL_GPIO_Init+0x240>
 80023da:	2305      	movs	r3, #5
 80023dc:	e008      	b.n	80023f0 <HAL_GPIO_Init+0x240>
 80023de:	2304      	movs	r3, #4
 80023e0:	e006      	b.n	80023f0 <HAL_GPIO_Init+0x240>
 80023e2:	2303      	movs	r3, #3
 80023e4:	e004      	b.n	80023f0 <HAL_GPIO_Init+0x240>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e002      	b.n	80023f0 <HAL_GPIO_Init+0x240>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <HAL_GPIO_Init+0x240>
 80023ee:	2300      	movs	r3, #0
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	f002 0203 	and.w	r2, r2, #3
 80023f6:	0092      	lsls	r2, r2, #2
 80023f8:	4093      	lsls	r3, r2
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002400:	4935      	ldr	r1, [pc, #212]	; (80024d8 <HAL_GPIO_Init+0x328>)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	3302      	adds	r3, #2
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800240e:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_GPIO_Init+0x354>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002432:	4a34      	ldr	r2, [pc, #208]	; (8002504 <HAL_GPIO_Init+0x354>)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002438:	4b32      	ldr	r3, [pc, #200]	; (8002504 <HAL_GPIO_Init+0x354>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800245c:	4a29      	ldr	r2, [pc, #164]	; (8002504 <HAL_GPIO_Init+0x354>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002462:	4b28      	ldr	r3, [pc, #160]	; (8002504 <HAL_GPIO_Init+0x354>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002486:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <HAL_GPIO_Init+0x354>)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800248c:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_GPIO_Init+0x354>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <HAL_GPIO_Init+0x354>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3301      	adds	r3, #1
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	2b0f      	cmp	r3, #15
 80024c0:	f67f ae86 	bls.w	80021d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40013800 	.word	0x40013800
 80024dc:	40020000 	.word	0x40020000
 80024e0:	40020400 	.word	0x40020400
 80024e4:	40020800 	.word	0x40020800
 80024e8:	40020c00 	.word	0x40020c00
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40021400 	.word	0x40021400
 80024f4:	40021800 	.word	0x40021800
 80024f8:	40021c00 	.word	0x40021c00
 80024fc:	40022000 	.word	0x40022000
 8002500:	40022400 	.word	0x40022400
 8002504:	40013c00 	.word	0x40013c00

08002508 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e001      	b.n	800252a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
 8002544:	4613      	mov	r3, r2
 8002546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002548:	787b      	ldrb	r3, [r7, #1]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002554:	e003      	b.n	800255e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	041a      	lsls	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	619a      	str	r2, [r3, #24]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07f      	b.n	800267e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff fa18 	bl	80019c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2224      	movs	r2, #36	; 0x24
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	e006      	b.n	80025f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d104      	bne.n	8002606 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002604:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_I2C_Init+0x11c>)
 8002612:	430b      	orrs	r3, r1
 8002614:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002624:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69d9      	ldr	r1, [r3, #28]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1a      	ldr	r2, [r3, #32]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	02008000 	.word	0x02008000

0800268c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	4608      	mov	r0, r1
 8002696:	4611      	mov	r1, r2
 8002698:	461a      	mov	r2, r3
 800269a:	4603      	mov	r3, r0
 800269c:	817b      	strh	r3, [r7, #10]
 800269e:	460b      	mov	r3, r1
 80026a0:	813b      	strh	r3, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	f040 80f9 	bne.w	80028a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_I2C_Mem_Write+0x34>
 80026ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0ed      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_I2C_Mem_Write+0x4e>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e0e6      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026e2:	f7ff fbe5 	bl	8001eb0 <HAL_GetTick>
 80026e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2319      	movs	r3, #25
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fac3 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0d1      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2221      	movs	r2, #33	; 0x21
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a3a      	ldr	r2, [r7, #32]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800272c:	88f8      	ldrh	r0, [r7, #6]
 800272e:	893a      	ldrh	r2, [r7, #8]
 8002730:	8979      	ldrh	r1, [r7, #10]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	4603      	mov	r3, r0
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f9d3 	bl	8002ae8 <I2C_RequestMemoryWrite>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0a9      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2bff      	cmp	r3, #255	; 0xff
 800275c:	d90e      	bls.n	800277c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	22ff      	movs	r2, #255	; 0xff
 8002762:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	b2da      	uxtb	r2, r3
 800276a:	8979      	ldrh	r1, [r7, #10]
 800276c:	2300      	movs	r3, #0
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fc2b 	bl	8002fd0 <I2C_TransferConfig>
 800277a:	e00f      	b.n	800279c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	b2da      	uxtb	r2, r3
 800278c:	8979      	ldrh	r1, [r7, #10]
 800278e:	2300      	movs	r3, #0
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fc1a 	bl	8002fd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 faad 	bl	8002d00 <I2C_WaitOnTXISFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e07b      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d034      	beq.n	8002854 <HAL_I2C_Mem_Write+0x1c8>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d130      	bne.n	8002854 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	2200      	movs	r2, #0
 80027fa:	2180      	movs	r1, #128	; 0x80
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fa3f 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e04d      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	2bff      	cmp	r3, #255	; 0xff
 8002814:	d90e      	bls.n	8002834 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	22ff      	movs	r2, #255	; 0xff
 800281a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	b2da      	uxtb	r2, r3
 8002822:	8979      	ldrh	r1, [r7, #10]
 8002824:	2300      	movs	r3, #0
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fbcf 	bl	8002fd0 <I2C_TransferConfig>
 8002832:	e00f      	b.n	8002854 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002842:	b2da      	uxtb	r2, r3
 8002844:	8979      	ldrh	r1, [r7, #10]
 8002846:	2300      	movs	r3, #0
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fbbe 	bl	8002fd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d19e      	bne.n	800279c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fa8c 	bl	8002d80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e01a      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2220      	movs	r2, #32
 8002878:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_I2C_Mem_Write+0x224>)
 8002886:	400b      	ands	r3, r1
 8002888:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
  }
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	fe00e800 	.word	0xfe00e800

080028b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	4608      	mov	r0, r1
 80028be:	4611      	mov	r1, r2
 80028c0:	461a      	mov	r2, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	817b      	strh	r3, [r7, #10]
 80028c6:	460b      	mov	r3, r1
 80028c8:	813b      	strh	r3, [r7, #8]
 80028ca:	4613      	mov	r3, r2
 80028cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	f040 80fd 	bne.w	8002ad6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <HAL_I2C_Mem_Read+0x34>
 80028e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0f1      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_I2C_Mem_Read+0x4e>
 80028fe:	2302      	movs	r3, #2
 8002900:	e0ea      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800290a:	f7ff fad1 	bl	8001eb0 <HAL_GetTick>
 800290e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2319      	movs	r3, #25
 8002916:	2201      	movs	r2, #1
 8002918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f9af 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0d5      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2222      	movs	r2, #34	; 0x22
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2240      	movs	r2, #64	; 0x40
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a3a      	ldr	r2, [r7, #32]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800294c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002954:	88f8      	ldrh	r0, [r7, #6]
 8002956:	893a      	ldrh	r2, [r7, #8]
 8002958:	8979      	ldrh	r1, [r7, #10]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	4603      	mov	r3, r0
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f913 	bl	8002b90 <I2C_RequestMemoryRead>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0ad      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d90e      	bls.n	80029a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	22ff      	movs	r2, #255	; 0xff
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	b2da      	uxtb	r2, r3
 8002992:	8979      	ldrh	r1, [r7, #10]
 8002994:	4b52      	ldr	r3, [pc, #328]	; (8002ae0 <HAL_I2C_Mem_Read+0x22c>)
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fb17 	bl	8002fd0 <I2C_TransferConfig>
 80029a2:	e00f      	b.n	80029c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	8979      	ldrh	r1, [r7, #10]
 80029b6:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <HAL_I2C_Mem_Read+0x22c>)
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fb06 	bl	8002fd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	2200      	movs	r2, #0
 80029cc:	2104      	movs	r1, #4
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f956 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07c      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d034      	beq.n	8002a84 <HAL_I2C_Mem_Read+0x1d0>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d130      	bne.n	8002a84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2180      	movs	r1, #128	; 0x80
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f927 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e04d      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2bff      	cmp	r3, #255	; 0xff
 8002a44:	d90e      	bls.n	8002a64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	22ff      	movs	r2, #255	; 0xff
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	8979      	ldrh	r1, [r7, #10]
 8002a54:	2300      	movs	r3, #0
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fab7 	bl	8002fd0 <I2C_TransferConfig>
 8002a62:	e00f      	b.n	8002a84 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	8979      	ldrh	r1, [r7, #10]
 8002a76:	2300      	movs	r3, #0
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 faa6 	bl	8002fd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d19a      	bne.n	80029c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f974 	bl	8002d80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e01a      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_I2C_Mem_Read+0x230>)
 8002ab6:	400b      	ands	r3, r1
 8002ab8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	80002400 	.word	0x80002400
 8002ae4:	fe00e800 	.word	0xfe00e800

08002ae8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	4608      	mov	r0, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	817b      	strh	r3, [r7, #10]
 8002afa:	460b      	mov	r3, r1
 8002afc:	813b      	strh	r3, [r7, #8]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	8979      	ldrh	r1, [r7, #10]
 8002b08:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <I2C_RequestMemoryWrite+0xa4>)
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fa5d 	bl	8002fd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	69b9      	ldr	r1, [r7, #24]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f8f0 	bl	8002d00 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e02c      	b.n	8002b84 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b30:	893b      	ldrh	r3, [r7, #8]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
 8002b3a:	e015      	b.n	8002b68 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b3c:	893b      	ldrh	r3, [r7, #8]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	69b9      	ldr	r1, [r7, #24]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f8d6 	bl	8002d00 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e012      	b.n	8002b84 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5e:	893b      	ldrh	r3, [r7, #8]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2180      	movs	r1, #128	; 0x80
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f884 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	80002000 	.word	0x80002000

08002b90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	817b      	strh	r3, [r7, #10]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	813b      	strh	r3, [r7, #8]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	8979      	ldrh	r1, [r7, #10]
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <I2C_RequestMemoryRead+0xa4>)
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fa0a 	bl	8002fd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	69b9      	ldr	r1, [r7, #24]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f89d 	bl	8002d00 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e02c      	b.n	8002c2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d105      	bne.n	8002be2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd6:	893b      	ldrh	r3, [r7, #8]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
 8002be0:	e015      	b.n	8002c0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002be2:	893b      	ldrh	r3, [r7, #8]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	69b9      	ldr	r1, [r7, #24]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f883 	bl	8002d00 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e012      	b.n	8002c2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c04:	893b      	ldrh	r3, [r7, #8]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2200      	movs	r2, #0
 8002c16:	2140      	movs	r1, #64	; 0x40
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f831 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	80002000 	.word	0x80002000

08002c38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d103      	bne.n	8002c56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2200      	movs	r2, #0
 8002c54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d007      	beq.n	8002c74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	619a      	str	r2, [r3, #24]
  }
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c90:	e022      	b.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d01e      	beq.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9a:	f7ff f909 	bl	8001eb0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d113      	bne.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e00f      	b.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d0cd      	beq.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d0c:	e02c      	b.n	8002d68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f870 	bl	8002df8 <I2C_IsErrorOccurred>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e02a      	b.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d01e      	beq.n	8002d68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7ff f8c1 	bl	8001eb0 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d113      	bne.n	8002d68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	f043 0220 	orr.w	r2, r3, #32
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e007      	b.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d1cb      	bne.n	8002d0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d8c:	e028      	b.n	8002de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f830 	bl	8002df8 <I2C_IsErrorOccurred>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e026      	b.n	8002df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da2:	f7ff f885 	bl	8001eb0 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d302      	bcc.n	8002db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d113      	bne.n	8002de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e007      	b.n	8002df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d1cf      	bne.n	8002d8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d075      	beq.n	8002f10 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2210      	movs	r2, #16
 8002e2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e2c:	e056      	b.n	8002edc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d052      	beq.n	8002edc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7ff f83b 	bl	8001eb0 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_IsErrorOccurred+0x54>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d147      	bne.n	8002edc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e6e:	d12e      	bne.n	8002ece <I2C_IsErrorOccurred+0xd6>
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e76:	d02a      	beq.n	8002ece <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d027      	beq.n	8002ece <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e8c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e8e:	f7ff f80f 	bl	8001eb0 <HAL_GetTick>
 8002e92:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e94:	e01b      	b.n	8002ece <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e96:	f7ff f80b 	bl	8001eb0 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b19      	cmp	r3, #25
 8002ea2:	d914      	bls.n	8002ece <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d1dc      	bne.n	8002e96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d003      	beq.n	8002ef2 <I2C_IsErrorOccurred+0xfa>
 8002eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d09d      	beq.n	8002e2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2220      	movs	r2, #32
 8002f00:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f043 0304 	orr.w	r3, r3, #4
 8002f08:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00b      	beq.n	8002f3a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	f043 0308 	orr.w	r3, r3, #8
 8002f4a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00b      	beq.n	8002f7e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f043 0302 	orr.w	r3, r3, #2
 8002f6c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01c      	beq.n	8002fc0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f7ff fe56 	bl	8002c38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6859      	ldr	r1, [r3, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <I2C_IsErrorOccurred+0x1d4>)
 8002f98:	400b      	ands	r3, r1
 8002f9a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3728      	adds	r7, #40	; 0x28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	fe00e800 	.word	0xfe00e800

08002fd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	817b      	strh	r3, [r7, #10]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fe2:	897b      	ldrh	r3, [r7, #10]
 8002fe4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fe8:	7a7b      	ldrb	r3, [r7, #9]
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ff0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ffe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	0d5b      	lsrs	r3, r3, #21
 800300a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <I2C_TransferConfig+0x60>)
 8003010:	430b      	orrs	r3, r1
 8003012:	43db      	mvns	r3, r3
 8003014:	ea02 0103 	and.w	r1, r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003022:	bf00      	nop
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	03ff63ff 	.word	0x03ff63ff

08003034 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b20      	cmp	r3, #32
 8003048:	d138      	bne.n	80030bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003054:	2302      	movs	r3, #2
 8003056:	e032      	b.n	80030be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2224      	movs	r2, #36	; 0x24
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003086:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6819      	ldr	r1, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e000      	b.n	80030be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030bc:	2302      	movs	r3, #2
  }
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d139      	bne.n	8003154 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e033      	b.n	8003156 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2224      	movs	r2, #36	; 0x24
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800311c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	021b      	lsls	r3, r3, #8
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <HAL_PWREx_EnableOverDrive+0x98>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	4a22      	ldr	r2, [pc, #136]	; (80031fc <HAL_PWREx_EnableOverDrive+0x98>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003178:	6413      	str	r3, [r2, #64]	; 0x40
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_PWREx_EnableOverDrive+0x98>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003186:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_PWREx_EnableOverDrive+0x9c>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003192:	f7fe fe8d 	bl	8001eb0 <HAL_GetTick>
 8003196:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003198:	e009      	b.n	80031ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800319a:	f7fe fe89 	bl	8001eb0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031a8:	d901      	bls.n	80031ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e022      	b.n	80031f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ba:	d1ee      	bne.n	800319a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031bc:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c8:	f7fe fe72 	bl	8001eb0 <HAL_GetTick>
 80031cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031ce:	e009      	b.n	80031e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031d0:	f7fe fe6e 	bl	8001eb0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031de:	d901      	bls.n	80031e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e007      	b.n	80031f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f0:	d1ee      	bne.n	80031d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40023800 	.word	0x40023800
 8003200:	40007000 	.word	0x40007000

08003204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800320c:	2300      	movs	r3, #0
 800320e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e29b      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8087 	beq.w	8003336 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003228:	4b96      	ldr	r3, [pc, #600]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 030c 	and.w	r3, r3, #12
 8003230:	2b04      	cmp	r3, #4
 8003232:	d00c      	beq.n	800324e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003234:	4b93      	ldr	r3, [pc, #588]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b08      	cmp	r3, #8
 800323e:	d112      	bne.n	8003266 <HAL_RCC_OscConfig+0x62>
 8003240:	4b90      	ldr	r3, [pc, #576]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324c:	d10b      	bne.n	8003266 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324e:	4b8d      	ldr	r3, [pc, #564]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d06c      	beq.n	8003334 <HAL_RCC_OscConfig+0x130>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d168      	bne.n	8003334 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e275      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x7a>
 8003270:	4b84      	ldr	r3, [pc, #528]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a83      	ldr	r2, [pc, #524]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e02e      	b.n	80032dc <HAL_RCC_OscConfig+0xd8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x9c>
 8003286:	4b7f      	ldr	r3, [pc, #508]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a7e      	ldr	r2, [pc, #504]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 800328c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b7c      	ldr	r3, [pc, #496]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a7b      	ldr	r2, [pc, #492]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e01d      	b.n	80032dc <HAL_RCC_OscConfig+0xd8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0xc0>
 80032aa:	4b76      	ldr	r3, [pc, #472]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a75      	ldr	r2, [pc, #468]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80032b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a72      	ldr	r2, [pc, #456]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0xd8>
 80032c4:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a6e      	ldr	r2, [pc, #440]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80032ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b6c      	ldr	r3, [pc, #432]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a6b      	ldr	r2, [pc, #428]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80032d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe fde4 	bl	8001eb0 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe fde0 	bl	8001eb0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e229      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b61      	ldr	r3, [pc, #388]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0xe8>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe fdd0 	bl	8001eb0 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003314:	f7fe fdcc 	bl	8001eb0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e215      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003326:	4b57      	ldr	r3, [pc, #348]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x110>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d069      	beq.n	8003416 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003342:	4b50      	ldr	r3, [pc, #320]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334e:	4b4d      	ldr	r3, [pc, #308]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b08      	cmp	r3, #8
 8003358:	d11c      	bne.n	8003394 <HAL_RCC_OscConfig+0x190>
 800335a:	4b4a      	ldr	r3, [pc, #296]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d116      	bne.n	8003394 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_RCC_OscConfig+0x17a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e1e9      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337e:	4b41      	ldr	r3, [pc, #260]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	493d      	ldr	r1, [pc, #244]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	e040      	b.n	8003416 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d023      	beq.n	80033e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339c:	4b39      	ldr	r3, [pc, #228]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a38      	ldr	r2, [pc, #224]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe fd82 	bl	8001eb0 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b0:	f7fe fd7e 	bl	8001eb0 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e1c7      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c2:	4b30      	ldr	r3, [pc, #192]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ce:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4929      	ldr	r1, [pc, #164]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]
 80033e2:	e018      	b.n	8003416 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e4:	4b27      	ldr	r3, [pc, #156]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a26      	ldr	r2, [pc, #152]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fe fd5e 	bl	8001eb0 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f8:	f7fe fd5a 	bl	8001eb0 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e1a3      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340a:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d038      	beq.n	8003494 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d019      	beq.n	800345e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 800342c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342e:	4a15      	ldr	r2, [pc, #84]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fe fd3b 	bl	8001eb0 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800343e:	f7fe fd37 	bl	8001eb0 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e180      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x23a>
 800345c:	e01a      	b.n	8003494 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003462:	4a08      	ldr	r2, [pc, #32]	; (8003484 <HAL_RCC_OscConfig+0x280>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346a:	f7fe fd21 	bl	8001eb0 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003472:	f7fe fd1d 	bl	8001eb0 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d903      	bls.n	8003488 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e166      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
 8003484:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	4b92      	ldr	r3, [pc, #584]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 800348a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1ee      	bne.n	8003472 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a4 	beq.w	80035ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a2:	4b8c      	ldr	r3, [pc, #560]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10d      	bne.n	80034ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ae:	4b89      	ldr	r3, [pc, #548]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a88      	ldr	r2, [pc, #544]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 80034b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ba:	4b86      	ldr	r3, [pc, #536]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c6:	2301      	movs	r3, #1
 80034c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ca:	4b83      	ldr	r3, [pc, #524]	; (80036d8 <HAL_RCC_OscConfig+0x4d4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d118      	bne.n	8003508 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034d6:	4b80      	ldr	r3, [pc, #512]	; (80036d8 <HAL_RCC_OscConfig+0x4d4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7f      	ldr	r2, [pc, #508]	; (80036d8 <HAL_RCC_OscConfig+0x4d4>)
 80034dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e2:	f7fe fce5 	bl	8001eb0 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ea:	f7fe fce1 	bl	8001eb0 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b64      	cmp	r3, #100	; 0x64
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e12a      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034fc:	4b76      	ldr	r3, [pc, #472]	; (80036d8 <HAL_RCC_OscConfig+0x4d4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d106      	bne.n	800351e <HAL_RCC_OscConfig+0x31a>
 8003510:	4b70      	ldr	r3, [pc, #448]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	4a6f      	ldr	r2, [pc, #444]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	; 0x70
 800351c:	e02d      	b.n	800357a <HAL_RCC_OscConfig+0x376>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0x33c>
 8003526:	4b6b      	ldr	r3, [pc, #428]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a6a      	ldr	r2, [pc, #424]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
 8003532:	4b68      	ldr	r3, [pc, #416]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a67      	ldr	r2, [pc, #412]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003538:	f023 0304 	bic.w	r3, r3, #4
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
 800353e:	e01c      	b.n	800357a <HAL_RCC_OscConfig+0x376>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b05      	cmp	r3, #5
 8003546:	d10c      	bne.n	8003562 <HAL_RCC_OscConfig+0x35e>
 8003548:	4b62      	ldr	r3, [pc, #392]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	4a61      	ldr	r2, [pc, #388]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 800354e:	f043 0304 	orr.w	r3, r3, #4
 8003552:	6713      	str	r3, [r2, #112]	; 0x70
 8003554:	4b5f      	ldr	r3, [pc, #380]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	4a5e      	ldr	r2, [pc, #376]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6713      	str	r3, [r2, #112]	; 0x70
 8003560:	e00b      	b.n	800357a <HAL_RCC_OscConfig+0x376>
 8003562:	4b5c      	ldr	r3, [pc, #368]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	4a5b      	ldr	r2, [pc, #364]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	6713      	str	r3, [r2, #112]	; 0x70
 800356e:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003574:	f023 0304 	bic.w	r3, r3, #4
 8003578:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d015      	beq.n	80035ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003582:	f7fe fc95 	bl	8001eb0 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fe fc91 	bl	8001eb0 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0d8      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	4b4c      	ldr	r3, [pc, #304]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0ee      	beq.n	800358a <HAL_RCC_OscConfig+0x386>
 80035ac:	e014      	b.n	80035d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ae:	f7fe fc7f 	bl	8001eb0 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b4:	e00a      	b.n	80035cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f7fe fc7b 	bl	8001eb0 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e0c2      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035cc:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ee      	bne.n	80035b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d105      	bne.n	80035ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035de:	4b3d      	ldr	r3, [pc, #244]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	4a3c      	ldr	r2, [pc, #240]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 80035e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80ae 	beq.w	8003750 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f4:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d06d      	beq.n	80036dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d14b      	bne.n	80036a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003608:	4b32      	ldr	r3, [pc, #200]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a31      	ldr	r2, [pc, #196]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 800360e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe fc4c 	bl	8001eb0 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361c:	f7fe fc48 	bl	8001eb0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e091      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362e:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	019b      	lsls	r3, r3, #6
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	3b01      	subs	r3, #1
 8003654:	041b      	lsls	r3, r3, #16
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	061b      	lsls	r3, r3, #24
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	071b      	lsls	r3, r3, #28
 8003666:	491b      	ldr	r1, [pc, #108]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe fc1a 	bl	8001eb0 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fe fc16 	bl	8001eb0 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e05f      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x47c>
 800369e:	e057      	b.n	8003750 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a0b      	ldr	r2, [pc, #44]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 80036a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fe fc00 	bl	8001eb0 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fe fbfc 	bl	8001eb0 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e045      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <HAL_RCC_OscConfig+0x4d0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x4b0>
 80036d2:	e03d      	b.n	8003750 <HAL_RCC_OscConfig+0x54c>
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036dc:	4b1f      	ldr	r3, [pc, #124]	; (800375c <HAL_RCC_OscConfig+0x558>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d030      	beq.n	800374c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d129      	bne.n	800374c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d122      	bne.n	800374c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800370c:	4013      	ands	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003712:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003714:	4293      	cmp	r3, r2
 8003716:	d119      	bne.n	800374c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	085b      	lsrs	r3, r3, #1
 8003724:	3b01      	subs	r3, #1
 8003726:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d10f      	bne.n	800374c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003738:	429a      	cmp	r2, r3
 800373a:	d107      	bne.n	800374c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800

08003760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0d0      	b.n	800391a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003778:	4b6a      	ldr	r3, [pc, #424]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d910      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b67      	ldr	r3, [pc, #412]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 020f 	bic.w	r2, r3, #15
 800378e:	4965      	ldr	r1, [pc, #404]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b63      	ldr	r3, [pc, #396]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0b8      	b.n	800391a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d020      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4a58      	ldr	r2, [pc, #352]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 80037c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d8:	4b53      	ldr	r3, [pc, #332]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a52      	ldr	r2, [pc, #328]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 80037de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e4:	4b50      	ldr	r3, [pc, #320]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	494d      	ldr	r1, [pc, #308]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d040      	beq.n	8003884 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	4b47      	ldr	r3, [pc, #284]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d115      	bne.n	8003842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e07f      	b.n	800391a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003822:	4b41      	ldr	r3, [pc, #260]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e073      	b.n	800391a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003832:	4b3d      	ldr	r3, [pc, #244]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e06b      	b.n	800391a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003842:	4b39      	ldr	r3, [pc, #228]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f023 0203 	bic.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4936      	ldr	r1, [pc, #216]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	4313      	orrs	r3, r2
 8003852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003854:	f7fe fb2c 	bl	8001eb0 <HAL_GetTick>
 8003858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	e00a      	b.n	8003872 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385c:	f7fe fb28 	bl	8001eb0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e053      	b.n	800391a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 020c 	and.w	r2, r3, #12
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	429a      	cmp	r2, r3
 8003882:	d1eb      	bne.n	800385c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003884:	4b27      	ldr	r3, [pc, #156]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d210      	bcs.n	80038b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 020f 	bic.w	r2, r3, #15
 800389a:	4922      	ldr	r1, [pc, #136]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b20      	ldr	r3, [pc, #128]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e032      	b.n	800391a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c0:	4b19      	ldr	r3, [pc, #100]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4916      	ldr	r1, [pc, #88]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	490e      	ldr	r1, [pc, #56]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038f2:	f000 f821 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	490a      	ldr	r1, [pc, #40]	; (800392c <HAL_RCC_ClockConfig+0x1cc>)
 8003904:	5ccb      	ldrb	r3, [r1, r3]
 8003906:	fa22 f303 	lsr.w	r3, r2, r3
 800390a:	4a09      	ldr	r2, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x1d0>)
 800390c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_RCC_ClockConfig+0x1d4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe f982 	bl	8001c1c <HAL_InitTick>

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40023c00 	.word	0x40023c00
 8003928:	40023800 	.word	0x40023800
 800392c:	0800b2a0 	.word	0x0800b2a0
 8003930:	20000018 	.word	0x20000018
 8003934:	2000001c 	.word	0x2000001c

08003938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800393c:	b094      	sub	sp, #80	; 0x50
 800393e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	647b      	str	r3, [r7, #68]	; 0x44
 8003944:	2300      	movs	r3, #0
 8003946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003948:	2300      	movs	r3, #0
 800394a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003950:	4b79      	ldr	r3, [pc, #484]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 030c 	and.w	r3, r3, #12
 8003958:	2b08      	cmp	r3, #8
 800395a:	d00d      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x40>
 800395c:	2b08      	cmp	r3, #8
 800395e:	f200 80e1 	bhi.w	8003b24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_RCC_GetSysClockFreq+0x34>
 8003966:	2b04      	cmp	r3, #4
 8003968:	d003      	beq.n	8003972 <HAL_RCC_GetSysClockFreq+0x3a>
 800396a:	e0db      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800396c:	4b73      	ldr	r3, [pc, #460]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x204>)
 800396e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003970:	e0db      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003972:	4b72      	ldr	r3, [pc, #456]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003976:	e0d8      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003978:	4b6f      	ldr	r3, [pc, #444]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x200>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003980:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003982:	4b6d      	ldr	r3, [pc, #436]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d063      	beq.n	8003a56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398e:	4b6a      	ldr	r3, [pc, #424]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	099b      	lsrs	r3, r3, #6
 8003994:	2200      	movs	r2, #0
 8003996:	63bb      	str	r3, [r7, #56]	; 0x38
 8003998:	63fa      	str	r2, [r7, #60]	; 0x3c
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a0:	633b      	str	r3, [r7, #48]	; 0x30
 80039a2:	2300      	movs	r3, #0
 80039a4:	637b      	str	r3, [r7, #52]	; 0x34
 80039a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039aa:	4622      	mov	r2, r4
 80039ac:	462b      	mov	r3, r5
 80039ae:	f04f 0000 	mov.w	r0, #0
 80039b2:	f04f 0100 	mov.w	r1, #0
 80039b6:	0159      	lsls	r1, r3, #5
 80039b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039bc:	0150      	lsls	r0, r2, #5
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4621      	mov	r1, r4
 80039c4:	1a51      	subs	r1, r2, r1
 80039c6:	6139      	str	r1, [r7, #16]
 80039c8:	4629      	mov	r1, r5
 80039ca:	eb63 0301 	sbc.w	r3, r3, r1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039dc:	4659      	mov	r1, fp
 80039de:	018b      	lsls	r3, r1, #6
 80039e0:	4651      	mov	r1, sl
 80039e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039e6:	4651      	mov	r1, sl
 80039e8:	018a      	lsls	r2, r1, #6
 80039ea:	4651      	mov	r1, sl
 80039ec:	ebb2 0801 	subs.w	r8, r2, r1
 80039f0:	4659      	mov	r1, fp
 80039f2:	eb63 0901 	sbc.w	r9, r3, r1
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a0a:	4690      	mov	r8, r2
 8003a0c:	4699      	mov	r9, r3
 8003a0e:	4623      	mov	r3, r4
 8003a10:	eb18 0303 	adds.w	r3, r8, r3
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	462b      	mov	r3, r5
 8003a18:	eb49 0303 	adc.w	r3, r9, r3
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	028b      	lsls	r3, r1, #10
 8003a2e:	4621      	mov	r1, r4
 8003a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a34:	4621      	mov	r1, r4
 8003a36:	028a      	lsls	r2, r1, #10
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3e:	2200      	movs	r2, #0
 8003a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a48:	f7fc fc52 	bl	80002f0 <__aeabi_uldivmod>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4613      	mov	r3, r2
 8003a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a54:	e058      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a56:	4b38      	ldr	r3, [pc, #224]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	099b      	lsrs	r3, r3, #6
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	4611      	mov	r1, r2
 8003a62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a66:	623b      	str	r3, [r7, #32]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a70:	4642      	mov	r2, r8
 8003a72:	464b      	mov	r3, r9
 8003a74:	f04f 0000 	mov.w	r0, #0
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	0159      	lsls	r1, r3, #5
 8003a7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a82:	0150      	lsls	r0, r2, #5
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4641      	mov	r1, r8
 8003a8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a8e:	4649      	mov	r1, r9
 8003a90:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003aa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003aa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003aa8:	ebb2 040a 	subs.w	r4, r2, sl
 8003aac:	eb63 050b 	sbc.w	r5, r3, fp
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	00eb      	lsls	r3, r5, #3
 8003aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003abe:	00e2      	lsls	r2, r4, #3
 8003ac0:	4614      	mov	r4, r2
 8003ac2:	461d      	mov	r5, r3
 8003ac4:	4643      	mov	r3, r8
 8003ac6:	18e3      	adds	r3, r4, r3
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	464b      	mov	r3, r9
 8003acc:	eb45 0303 	adc.w	r3, r5, r3
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ade:	4629      	mov	r1, r5
 8003ae0:	028b      	lsls	r3, r1, #10
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ae8:	4621      	mov	r1, r4
 8003aea:	028a      	lsls	r2, r1, #10
 8003aec:	4610      	mov	r0, r2
 8003aee:	4619      	mov	r1, r3
 8003af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af2:	2200      	movs	r2, #0
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	61fa      	str	r2, [r7, #28]
 8003af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003afc:	f7fc fbf8 	bl	80002f0 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4613      	mov	r3, r2
 8003b06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	0c1b      	lsrs	r3, r3, #16
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	3301      	adds	r3, #1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003b18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b22:	e002      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3750      	adds	r7, #80	; 0x50
 8003b30:	46bd      	mov	sp, r7
 8003b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	00f42400 	.word	0x00f42400

08003b40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000018 	.word	0x20000018

08003b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b5c:	f7ff fff0 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0a9b      	lsrs	r3, r3, #10
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4903      	ldr	r1, [pc, #12]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6e:	5ccb      	ldrb	r3, [r1, r3]
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	0800b2b0 	.word	0x0800b2b0

08003b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b84:	f7ff ffdc 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0b5b      	lsrs	r3, r3, #13
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4903      	ldr	r1, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	0800b2b0 	.word	0x0800b2b0

08003ba8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	220f      	movs	r2, #15
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0203 	and.w	r2, r3, #3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	08db      	lsrs	r3, r3, #3
 8003be2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bea:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <HAL_RCC_GetClockConfig+0x60>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 020f 	and.w	r2, r3, #15
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40023c00 	.word	0x40023c00

08003c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d012      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c34:	4b69      	ldr	r3, [pc, #420]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4a68      	ldr	r2, [pc, #416]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c3e:	6093      	str	r3, [r2, #8]
 8003c40:	4b66      	ldr	r3, [pc, #408]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	4964      	ldr	r1, [pc, #400]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d017      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c66:	4b5d      	ldr	r3, [pc, #372]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	4959      	ldr	r1, [pc, #356]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c84:	d101      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c86:	2301      	movs	r3, #1
 8003c88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d017      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ca2:	4b4e      	ldr	r3, [pc, #312]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	494a      	ldr	r1, [pc, #296]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 808b 	beq.w	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	4a39      	ldr	r2, [pc, #228]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfc:	4b37      	ldr	r3, [pc, #220]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d08:	4b35      	ldr	r3, [pc, #212]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a34      	ldr	r2, [pc, #208]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d14:	f7fe f8cc 	bl	8001eb0 <HAL_GetTick>
 8003d18:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1c:	f7fe f8c8 	bl	8001eb0 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e38f      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d2e:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d3a:	4b28      	ldr	r3, [pc, #160]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d42:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d035      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d02e      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d58:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d60:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	4a1a      	ldr	r2, [pc, #104]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d7a:	4a18      	ldr	r2, [pc, #96]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d80:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d114      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe f890 	bl	8001eb0 <HAL_GetTick>
 8003d90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d92:	e00a      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d94:	f7fe f88c 	bl	8001eb0 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e351      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003daa:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0ee      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc2:	d111      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	4901      	ldr	r1, [pc, #4]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
 8003dda:	e00b      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40007000 	.word	0x40007000
 8003de4:	0ffffcff 	.word	0x0ffffcff
 8003de8:	4bac      	ldr	r3, [pc, #688]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4aab      	ldr	r2, [pc, #684]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003df2:	6093      	str	r3, [r2, #8]
 8003df4:	4ba9      	ldr	r3, [pc, #676]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e00:	49a6      	ldr	r1, [pc, #664]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d010      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e12:	4ba2      	ldr	r3, [pc, #648]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e18:	4aa0      	ldr	r2, [pc, #640]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e22:	4b9e      	ldr	r3, [pc, #632]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	499b      	ldr	r1, [pc, #620]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e40:	4b96      	ldr	r3, [pc, #600]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e4e:	4993      	ldr	r1, [pc, #588]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e62:	4b8e      	ldr	r3, [pc, #568]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e70:	498a      	ldr	r1, [pc, #552]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e84:	4b85      	ldr	r3, [pc, #532]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e92:	4982      	ldr	r1, [pc, #520]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ea6:	4b7d      	ldr	r3, [pc, #500]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	4979      	ldr	r1, [pc, #484]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ec8:	4b74      	ldr	r3, [pc, #464]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	4971      	ldr	r1, [pc, #452]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eea:	4b6c      	ldr	r3, [pc, #432]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	f023 020c 	bic.w	r2, r3, #12
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef8:	4968      	ldr	r1, [pc, #416]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f0c:	4b63      	ldr	r3, [pc, #396]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1a:	4960      	ldr	r1, [pc, #384]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f2e:	4b5b      	ldr	r3, [pc, #364]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3c:	4957      	ldr	r1, [pc, #348]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f50:	4b52      	ldr	r3, [pc, #328]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	494f      	ldr	r1, [pc, #316]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f72:	4b4a      	ldr	r3, [pc, #296]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f80:	4946      	ldr	r1, [pc, #280]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	493e      	ldr	r1, [pc, #248]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fb6:	4b39      	ldr	r3, [pc, #228]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc4:	4935      	ldr	r1, [pc, #212]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fd8:	4b30      	ldr	r3, [pc, #192]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe6:	492d      	ldr	r1, [pc, #180]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d011      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ffa:	4b28      	ldr	r3, [pc, #160]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004008:	4924      	ldr	r1, [pc, #144]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004018:	d101      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800402a:	2301      	movs	r3, #1
 800402c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800403a:	4b18      	ldr	r3, [pc, #96]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004040:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004048:	4914      	ldr	r1, [pc, #80]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800405c:	4b0f      	ldr	r3, [pc, #60]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406c:	490b      	ldr	r1, [pc, #44]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00f      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004090:	4902      	ldr	r1, [pc, #8]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004098:	e002      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00b      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ac:	4b8a      	ldr	r3, [pc, #552]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040bc:	4986      	ldr	r1, [pc, #536]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040d0:	4b81      	ldr	r3, [pc, #516]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e0:	497d      	ldr	r1, [pc, #500]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d006      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80d6 	beq.w	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040fc:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a75      	ldr	r2, [pc, #468]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004102:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004108:	f7fd fed2 	bl	8001eb0 <HAL_GetTick>
 800410c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004110:	f7fd fece 	bl	8001eb0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e195      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004122:	4b6d      	ldr	r3, [pc, #436]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d021      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	2b00      	cmp	r3, #0
 8004140:	d11d      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004142:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004148:	0c1b      	lsrs	r3, r3, #16
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004150:	4b61      	ldr	r3, [pc, #388]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004156:	0e1b      	lsrs	r3, r3, #24
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	019a      	lsls	r2, r3, #6
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	431a      	orrs	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	071b      	lsls	r3, r3, #28
 8004176:	4958      	ldr	r1, [pc, #352]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800419c:	2b00      	cmp	r3, #0
 800419e:	d02e      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a8:	d129      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041aa:	4b4b      	ldr	r3, [pc, #300]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041b8:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041be:	0f1b      	lsrs	r3, r3, #28
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	019a      	lsls	r2, r3, #6
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	061b      	lsls	r3, r3, #24
 80041d8:	431a      	orrs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	071b      	lsls	r3, r3, #28
 80041de:	493e      	ldr	r1, [pc, #248]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041e6:	4b3c      	ldr	r3, [pc, #240]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ec:	f023 021f 	bic.w	r2, r3, #31
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	3b01      	subs	r3, #1
 80041f6:	4938      	ldr	r1, [pc, #224]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01d      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800420a:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004210:	0e1b      	lsrs	r3, r3, #24
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004218:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800421a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421e:	0f1b      	lsrs	r3, r3, #28
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	019a      	lsls	r2, r3, #6
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	431a      	orrs	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	061b      	lsls	r3, r3, #24
 8004238:	431a      	orrs	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	071b      	lsls	r3, r3, #28
 800423e:	4926      	ldr	r1, [pc, #152]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d011      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	019a      	lsls	r2, r3, #6
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	061b      	lsls	r3, r3, #24
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	071b      	lsls	r3, r3, #28
 800426e:	491a      	ldr	r1, [pc, #104]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004276:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004282:	f7fd fe15 	bl	8001eb0 <HAL_GetTick>
 8004286:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004288:	e008      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800428a:	f7fd fe11 	bl	8001eb0 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b64      	cmp	r3, #100	; 0x64
 8004296:	d901      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e0d8      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0f0      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	f040 80ce 	bne.w	800444c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042bc:	f7fd fdf8 	bl	8001eb0 <HAL_GetTick>
 80042c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042c2:	e00b      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042c4:	f7fd fdf4 	bl	8001eb0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	; 0x64
 80042d0:	d904      	bls.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e0bb      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042dc:	4b5e      	ldr	r3, [pc, #376]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e8:	d0ec      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004306:	2b00      	cmp	r3, #0
 8004308:	d02e      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d12a      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004312:	4b51      	ldr	r3, [pc, #324]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004320:	4b4d      	ldr	r3, [pc, #308]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	0f1b      	lsrs	r3, r3, #28
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	019a      	lsls	r2, r3, #6
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	061b      	lsls	r3, r3, #24
 8004340:	431a      	orrs	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	071b      	lsls	r3, r3, #28
 8004346:	4944      	ldr	r1, [pc, #272]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800434e:	4b42      	ldr	r3, [pc, #264]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004354:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	3b01      	subs	r3, #1
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	493d      	ldr	r1, [pc, #244]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d022      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800437c:	d11d      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800437e:	4b36      	ldr	r3, [pc, #216]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	0e1b      	lsrs	r3, r3, #24
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800438c:	4b32      	ldr	r3, [pc, #200]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	0f1b      	lsrs	r3, r3, #28
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	019a      	lsls	r2, r3, #6
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	431a      	orrs	r2, r3
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	061b      	lsls	r3, r3, #24
 80043ac:	431a      	orrs	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	071b      	lsls	r3, r3, #28
 80043b2:	4929      	ldr	r1, [pc, #164]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d028      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043c6:	4b24      	ldr	r3, [pc, #144]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	0e1b      	lsrs	r3, r3, #24
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043d4:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	0c1b      	lsrs	r3, r3, #16
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	019a      	lsls	r2, r3, #6
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	041b      	lsls	r3, r3, #16
 80043ec:	431a      	orrs	r2, r3
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	061b      	lsls	r3, r3, #24
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	071b      	lsls	r3, r3, #28
 80043fa:	4917      	ldr	r1, [pc, #92]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004402:	4b15      	ldr	r3, [pc, #84]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004408:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	4911      	ldr	r1, [pc, #68]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004424:	f7fd fd44 	bl	8001eb0 <HAL_GetTick>
 8004428:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800442c:	f7fd fd40 	bl	8001eb0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	; 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e007      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800444a:	d1ef      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800

0800445c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e09d      	b.n	80045aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d108      	bne.n	8004488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800447e:	d009      	beq.n	8004494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	61da      	str	r2, [r3, #28]
 8004486:	e005      	b.n	8004494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd faea 	bl	8001a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044d4:	d902      	bls.n	80044dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e002      	b.n	80044e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044ea:	d007      	beq.n	80044fc <HAL_SPI_Init+0xa0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044f4:	d002      	beq.n	80044fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453e:	ea42 0103 	orr.w	r1, r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	f003 0204 	and.w	r2, r3, #4
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004578:	ea42 0103 	orr.w	r1, r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004598:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b088      	sub	sp, #32
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	4613      	mov	r3, r2
 80045c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_SPI_Transmit+0x22>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e158      	b.n	8004886 <HAL_SPI_Transmit+0x2d4>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045dc:	f7fd fc68 	bl	8001eb0 <HAL_GetTick>
 80045e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d002      	beq.n	80045f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045f2:	2302      	movs	r3, #2
 80045f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045f6:	e13d      	b.n	8004874 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_SPI_Transmit+0x52>
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004608:	e134      	b.n	8004874 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2203      	movs	r2, #3
 800460e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	88fa      	ldrh	r2, [r7, #6]
 8004622:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004654:	d10f      	bne.n	8004676 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004664:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004674:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d007      	beq.n	8004694 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800469c:	d94b      	bls.n	8004736 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_SPI_Transmit+0xfa>
 80046a6:	8afb      	ldrh	r3, [r7, #22]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d13e      	bne.n	800472a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	881a      	ldrh	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	1c9a      	adds	r2, r3, #2
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046d0:	e02b      	b.n	800472a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d112      	bne.n	8004706 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	881a      	ldrh	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	1c9a      	adds	r2, r3, #2
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004704:	e011      	b.n	800472a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004706:	f7fd fbd3 	bl	8001eb0 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d803      	bhi.n	800471e <HAL_SPI_Transmit+0x16c>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d102      	bne.n	8004724 <HAL_SPI_Transmit+0x172>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d102      	bne.n	800472a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004728:	e0a4      	b.n	8004874 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472e:	b29b      	uxth	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1ce      	bne.n	80046d2 <HAL_SPI_Transmit+0x120>
 8004734:	e07c      	b.n	8004830 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_SPI_Transmit+0x192>
 800473e:	8afb      	ldrh	r3, [r7, #22]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d170      	bne.n	8004826 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d912      	bls.n	8004774 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	881a      	ldrh	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	1c9a      	adds	r2, r3, #2
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b02      	subs	r3, #2
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004772:	e058      	b.n	8004826 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	330c      	adds	r3, #12
 800477e:	7812      	ldrb	r2, [r2, #0]
 8004780:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800479a:	e044      	b.n	8004826 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d12b      	bne.n	8004802 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d912      	bls.n	80047da <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	881a      	ldrh	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	1c9a      	adds	r2, r3, #2
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b02      	subs	r3, #2
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047d8:	e025      	b.n	8004826 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	7812      	ldrb	r2, [r2, #0]
 80047e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004800:	e011      	b.n	8004826 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004802:	f7fd fb55 	bl	8001eb0 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d803      	bhi.n	800481a <HAL_SPI_Transmit+0x268>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d102      	bne.n	8004820 <HAL_SPI_Transmit+0x26e>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004824:	e026      	b.n	8004874 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1b5      	bne.n	800479c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	6839      	ldr	r1, [r7, #0]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fb69 	bl	8004f0c <SPI_EndRxTxTransaction>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e000      	b.n	8004874 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004872:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004884:	7ffb      	ldrb	r3, [r7, #31]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b08a      	sub	sp, #40	; 0x28
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800489c:	2301      	movs	r3, #1
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_SPI_TransmitReceive+0x26>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e1fb      	b.n	8004cac <HAL_SPI_TransmitReceive+0x41e>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048bc:	f7fd faf8 	bl	8001eb0 <HAL_GetTick>
 80048c0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048c8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80048d0:	887b      	ldrh	r3, [r7, #2]
 80048d2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80048d4:	887b      	ldrh	r3, [r7, #2]
 80048d6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048d8:	7efb      	ldrb	r3, [r7, #27]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d00e      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x6e>
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e4:	d106      	bne.n	80048f4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <HAL_SPI_TransmitReceive+0x66>
 80048ee:	7efb      	ldrb	r3, [r7, #27]
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d003      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80048f4:	2302      	movs	r3, #2
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048fa:	e1cd      	b.n	8004c98 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_SPI_TransmitReceive+0x80>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_SPI_TransmitReceive+0x80>
 8004908:	887b      	ldrh	r3, [r7, #2]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004914:	e1c0      	b.n	8004c98 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b04      	cmp	r3, #4
 8004920:	d003      	beq.n	800492a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2205      	movs	r2, #5
 8004926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	887a      	ldrh	r2, [r7, #2]
 800493a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	887a      	ldrh	r2, [r7, #2]
 8004942:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	887a      	ldrh	r2, [r7, #2]
 8004950:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	887a      	ldrh	r2, [r7, #2]
 8004956:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800496c:	d802      	bhi.n	8004974 <HAL_SPI_TransmitReceive+0xe6>
 800496e:	8a3b      	ldrh	r3, [r7, #16]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d908      	bls.n	8004986 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004982:	605a      	str	r2, [r3, #4]
 8004984:	e007      	b.n	8004996 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004994:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a0:	2b40      	cmp	r3, #64	; 0x40
 80049a2:	d007      	beq.n	80049b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049bc:	d97c      	bls.n	8004ab8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_SPI_TransmitReceive+0x13e>
 80049c6:	8a7b      	ldrh	r3, [r7, #18]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d169      	bne.n	8004aa0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	881a      	ldrh	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	1c9a      	adds	r2, r3, #2
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049f0:	e056      	b.n	8004aa0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d11b      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x1aa>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d016      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x1aa>
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d113      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	881a      	ldrh	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	1c9a      	adds	r2, r3, #2
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d11c      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x1f2>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d016      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	b292      	uxth	r2, r2
 8004a5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a80:	f7fd fa16 	bl	8001eb0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d807      	bhi.n	8004aa0 <HAL_SPI_TransmitReceive+0x212>
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	d003      	beq.n	8004aa0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a9e:	e0fb      	b.n	8004c98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1a3      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x164>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d19d      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x164>
 8004ab6:	e0df      	b.n	8004c78 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_SPI_TransmitReceive+0x23a>
 8004ac0:	8a7b      	ldrh	r3, [r7, #18]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	f040 80cb 	bne.w	8004c5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d912      	bls.n	8004af8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	881a      	ldrh	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	1c9a      	adds	r2, r3, #2
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b02      	subs	r3, #2
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004af6:	e0b2      	b.n	8004c5e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b1e:	e09e      	b.n	8004c5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d134      	bne.n	8004b98 <HAL_SPI_TransmitReceive+0x30a>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d02f      	beq.n	8004b98 <HAL_SPI_TransmitReceive+0x30a>
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d12c      	bne.n	8004b98 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d912      	bls.n	8004b6e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	881a      	ldrh	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	1c9a      	adds	r2, r3, #2
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b02      	subs	r3, #2
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b6c:	e012      	b.n	8004b94 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	330c      	adds	r3, #12
 8004b78:	7812      	ldrb	r2, [r2, #0]
 8004b7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d148      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0x3aa>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d042      	beq.n	8004c38 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d923      	bls.n	8004c06 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	b292      	uxth	r2, r2
 8004bca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	1c9a      	adds	r2, r3, #2
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b02      	subs	r3, #2
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d81f      	bhi.n	8004c34 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c02:	605a      	str	r2, [r3, #4]
 8004c04:	e016      	b.n	8004c34 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f103 020c 	add.w	r2, r3, #12
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	7812      	ldrb	r2, [r2, #0]
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c34:	2301      	movs	r3, #1
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c38:	f7fd f93a 	bl	8001eb0 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d803      	bhi.n	8004c50 <HAL_SPI_TransmitReceive+0x3c2>
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d102      	bne.n	8004c56 <HAL_SPI_TransmitReceive+0x3c8>
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c5c:	e01c      	b.n	8004c98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f47f af5b 	bne.w	8004b20 <HAL_SPI_TransmitReceive+0x292>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f47f af54 	bne.w	8004b20 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f945 	bl	8004f0c <SPI_EndRxTxTransaction>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d006      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	661a      	str	r2, [r3, #96]	; 0x60
 8004c94:	e000      	b.n	8004c98 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004c96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3728      	adds	r7, #40	; 0x28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cc2:	b2db      	uxtb	r3, r3
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ce0:	f7fd f8e6 	bl	8001eb0 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	4413      	add	r3, r2
 8004cee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cf0:	f7fd f8de 	bl	8001eb0 <HAL_GetTick>
 8004cf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cf6:	4b39      	ldr	r3, [pc, #228]	; (8004ddc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	015b      	lsls	r3, r3, #5
 8004cfc:	0d1b      	lsrs	r3, r3, #20
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	fb02 f303 	mul.w	r3, r2, r3
 8004d04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d06:	e054      	b.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d050      	beq.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d10:	f7fd f8ce 	bl	8001eb0 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d902      	bls.n	8004d26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d13d      	bne.n	8004da2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3e:	d111      	bne.n	8004d64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d48:	d004      	beq.n	8004d54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d52:	d107      	bne.n	8004d64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6c:	d10f      	bne.n	8004d8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e017      	b.n	8004dd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	bf0c      	ite	eq
 8004dc2:	2301      	moveq	r3, #1
 8004dc4:	2300      	movne	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d19b      	bne.n	8004d08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000018 	.word	0x20000018

08004de0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	; 0x28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004df2:	f7fd f85d 	bl	8001eb0 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	4413      	add	r3, r2
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e02:	f7fd f855 	bl	8001eb0 <HAL_GetTick>
 8004e06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e10:	4b3d      	ldr	r3, [pc, #244]	; (8004f08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	00da      	lsls	r2, r3, #3
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	0d1b      	lsrs	r3, r3, #20
 8004e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e28:	e060      	b.n	8004eec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e30:	d107      	bne.n	8004e42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d050      	beq.n	8004eec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e4a:	f7fd f831 	bl	8001eb0 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d902      	bls.n	8004e60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d13d      	bne.n	8004edc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e78:	d111      	bne.n	8004e9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e82:	d004      	beq.n	8004e8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d107      	bne.n	8004e9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea6:	d10f      	bne.n	8004ec8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ec6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e010      	b.n	8004efe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d196      	bne.n	8004e2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3728      	adds	r7, #40	; 0x28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000018 	.word	0x20000018

08004f0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff ff5b 	bl	8004de0 <SPI_WaitFifoStateUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e046      	b.n	8004fce <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f40:	4b25      	ldr	r3, [pc, #148]	; (8004fd8 <SPI_EndRxTxTransaction+0xcc>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a25      	ldr	r2, [pc, #148]	; (8004fdc <SPI_EndRxTxTransaction+0xd0>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	0d5b      	lsrs	r3, r3, #21
 8004f4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f50:	fb02 f303 	mul.w	r3, r2, r3
 8004f54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5e:	d112      	bne.n	8004f86 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2200      	movs	r2, #0
 8004f68:	2180      	movs	r1, #128	; 0x80
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f7ff feb0 	bl	8004cd0 <SPI_WaitFlagStateUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7a:	f043 0220 	orr.w	r2, r3, #32
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e023      	b.n	8004fce <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9c:	2b80      	cmp	r3, #128	; 0x80
 8004f9e:	d0f2      	beq.n	8004f86 <SPI_EndRxTxTransaction+0x7a>
 8004fa0:	e000      	b.n	8004fa4 <SPI_EndRxTxTransaction+0x98>
        break;
 8004fa2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff ff15 	bl	8004de0 <SPI_WaitFifoStateUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e000      	b.n	8004fce <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000018 	.word	0x20000018
 8004fdc:	165e9f81 	.word	0x165e9f81

08004fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e049      	b.n	8005086 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f841 	bl	800508e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f000 fa00 	bl	8005424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
	...

080050a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d001      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e054      	b.n	8005166 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a26      	ldr	r2, [pc, #152]	; (8005174 <HAL_TIM_Base_Start_IT+0xd0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d022      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e6:	d01d      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a22      	ldr	r2, [pc, #136]	; (8005178 <HAL_TIM_Base_Start_IT+0xd4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d018      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a21      	ldr	r2, [pc, #132]	; (800517c <HAL_TIM_Base_Start_IT+0xd8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d013      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1f      	ldr	r2, [pc, #124]	; (8005180 <HAL_TIM_Base_Start_IT+0xdc>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00e      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <HAL_TIM_Base_Start_IT+0xe0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d009      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <HAL_TIM_Base_Start_IT+0xe4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1b      	ldr	r2, [pc, #108]	; (800518c <HAL_TIM_Base_Start_IT+0xe8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d115      	bne.n	8005150 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_TIM_Base_Start_IT+0xec>)
 800512c:	4013      	ands	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b06      	cmp	r3, #6
 8005134:	d015      	beq.n	8005162 <HAL_TIM_Base_Start_IT+0xbe>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d011      	beq.n	8005162 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0201 	orr.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514e:	e008      	b.n	8005162 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e000      	b.n	8005164 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005162:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40010000 	.word	0x40010000
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800
 8005180:	40000c00 	.word	0x40000c00
 8005184:	40010400 	.word	0x40010400
 8005188:	40014000 	.word	0x40014000
 800518c:	40001800 	.word	0x40001800
 8005190:	00010007 	.word	0x00010007

08005194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d122      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d11b      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0202 	mvn.w	r2, #2
 80051c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f905 	bl	80053e6 <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f8f7 	bl	80053d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f908 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d122      	bne.n	8005244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d11b      	bne.n	8005244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0204 	mvn.w	r2, #4
 8005214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8db 	bl	80053e6 <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f8cd 	bl	80053d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f8de 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b08      	cmp	r3, #8
 8005250:	d122      	bne.n	8005298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b08      	cmp	r3, #8
 800525e:	d11b      	bne.n	8005298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0208 	mvn.w	r2, #8
 8005268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2204      	movs	r2, #4
 800526e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f8b1 	bl	80053e6 <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f8a3 	bl	80053d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f8b4 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d122      	bne.n	80052ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d11b      	bne.n	80052ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0210 	mvn.w	r2, #16
 80052bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2208      	movs	r2, #8
 80052c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f887 	bl	80053e6 <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f879 	bl	80053d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f88a 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10e      	bne.n	8005318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d107      	bne.n	8005318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0201 	mvn.w	r2, #1
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fc fb1c 	bl	8001950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d10e      	bne.n	8005344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b80      	cmp	r3, #128	; 0x80
 8005332:	d107      	bne.n	8005344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800533c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f91a 	bl	8005578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005352:	d10e      	bne.n	8005372 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535e:	2b80      	cmp	r3, #128	; 0x80
 8005360:	d107      	bne.n	8005372 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800536a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f90d 	bl	800558c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537c:	2b40      	cmp	r3, #64	; 0x40
 800537e:	d10e      	bne.n	800539e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d107      	bne.n	800539e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f838 	bl	800540e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d10e      	bne.n	80053ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d107      	bne.n	80053ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f06f 0220 	mvn.w	r2, #32
 80053c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f8cd 	bl	8005564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a40      	ldr	r2, [pc, #256]	; (8005538 <TIM_Base_SetConfig+0x114>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d013      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005442:	d00f      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3d      	ldr	r2, [pc, #244]	; (800553c <TIM_Base_SetConfig+0x118>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00b      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3c      	ldr	r2, [pc, #240]	; (8005540 <TIM_Base_SetConfig+0x11c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d007      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a3b      	ldr	r2, [pc, #236]	; (8005544 <TIM_Base_SetConfig+0x120>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a3a      	ldr	r2, [pc, #232]	; (8005548 <TIM_Base_SetConfig+0x124>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d108      	bne.n	8005476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2f      	ldr	r2, [pc, #188]	; (8005538 <TIM_Base_SetConfig+0x114>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d02b      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005484:	d027      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2c      	ldr	r2, [pc, #176]	; (800553c <TIM_Base_SetConfig+0x118>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d023      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2b      	ldr	r2, [pc, #172]	; (8005540 <TIM_Base_SetConfig+0x11c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01f      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <TIM_Base_SetConfig+0x120>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d01b      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a29      	ldr	r2, [pc, #164]	; (8005548 <TIM_Base_SetConfig+0x124>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d017      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a28      	ldr	r2, [pc, #160]	; (800554c <TIM_Base_SetConfig+0x128>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a27      	ldr	r2, [pc, #156]	; (8005550 <TIM_Base_SetConfig+0x12c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00f      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a26      	ldr	r2, [pc, #152]	; (8005554 <TIM_Base_SetConfig+0x130>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00b      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a25      	ldr	r2, [pc, #148]	; (8005558 <TIM_Base_SetConfig+0x134>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a24      	ldr	r2, [pc, #144]	; (800555c <TIM_Base_SetConfig+0x138>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a23      	ldr	r2, [pc, #140]	; (8005560 <TIM_Base_SetConfig+0x13c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d108      	bne.n	80054e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <TIM_Base_SetConfig+0x114>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d003      	beq.n	800551c <TIM_Base_SetConfig+0xf8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a0c      	ldr	r2, [pc, #48]	; (8005548 <TIM_Base_SetConfig+0x124>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d103      	bne.n	8005524 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	615a      	str	r2, [r3, #20]
}
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40010000 	.word	0x40010000
 800553c:	40000400 	.word	0x40000400
 8005540:	40000800 	.word	0x40000800
 8005544:	40000c00 	.word	0x40000c00
 8005548:	40010400 	.word	0x40010400
 800554c:	40014000 	.word	0x40014000
 8005550:	40014400 	.word	0x40014400
 8005554:	40014800 	.word	0x40014800
 8005558:	40001800 	.word	0x40001800
 800555c:	40001c00 	.word	0x40001c00
 8005560:	40002000 	.word	0x40002000

08005564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e040      	b.n	8005634 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fc fac2 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2224      	movs	r2, #36	; 0x24
 80055cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0201 	bic.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fc18 	bl	8005e14 <UART_SetConfig>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e022      	b.n	8005634 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fe70 	bl	80062dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800560a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800561a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fef7 	bl	8006420 <UART_CheckIdleState>
 8005632:	4603      	mov	r3, r0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08a      	sub	sp, #40	; 0x28
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	4613      	mov	r3, r2
 800564a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005650:	2b20      	cmp	r3, #32
 8005652:	f040 8081 	bne.w	8005758 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_UART_Transmit+0x26>
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e079      	b.n	800575a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_UART_Transmit+0x38>
 8005670:	2302      	movs	r3, #2
 8005672:	e072      	b.n	800575a <HAL_UART_Transmit+0x11e>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2221      	movs	r2, #33	; 0x21
 8005688:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800568a:	f7fc fc11 	bl	8001eb0 <HAL_GetTick>
 800568e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	88fa      	ldrh	r2, [r7, #6]
 8005694:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	d108      	bne.n	80056bc <HAL_UART_Transmit+0x80>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e003      	b.n	80056c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80056cc:	e02c      	b.n	8005728 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2180      	movs	r1, #128	; 0x80
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 feea 	bl	80064b2 <UART_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e038      	b.n	800575a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	3302      	adds	r3, #2
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	e007      	b.n	8005716 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	3301      	adds	r3, #1
 8005714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1cc      	bne.n	80056ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2200      	movs	r2, #0
 800573c:	2140      	movs	r1, #64	; 0x40
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 feb7 	bl	80064b2 <UART_WaitOnFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e005      	b.n	800575a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b08a      	sub	sp, #40	; 0x28
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	4613      	mov	r3, r2
 800576e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005774:	2b20      	cmp	r3, #32
 8005776:	d13d      	bne.n	80057f4 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_UART_Receive_IT+0x22>
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e036      	b.n	80057f6 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_UART_Receive_IT+0x34>
 8005792:	2302      	movs	r3, #2
 8005794:	e02f      	b.n	80057f6 <HAL_UART_Receive_IT+0x94>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d018      	beq.n	80057e4 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	613b      	str	r3, [r7, #16]
   return(result);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	623b      	str	r3, [r7, #32]
 80057d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	69f9      	ldr	r1, [r7, #28]
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e6      	bne.n	80057b2 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057e4:	88fb      	ldrh	r3, [r7, #6]
 80057e6:	461a      	mov	r2, r3
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 ff26 	bl	800663c <UART_Start_Receive_IT>
 80057f0:	4603      	mov	r3, r0
 80057f2:	e000      	b.n	80057f6 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3728      	adds	r7, #40	; 0x28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b0ba      	sub	sp, #232	; 0xe8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005826:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800582a:	f640 030f 	movw	r3, #2063	; 0x80f
 800582e:	4013      	ands	r3, r2
 8005830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d115      	bne.n	8005868 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800583c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00f      	beq.n	8005868 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 82a4 	beq.w	8005da6 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	4798      	blx	r3
      }
      return;
 8005866:	e29e      	b.n	8005da6 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8117 	beq.w	8005aa0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800587e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005882:	4b85      	ldr	r3, [pc, #532]	; (8005a98 <HAL_UART_IRQHandler+0x298>)
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 810a 	beq.w	8005aa0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800588c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d011      	beq.n	80058bc <HAL_UART_IRQHandler+0xbc>
 8005898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00b      	beq.n	80058bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2201      	movs	r2, #1
 80058aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b2:	f043 0201 	orr.w	r2, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d011      	beq.n	80058ec <HAL_UART_IRQHandler+0xec>
 80058c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00b      	beq.n	80058ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2202      	movs	r2, #2
 80058da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058e2:	f043 0204 	orr.w	r2, r3, #4
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d011      	beq.n	800591c <HAL_UART_IRQHandler+0x11c>
 80058f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2204      	movs	r2, #4
 800590a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005912:	f043 0202 	orr.w	r2, r3, #2
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800591c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d017      	beq.n	8005958 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	d105      	bne.n	8005940 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005938:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00b      	beq.n	8005958 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2208      	movs	r2, #8
 8005946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800594e:	f043 0208 	orr.w	r2, r3, #8
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005960:	2b00      	cmp	r3, #0
 8005962:	d012      	beq.n	800598a <HAL_UART_IRQHandler+0x18a>
 8005964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00c      	beq.n	800598a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005978:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005980:	f043 0220 	orr.w	r2, r3, #32
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 820a 	beq.w	8005daa <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00d      	beq.n	80059be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	d005      	beq.n	80059e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d04f      	beq.n	8005a82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fef4 	bl	80067d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d141      	bne.n	8005a7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3308      	adds	r3, #8
 80059fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1d9      	bne.n	80059f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d013      	beq.n	8005a72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	4a13      	ldr	r2, [pc, #76]	; (8005a9c <HAL_UART_IRQHandler+0x29c>)
 8005a50:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fc fb88 	bl	800216c <HAL_DMA_Abort_IT>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d017      	beq.n	8005a92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a70:	e00f      	b.n	8005a92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f9ae 	bl	8005dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a78:	e00b      	b.n	8005a92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f9aa 	bl	8005dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a80:	e007      	b.n	8005a92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f9a6 	bl	8005dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005a90:	e18b      	b.n	8005daa <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a92:	bf00      	nop
    return;
 8005a94:	e189      	b.n	8005daa <HAL_UART_IRQHandler+0x5aa>
 8005a96:	bf00      	nop
 8005a98:	04000120 	.word	0x04000120
 8005a9c:	08006897 	.word	0x08006897

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	f040 8144 	bne.w	8005d32 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 813d 	beq.w	8005d32 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8136 	beq.w	8005d32 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2210      	movs	r2, #16
 8005acc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	f040 80b2 	bne.w	8005c42 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005aea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 815d 	beq.w	8005dae <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005afe:	429a      	cmp	r2, r3
 8005b00:	f080 8155 	bcs.w	8005dae <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b18:	f000 8085 	beq.w	8005c26 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1da      	bne.n	8005b1c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b78:	f023 0301 	bic.w	r3, r3, #1
 8005b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3308      	adds	r3, #8
 8005b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e1      	bne.n	8005b66 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e3      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf6:	f023 0310 	bic.w	r3, r3, #16
 8005bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c08:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e4      	bne.n	8005be6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fc fa33 	bl	800208c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f8d4 	bl	8005de8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c40:	e0b5      	b.n	8005dae <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 80a7 	beq.w	8005db2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80a2 	beq.w	8005db2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c90:	647b      	str	r3, [r7, #68]	; 0x44
 8005c92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e4      	bne.n	8005c6e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	623b      	str	r3, [r7, #32]
   return(result);
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	f023 0301 	bic.w	r3, r3, #1
 8005cba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cc8:	633a      	str	r2, [r7, #48]	; 0x30
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e3      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	69b9      	ldr	r1, [r7, #24]
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e4      	bne.n	8005cee <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f85c 	bl	8005de8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d30:	e03f      	b.n	8005db2 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00e      	beq.n	8005d5c <HAL_UART_IRQHandler+0x55c>
 8005d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f853 	bl	8005e00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d5a:	e02d      	b.n	8005db8 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00e      	beq.n	8005d86 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01c      	beq.n	8005db6 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
    }
    return;
 8005d84:	e017      	b.n	8005db6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d012      	beq.n	8005db8 <HAL_UART_IRQHandler+0x5b8>
 8005d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00c      	beq.n	8005db8 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fd8f 	bl	80068c2 <UART_EndTransmit_IT>
    return;
 8005da4:	e008      	b.n	8005db8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005da6:	bf00      	nop
 8005da8:	e006      	b.n	8005db8 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005daa:	bf00      	nop
 8005dac:	e004      	b.n	8005db8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005dae:	bf00      	nop
 8005db0:	e002      	b.n	8005db8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005db2:	bf00      	nop
 8005db4:	e000      	b.n	8005db8 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005db6:	bf00      	nop
  }

}
 8005db8:	37e8      	adds	r7, #232	; 0xe8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop

08005dc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4ba6      	ldr	r3, [pc, #664]	; (80060d8 <UART_SetConfig+0x2c4>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	6979      	ldr	r1, [r7, #20]
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a94      	ldr	r2, [pc, #592]	; (80060dc <UART_SetConfig+0x2c8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d120      	bne.n	8005ed2 <UART_SetConfig+0xbe>
 8005e90:	4b93      	ldr	r3, [pc, #588]	; (80060e0 <UART_SetConfig+0x2cc>)
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d816      	bhi.n	8005ecc <UART_SetConfig+0xb8>
 8005e9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <UART_SetConfig+0x90>)
 8005ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea4:	08005eb5 	.word	0x08005eb5
 8005ea8:	08005ec1 	.word	0x08005ec1
 8005eac:	08005ebb 	.word	0x08005ebb
 8005eb0:	08005ec7 	.word	0x08005ec7
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e150      	b.n	800615c <UART_SetConfig+0x348>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	e14d      	b.n	800615c <UART_SetConfig+0x348>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e14a      	b.n	800615c <UART_SetConfig+0x348>
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	77fb      	strb	r3, [r7, #31]
 8005eca:	e147      	b.n	800615c <UART_SetConfig+0x348>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	e144      	b.n	800615c <UART_SetConfig+0x348>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a83      	ldr	r2, [pc, #524]	; (80060e4 <UART_SetConfig+0x2d0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d132      	bne.n	8005f42 <UART_SetConfig+0x12e>
 8005edc:	4b80      	ldr	r3, [pc, #512]	; (80060e0 <UART_SetConfig+0x2cc>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f003 030c 	and.w	r3, r3, #12
 8005ee6:	2b0c      	cmp	r3, #12
 8005ee8:	d828      	bhi.n	8005f3c <UART_SetConfig+0x128>
 8005eea:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0xdc>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f25 	.word	0x08005f25
 8005ef4:	08005f3d 	.word	0x08005f3d
 8005ef8:	08005f3d 	.word	0x08005f3d
 8005efc:	08005f3d 	.word	0x08005f3d
 8005f00:	08005f31 	.word	0x08005f31
 8005f04:	08005f3d 	.word	0x08005f3d
 8005f08:	08005f3d 	.word	0x08005f3d
 8005f0c:	08005f3d 	.word	0x08005f3d
 8005f10:	08005f2b 	.word	0x08005f2b
 8005f14:	08005f3d 	.word	0x08005f3d
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f3d 	.word	0x08005f3d
 8005f20:	08005f37 	.word	0x08005f37
 8005f24:	2300      	movs	r3, #0
 8005f26:	77fb      	strb	r3, [r7, #31]
 8005f28:	e118      	b.n	800615c <UART_SetConfig+0x348>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	77fb      	strb	r3, [r7, #31]
 8005f2e:	e115      	b.n	800615c <UART_SetConfig+0x348>
 8005f30:	2304      	movs	r3, #4
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e112      	b.n	800615c <UART_SetConfig+0x348>
 8005f36:	2308      	movs	r3, #8
 8005f38:	77fb      	strb	r3, [r7, #31]
 8005f3a:	e10f      	b.n	800615c <UART_SetConfig+0x348>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e10c      	b.n	800615c <UART_SetConfig+0x348>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a68      	ldr	r2, [pc, #416]	; (80060e8 <UART_SetConfig+0x2d4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d120      	bne.n	8005f8e <UART_SetConfig+0x17a>
 8005f4c:	4b64      	ldr	r3, [pc, #400]	; (80060e0 <UART_SetConfig+0x2cc>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f56:	2b30      	cmp	r3, #48	; 0x30
 8005f58:	d013      	beq.n	8005f82 <UART_SetConfig+0x16e>
 8005f5a:	2b30      	cmp	r3, #48	; 0x30
 8005f5c:	d814      	bhi.n	8005f88 <UART_SetConfig+0x174>
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	d009      	beq.n	8005f76 <UART_SetConfig+0x162>
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d810      	bhi.n	8005f88 <UART_SetConfig+0x174>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <UART_SetConfig+0x15c>
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d006      	beq.n	8005f7c <UART_SetConfig+0x168>
 8005f6e:	e00b      	b.n	8005f88 <UART_SetConfig+0x174>
 8005f70:	2300      	movs	r3, #0
 8005f72:	77fb      	strb	r3, [r7, #31]
 8005f74:	e0f2      	b.n	800615c <UART_SetConfig+0x348>
 8005f76:	2302      	movs	r3, #2
 8005f78:	77fb      	strb	r3, [r7, #31]
 8005f7a:	e0ef      	b.n	800615c <UART_SetConfig+0x348>
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	77fb      	strb	r3, [r7, #31]
 8005f80:	e0ec      	b.n	800615c <UART_SetConfig+0x348>
 8005f82:	2308      	movs	r3, #8
 8005f84:	77fb      	strb	r3, [r7, #31]
 8005f86:	e0e9      	b.n	800615c <UART_SetConfig+0x348>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	77fb      	strb	r3, [r7, #31]
 8005f8c:	e0e6      	b.n	800615c <UART_SetConfig+0x348>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a56      	ldr	r2, [pc, #344]	; (80060ec <UART_SetConfig+0x2d8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d120      	bne.n	8005fda <UART_SetConfig+0x1c6>
 8005f98:	4b51      	ldr	r3, [pc, #324]	; (80060e0 <UART_SetConfig+0x2cc>)
 8005f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8005fa4:	d013      	beq.n	8005fce <UART_SetConfig+0x1ba>
 8005fa6:	2bc0      	cmp	r3, #192	; 0xc0
 8005fa8:	d814      	bhi.n	8005fd4 <UART_SetConfig+0x1c0>
 8005faa:	2b80      	cmp	r3, #128	; 0x80
 8005fac:	d009      	beq.n	8005fc2 <UART_SetConfig+0x1ae>
 8005fae:	2b80      	cmp	r3, #128	; 0x80
 8005fb0:	d810      	bhi.n	8005fd4 <UART_SetConfig+0x1c0>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <UART_SetConfig+0x1a8>
 8005fb6:	2b40      	cmp	r3, #64	; 0x40
 8005fb8:	d006      	beq.n	8005fc8 <UART_SetConfig+0x1b4>
 8005fba:	e00b      	b.n	8005fd4 <UART_SetConfig+0x1c0>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	77fb      	strb	r3, [r7, #31]
 8005fc0:	e0cc      	b.n	800615c <UART_SetConfig+0x348>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	77fb      	strb	r3, [r7, #31]
 8005fc6:	e0c9      	b.n	800615c <UART_SetConfig+0x348>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	77fb      	strb	r3, [r7, #31]
 8005fcc:	e0c6      	b.n	800615c <UART_SetConfig+0x348>
 8005fce:	2308      	movs	r3, #8
 8005fd0:	77fb      	strb	r3, [r7, #31]
 8005fd2:	e0c3      	b.n	800615c <UART_SetConfig+0x348>
 8005fd4:	2310      	movs	r3, #16
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	e0c0      	b.n	800615c <UART_SetConfig+0x348>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a44      	ldr	r2, [pc, #272]	; (80060f0 <UART_SetConfig+0x2dc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d125      	bne.n	8006030 <UART_SetConfig+0x21c>
 8005fe4:	4b3e      	ldr	r3, [pc, #248]	; (80060e0 <UART_SetConfig+0x2cc>)
 8005fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff2:	d017      	beq.n	8006024 <UART_SetConfig+0x210>
 8005ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff8:	d817      	bhi.n	800602a <UART_SetConfig+0x216>
 8005ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ffe:	d00b      	beq.n	8006018 <UART_SetConfig+0x204>
 8006000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006004:	d811      	bhi.n	800602a <UART_SetConfig+0x216>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <UART_SetConfig+0x1fe>
 800600a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800600e:	d006      	beq.n	800601e <UART_SetConfig+0x20a>
 8006010:	e00b      	b.n	800602a <UART_SetConfig+0x216>
 8006012:	2300      	movs	r3, #0
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e0a1      	b.n	800615c <UART_SetConfig+0x348>
 8006018:	2302      	movs	r3, #2
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e09e      	b.n	800615c <UART_SetConfig+0x348>
 800601e:	2304      	movs	r3, #4
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e09b      	b.n	800615c <UART_SetConfig+0x348>
 8006024:	2308      	movs	r3, #8
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e098      	b.n	800615c <UART_SetConfig+0x348>
 800602a:	2310      	movs	r3, #16
 800602c:	77fb      	strb	r3, [r7, #31]
 800602e:	e095      	b.n	800615c <UART_SetConfig+0x348>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a2f      	ldr	r2, [pc, #188]	; (80060f4 <UART_SetConfig+0x2e0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d125      	bne.n	8006086 <UART_SetConfig+0x272>
 800603a:	4b29      	ldr	r3, [pc, #164]	; (80060e0 <UART_SetConfig+0x2cc>)
 800603c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006040:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006044:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006048:	d017      	beq.n	800607a <UART_SetConfig+0x266>
 800604a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800604e:	d817      	bhi.n	8006080 <UART_SetConfig+0x26c>
 8006050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006054:	d00b      	beq.n	800606e <UART_SetConfig+0x25a>
 8006056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800605a:	d811      	bhi.n	8006080 <UART_SetConfig+0x26c>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <UART_SetConfig+0x254>
 8006060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006064:	d006      	beq.n	8006074 <UART_SetConfig+0x260>
 8006066:	e00b      	b.n	8006080 <UART_SetConfig+0x26c>
 8006068:	2301      	movs	r3, #1
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e076      	b.n	800615c <UART_SetConfig+0x348>
 800606e:	2302      	movs	r3, #2
 8006070:	77fb      	strb	r3, [r7, #31]
 8006072:	e073      	b.n	800615c <UART_SetConfig+0x348>
 8006074:	2304      	movs	r3, #4
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e070      	b.n	800615c <UART_SetConfig+0x348>
 800607a:	2308      	movs	r3, #8
 800607c:	77fb      	strb	r3, [r7, #31]
 800607e:	e06d      	b.n	800615c <UART_SetConfig+0x348>
 8006080:	2310      	movs	r3, #16
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e06a      	b.n	800615c <UART_SetConfig+0x348>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a1b      	ldr	r2, [pc, #108]	; (80060f8 <UART_SetConfig+0x2e4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d138      	bne.n	8006102 <UART_SetConfig+0x2ee>
 8006090:	4b13      	ldr	r3, [pc, #76]	; (80060e0 <UART_SetConfig+0x2cc>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006096:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800609a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800609e:	d017      	beq.n	80060d0 <UART_SetConfig+0x2bc>
 80060a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060a4:	d82a      	bhi.n	80060fc <UART_SetConfig+0x2e8>
 80060a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060aa:	d00b      	beq.n	80060c4 <UART_SetConfig+0x2b0>
 80060ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b0:	d824      	bhi.n	80060fc <UART_SetConfig+0x2e8>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <UART_SetConfig+0x2aa>
 80060b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ba:	d006      	beq.n	80060ca <UART_SetConfig+0x2b6>
 80060bc:	e01e      	b.n	80060fc <UART_SetConfig+0x2e8>
 80060be:	2300      	movs	r3, #0
 80060c0:	77fb      	strb	r3, [r7, #31]
 80060c2:	e04b      	b.n	800615c <UART_SetConfig+0x348>
 80060c4:	2302      	movs	r3, #2
 80060c6:	77fb      	strb	r3, [r7, #31]
 80060c8:	e048      	b.n	800615c <UART_SetConfig+0x348>
 80060ca:	2304      	movs	r3, #4
 80060cc:	77fb      	strb	r3, [r7, #31]
 80060ce:	e045      	b.n	800615c <UART_SetConfig+0x348>
 80060d0:	2308      	movs	r3, #8
 80060d2:	77fb      	strb	r3, [r7, #31]
 80060d4:	e042      	b.n	800615c <UART_SetConfig+0x348>
 80060d6:	bf00      	nop
 80060d8:	efff69f3 	.word	0xefff69f3
 80060dc:	40011000 	.word	0x40011000
 80060e0:	40023800 	.word	0x40023800
 80060e4:	40004400 	.word	0x40004400
 80060e8:	40004800 	.word	0x40004800
 80060ec:	40004c00 	.word	0x40004c00
 80060f0:	40005000 	.word	0x40005000
 80060f4:	40011400 	.word	0x40011400
 80060f8:	40007800 	.word	0x40007800
 80060fc:	2310      	movs	r3, #16
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e02c      	b.n	800615c <UART_SetConfig+0x348>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a72      	ldr	r2, [pc, #456]	; (80062d0 <UART_SetConfig+0x4bc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d125      	bne.n	8006158 <UART_SetConfig+0x344>
 800610c:	4b71      	ldr	r3, [pc, #452]	; (80062d4 <UART_SetConfig+0x4c0>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006116:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800611a:	d017      	beq.n	800614c <UART_SetConfig+0x338>
 800611c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006120:	d817      	bhi.n	8006152 <UART_SetConfig+0x33e>
 8006122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006126:	d00b      	beq.n	8006140 <UART_SetConfig+0x32c>
 8006128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800612c:	d811      	bhi.n	8006152 <UART_SetConfig+0x33e>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <UART_SetConfig+0x326>
 8006132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006136:	d006      	beq.n	8006146 <UART_SetConfig+0x332>
 8006138:	e00b      	b.n	8006152 <UART_SetConfig+0x33e>
 800613a:	2300      	movs	r3, #0
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e00d      	b.n	800615c <UART_SetConfig+0x348>
 8006140:	2302      	movs	r3, #2
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e00a      	b.n	800615c <UART_SetConfig+0x348>
 8006146:	2304      	movs	r3, #4
 8006148:	77fb      	strb	r3, [r7, #31]
 800614a:	e007      	b.n	800615c <UART_SetConfig+0x348>
 800614c:	2308      	movs	r3, #8
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e004      	b.n	800615c <UART_SetConfig+0x348>
 8006152:	2310      	movs	r3, #16
 8006154:	77fb      	strb	r3, [r7, #31]
 8006156:	e001      	b.n	800615c <UART_SetConfig+0x348>
 8006158:	2310      	movs	r3, #16
 800615a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006164:	d15b      	bne.n	800621e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006166:	7ffb      	ldrb	r3, [r7, #31]
 8006168:	2b08      	cmp	r3, #8
 800616a:	d828      	bhi.n	80061be <UART_SetConfig+0x3aa>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <UART_SetConfig+0x360>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	08006199 	.word	0x08006199
 8006178:	080061a1 	.word	0x080061a1
 800617c:	080061a9 	.word	0x080061a9
 8006180:	080061bf 	.word	0x080061bf
 8006184:	080061af 	.word	0x080061af
 8006188:	080061bf 	.word	0x080061bf
 800618c:	080061bf 	.word	0x080061bf
 8006190:	080061bf 	.word	0x080061bf
 8006194:	080061b7 	.word	0x080061b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006198:	f7fd fcde 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 800619c:	61b8      	str	r0, [r7, #24]
        break;
 800619e:	e013      	b.n	80061c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a0:	f7fd fcee 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 80061a4:	61b8      	str	r0, [r7, #24]
        break;
 80061a6:	e00f      	b.n	80061c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a8:	4b4b      	ldr	r3, [pc, #300]	; (80062d8 <UART_SetConfig+0x4c4>)
 80061aa:	61bb      	str	r3, [r7, #24]
        break;
 80061ac:	e00c      	b.n	80061c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ae:	f7fd fbc3 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 80061b2:	61b8      	str	r0, [r7, #24]
        break;
 80061b4:	e008      	b.n	80061c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ba:	61bb      	str	r3, [r7, #24]
        break;
 80061bc:	e004      	b.n	80061c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	77bb      	strb	r3, [r7, #30]
        break;
 80061c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d074      	beq.n	80062b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	005a      	lsls	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	441a      	add	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b0f      	cmp	r3, #15
 80061e8:	d916      	bls.n	8006218 <UART_SetConfig+0x404>
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f0:	d212      	bcs.n	8006218 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f023 030f 	bic.w	r3, r3, #15
 80061fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	b29b      	uxth	r3, r3
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	b29a      	uxth	r2, r3
 8006208:	89fb      	ldrh	r3, [r7, #14]
 800620a:	4313      	orrs	r3, r2
 800620c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	89fa      	ldrh	r2, [r7, #14]
 8006214:	60da      	str	r2, [r3, #12]
 8006216:	e04f      	b.n	80062b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	77bb      	strb	r3, [r7, #30]
 800621c:	e04c      	b.n	80062b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800621e:	7ffb      	ldrb	r3, [r7, #31]
 8006220:	2b08      	cmp	r3, #8
 8006222:	d828      	bhi.n	8006276 <UART_SetConfig+0x462>
 8006224:	a201      	add	r2, pc, #4	; (adr r2, 800622c <UART_SetConfig+0x418>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	08006251 	.word	0x08006251
 8006230:	08006259 	.word	0x08006259
 8006234:	08006261 	.word	0x08006261
 8006238:	08006277 	.word	0x08006277
 800623c:	08006267 	.word	0x08006267
 8006240:	08006277 	.word	0x08006277
 8006244:	08006277 	.word	0x08006277
 8006248:	08006277 	.word	0x08006277
 800624c:	0800626f 	.word	0x0800626f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006250:	f7fd fc82 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8006254:	61b8      	str	r0, [r7, #24]
        break;
 8006256:	e013      	b.n	8006280 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006258:	f7fd fc92 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 800625c:	61b8      	str	r0, [r7, #24]
        break;
 800625e:	e00f      	b.n	8006280 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006260:	4b1d      	ldr	r3, [pc, #116]	; (80062d8 <UART_SetConfig+0x4c4>)
 8006262:	61bb      	str	r3, [r7, #24]
        break;
 8006264:	e00c      	b.n	8006280 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006266:	f7fd fb67 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 800626a:	61b8      	str	r0, [r7, #24]
        break;
 800626c:	e008      	b.n	8006280 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006272:	61bb      	str	r3, [r7, #24]
        break;
 8006274:	e004      	b.n	8006280 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	77bb      	strb	r3, [r7, #30]
        break;
 800627e:	bf00      	nop
    }

    if (pclk != 0U)
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d018      	beq.n	80062b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	085a      	lsrs	r2, r3, #1
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	441a      	add	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	fbb2 f3f3 	udiv	r3, r2, r3
 8006298:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b0f      	cmp	r3, #15
 800629e:	d909      	bls.n	80062b4 <UART_SetConfig+0x4a0>
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a6:	d205      	bcs.n	80062b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60da      	str	r2, [r3, #12]
 80062b2:	e001      	b.n	80062b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80062c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3720      	adds	r7, #32
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	40007c00 	.word	0x40007c00
 80062d4:	40023800 	.word	0x40023800
 80062d8:	00f42400 	.word	0x00f42400

080062dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01a      	beq.n	80063f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063da:	d10a      	bne.n	80063f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	605a      	str	r2, [r3, #4]
  }
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af02      	add	r7, sp, #8
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006430:	f7fb fd3e 	bl	8001eb0 <HAL_GetTick>
 8006434:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b08      	cmp	r3, #8
 8006442:	d10e      	bne.n	8006462 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f82d 	bl	80064b2 <UART_WaitOnFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e023      	b.n	80064aa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b04      	cmp	r3, #4
 800646e:	d10e      	bne.n	800648e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f817 	bl	80064b2 <UART_WaitOnFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e00d      	b.n	80064aa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2220      	movs	r2, #32
 8006498:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b09c      	sub	sp, #112	; 0x70
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	603b      	str	r3, [r7, #0]
 80064be:	4613      	mov	r3, r2
 80064c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c2:	e0a5      	b.n	8006610 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	f000 80a1 	beq.w	8006610 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ce:	f7fb fcef 	bl	8001eb0 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80064da:	429a      	cmp	r2, r3
 80064dc:	d302      	bcc.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80064de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d13e      	bne.n	8006562 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064f8:	667b      	str	r3, [r7, #100]	; 0x64
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006504:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006508:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e6      	bne.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3308      	adds	r3, #8
 800651c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	f023 0301 	bic.w	r3, r3, #1
 800652c:	663b      	str	r3, [r7, #96]	; 0x60
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3308      	adds	r3, #8
 8006534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006536:	64ba      	str	r2, [r7, #72]	; 0x48
 8006538:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800653c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e5      	bne.n	8006516 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e067      	b.n	8006632 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d04f      	beq.n	8006610 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800657a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800657e:	d147      	bne.n	8006610 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006588:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800659e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a8:	637b      	str	r3, [r7, #52]	; 0x34
 80065aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e6      	bne.n	800658a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3308      	adds	r3, #8
 80065c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	613b      	str	r3, [r7, #16]
   return(result);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f023 0301 	bic.w	r3, r3, #1
 80065d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3308      	adds	r3, #8
 80065da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065dc:	623a      	str	r2, [r7, #32]
 80065de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	69f9      	ldr	r1, [r7, #28]
 80065e2:	6a3a      	ldr	r2, [r7, #32]
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e5      	bne.n	80065bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e010      	b.n	8006632 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69da      	ldr	r2, [r3, #28]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	4013      	ands	r3, r2
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	429a      	cmp	r2, r3
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	429a      	cmp	r2, r3
 800662c:	f43f af4a 	beq.w	80064c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3770      	adds	r7, #112	; 0x70
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800663c:	b480      	push	{r7}
 800663e:	b097      	sub	sp, #92	; 0x5c
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	88fa      	ldrh	r2, [r7, #6]
 8006654:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	88fa      	ldrh	r2, [r7, #6]
 800665c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666e:	d10e      	bne.n	800668e <UART_Start_Receive_IT+0x52>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <UART_Start_Receive_IT+0x48>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800667e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006682:	e02d      	b.n	80066e0 <UART_Start_Receive_IT+0xa4>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	22ff      	movs	r2, #255	; 0xff
 8006688:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800668c:	e028      	b.n	80066e0 <UART_Start_Receive_IT+0xa4>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10d      	bne.n	80066b2 <UART_Start_Receive_IT+0x76>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <UART_Start_Receive_IT+0x6c>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	22ff      	movs	r2, #255	; 0xff
 80066a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066a6:	e01b      	b.n	80066e0 <UART_Start_Receive_IT+0xa4>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	227f      	movs	r2, #127	; 0x7f
 80066ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066b0:	e016      	b.n	80066e0 <UART_Start_Receive_IT+0xa4>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ba:	d10d      	bne.n	80066d8 <UART_Start_Receive_IT+0x9c>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <UART_Start_Receive_IT+0x92>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	227f      	movs	r2, #127	; 0x7f
 80066c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066cc:	e008      	b.n	80066e0 <UART_Start_Receive_IT+0xa4>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	223f      	movs	r2, #63	; 0x3f
 80066d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066d6:	e003      	b.n	80066e0 <UART_Start_Receive_IT+0xa4>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2222      	movs	r2, #34	; 0x22
 80066ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3308      	adds	r3, #8
 80066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	657b      	str	r3, [r7, #84]	; 0x54
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800670e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006710:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800671c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e5      	bne.n	80066ee <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672a:	d107      	bne.n	800673c <UART_Start_Receive_IT+0x100>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d103      	bne.n	800673c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4a24      	ldr	r2, [pc, #144]	; (80067c8 <UART_Start_Receive_IT+0x18c>)
 8006738:	665a      	str	r2, [r3, #100]	; 0x64
 800673a:	e002      	b.n	8006742 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4a23      	ldr	r2, [pc, #140]	; (80067cc <UART_Start_Receive_IT+0x190>)
 8006740:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d019      	beq.n	8006786 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
 8006772:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800677e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e6      	bne.n	8006752 <UART_Start_Receive_IT+0x116>
 8006784:	e018      	b.n	80067b8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	613b      	str	r3, [r7, #16]
   return(result);
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f043 0320 	orr.w	r3, r3, #32
 800679a:	653b      	str	r3, [r7, #80]	; 0x50
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	461a      	mov	r2, r3
 80067a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a4:	623b      	str	r3, [r7, #32]
 80067a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	69f9      	ldr	r1, [r7, #28]
 80067aa:	6a3a      	ldr	r2, [r7, #32]
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e6      	bne.n	8006786 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	375c      	adds	r7, #92	; 0x5c
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	08006a73 	.word	0x08006a73
 80067cc:	08006917 	.word	0x08006917

080067d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b095      	sub	sp, #84	; 0x54
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f6:	643b      	str	r3, [r7, #64]	; 0x40
 80067f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e6      	bne.n	80067d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	61fb      	str	r3, [r7, #28]
   return(result);
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	64bb      	str	r3, [r7, #72]	; 0x48
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800682a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800682c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006842:	2b01      	cmp	r3, #1
 8006844:	d118      	bne.n	8006878 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	60bb      	str	r3, [r7, #8]
   return(result);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f023 0310 	bic.w	r3, r3, #16
 800685a:	647b      	str	r3, [r7, #68]	; 0x44
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6979      	ldr	r1, [r7, #20]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	613b      	str	r3, [r7, #16]
   return(result);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e6      	bne.n	8006846 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2220      	movs	r2, #32
 800687c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	665a      	str	r2, [r3, #100]	; 0x64
}
 800688a:	bf00      	nop
 800688c:	3754      	adds	r7, #84	; 0x54
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff fa8d 	bl	8005dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b088      	sub	sp, #32
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6979      	ldr	r1, [r7, #20]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	613b      	str	r3, [r7, #16]
   return(result);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e6      	bne.n	80068ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff fa59 	bl	8005dc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800690e:	bf00      	nop
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b096      	sub	sp, #88	; 0x58
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006924:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800692c:	2b22      	cmp	r3, #34	; 0x22
 800692e:	f040 8094 	bne.w	8006a5a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800693c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006940:	b2d9      	uxtb	r1, r3
 8006942:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006946:	b2da      	uxtb	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694c:	400a      	ands	r2, r1
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006962:	b29b      	uxth	r3, r3
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d177      	bne.n	8006a6a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800698e:	653b      	str	r3, [r7, #80]	; 0x50
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006998:	647b      	str	r3, [r7, #68]	; 0x44
 800699a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800699e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e6      	bne.n	800697a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3308      	adds	r3, #8
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	623b      	str	r3, [r7, #32]
   return(result);
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	f023 0301 	bic.w	r3, r3, #1
 80069c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3308      	adds	r3, #8
 80069ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069cc:	633a      	str	r2, [r7, #48]	; 0x30
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e5      	bne.n	80069ac <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d12e      	bne.n	8006a52 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0310 	bic.w	r3, r3, #16
 8006a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	69b9      	ldr	r1, [r7, #24]
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	617b      	str	r3, [r7, #20]
   return(result);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e6      	bne.n	80069fa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	f003 0310 	and.w	r3, r3, #16
 8006a36:	2b10      	cmp	r3, #16
 8006a38:	d103      	bne.n	8006a42 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2210      	movs	r2, #16
 8006a40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff f9cc 	bl	8005de8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a50:	e00b      	b.n	8006a6a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fa ff28 	bl	80018a8 <HAL_UART_RxCpltCallback>
}
 8006a58:	e007      	b.n	8006a6a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0208 	orr.w	r2, r2, #8
 8006a68:	619a      	str	r2, [r3, #24]
}
 8006a6a:	bf00      	nop
 8006a6c:	3758      	adds	r7, #88	; 0x58
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b096      	sub	sp, #88	; 0x58
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a88:	2b22      	cmp	r3, #34	; 0x22
 8006a8a:	f040 8094 	bne.w	8006bb6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a9e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006aa2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	1c9a      	adds	r2, r3, #2
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d177      	bne.n	8006bc6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af4:	643b      	str	r3, [r7, #64]	; 0x40
 8006af6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006afa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e6      	bne.n	8006ad6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3308      	adds	r3, #8
 8006b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e5      	bne.n	8006b08 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d12e      	bne.n	8006bae <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f023 0310 	bic.w	r3, r3, #16
 8006b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	6979      	ldr	r1, [r7, #20]
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	613b      	str	r3, [r7, #16]
   return(result);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e6      	bne.n	8006b56 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	2b10      	cmp	r3, #16
 8006b94:	d103      	bne.n	8006b9e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2210      	movs	r2, #16
 8006b9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff f91e 	bl	8005de8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bac:	e00b      	b.n	8006bc6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fa fe7a 	bl	80018a8 <HAL_UART_RxCpltCallback>
}
 8006bb4:	e007      	b.n	8006bc6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699a      	ldr	r2, [r3, #24]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f042 0208 	orr.w	r2, r2, #8
 8006bc4:	619a      	str	r2, [r3, #24]
}
 8006bc6:	bf00      	nop
 8006bc8:	3758      	adds	r7, #88	; 0x58
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006bd4:	4904      	ldr	r1, [pc, #16]	; (8006be8 <MX_FATFS_Init+0x18>)
 8006bd6:	4805      	ldr	r0, [pc, #20]	; (8006bec <MX_FATFS_Init+0x1c>)
 8006bd8:	f000 f8ae 	bl	8006d38 <FATFS_LinkDriver>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	461a      	mov	r2, r3
 8006be0:	4b03      	ldr	r3, [pc, #12]	; (8006bf0 <MX_FATFS_Init+0x20>)
 8006be2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006be4:	bf00      	nop
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	200002dc 	.word	0x200002dc
 8006bec:	20000024 	.word	0x20000024
 8006bf0:	200002d8 	.word	0x200002d8

08006bf4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f003 f9ad 	bl	8009f60 <SD_disk_initialize>
 8006c06:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f003 fa89 	bl	800a134 <SD_disk_status>
 8006c22:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006c3c:	7bf8      	ldrb	r0, [r7, #15]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	68b9      	ldr	r1, [r7, #8]
 8006c44:	f003 fa8c 	bl	800a160 <SD_disk_read>
 8006c48:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006c62:	7bf8      	ldrb	r0, [r7, #15]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	f003 fae3 	bl	800a234 <SD_disk_write>
 8006c6e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	603a      	str	r2, [r7, #0]
 8006c82:	71fb      	strb	r3, [r7, #7]
 8006c84:	460b      	mov	r3, r1
 8006c86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 8006c88:	79b9      	ldrb	r1, [r7, #6]
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f003 fb54 	bl	800a33c <SD_disk_ioctl>
 8006c94:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006cb6:	4b1f      	ldr	r3, [pc, #124]	; (8006d34 <FATFS_LinkDriverEx+0x94>)
 8006cb8:	7a5b      	ldrb	r3, [r3, #9]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d131      	bne.n	8006d24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006cc0:	4b1c      	ldr	r3, [pc, #112]	; (8006d34 <FATFS_LinkDriverEx+0x94>)
 8006cc2:	7a5b      	ldrb	r3, [r3, #9]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	4b1a      	ldr	r3, [pc, #104]	; (8006d34 <FATFS_LinkDriverEx+0x94>)
 8006cca:	2100      	movs	r1, #0
 8006ccc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006cce:	4b19      	ldr	r3, [pc, #100]	; (8006d34 <FATFS_LinkDriverEx+0x94>)
 8006cd0:	7a5b      	ldrb	r3, [r3, #9]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <FATFS_LinkDriverEx+0x94>)
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006cde:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <FATFS_LinkDriverEx+0x94>)
 8006ce0:	7a5b      	ldrb	r3, [r3, #9]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4b13      	ldr	r3, [pc, #76]	; (8006d34 <FATFS_LinkDriverEx+0x94>)
 8006ce8:	4413      	add	r3, r2
 8006cea:	79fa      	ldrb	r2, [r7, #7]
 8006cec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006cee:	4b11      	ldr	r3, [pc, #68]	; (8006d34 <FATFS_LinkDriverEx+0x94>)
 8006cf0:	7a5b      	ldrb	r3, [r3, #9]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	b2d1      	uxtb	r1, r2
 8006cf8:	4a0e      	ldr	r2, [pc, #56]	; (8006d34 <FATFS_LinkDriverEx+0x94>)
 8006cfa:	7251      	strb	r1, [r2, #9]
 8006cfc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006cfe:	7dbb      	ldrb	r3, [r7, #22]
 8006d00:	3330      	adds	r3, #48	; 0x30
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	223a      	movs	r2, #58	; 0x3a
 8006d0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	3302      	adds	r3, #2
 8006d14:	222f      	movs	r2, #47	; 0x2f
 8006d16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	3303      	adds	r3, #3
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	371c      	adds	r7, #28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	200002e0 	.word	0x200002e0

08006d38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006d42:	2200      	movs	r2, #0
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff ffaa 	bl	8006ca0 <FATFS_LinkDriverEx>
 8006d4c:	4603      	mov	r3, r0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f103 0208 	add.w	r2, r3, #8
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f103 0208 	add.w	r2, r3, #8
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f103 0208 	add.w	r2, r3, #8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689a      	ldr	r2, [r3, #8]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	601a      	str	r2, [r3, #0]
}
 8006dec:	bf00      	nop
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0e:	d103      	bne.n	8006e18 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	e00c      	b.n	8006e32 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	60fb      	str	r3, [r7, #12]
 8006e1e:	e002      	b.n	8006e26 <vListInsert+0x2e>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d2f6      	bcs.n	8006e20 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	601a      	str	r2, [r3, #0]
}
 8006e5e:	bf00      	nop
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6892      	ldr	r2, [r2, #8]
 8006e80:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6852      	ldr	r2, [r2, #4]
 8006e8a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d103      	bne.n	8006e9e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	1e5a      	subs	r2, r3, #1
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
	...

08006ec0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d104      	bne.n	8006ede <xQueueGenericReset+0x1e>
 8006ed4:	492a      	ldr	r1, [pc, #168]	; (8006f80 <xQueueGenericReset+0xc0>)
 8006ed6:	f240 100d 	movw	r0, #269	; 0x10d
 8006eda:	f7fa fcd1 	bl	8001880 <vAssertCalled>

    taskENTER_CRITICAL();
 8006ede:	f002 fa53 	bl	8009388 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006eee:	fb01 f303 	mul.w	r3, r1, r3
 8006ef2:	441a      	add	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	68f9      	ldr	r1, [r7, #12]
 8006f12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f14:	fb01 f303 	mul.w	r3, r1, r3
 8006f18:	441a      	add	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	22ff      	movs	r2, #255	; 0xff
 8006f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	22ff      	movs	r2, #255	; 0xff
 8006f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d114      	bne.n	8006f5e <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d01a      	beq.n	8006f72 <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3310      	adds	r3, #16
 8006f40:	4618      	mov	r0, r3
 8006f42:	f001 f8d5 	bl	80080f0 <xTaskRemoveFromEventList>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d012      	beq.n	8006f72 <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8006f4c:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <xQueueGenericReset+0xc4>)
 8006f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	e009      	b.n	8006f72 <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3310      	adds	r3, #16
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff fef7 	bl	8006d56 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3324      	adds	r3, #36	; 0x24
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7ff fef2 	bl	8006d56 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8006f72:	f002 fa35 	bl	80093e0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8006f76:	2301      	movs	r3, #1
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	0800b178 	.word	0x0800b178
 8006f84:	e000ed04 	.word	0xe000ed04

08006f88 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08a      	sub	sp, #40	; 0x28
 8006f8c:	af02      	add	r7, sp, #8
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <xQueueGenericCreate+0x1e>
 8006f9c:	4921      	ldr	r1, [pc, #132]	; (8007024 <xQueueGenericCreate+0x9c>)
 8006f9e:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8006fa2:	f7fa fc6d 	bl	8001880 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	fb02 f303 	mul.w	r3, r2, r3
 8006fae:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d006      	beq.n	8006fc4 <xQueueGenericCreate+0x3c>
 8006fb6:	69fa      	ldr	r2, [r7, #28]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d101      	bne.n	8006fc8 <xQueueGenericCreate+0x40>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e000      	b.n	8006fca <xQueueGenericCreate+0x42>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d104      	bne.n	8006fd8 <xQueueGenericCreate+0x50>
 8006fce:	4915      	ldr	r1, [pc, #84]	; (8007024 <xQueueGenericCreate+0x9c>)
 8006fd0:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 8006fd4:	f7fa fc54 	bl	8001880 <vAssertCalled>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8006fde:	d904      	bls.n	8006fea <xQueueGenericCreate+0x62>
 8006fe0:	4910      	ldr	r1, [pc, #64]	; (8007024 <xQueueGenericCreate+0x9c>)
 8006fe2:	f240 1091 	movw	r0, #401	; 0x191
 8006fe6:	f7fa fc4b 	bl	8001880 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	3350      	adds	r3, #80	; 0x50
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f002 fada 	bl	80095a8 <pvPortMalloc>
 8006ff4:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00d      	beq.n	8007018 <xQueueGenericCreate+0x90>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	3350      	adds	r3, #80	; 0x50
 8007004:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007006:	79fa      	ldrb	r2, [r7, #7]
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 f808 	bl	8007028 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007018:	69bb      	ldr	r3, [r7, #24]
    }
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	0800b178 	.word	0x0800b178

08007028 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	e002      	b.n	800704a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007056:	2101      	movs	r1, #1
 8007058:	69b8      	ldr	r0, [r7, #24]
 800705a:	f7ff ff31 	bl	8006ec0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	78fa      	ldrb	r2, [r7, #3]
 8007062:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	; 0x28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800707e:	2300      	movs	r3, #0
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d104      	bne.n	8007096 <xQueueGenericSend+0x26>
 800708c:	496a      	ldr	r1, [pc, #424]	; (8007238 <xQueueGenericSend+0x1c8>)
 800708e:	f44f 7043 	mov.w	r0, #780	; 0x30c
 8007092:	f7fa fbf5 	bl	8001880 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d103      	bne.n	80070a4 <xQueueGenericSend+0x34>
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <xQueueGenericSend+0x38>
 80070a4:	2301      	movs	r3, #1
 80070a6:	e000      	b.n	80070aa <xQueueGenericSend+0x3a>
 80070a8:	2300      	movs	r3, #0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <xQueueGenericSend+0x48>
 80070ae:	4962      	ldr	r1, [pc, #392]	; (8007238 <xQueueGenericSend+0x1c8>)
 80070b0:	f240 300d 	movw	r0, #781	; 0x30d
 80070b4:	f7fa fbe4 	bl	8001880 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d103      	bne.n	80070c6 <xQueueGenericSend+0x56>
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d101      	bne.n	80070ca <xQueueGenericSend+0x5a>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <xQueueGenericSend+0x5c>
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <xQueueGenericSend+0x6a>
 80070d0:	4959      	ldr	r1, [pc, #356]	; (8007238 <xQueueGenericSend+0x1c8>)
 80070d2:	f240 300e 	movw	r0, #782	; 0x30e
 80070d6:	f7fa fbd3 	bl	8001880 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070da:	f001 f997 	bl	800840c <xTaskGetSchedulerState>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <xQueueGenericSend+0x7a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <xQueueGenericSend+0x7e>
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <xQueueGenericSend+0x80>
 80070ee:	2300      	movs	r3, #0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <xQueueGenericSend+0x8e>
 80070f4:	4950      	ldr	r1, [pc, #320]	; (8007238 <xQueueGenericSend+0x1c8>)
 80070f6:	f240 3011 	movw	r0, #785	; 0x311
 80070fa:	f7fa fbc1 	bl	8001880 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80070fe:	f002 f943 	bl	8009388 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710a:	429a      	cmp	r2, r3
 800710c:	d302      	bcc.n	8007114 <xQueueGenericSend+0xa4>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d129      	bne.n	8007168 <xQueueGenericSend+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	6a38      	ldr	r0, [r7, #32]
 800711a:	f000 fa91 	bl	8007640 <prvCopyDataToQueue>
 800711e:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	2b00      	cmp	r3, #0
 8007126:	d010      	beq.n	800714a <xQueueGenericSend+0xda>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	3324      	adds	r3, #36	; 0x24
 800712c:	4618      	mov	r0, r3
 800712e:	f000 ffdf 	bl	80080f0 <xTaskRemoveFromEventList>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d013      	beq.n	8007160 <xQueueGenericSend+0xf0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8007138:	4b40      	ldr	r3, [pc, #256]	; (800723c <xQueueGenericSend+0x1cc>)
 800713a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	e00a      	b.n	8007160 <xQueueGenericSend+0xf0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d007      	beq.n	8007160 <xQueueGenericSend+0xf0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8007150:	4b3a      	ldr	r3, [pc, #232]	; (800723c <xQueueGenericSend+0x1cc>)
 8007152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8007160:	f002 f93e 	bl	80093e0 <vPortExitCritical>
                return pdPASS;
 8007164:	2301      	movs	r3, #1
 8007166:	e063      	b.n	8007230 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d103      	bne.n	8007176 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800716e:	f002 f937 	bl	80093e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8007172:	2300      	movs	r3, #0
 8007174:	e05c      	b.n	8007230 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	d106      	bne.n	800718a <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800717c:	f107 0314 	add.w	r3, r7, #20
 8007180:	4618      	mov	r0, r3
 8007182:	f001 f813 	bl	80081ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007186:	2301      	movs	r3, #1
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800718a:	f002 f929 	bl	80093e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800718e:	f000 fda7 	bl	8007ce0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007192:	f002 f8f9 	bl	8009388 <vPortEnterCritical>
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800719c:	b25b      	sxtb	r3, r3
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a2:	d103      	bne.n	80071ac <xQueueGenericSend+0x13c>
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071b2:	b25b      	sxtb	r3, r3
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b8:	d103      	bne.n	80071c2 <xQueueGenericSend+0x152>
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071c2:	f002 f90d 	bl	80093e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071c6:	1d3a      	adds	r2, r7, #4
 80071c8:	f107 0314 	add.w	r3, r7, #20
 80071cc:	4611      	mov	r1, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f001 f802 	bl	80081d8 <xTaskCheckForTimeOut>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d124      	bne.n	8007224 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071da:	6a38      	ldr	r0, [r7, #32]
 80071dc:	f000 fb28 	bl	8007830 <prvIsQueueFull>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d018      	beq.n	8007218 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	3310      	adds	r3, #16
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	4611      	mov	r1, r2
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 ff36 	bl	8008060 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80071f4:	6a38      	ldr	r0, [r7, #32]
 80071f6:	f000 fab3 	bl	8007760 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80071fa:	f000 fd7f 	bl	8007cfc <xTaskResumeAll>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	f47f af7c 	bne.w	80070fe <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8007206:	4b0d      	ldr	r3, [pc, #52]	; (800723c <xQueueGenericSend+0x1cc>)
 8007208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	e772      	b.n	80070fe <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8007218:	6a38      	ldr	r0, [r7, #32]
 800721a:	f000 faa1 	bl	8007760 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800721e:	f000 fd6d 	bl	8007cfc <xTaskResumeAll>
 8007222:	e76c      	b.n	80070fe <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8007224:	6a38      	ldr	r0, [r7, #32]
 8007226:	f000 fa9b 	bl	8007760 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800722a:	f000 fd67 	bl	8007cfc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800722e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8007230:	4618      	mov	r0, r3
 8007232:	3728      	adds	r7, #40	; 0x28
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	0800b178 	.word	0x0800b178
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08c      	sub	sp, #48	; 0x30
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8007252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <xQueueGenericSendFromISR+0x22>
 8007258:	4943      	ldr	r1, [pc, #268]	; (8007368 <xQueueGenericSendFromISR+0x128>)
 800725a:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 800725e:	f7fa fb0f 	bl	8001880 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <xQueueGenericSendFromISR+0x30>
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <xQueueGenericSendFromISR+0x34>
 8007270:	2301      	movs	r3, #1
 8007272:	e000      	b.n	8007276 <xQueueGenericSendFromISR+0x36>
 8007274:	2300      	movs	r3, #0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d104      	bne.n	8007284 <xQueueGenericSendFromISR+0x44>
 800727a:	493b      	ldr	r1, [pc, #236]	; (8007368 <xQueueGenericSendFromISR+0x128>)
 800727c:	f240 30e1 	movw	r0, #993	; 0x3e1
 8007280:	f7fa fafe 	bl	8001880 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b02      	cmp	r3, #2
 8007288:	d103      	bne.n	8007292 <xQueueGenericSendFromISR+0x52>
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728e:	2b01      	cmp	r3, #1
 8007290:	d101      	bne.n	8007296 <xQueueGenericSendFromISR+0x56>
 8007292:	2301      	movs	r3, #1
 8007294:	e000      	b.n	8007298 <xQueueGenericSendFromISR+0x58>
 8007296:	2300      	movs	r3, #0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <xQueueGenericSendFromISR+0x66>
 800729c:	4932      	ldr	r1, [pc, #200]	; (8007368 <xQueueGenericSendFromISR+0x128>)
 800729e:	f240 30e2 	movw	r0, #994	; 0x3e2
 80072a2:	f7fa faed 	bl	8001880 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072a6:	f002 f94b 	bl	8009540 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80072aa:	f3ef 8211 	mrs	r2, BASEPRI
 80072ae:	f04f 0340 	mov.w	r3, #64	; 0x40
 80072b2:	b672      	cpsid	i
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	b662      	cpsie	i
 80072c2:	61ba      	str	r2, [r7, #24]
 80072c4:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80072c6:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d302      	bcc.n	80072dc <xQueueGenericSendFromISR+0x9c>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d138      	bne.n	800734e <xQueueGenericSendFromISR+0x10e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f2:	f000 f9a5 	bl	8007640 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80072f6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d112      	bne.n	8007326 <xQueueGenericSendFromISR+0xe6>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01f      	beq.n	8007348 <xQueueGenericSendFromISR+0x108>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	4618      	mov	r0, r3
 800730e:	f000 feef 	bl	80080f0 <xTaskRemoveFromEventList>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d017      	beq.n	8007348 <xQueueGenericSendFromISR+0x108>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d014      	beq.n	8007348 <xQueueGenericSendFromISR+0x108>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	e010      	b.n	8007348 <xQueueGenericSendFromISR+0x108>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8007326:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800732a:	2b7f      	cmp	r3, #127	; 0x7f
 800732c:	d104      	bne.n	8007338 <xQueueGenericSendFromISR+0xf8>
 800732e:	490e      	ldr	r1, [pc, #56]	; (8007368 <xQueueGenericSendFromISR+0x128>)
 8007330:	f240 406b 	movw	r0, #1131	; 0x46b
 8007334:	f7fa faa4 	bl	8001880 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800733c:	3301      	adds	r3, #1
 800733e:	b2db      	uxtb	r3, r3
 8007340:	b25a      	sxtb	r2, r3
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8007348:	2301      	movs	r3, #1
 800734a:	62fb      	str	r3, [r7, #44]	; 0x2c
        {
 800734c:	e001      	b.n	8007352 <xQueueGenericSendFromISR+0x112>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800734e:	2300      	movs	r3, #0
 8007350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800735c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007360:	4618      	mov	r0, r3
 8007362:	3730      	adds	r7, #48	; 0x30
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	0800b178 	.word	0x0800b178

0800736c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	; 0x28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8007378:	2300      	movs	r3, #0
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d104      	bne.n	8007390 <xQueueReceive+0x24>
 8007386:	495f      	ldr	r1, [pc, #380]	; (8007504 <xQueueReceive+0x198>)
 8007388:	f240 502f 	movw	r0, #1327	; 0x52f
 800738c:	f7fa fa78 	bl	8001880 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d103      	bne.n	800739e <xQueueReceive+0x32>
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <xQueueReceive+0x36>
 800739e:	2301      	movs	r3, #1
 80073a0:	e000      	b.n	80073a4 <xQueueReceive+0x38>
 80073a2:	2300      	movs	r3, #0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <xQueueReceive+0x46>
 80073a8:	4956      	ldr	r1, [pc, #344]	; (8007504 <xQueueReceive+0x198>)
 80073aa:	f240 5033 	movw	r0, #1331	; 0x533
 80073ae:	f7fa fa67 	bl	8001880 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073b2:	f001 f82b 	bl	800840c <xTaskGetSchedulerState>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d102      	bne.n	80073c2 <xQueueReceive+0x56>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <xQueueReceive+0x5a>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <xQueueReceive+0x5c>
 80073c6:	2300      	movs	r3, #0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <xQueueReceive+0x6a>
 80073cc:	494d      	ldr	r1, [pc, #308]	; (8007504 <xQueueReceive+0x198>)
 80073ce:	f44f 60a7 	mov.w	r0, #1336	; 0x538
 80073d2:	f7fa fa55 	bl	8001880 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80073d6:	f001 ffd7 	bl	8009388 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d01f      	beq.n	8007426 <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	6a38      	ldr	r0, [r7, #32]
 80073ea:	f000 f993 	bl	8007714 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	1e5a      	subs	r2, r3, #1
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00f      	beq.n	800741e <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	3310      	adds	r3, #16
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fe74 	bl	80080f0 <xTaskRemoveFromEventList>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800740e:	4b3e      	ldr	r3, [pc, #248]	; (8007508 <xQueueReceive+0x19c>)
 8007410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800741e:	f001 ffdf 	bl	80093e0 <vPortExitCritical>
                return pdPASS;
 8007422:	2301      	movs	r3, #1
 8007424:	e069      	b.n	80074fa <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800742c:	f001 ffd8 	bl	80093e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8007430:	2300      	movs	r3, #0
 8007432:	e062      	b.n	80074fa <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800743a:	f107 0314 	add.w	r3, r7, #20
 800743e:	4618      	mov	r0, r3
 8007440:	f000 feb4 	bl	80081ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007444:	2301      	movs	r3, #1
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007448:	f001 ffca 	bl	80093e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800744c:	f000 fc48 	bl	8007ce0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007450:	f001 ff9a 	bl	8009388 <vPortEnterCritical>
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800745a:	b25b      	sxtb	r3, r3
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d103      	bne.n	800746a <xQueueReceive+0xfe>
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007470:	b25b      	sxtb	r3, r3
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d103      	bne.n	8007480 <xQueueReceive+0x114>
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007480:	f001 ffae 	bl	80093e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007484:	1d3a      	adds	r2, r7, #4
 8007486:	f107 0314 	add.w	r3, r7, #20
 800748a:	4611      	mov	r1, r2
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fea3 	bl	80081d8 <xTaskCheckForTimeOut>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d123      	bne.n	80074e0 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007498:	6a38      	ldr	r0, [r7, #32]
 800749a:	f000 f9b3 	bl	8007804 <prvIsQueueEmpty>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d017      	beq.n	80074d4 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	3324      	adds	r3, #36	; 0x24
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	4611      	mov	r1, r2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fdd7 	bl	8008060 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80074b2:	6a38      	ldr	r0, [r7, #32]
 80074b4:	f000 f954 	bl	8007760 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80074b8:	f000 fc20 	bl	8007cfc <xTaskResumeAll>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d189      	bne.n	80073d6 <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 80074c2:	4b11      	ldr	r3, [pc, #68]	; (8007508 <xQueueReceive+0x19c>)
 80074c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	e780      	b.n	80073d6 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80074d4:	6a38      	ldr	r0, [r7, #32]
 80074d6:	f000 f943 	bl	8007760 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80074da:	f000 fc0f 	bl	8007cfc <xTaskResumeAll>
 80074de:	e77a      	b.n	80073d6 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80074e0:	6a38      	ldr	r0, [r7, #32]
 80074e2:	f000 f93d 	bl	8007760 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80074e6:	f000 fc09 	bl	8007cfc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074ea:	6a38      	ldr	r0, [r7, #32]
 80074ec:	f000 f98a 	bl	8007804 <prvIsQueueEmpty>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f43f af6f 	beq.w	80073d6 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80074f8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3728      	adds	r7, #40	; 0x28
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	0800b178 	.word	0x0800b178
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08c      	sub	sp, #48	; 0x30
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	2b00      	cmp	r3, #0
 8007520:	d104      	bne.n	800752c <xQueueReceiveFromISR+0x20>
 8007522:	4939      	ldr	r1, [pc, #228]	; (8007608 <xQueueReceiveFromISR+0xfc>)
 8007524:	f240 702f 	movw	r0, #1839	; 0x72f
 8007528:	f7fa f9aa 	bl	8001880 <vAssertCalled>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d103      	bne.n	800753a <xQueueReceiveFromISR+0x2e>
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <xQueueReceiveFromISR+0x32>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <xQueueReceiveFromISR+0x34>
 800753e:	2300      	movs	r3, #0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d104      	bne.n	800754e <xQueueReceiveFromISR+0x42>
 8007544:	4930      	ldr	r1, [pc, #192]	; (8007608 <xQueueReceiveFromISR+0xfc>)
 8007546:	f44f 60e6 	mov.w	r0, #1840	; 0x730
 800754a:	f7fa f999 	bl	8001880 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800754e:	f001 fff7 	bl	8009540 <vPortValidateInterruptPriority>
        __asm volatile
 8007552:	f3ef 8211 	mrs	r2, BASEPRI
 8007556:	f04f 0340 	mov.w	r3, #64	; 0x40
 800755a:	b672      	cpsid	i
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	b662      	cpsie	i
 800756a:	61ba      	str	r2, [r7, #24]
 800756c:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 800756e:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007576:	623b      	str	r3, [r7, #32]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d036      	beq.n	80075ec <xQueueReceiveFromISR+0xe0>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007584:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800758a:	f000 f8c3 	bl	8007714 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	1e5a      	subs	r2, r3, #1
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8007596:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759e:	d112      	bne.n	80075c6 <xQueueReceiveFromISR+0xba>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01e      	beq.n	80075e6 <xQueueReceiveFromISR+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	3310      	adds	r3, #16
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fd9f 	bl	80080f0 <xTaskRemoveFromEventList>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d016      	beq.n	80075e6 <xQueueReceiveFromISR+0xda>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d013      	beq.n	80075e6 <xQueueReceiveFromISR+0xda>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	e00f      	b.n	80075e6 <xQueueReceiveFromISR+0xda>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80075c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80075ca:	2b7f      	cmp	r3, #127	; 0x7f
 80075cc:	d104      	bne.n	80075d8 <xQueueReceiveFromISR+0xcc>
 80075ce:	490e      	ldr	r1, [pc, #56]	; (8007608 <xQueueReceiveFromISR+0xfc>)
 80075d0:	f240 7073 	movw	r0, #1907	; 0x773
 80075d4:	f7fa f954 	bl	8001880 <vAssertCalled>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80075d8:	7ffb      	ldrb	r3, [r7, #31]
 80075da:	3301      	adds	r3, #1
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	b25a      	sxtb	r2, r3
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80075e6:	2301      	movs	r3, #1
 80075e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ea:	e001      	b.n	80075f0 <xQueueReceiveFromISR+0xe4>
        }
        else
        {
            xReturn = pdFAIL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	613b      	str	r3, [r7, #16]
        __asm volatile
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f383 8811 	msr	BASEPRI, r3
    }
 80075fa:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3730      	adds	r7, #48	; 0x30
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	0800b178 	.word	0x0800b178

0800760c <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d104      	bne.n	8007624 <uxQueueMessagesWaiting+0x18>
 800761a:	4908      	ldr	r1, [pc, #32]	; (800763c <uxQueueMessagesWaiting+0x30>)
 800761c:	f240 70c1 	movw	r0, #1985	; 0x7c1
 8007620:	f7fa f92e 	bl	8001880 <vAssertCalled>

    taskENTER_CRITICAL();
 8007624:	f001 feb0 	bl	8009388 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800762e:	f001 fed7 	bl	80093e0 <vPortExitCritical>

    return uxReturn;
 8007632:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	0800b178 	.word	0x0800b178

08007640 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800764c:	2300      	movs	r3, #0
 800764e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007654:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10d      	bne.n	800767a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d14d      	bne.n	8007702 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 feec 	bl	8008448 <xTaskPriorityDisinherit>
 8007670:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	609a      	str	r2, [r3, #8]
 8007678:	e043      	b.n	8007702 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d119      	bne.n	80076b4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6858      	ldr	r0, [r3, #4]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007688:	461a      	mov	r2, r3
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	f002 ffb2 	bl	800a5f4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	441a      	add	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d32b      	bcc.n	8007702 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	605a      	str	r2, [r3, #4]
 80076b2:	e026      	b.n	8007702 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	68d8      	ldr	r0, [r3, #12]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076bc:	461a      	mov	r2, r3
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	f002 ff98 	bl	800a5f4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	425b      	negs	r3, r3
 80076ce:	441a      	add	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d207      	bcs.n	80076f0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e8:	425b      	negs	r3, r3
 80076ea:	441a      	add	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d105      	bne.n	8007702 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	3b01      	subs	r3, #1
 8007700:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800770a:	697b      	ldr	r3, [r7, #20]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	d018      	beq.n	8007758 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	441a      	add	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	429a      	cmp	r2, r3
 800773e:	d303      	bcc.n	8007748 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68d9      	ldr	r1, [r3, #12]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	461a      	mov	r2, r3
 8007752:	6838      	ldr	r0, [r7, #0]
 8007754:	f002 ff4e 	bl	800a5f4 <memcpy>
    }
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007768:	f001 fe0e 	bl	8009388 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007772:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007774:	e011      	b.n	800779a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	2b00      	cmp	r3, #0
 800777c:	d012      	beq.n	80077a4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3324      	adds	r3, #36	; 0x24
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fcb4 	bl	80080f0 <xTaskRemoveFromEventList>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800778e:	f000 fd7f 	bl	8008290 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	3b01      	subs	r3, #1
 8007796:	b2db      	uxtb	r3, r3
 8007798:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800779a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dce9      	bgt.n	8007776 <prvUnlockQueue+0x16>
 80077a2:	e000      	b.n	80077a6 <prvUnlockQueue+0x46>
                        break;
 80077a4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	22ff      	movs	r2, #255	; 0xff
 80077aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80077ae:	f001 fe17 	bl	80093e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80077b2:	f001 fde9 	bl	8009388 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077bc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80077be:	e011      	b.n	80077e4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d012      	beq.n	80077ee <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3310      	adds	r3, #16
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fc8f 	bl	80080f0 <xTaskRemoveFromEventList>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80077d8:	f000 fd5a 	bl	8008290 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	3b01      	subs	r3, #1
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80077e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	dce9      	bgt.n	80077c0 <prvUnlockQueue+0x60>
 80077ec:	e000      	b.n	80077f0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80077ee:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	22ff      	movs	r2, #255	; 0xff
 80077f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80077f8:	f001 fdf2 	bl	80093e0 <vPortExitCritical>
}
 80077fc:	bf00      	nop
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800780c:	f001 fdbc 	bl	8009388 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8007818:	2301      	movs	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	e001      	b.n	8007822 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800781e:	2300      	movs	r3, #0
 8007820:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007822:	f001 fddd 	bl	80093e0 <vPortExitCritical>

    return xReturn;
 8007826:	68fb      	ldr	r3, [r7, #12]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007838:	f001 fda6 	bl	8009388 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007844:	429a      	cmp	r2, r3
 8007846:	d102      	bne.n	800784e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8007848:	2301      	movs	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e001      	b.n	8007852 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007852:	f001 fdc5 	bl	80093e0 <vPortExitCritical>

    return xReturn;
 8007856:	68fb      	ldr	r3, [r7, #12]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d104      	bne.n	800787c <xQueueIsQueueFullFromISR+0x1c>
 8007872:	490a      	ldr	r1, [pc, #40]	; (800789c <xQueueIsQueueFullFromISR+0x3c>)
 8007874:	f640 1071 	movw	r0, #2417	; 0x971
 8007878:	f7fa f802 	bl	8001880 <vAssertCalled>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007884:	429a      	cmp	r2, r3
 8007886:	d102      	bne.n	800788e <xQueueIsQueueFullFromISR+0x2e>
    {
        xReturn = pdTRUE;
 8007888:	2301      	movs	r3, #1
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	e001      	b.n	8007892 <xQueueIsQueueFullFromISR+0x32>
    }
    else
    {
        xReturn = pdFALSE;
 800788e:	2300      	movs	r3, #0
 8007890:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8007892:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	0800b178 	.word	0x0800b178

080078a0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	e014      	b.n	80078da <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078b0:	4a0f      	ldr	r2, [pc, #60]	; (80078f0 <vQueueAddToRegistry+0x50>)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10b      	bne.n	80078d4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078bc:	490c      	ldr	r1, [pc, #48]	; (80078f0 <vQueueAddToRegistry+0x50>)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80078c6:	4a0a      	ldr	r2, [pc, #40]	; (80078f0 <vQueueAddToRegistry+0x50>)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	00db      	lsls	r3, r3, #3
 80078cc:	4413      	add	r3, r2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80078d2:	e006      	b.n	80078e2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3301      	adds	r3, #1
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b07      	cmp	r3, #7
 80078de:	d9e7      	bls.n	80078b0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	200002ec 	.word	0x200002ec

080078f4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007904:	f001 fd40 	bl	8009388 <vPortEnterCritical>
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800790e:	b25b      	sxtb	r3, r3
 8007910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007914:	d103      	bne.n	800791e <vQueueWaitForMessageRestricted+0x2a>
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007924:	b25b      	sxtb	r3, r3
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792a:	d103      	bne.n	8007934 <vQueueWaitForMessageRestricted+0x40>
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007934:	f001 fd54 	bl	80093e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	2b00      	cmp	r3, #0
 800793e:	d106      	bne.n	800794e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	3324      	adds	r3, #36	; 0x24
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	68b9      	ldr	r1, [r7, #8]
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fba9 	bl	80080a0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800794e:	6978      	ldr	r0, [r7, #20]
 8007950:	f7ff ff06 	bl	8007760 <prvUnlockQueue>
    }
 8007954:	bf00      	nop
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800795c:	b580      	push	{r7, lr}
 800795e:	b08c      	sub	sp, #48	; 0x30
 8007960:	af04      	add	r7, sp, #16
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	603b      	str	r3, [r7, #0]
 8007968:	4613      	mov	r3, r2
 800796a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800796c:	88fb      	ldrh	r3, [r7, #6]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4618      	mov	r0, r3
 8007972:	f001 fe19 	bl	80095a8 <pvPortMalloc>
 8007976:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00e      	beq.n	800799c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800797e:	2058      	movs	r0, #88	; 0x58
 8007980:	f001 fe12 	bl	80095a8 <pvPortMalloc>
 8007984:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	631a      	str	r2, [r3, #48]	; 0x30
 8007992:	e005      	b.n	80079a0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8007994:	6978      	ldr	r0, [r7, #20]
 8007996:	f001 fed5 	bl	8009744 <vPortFree>
 800799a:	e001      	b.n	80079a0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800799c:	2300      	movs	r3, #0
 800799e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d013      	beq.n	80079ce <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	2300      	movs	r3, #0
 80079aa:	9303      	str	r3, [sp, #12]
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	9302      	str	r3, [sp, #8]
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f80f 	bl	80079e0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80079c2:	69f8      	ldr	r0, [r7, #28]
 80079c4:	f000 f89e 	bl	8007b04 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80079c8:	2301      	movs	r3, #1
 80079ca:	61bb      	str	r3, [r7, #24]
 80079cc:	e002      	b.n	80079d4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079ce:	f04f 33ff 	mov.w	r3, #4294967295
 80079d2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80079d4:	69bb      	ldr	r3, [r7, #24]
    }
 80079d6:	4618      	mov	r0, r3
 80079d8:	3720      	adds	r7, #32
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	461a      	mov	r2, r3
 80079f8:	21a5      	movs	r1, #165	; 0xa5
 80079fa:	f002 fe09 	bl	800a610 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a02:	6879      	ldr	r1, [r7, #4]
 8007a04:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007a08:	440b      	add	r3, r1
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f023 0307 	bic.w	r3, r3, #7
 8007a16:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d004      	beq.n	8007a2c <prvInitialiseNewTask+0x4c>
 8007a22:	4937      	ldr	r1, [pc, #220]	; (8007b00 <prvInitialiseNewTask+0x120>)
 8007a24:	f240 3069 	movw	r0, #873	; 0x369
 8007a28:	f7f9 ff2a 	bl	8001880 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01f      	beq.n	8007a72 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	e012      	b.n	8007a5e <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	7819      	ldrb	r1, [r3, #0]
 8007a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	4413      	add	r3, r2
 8007a46:	3334      	adds	r3, #52	; 0x34
 8007a48:	460a      	mov	r2, r1
 8007a4a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	4413      	add	r3, r2
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d006      	beq.n	8007a66 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b09      	cmp	r3, #9
 8007a62:	d9e9      	bls.n	8007a38 <prvInitialiseNewTask+0x58>
 8007a64:	e000      	b.n	8007a68 <prvInitialiseNewTask+0x88>
            {
                break;
 8007a66:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a70:	e003      	b.n	8007a7a <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d901      	bls.n	8007a84 <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a80:	2304      	movs	r3, #4
 8007a82:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a86:	6a3a      	ldr	r2, [r7, #32]
 8007a88:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	6a3a      	ldr	r2, [r7, #32]
 8007a8e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	2200      	movs	r2, #0
 8007a94:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	3304      	adds	r3, #4
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff f97b 	bl	8006d96 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	3318      	adds	r3, #24
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff f976 	bl	8006d96 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	f1c3 0205 	rsb	r2, r3, #5
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007abe:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	3350      	adds	r3, #80	; 0x50
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f002 fda1 	bl	800a610 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8007ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad0:	3354      	adds	r3, #84	; 0x54
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f002 fd9a 	bl	800a610 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	68f9      	ldr	r1, [r7, #12]
 8007ae0:	6938      	ldr	r0, [r7, #16]
 8007ae2:	f001 fb45 	bl	8009170 <pxPortInitialiseStack>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aea:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007af6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007af8:	bf00      	nop
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	0800b198 	.word	0x0800b198

08007b04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007b0c:	f001 fc3c 	bl	8009388 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007b10:	4b2c      	ldr	r3, [pc, #176]	; (8007bc4 <prvAddNewTaskToReadyList+0xc0>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3301      	adds	r3, #1
 8007b16:	4a2b      	ldr	r2, [pc, #172]	; (8007bc4 <prvAddNewTaskToReadyList+0xc0>)
 8007b18:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007b1a:	4b2b      	ldr	r3, [pc, #172]	; (8007bc8 <prvAddNewTaskToReadyList+0xc4>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007b22:	4a29      	ldr	r2, [pc, #164]	; (8007bc8 <prvAddNewTaskToReadyList+0xc4>)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b28:	4b26      	ldr	r3, [pc, #152]	; (8007bc4 <prvAddNewTaskToReadyList+0xc0>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d110      	bne.n	8007b52 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007b30:	f000 fbd2 	bl	80082d8 <prvInitialiseTaskLists>
 8007b34:	e00d      	b.n	8007b52 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007b36:	4b25      	ldr	r3, [pc, #148]	; (8007bcc <prvAddNewTaskToReadyList+0xc8>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d109      	bne.n	8007b52 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b3e:	4b22      	ldr	r3, [pc, #136]	; (8007bc8 <prvAddNewTaskToReadyList+0xc4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d802      	bhi.n	8007b52 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007b4c:	4a1e      	ldr	r2, [pc, #120]	; (8007bc8 <prvAddNewTaskToReadyList+0xc4>)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007b52:	4b1f      	ldr	r3, [pc, #124]	; (8007bd0 <prvAddNewTaskToReadyList+0xcc>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3301      	adds	r3, #1
 8007b58:	4a1d      	ldr	r2, [pc, #116]	; (8007bd0 <prvAddNewTaskToReadyList+0xcc>)
 8007b5a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b5c:	4b1c      	ldr	r3, [pc, #112]	; (8007bd0 <prvAddNewTaskToReadyList+0xcc>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	2201      	movs	r2, #1
 8007b6a:	409a      	lsls	r2, r3
 8007b6c:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <prvAddNewTaskToReadyList+0xd0>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	4a18      	ldr	r2, [pc, #96]	; (8007bd4 <prvAddNewTaskToReadyList+0xd0>)
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4a15      	ldr	r2, [pc, #84]	; (8007bd8 <prvAddNewTaskToReadyList+0xd4>)
 8007b84:	441a      	add	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	f7ff f90f 	bl	8006db0 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007b92:	f001 fc25 	bl	80093e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007b96:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <prvAddNewTaskToReadyList+0xc8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00e      	beq.n	8007bbc <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b9e:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <prvAddNewTaskToReadyList+0xc4>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d207      	bcs.n	8007bbc <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007bac:	4b0b      	ldr	r3, [pc, #44]	; (8007bdc <prvAddNewTaskToReadyList+0xd8>)
 8007bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20000404 	.word	0x20000404
 8007bc8:	2000032c 	.word	0x2000032c
 8007bcc:	20000410 	.word	0x20000410
 8007bd0:	20000420 	.word	0x20000420
 8007bd4:	2000040c 	.word	0x2000040c
 8007bd8:	20000330 	.word	0x20000330
 8007bdc:	e000ed04 	.word	0xe000ed04

08007be0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8007be8:	2300      	movs	r3, #0
 8007bea:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d011      	beq.n	8007c16 <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8007bf2:	4b10      	ldr	r3, [pc, #64]	; (8007c34 <vTaskDelay+0x54>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d004      	beq.n	8007c04 <vTaskDelay+0x24>
 8007bfa:	490f      	ldr	r1, [pc, #60]	; (8007c38 <vTaskDelay+0x58>)
 8007bfc:	f240 504a 	movw	r0, #1354	; 0x54a
 8007c00:	f7f9 fe3e 	bl	8001880 <vAssertCalled>
            vTaskSuspendAll();
 8007c04:	f000 f86c 	bl	8007ce0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c08:	2100      	movs	r1, #0
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fec2 	bl	8008994 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8007c10:	f000 f874 	bl	8007cfc <xTaskResumeAll>
 8007c14:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d107      	bne.n	8007c2c <vTaskDelay+0x4c>
        {
            portYIELD_WITHIN_API();
 8007c1c:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <vTaskDelay+0x5c>)
 8007c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	2000042c 	.word	0x2000042c
 8007c38:	0800b198 	.word	0x0800b198
 8007c3c:	e000ed04 	.word	0xe000ed04

08007c40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8007c46:	4b1e      	ldr	r3, [pc, #120]	; (8007cc0 <vTaskStartScheduler+0x80>)
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2282      	movs	r2, #130	; 0x82
 8007c52:	491c      	ldr	r1, [pc, #112]	; (8007cc4 <vTaskStartScheduler+0x84>)
 8007c54:	481c      	ldr	r0, [pc, #112]	; (8007cc8 <vTaskStartScheduler+0x88>)
 8007c56:	f7ff fe81 	bl	800795c <xTaskCreate>
 8007c5a:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d102      	bne.n	8007c68 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8007c62:	f000 fefd 	bl	8008a60 <xTimerCreateTimerTask>
 8007c66:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d118      	bne.n	8007ca0 <vTaskStartScheduler+0x60>
        __asm volatile
 8007c6e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007c72:	b672      	cpsid	i
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	b662      	cpsie	i
 8007c82:	603b      	str	r3, [r7, #0]
    }
 8007c84:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8007c86:	4b11      	ldr	r3, [pc, #68]	; (8007ccc <vTaskStartScheduler+0x8c>)
 8007c88:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007c8e:	4b10      	ldr	r3, [pc, #64]	; (8007cd0 <vTaskStartScheduler+0x90>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c94:	4b0f      	ldr	r3, [pc, #60]	; (8007cd4 <vTaskStartScheduler+0x94>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8007c9a:	f001 faf3 	bl	8009284 <xPortStartScheduler>
 8007c9e:	e008      	b.n	8007cb2 <vTaskStartScheduler+0x72>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca6:	d104      	bne.n	8007cb2 <vTaskStartScheduler+0x72>
 8007ca8:	490b      	ldr	r1, [pc, #44]	; (8007cd8 <vTaskStartScheduler+0x98>)
 8007caa:	f640 0041 	movw	r0, #2113	; 0x841
 8007cae:	f7f9 fde7 	bl	8001880 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007cb2:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <vTaskStartScheduler+0x9c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
}
 8007cb6:	bf00      	nop
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000428 	.word	0x20000428
 8007cc4:	0800b1b8 	.word	0x0800b1b8
 8007cc8:	080082a9 	.word	0x080082a9
 8007ccc:	20000424 	.word	0x20000424
 8007cd0:	20000410 	.word	0x20000410
 8007cd4:	20000408 	.word	0x20000408
 8007cd8:	0800b198 	.word	0x0800b198
 8007cdc:	20000038 	.word	0x20000038

08007ce0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007ce4:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <vTaskSuspendAll+0x18>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	4a03      	ldr	r2, [pc, #12]	; (8007cf8 <vTaskSuspendAll+0x18>)
 8007cec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007cee:	bf00      	nop
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	2000042c 	.word	0x2000042c

08007cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007d02:	2300      	movs	r3, #0
 8007d04:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007d06:	2300      	movs	r3, #0
 8007d08:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8007d0a:	4b3e      	ldr	r3, [pc, #248]	; (8007e04 <xTaskResumeAll+0x108>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d104      	bne.n	8007d1c <xTaskResumeAll+0x20>
 8007d12:	493d      	ldr	r1, [pc, #244]	; (8007e08 <xTaskResumeAll+0x10c>)
 8007d14:	f640 00b4 	movw	r0, #2228	; 0x8b4
 8007d18:	f7f9 fdb2 	bl	8001880 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007d1c:	f001 fb34 	bl	8009388 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007d20:	4b38      	ldr	r3, [pc, #224]	; (8007e04 <xTaskResumeAll+0x108>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	4a37      	ldr	r2, [pc, #220]	; (8007e04 <xTaskResumeAll+0x108>)
 8007d28:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d2a:	4b36      	ldr	r3, [pc, #216]	; (8007e04 <xTaskResumeAll+0x108>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d161      	bne.n	8007df6 <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d32:	4b36      	ldr	r3, [pc, #216]	; (8007e0c <xTaskResumeAll+0x110>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d05d      	beq.n	8007df6 <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d3a:	e02e      	b.n	8007d9a <xTaskResumeAll+0x9e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d3c:	4b34      	ldr	r3, [pc, #208]	; (8007e10 <xTaskResumeAll+0x114>)
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	3318      	adds	r3, #24
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff f88e 	bl	8006e6a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff f889 	bl	8006e6a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	409a      	lsls	r2, r3
 8007d60:	4b2c      	ldr	r3, [pc, #176]	; (8007e14 <xTaskResumeAll+0x118>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	4a2b      	ldr	r2, [pc, #172]	; (8007e14 <xTaskResumeAll+0x118>)
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6e:	4613      	mov	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4a28      	ldr	r2, [pc, #160]	; (8007e18 <xTaskResumeAll+0x11c>)
 8007d78:	441a      	add	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4619      	mov	r1, r3
 8007d80:	4610      	mov	r0, r2
 8007d82:	f7ff f815 	bl	8006db0 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8a:	4b24      	ldr	r3, [pc, #144]	; (8007e1c <xTaskResumeAll+0x120>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d302      	bcc.n	8007d9a <xTaskResumeAll+0x9e>
                    {
                        xYieldPending = pdTRUE;
 8007d94:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <xTaskResumeAll+0x124>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d9a:	4b1d      	ldr	r3, [pc, #116]	; (8007e10 <xTaskResumeAll+0x114>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1cc      	bne.n	8007d3c <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <xTaskResumeAll+0xb0>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007da8:	f000 fb14 	bl	80083d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007dac:	4b1d      	ldr	r3, [pc, #116]	; (8007e24 <xTaskResumeAll+0x128>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d010      	beq.n	8007dda <xTaskResumeAll+0xde>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007db8:	f000 f848 	bl	8007e4c <xTaskIncrementTick>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d002      	beq.n	8007dc8 <xTaskResumeAll+0xcc>
                            {
                                xYieldPending = pdTRUE;
 8007dc2:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <xTaskResumeAll+0x124>)
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1f1      	bne.n	8007db8 <xTaskResumeAll+0xbc>

                        xPendedTicks = 0;
 8007dd4:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <xTaskResumeAll+0x128>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007dda:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <xTaskResumeAll+0x124>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d009      	beq.n	8007df6 <xTaskResumeAll+0xfa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8007de2:	2301      	movs	r3, #1
 8007de4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007de6:	4b10      	ldr	r3, [pc, #64]	; (8007e28 <xTaskResumeAll+0x12c>)
 8007de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007df6:	f001 faf3 	bl	80093e0 <vPortExitCritical>

    return xAlreadyYielded;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	2000042c 	.word	0x2000042c
 8007e08:	0800b198 	.word	0x0800b198
 8007e0c:	20000404 	.word	0x20000404
 8007e10:	200003c4 	.word	0x200003c4
 8007e14:	2000040c 	.word	0x2000040c
 8007e18:	20000330 	.word	0x20000330
 8007e1c:	2000032c 	.word	0x2000032c
 8007e20:	20000418 	.word	0x20000418
 8007e24:	20000414 	.word	0x20000414
 8007e28:	e000ed04 	.word	0xe000ed04

08007e2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007e32:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <xTaskGetTickCount+0x1c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007e38:	687b      	ldr	r3, [r7, #4]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	20000408 	.word	0x20000408

08007e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007e52:	2300      	movs	r3, #0
 8007e54:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e56:	4b4b      	ldr	r3, [pc, #300]	; (8007f84 <xTaskIncrementTick+0x138>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f040 8088 	bne.w	8007f70 <xTaskIncrementTick+0x124>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e60:	4b49      	ldr	r3, [pc, #292]	; (8007f88 <xTaskIncrementTick+0x13c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007e68:	4a47      	ldr	r2, [pc, #284]	; (8007f88 <xTaskIncrementTick+0x13c>)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d11a      	bne.n	8007eaa <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8007e74:	4b45      	ldr	r3, [pc, #276]	; (8007f8c <xTaskIncrementTick+0x140>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <xTaskIncrementTick+0x3c>
 8007e7e:	4944      	ldr	r1, [pc, #272]	; (8007f90 <xTaskIncrementTick+0x144>)
 8007e80:	f640 20c7 	movw	r0, #2759	; 0xac7
 8007e84:	f7f9 fcfc 	bl	8001880 <vAssertCalled>
 8007e88:	4b40      	ldr	r3, [pc, #256]	; (8007f8c <xTaskIncrementTick+0x140>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	4b41      	ldr	r3, [pc, #260]	; (8007f94 <xTaskIncrementTick+0x148>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a3e      	ldr	r2, [pc, #248]	; (8007f8c <xTaskIncrementTick+0x140>)
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	4a3f      	ldr	r2, [pc, #252]	; (8007f94 <xTaskIncrementTick+0x148>)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	4b3e      	ldr	r3, [pc, #248]	; (8007f98 <xTaskIncrementTick+0x14c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	4a3d      	ldr	r2, [pc, #244]	; (8007f98 <xTaskIncrementTick+0x14c>)
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	f000 fa95 	bl	80083d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007eaa:	4b3c      	ldr	r3, [pc, #240]	; (8007f9c <xTaskIncrementTick+0x150>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d348      	bcc.n	8007f46 <xTaskIncrementTick+0xfa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eb4:	4b35      	ldr	r3, [pc, #212]	; (8007f8c <xTaskIncrementTick+0x140>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d104      	bne.n	8007ec8 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ebe:	4b37      	ldr	r3, [pc, #220]	; (8007f9c <xTaskIncrementTick+0x150>)
 8007ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec4:	601a      	str	r2, [r3, #0]
                    break;
 8007ec6:	e03e      	b.n	8007f46 <xTaskIncrementTick+0xfa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec8:	4b30      	ldr	r3, [pc, #192]	; (8007f8c <xTaskIncrementTick+0x140>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d203      	bcs.n	8007ee8 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007ee0:	4a2e      	ldr	r2, [pc, #184]	; (8007f9c <xTaskIncrementTick+0x150>)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ee6:	e02e      	b.n	8007f46 <xTaskIncrementTick+0xfa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	3304      	adds	r3, #4
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fe ffbc 	bl	8006e6a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	3318      	adds	r3, #24
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe ffb3 	bl	8006e6a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	2201      	movs	r2, #1
 8007f0a:	409a      	lsls	r2, r3
 8007f0c:	4b24      	ldr	r3, [pc, #144]	; (8007fa0 <xTaskIncrementTick+0x154>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	4a23      	ldr	r2, [pc, #140]	; (8007fa0 <xTaskIncrementTick+0x154>)
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4a20      	ldr	r2, [pc, #128]	; (8007fa4 <xTaskIncrementTick+0x158>)
 8007f24:	441a      	add	r2, r3
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f7fe ff3f 	bl	8006db0 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f36:	4b1c      	ldr	r3, [pc, #112]	; (8007fa8 <xTaskIncrementTick+0x15c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d3b9      	bcc.n	8007eb4 <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 8007f40:	2301      	movs	r3, #1
 8007f42:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f44:	e7b6      	b.n	8007eb4 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f46:	4b18      	ldr	r3, [pc, #96]	; (8007fa8 <xTaskIncrementTick+0x15c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4c:	4915      	ldr	r1, [pc, #84]	; (8007fa4 <xTaskIncrementTick+0x158>)
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	440b      	add	r3, r1
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d901      	bls.n	8007f62 <xTaskIncrementTick+0x116>
                {
                    xSwitchRequired = pdTRUE;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <xTaskIncrementTick+0x160>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d007      	beq.n	8007f7a <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	e004      	b.n	8007f7a <xTaskIncrementTick+0x12e>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007f70:	4b0f      	ldr	r3, [pc, #60]	; (8007fb0 <xTaskIncrementTick+0x164>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	4a0e      	ldr	r2, [pc, #56]	; (8007fb0 <xTaskIncrementTick+0x164>)
 8007f78:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8007f7a:	697b      	ldr	r3, [r7, #20]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	2000042c 	.word	0x2000042c
 8007f88:	20000408 	.word	0x20000408
 8007f8c:	200003bc 	.word	0x200003bc
 8007f90:	0800b198 	.word	0x0800b198
 8007f94:	200003c0 	.word	0x200003c0
 8007f98:	2000041c 	.word	0x2000041c
 8007f9c:	20000424 	.word	0x20000424
 8007fa0:	2000040c 	.word	0x2000040c
 8007fa4:	20000330 	.word	0x20000330
 8007fa8:	2000032c 	.word	0x2000032c
 8007fac:	20000418 	.word	0x20000418
 8007fb0:	20000414 	.word	0x20000414

08007fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fba:	4b23      	ldr	r3, [pc, #140]	; (8008048 <vTaskSwitchContext+0x94>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007fc2:	4b22      	ldr	r3, [pc, #136]	; (800804c <vTaskSwitchContext+0x98>)
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8007fc8:	e039      	b.n	800803e <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8007fca:	4b20      	ldr	r3, [pc, #128]	; (800804c <vTaskSwitchContext+0x98>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd0:	4b1f      	ldr	r3, [pc, #124]	; (8008050 <vTaskSwitchContext+0x9c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	fab3 f383 	clz	r3, r3
 8007fdc:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8007fde:	78fb      	ldrb	r3, [r7, #3]
 8007fe0:	f1c3 031f 	rsb	r3, r3, #31
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	491b      	ldr	r1, [pc, #108]	; (8008054 <vTaskSwitchContext+0xa0>)
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	4613      	mov	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	440b      	add	r3, r1
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <vTaskSwitchContext+0x50>
 8007ffa:	4917      	ldr	r1, [pc, #92]	; (8008058 <vTaskSwitchContext+0xa4>)
 8007ffc:	f640 4002 	movw	r0, #3074	; 0xc02
 8008000:	f7f9 fc3e 	bl	8001880 <vAssertCalled>
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	4613      	mov	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4a11      	ldr	r2, [pc, #68]	; (8008054 <vTaskSwitchContext+0xa0>)
 8008010:	4413      	add	r3, r2
 8008012:	60bb      	str	r3, [r7, #8]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	605a      	str	r2, [r3, #4]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	3308      	adds	r3, #8
 8008026:	429a      	cmp	r2, r3
 8008028:	d104      	bne.n	8008034 <vTaskSwitchContext+0x80>
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	605a      	str	r2, [r3, #4]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	4a08      	ldr	r2, [pc, #32]	; (800805c <vTaskSwitchContext+0xa8>)
 800803c:	6013      	str	r3, [r2, #0]
}
 800803e:	bf00      	nop
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	2000042c 	.word	0x2000042c
 800804c:	20000418 	.word	0x20000418
 8008050:	2000040c 	.word	0x2000040c
 8008054:	20000330 	.word	0x20000330
 8008058:	0800b198 	.word	0x0800b198
 800805c:	2000032c 	.word	0x2000032c

08008060 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d104      	bne.n	800807a <vTaskPlaceOnEventList+0x1a>
 8008070:	4909      	ldr	r1, [pc, #36]	; (8008098 <vTaskPlaceOnEventList+0x38>)
 8008072:	f640 401c 	movw	r0, #3100	; 0xc1c
 8008076:	f7f9 fc03 	bl	8001880 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800807a:	4b08      	ldr	r3, [pc, #32]	; (800809c <vTaskPlaceOnEventList+0x3c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3318      	adds	r3, #24
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7fe feb8 	bl	8006df8 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008088:	2101      	movs	r1, #1
 800808a:	6838      	ldr	r0, [r7, #0]
 800808c:	f000 fc82 	bl	8008994 <prvAddCurrentTaskToDelayedList>
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	0800b198 	.word	0x0800b198
 800809c:	2000032c 	.word	0x2000032c

080080a0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d104      	bne.n	80080bc <vTaskPlaceOnEventListRestricted+0x1c>
 80080b2:	490d      	ldr	r1, [pc, #52]	; (80080e8 <vTaskPlaceOnEventListRestricted+0x48>)
 80080b4:	f640 404b 	movw	r0, #3147	; 0xc4b
 80080b8:	f7f9 fbe2 	bl	8001880 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080bc:	4b0b      	ldr	r3, [pc, #44]	; (80080ec <vTaskPlaceOnEventListRestricted+0x4c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3318      	adds	r3, #24
 80080c2:	4619      	mov	r1, r3
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7fe fe73 	bl	8006db0 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 80080d0:	f04f 33ff 	mov.w	r3, #4294967295
 80080d4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	68b8      	ldr	r0, [r7, #8]
 80080da:	f000 fc5b 	bl	8008994 <prvAddCurrentTaskToDelayedList>
    }
 80080de:	bf00      	nop
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	0800b198 	.word	0x0800b198
 80080ec:	2000032c 	.word	0x2000032c

080080f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d104      	bne.n	8008110 <xTaskRemoveFromEventList+0x20>
 8008106:	4922      	ldr	r1, [pc, #136]	; (8008190 <xTaskRemoveFromEventList+0xa0>)
 8008108:	f640 407b 	movw	r0, #3195	; 0xc7b
 800810c:	f7f9 fbb8 	bl	8001880 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	3318      	adds	r3, #24
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe fea8 	bl	8006e6a <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800811a:	4b1e      	ldr	r3, [pc, #120]	; (8008194 <xTaskRemoveFromEventList+0xa4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d11c      	bne.n	800815c <xTaskRemoveFromEventList+0x6c>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	3304      	adds	r3, #4
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe fe9f 	bl	8006e6a <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	2201      	movs	r2, #1
 8008132:	409a      	lsls	r2, r3
 8008134:	4b18      	ldr	r3, [pc, #96]	; (8008198 <xTaskRemoveFromEventList+0xa8>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4313      	orrs	r3, r2
 800813a:	4a17      	ldr	r2, [pc, #92]	; (8008198 <xTaskRemoveFromEventList+0xa8>)
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4a14      	ldr	r2, [pc, #80]	; (800819c <xTaskRemoveFromEventList+0xac>)
 800814c:	441a      	add	r2, r3
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	3304      	adds	r3, #4
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f7fe fe2b 	bl	8006db0 <vListInsertEnd>
 800815a:	e005      	b.n	8008168 <xTaskRemoveFromEventList+0x78>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	3318      	adds	r3, #24
 8008160:	4619      	mov	r1, r3
 8008162:	480f      	ldr	r0, [pc, #60]	; (80081a0 <xTaskRemoveFromEventList+0xb0>)
 8008164:	f7fe fe24 	bl	8006db0 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <xTaskRemoveFromEventList+0xb4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	429a      	cmp	r2, r3
 8008174:	d905      	bls.n	8008182 <xTaskRemoveFromEventList+0x92>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008176:	2301      	movs	r3, #1
 8008178:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800817a:	4b0b      	ldr	r3, [pc, #44]	; (80081a8 <xTaskRemoveFromEventList+0xb8>)
 800817c:	2201      	movs	r2, #1
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	e001      	b.n	8008186 <xTaskRemoveFromEventList+0x96>
    }
    else
    {
        xReturn = pdFALSE;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8008186:	68fb      	ldr	r3, [r7, #12]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	0800b198 	.word	0x0800b198
 8008194:	2000042c 	.word	0x2000042c
 8008198:	2000040c 	.word	0x2000040c
 800819c:	20000330 	.word	0x20000330
 80081a0:	200003c4 	.word	0x200003c4
 80081a4:	2000032c 	.word	0x2000032c
 80081a8:	20000418 	.word	0x20000418

080081ac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081b4:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <vTaskInternalSetTimeOutState+0x24>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <vTaskInternalSetTimeOutState+0x28>)
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	605a      	str	r2, [r3, #4]
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	2000041c 	.word	0x2000041c
 80081d4:	20000408 	.word	0x20000408

080081d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d104      	bne.n	80081f2 <xTaskCheckForTimeOut+0x1a>
 80081e8:	4926      	ldr	r1, [pc, #152]	; (8008284 <xTaskCheckForTimeOut+0xac>)
 80081ea:	f640 40f6 	movw	r0, #3318	; 0xcf6
 80081ee:	f7f9 fb47 	bl	8001880 <vAssertCalled>
    configASSERT( pxTicksToWait );
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d104      	bne.n	8008202 <xTaskCheckForTimeOut+0x2a>
 80081f8:	4922      	ldr	r1, [pc, #136]	; (8008284 <xTaskCheckForTimeOut+0xac>)
 80081fa:	f640 40f7 	movw	r0, #3319	; 0xcf7
 80081fe:	f7f9 fb3f 	bl	8001880 <vAssertCalled>

    taskENTER_CRITICAL();
 8008202:	f001 f8c1 	bl	8009388 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8008206:	4b20      	ldr	r3, [pc, #128]	; (8008288 <xTaskCheckForTimeOut+0xb0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821e:	d102      	bne.n	8008226 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008220:	2300      	movs	r3, #0
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	e026      	b.n	8008274 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	4b18      	ldr	r3, [pc, #96]	; (800828c <xTaskCheckForTimeOut+0xb4>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	d00a      	beq.n	8008248 <xTaskCheckForTimeOut+0x70>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	429a      	cmp	r2, r3
 800823a:	d305      	bcc.n	8008248 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800823c:	2301      	movs	r3, #1
 800823e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	e015      	b.n	8008274 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	429a      	cmp	r2, r3
 8008250:	d20b      	bcs.n	800826a <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	1ad2      	subs	r2, r2, r3
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff ffa4 	bl	80081ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008264:	2300      	movs	r3, #0
 8008266:	617b      	str	r3, [r7, #20]
 8008268:	e004      	b.n	8008274 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008270:	2301      	movs	r3, #1
 8008272:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8008274:	f001 f8b4 	bl	80093e0 <vPortExitCritical>

    return xReturn;
 8008278:	697b      	ldr	r3, [r7, #20]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	0800b198 	.word	0x0800b198
 8008288:	20000408 	.word	0x20000408
 800828c:	2000041c 	.word	0x2000041c

08008290 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008290:	b480      	push	{r7}
 8008292:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008294:	4b03      	ldr	r3, [pc, #12]	; (80082a4 <vTaskMissedYield+0x14>)
 8008296:	2201      	movs	r2, #1
 8008298:	601a      	str	r2, [r3, #0]
}
 800829a:	bf00      	nop
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	20000418 	.word	0x20000418

080082a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80082b0:	f000 f852 	bl	8008358 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082b4:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <prvIdleTask+0x28>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d9f9      	bls.n	80082b0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80082bc:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <prvIdleTask+0x2c>)
 80082be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80082cc:	e7f0      	b.n	80082b0 <prvIdleTask+0x8>
 80082ce:	bf00      	nop
 80082d0:	20000330 	.word	0x20000330
 80082d4:	e000ed04 	.word	0xe000ed04

080082d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082de:	2300      	movs	r3, #0
 80082e0:	607b      	str	r3, [r7, #4]
 80082e2:	e00c      	b.n	80082fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4a12      	ldr	r2, [pc, #72]	; (8008338 <prvInitialiseTaskLists+0x60>)
 80082f0:	4413      	add	r3, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe fd2f 	bl	8006d56 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3301      	adds	r3, #1
 80082fc:	607b      	str	r3, [r7, #4]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b04      	cmp	r3, #4
 8008302:	d9ef      	bls.n	80082e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8008304:	480d      	ldr	r0, [pc, #52]	; (800833c <prvInitialiseTaskLists+0x64>)
 8008306:	f7fe fd26 	bl	8006d56 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800830a:	480d      	ldr	r0, [pc, #52]	; (8008340 <prvInitialiseTaskLists+0x68>)
 800830c:	f7fe fd23 	bl	8006d56 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008310:	480c      	ldr	r0, [pc, #48]	; (8008344 <prvInitialiseTaskLists+0x6c>)
 8008312:	f7fe fd20 	bl	8006d56 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8008316:	480c      	ldr	r0, [pc, #48]	; (8008348 <prvInitialiseTaskLists+0x70>)
 8008318:	f7fe fd1d 	bl	8006d56 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800831c:	480b      	ldr	r0, [pc, #44]	; (800834c <prvInitialiseTaskLists+0x74>)
 800831e:	f7fe fd1a 	bl	8006d56 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8008322:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <prvInitialiseTaskLists+0x78>)
 8008324:	4a05      	ldr	r2, [pc, #20]	; (800833c <prvInitialiseTaskLists+0x64>)
 8008326:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008328:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <prvInitialiseTaskLists+0x7c>)
 800832a:	4a05      	ldr	r2, [pc, #20]	; (8008340 <prvInitialiseTaskLists+0x68>)
 800832c:	601a      	str	r2, [r3, #0]
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000330 	.word	0x20000330
 800833c:	20000394 	.word	0x20000394
 8008340:	200003a8 	.word	0x200003a8
 8008344:	200003c4 	.word	0x200003c4
 8008348:	200003d8 	.word	0x200003d8
 800834c:	200003f0 	.word	0x200003f0
 8008350:	200003bc 	.word	0x200003bc
 8008354:	200003c0 	.word	0x200003c0

08008358 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800835e:	e019      	b.n	8008394 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8008360:	f001 f812 	bl	8009388 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008364:	4b10      	ldr	r3, [pc, #64]	; (80083a8 <prvCheckTasksWaitingTermination+0x50>)
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3304      	adds	r3, #4
 8008370:	4618      	mov	r0, r3
 8008372:	f7fe fd7a 	bl	8006e6a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8008376:	4b0d      	ldr	r3, [pc, #52]	; (80083ac <prvCheckTasksWaitingTermination+0x54>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3b01      	subs	r3, #1
 800837c:	4a0b      	ldr	r2, [pc, #44]	; (80083ac <prvCheckTasksWaitingTermination+0x54>)
 800837e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8008380:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <prvCheckTasksWaitingTermination+0x58>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3b01      	subs	r3, #1
 8008386:	4a0a      	ldr	r2, [pc, #40]	; (80083b0 <prvCheckTasksWaitingTermination+0x58>)
 8008388:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800838a:	f001 f829 	bl	80093e0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f810 	bl	80083b4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008394:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <prvCheckTasksWaitingTermination+0x58>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e1      	bne.n	8008360 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	200003d8 	.word	0x200003d8
 80083ac:	20000404 	.word	0x20000404
 80083b0:	200003ec 	.word	0x200003ec

080083b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c0:	4618      	mov	r0, r3
 80083c2:	f001 f9bf 	bl	8009744 <vPortFree>
                vPortFree( pxTCB );
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 f9bc 	bl	8009744 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80083cc:	bf00      	nop
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083d4:	b480      	push	{r7}
 80083d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083d8:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <prvResetNextTaskUnblockTime+0x30>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d104      	bne.n	80083ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80083e2:	4b09      	ldr	r3, [pc, #36]	; (8008408 <prvResetNextTaskUnblockTime+0x34>)
 80083e4:	f04f 32ff 	mov.w	r2, #4294967295
 80083e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80083ea:	e005      	b.n	80083f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80083ec:	4b05      	ldr	r3, [pc, #20]	; (8008404 <prvResetNextTaskUnblockTime+0x30>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a04      	ldr	r2, [pc, #16]	; (8008408 <prvResetNextTaskUnblockTime+0x34>)
 80083f6:	6013      	str	r3, [r2, #0]
}
 80083f8:	bf00      	nop
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	200003bc 	.word	0x200003bc
 8008408:	20000424 	.word	0x20000424

0800840c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8008412:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <xTaskGetSchedulerState+0x34>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800841a:	2301      	movs	r3, #1
 800841c:	607b      	str	r3, [r7, #4]
 800841e:	e008      	b.n	8008432 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008420:	4b08      	ldr	r3, [pc, #32]	; (8008444 <xTaskGetSchedulerState+0x38>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d102      	bne.n	800842e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008428:	2302      	movs	r3, #2
 800842a:	607b      	str	r3, [r7, #4]
 800842c:	e001      	b.n	8008432 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800842e:	2300      	movs	r3, #0
 8008430:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8008432:	687b      	ldr	r3, [r7, #4]
    }
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	20000410 	.word	0x20000410
 8008444:	2000042c 	.word	0x2000042c

08008448 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8008454:	2300      	movs	r3, #0
 8008456:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d057      	beq.n	800850e <xTaskPriorityDisinherit+0xc6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800845e:	4b2e      	ldr	r3, [pc, #184]	; (8008518 <xTaskPriorityDisinherit+0xd0>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	429a      	cmp	r2, r3
 8008466:	d004      	beq.n	8008472 <xTaskPriorityDisinherit+0x2a>
 8008468:	492c      	ldr	r1, [pc, #176]	; (800851c <xTaskPriorityDisinherit+0xd4>)
 800846a:	f241 0056 	movw	r0, #4182	; 0x1056
 800846e:	f7f9 fa07 	bl	8001880 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008476:	2b00      	cmp	r3, #0
 8008478:	d104      	bne.n	8008484 <xTaskPriorityDisinherit+0x3c>
 800847a:	4928      	ldr	r1, [pc, #160]	; (800851c <xTaskPriorityDisinherit+0xd4>)
 800847c:	f241 0057 	movw	r0, #4183	; 0x1057
 8008480:	f7f9 f9fe 	bl	8001880 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008488:	1e5a      	subs	r2, r3, #1
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008496:	429a      	cmp	r2, r3
 8008498:	d039      	beq.n	800850e <xTaskPriorityDisinherit+0xc6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d135      	bne.n	800850e <xTaskPriorityDisinherit+0xc6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	3304      	adds	r3, #4
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe fcdf 	bl	8006e6a <uxListRemove>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b6:	2201      	movs	r2, #1
 80084b8:	fa02 f303 	lsl.w	r3, r2, r3
 80084bc:	43da      	mvns	r2, r3
 80084be:	4b18      	ldr	r3, [pc, #96]	; (8008520 <xTaskPriorityDisinherit+0xd8>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4013      	ands	r3, r2
 80084c4:	4a16      	ldr	r2, [pc, #88]	; (8008520 <xTaskPriorityDisinherit+0xd8>)
 80084c6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	f1c3 0205 	rsb	r2, r3, #5
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e0:	2201      	movs	r2, #1
 80084e2:	409a      	lsls	r2, r3
 80084e4:	4b0e      	ldr	r3, [pc, #56]	; (8008520 <xTaskPriorityDisinherit+0xd8>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	4a0d      	ldr	r2, [pc, #52]	; (8008520 <xTaskPriorityDisinherit+0xd8>)
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f2:	4613      	mov	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4a0a      	ldr	r2, [pc, #40]	; (8008524 <xTaskPriorityDisinherit+0xdc>)
 80084fc:	441a      	add	r2, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	3304      	adds	r3, #4
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f7fe fc53 	bl	8006db0 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800850a:	2301      	movs	r3, #1
 800850c:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800850e:	68fb      	ldr	r3, [r7, #12]
    }
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	2000032c 	.word	0x2000032c
 800851c:	0800b198 	.word	0x0800b198
 8008520:	2000040c 	.word	0x2000040c
 8008524:	20000330 	.word	0x20000330

08008528 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
 8008534:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d004      	beq.n	8008546 <xTaskGenericNotifyWait+0x1e>
 800853c:	4935      	ldr	r1, [pc, #212]	; (8008614 <xTaskGenericNotifyWait+0xec>)
 800853e:	f241 20b5 	movw	r0, #4789	; 0x12b5
 8008542:	f7f9 f99d 	bl	8001880 <vAssertCalled>

        taskENTER_CRITICAL();
 8008546:	f000 ff1f 	bl	8009388 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800854a:	4b33      	ldr	r3, [pc, #204]	; (8008618 <xTaskGenericNotifyWait+0xf0>)
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4413      	add	r3, r2
 8008552:	3354      	adds	r3, #84	; 0x54
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b02      	cmp	r3, #2
 800855a:	d022      	beq.n	80085a2 <xTaskGenericNotifyWait+0x7a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800855c:	4b2e      	ldr	r3, [pc, #184]	; (8008618 <xTaskGenericNotifyWait+0xf0>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	3214      	adds	r2, #20
 8008564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	43d2      	mvns	r2, r2
 800856c:	4011      	ands	r1, r2
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	3214      	adds	r2, #20
 8008572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8008576:	4b28      	ldr	r3, [pc, #160]	; (8008618 <xTaskGenericNotifyWait+0xf0>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	3354      	adds	r3, #84	; 0x54
 8008580:	2201      	movs	r2, #1
 8008582:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <xTaskGenericNotifyWait+0x7a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800858a:	2101      	movs	r1, #1
 800858c:	6a38      	ldr	r0, [r7, #32]
 800858e:	f000 fa01 	bl	8008994 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8008592:	4b22      	ldr	r3, [pc, #136]	; (800861c <xTaskGenericNotifyWait+0xf4>)
 8008594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80085a2:	f000 ff1d 	bl	80093e0 <vPortExitCritical>

        taskENTER_CRITICAL();
 80085a6:	f000 feef 	bl	8009388 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d007      	beq.n	80085c0 <xTaskGenericNotifyWait+0x98>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80085b0:	4b19      	ldr	r3, [pc, #100]	; (8008618 <xTaskGenericNotifyWait+0xf0>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	3214      	adds	r2, #20
 80085b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80085c0:	4b15      	ldr	r3, [pc, #84]	; (8008618 <xTaskGenericNotifyWait+0xf0>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4413      	add	r3, r2
 80085c8:	3354      	adds	r3, #84	; 0x54
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d002      	beq.n	80085d8 <xTaskGenericNotifyWait+0xb0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80085d2:	2300      	movs	r3, #0
 80085d4:	617b      	str	r3, [r7, #20]
 80085d6:	e00e      	b.n	80085f6 <xTaskGenericNotifyWait+0xce>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80085d8:	4b0f      	ldr	r3, [pc, #60]	; (8008618 <xTaskGenericNotifyWait+0xf0>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	3214      	adds	r2, #20
 80085e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	43d2      	mvns	r2, r2
 80085e8:	4011      	ands	r1, r2
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	3214      	adds	r2, #20
 80085ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80085f2:	2301      	movs	r3, #1
 80085f4:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80085f6:	4b08      	ldr	r3, [pc, #32]	; (8008618 <xTaskGenericNotifyWait+0xf0>)
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4413      	add	r3, r2
 80085fe:	3354      	adds	r3, #84	; 0x54
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8008604:	f000 feec 	bl	80093e0 <vPortExitCritical>

        return xReturn;
 8008608:	697b      	ldr	r3, [r7, #20]
    }
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	0800b198 	.word	0x0800b198
 8008618:	2000032c 	.word	0x2000032c
 800861c:	e000ed04 	.word	0xe000ed04

08008620 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800862e:	2301      	movs	r3, #1
 8008630:	61fb      	str	r3, [r7, #28]
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d004      	beq.n	8008642 <xTaskGenericNotify+0x22>
 8008638:	4958      	ldr	r1, [pc, #352]	; (800879c <xTaskGenericNotify+0x17c>)
 800863a:	f241 300d 	movw	r0, #4877	; 0x130d
 800863e:	f7f9 f91f 	bl	8001880 <vAssertCalled>
        configASSERT( xTaskToNotify );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d104      	bne.n	8008652 <xTaskGenericNotify+0x32>
 8008648:	4954      	ldr	r1, [pc, #336]	; (800879c <xTaskGenericNotify+0x17c>)
 800864a:	f241 300e 	movw	r0, #4878	; 0x130e
 800864e:	f7f9 f917 	bl	8001880 <vAssertCalled>
        pxTCB = xTaskToNotify;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	61bb      	str	r3, [r7, #24]

        taskENTER_CRITICAL();
 8008656:	f000 fe97 	bl	8009388 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	2b00      	cmp	r3, #0
 800865e:	d006      	beq.n	800866e <xTaskGenericNotify+0x4e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	3214      	adds	r2, #20
 8008666:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	4413      	add	r3, r2
 8008674:	3354      	adds	r3, #84	; 0x54
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	75fb      	strb	r3, [r7, #23]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4413      	add	r3, r2
 8008680:	3354      	adds	r3, #84	; 0x54
 8008682:	2202      	movs	r2, #2
 8008684:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8008686:	78fb      	ldrb	r3, [r7, #3]
 8008688:	2b04      	cmp	r3, #4
 800868a:	d83b      	bhi.n	8008704 <xTaskGenericNotify+0xe4>
 800868c:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <xTaskGenericNotify+0x74>)
 800868e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008692:	bf00      	nop
 8008694:	08008719 	.word	0x08008719
 8008698:	080086a9 	.word	0x080086a9
 800869c:	080086c5 	.word	0x080086c5
 80086a0:	080086dd 	.word	0x080086dd
 80086a4:	080086eb 	.word	0x080086eb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	3214      	adds	r2, #20
 80086ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	ea42 0103 	orr.w	r1, r2, r3
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	3214      	adds	r2, #20
 80086be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80086c2:	e02c      	b.n	800871e <xTaskGenericNotify+0xfe>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	3214      	adds	r2, #20
 80086ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ce:	1c59      	adds	r1, r3, #1
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	3214      	adds	r2, #20
 80086d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80086da:	e020      	b.n	800871e <xTaskGenericNotify+0xfe>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	3214      	adds	r2, #20
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80086e8:	e019      	b.n	800871e <xTaskGenericNotify+0xfe>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d006      	beq.n	80086fe <xTaskGenericNotify+0xde>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	3214      	adds	r2, #20
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80086fc:	e00f      	b.n	800871e <xTaskGenericNotify+0xfe>
                        xReturn = pdFAIL;
 80086fe:	2300      	movs	r3, #0
 8008700:	61fb      	str	r3, [r7, #28]
                    break;
 8008702:	e00c      	b.n	800871e <xTaskGenericNotify+0xfe>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8008704:	4b26      	ldr	r3, [pc, #152]	; (80087a0 <xTaskGenericNotify+0x180>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d007      	beq.n	800871c <xTaskGenericNotify+0xfc>
 800870c:	4923      	ldr	r1, [pc, #140]	; (800879c <xTaskGenericNotify+0x17c>)
 800870e:	f241 3043 	movw	r0, #4931	; 0x1343
 8008712:	f7f9 f8b5 	bl	8001880 <vAssertCalled>

                    break;
 8008716:	e001      	b.n	800871c <xTaskGenericNotify+0xfc>
                    break;
 8008718:	bf00      	nop
 800871a:	e000      	b.n	800871e <xTaskGenericNotify+0xfe>
                    break;
 800871c:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d133      	bne.n	800878c <xTaskGenericNotify+0x16c>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	3304      	adds	r3, #4
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe fb9e 	bl	8006e6a <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008732:	2201      	movs	r2, #1
 8008734:	409a      	lsls	r2, r3
 8008736:	4b1b      	ldr	r3, [pc, #108]	; (80087a4 <xTaskGenericNotify+0x184>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4313      	orrs	r3, r2
 800873c:	4a19      	ldr	r2, [pc, #100]	; (80087a4 <xTaskGenericNotify+0x184>)
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008744:	4613      	mov	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4a16      	ldr	r2, [pc, #88]	; (80087a8 <xTaskGenericNotify+0x188>)
 800874e:	441a      	add	r2, r3
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	3304      	adds	r3, #4
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f7fe fb2a 	bl	8006db0 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008760:	2b00      	cmp	r3, #0
 8008762:	d004      	beq.n	800876e <xTaskGenericNotify+0x14e>
 8008764:	490d      	ldr	r1, [pc, #52]	; (800879c <xTaskGenericNotify+0x17c>)
 8008766:	f241 3052 	movw	r0, #4946	; 0x1352
 800876a:	f7f9 f889 	bl	8001880 <vAssertCalled>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008772:	4b0e      	ldr	r3, [pc, #56]	; (80087ac <xTaskGenericNotify+0x18c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008778:	429a      	cmp	r2, r3
 800877a:	d907      	bls.n	800878c <xTaskGenericNotify+0x16c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800877c:	4b0c      	ldr	r3, [pc, #48]	; (80087b0 <xTaskGenericNotify+0x190>)
 800877e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800878c:	f000 fe28 	bl	80093e0 <vPortExitCritical>

        return xReturn;
 8008790:	69fb      	ldr	r3, [r7, #28]
    }
 8008792:	4618      	mov	r0, r3
 8008794:	3720      	adds	r7, #32
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	0800b198 	.word	0x0800b198
 80087a0:	20000408 	.word	0x20000408
 80087a4:	2000040c 	.word	0x2000040c
 80087a8:	20000330 	.word	0x20000330
 80087ac:	2000032c 	.word	0x2000032c
 80087b0:	e000ed04 	.word	0xe000ed04

080087b4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08c      	sub	sp, #48	; 0x30
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80087c2:	2301      	movs	r3, #1
 80087c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d104      	bne.n	80087d6 <xTaskGenericNotifyFromISR+0x22>
 80087cc:	4969      	ldr	r1, [pc, #420]	; (8008974 <xTaskGenericNotifyFromISR+0x1c0>)
 80087ce:	f241 308a 	movw	r0, #5002	; 0x138a
 80087d2:	f7f9 f855 	bl	8001880 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <xTaskGenericNotifyFromISR+0x32>
 80087dc:	4965      	ldr	r1, [pc, #404]	; (8008974 <xTaskGenericNotifyFromISR+0x1c0>)
 80087de:	f241 308b 	movw	r0, #5003	; 0x138b
 80087e2:	f7f9 f84d 	bl	8001880 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087e6:	f000 feab 	bl	8009540 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	62bb      	str	r3, [r7, #40]	; 0x28
        __asm volatile
 80087ee:	f3ef 8211 	mrs	r2, BASEPRI
 80087f2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80087f6:	b672      	cpsid	i
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	b662      	cpsie	i
 8008806:	61fa      	str	r2, [r7, #28]
 8008808:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 800880a:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            if( pulPreviousNotificationValue != NULL )
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	2b00      	cmp	r3, #0
 8008812:	d006      	beq.n	8008822 <xTaskGenericNotifyFromISR+0x6e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	3214      	adds	r2, #20
 800881a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8008822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4413      	add	r3, r2
 8008828:	3354      	adds	r3, #84	; 0x54
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8008830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	4413      	add	r3, r2
 8008836:	3354      	adds	r3, #84	; 0x54
 8008838:	2202      	movs	r2, #2
 800883a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	2b04      	cmp	r3, #4
 8008840:	d83b      	bhi.n	80088ba <xTaskGenericNotifyFromISR+0x106>
 8008842:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <xTaskGenericNotifyFromISR+0x94>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	080088cf 	.word	0x080088cf
 800884c:	0800885d 	.word	0x0800885d
 8008850:	08008879 	.word	0x08008879
 8008854:	08008891 	.word	0x08008891
 8008858:	0800889f 	.word	0x0800889f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	3214      	adds	r2, #20
 8008862:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	ea42 0103 	orr.w	r1, r2, r3
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	3214      	adds	r2, #20
 8008872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008876:	e02d      	b.n	80088d4 <xTaskGenericNotifyFromISR+0x120>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	3214      	adds	r2, #20
 800887e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008882:	1c59      	adds	r1, r3, #1
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	3214      	adds	r2, #20
 800888a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800888e:	e021      	b.n	80088d4 <xTaskGenericNotifyFromISR+0x120>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	3214      	adds	r2, #20
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800889c:	e01a      	b.n	80088d4 <xTaskGenericNotifyFromISR+0x120>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800889e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d006      	beq.n	80088b4 <xTaskGenericNotifyFromISR+0x100>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	3214      	adds	r2, #20
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80088b2:	e00f      	b.n	80088d4 <xTaskGenericNotifyFromISR+0x120>
                        xReturn = pdFAIL;
 80088b4:	2300      	movs	r3, #0
 80088b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80088b8:	e00c      	b.n	80088d4 <xTaskGenericNotifyFromISR+0x120>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80088ba:	4b2f      	ldr	r3, [pc, #188]	; (8008978 <xTaskGenericNotifyFromISR+0x1c4>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d007      	beq.n	80088d2 <xTaskGenericNotifyFromISR+0x11e>
 80088c2:	492c      	ldr	r1, [pc, #176]	; (8008974 <xTaskGenericNotifyFromISR+0x1c0>)
 80088c4:	f241 30d2 	movw	r0, #5074	; 0x13d2
 80088c8:	f7f8 ffda 	bl	8001880 <vAssertCalled>
                    break;
 80088cc:	e001      	b.n	80088d2 <xTaskGenericNotifyFromISR+0x11e>
                    break;
 80088ce:	bf00      	nop
 80088d0:	e000      	b.n	80088d4 <xTaskGenericNotifyFromISR+0x120>
                    break;
 80088d2:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80088d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d13f      	bne.n	800895c <xTaskGenericNotifyFromISR+0x1a8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d004      	beq.n	80088ee <xTaskGenericNotifyFromISR+0x13a>
 80088e4:	4923      	ldr	r1, [pc, #140]	; (8008974 <xTaskGenericNotifyFromISR+0x1c0>)
 80088e6:	f241 30dd 	movw	r0, #5085	; 0x13dd
 80088ea:	f7f8 ffc9 	bl	8001880 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ee:	4b23      	ldr	r3, [pc, #140]	; (800897c <xTaskGenericNotifyFromISR+0x1c8>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d11c      	bne.n	8008930 <xTaskGenericNotifyFromISR+0x17c>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	3304      	adds	r3, #4
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fab5 	bl	8006e6a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	2201      	movs	r2, #1
 8008906:	409a      	lsls	r2, r3
 8008908:	4b1d      	ldr	r3, [pc, #116]	; (8008980 <xTaskGenericNotifyFromISR+0x1cc>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4313      	orrs	r3, r2
 800890e:	4a1c      	ldr	r2, [pc, #112]	; (8008980 <xTaskGenericNotifyFromISR+0x1cc>)
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4a19      	ldr	r2, [pc, #100]	; (8008984 <xTaskGenericNotifyFromISR+0x1d0>)
 8008920:	441a      	add	r2, r3
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	3304      	adds	r3, #4
 8008926:	4619      	mov	r1, r3
 8008928:	4610      	mov	r0, r2
 800892a:	f7fe fa41 	bl	8006db0 <vListInsertEnd>
 800892e:	e005      	b.n	800893c <xTaskGenericNotifyFromISR+0x188>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	3318      	adds	r3, #24
 8008934:	4619      	mov	r1, r3
 8008936:	4814      	ldr	r0, [pc, #80]	; (8008988 <xTaskGenericNotifyFromISR+0x1d4>)
 8008938:	f7fe fa3a 	bl	8006db0 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008940:	4b12      	ldr	r3, [pc, #72]	; (800898c <xTaskGenericNotifyFromISR+0x1d8>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	429a      	cmp	r2, r3
 8008948:	d908      	bls.n	800895c <xTaskGenericNotifyFromISR+0x1a8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800894a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <xTaskGenericNotifyFromISR+0x1a2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8008950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008952:	2201      	movs	r2, #1
 8008954:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8008956:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <xTaskGenericNotifyFromISR+0x1dc>)
 8008958:	2201      	movs	r2, #1
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	617b      	str	r3, [r7, #20]
        __asm volatile
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f383 8811 	msr	BASEPRI, r3
    }
 8008966:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8008968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800896a:	4618      	mov	r0, r3
 800896c:	3730      	adds	r7, #48	; 0x30
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	0800b198 	.word	0x0800b198
 8008978:	20000408 	.word	0x20000408
 800897c:	2000042c 	.word	0x2000042c
 8008980:	2000040c 	.word	0x2000040c
 8008984:	20000330 	.word	0x20000330
 8008988:	200003c4 	.word	0x200003c4
 800898c:	2000032c 	.word	0x2000032c
 8008990:	20000418 	.word	0x20000418

08008994 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800899e:	4b29      	ldr	r3, [pc, #164]	; (8008a44 <prvAddCurrentTaskToDelayedList+0xb0>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089a4:	4b28      	ldr	r3, [pc, #160]	; (8008a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3304      	adds	r3, #4
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe fa5d 	bl	8006e6a <uxListRemove>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10b      	bne.n	80089ce <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80089b6:	4b24      	ldr	r3, [pc, #144]	; (8008a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089bc:	2201      	movs	r2, #1
 80089be:	fa02 f303 	lsl.w	r3, r2, r3
 80089c2:	43da      	mvns	r2, r3
 80089c4:	4b21      	ldr	r3, [pc, #132]	; (8008a4c <prvAddCurrentTaskToDelayedList+0xb8>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4013      	ands	r3, r2
 80089ca:	4a20      	ldr	r2, [pc, #128]	; (8008a4c <prvAddCurrentTaskToDelayedList+0xb8>)
 80089cc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d4:	d10a      	bne.n	80089ec <prvAddCurrentTaskToDelayedList+0x58>
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d007      	beq.n	80089ec <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089dc:	4b1a      	ldr	r3, [pc, #104]	; (8008a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3304      	adds	r3, #4
 80089e2:	4619      	mov	r1, r3
 80089e4:	481a      	ldr	r0, [pc, #104]	; (8008a50 <prvAddCurrentTaskToDelayedList+0xbc>)
 80089e6:	f7fe f9e3 	bl	8006db0 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80089ea:	e026      	b.n	8008a3a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4413      	add	r3, r2
 80089f2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089f4:	4b14      	ldr	r3, [pc, #80]	; (8008a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d209      	bcs.n	8008a18 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a04:	4b13      	ldr	r3, [pc, #76]	; (8008a54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	4b0f      	ldr	r3, [pc, #60]	; (8008a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4610      	mov	r0, r2
 8008a12:	f7fe f9f1 	bl	8006df8 <vListInsert>
}
 8008a16:	e010      	b.n	8008a3a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a18:	4b0f      	ldr	r3, [pc, #60]	; (8008a58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3304      	adds	r3, #4
 8008a22:	4619      	mov	r1, r3
 8008a24:	4610      	mov	r0, r2
 8008a26:	f7fe f9e7 	bl	8006df8 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8008a2a:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d202      	bcs.n	8008a3a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8008a34:	4a09      	ldr	r2, [pc, #36]	; (8008a5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6013      	str	r3, [r2, #0]
}
 8008a3a:	bf00      	nop
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000408 	.word	0x20000408
 8008a48:	2000032c 	.word	0x2000032c
 8008a4c:	2000040c 	.word	0x2000040c
 8008a50:	200003f0 	.word	0x200003f0
 8008a54:	200003c0 	.word	0x200003c0
 8008a58:	200003bc 	.word	0x200003bc
 8008a5c:	20000424 	.word	0x20000424

08008a60 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8008a6a:	f000 fb2f 	bl	80090cc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8008a6e:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <xTimerCreateTimerTask+0x48>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00b      	beq.n	8008a8e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8008a76:	4b0d      	ldr	r3, [pc, #52]	; (8008aac <xTimerCreateTimerTask+0x4c>)
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	2304      	movs	r3, #4
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008a84:	490a      	ldr	r1, [pc, #40]	; (8008ab0 <xTimerCreateTimerTask+0x50>)
 8008a86:	480b      	ldr	r0, [pc, #44]	; (8008ab4 <xTimerCreateTimerTask+0x54>)
 8008a88:	f7fe ff68 	bl	800795c <xTaskCreate>
 8008a8c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d104      	bne.n	8008a9e <xTimerCreateTimerTask+0x3e>
 8008a94:	4908      	ldr	r1, [pc, #32]	; (8008ab8 <xTimerCreateTimerTask+0x58>)
 8008a96:	f240 100d 	movw	r0, #269	; 0x10d
 8008a9a:	f7f8 fef1 	bl	8001880 <vAssertCalled>
        return xReturn;
 8008a9e:	687b      	ldr	r3, [r7, #4]
    }
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20000460 	.word	0x20000460
 8008aac:	20000464 	.word	0x20000464
 8008ab0:	0800b1d0 	.word	0x0800b1d0
 8008ab4:	08008c99 	.word	0x08008c99
 8008ab8:	0800b1d8 	.word	0x0800b1d8

08008abc <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af02      	add	r7, sp, #8
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008aca:	202c      	movs	r0, #44	; 0x2c
 8008acc:	f000 fd6c 	bl	80095a8 <pvPortMalloc>
 8008ad0:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00d      	beq.n	8008af4 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 f806 	bl	8008b00 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8008af4:	697b      	ldr	r3, [r7, #20]
        }
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
	...

08008b00 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d104      	bne.n	8008b1e <prvInitialiseNewTimer+0x1e>
 8008b14:	4915      	ldr	r1, [pc, #84]	; (8008b6c <prvInitialiseNewTimer+0x6c>)
 8008b16:	f240 105f 	movw	r0, #351	; 0x15f
 8008b1a:	f7f8 feb1 	bl	8001880 <vAssertCalled>

        if( pxNewTimer != NULL )
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01e      	beq.n	8008b62 <prvInitialiseNewTimer+0x62>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8008b24:	f000 fad2 	bl	80090cc <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	3304      	adds	r3, #4
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe f926 	bl	8006d96 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d008      	beq.n	8008b62 <prvInitialiseNewTimer+0x62>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b56:	f043 0304 	orr.w	r3, r3, #4
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8008b62:	bf00      	nop
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	0800b1d8 	.word	0x0800b1d8

08008b70 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08a      	sub	sp, #40	; 0x28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
 8008b7c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d104      	bne.n	8008b92 <xTimerGenericCommand+0x22>
 8008b88:	491c      	ldr	r1, [pc, #112]	; (8008bfc <xTimerGenericCommand+0x8c>)
 8008b8a:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8008b8e:	f7f8 fe77 	bl	8001880 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8008b92:	4b1b      	ldr	r3, [pc, #108]	; (8008c00 <xTimerGenericCommand+0x90>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d02a      	beq.n	8008bf0 <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b05      	cmp	r3, #5
 8008baa:	dc18      	bgt.n	8008bde <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bac:	f7ff fc2e 	bl	800840c <xTaskGetSchedulerState>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d109      	bne.n	8008bca <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bb6:	4b12      	ldr	r3, [pc, #72]	; (8008c00 <xTimerGenericCommand+0x90>)
 8008bb8:	6818      	ldr	r0, [r3, #0]
 8008bba:	f107 0114 	add.w	r1, r7, #20
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc2:	f7fe fa55 	bl	8007070 <xQueueGenericSend>
 8008bc6:	6278      	str	r0, [r7, #36]	; 0x24
 8008bc8:	e012      	b.n	8008bf0 <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008bca:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <xTimerGenericCommand+0x90>)
 8008bcc:	6818      	ldr	r0, [r3, #0]
 8008bce:	f107 0114 	add.w	r1, r7, #20
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f7fe fa4b 	bl	8007070 <xQueueGenericSend>
 8008bda:	6278      	str	r0, [r7, #36]	; 0x24
 8008bdc:	e008      	b.n	8008bf0 <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008bde:	4b08      	ldr	r3, [pc, #32]	; (8008c00 <xTimerGenericCommand+0x90>)
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	f107 0114 	add.w	r1, r7, #20
 8008be6:	2300      	movs	r3, #0
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	f7fe fb29 	bl	8007240 <xQueueGenericSendFromISR>
 8008bee:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3728      	adds	r7, #40	; 0x28
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	0800b1d8 	.word	0x0800b1d8
 8008c00:	20000460 	.word	0x20000460

08008c04 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c0e:	4b20      	ldr	r3, [pc, #128]	; (8008c90 <prvProcessExpiredTimer+0x8c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe f924 	bl	8006e6a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01d      	beq.n	8008c6c <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	699a      	ldr	r2, [r3, #24]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	18d1      	adds	r1, r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 f8cf 	bl	8008de0 <prvInsertTimerInActiveList>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01a      	beq.n	8008c7e <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c48:	2300      	movs	r3, #0
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	2100      	movs	r1, #0
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f7ff ff8c 	bl	8008b70 <xTimerGenericCommand>
 8008c58:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10e      	bne.n	8008c7e <prvProcessExpiredTimer+0x7a>
 8008c60:	490c      	ldr	r1, [pc, #48]	; (8008c94 <prvProcessExpiredTimer+0x90>)
 8008c62:	f44f 7005 	mov.w	r0, #532	; 0x214
 8008c66:	f7f8 fe0b 	bl	8001880 <vAssertCalled>
 8008c6a:	e008      	b.n	8008c7e <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c72:	f023 0301 	bic.w	r3, r3, #1
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	4798      	blx	r3
    }
 8008c86:	bf00      	nop
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20000458 	.word	0x20000458
 8008c94:	0800b1d8 	.word	0x0800b1d8

08008c98 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ca0:	f107 0308 	add.w	r3, r7, #8
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 f857 	bl	8008d58 <prvGetNextExpireTime>
 8008caa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 f803 	bl	8008cbc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008cb6:	f000 f8d5 	bl	8008e64 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cba:	e7f1      	b.n	8008ca0 <prvTimerTask+0x8>

08008cbc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008cc6:	f7ff f80b 	bl	8007ce0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cca:	f107 0308 	add.w	r3, r7, #8
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 f866 	bl	8008da0 <prvSampleTimeNow>
 8008cd4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d130      	bne.n	8008d3e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <prvProcessTimerOrBlockTask+0x3c>
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d806      	bhi.n	8008cf8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8008cea:	f7ff f807 	bl	8007cfc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008cee:	68f9      	ldr	r1, [r7, #12]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7ff ff87 	bl	8008c04 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8008cf6:	e024      	b.n	8008d42 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d008      	beq.n	8008d10 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008cfe:	4b13      	ldr	r3, [pc, #76]	; (8008d4c <prvProcessTimerOrBlockTask+0x90>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <prvProcessTimerOrBlockTask+0x50>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e000      	b.n	8008d0e <prvProcessTimerOrBlockTask+0x52>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d10:	4b0f      	ldr	r3, [pc, #60]	; (8008d50 <prvProcessTimerOrBlockTask+0x94>)
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	f7fe fde9 	bl	80078f4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8008d22:	f7fe ffeb 	bl	8007cfc <xTaskResumeAll>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10a      	bne.n	8008d42 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8008d2c:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <prvProcessTimerOrBlockTask+0x98>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	f3bf 8f6f 	isb	sy
    }
 8008d3c:	e001      	b.n	8008d42 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8008d3e:	f7fe ffdd 	bl	8007cfc <xTaskResumeAll>
    }
 8008d42:	bf00      	nop
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	2000045c 	.word	0x2000045c
 8008d50:	20000460 	.word	0x20000460
 8008d54:	e000ed04 	.word	0xe000ed04

08008d58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d60:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <prvGetNextExpireTime+0x44>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <prvGetNextExpireTime+0x16>
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	e000      	b.n	8008d70 <prvGetNextExpireTime+0x18>
 8008d6e:	2200      	movs	r2, #0
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d105      	bne.n	8008d88 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d7c:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <prvGetNextExpireTime+0x44>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60fb      	str	r3, [r7, #12]
 8008d86:	e001      	b.n	8008d8c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
    }
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	20000458 	.word	0x20000458

08008da0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008da8:	f7ff f840 	bl	8007e2c <xTaskGetTickCount>
 8008dac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008dae:	4b0b      	ldr	r3, [pc, #44]	; (8008ddc <prvSampleTimeNow+0x3c>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d205      	bcs.n	8008dc4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008db8:	f000 f928 	bl	800900c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	e002      	b.n	8008dca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008dca:	4a04      	ldr	r2, [pc, #16]	; (8008ddc <prvSampleTimeNow+0x3c>)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
    }
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	20000468 	.word	0x20000468

08008de0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8008dee:	2300      	movs	r3, #0
 8008df0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d812      	bhi.n	8008e2c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	1ad2      	subs	r2, r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d302      	bcc.n	8008e1a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008e14:	2301      	movs	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	e01b      	b.n	8008e52 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e1a:	4b10      	ldr	r3, [pc, #64]	; (8008e5c <prvInsertTimerInActiveList+0x7c>)
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3304      	adds	r3, #4
 8008e22:	4619      	mov	r1, r3
 8008e24:	4610      	mov	r0, r2
 8008e26:	f7fd ffe7 	bl	8006df8 <vListInsert>
 8008e2a:	e012      	b.n	8008e52 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d206      	bcs.n	8008e42 <prvInsertTimerInActiveList+0x62>
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d302      	bcc.n	8008e42 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	e007      	b.n	8008e52 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e42:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <prvInsertTimerInActiveList+0x80>)
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	f7fd ffd3 	bl	8006df8 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8008e52:	697b      	ldr	r3, [r7, #20]
    }
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	2000045c 	.word	0x2000045c
 8008e60:	20000458 	.word	0x20000458

08008e64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08c      	sub	sp, #48	; 0x30
 8008e68:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e6a:	e0b9      	b.n	8008fe0 <prvProcessReceivedCommands+0x17c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	da13      	bge.n	8008e9a <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e72:	f107 0308 	add.w	r3, r7, #8
 8008e76:	3304      	adds	r3, #4
 8008e78:	627b      	str	r3, [r7, #36]	; 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d104      	bne.n	8008e8a <prvProcessReceivedCommands+0x26>
 8008e80:	4960      	ldr	r1, [pc, #384]	; (8009004 <prvProcessReceivedCommands+0x1a0>)
 8008e82:	f240 20fa 	movw	r0, #762	; 0x2fa
 8008e86:	f7f8 fcfb 	bl	8001880 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e90:	6850      	ldr	r0, [r2, #4]
 8008e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e94:	6892      	ldr	r2, [r2, #8]
 8008e96:	4611      	mov	r1, r2
 8008e98:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f2c0 809e 	blt.w	8008fde <prvProcessReceivedCommands+0x17a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d004      	beq.n	8008eb8 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fd ffd9 	bl	8006e6a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008eb8:	1d3b      	adds	r3, r7, #4
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7ff ff70 	bl	8008da0 <prvSampleTimeNow>
 8008ec0:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b09      	cmp	r3, #9
 8008ec6:	f200 808b 	bhi.w	8008fe0 <prvProcessReceivedCommands+0x17c>
 8008eca:	a201      	add	r2, pc, #4	; (adr r2, 8008ed0 <prvProcessReceivedCommands+0x6c>)
 8008ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed0:	08008ef9 	.word	0x08008ef9
 8008ed4:	08008ef9 	.word	0x08008ef9
 8008ed8:	08008ef9 	.word	0x08008ef9
 8008edc:	08008f63 	.word	0x08008f63
 8008ee0:	08008f77 	.word	0x08008f77
 8008ee4:	08008fb5 	.word	0x08008fb5
 8008ee8:	08008ef9 	.word	0x08008ef9
 8008eec:	08008ef9 	.word	0x08008ef9
 8008ef0:	08008f63 	.word	0x08008f63
 8008ef4:	08008f77 	.word	0x08008f77
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008efe:	f043 0301 	orr.w	r3, r3, #1
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	18d1      	adds	r1, r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	69fa      	ldr	r2, [r7, #28]
 8008f16:	6a38      	ldr	r0, [r7, #32]
 8008f18:	f7ff ff62 	bl	8008de0 <prvInsertTimerInActiveList>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d05e      	beq.n	8008fe0 <prvProcessReceivedCommands+0x17c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f22:	6a3b      	ldr	r3, [r7, #32]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	6a38      	ldr	r0, [r7, #32]
 8008f28:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f30:	f003 0304 	and.w	r3, r3, #4
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d053      	beq.n	8008fe0 <prvProcessReceivedCommands+0x17c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	441a      	add	r2, r3
 8008f40:	2300      	movs	r3, #0
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	2300      	movs	r3, #0
 8008f46:	2100      	movs	r1, #0
 8008f48:	6a38      	ldr	r0, [r7, #32]
 8008f4a:	f7ff fe11 	bl	8008b70 <xTimerGenericCommand>
 8008f4e:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d144      	bne.n	8008fe0 <prvProcessReceivedCommands+0x17c>
 8008f56:	492b      	ldr	r1, [pc, #172]	; (8009004 <prvProcessReceivedCommands+0x1a0>)
 8008f58:	f240 3036 	movw	r0, #822	; 0x336
 8008f5c:	f7f8 fc90 	bl	8001880 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8008f60:	e03e      	b.n	8008fe0 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f68:	f023 0301 	bic.w	r3, r3, #1
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8008f74:	e034      	b.n	8008fe0 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f7c:	f043 0301 	orr.w	r3, r3, #1
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f8e:	6a3b      	ldr	r3, [r7, #32]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d104      	bne.n	8008fa0 <prvProcessReceivedCommands+0x13c>
 8008f96:	491b      	ldr	r1, [pc, #108]	; (8009004 <prvProcessReceivedCommands+0x1a0>)
 8008f98:	f240 304f 	movw	r0, #847	; 0x34f
 8008f9c:	f7f8 fc70 	bl	8001880 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	18d1      	adds	r1, r2, r3
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	69fa      	ldr	r2, [r7, #28]
 8008fac:	6a38      	ldr	r0, [r7, #32]
 8008fae:	f7ff ff17 	bl	8008de0 <prvInsertTimerInActiveList>
                        break;
 8008fb2:	e015      	b.n	8008fe0 <prvProcessReceivedCommands+0x17c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d103      	bne.n	8008fca <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 8008fc2:	6a38      	ldr	r0, [r7, #32]
 8008fc4:	f000 fbbe 	bl	8009744 <vPortFree>
 8008fc8:	e00a      	b.n	8008fe0 <prvProcessReceivedCommands+0x17c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fd0:	f023 0301 	bic.w	r3, r3, #1
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008fdc:	e000      	b.n	8008fe0 <prvProcessReceivedCommands+0x17c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8008fde:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fe0:	4b09      	ldr	r3, [pc, #36]	; (8009008 <prvProcessReceivedCommands+0x1a4>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f107 0108 	add.w	r1, r7, #8
 8008fe8:	2200      	movs	r2, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe f9be 	bl	800736c <xQueueReceive>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f47f af3a 	bne.w	8008e6c <prvProcessReceivedCommands+0x8>
        }
    }
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	3728      	adds	r7, #40	; 0x28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	0800b1d8 	.word	0x0800b1d8
 8009008:	20000460 	.word	0x20000460

0800900c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800900c:	b580      	push	{r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009012:	e042      	b.n	800909a <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009014:	4b2a      	ldr	r3, [pc, #168]	; (80090c0 <prvSwitchTimerLists+0xb4>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800901e:	4b28      	ldr	r3, [pc, #160]	; (80090c0 <prvSwitchTimerLists+0xb4>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	3304      	adds	r3, #4
 800902c:	4618      	mov	r0, r3
 800902e:	f7fd ff1c 	bl	8006e6a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b00      	cmp	r3, #0
 8009046:	d028      	beq.n	800909a <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	4413      	add	r3, r2
 8009050:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	429a      	cmp	r2, r3
 8009058:	d90e      	bls.n	8009078 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009066:	4b16      	ldr	r3, [pc, #88]	; (80090c0 <prvSwitchTimerLists+0xb4>)
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3304      	adds	r3, #4
 800906e:	4619      	mov	r1, r3
 8009070:	4610      	mov	r0, r2
 8009072:	f7fd fec1 	bl	8006df8 <vListInsert>
 8009076:	e010      	b.n	800909a <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009078:	2300      	movs	r3, #0
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	2300      	movs	r3, #0
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	2100      	movs	r1, #0
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f7ff fd74 	bl	8008b70 <xTimerGenericCommand>
 8009088:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d104      	bne.n	800909a <prvSwitchTimerLists+0x8e>
 8009090:	490c      	ldr	r1, [pc, #48]	; (80090c4 <prvSwitchTimerLists+0xb8>)
 8009092:	f240 30a9 	movw	r0, #937	; 0x3a9
 8009096:	f7f8 fbf3 	bl	8001880 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800909a:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <prvSwitchTimerLists+0xb4>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1b7      	bne.n	8009014 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80090a4:	4b06      	ldr	r3, [pc, #24]	; (80090c0 <prvSwitchTimerLists+0xb4>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80090aa:	4b07      	ldr	r3, [pc, #28]	; (80090c8 <prvSwitchTimerLists+0xbc>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a04      	ldr	r2, [pc, #16]	; (80090c0 <prvSwitchTimerLists+0xb4>)
 80090b0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80090b2:	4a05      	ldr	r2, [pc, #20]	; (80090c8 <prvSwitchTimerLists+0xbc>)
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	6013      	str	r3, [r2, #0]
    }
 80090b8:	bf00      	nop
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20000458 	.word	0x20000458
 80090c4:	0800b1d8 	.word	0x0800b1d8
 80090c8:	2000045c 	.word	0x2000045c

080090cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80090d0:	f000 f95a 	bl	8009388 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80090d4:	4b12      	ldr	r3, [pc, #72]	; (8009120 <prvCheckForValidListAndQueue+0x54>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d11d      	bne.n	8009118 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80090dc:	4811      	ldr	r0, [pc, #68]	; (8009124 <prvCheckForValidListAndQueue+0x58>)
 80090de:	f7fd fe3a 	bl	8006d56 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80090e2:	4811      	ldr	r0, [pc, #68]	; (8009128 <prvCheckForValidListAndQueue+0x5c>)
 80090e4:	f7fd fe37 	bl	8006d56 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80090e8:	4b10      	ldr	r3, [pc, #64]	; (800912c <prvCheckForValidListAndQueue+0x60>)
 80090ea:	4a0e      	ldr	r2, [pc, #56]	; (8009124 <prvCheckForValidListAndQueue+0x58>)
 80090ec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80090ee:	4b10      	ldr	r3, [pc, #64]	; (8009130 <prvCheckForValidListAndQueue+0x64>)
 80090f0:	4a0d      	ldr	r2, [pc, #52]	; (8009128 <prvCheckForValidListAndQueue+0x5c>)
 80090f2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80090f4:	2200      	movs	r2, #0
 80090f6:	2110      	movs	r1, #16
 80090f8:	2005      	movs	r0, #5
 80090fa:	f7fd ff45 	bl	8006f88 <xQueueGenericCreate>
 80090fe:	4603      	mov	r3, r0
 8009100:	4a07      	ldr	r2, [pc, #28]	; (8009120 <prvCheckForValidListAndQueue+0x54>)
 8009102:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8009104:	4b06      	ldr	r3, [pc, #24]	; (8009120 <prvCheckForValidListAndQueue+0x54>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d005      	beq.n	8009118 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800910c:	4b04      	ldr	r3, [pc, #16]	; (8009120 <prvCheckForValidListAndQueue+0x54>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4908      	ldr	r1, [pc, #32]	; (8009134 <prvCheckForValidListAndQueue+0x68>)
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe fbc4 	bl	80078a0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009118:	f000 f962 	bl	80093e0 <vPortExitCritical>
    }
 800911c:	bf00      	nop
 800911e:	bd80      	pop	{r7, pc}
 8009120:	20000460 	.word	0x20000460
 8009124:	20000430 	.word	0x20000430
 8009128:	20000444 	.word	0x20000444
 800912c:	20000458 	.word	0x20000458
 8009130:	2000045c 	.word	0x2000045c
 8009134:	0800b1f8 	.word	0x0800b1f8

08009138 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	60fb      	str	r3, [r7, #12]
        void * pvReturn;

        configASSERT( xTimer );
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d104      	bne.n	8009154 <pvTimerGetTimerID+0x1c>
 800914a:	4908      	ldr	r1, [pc, #32]	; (800916c <pvTimerGetTimerID+0x34>)
 800914c:	f240 400a 	movw	r0, #1034	; 0x40a
 8009150:	f7f8 fb96 	bl	8001880 <vAssertCalled>

        taskENTER_CRITICAL();
 8009154:	f000 f918 	bl	8009388 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	69db      	ldr	r3, [r3, #28]
 800915c:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800915e:	f000 f93f 	bl	80093e0 <vPortExitCritical>

        return pvReturn;
 8009162:	68bb      	ldr	r3, [r7, #8]
    }
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	0800b1d8 	.word	0x0800b1d8

08009170 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3b04      	subs	r3, #4
 8009180:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009188:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3b04      	subs	r3, #4
 800918e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f023 0201 	bic.w	r2, r3, #1
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3b04      	subs	r3, #4
 800919e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80091a0:	4a0c      	ldr	r2, [pc, #48]	; (80091d4 <pxPortInitialiseStack+0x64>)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3b14      	subs	r3, #20
 80091aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3b04      	subs	r3, #4
 80091b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f06f 0202 	mvn.w	r2, #2
 80091be:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3b20      	subs	r3, #32
 80091c4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80091c6:	68fb      	ldr	r3, [r7, #12]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	080091d9 	.word	0x080091d9

080091d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80091e2:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <prvTaskExitError+0x48>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ea:	d003      	beq.n	80091f4 <prvTaskExitError+0x1c>
 80091ec:	490d      	ldr	r1, [pc, #52]	; (8009224 <prvTaskExitError+0x4c>)
 80091ee:	20e3      	movs	r0, #227	; 0xe3
 80091f0:	f7f8 fb46 	bl	8001880 <vAssertCalled>
        __asm volatile
 80091f4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80091f8:	b672      	cpsid	i
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	b662      	cpsie	i
 8009208:	607b      	str	r3, [r7, #4]
    }
 800920a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800920c:	bf00      	nop
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0fc      	beq.n	800920e <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	2000003c 	.word	0x2000003c
 8009224:	0800b200 	.word	0x0800b200
	...

08009230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8009230:	4b07      	ldr	r3, [pc, #28]	; (8009250 <pxCurrentTCBConst2>)
 8009232:	6819      	ldr	r1, [r3, #0]
 8009234:	6808      	ldr	r0, [r1, #0]
 8009236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923a:	f380 8809 	msr	PSP, r0
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f04f 0000 	mov.w	r0, #0
 8009246:	f380 8811 	msr	BASEPRI, r0
 800924a:	4770      	bx	lr
 800924c:	f3af 8000 	nop.w

08009250 <pxCurrentTCBConst2>:
 8009250:	2000032c 	.word	0x2000032c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop

08009258 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8009258:	4808      	ldr	r0, [pc, #32]	; (800927c <prvPortStartFirstTask+0x24>)
 800925a:	6800      	ldr	r0, [r0, #0]
 800925c:	6800      	ldr	r0, [r0, #0]
 800925e:	f380 8808 	msr	MSP, r0
 8009262:	f04f 0000 	mov.w	r0, #0
 8009266:	f380 8814 	msr	CONTROL, r0
 800926a:	b662      	cpsie	i
 800926c:	b661      	cpsie	f
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	df00      	svc	0
 8009278:	bf00      	nop
 800927a:	0000      	.short	0x0000
 800927c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009280:	bf00      	nop
 8009282:	bf00      	nop

08009284 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800928a:	4b38      	ldr	r3, [pc, #224]	; (800936c <xPortStartScheduler+0xe8>)
 800928c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	b2db      	uxtb	r3, r3
 8009294:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	22ff      	movs	r2, #255	; 0xff
 800929a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	4b30      	ldr	r3, [pc, #192]	; (8009370 <xPortStartScheduler+0xec>)
 80092b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092b2:	4b30      	ldr	r3, [pc, #192]	; (8009374 <xPortStartScheduler+0xf0>)
 80092b4:	2207      	movs	r2, #7
 80092b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092b8:	e009      	b.n	80092ce <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80092ba:	4b2e      	ldr	r3, [pc, #184]	; (8009374 <xPortStartScheduler+0xf0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3b01      	subs	r3, #1
 80092c0:	4a2c      	ldr	r2, [pc, #176]	; (8009374 <xPortStartScheduler+0xf0>)
 80092c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092ce:	79fb      	ldrb	r3, [r7, #7]
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d6:	2b80      	cmp	r3, #128	; 0x80
 80092d8:	d0ef      	beq.n	80092ba <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80092da:	4b26      	ldr	r3, [pc, #152]	; (8009374 <xPortStartScheduler+0xf0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f1c3 0307 	rsb	r3, r3, #7
 80092e2:	2b04      	cmp	r3, #4
 80092e4:	d004      	beq.n	80092f0 <xPortStartScheduler+0x6c>
 80092e6:	4924      	ldr	r1, [pc, #144]	; (8009378 <xPortStartScheduler+0xf4>)
 80092e8:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 80092ec:	f7f8 fac8 	bl	8001880 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092f0:	4b20      	ldr	r3, [pc, #128]	; (8009374 <xPortStartScheduler+0xf0>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f1c3 0307 	rsb	r3, r3, #7
 80092f8:	2b04      	cmp	r3, #4
 80092fa:	d004      	beq.n	8009306 <xPortStartScheduler+0x82>
 80092fc:	491e      	ldr	r1, [pc, #120]	; (8009378 <xPortStartScheduler+0xf4>)
 80092fe:	f240 1057 	movw	r0, #343	; 0x157
 8009302:	f7f8 fabd 	bl	8001880 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009306:	4b1b      	ldr	r3, [pc, #108]	; (8009374 <xPortStartScheduler+0xf0>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	021b      	lsls	r3, r3, #8
 800930c:	4a19      	ldr	r2, [pc, #100]	; (8009374 <xPortStartScheduler+0xf0>)
 800930e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009310:	4b18      	ldr	r3, [pc, #96]	; (8009374 <xPortStartScheduler+0xf0>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009318:	4a16      	ldr	r2, [pc, #88]	; (8009374 <xPortStartScheduler+0xf0>)
 800931a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	b2da      	uxtb	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009324:	4b15      	ldr	r3, [pc, #84]	; (800937c <xPortStartScheduler+0xf8>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a14      	ldr	r2, [pc, #80]	; (800937c <xPortStartScheduler+0xf8>)
 800932a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800932e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009330:	4b12      	ldr	r3, [pc, #72]	; (800937c <xPortStartScheduler+0xf8>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a11      	ldr	r2, [pc, #68]	; (800937c <xPortStartScheduler+0xf8>)
 8009336:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800933a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800933c:	f000 f8d0 	bl	80094e0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8009340:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <xPortStartScheduler+0xfc>)
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8009346:	f000 f8ef 	bl	8009528 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800934a:	4b0e      	ldr	r3, [pc, #56]	; (8009384 <xPortStartScheduler+0x100>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a0d      	ldr	r2, [pc, #52]	; (8009384 <xPortStartScheduler+0x100>)
 8009350:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009354:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8009356:	f7ff ff7f 	bl	8009258 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800935a:	f7fe fe2b 	bl	8007fb4 <vTaskSwitchContext>
    prvTaskExitError();
 800935e:	f7ff ff3b 	bl	80091d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	e000e400 	.word	0xe000e400
 8009370:	2000046c 	.word	0x2000046c
 8009374:	20000470 	.word	0x20000470
 8009378:	0800b200 	.word	0x0800b200
 800937c:	e000ed20 	.word	0xe000ed20
 8009380:	2000003c 	.word	0x2000003c
 8009384:	e000ef34 	.word	0xe000ef34

08009388 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
        __asm volatile
 800938e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009392:	b672      	cpsid	i
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	b662      	cpsie	i
 80093a2:	607b      	str	r3, [r7, #4]
    }
 80093a4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80093a6:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <vPortEnterCritical+0x4c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3301      	adds	r3, #1
 80093ac:	4a09      	ldr	r2, [pc, #36]	; (80093d4 <vPortEnterCritical+0x4c>)
 80093ae:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80093b0:	4b08      	ldr	r3, [pc, #32]	; (80093d4 <vPortEnterCritical+0x4c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d109      	bne.n	80093cc <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093b8:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <vPortEnterCritical+0x50>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d004      	beq.n	80093cc <vPortEnterCritical+0x44>
 80093c2:	4906      	ldr	r1, [pc, #24]	; (80093dc <vPortEnterCritical+0x54>)
 80093c4:	f240 10e9 	movw	r0, #489	; 0x1e9
 80093c8:	f7f8 fa5a 	bl	8001880 <vAssertCalled>
    }
}
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	2000003c 	.word	0x2000003c
 80093d8:	e000ed04 	.word	0xe000ed04
 80093dc:	0800b200 	.word	0x0800b200

080093e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80093e6:	4b0e      	ldr	r3, [pc, #56]	; (8009420 <vPortExitCritical+0x40>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d104      	bne.n	80093f8 <vPortExitCritical+0x18>
 80093ee:	490d      	ldr	r1, [pc, #52]	; (8009424 <vPortExitCritical+0x44>)
 80093f0:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 80093f4:	f7f8 fa44 	bl	8001880 <vAssertCalled>
    uxCriticalNesting--;
 80093f8:	4b09      	ldr	r3, [pc, #36]	; (8009420 <vPortExitCritical+0x40>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	4a08      	ldr	r2, [pc, #32]	; (8009420 <vPortExitCritical+0x40>)
 8009400:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009402:	4b07      	ldr	r3, [pc, #28]	; (8009420 <vPortExitCritical+0x40>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d105      	bne.n	8009416 <vPortExitCritical+0x36>
 800940a:	2300      	movs	r3, #0
 800940c:	607b      	str	r3, [r7, #4]
        __asm volatile
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f383 8811 	msr	BASEPRI, r3
    }
 8009414:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8009416:	bf00      	nop
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	2000003c 	.word	0x2000003c
 8009424:	0800b200 	.word	0x0800b200
	...

08009430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009430:	f3ef 8009 	mrs	r0, PSP
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	4b15      	ldr	r3, [pc, #84]	; (8009490 <pxCurrentTCBConst>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	f01e 0f10 	tst.w	lr, #16
 8009440:	bf08      	it	eq
 8009442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944a:	6010      	str	r0, [r2, #0]
 800944c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009450:	f04f 0040 	mov.w	r0, #64	; 0x40
 8009454:	b672      	cpsid	i
 8009456:	f380 8811 	msr	BASEPRI, r0
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	b662      	cpsie	i
 8009464:	f7fe fda6 	bl	8007fb4 <vTaskSwitchContext>
 8009468:	f04f 0000 	mov.w	r0, #0
 800946c:	f380 8811 	msr	BASEPRI, r0
 8009470:	bc09      	pop	{r0, r3}
 8009472:	6819      	ldr	r1, [r3, #0]
 8009474:	6808      	ldr	r0, [r1, #0]
 8009476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947a:	f01e 0f10 	tst.w	lr, #16
 800947e:	bf08      	it	eq
 8009480:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009484:	f380 8809 	msr	PSP, r0
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop

08009490 <pxCurrentTCBConst>:
 8009490:	2000032c 	.word	0x2000032c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009494:	bf00      	nop
 8009496:	bf00      	nop

08009498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
        __asm volatile
 800949e:	f04f 0340 	mov.w	r3, #64	; 0x40
 80094a2:	b672      	cpsid	i
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	b662      	cpsie	i
 80094b2:	607b      	str	r3, [r7, #4]
    }
 80094b4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80094b6:	f7fe fcc9 	bl	8007e4c <xTaskIncrementTick>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <SysTick_Handler+0x30>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094c0:	4b06      	ldr	r3, [pc, #24]	; (80094dc <SysTick_Handler+0x44>)
 80094c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	2300      	movs	r3, #0
 80094ca:	603b      	str	r3, [r7, #0]
        __asm volatile
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	f383 8811 	msr	BASEPRI, r3
    }
 80094d2:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	e000ed04 	.word	0xe000ed04

080094e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80094e0:	b480      	push	{r7}
 80094e2:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094e4:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <vPortSetupTimerInterrupt+0x34>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094ea:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <vPortSetupTimerInterrupt+0x38>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094f0:	4b0a      	ldr	r3, [pc, #40]	; (800951c <vPortSetupTimerInterrupt+0x3c>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	095b      	lsrs	r3, r3, #5
 80094f6:	4a0a      	ldr	r2, [pc, #40]	; (8009520 <vPortSetupTimerInterrupt+0x40>)
 80094f8:	fba2 2303 	umull	r2, r3, r2, r3
 80094fc:	09db      	lsrs	r3, r3, #7
 80094fe:	4a09      	ldr	r2, [pc, #36]	; (8009524 <vPortSetupTimerInterrupt+0x44>)
 8009500:	3b01      	subs	r3, #1
 8009502:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009504:	4b03      	ldr	r3, [pc, #12]	; (8009514 <vPortSetupTimerInterrupt+0x34>)
 8009506:	2207      	movs	r2, #7
 8009508:	601a      	str	r2, [r3, #0]
}
 800950a:	bf00      	nop
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	e000e010 	.word	0xe000e010
 8009518:	e000e018 	.word	0xe000e018
 800951c:	20000018 	.word	0x20000018
 8009520:	0a7c5ac5 	.word	0x0a7c5ac5
 8009524:	e000e014 	.word	0xe000e014

08009528 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009528:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009538 <vPortEnableVFP+0x10>
 800952c:	6801      	ldr	r1, [r0, #0]
 800952e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009532:	6001      	str	r1, [r0, #0]
 8009534:	4770      	bx	lr
 8009536:	0000      	.short	0x0000
 8009538:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800953c:	bf00      	nop
 800953e:	bf00      	nop

08009540 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009546:	f3ef 8305 	mrs	r3, IPSR
 800954a:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b0f      	cmp	r3, #15
 8009550:	d90e      	bls.n	8009570 <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009552:	4a10      	ldr	r2, [pc, #64]	; (8009594 <vPortValidateInterruptPriority+0x54>)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800955c:	4b0e      	ldr	r3, [pc, #56]	; (8009598 <vPortValidateInterruptPriority+0x58>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	78fa      	ldrb	r2, [r7, #3]
 8009562:	429a      	cmp	r2, r3
 8009564:	d204      	bcs.n	8009570 <vPortValidateInterruptPriority+0x30>
 8009566:	490d      	ldr	r1, [pc, #52]	; (800959c <vPortValidateInterruptPriority+0x5c>)
 8009568:	f240 3049 	movw	r0, #841	; 0x349
 800956c:	f7f8 f988 	bl	8001880 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009570:	4b0b      	ldr	r3, [pc, #44]	; (80095a0 <vPortValidateInterruptPriority+0x60>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009578:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <vPortValidateInterruptPriority+0x64>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d904      	bls.n	800958a <vPortValidateInterruptPriority+0x4a>
 8009580:	4906      	ldr	r1, [pc, #24]	; (800959c <vPortValidateInterruptPriority+0x5c>)
 8009582:	f240 3059 	movw	r0, #857	; 0x359
 8009586:	f7f8 f97b 	bl	8001880 <vAssertCalled>
    }
 800958a:	bf00      	nop
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	e000e3f0 	.word	0xe000e3f0
 8009598:	2000046c 	.word	0x2000046c
 800959c:	0800b200 	.word	0x0800b200
 80095a0:	e000ed0c 	.word	0xe000ed0c
 80095a4:	20000470 	.word	0x20000470

080095a8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80095b0:	2300      	movs	r3, #0
 80095b2:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 80095b4:	f7fe fb94 	bl	8007ce0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80095b8:	4b5b      	ldr	r3, [pc, #364]	; (8009728 <pvPortMalloc+0x180>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80095c0:	f000 f918 	bl	80097f4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095c4:	4b59      	ldr	r3, [pc, #356]	; (800972c <pvPortMalloc+0x184>)
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4013      	ands	r3, r2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f040 809a 	bne.w	8009706 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d027      	beq.n	8009628 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80095d8:	2208      	movs	r2, #8
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d221      	bcs.n	8009628 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 80095e4:	2208      	movs	r2, #8
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4413      	add	r3, r2
 80095ea:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f003 0307 	and.w	r3, r3, #7
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d01b      	beq.n	800962e <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f023 0307 	bic.w	r3, r3, #7
 80095fc:	3308      	adds	r3, #8
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d20e      	bcs.n	8009622 <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f023 0307 	bic.w	r3, r3, #7
 800960a:	3308      	adds	r3, #8
 800960c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f003 0307 	and.w	r3, r3, #7
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00a      	beq.n	800962e <pvPortMalloc+0x86>
 8009618:	4945      	ldr	r1, [pc, #276]	; (8009730 <pvPortMalloc+0x188>)
 800961a:	209a      	movs	r0, #154	; 0x9a
 800961c:	f7f8 f930 	bl	8001880 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009620:	e005      	b.n	800962e <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009626:	e002      	b.n	800962e <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	607b      	str	r3, [r7, #4]
 800962c:	e000      	b.n	8009630 <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800962e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d067      	beq.n	8009706 <pvPortMalloc+0x15e>
 8009636:	4b3f      	ldr	r3, [pc, #252]	; (8009734 <pvPortMalloc+0x18c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	429a      	cmp	r2, r3
 800963e:	d862      	bhi.n	8009706 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009640:	4b3d      	ldr	r3, [pc, #244]	; (8009738 <pvPortMalloc+0x190>)
 8009642:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8009644:	4b3c      	ldr	r3, [pc, #240]	; (8009738 <pvPortMalloc+0x190>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800964a:	e004      	b.n	8009656 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	429a      	cmp	r2, r3
 800965e:	d903      	bls.n	8009668 <pvPortMalloc+0xc0>
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1f1      	bne.n	800964c <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8009668:	4b2f      	ldr	r3, [pc, #188]	; (8009728 <pvPortMalloc+0x180>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	429a      	cmp	r2, r3
 8009670:	d049      	beq.n	8009706 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2208      	movs	r2, #8
 8009678:	4413      	add	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	1ad2      	subs	r2, r2, r3
 800968c:	2308      	movs	r3, #8
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	429a      	cmp	r2, r3
 8009692:	d918      	bls.n	80096c6 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4413      	add	r3, r2
 800969a:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <pvPortMalloc+0x106>
 80096a6:	4922      	ldr	r1, [pc, #136]	; (8009730 <pvPortMalloc+0x188>)
 80096a8:	20cd      	movs	r0, #205	; 0xcd
 80096aa:	f7f8 f8e9 	bl	8001880 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	1ad2      	subs	r2, r2, r3
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096c0:	68b8      	ldr	r0, [r7, #8]
 80096c2:	f000 f8f9 	bl	80098b8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096c6:	4b1b      	ldr	r3, [pc, #108]	; (8009734 <pvPortMalloc+0x18c>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	4a18      	ldr	r2, [pc, #96]	; (8009734 <pvPortMalloc+0x18c>)
 80096d2:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096d4:	4b17      	ldr	r3, [pc, #92]	; (8009734 <pvPortMalloc+0x18c>)
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	4b18      	ldr	r3, [pc, #96]	; (800973c <pvPortMalloc+0x194>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d203      	bcs.n	80096e8 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096e0:	4b14      	ldr	r3, [pc, #80]	; (8009734 <pvPortMalloc+0x18c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a15      	ldr	r2, [pc, #84]	; (800973c <pvPortMalloc+0x194>)
 80096e6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	4b0f      	ldr	r3, [pc, #60]	; (800972c <pvPortMalloc+0x184>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	431a      	orrs	r2, r3
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2200      	movs	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80096fc:	4b10      	ldr	r3, [pc, #64]	; (8009740 <pvPortMalloc+0x198>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3301      	adds	r3, #1
 8009702:	4a0f      	ldr	r2, [pc, #60]	; (8009740 <pvPortMalloc+0x198>)
 8009704:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009706:	f7fe faf9 	bl	8007cfc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f003 0307 	and.w	r3, r3, #7
 8009710:	2b00      	cmp	r3, #0
 8009712:	d004      	beq.n	800971e <pvPortMalloc+0x176>
 8009714:	4906      	ldr	r1, [pc, #24]	; (8009730 <pvPortMalloc+0x188>)
 8009716:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800971a:	f7f8 f8b1 	bl	8001880 <vAssertCalled>
    return pvReturn;
 800971e:	68fb      	ldr	r3, [r7, #12]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	2001947c 	.word	0x2001947c
 800972c:	20019490 	.word	0x20019490
 8009730:	0800b238 	.word	0x0800b238
 8009734:	20019480 	.word	0x20019480
 8009738:	20019474 	.word	0x20019474
 800973c:	20019484 	.word	0x20019484
 8009740:	20019488 	.word	0x20019488

08009744 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d041      	beq.n	80097da <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8009756:	2308      	movs	r3, #8
 8009758:	425b      	negs	r3, r3
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	4413      	add	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	4b1e      	ldr	r3, [pc, #120]	; (80097e4 <vPortFree+0xa0>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4013      	ands	r3, r2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d104      	bne.n	800977c <vPortFree+0x38>
 8009772:	491d      	ldr	r1, [pc, #116]	; (80097e8 <vPortFree+0xa4>)
 8009774:	f44f 7091 	mov.w	r0, #290	; 0x122
 8009778:	f7f8 f882 	bl	8001880 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <vPortFree+0x4a>
 8009784:	4918      	ldr	r1, [pc, #96]	; (80097e8 <vPortFree+0xa4>)
 8009786:	f240 1023 	movw	r0, #291	; 0x123
 800978a:	f7f8 f879 	bl	8001880 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	4b14      	ldr	r3, [pc, #80]	; (80097e4 <vPortFree+0xa0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4013      	ands	r3, r2
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01e      	beq.n	80097da <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d11a      	bne.n	80097da <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	4b0e      	ldr	r3, [pc, #56]	; (80097e4 <vPortFree+0xa0>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	43db      	mvns	r3, r3
 80097ae:	401a      	ands	r2, r3
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80097b4:	f7fe fa94 	bl	8007ce0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	4b0b      	ldr	r3, [pc, #44]	; (80097ec <vPortFree+0xa8>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4413      	add	r3, r2
 80097c2:	4a0a      	ldr	r2, [pc, #40]	; (80097ec <vPortFree+0xa8>)
 80097c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097c6:	68b8      	ldr	r0, [r7, #8]
 80097c8:	f000 f876 	bl	80098b8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80097cc:	4b08      	ldr	r3, [pc, #32]	; (80097f0 <vPortFree+0xac>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3301      	adds	r3, #1
 80097d2:	4a07      	ldr	r2, [pc, #28]	; (80097f0 <vPortFree+0xac>)
 80097d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80097d6:	f7fe fa91 	bl	8007cfc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80097da:	bf00      	nop
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20019490 	.word	0x20019490
 80097e8:	0800b238 	.word	0x0800b238
 80097ec:	20019480 	.word	0x20019480
 80097f0:	2001948c 	.word	0x2001948c

080097f4 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097fa:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80097fe:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8009800:	4b27      	ldr	r3, [pc, #156]	; (80098a0 <prvHeapInit+0xac>)
 8009802:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00c      	beq.n	8009828 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3307      	adds	r3, #7
 8009812:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f023 0307 	bic.w	r3, r3, #7
 800981a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	4a1f      	ldr	r2, [pc, #124]	; (80098a0 <prvHeapInit+0xac>)
 8009824:	4413      	add	r3, r2
 8009826:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800982c:	4a1d      	ldr	r2, [pc, #116]	; (80098a4 <prvHeapInit+0xb0>)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8009832:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <prvHeapInit+0xb0>)
 8009834:	2200      	movs	r2, #0
 8009836:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	4413      	add	r3, r2
 800983e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8009840:	2208      	movs	r2, #8
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	1a9b      	subs	r3, r3, r2
 8009846:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f023 0307 	bic.w	r3, r3, #7
 800984e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4a15      	ldr	r2, [pc, #84]	; (80098a8 <prvHeapInit+0xb4>)
 8009854:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009856:	4b14      	ldr	r3, [pc, #80]	; (80098a8 <prvHeapInit+0xb4>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2200      	movs	r2, #0
 800985c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800985e:	4b12      	ldr	r3, [pc, #72]	; (80098a8 <prvHeapInit+0xb4>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	1ad2      	subs	r2, r2, r3
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009874:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <prvHeapInit+0xb4>)
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <prvHeapInit+0xb8>)
 8009882:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	4a09      	ldr	r2, [pc, #36]	; (80098b0 <prvHeapInit+0xbc>)
 800988a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800988c:	4b09      	ldr	r3, [pc, #36]	; (80098b4 <prvHeapInit+0xc0>)
 800988e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009892:	601a      	str	r2, [r3, #0]
}
 8009894:	bf00      	nop
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	20000474 	.word	0x20000474
 80098a4:	20019474 	.word	0x20019474
 80098a8:	2001947c 	.word	0x2001947c
 80098ac:	20019484 	.word	0x20019484
 80098b0:	20019480 	.word	0x20019480
 80098b4:	20019490 	.word	0x20019490

080098b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098c0:	4b28      	ldr	r3, [pc, #160]	; (8009964 <prvInsertBlockIntoFreeList+0xac>)
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	e002      	b.n	80098cc <prvInsertBlockIntoFreeList+0x14>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	60fb      	str	r3, [r7, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d8f7      	bhi.n	80098c6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	4413      	add	r3, r2
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d108      	bne.n	80098fa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	441a      	add	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	441a      	add	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	429a      	cmp	r2, r3
 800990c:	d118      	bne.n	8009940 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	4b15      	ldr	r3, [pc, #84]	; (8009968 <prvInsertBlockIntoFreeList+0xb0>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	429a      	cmp	r2, r3
 8009918:	d00d      	beq.n	8009936 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	441a      	add	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	e008      	b.n	8009948 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009936:	4b0c      	ldr	r3, [pc, #48]	; (8009968 <prvInsertBlockIntoFreeList+0xb0>)
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	e003      	b.n	8009948 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	429a      	cmp	r2, r3
 800994e:	d002      	beq.n	8009956 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009956:	bf00      	nop
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	20019474 	.word	0x20019474
 8009968:	2001947c 	.word	0x2001947c

0800996c <RTC_decToBcd>:



// Convert normal decimal numbers to binary coded decimal
uint8_t RTC_decToBcd(int val)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a0f      	ldr	r2, [pc, #60]	; (80099b4 <RTC_decToBcd+0x48>)
 8009978:	fb82 1203 	smull	r1, r2, r2, r3
 800997c:	1092      	asrs	r2, r2, #2
 800997e:	17db      	asrs	r3, r3, #31
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	b2db      	uxtb	r3, r3
 8009984:	011b      	lsls	r3, r3, #4
 8009986:	b2d8      	uxtb	r0, r3
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <RTC_decToBcd+0x48>)
 800998c:	fb83 1302 	smull	r1, r3, r3, r2
 8009990:	1099      	asrs	r1, r3, #2
 8009992:	17d3      	asrs	r3, r2, #31
 8009994:	1ac9      	subs	r1, r1, r3
 8009996:	460b      	mov	r3, r1
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	440b      	add	r3, r1
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	1ad1      	subs	r1, r2, r3
 80099a0:	b2cb      	uxtb	r3, r1
 80099a2:	4403      	add	r3, r0
 80099a4:	b2db      	uxtb	r3, r3
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	66666667 	.word	0x66666667

080099b8 <RTC_bcdToDec>:

// Convert binary coded decimal to normal decimal numbers
int RTC_bcdToDec(uint8_t val)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80099c2:	79fb      	ldrb	r3, [r7, #7]
 80099c4:	091b      	lsrs	r3, r3, #4
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	461a      	mov	r2, r3
 80099ca:	4613      	mov	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	005b      	lsls	r3, r3, #1
 80099d2:	461a      	mov	r2, r3
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	f003 030f 	and.w	r3, r3, #15
 80099da:	4413      	add	r3, r2
}
 80099dc:	4618      	mov	r0, r3
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <RTC_Set_Time>:

//void RTC_Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
void RTC_Set_Time (RTC_TIME *time)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af04      	add	r7, sp, #16
 80099ee:	6078      	str	r0, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = RTC_decToBcd(time->seconds);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7ff ffb9 	bl	800996c <RTC_decToBcd>
 80099fa:	4603      	mov	r3, r0
 80099fc:	723b      	strb	r3, [r7, #8]
	set_time[1] = RTC_decToBcd(time->minutes);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	785b      	ldrb	r3, [r3, #1]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7ff ffb2 	bl	800996c <RTC_decToBcd>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	727b      	strb	r3, [r7, #9]
	set_time[2] = RTC_decToBcd(time->hour);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	789b      	ldrb	r3, [r3, #2]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7ff ffab 	bl	800996c <RTC_decToBcd>
 8009a16:	4603      	mov	r3, r0
 8009a18:	72bb      	strb	r3, [r7, #10]
	set_time[3] = RTC_decToBcd(time->dayofweek);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	78db      	ldrb	r3, [r3, #3]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7ff ffa4 	bl	800996c <RTC_decToBcd>
 8009a24:	4603      	mov	r3, r0
 8009a26:	72fb      	strb	r3, [r7, #11]
	set_time[4] = RTC_decToBcd(time->dayofmonth);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	791b      	ldrb	r3, [r3, #4]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff ff9d 	bl	800996c <RTC_decToBcd>
 8009a32:	4603      	mov	r3, r0
 8009a34:	733b      	strb	r3, [r7, #12]
	set_time[5] = RTC_decToBcd(time->month);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	795b      	ldrb	r3, [r3, #5]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff ff96 	bl	800996c <RTC_decToBcd>
 8009a40:	4603      	mov	r3, r0
 8009a42:	737b      	strb	r3, [r7, #13]
	set_time[6] = RTC_decToBcd(time->year);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	799b      	ldrb	r3, [r3, #6]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff ff8f 	bl	800996c <RTC_decToBcd>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, portMAX_DELAY);
 8009a52:	f04f 33ff 	mov.w	r3, #4294967295
 8009a56:	9302      	str	r3, [sp, #8]
 8009a58:	2307      	movs	r3, #7
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	f107 0308 	add.w	r3, r7, #8
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	2301      	movs	r3, #1
 8009a64:	2200      	movs	r2, #0
 8009a66:	21d0      	movs	r1, #208	; 0xd0
 8009a68:	4803      	ldr	r0, [pc, #12]	; (8009a78 <RTC_Set_Time+0x90>)
 8009a6a:	f7f8 fe0f 	bl	800268c <HAL_I2C_Mem_Write>

}
 8009a6e:	bf00      	nop
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20000128 	.word	0x20000128

08009a7c <RTC_Get_Time>:

void RTC_Get_Time (RTC_TIME *time)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b088      	sub	sp, #32
 8009a80:	af04      	add	r7, sp, #16
 8009a82:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, portMAX_DELAY);
 8009a84:	f04f 33ff 	mov.w	r3, #4294967295
 8009a88:	9302      	str	r3, [sp, #8]
 8009a8a:	2307      	movs	r3, #7
 8009a8c:	9301      	str	r3, [sp, #4]
 8009a8e:	f107 0308 	add.w	r3, r7, #8
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	2301      	movs	r3, #1
 8009a96:	2200      	movs	r2, #0
 8009a98:	21d0      	movs	r1, #208	; 0xd0
 8009a9a:	481f      	ldr	r0, [pc, #124]	; (8009b18 <RTC_Get_Time+0x9c>)
 8009a9c:	f7f8 ff0a 	bl	80028b4 <HAL_I2C_Mem_Read>
	time->seconds = RTC_bcdToDec(get_time[0]);
 8009aa0:	7a3b      	ldrb	r3, [r7, #8]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7ff ff88 	bl	80099b8 <RTC_bcdToDec>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	701a      	strb	r2, [r3, #0]
	time->minutes = RTC_bcdToDec(get_time[1]);
 8009ab0:	7a7b      	ldrb	r3, [r7, #9]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff ff80 	bl	80099b8 <RTC_bcdToDec>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	705a      	strb	r2, [r3, #1]
	time->hour = RTC_bcdToDec(get_time[2]);
 8009ac0:	7abb      	ldrb	r3, [r7, #10]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff ff78 	bl	80099b8 <RTC_bcdToDec>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	709a      	strb	r2, [r3, #2]
	time->dayofweek = RTC_bcdToDec(get_time[3]);
 8009ad0:	7afb      	ldrb	r3, [r7, #11]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7ff ff70 	bl	80099b8 <RTC_bcdToDec>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	70da      	strb	r2, [r3, #3]
	time->dayofmonth = RTC_bcdToDec(get_time[4]);
 8009ae0:	7b3b      	ldrb	r3, [r7, #12]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7ff ff68 	bl	80099b8 <RTC_bcdToDec>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	711a      	strb	r2, [r3, #4]
	time->month = RTC_bcdToDec(get_time[5]);
 8009af0:	7b7b      	ldrb	r3, [r7, #13]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff ff60 	bl	80099b8 <RTC_bcdToDec>
 8009af8:	4603      	mov	r3, r0
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	715a      	strb	r2, [r3, #5]
	time->year = RTC_bcdToDec(get_time[6]);
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7ff ff58 	bl	80099b8 <RTC_bcdToDec>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	719a      	strb	r2, [r3, #6]
}
 8009b10:	bf00      	nop
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	20000128 	.word	0x20000128

08009b1c <show_time_date>:


void show_time_date(RTC_TIME *time)
{
 8009b1c:	b5b0      	push	{r4, r5, r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af04      	add	r7, sp, #16
 8009b22:	6078      	str	r0, [r7, #4]
	static char buffer[60];
	 static char *rtc_time = buffer ;
//	memset(&rtc_time,0,sizeof(rtc_time)) ;
	RTC_Get_Time(time) ;
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7ff ffa9 	bl	8009a7c <RTC_Get_Time>
	 sprintf ((char *)buffer, "Time&Date :  %02d:%02d:%02d     %02d-%02d-20%02d \n",  time->hour, time->minutes, time->seconds ,time->dayofmonth, time->month, time->year);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	789b      	ldrb	r3, [r3, #2]
 8009b2e:	461c      	mov	r4, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	785b      	ldrb	r3, [r3, #1]
 8009b34:	461d      	mov	r5, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	791b      	ldrb	r3, [r3, #4]
 8009b40:	4619      	mov	r1, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	795b      	ldrb	r3, [r3, #5]
 8009b46:	4618      	mov	r0, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	799b      	ldrb	r3, [r3, #6]
 8009b4c:	9303      	str	r3, [sp, #12]
 8009b4e:	9002      	str	r0, [sp, #8]
 8009b50:	9101      	str	r1, [sp, #4]
 8009b52:	9200      	str	r2, [sp, #0]
 8009b54:	462b      	mov	r3, r5
 8009b56:	4622      	mov	r2, r4
 8009b58:	490b      	ldr	r1, [pc, #44]	; (8009b88 <show_time_date+0x6c>)
 8009b5a:	480c      	ldr	r0, [pc, #48]	; (8009b8c <show_time_date+0x70>)
 8009b5c:	f000 fd60 	bl	800a620 <siprintf>
	 HAL_UART_Transmit(&huart3,(uint8_t*)rtc_time, strlen(rtc_time), HAL_MAX_DELAY);
 8009b60:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <show_time_date+0x74>)
 8009b62:	681c      	ldr	r4, [r3, #0]
 8009b64:	4b0a      	ldr	r3, [pc, #40]	; (8009b90 <show_time_date+0x74>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7f6 fb69 	bl	8000240 <strlen>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	f04f 33ff 	mov.w	r3, #4294967295
 8009b76:	4621      	mov	r1, r4
 8009b78:	4806      	ldr	r0, [pc, #24]	; (8009b94 <show_time_date+0x78>)
 8009b7a:	f7fb fd5f 	bl	800563c <HAL_UART_Transmit>

}
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bdb0      	pop	{r4, r5, r7, pc}
 8009b86:	bf00      	nop
 8009b88:	0800b26c 	.word	0x0800b26c
 8009b8c:	20019494 	.word	0x20019494
 8009b90:	20000040 	.word	0x20000040
 8009b94:	200001d8 	.word	0x200001d8

08009b98 <validate_rtc_information>:


int validate_rtc_information (RTC_TIME *time)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
	if ( time->hour > 24 || time->minutes > 59 || time->seconds > 59 || time->dayofweek > 7 || time->dayofmonth > 31 || time->month > 12 || time->year > 99 )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	789b      	ldrb	r3, [r3, #2]
 8009ba4:	2b18      	cmp	r3, #24
 8009ba6:	d817      	bhi.n	8009bd8 <validate_rtc_information+0x40>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	785b      	ldrb	r3, [r3, #1]
 8009bac:	2b3b      	cmp	r3, #59	; 0x3b
 8009bae:	d813      	bhi.n	8009bd8 <validate_rtc_information+0x40>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b3b      	cmp	r3, #59	; 0x3b
 8009bb6:	d80f      	bhi.n	8009bd8 <validate_rtc_information+0x40>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	78db      	ldrb	r3, [r3, #3]
 8009bbc:	2b07      	cmp	r3, #7
 8009bbe:	d80b      	bhi.n	8009bd8 <validate_rtc_information+0x40>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	791b      	ldrb	r3, [r3, #4]
 8009bc4:	2b1f      	cmp	r3, #31
 8009bc6:	d807      	bhi.n	8009bd8 <validate_rtc_information+0x40>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	795b      	ldrb	r3, [r3, #5]
 8009bcc:	2b0c      	cmp	r3, #12
 8009bce:	d803      	bhi.n	8009bd8 <validate_rtc_information+0x40>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	799b      	ldrb	r3, [r3, #6]
 8009bd4:	2b63      	cmp	r3, #99	; 0x63
 8009bd6:	d901      	bls.n	8009bdc <validate_rtc_information+0x44>
	{
		return 1 ;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e000      	b.n	8009bde <validate_rtc_information+0x46>
	}
	return 0 ;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
	...

08009bec <SELECT>:
#define SD_CS_GPIO_Port GPIOF
#define SD_CS_Pin GPIO_PIN_12

/* SPI Chip Select */
static void SELECT(void)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009bf6:	4802      	ldr	r0, [pc, #8]	; (8009c00 <SELECT+0x14>)
 8009bf8:	f7f8 fc9e 	bl	8002538 <HAL_GPIO_WritePin>
}
 8009bfc:	bf00      	nop
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	40021400 	.word	0x40021400

08009c04 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c0e:	4802      	ldr	r0, [pc, #8]	; (8009c18 <DESELECT+0x14>)
 8009c10:	f7f8 fc92 	bl	8002538 <HAL_GPIO_WritePin>
}
 8009c14:	bf00      	nop
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	40021400 	.word	0x40021400

08009c1c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8009c26:	bf00      	nop
 8009c28:	4808      	ldr	r0, [pc, #32]	; (8009c4c <SPI_TxByte+0x30>)
 8009c2a:	f7fb f843 	bl	8004cb4 <HAL_SPI_GetState>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d1f9      	bne.n	8009c28 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8009c34:	1df9      	adds	r1, r7, #7
 8009c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	4803      	ldr	r0, [pc, #12]	; (8009c4c <SPI_TxByte+0x30>)
 8009c3e:	f7fa fcb8 	bl	80045b2 <HAL_SPI_Transmit>
}
 8009c42:	bf00      	nop
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20000174 	.word	0x20000174

08009c50 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8009c56:	23ff      	movs	r3, #255	; 0xff
 8009c58:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8009c5e:	bf00      	nop
 8009c60:	4809      	ldr	r0, [pc, #36]	; (8009c88 <SPI_RxByte+0x38>)
 8009c62:	f7fb f827 	bl	8004cb4 <HAL_SPI_GetState>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d1f9      	bne.n	8009c60 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8009c6c:	1dba      	adds	r2, r7, #6
 8009c6e:	1df9      	adds	r1, r7, #7
 8009c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	2301      	movs	r3, #1
 8009c78:	4803      	ldr	r0, [pc, #12]	; (8009c88 <SPI_RxByte+0x38>)
 8009c7a:	f7fa fe08 	bl	800488e <HAL_SPI_TransmitReceive>

  return data;
 8009c7e:	79bb      	ldrb	r3, [r7, #6]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	20000174 	.word	0x20000174

08009c8c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8009c94:	f7ff ffdc 	bl	8009c50 <SPI_RxByte>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	701a      	strb	r2, [r3, #0]
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8009cae:	4b0b      	ldr	r3, [pc, #44]	; (8009cdc <SD_ReadyWait+0x34>)
 8009cb0:	2232      	movs	r2, #50	; 0x32
 8009cb2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8009cb4:	f7ff ffcc 	bl	8009c50 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8009cb8:	f7ff ffca 	bl	8009c50 <SPI_RxByte>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	2bff      	cmp	r3, #255	; 0xff
 8009cc4:	d004      	beq.n	8009cd0 <SD_ReadyWait+0x28>
 8009cc6:	4b05      	ldr	r3, [pc, #20]	; (8009cdc <SD_ReadyWait+0x34>)
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1f3      	bne.n	8009cb8 <SD_ReadyWait+0x10>

  return res;
 8009cd0:	79fb      	ldrb	r3, [r7, #7]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	200002cc 	.word	0x200002cc

08009ce0 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8009ce6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8009cea:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8009cec:	f7ff ff8a 	bl	8009c04 <DESELECT>

  for(int i = 0; i < 10; i++)
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	613b      	str	r3, [r7, #16]
 8009cf4:	e005      	b.n	8009d02 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8009cf6:	20ff      	movs	r0, #255	; 0xff
 8009cf8:	f7ff ff90 	bl	8009c1c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	613b      	str	r3, [r7, #16]
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	2b09      	cmp	r3, #9
 8009d06:	ddf6      	ble.n	8009cf6 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8009d08:	f7ff ff70 	bl	8009bec <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8009d0c:	2340      	movs	r3, #64	; 0x40
 8009d0e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8009d20:	2395      	movs	r3, #149	; 0x95
 8009d22:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8009d24:	2300      	movs	r3, #0
 8009d26:	60fb      	str	r3, [r7, #12]
 8009d28:	e009      	b.n	8009d3e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8009d2a:	1d3a      	adds	r2, r7, #4
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4413      	add	r3, r2
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7ff ff72 	bl	8009c1c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	60fb      	str	r3, [r7, #12]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b05      	cmp	r3, #5
 8009d42:	ddf2      	ble.n	8009d2a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8009d44:	e002      	b.n	8009d4c <SD_PowerOn+0x6c>
  {
    Count--;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8009d4c:	f7ff ff80 	bl	8009c50 <SPI_RxByte>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d002      	beq.n	8009d5c <SD_PowerOn+0x7c>
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f4      	bne.n	8009d46 <SD_PowerOn+0x66>
  }

  DESELECT();
 8009d5c:	f7ff ff52 	bl	8009c04 <DESELECT>
  SPI_TxByte(0XFF);
 8009d60:	20ff      	movs	r0, #255	; 0xff
 8009d62:	f7ff ff5b 	bl	8009c1c <SPI_TxByte>

  PowerFlag = 1;
 8009d66:	4b03      	ldr	r3, [pc, #12]	; (8009d74 <SD_PowerOn+0x94>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	701a      	strb	r2, [r3, #0]
}
 8009d6c:	bf00      	nop
 8009d6e:	3718      	adds	r7, #24
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	200194d1 	.word	0x200194d1

08009d78 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8009d7c:	4b03      	ldr	r3, [pc, #12]	; (8009d8c <SD_PowerOff+0x14>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	701a      	strb	r2, [r3, #0]
}
 8009d82:	bf00      	nop
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	200194d1 	.word	0x200194d1

08009d90 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8009d90:	b480      	push	{r7}
 8009d92:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8009d94:	4b03      	ldr	r3, [pc, #12]	; (8009da4 <SD_CheckPower+0x14>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	200194d1 	.word	0x200194d1

08009da8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8009db2:	4b17      	ldr	r3, [pc, #92]	; (8009e10 <SD_RxDataBlock+0x68>)
 8009db4:	220a      	movs	r2, #10
 8009db6:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8009db8:	f7ff ff4a 	bl	8009c50 <SPI_RxByte>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
 8009dc2:	2bff      	cmp	r3, #255	; 0xff
 8009dc4:	d104      	bne.n	8009dd0 <SD_RxDataBlock+0x28>
 8009dc6:	4b12      	ldr	r3, [pc, #72]	; (8009e10 <SD_RxDataBlock+0x68>)
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1f3      	bne.n	8009db8 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	2bfe      	cmp	r3, #254	; 0xfe
 8009dd4:	d001      	beq.n	8009dda <SD_RxDataBlock+0x32>
    return FALSE;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	e016      	b.n	8009e08 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7ff ff53 	bl	8009c8c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	1c5a      	adds	r2, r3, #1
 8009dea:	607a      	str	r2, [r7, #4]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7ff ff4d 	bl	8009c8c <SPI_RxBytePtr>
  } while(btr -= 2);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	3b02      	subs	r3, #2
 8009df6:	603b      	str	r3, [r7, #0]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1ed      	bne.n	8009dda <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8009dfe:	f7ff ff27 	bl	8009c50 <SPI_RxByte>
  SPI_RxByte();
 8009e02:	f7ff ff25 	bl	8009c50 <SPI_RxByte>

  return TRUE;
 8009e06:	2301      	movs	r3, #1
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	200002ca 	.word	0x200002ca

08009e14 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8009e24:	f7ff ff40 	bl	8009ca8 <SD_ReadyWait>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2bff      	cmp	r3, #255	; 0xff
 8009e2c:	d001      	beq.n	8009e32 <SD_TxDataBlock+0x1e>
    return FALSE;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e040      	b.n	8009eb4 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8009e32:	78fb      	ldrb	r3, [r7, #3]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7ff fef1 	bl	8009c1c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8009e3a:	78fb      	ldrb	r3, [r7, #3]
 8009e3c:	2bfd      	cmp	r3, #253	; 0xfd
 8009e3e:	d031      	beq.n	8009ea4 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	607a      	str	r2, [r7, #4]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff fee5 	bl	8009c1c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	1c5a      	adds	r2, r3, #1
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7ff fede 	bl	8009c1c <SPI_TxByte>
    } while (--wc);
 8009e60:	7bbb      	ldrb	r3, [r7, #14]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	73bb      	strb	r3, [r7, #14]
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1eb      	bne.n	8009e44 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8009e6c:	f7ff fef0 	bl	8009c50 <SPI_RxByte>
    SPI_RxByte();
 8009e70:	f7ff feee 	bl	8009c50 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8009e74:	e00b      	b.n	8009e8e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8009e76:	f7ff feeb 	bl	8009c50 <SPI_RxByte>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	f003 031f 	and.w	r3, r3, #31
 8009e84:	2b05      	cmp	r3, #5
 8009e86:	d006      	beq.n	8009e96 <SD_TxDataBlock+0x82>
        break;

      i++;
 8009e88:	7b7b      	ldrb	r3, [r7, #13]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8009e8e:	7b7b      	ldrb	r3, [r7, #13]
 8009e90:	2b40      	cmp	r3, #64	; 0x40
 8009e92:	d9f0      	bls.n	8009e76 <SD_TxDataBlock+0x62>
 8009e94:	e000      	b.n	8009e98 <SD_TxDataBlock+0x84>
        break;
 8009e96:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8009e98:	bf00      	nop
 8009e9a:	f7ff fed9 	bl	8009c50 <SPI_RxByte>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d0fa      	beq.n	8009e9a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
 8009ea6:	f003 031f 	and.w	r3, r3, #31
 8009eaa:	2b05      	cmp	r3, #5
 8009eac:	d101      	bne.n	8009eb2 <SD_TxDataBlock+0x9e>
    return TRUE;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	6039      	str	r1, [r7, #0]
 8009ec6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8009ec8:	f7ff feee 	bl	8009ca8 <SD_ReadyWait>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2bff      	cmp	r3, #255	; 0xff
 8009ed0:	d001      	beq.n	8009ed6 <SD_SendCmd+0x1a>
    return 0xFF;
 8009ed2:	23ff      	movs	r3, #255	; 0xff
 8009ed4:	e040      	b.n	8009f58 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7ff fe9f 	bl	8009c1c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	0e1b      	lsrs	r3, r3, #24
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7ff fe99 	bl	8009c1c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	0c1b      	lsrs	r3, r3, #16
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7ff fe93 	bl	8009c1c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	0a1b      	lsrs	r3, r3, #8
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7ff fe8d 	bl	8009c1c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff fe88 	bl	8009c1c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8009f10:	79fb      	ldrb	r3, [r7, #7]
 8009f12:	2b40      	cmp	r3, #64	; 0x40
 8009f14:	d101      	bne.n	8009f1a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8009f16:	2395      	movs	r3, #149	; 0x95
 8009f18:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8009f1a:	79fb      	ldrb	r3, [r7, #7]
 8009f1c:	2b48      	cmp	r3, #72	; 0x48
 8009f1e:	d101      	bne.n	8009f24 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8009f20:	2387      	movs	r3, #135	; 0x87
 8009f22:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff fe78 	bl	8009c1c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8009f2c:	79fb      	ldrb	r3, [r7, #7]
 8009f2e:	2b4c      	cmp	r3, #76	; 0x4c
 8009f30:	d101      	bne.n	8009f36 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8009f32:	f7ff fe8d 	bl	8009c50 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8009f36:	230a      	movs	r3, #10
 8009f38:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8009f3a:	f7ff fe89 	bl	8009c50 <SPI_RxByte>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8009f42:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	da05      	bge.n	8009f56 <SD_SendCmd+0x9a>
 8009f4a:	7bbb      	ldrb	r3, [r7, #14]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	73bb      	strb	r3, [r7, #14]
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1f1      	bne.n	8009f3a <SD_SendCmd+0x7e>

  return res;
 8009f56:	7b7b      	ldrb	r3, [r7, #13]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8009f6a:	79fb      	ldrb	r3, [r7, #7]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e0d5      	b.n	800a120 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8009f74:	4b6c      	ldr	r3, [pc, #432]	; (800a128 <SD_disk_initialize+0x1c8>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	f003 0302 	and.w	r3, r3, #2
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <SD_disk_initialize+0x2a>
    return Stat;
 8009f82:	4b69      	ldr	r3, [pc, #420]	; (800a128 <SD_disk_initialize+0x1c8>)
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	e0ca      	b.n	800a120 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8009f8a:	f7ff fea9 	bl	8009ce0 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8009f8e:	f7ff fe2d 	bl	8009bec <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8009f92:	2300      	movs	r3, #0
 8009f94:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8009f96:	2100      	movs	r1, #0
 8009f98:	2040      	movs	r0, #64	; 0x40
 8009f9a:	f7ff ff8f 	bl	8009ebc <SD_SendCmd>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	f040 80a5 	bne.w	800a0f0 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8009fa6:	4b61      	ldr	r3, [pc, #388]	; (800a12c <SD_disk_initialize+0x1cc>)
 8009fa8:	2264      	movs	r2, #100	; 0x64
 8009faa:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8009fac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009fb0:	2048      	movs	r0, #72	; 0x48
 8009fb2:	f7ff ff83 	bl	8009ebc <SD_SendCmd>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d158      	bne.n	800a06e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]
 8009fc0:	e00c      	b.n	8009fdc <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8009fc2:	7bfc      	ldrb	r4, [r7, #15]
 8009fc4:	f7ff fe44 	bl	8009c50 <SPI_RxByte>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f104 0310 	add.w	r3, r4, #16
 8009fd0:	443b      	add	r3, r7
 8009fd2:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	73fb      	strb	r3, [r7, #15]
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d9ef      	bls.n	8009fc2 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8009fe2:	7abb      	ldrb	r3, [r7, #10]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	f040 8083 	bne.w	800a0f0 <SD_disk_initialize+0x190>
 8009fea:	7afb      	ldrb	r3, [r7, #11]
 8009fec:	2baa      	cmp	r3, #170	; 0xaa
 8009fee:	d17f      	bne.n	800a0f0 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	2077      	movs	r0, #119	; 0x77
 8009ff4:	f7ff ff62 	bl	8009ebc <SD_SendCmd>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d807      	bhi.n	800a00e <SD_disk_initialize+0xae>
 8009ffe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a002:	2069      	movs	r0, #105	; 0x69
 800a004:	f7ff ff5a 	bl	8009ebc <SD_SendCmd>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800a00e:	4b47      	ldr	r3, [pc, #284]	; (800a12c <SD_disk_initialize+0x1cc>)
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	b2db      	uxtb	r3, r3
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1eb      	bne.n	8009ff0 <SD_disk_initialize+0x90>
 800a018:	e000      	b.n	800a01c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800a01a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800a01c:	4b43      	ldr	r3, [pc, #268]	; (800a12c <SD_disk_initialize+0x1cc>)
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d064      	beq.n	800a0f0 <SD_disk_initialize+0x190>
 800a026:	2100      	movs	r1, #0
 800a028:	207a      	movs	r0, #122	; 0x7a
 800a02a:	f7ff ff47 	bl	8009ebc <SD_SendCmd>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d15d      	bne.n	800a0f0 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800a034:	2300      	movs	r3, #0
 800a036:	73fb      	strb	r3, [r7, #15]
 800a038:	e00c      	b.n	800a054 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800a03a:	7bfc      	ldrb	r4, [r7, #15]
 800a03c:	f7ff fe08 	bl	8009c50 <SPI_RxByte>
 800a040:	4603      	mov	r3, r0
 800a042:	461a      	mov	r2, r3
 800a044:	f104 0310 	add.w	r3, r4, #16
 800a048:	443b      	add	r3, r7
 800a04a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
 800a050:	3301      	adds	r3, #1
 800a052:	73fb      	strb	r3, [r7, #15]
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	2b03      	cmp	r3, #3
 800a058:	d9ef      	bls.n	800a03a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800a05a:	7a3b      	ldrb	r3, [r7, #8]
 800a05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <SD_disk_initialize+0x108>
 800a064:	2306      	movs	r3, #6
 800a066:	e000      	b.n	800a06a <SD_disk_initialize+0x10a>
 800a068:	2302      	movs	r3, #2
 800a06a:	73bb      	strb	r3, [r7, #14]
 800a06c:	e040      	b.n	800a0f0 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800a06e:	2100      	movs	r1, #0
 800a070:	2077      	movs	r0, #119	; 0x77
 800a072:	f7ff ff23 	bl	8009ebc <SD_SendCmd>
 800a076:	4603      	mov	r3, r0
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d808      	bhi.n	800a08e <SD_disk_initialize+0x12e>
 800a07c:	2100      	movs	r1, #0
 800a07e:	2069      	movs	r0, #105	; 0x69
 800a080:	f7ff ff1c 	bl	8009ebc <SD_SendCmd>
 800a084:	4603      	mov	r3, r0
 800a086:	2b01      	cmp	r3, #1
 800a088:	d801      	bhi.n	800a08e <SD_disk_initialize+0x12e>
 800a08a:	2302      	movs	r3, #2
 800a08c:	e000      	b.n	800a090 <SD_disk_initialize+0x130>
 800a08e:	2301      	movs	r3, #1
 800a090:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800a092:	7bbb      	ldrb	r3, [r7, #14]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d10e      	bne.n	800a0b6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800a098:	2100      	movs	r1, #0
 800a09a:	2077      	movs	r0, #119	; 0x77
 800a09c:	f7ff ff0e 	bl	8009ebc <SD_SendCmd>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d80e      	bhi.n	800a0c4 <SD_disk_initialize+0x164>
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	2069      	movs	r0, #105	; 0x69
 800a0aa:	f7ff ff07 	bl	8009ebc <SD_SendCmd>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d107      	bne.n	800a0c4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800a0b4:	e00d      	b.n	800a0d2 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	2041      	movs	r0, #65	; 0x41
 800a0ba:	f7ff feff 	bl	8009ebc <SD_SendCmd>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d005      	beq.n	800a0d0 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800a0c4:	4b19      	ldr	r3, [pc, #100]	; (800a12c <SD_disk_initialize+0x1cc>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1e1      	bne.n	800a092 <SD_disk_initialize+0x132>
 800a0ce:	e000      	b.n	800a0d2 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800a0d0:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800a0d2:	4b16      	ldr	r3, [pc, #88]	; (800a12c <SD_disk_initialize+0x1cc>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d007      	beq.n	800a0ec <SD_disk_initialize+0x18c>
 800a0dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0e0:	2050      	movs	r0, #80	; 0x50
 800a0e2:	f7ff feeb 	bl	8009ebc <SD_SendCmd>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800a0f0:	4a0f      	ldr	r2, [pc, #60]	; (800a130 <SD_disk_initialize+0x1d0>)
 800a0f2:	7bbb      	ldrb	r3, [r7, #14]
 800a0f4:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800a0f6:	f7ff fd85 	bl	8009c04 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800a0fa:	f7ff fda9 	bl	8009c50 <SPI_RxByte>

  if (type)
 800a0fe:	7bbb      	ldrb	r3, [r7, #14]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d008      	beq.n	800a116 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 800a104:	4b08      	ldr	r3, [pc, #32]	; (800a128 <SD_disk_initialize+0x1c8>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	f023 0301 	bic.w	r3, r3, #1
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	4b05      	ldr	r3, [pc, #20]	; (800a128 <SD_disk_initialize+0x1c8>)
 800a112:	701a      	strb	r2, [r3, #0]
 800a114:	e001      	b.n	800a11a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800a116:	f7ff fe2f 	bl	8009d78 <SD_PowerOff>
  }

  return Stat;
 800a11a:	4b03      	ldr	r3, [pc, #12]	; (800a128 <SD_disk_initialize+0x1c8>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	b2db      	uxtb	r3, r3
}
 800a120:	4618      	mov	r0, r3
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	bd90      	pop	{r4, r7, pc}
 800a128:	20000044 	.word	0x20000044
 800a12c:	200002ca 	.word	0x200002ca
 800a130:	200194d0 	.word	0x200194d0

0800a134 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	4603      	mov	r3, r0
 800a13c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <SD_disk_status+0x14>
    return STA_NOINIT;
 800a144:	2301      	movs	r3, #1
 800a146:	e002      	b.n	800a14e <SD_disk_status+0x1a>

  return Stat;
 800a148:	4b04      	ldr	r3, [pc, #16]	; (800a15c <SD_disk_status+0x28>)
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	b2db      	uxtb	r3, r3
}
 800a14e:	4618      	mov	r0, r3
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	20000044 	.word	0x20000044

0800a160 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	60b9      	str	r1, [r7, #8]
 800a168:	607a      	str	r2, [r7, #4]
 800a16a:	603b      	str	r3, [r7, #0]
 800a16c:	4603      	mov	r3, r0
 800a16e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d102      	bne.n	800a17c <SD_disk_read+0x1c>
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <SD_disk_read+0x20>
    return RES_PARERR;
 800a17c:	2304      	movs	r3, #4
 800a17e:	e051      	b.n	800a224 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 800a180:	4b2a      	ldr	r3, [pc, #168]	; (800a22c <SD_disk_read+0xcc>)
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	b2db      	uxtb	r3, r3
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800a18e:	2303      	movs	r3, #3
 800a190:	e048      	b.n	800a224 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800a192:	4b27      	ldr	r3, [pc, #156]	; (800a230 <SD_disk_read+0xd0>)
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	f003 0304 	and.w	r3, r3, #4
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d102      	bne.n	800a1a4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	025b      	lsls	r3, r3, #9
 800a1a2:	607b      	str	r3, [r7, #4]

  SELECT();
 800a1a4:	f7ff fd22 	bl	8009bec <SELECT>

  if (count == 1)
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d111      	bne.n	800a1d2 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	2051      	movs	r0, #81	; 0x51
 800a1b2:	f7ff fe83 	bl	8009ebc <SD_SendCmd>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d129      	bne.n	800a210 <SD_disk_read+0xb0>
 800a1bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1c0:	68b8      	ldr	r0, [r7, #8]
 800a1c2:	f7ff fdf1 	bl	8009da8 <SD_RxDataBlock>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d021      	beq.n	800a210 <SD_disk_read+0xb0>
      count = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	e01e      	b.n	800a210 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800a1d2:	6879      	ldr	r1, [r7, #4]
 800a1d4:	2052      	movs	r0, #82	; 0x52
 800a1d6:	f7ff fe71 	bl	8009ebc <SD_SendCmd>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d117      	bne.n	800a210 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800a1e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1e4:	68b8      	ldr	r0, [r7, #8]
 800a1e6:	f7ff fddf 	bl	8009da8 <SD_RxDataBlock>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00a      	beq.n	800a206 <SD_disk_read+0xa6>
          break;

        buff += 512;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a1f6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	603b      	str	r3, [r7, #0]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1ed      	bne.n	800a1e0 <SD_disk_read+0x80>
 800a204:	e000      	b.n	800a208 <SD_disk_read+0xa8>
          break;
 800a206:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800a208:	2100      	movs	r1, #0
 800a20a:	204c      	movs	r0, #76	; 0x4c
 800a20c:	f7ff fe56 	bl	8009ebc <SD_SendCmd>
    }
  }

  DESELECT();
 800a210:	f7ff fcf8 	bl	8009c04 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800a214:	f7ff fd1c 	bl	8009c50 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	bf14      	ite	ne
 800a21e:	2301      	movne	r3, #1
 800a220:	2300      	moveq	r3, #0
 800a222:	b2db      	uxtb	r3, r3
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20000044 	.word	0x20000044
 800a230:	200194d0 	.word	0x200194d0

0800a234 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60b9      	str	r1, [r7, #8]
 800a23c:	607a      	str	r2, [r7, #4]
 800a23e:	603b      	str	r3, [r7, #0]
 800a240:	4603      	mov	r3, r0
 800a242:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800a244:	7bfb      	ldrb	r3, [r7, #15]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d102      	bne.n	800a250 <SD_disk_write+0x1c>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <SD_disk_write+0x20>
    return RES_PARERR;
 800a250:	2304      	movs	r3, #4
 800a252:	e06b      	b.n	800a32c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 800a254:	4b37      	ldr	r3, [pc, #220]	; (800a334 <SD_disk_write+0x100>)
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	f003 0301 	and.w	r3, r3, #1
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800a262:	2303      	movs	r3, #3
 800a264:	e062      	b.n	800a32c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800a266:	4b33      	ldr	r3, [pc, #204]	; (800a334 <SD_disk_write+0x100>)
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <SD_disk_write+0x44>
    return RES_WRPRT;
 800a274:	2302      	movs	r3, #2
 800a276:	e059      	b.n	800a32c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800a278:	4b2f      	ldr	r3, [pc, #188]	; (800a338 <SD_disk_write+0x104>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	2b00      	cmp	r3, #0
 800a282:	d102      	bne.n	800a28a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	025b      	lsls	r3, r3, #9
 800a288:	607b      	str	r3, [r7, #4]

  SELECT();
 800a28a:	f7ff fcaf 	bl	8009bec <SELECT>

  if (count == 1)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d110      	bne.n	800a2b6 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800a294:	6879      	ldr	r1, [r7, #4]
 800a296:	2058      	movs	r0, #88	; 0x58
 800a298:	f7ff fe10 	bl	8009ebc <SD_SendCmd>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d13a      	bne.n	800a318 <SD_disk_write+0xe4>
 800a2a2:	21fe      	movs	r1, #254	; 0xfe
 800a2a4:	68b8      	ldr	r0, [r7, #8]
 800a2a6:	f7ff fdb5 	bl	8009e14 <SD_TxDataBlock>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d033      	beq.n	800a318 <SD_disk_write+0xe4>
      count = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	603b      	str	r3, [r7, #0]
 800a2b4:	e030      	b.n	800a318 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800a2b6:	4b20      	ldr	r3, [pc, #128]	; (800a338 <SD_disk_write+0x104>)
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d007      	beq.n	800a2d2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	2077      	movs	r0, #119	; 0x77
 800a2c6:	f7ff fdf9 	bl	8009ebc <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	2057      	movs	r0, #87	; 0x57
 800a2ce:	f7ff fdf5 	bl	8009ebc <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800a2d2:	6879      	ldr	r1, [r7, #4]
 800a2d4:	2059      	movs	r0, #89	; 0x59
 800a2d6:	f7ff fdf1 	bl	8009ebc <SD_SendCmd>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d11b      	bne.n	800a318 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800a2e0:	21fc      	movs	r1, #252	; 0xfc
 800a2e2:	68b8      	ldr	r0, [r7, #8]
 800a2e4:	f7ff fd96 	bl	8009e14 <SD_TxDataBlock>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00a      	beq.n	800a304 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a2f4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	603b      	str	r3, [r7, #0]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1ee      	bne.n	800a2e0 <SD_disk_write+0xac>
 800a302:	e000      	b.n	800a306 <SD_disk_write+0xd2>
          break;
 800a304:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800a306:	21fd      	movs	r1, #253	; 0xfd
 800a308:	2000      	movs	r0, #0
 800a30a:	f7ff fd83 	bl	8009e14 <SD_TxDataBlock>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <SD_disk_write+0xe4>
      {
        count = 1;
 800a314:	2301      	movs	r3, #1
 800a316:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 800a318:	f7ff fc74 	bl	8009c04 <DESELECT>
  SPI_RxByte();
 800a31c:	f7ff fc98 	bl	8009c50 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	bf14      	ite	ne
 800a326:	2301      	movne	r3, #1
 800a328:	2300      	moveq	r3, #0
 800a32a:	b2db      	uxtb	r3, r3
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	20000044 	.word	0x20000044
 800a338:	200194d0 	.word	0x200194d0

0800a33c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800a33c:	b590      	push	{r4, r7, lr}
 800a33e:	b08b      	sub	sp, #44	; 0x2c
 800a340:	af00      	add	r7, sp, #0
 800a342:	4603      	mov	r3, r0
 800a344:	603a      	str	r2, [r7, #0]
 800a346:	71fb      	strb	r3, [r7, #7]
 800a348:	460b      	mov	r3, r1
 800a34a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800a356:	2304      	movs	r3, #4
 800a358:	e11b      	b.n	800a592 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 800a360:	79bb      	ldrb	r3, [r7, #6]
 800a362:	2b05      	cmp	r3, #5
 800a364:	d129      	bne.n	800a3ba <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d017      	beq.n	800a39e <SD_disk_ioctl+0x62>
 800a36e:	2b02      	cmp	r3, #2
 800a370:	dc1f      	bgt.n	800a3b2 <SD_disk_ioctl+0x76>
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <SD_disk_ioctl+0x40>
 800a376:	2b01      	cmp	r3, #1
 800a378:	d00b      	beq.n	800a392 <SD_disk_ioctl+0x56>
 800a37a:	e01a      	b.n	800a3b2 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800a37c:	f7ff fd08 	bl	8009d90 <SD_CheckPower>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800a386:	f7ff fcf7 	bl	8009d78 <SD_PowerOff>
      res = RES_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800a390:	e0fd      	b.n	800a58e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800a392:	f7ff fca5 	bl	8009ce0 <SD_PowerOn>
      res = RES_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800a39c:	e0f7      	b.n	800a58e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800a39e:	6a3b      	ldr	r3, [r7, #32]
 800a3a0:	1c5c      	adds	r4, r3, #1
 800a3a2:	f7ff fcf5 	bl	8009d90 <SD_CheckPower>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800a3b0:	e0ed      	b.n	800a58e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800a3b2:	2304      	movs	r3, #4
 800a3b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3b8:	e0e9      	b.n	800a58e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800a3ba:	4b78      	ldr	r3, [pc, #480]	; (800a59c <SD_disk_ioctl+0x260>)
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e0e2      	b.n	800a592 <SD_disk_ioctl+0x256>

    SELECT();
 800a3cc:	f7ff fc0e 	bl	8009bec <SELECT>

    switch (ctrl)
 800a3d0:	79bb      	ldrb	r3, [r7, #6]
 800a3d2:	2b0d      	cmp	r3, #13
 800a3d4:	f200 80cc 	bhi.w	800a570 <SD_disk_ioctl+0x234>
 800a3d8:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <SD_disk_ioctl+0xa4>)
 800a3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3de:	bf00      	nop
 800a3e0:	0800a4db 	.word	0x0800a4db
 800a3e4:	0800a419 	.word	0x0800a419
 800a3e8:	0800a4cb 	.word	0x0800a4cb
 800a3ec:	0800a571 	.word	0x0800a571
 800a3f0:	0800a571 	.word	0x0800a571
 800a3f4:	0800a571 	.word	0x0800a571
 800a3f8:	0800a571 	.word	0x0800a571
 800a3fc:	0800a571 	.word	0x0800a571
 800a400:	0800a571 	.word	0x0800a571
 800a404:	0800a571 	.word	0x0800a571
 800a408:	0800a571 	.word	0x0800a571
 800a40c:	0800a4ed 	.word	0x0800a4ed
 800a410:	0800a511 	.word	0x0800a511
 800a414:	0800a535 	.word	0x0800a535
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800a418:	2100      	movs	r1, #0
 800a41a:	2049      	movs	r0, #73	; 0x49
 800a41c:	f7ff fd4e 	bl	8009ebc <SD_SendCmd>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	f040 80a8 	bne.w	800a578 <SD_disk_ioctl+0x23c>
 800a428:	f107 030c 	add.w	r3, r7, #12
 800a42c:	2110      	movs	r1, #16
 800a42e:	4618      	mov	r0, r3
 800a430:	f7ff fcba 	bl	8009da8 <SD_RxDataBlock>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	f000 809e 	beq.w	800a578 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 800a43c:	7b3b      	ldrb	r3, [r7, #12]
 800a43e:	099b      	lsrs	r3, r3, #6
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b01      	cmp	r3, #1
 800a444:	d10e      	bne.n	800a464 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800a446:	7d7b      	ldrb	r3, [r7, #21]
 800a448:	b29a      	uxth	r2, r3
 800a44a:	7d3b      	ldrb	r3, [r7, #20]
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	021b      	lsls	r3, r3, #8
 800a450:	b29b      	uxth	r3, r3
 800a452:	4413      	add	r3, r2
 800a454:	b29b      	uxth	r3, r3
 800a456:	3301      	adds	r3, #1
 800a458:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800a45a:	8bfb      	ldrh	r3, [r7, #30]
 800a45c:	029a      	lsls	r2, r3, #10
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	601a      	str	r2, [r3, #0]
 800a462:	e02e      	b.n	800a4c2 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a464:	7c7b      	ldrb	r3, [r7, #17]
 800a466:	f003 030f 	and.w	r3, r3, #15
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	7dbb      	ldrb	r3, [r7, #22]
 800a46e:	09db      	lsrs	r3, r3, #7
 800a470:	b2db      	uxtb	r3, r3
 800a472:	4413      	add	r3, r2
 800a474:	b2da      	uxtb	r2, r3
 800a476:	7d7b      	ldrb	r3, [r7, #21]
 800a478:	005b      	lsls	r3, r3, #1
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	f003 0306 	and.w	r3, r3, #6
 800a480:	b2db      	uxtb	r3, r3
 800a482:	4413      	add	r3, r2
 800a484:	b2db      	uxtb	r3, r3
 800a486:	3302      	adds	r3, #2
 800a488:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800a48c:	7d3b      	ldrb	r3, [r7, #20]
 800a48e:	099b      	lsrs	r3, r3, #6
 800a490:	b2db      	uxtb	r3, r3
 800a492:	b29a      	uxth	r2, r3
 800a494:	7cfb      	ldrb	r3, [r7, #19]
 800a496:	b29b      	uxth	r3, r3
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	4413      	add	r3, r2
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	7cbb      	ldrb	r3, [r7, #18]
 800a4a2:	029b      	lsls	r3, r3, #10
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	4413      	add	r3, r2
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800a4b4:	8bfa      	ldrh	r2, [r7, #30]
 800a4b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4ba:	3b09      	subs	r3, #9
 800a4bc:	409a      	lsls	r2, r3
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800a4c8:	e056      	b.n	800a578 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4d0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800a4d8:	e055      	b.n	800a586 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800a4da:	f7ff fbe5 	bl	8009ca8 <SD_ReadyWait>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2bff      	cmp	r3, #255	; 0xff
 800a4e2:	d14b      	bne.n	800a57c <SD_disk_ioctl+0x240>
        res = RES_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800a4ea:	e047      	b.n	800a57c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	2049      	movs	r0, #73	; 0x49
 800a4f0:	f7ff fce4 	bl	8009ebc <SD_SendCmd>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d142      	bne.n	800a580 <SD_disk_ioctl+0x244>
 800a4fa:	2110      	movs	r1, #16
 800a4fc:	6a38      	ldr	r0, [r7, #32]
 800a4fe:	f7ff fc53 	bl	8009da8 <SD_RxDataBlock>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d03b      	beq.n	800a580 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800a50e:	e037      	b.n	800a580 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800a510:	2100      	movs	r1, #0
 800a512:	204a      	movs	r0, #74	; 0x4a
 800a514:	f7ff fcd2 	bl	8009ebc <SD_SendCmd>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d132      	bne.n	800a584 <SD_disk_ioctl+0x248>
 800a51e:	2110      	movs	r1, #16
 800a520:	6a38      	ldr	r0, [r7, #32]
 800a522:	f7ff fc41 	bl	8009da8 <SD_RxDataBlock>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d02b      	beq.n	800a584 <SD_disk_ioctl+0x248>
        res = RES_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800a532:	e027      	b.n	800a584 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 800a534:	2100      	movs	r1, #0
 800a536:	207a      	movs	r0, #122	; 0x7a
 800a538:	f7ff fcc0 	bl	8009ebc <SD_SendCmd>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d116      	bne.n	800a570 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 800a542:	2300      	movs	r3, #0
 800a544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a548:	e00b      	b.n	800a562 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800a54a:	6a3c      	ldr	r4, [r7, #32]
 800a54c:	1c63      	adds	r3, r4, #1
 800a54e:	623b      	str	r3, [r7, #32]
 800a550:	f7ff fb7e 	bl	8009c50 <SPI_RxByte>
 800a554:	4603      	mov	r3, r0
 800a556:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800a558:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a55c:	3301      	adds	r3, #1
 800a55e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a562:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a566:	2b03      	cmp	r3, #3
 800a568:	d9ef      	bls.n	800a54a <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 800a570:	2304      	movs	r3, #4
 800a572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a576:	e006      	b.n	800a586 <SD_disk_ioctl+0x24a>
      break;
 800a578:	bf00      	nop
 800a57a:	e004      	b.n	800a586 <SD_disk_ioctl+0x24a>
      break;
 800a57c:	bf00      	nop
 800a57e:	e002      	b.n	800a586 <SD_disk_ioctl+0x24a>
      break;
 800a580:	bf00      	nop
 800a582:	e000      	b.n	800a586 <SD_disk_ioctl+0x24a>
      break;
 800a584:	bf00      	nop
    }

    DESELECT();
 800a586:	f7ff fb3d 	bl	8009c04 <DESELECT>
    SPI_RxByte();
 800a58a:	f7ff fb61 	bl	8009c50 <SPI_RxByte>
  }

  return res;
 800a58e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a592:	4618      	mov	r0, r3
 800a594:	372c      	adds	r7, #44	; 0x2c
 800a596:	46bd      	mov	sp, r7
 800a598:	bd90      	pop	{r4, r7, pc}
 800a59a:	bf00      	nop
 800a59c:	20000044 	.word	0x20000044

0800a5a0 <__errno>:
 800a5a0:	4b01      	ldr	r3, [pc, #4]	; (800a5a8 <__errno+0x8>)
 800a5a2:	6818      	ldr	r0, [r3, #0]
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	20000048 	.word	0x20000048

0800a5ac <__libc_init_array>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	4d0d      	ldr	r5, [pc, #52]	; (800a5e4 <__libc_init_array+0x38>)
 800a5b0:	4c0d      	ldr	r4, [pc, #52]	; (800a5e8 <__libc_init_array+0x3c>)
 800a5b2:	1b64      	subs	r4, r4, r5
 800a5b4:	10a4      	asrs	r4, r4, #2
 800a5b6:	2600      	movs	r6, #0
 800a5b8:	42a6      	cmp	r6, r4
 800a5ba:	d109      	bne.n	800a5d0 <__libc_init_array+0x24>
 800a5bc:	4d0b      	ldr	r5, [pc, #44]	; (800a5ec <__libc_init_array+0x40>)
 800a5be:	4c0c      	ldr	r4, [pc, #48]	; (800a5f0 <__libc_init_array+0x44>)
 800a5c0:	f000 fc8e 	bl	800aee0 <_init>
 800a5c4:	1b64      	subs	r4, r4, r5
 800a5c6:	10a4      	asrs	r4, r4, #2
 800a5c8:	2600      	movs	r6, #0
 800a5ca:	42a6      	cmp	r6, r4
 800a5cc:	d105      	bne.n	800a5da <__libc_init_array+0x2e>
 800a5ce:	bd70      	pop	{r4, r5, r6, pc}
 800a5d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d4:	4798      	blx	r3
 800a5d6:	3601      	adds	r6, #1
 800a5d8:	e7ee      	b.n	800a5b8 <__libc_init_array+0xc>
 800a5da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5de:	4798      	blx	r3
 800a5e0:	3601      	adds	r6, #1
 800a5e2:	e7f2      	b.n	800a5ca <__libc_init_array+0x1e>
 800a5e4:	0800b2f4 	.word	0x0800b2f4
 800a5e8:	0800b2f4 	.word	0x0800b2f4
 800a5ec:	0800b2f4 	.word	0x0800b2f4
 800a5f0:	0800b2f8 	.word	0x0800b2f8

0800a5f4 <memcpy>:
 800a5f4:	440a      	add	r2, r1
 800a5f6:	4291      	cmp	r1, r2
 800a5f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5fc:	d100      	bne.n	800a600 <memcpy+0xc>
 800a5fe:	4770      	bx	lr
 800a600:	b510      	push	{r4, lr}
 800a602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a60a:	4291      	cmp	r1, r2
 800a60c:	d1f9      	bne.n	800a602 <memcpy+0xe>
 800a60e:	bd10      	pop	{r4, pc}

0800a610 <memset>:
 800a610:	4402      	add	r2, r0
 800a612:	4603      	mov	r3, r0
 800a614:	4293      	cmp	r3, r2
 800a616:	d100      	bne.n	800a61a <memset+0xa>
 800a618:	4770      	bx	lr
 800a61a:	f803 1b01 	strb.w	r1, [r3], #1
 800a61e:	e7f9      	b.n	800a614 <memset+0x4>

0800a620 <siprintf>:
 800a620:	b40e      	push	{r1, r2, r3}
 800a622:	b500      	push	{lr}
 800a624:	b09c      	sub	sp, #112	; 0x70
 800a626:	ab1d      	add	r3, sp, #116	; 0x74
 800a628:	9002      	str	r0, [sp, #8]
 800a62a:	9006      	str	r0, [sp, #24]
 800a62c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a630:	4809      	ldr	r0, [pc, #36]	; (800a658 <siprintf+0x38>)
 800a632:	9107      	str	r1, [sp, #28]
 800a634:	9104      	str	r1, [sp, #16]
 800a636:	4909      	ldr	r1, [pc, #36]	; (800a65c <siprintf+0x3c>)
 800a638:	f853 2b04 	ldr.w	r2, [r3], #4
 800a63c:	9105      	str	r1, [sp, #20]
 800a63e:	6800      	ldr	r0, [r0, #0]
 800a640:	9301      	str	r3, [sp, #4]
 800a642:	a902      	add	r1, sp, #8
 800a644:	f000 f868 	bl	800a718 <_svfiprintf_r>
 800a648:	9b02      	ldr	r3, [sp, #8]
 800a64a:	2200      	movs	r2, #0
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	b01c      	add	sp, #112	; 0x70
 800a650:	f85d eb04 	ldr.w	lr, [sp], #4
 800a654:	b003      	add	sp, #12
 800a656:	4770      	bx	lr
 800a658:	20000048 	.word	0x20000048
 800a65c:	ffff0208 	.word	0xffff0208

0800a660 <__ssputs_r>:
 800a660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a664:	688e      	ldr	r6, [r1, #8]
 800a666:	429e      	cmp	r6, r3
 800a668:	4682      	mov	sl, r0
 800a66a:	460c      	mov	r4, r1
 800a66c:	4690      	mov	r8, r2
 800a66e:	461f      	mov	r7, r3
 800a670:	d838      	bhi.n	800a6e4 <__ssputs_r+0x84>
 800a672:	898a      	ldrh	r2, [r1, #12]
 800a674:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a678:	d032      	beq.n	800a6e0 <__ssputs_r+0x80>
 800a67a:	6825      	ldr	r5, [r4, #0]
 800a67c:	6909      	ldr	r1, [r1, #16]
 800a67e:	eba5 0901 	sub.w	r9, r5, r1
 800a682:	6965      	ldr	r5, [r4, #20]
 800a684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a68c:	3301      	adds	r3, #1
 800a68e:	444b      	add	r3, r9
 800a690:	106d      	asrs	r5, r5, #1
 800a692:	429d      	cmp	r5, r3
 800a694:	bf38      	it	cc
 800a696:	461d      	movcc	r5, r3
 800a698:	0553      	lsls	r3, r2, #21
 800a69a:	d531      	bpl.n	800a700 <__ssputs_r+0xa0>
 800a69c:	4629      	mov	r1, r5
 800a69e:	f000 fb55 	bl	800ad4c <_malloc_r>
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	b950      	cbnz	r0, 800a6bc <__ssputs_r+0x5c>
 800a6a6:	230c      	movs	r3, #12
 800a6a8:	f8ca 3000 	str.w	r3, [sl]
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6b2:	81a3      	strh	r3, [r4, #12]
 800a6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6bc:	6921      	ldr	r1, [r4, #16]
 800a6be:	464a      	mov	r2, r9
 800a6c0:	f7ff ff98 	bl	800a5f4 <memcpy>
 800a6c4:	89a3      	ldrh	r3, [r4, #12]
 800a6c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	6126      	str	r6, [r4, #16]
 800a6d2:	6165      	str	r5, [r4, #20]
 800a6d4:	444e      	add	r6, r9
 800a6d6:	eba5 0509 	sub.w	r5, r5, r9
 800a6da:	6026      	str	r6, [r4, #0]
 800a6dc:	60a5      	str	r5, [r4, #8]
 800a6de:	463e      	mov	r6, r7
 800a6e0:	42be      	cmp	r6, r7
 800a6e2:	d900      	bls.n	800a6e6 <__ssputs_r+0x86>
 800a6e4:	463e      	mov	r6, r7
 800a6e6:	6820      	ldr	r0, [r4, #0]
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	4641      	mov	r1, r8
 800a6ec:	f000 faa8 	bl	800ac40 <memmove>
 800a6f0:	68a3      	ldr	r3, [r4, #8]
 800a6f2:	1b9b      	subs	r3, r3, r6
 800a6f4:	60a3      	str	r3, [r4, #8]
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	4433      	add	r3, r6
 800a6fa:	6023      	str	r3, [r4, #0]
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	e7db      	b.n	800a6b8 <__ssputs_r+0x58>
 800a700:	462a      	mov	r2, r5
 800a702:	f000 fb97 	bl	800ae34 <_realloc_r>
 800a706:	4606      	mov	r6, r0
 800a708:	2800      	cmp	r0, #0
 800a70a:	d1e1      	bne.n	800a6d0 <__ssputs_r+0x70>
 800a70c:	6921      	ldr	r1, [r4, #16]
 800a70e:	4650      	mov	r0, sl
 800a710:	f000 fab0 	bl	800ac74 <_free_r>
 800a714:	e7c7      	b.n	800a6a6 <__ssputs_r+0x46>
	...

0800a718 <_svfiprintf_r>:
 800a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	4698      	mov	r8, r3
 800a71e:	898b      	ldrh	r3, [r1, #12]
 800a720:	061b      	lsls	r3, r3, #24
 800a722:	b09d      	sub	sp, #116	; 0x74
 800a724:	4607      	mov	r7, r0
 800a726:	460d      	mov	r5, r1
 800a728:	4614      	mov	r4, r2
 800a72a:	d50e      	bpl.n	800a74a <_svfiprintf_r+0x32>
 800a72c:	690b      	ldr	r3, [r1, #16]
 800a72e:	b963      	cbnz	r3, 800a74a <_svfiprintf_r+0x32>
 800a730:	2140      	movs	r1, #64	; 0x40
 800a732:	f000 fb0b 	bl	800ad4c <_malloc_r>
 800a736:	6028      	str	r0, [r5, #0]
 800a738:	6128      	str	r0, [r5, #16]
 800a73a:	b920      	cbnz	r0, 800a746 <_svfiprintf_r+0x2e>
 800a73c:	230c      	movs	r3, #12
 800a73e:	603b      	str	r3, [r7, #0]
 800a740:	f04f 30ff 	mov.w	r0, #4294967295
 800a744:	e0d1      	b.n	800a8ea <_svfiprintf_r+0x1d2>
 800a746:	2340      	movs	r3, #64	; 0x40
 800a748:	616b      	str	r3, [r5, #20]
 800a74a:	2300      	movs	r3, #0
 800a74c:	9309      	str	r3, [sp, #36]	; 0x24
 800a74e:	2320      	movs	r3, #32
 800a750:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a754:	f8cd 800c 	str.w	r8, [sp, #12]
 800a758:	2330      	movs	r3, #48	; 0x30
 800a75a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a904 <_svfiprintf_r+0x1ec>
 800a75e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a762:	f04f 0901 	mov.w	r9, #1
 800a766:	4623      	mov	r3, r4
 800a768:	469a      	mov	sl, r3
 800a76a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a76e:	b10a      	cbz	r2, 800a774 <_svfiprintf_r+0x5c>
 800a770:	2a25      	cmp	r2, #37	; 0x25
 800a772:	d1f9      	bne.n	800a768 <_svfiprintf_r+0x50>
 800a774:	ebba 0b04 	subs.w	fp, sl, r4
 800a778:	d00b      	beq.n	800a792 <_svfiprintf_r+0x7a>
 800a77a:	465b      	mov	r3, fp
 800a77c:	4622      	mov	r2, r4
 800a77e:	4629      	mov	r1, r5
 800a780:	4638      	mov	r0, r7
 800a782:	f7ff ff6d 	bl	800a660 <__ssputs_r>
 800a786:	3001      	adds	r0, #1
 800a788:	f000 80aa 	beq.w	800a8e0 <_svfiprintf_r+0x1c8>
 800a78c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a78e:	445a      	add	r2, fp
 800a790:	9209      	str	r2, [sp, #36]	; 0x24
 800a792:	f89a 3000 	ldrb.w	r3, [sl]
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 80a2 	beq.w	800a8e0 <_svfiprintf_r+0x1c8>
 800a79c:	2300      	movs	r3, #0
 800a79e:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7a6:	f10a 0a01 	add.w	sl, sl, #1
 800a7aa:	9304      	str	r3, [sp, #16]
 800a7ac:	9307      	str	r3, [sp, #28]
 800a7ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7b2:	931a      	str	r3, [sp, #104]	; 0x68
 800a7b4:	4654      	mov	r4, sl
 800a7b6:	2205      	movs	r2, #5
 800a7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7bc:	4851      	ldr	r0, [pc, #324]	; (800a904 <_svfiprintf_r+0x1ec>)
 800a7be:	f7f5 fd47 	bl	8000250 <memchr>
 800a7c2:	9a04      	ldr	r2, [sp, #16]
 800a7c4:	b9d8      	cbnz	r0, 800a7fe <_svfiprintf_r+0xe6>
 800a7c6:	06d0      	lsls	r0, r2, #27
 800a7c8:	bf44      	itt	mi
 800a7ca:	2320      	movmi	r3, #32
 800a7cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7d0:	0711      	lsls	r1, r2, #28
 800a7d2:	bf44      	itt	mi
 800a7d4:	232b      	movmi	r3, #43	; 0x2b
 800a7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7da:	f89a 3000 	ldrb.w	r3, [sl]
 800a7de:	2b2a      	cmp	r3, #42	; 0x2a
 800a7e0:	d015      	beq.n	800a80e <_svfiprintf_r+0xf6>
 800a7e2:	9a07      	ldr	r2, [sp, #28]
 800a7e4:	4654      	mov	r4, sl
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	f04f 0c0a 	mov.w	ip, #10
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7f2:	3b30      	subs	r3, #48	; 0x30
 800a7f4:	2b09      	cmp	r3, #9
 800a7f6:	d94e      	bls.n	800a896 <_svfiprintf_r+0x17e>
 800a7f8:	b1b0      	cbz	r0, 800a828 <_svfiprintf_r+0x110>
 800a7fa:	9207      	str	r2, [sp, #28]
 800a7fc:	e014      	b.n	800a828 <_svfiprintf_r+0x110>
 800a7fe:	eba0 0308 	sub.w	r3, r0, r8
 800a802:	fa09 f303 	lsl.w	r3, r9, r3
 800a806:	4313      	orrs	r3, r2
 800a808:	9304      	str	r3, [sp, #16]
 800a80a:	46a2      	mov	sl, r4
 800a80c:	e7d2      	b.n	800a7b4 <_svfiprintf_r+0x9c>
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	1d19      	adds	r1, r3, #4
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	9103      	str	r1, [sp, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	bfbb      	ittet	lt
 800a81a:	425b      	neglt	r3, r3
 800a81c:	f042 0202 	orrlt.w	r2, r2, #2
 800a820:	9307      	strge	r3, [sp, #28]
 800a822:	9307      	strlt	r3, [sp, #28]
 800a824:	bfb8      	it	lt
 800a826:	9204      	strlt	r2, [sp, #16]
 800a828:	7823      	ldrb	r3, [r4, #0]
 800a82a:	2b2e      	cmp	r3, #46	; 0x2e
 800a82c:	d10c      	bne.n	800a848 <_svfiprintf_r+0x130>
 800a82e:	7863      	ldrb	r3, [r4, #1]
 800a830:	2b2a      	cmp	r3, #42	; 0x2a
 800a832:	d135      	bne.n	800a8a0 <_svfiprintf_r+0x188>
 800a834:	9b03      	ldr	r3, [sp, #12]
 800a836:	1d1a      	adds	r2, r3, #4
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	9203      	str	r2, [sp, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	bfb8      	it	lt
 800a840:	f04f 33ff 	movlt.w	r3, #4294967295
 800a844:	3402      	adds	r4, #2
 800a846:	9305      	str	r3, [sp, #20]
 800a848:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a914 <_svfiprintf_r+0x1fc>
 800a84c:	7821      	ldrb	r1, [r4, #0]
 800a84e:	2203      	movs	r2, #3
 800a850:	4650      	mov	r0, sl
 800a852:	f7f5 fcfd 	bl	8000250 <memchr>
 800a856:	b140      	cbz	r0, 800a86a <_svfiprintf_r+0x152>
 800a858:	2340      	movs	r3, #64	; 0x40
 800a85a:	eba0 000a 	sub.w	r0, r0, sl
 800a85e:	fa03 f000 	lsl.w	r0, r3, r0
 800a862:	9b04      	ldr	r3, [sp, #16]
 800a864:	4303      	orrs	r3, r0
 800a866:	3401      	adds	r4, #1
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a86e:	4826      	ldr	r0, [pc, #152]	; (800a908 <_svfiprintf_r+0x1f0>)
 800a870:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a874:	2206      	movs	r2, #6
 800a876:	f7f5 fceb 	bl	8000250 <memchr>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d038      	beq.n	800a8f0 <_svfiprintf_r+0x1d8>
 800a87e:	4b23      	ldr	r3, [pc, #140]	; (800a90c <_svfiprintf_r+0x1f4>)
 800a880:	bb1b      	cbnz	r3, 800a8ca <_svfiprintf_r+0x1b2>
 800a882:	9b03      	ldr	r3, [sp, #12]
 800a884:	3307      	adds	r3, #7
 800a886:	f023 0307 	bic.w	r3, r3, #7
 800a88a:	3308      	adds	r3, #8
 800a88c:	9303      	str	r3, [sp, #12]
 800a88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a890:	4433      	add	r3, r6
 800a892:	9309      	str	r3, [sp, #36]	; 0x24
 800a894:	e767      	b.n	800a766 <_svfiprintf_r+0x4e>
 800a896:	fb0c 3202 	mla	r2, ip, r2, r3
 800a89a:	460c      	mov	r4, r1
 800a89c:	2001      	movs	r0, #1
 800a89e:	e7a5      	b.n	800a7ec <_svfiprintf_r+0xd4>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	3401      	adds	r4, #1
 800a8a4:	9305      	str	r3, [sp, #20]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	f04f 0c0a 	mov.w	ip, #10
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8b2:	3a30      	subs	r2, #48	; 0x30
 800a8b4:	2a09      	cmp	r2, #9
 800a8b6:	d903      	bls.n	800a8c0 <_svfiprintf_r+0x1a8>
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0c5      	beq.n	800a848 <_svfiprintf_r+0x130>
 800a8bc:	9105      	str	r1, [sp, #20]
 800a8be:	e7c3      	b.n	800a848 <_svfiprintf_r+0x130>
 800a8c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e7f0      	b.n	800a8ac <_svfiprintf_r+0x194>
 800a8ca:	ab03      	add	r3, sp, #12
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	462a      	mov	r2, r5
 800a8d0:	4b0f      	ldr	r3, [pc, #60]	; (800a910 <_svfiprintf_r+0x1f8>)
 800a8d2:	a904      	add	r1, sp, #16
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	f3af 8000 	nop.w
 800a8da:	1c42      	adds	r2, r0, #1
 800a8dc:	4606      	mov	r6, r0
 800a8de:	d1d6      	bne.n	800a88e <_svfiprintf_r+0x176>
 800a8e0:	89ab      	ldrh	r3, [r5, #12]
 800a8e2:	065b      	lsls	r3, r3, #25
 800a8e4:	f53f af2c 	bmi.w	800a740 <_svfiprintf_r+0x28>
 800a8e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8ea:	b01d      	add	sp, #116	; 0x74
 800a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f0:	ab03      	add	r3, sp, #12
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	462a      	mov	r2, r5
 800a8f6:	4b06      	ldr	r3, [pc, #24]	; (800a910 <_svfiprintf_r+0x1f8>)
 800a8f8:	a904      	add	r1, sp, #16
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	f000 f87a 	bl	800a9f4 <_printf_i>
 800a900:	e7eb      	b.n	800a8da <_svfiprintf_r+0x1c2>
 800a902:	bf00      	nop
 800a904:	0800b2b8 	.word	0x0800b2b8
 800a908:	0800b2c2 	.word	0x0800b2c2
 800a90c:	00000000 	.word	0x00000000
 800a910:	0800a661 	.word	0x0800a661
 800a914:	0800b2be 	.word	0x0800b2be

0800a918 <_printf_common>:
 800a918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a91c:	4616      	mov	r6, r2
 800a91e:	4699      	mov	r9, r3
 800a920:	688a      	ldr	r2, [r1, #8]
 800a922:	690b      	ldr	r3, [r1, #16]
 800a924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a928:	4293      	cmp	r3, r2
 800a92a:	bfb8      	it	lt
 800a92c:	4613      	movlt	r3, r2
 800a92e:	6033      	str	r3, [r6, #0]
 800a930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a934:	4607      	mov	r7, r0
 800a936:	460c      	mov	r4, r1
 800a938:	b10a      	cbz	r2, 800a93e <_printf_common+0x26>
 800a93a:	3301      	adds	r3, #1
 800a93c:	6033      	str	r3, [r6, #0]
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	0699      	lsls	r1, r3, #26
 800a942:	bf42      	ittt	mi
 800a944:	6833      	ldrmi	r3, [r6, #0]
 800a946:	3302      	addmi	r3, #2
 800a948:	6033      	strmi	r3, [r6, #0]
 800a94a:	6825      	ldr	r5, [r4, #0]
 800a94c:	f015 0506 	ands.w	r5, r5, #6
 800a950:	d106      	bne.n	800a960 <_printf_common+0x48>
 800a952:	f104 0a19 	add.w	sl, r4, #25
 800a956:	68e3      	ldr	r3, [r4, #12]
 800a958:	6832      	ldr	r2, [r6, #0]
 800a95a:	1a9b      	subs	r3, r3, r2
 800a95c:	42ab      	cmp	r3, r5
 800a95e:	dc26      	bgt.n	800a9ae <_printf_common+0x96>
 800a960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a964:	1e13      	subs	r3, r2, #0
 800a966:	6822      	ldr	r2, [r4, #0]
 800a968:	bf18      	it	ne
 800a96a:	2301      	movne	r3, #1
 800a96c:	0692      	lsls	r2, r2, #26
 800a96e:	d42b      	bmi.n	800a9c8 <_printf_common+0xb0>
 800a970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a974:	4649      	mov	r1, r9
 800a976:	4638      	mov	r0, r7
 800a978:	47c0      	blx	r8
 800a97a:	3001      	adds	r0, #1
 800a97c:	d01e      	beq.n	800a9bc <_printf_common+0xa4>
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	68e5      	ldr	r5, [r4, #12]
 800a982:	6832      	ldr	r2, [r6, #0]
 800a984:	f003 0306 	and.w	r3, r3, #6
 800a988:	2b04      	cmp	r3, #4
 800a98a:	bf08      	it	eq
 800a98c:	1aad      	subeq	r5, r5, r2
 800a98e:	68a3      	ldr	r3, [r4, #8]
 800a990:	6922      	ldr	r2, [r4, #16]
 800a992:	bf0c      	ite	eq
 800a994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a998:	2500      	movne	r5, #0
 800a99a:	4293      	cmp	r3, r2
 800a99c:	bfc4      	itt	gt
 800a99e:	1a9b      	subgt	r3, r3, r2
 800a9a0:	18ed      	addgt	r5, r5, r3
 800a9a2:	2600      	movs	r6, #0
 800a9a4:	341a      	adds	r4, #26
 800a9a6:	42b5      	cmp	r5, r6
 800a9a8:	d11a      	bne.n	800a9e0 <_printf_common+0xc8>
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	e008      	b.n	800a9c0 <_printf_common+0xa8>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	4652      	mov	r2, sl
 800a9b2:	4649      	mov	r1, r9
 800a9b4:	4638      	mov	r0, r7
 800a9b6:	47c0      	blx	r8
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	d103      	bne.n	800a9c4 <_printf_common+0xac>
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c4:	3501      	adds	r5, #1
 800a9c6:	e7c6      	b.n	800a956 <_printf_common+0x3e>
 800a9c8:	18e1      	adds	r1, r4, r3
 800a9ca:	1c5a      	adds	r2, r3, #1
 800a9cc:	2030      	movs	r0, #48	; 0x30
 800a9ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9d2:	4422      	add	r2, r4
 800a9d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9dc:	3302      	adds	r3, #2
 800a9de:	e7c7      	b.n	800a970 <_printf_common+0x58>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	4622      	mov	r2, r4
 800a9e4:	4649      	mov	r1, r9
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	47c0      	blx	r8
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	d0e6      	beq.n	800a9bc <_printf_common+0xa4>
 800a9ee:	3601      	adds	r6, #1
 800a9f0:	e7d9      	b.n	800a9a6 <_printf_common+0x8e>
	...

0800a9f4 <_printf_i>:
 800a9f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f8:	7e0f      	ldrb	r7, [r1, #24]
 800a9fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9fc:	2f78      	cmp	r7, #120	; 0x78
 800a9fe:	4691      	mov	r9, r2
 800aa00:	4680      	mov	r8, r0
 800aa02:	460c      	mov	r4, r1
 800aa04:	469a      	mov	sl, r3
 800aa06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa0a:	d807      	bhi.n	800aa1c <_printf_i+0x28>
 800aa0c:	2f62      	cmp	r7, #98	; 0x62
 800aa0e:	d80a      	bhi.n	800aa26 <_printf_i+0x32>
 800aa10:	2f00      	cmp	r7, #0
 800aa12:	f000 80d8 	beq.w	800abc6 <_printf_i+0x1d2>
 800aa16:	2f58      	cmp	r7, #88	; 0x58
 800aa18:	f000 80a3 	beq.w	800ab62 <_printf_i+0x16e>
 800aa1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa24:	e03a      	b.n	800aa9c <_printf_i+0xa8>
 800aa26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa2a:	2b15      	cmp	r3, #21
 800aa2c:	d8f6      	bhi.n	800aa1c <_printf_i+0x28>
 800aa2e:	a101      	add	r1, pc, #4	; (adr r1, 800aa34 <_printf_i+0x40>)
 800aa30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa34:	0800aa8d 	.word	0x0800aa8d
 800aa38:	0800aaa1 	.word	0x0800aaa1
 800aa3c:	0800aa1d 	.word	0x0800aa1d
 800aa40:	0800aa1d 	.word	0x0800aa1d
 800aa44:	0800aa1d 	.word	0x0800aa1d
 800aa48:	0800aa1d 	.word	0x0800aa1d
 800aa4c:	0800aaa1 	.word	0x0800aaa1
 800aa50:	0800aa1d 	.word	0x0800aa1d
 800aa54:	0800aa1d 	.word	0x0800aa1d
 800aa58:	0800aa1d 	.word	0x0800aa1d
 800aa5c:	0800aa1d 	.word	0x0800aa1d
 800aa60:	0800abad 	.word	0x0800abad
 800aa64:	0800aad1 	.word	0x0800aad1
 800aa68:	0800ab8f 	.word	0x0800ab8f
 800aa6c:	0800aa1d 	.word	0x0800aa1d
 800aa70:	0800aa1d 	.word	0x0800aa1d
 800aa74:	0800abcf 	.word	0x0800abcf
 800aa78:	0800aa1d 	.word	0x0800aa1d
 800aa7c:	0800aad1 	.word	0x0800aad1
 800aa80:	0800aa1d 	.word	0x0800aa1d
 800aa84:	0800aa1d 	.word	0x0800aa1d
 800aa88:	0800ab97 	.word	0x0800ab97
 800aa8c:	682b      	ldr	r3, [r5, #0]
 800aa8e:	1d1a      	adds	r2, r3, #4
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	602a      	str	r2, [r5, #0]
 800aa94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e0a3      	b.n	800abe8 <_printf_i+0x1f4>
 800aaa0:	6820      	ldr	r0, [r4, #0]
 800aaa2:	6829      	ldr	r1, [r5, #0]
 800aaa4:	0606      	lsls	r6, r0, #24
 800aaa6:	f101 0304 	add.w	r3, r1, #4
 800aaaa:	d50a      	bpl.n	800aac2 <_printf_i+0xce>
 800aaac:	680e      	ldr	r6, [r1, #0]
 800aaae:	602b      	str	r3, [r5, #0]
 800aab0:	2e00      	cmp	r6, #0
 800aab2:	da03      	bge.n	800aabc <_printf_i+0xc8>
 800aab4:	232d      	movs	r3, #45	; 0x2d
 800aab6:	4276      	negs	r6, r6
 800aab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aabc:	485e      	ldr	r0, [pc, #376]	; (800ac38 <_printf_i+0x244>)
 800aabe:	230a      	movs	r3, #10
 800aac0:	e019      	b.n	800aaf6 <_printf_i+0x102>
 800aac2:	680e      	ldr	r6, [r1, #0]
 800aac4:	602b      	str	r3, [r5, #0]
 800aac6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aaca:	bf18      	it	ne
 800aacc:	b236      	sxthne	r6, r6
 800aace:	e7ef      	b.n	800aab0 <_printf_i+0xbc>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	6820      	ldr	r0, [r4, #0]
 800aad4:	1d19      	adds	r1, r3, #4
 800aad6:	6029      	str	r1, [r5, #0]
 800aad8:	0601      	lsls	r1, r0, #24
 800aada:	d501      	bpl.n	800aae0 <_printf_i+0xec>
 800aadc:	681e      	ldr	r6, [r3, #0]
 800aade:	e002      	b.n	800aae6 <_printf_i+0xf2>
 800aae0:	0646      	lsls	r6, r0, #25
 800aae2:	d5fb      	bpl.n	800aadc <_printf_i+0xe8>
 800aae4:	881e      	ldrh	r6, [r3, #0]
 800aae6:	4854      	ldr	r0, [pc, #336]	; (800ac38 <_printf_i+0x244>)
 800aae8:	2f6f      	cmp	r7, #111	; 0x6f
 800aaea:	bf0c      	ite	eq
 800aaec:	2308      	moveq	r3, #8
 800aaee:	230a      	movne	r3, #10
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aaf6:	6865      	ldr	r5, [r4, #4]
 800aaf8:	60a5      	str	r5, [r4, #8]
 800aafa:	2d00      	cmp	r5, #0
 800aafc:	bfa2      	ittt	ge
 800aafe:	6821      	ldrge	r1, [r4, #0]
 800ab00:	f021 0104 	bicge.w	r1, r1, #4
 800ab04:	6021      	strge	r1, [r4, #0]
 800ab06:	b90e      	cbnz	r6, 800ab0c <_printf_i+0x118>
 800ab08:	2d00      	cmp	r5, #0
 800ab0a:	d04d      	beq.n	800aba8 <_printf_i+0x1b4>
 800ab0c:	4615      	mov	r5, r2
 800ab0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab12:	fb03 6711 	mls	r7, r3, r1, r6
 800ab16:	5dc7      	ldrb	r7, [r0, r7]
 800ab18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab1c:	4637      	mov	r7, r6
 800ab1e:	42bb      	cmp	r3, r7
 800ab20:	460e      	mov	r6, r1
 800ab22:	d9f4      	bls.n	800ab0e <_printf_i+0x11a>
 800ab24:	2b08      	cmp	r3, #8
 800ab26:	d10b      	bne.n	800ab40 <_printf_i+0x14c>
 800ab28:	6823      	ldr	r3, [r4, #0]
 800ab2a:	07de      	lsls	r6, r3, #31
 800ab2c:	d508      	bpl.n	800ab40 <_printf_i+0x14c>
 800ab2e:	6923      	ldr	r3, [r4, #16]
 800ab30:	6861      	ldr	r1, [r4, #4]
 800ab32:	4299      	cmp	r1, r3
 800ab34:	bfde      	ittt	le
 800ab36:	2330      	movle	r3, #48	; 0x30
 800ab38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab40:	1b52      	subs	r2, r2, r5
 800ab42:	6122      	str	r2, [r4, #16]
 800ab44:	f8cd a000 	str.w	sl, [sp]
 800ab48:	464b      	mov	r3, r9
 800ab4a:	aa03      	add	r2, sp, #12
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	4640      	mov	r0, r8
 800ab50:	f7ff fee2 	bl	800a918 <_printf_common>
 800ab54:	3001      	adds	r0, #1
 800ab56:	d14c      	bne.n	800abf2 <_printf_i+0x1fe>
 800ab58:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5c:	b004      	add	sp, #16
 800ab5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab62:	4835      	ldr	r0, [pc, #212]	; (800ac38 <_printf_i+0x244>)
 800ab64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab68:	6829      	ldr	r1, [r5, #0]
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab70:	6029      	str	r1, [r5, #0]
 800ab72:	061d      	lsls	r5, r3, #24
 800ab74:	d514      	bpl.n	800aba0 <_printf_i+0x1ac>
 800ab76:	07df      	lsls	r7, r3, #31
 800ab78:	bf44      	itt	mi
 800ab7a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab7e:	6023      	strmi	r3, [r4, #0]
 800ab80:	b91e      	cbnz	r6, 800ab8a <_printf_i+0x196>
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	f023 0320 	bic.w	r3, r3, #32
 800ab88:	6023      	str	r3, [r4, #0]
 800ab8a:	2310      	movs	r3, #16
 800ab8c:	e7b0      	b.n	800aaf0 <_printf_i+0xfc>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	f043 0320 	orr.w	r3, r3, #32
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	2378      	movs	r3, #120	; 0x78
 800ab98:	4828      	ldr	r0, [pc, #160]	; (800ac3c <_printf_i+0x248>)
 800ab9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab9e:	e7e3      	b.n	800ab68 <_printf_i+0x174>
 800aba0:	0659      	lsls	r1, r3, #25
 800aba2:	bf48      	it	mi
 800aba4:	b2b6      	uxthmi	r6, r6
 800aba6:	e7e6      	b.n	800ab76 <_printf_i+0x182>
 800aba8:	4615      	mov	r5, r2
 800abaa:	e7bb      	b.n	800ab24 <_printf_i+0x130>
 800abac:	682b      	ldr	r3, [r5, #0]
 800abae:	6826      	ldr	r6, [r4, #0]
 800abb0:	6961      	ldr	r1, [r4, #20]
 800abb2:	1d18      	adds	r0, r3, #4
 800abb4:	6028      	str	r0, [r5, #0]
 800abb6:	0635      	lsls	r5, r6, #24
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	d501      	bpl.n	800abc0 <_printf_i+0x1cc>
 800abbc:	6019      	str	r1, [r3, #0]
 800abbe:	e002      	b.n	800abc6 <_printf_i+0x1d2>
 800abc0:	0670      	lsls	r0, r6, #25
 800abc2:	d5fb      	bpl.n	800abbc <_printf_i+0x1c8>
 800abc4:	8019      	strh	r1, [r3, #0]
 800abc6:	2300      	movs	r3, #0
 800abc8:	6123      	str	r3, [r4, #16]
 800abca:	4615      	mov	r5, r2
 800abcc:	e7ba      	b.n	800ab44 <_printf_i+0x150>
 800abce:	682b      	ldr	r3, [r5, #0]
 800abd0:	1d1a      	adds	r2, r3, #4
 800abd2:	602a      	str	r2, [r5, #0]
 800abd4:	681d      	ldr	r5, [r3, #0]
 800abd6:	6862      	ldr	r2, [r4, #4]
 800abd8:	2100      	movs	r1, #0
 800abda:	4628      	mov	r0, r5
 800abdc:	f7f5 fb38 	bl	8000250 <memchr>
 800abe0:	b108      	cbz	r0, 800abe6 <_printf_i+0x1f2>
 800abe2:	1b40      	subs	r0, r0, r5
 800abe4:	6060      	str	r0, [r4, #4]
 800abe6:	6863      	ldr	r3, [r4, #4]
 800abe8:	6123      	str	r3, [r4, #16]
 800abea:	2300      	movs	r3, #0
 800abec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abf0:	e7a8      	b.n	800ab44 <_printf_i+0x150>
 800abf2:	6923      	ldr	r3, [r4, #16]
 800abf4:	462a      	mov	r2, r5
 800abf6:	4649      	mov	r1, r9
 800abf8:	4640      	mov	r0, r8
 800abfa:	47d0      	blx	sl
 800abfc:	3001      	adds	r0, #1
 800abfe:	d0ab      	beq.n	800ab58 <_printf_i+0x164>
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	079b      	lsls	r3, r3, #30
 800ac04:	d413      	bmi.n	800ac2e <_printf_i+0x23a>
 800ac06:	68e0      	ldr	r0, [r4, #12]
 800ac08:	9b03      	ldr	r3, [sp, #12]
 800ac0a:	4298      	cmp	r0, r3
 800ac0c:	bfb8      	it	lt
 800ac0e:	4618      	movlt	r0, r3
 800ac10:	e7a4      	b.n	800ab5c <_printf_i+0x168>
 800ac12:	2301      	movs	r3, #1
 800ac14:	4632      	mov	r2, r6
 800ac16:	4649      	mov	r1, r9
 800ac18:	4640      	mov	r0, r8
 800ac1a:	47d0      	blx	sl
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d09b      	beq.n	800ab58 <_printf_i+0x164>
 800ac20:	3501      	adds	r5, #1
 800ac22:	68e3      	ldr	r3, [r4, #12]
 800ac24:	9903      	ldr	r1, [sp, #12]
 800ac26:	1a5b      	subs	r3, r3, r1
 800ac28:	42ab      	cmp	r3, r5
 800ac2a:	dcf2      	bgt.n	800ac12 <_printf_i+0x21e>
 800ac2c:	e7eb      	b.n	800ac06 <_printf_i+0x212>
 800ac2e:	2500      	movs	r5, #0
 800ac30:	f104 0619 	add.w	r6, r4, #25
 800ac34:	e7f5      	b.n	800ac22 <_printf_i+0x22e>
 800ac36:	bf00      	nop
 800ac38:	0800b2c9 	.word	0x0800b2c9
 800ac3c:	0800b2da 	.word	0x0800b2da

0800ac40 <memmove>:
 800ac40:	4288      	cmp	r0, r1
 800ac42:	b510      	push	{r4, lr}
 800ac44:	eb01 0402 	add.w	r4, r1, r2
 800ac48:	d902      	bls.n	800ac50 <memmove+0x10>
 800ac4a:	4284      	cmp	r4, r0
 800ac4c:	4623      	mov	r3, r4
 800ac4e:	d807      	bhi.n	800ac60 <memmove+0x20>
 800ac50:	1e43      	subs	r3, r0, #1
 800ac52:	42a1      	cmp	r1, r4
 800ac54:	d008      	beq.n	800ac68 <memmove+0x28>
 800ac56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac5e:	e7f8      	b.n	800ac52 <memmove+0x12>
 800ac60:	4402      	add	r2, r0
 800ac62:	4601      	mov	r1, r0
 800ac64:	428a      	cmp	r2, r1
 800ac66:	d100      	bne.n	800ac6a <memmove+0x2a>
 800ac68:	bd10      	pop	{r4, pc}
 800ac6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac72:	e7f7      	b.n	800ac64 <memmove+0x24>

0800ac74 <_free_r>:
 800ac74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac76:	2900      	cmp	r1, #0
 800ac78:	d044      	beq.n	800ad04 <_free_r+0x90>
 800ac7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac7e:	9001      	str	r0, [sp, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f1a1 0404 	sub.w	r4, r1, #4
 800ac86:	bfb8      	it	lt
 800ac88:	18e4      	addlt	r4, r4, r3
 800ac8a:	f000 f913 	bl	800aeb4 <__malloc_lock>
 800ac8e:	4a1e      	ldr	r2, [pc, #120]	; (800ad08 <_free_r+0x94>)
 800ac90:	9801      	ldr	r0, [sp, #4]
 800ac92:	6813      	ldr	r3, [r2, #0]
 800ac94:	b933      	cbnz	r3, 800aca4 <_free_r+0x30>
 800ac96:	6063      	str	r3, [r4, #4]
 800ac98:	6014      	str	r4, [r2, #0]
 800ac9a:	b003      	add	sp, #12
 800ac9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aca0:	f000 b90e 	b.w	800aec0 <__malloc_unlock>
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	d908      	bls.n	800acba <_free_r+0x46>
 800aca8:	6825      	ldr	r5, [r4, #0]
 800acaa:	1961      	adds	r1, r4, r5
 800acac:	428b      	cmp	r3, r1
 800acae:	bf01      	itttt	eq
 800acb0:	6819      	ldreq	r1, [r3, #0]
 800acb2:	685b      	ldreq	r3, [r3, #4]
 800acb4:	1949      	addeq	r1, r1, r5
 800acb6:	6021      	streq	r1, [r4, #0]
 800acb8:	e7ed      	b.n	800ac96 <_free_r+0x22>
 800acba:	461a      	mov	r2, r3
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	b10b      	cbz	r3, 800acc4 <_free_r+0x50>
 800acc0:	42a3      	cmp	r3, r4
 800acc2:	d9fa      	bls.n	800acba <_free_r+0x46>
 800acc4:	6811      	ldr	r1, [r2, #0]
 800acc6:	1855      	adds	r5, r2, r1
 800acc8:	42a5      	cmp	r5, r4
 800acca:	d10b      	bne.n	800ace4 <_free_r+0x70>
 800accc:	6824      	ldr	r4, [r4, #0]
 800acce:	4421      	add	r1, r4
 800acd0:	1854      	adds	r4, r2, r1
 800acd2:	42a3      	cmp	r3, r4
 800acd4:	6011      	str	r1, [r2, #0]
 800acd6:	d1e0      	bne.n	800ac9a <_free_r+0x26>
 800acd8:	681c      	ldr	r4, [r3, #0]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	6053      	str	r3, [r2, #4]
 800acde:	4421      	add	r1, r4
 800ace0:	6011      	str	r1, [r2, #0]
 800ace2:	e7da      	b.n	800ac9a <_free_r+0x26>
 800ace4:	d902      	bls.n	800acec <_free_r+0x78>
 800ace6:	230c      	movs	r3, #12
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	e7d6      	b.n	800ac9a <_free_r+0x26>
 800acec:	6825      	ldr	r5, [r4, #0]
 800acee:	1961      	adds	r1, r4, r5
 800acf0:	428b      	cmp	r3, r1
 800acf2:	bf04      	itt	eq
 800acf4:	6819      	ldreq	r1, [r3, #0]
 800acf6:	685b      	ldreq	r3, [r3, #4]
 800acf8:	6063      	str	r3, [r4, #4]
 800acfa:	bf04      	itt	eq
 800acfc:	1949      	addeq	r1, r1, r5
 800acfe:	6021      	streq	r1, [r4, #0]
 800ad00:	6054      	str	r4, [r2, #4]
 800ad02:	e7ca      	b.n	800ac9a <_free_r+0x26>
 800ad04:	b003      	add	sp, #12
 800ad06:	bd30      	pop	{r4, r5, pc}
 800ad08:	200194d4 	.word	0x200194d4

0800ad0c <sbrk_aligned>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	4e0e      	ldr	r6, [pc, #56]	; (800ad48 <sbrk_aligned+0x3c>)
 800ad10:	460c      	mov	r4, r1
 800ad12:	6831      	ldr	r1, [r6, #0]
 800ad14:	4605      	mov	r5, r0
 800ad16:	b911      	cbnz	r1, 800ad1e <sbrk_aligned+0x12>
 800ad18:	f000 f8bc 	bl	800ae94 <_sbrk_r>
 800ad1c:	6030      	str	r0, [r6, #0]
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4628      	mov	r0, r5
 800ad22:	f000 f8b7 	bl	800ae94 <_sbrk_r>
 800ad26:	1c43      	adds	r3, r0, #1
 800ad28:	d00a      	beq.n	800ad40 <sbrk_aligned+0x34>
 800ad2a:	1cc4      	adds	r4, r0, #3
 800ad2c:	f024 0403 	bic.w	r4, r4, #3
 800ad30:	42a0      	cmp	r0, r4
 800ad32:	d007      	beq.n	800ad44 <sbrk_aligned+0x38>
 800ad34:	1a21      	subs	r1, r4, r0
 800ad36:	4628      	mov	r0, r5
 800ad38:	f000 f8ac 	bl	800ae94 <_sbrk_r>
 800ad3c:	3001      	adds	r0, #1
 800ad3e:	d101      	bne.n	800ad44 <sbrk_aligned+0x38>
 800ad40:	f04f 34ff 	mov.w	r4, #4294967295
 800ad44:	4620      	mov	r0, r4
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
 800ad48:	200194d8 	.word	0x200194d8

0800ad4c <_malloc_r>:
 800ad4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad50:	1ccd      	adds	r5, r1, #3
 800ad52:	f025 0503 	bic.w	r5, r5, #3
 800ad56:	3508      	adds	r5, #8
 800ad58:	2d0c      	cmp	r5, #12
 800ad5a:	bf38      	it	cc
 800ad5c:	250c      	movcc	r5, #12
 800ad5e:	2d00      	cmp	r5, #0
 800ad60:	4607      	mov	r7, r0
 800ad62:	db01      	blt.n	800ad68 <_malloc_r+0x1c>
 800ad64:	42a9      	cmp	r1, r5
 800ad66:	d905      	bls.n	800ad74 <_malloc_r+0x28>
 800ad68:	230c      	movs	r3, #12
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	2600      	movs	r6, #0
 800ad6e:	4630      	mov	r0, r6
 800ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad74:	4e2e      	ldr	r6, [pc, #184]	; (800ae30 <_malloc_r+0xe4>)
 800ad76:	f000 f89d 	bl	800aeb4 <__malloc_lock>
 800ad7a:	6833      	ldr	r3, [r6, #0]
 800ad7c:	461c      	mov	r4, r3
 800ad7e:	bb34      	cbnz	r4, 800adce <_malloc_r+0x82>
 800ad80:	4629      	mov	r1, r5
 800ad82:	4638      	mov	r0, r7
 800ad84:	f7ff ffc2 	bl	800ad0c <sbrk_aligned>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	d14d      	bne.n	800ae2a <_malloc_r+0xde>
 800ad8e:	6834      	ldr	r4, [r6, #0]
 800ad90:	4626      	mov	r6, r4
 800ad92:	2e00      	cmp	r6, #0
 800ad94:	d140      	bne.n	800ae18 <_malloc_r+0xcc>
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	4631      	mov	r1, r6
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	eb04 0803 	add.w	r8, r4, r3
 800ada0:	f000 f878 	bl	800ae94 <_sbrk_r>
 800ada4:	4580      	cmp	r8, r0
 800ada6:	d13a      	bne.n	800ae1e <_malloc_r+0xd2>
 800ada8:	6821      	ldr	r1, [r4, #0]
 800adaa:	3503      	adds	r5, #3
 800adac:	1a6d      	subs	r5, r5, r1
 800adae:	f025 0503 	bic.w	r5, r5, #3
 800adb2:	3508      	adds	r5, #8
 800adb4:	2d0c      	cmp	r5, #12
 800adb6:	bf38      	it	cc
 800adb8:	250c      	movcc	r5, #12
 800adba:	4629      	mov	r1, r5
 800adbc:	4638      	mov	r0, r7
 800adbe:	f7ff ffa5 	bl	800ad0c <sbrk_aligned>
 800adc2:	3001      	adds	r0, #1
 800adc4:	d02b      	beq.n	800ae1e <_malloc_r+0xd2>
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	442b      	add	r3, r5
 800adca:	6023      	str	r3, [r4, #0]
 800adcc:	e00e      	b.n	800adec <_malloc_r+0xa0>
 800adce:	6822      	ldr	r2, [r4, #0]
 800add0:	1b52      	subs	r2, r2, r5
 800add2:	d41e      	bmi.n	800ae12 <_malloc_r+0xc6>
 800add4:	2a0b      	cmp	r2, #11
 800add6:	d916      	bls.n	800ae06 <_malloc_r+0xba>
 800add8:	1961      	adds	r1, r4, r5
 800adda:	42a3      	cmp	r3, r4
 800addc:	6025      	str	r5, [r4, #0]
 800adde:	bf18      	it	ne
 800ade0:	6059      	strne	r1, [r3, #4]
 800ade2:	6863      	ldr	r3, [r4, #4]
 800ade4:	bf08      	it	eq
 800ade6:	6031      	streq	r1, [r6, #0]
 800ade8:	5162      	str	r2, [r4, r5]
 800adea:	604b      	str	r3, [r1, #4]
 800adec:	4638      	mov	r0, r7
 800adee:	f104 060b 	add.w	r6, r4, #11
 800adf2:	f000 f865 	bl	800aec0 <__malloc_unlock>
 800adf6:	f026 0607 	bic.w	r6, r6, #7
 800adfa:	1d23      	adds	r3, r4, #4
 800adfc:	1af2      	subs	r2, r6, r3
 800adfe:	d0b6      	beq.n	800ad6e <_malloc_r+0x22>
 800ae00:	1b9b      	subs	r3, r3, r6
 800ae02:	50a3      	str	r3, [r4, r2]
 800ae04:	e7b3      	b.n	800ad6e <_malloc_r+0x22>
 800ae06:	6862      	ldr	r2, [r4, #4]
 800ae08:	42a3      	cmp	r3, r4
 800ae0a:	bf0c      	ite	eq
 800ae0c:	6032      	streq	r2, [r6, #0]
 800ae0e:	605a      	strne	r2, [r3, #4]
 800ae10:	e7ec      	b.n	800adec <_malloc_r+0xa0>
 800ae12:	4623      	mov	r3, r4
 800ae14:	6864      	ldr	r4, [r4, #4]
 800ae16:	e7b2      	b.n	800ad7e <_malloc_r+0x32>
 800ae18:	4634      	mov	r4, r6
 800ae1a:	6876      	ldr	r6, [r6, #4]
 800ae1c:	e7b9      	b.n	800ad92 <_malloc_r+0x46>
 800ae1e:	230c      	movs	r3, #12
 800ae20:	603b      	str	r3, [r7, #0]
 800ae22:	4638      	mov	r0, r7
 800ae24:	f000 f84c 	bl	800aec0 <__malloc_unlock>
 800ae28:	e7a1      	b.n	800ad6e <_malloc_r+0x22>
 800ae2a:	6025      	str	r5, [r4, #0]
 800ae2c:	e7de      	b.n	800adec <_malloc_r+0xa0>
 800ae2e:	bf00      	nop
 800ae30:	200194d4 	.word	0x200194d4

0800ae34 <_realloc_r>:
 800ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	4680      	mov	r8, r0
 800ae3a:	4614      	mov	r4, r2
 800ae3c:	460e      	mov	r6, r1
 800ae3e:	b921      	cbnz	r1, 800ae4a <_realloc_r+0x16>
 800ae40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae44:	4611      	mov	r1, r2
 800ae46:	f7ff bf81 	b.w	800ad4c <_malloc_r>
 800ae4a:	b92a      	cbnz	r2, 800ae58 <_realloc_r+0x24>
 800ae4c:	f7ff ff12 	bl	800ac74 <_free_r>
 800ae50:	4625      	mov	r5, r4
 800ae52:	4628      	mov	r0, r5
 800ae54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae58:	f000 f838 	bl	800aecc <_malloc_usable_size_r>
 800ae5c:	4284      	cmp	r4, r0
 800ae5e:	4607      	mov	r7, r0
 800ae60:	d802      	bhi.n	800ae68 <_realloc_r+0x34>
 800ae62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae66:	d812      	bhi.n	800ae8e <_realloc_r+0x5a>
 800ae68:	4621      	mov	r1, r4
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	f7ff ff6e 	bl	800ad4c <_malloc_r>
 800ae70:	4605      	mov	r5, r0
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d0ed      	beq.n	800ae52 <_realloc_r+0x1e>
 800ae76:	42bc      	cmp	r4, r7
 800ae78:	4622      	mov	r2, r4
 800ae7a:	4631      	mov	r1, r6
 800ae7c:	bf28      	it	cs
 800ae7e:	463a      	movcs	r2, r7
 800ae80:	f7ff fbb8 	bl	800a5f4 <memcpy>
 800ae84:	4631      	mov	r1, r6
 800ae86:	4640      	mov	r0, r8
 800ae88:	f7ff fef4 	bl	800ac74 <_free_r>
 800ae8c:	e7e1      	b.n	800ae52 <_realloc_r+0x1e>
 800ae8e:	4635      	mov	r5, r6
 800ae90:	e7df      	b.n	800ae52 <_realloc_r+0x1e>
	...

0800ae94 <_sbrk_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4d06      	ldr	r5, [pc, #24]	; (800aeb0 <_sbrk_r+0x1c>)
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	602b      	str	r3, [r5, #0]
 800aea0:	f7f6 ff74 	bl	8001d8c <_sbrk>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d102      	bne.n	800aeae <_sbrk_r+0x1a>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	b103      	cbz	r3, 800aeae <_sbrk_r+0x1a>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	200194dc 	.word	0x200194dc

0800aeb4 <__malloc_lock>:
 800aeb4:	4801      	ldr	r0, [pc, #4]	; (800aebc <__malloc_lock+0x8>)
 800aeb6:	f000 b811 	b.w	800aedc <__retarget_lock_acquire_recursive>
 800aeba:	bf00      	nop
 800aebc:	200194e0 	.word	0x200194e0

0800aec0 <__malloc_unlock>:
 800aec0:	4801      	ldr	r0, [pc, #4]	; (800aec8 <__malloc_unlock+0x8>)
 800aec2:	f000 b80c 	b.w	800aede <__retarget_lock_release_recursive>
 800aec6:	bf00      	nop
 800aec8:	200194e0 	.word	0x200194e0

0800aecc <_malloc_usable_size_r>:
 800aecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed0:	1f18      	subs	r0, r3, #4
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	bfbc      	itt	lt
 800aed6:	580b      	ldrlt	r3, [r1, r0]
 800aed8:	18c0      	addlt	r0, r0, r3
 800aeda:	4770      	bx	lr

0800aedc <__retarget_lock_acquire_recursive>:
 800aedc:	4770      	bx	lr

0800aede <__retarget_lock_release_recursive>:
 800aede:	4770      	bx	lr

0800aee0 <_init>:
 800aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee2:	bf00      	nop
 800aee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee6:	bc08      	pop	{r3}
 800aee8:	469e      	mov	lr, r3
 800aeea:	4770      	bx	lr

0800aeec <_fini>:
 800aeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeee:	bf00      	nop
 800aef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef2:	bc08      	pop	{r3}
 800aef4:	469e      	mov	lr, r3
 800aef6:	4770      	bx	lr
