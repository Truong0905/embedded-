
DATN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e788  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  0800e988  0800e988  0001e988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f390  0800f390  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f390  0800f390  0001f390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f398  0800f398  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f398  0800f398  0001f398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f39c  0800f39c  0001f39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800f3a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001b714  200000b4  0800f454  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001b7c8  0800f454  0002b7c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c3e  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004747  00000000  00000000  00041d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00046468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a60  00000000  00000000  000480c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb5e  00000000  00000000  00049b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028f12  00000000  00000000  0007867e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a5ac  00000000  00000000  000a1590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001abb3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a3c  00000000  00000000  001abb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b4 	.word	0x200000b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e970 	.word	0x0800e970

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b8 	.word	0x200000b8
 800023c:	0800e970 	.word	0x0800e970

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <get_number>:

int extract_command ( command_t *cmd ) ;
void process_command ( command_t *cmd) ;
void checkState( command_t *cmd );
uint8_t get_number(uint8_t *p , int len )
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	int value ;
	if (len>1)
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	dd0f      	ble.n	8000624 <get_number+0x30>
	{
		value = (((p[0]-48)*10) +(p[1]-48)) ;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800060c:	4613      	mov	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4413      	add	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	461a      	mov	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3301      	adds	r3, #1
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	3b30      	subs	r3, #48	; 0x30
 800061e:	4413      	add	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	e003      	b.n	800062c <get_number+0x38>
	}
	else
	value = p[0]-48 ;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	3b30      	subs	r3, #48	; 0x30
 800062a:	60fb      	str	r3, [r7, #12]
	return value ;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	b2db      	uxtb	r3, r3
}
 8000630:	4618      	mov	r0, r3
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <clear_buffer>:
	while (*buf++ != '\0') i++;
	return i;
}

void clear_buffer (char *buffer , uint8_t len)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
	for (int i=0; i<len; i++) buffer[i] = '\0';
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e007      	b.n	800065e <clear_buffer+0x22>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3301      	adds	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	78fb      	ldrb	r3, [r7, #3]
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	429a      	cmp	r2, r3
 8000664:	dbf3      	blt.n	800064e <clear_buffer+0x12>
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <send_uart>:

void send_uart (const char *string)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff fddf 	bl	8000240 <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	b29a      	uxth	r2, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <send_uart+0x2c>)
 8000692:	f005 f9cd 	bl	8005a30 <HAL_UART_Transmit>
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20002294 	.word	0x20002294

080006a4 <read_Pin_Input>:



void read_Pin_Input()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	I0_0 = HAL_GPIO_ReadPin(I0_0_PORT, I0_0_PIN);
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <read_Pin_Input+0x1c>)
 80006ae:	f002 f925 	bl	80028fc <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <read_Pin_Input+0x20>)
 80006b8:	701a      	strb	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40020800 	.word	0x40020800
 80006c4:	200000d0 	.word	0x200000d0

080006c8 <write_Pin_Output>:
void write_Pin_Output()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	if (Q0_0 >= 1)
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <write_Pin_Output+0x74>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d006      	beq.n	80006e4 <write_Pin_Output+0x1c>
	{
		HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, ENABLE);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006dc:	4818      	ldr	r0, [pc, #96]	; (8000740 <write_Pin_Output+0x78>)
 80006de:	f002 f925 	bl	800292c <HAL_GPIO_WritePin>
 80006e2:	e005      	b.n	80006f0 <write_Pin_Output+0x28>
	}
	else
	{
		HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, DISABLE);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ea:	4815      	ldr	r0, [pc, #84]	; (8000740 <write_Pin_Output+0x78>)
 80006ec:	f002 f91e 	bl	800292c <HAL_GPIO_WritePin>
	}
	if (Q0_1 >= 1)
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <write_Pin_Output+0x74>)
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d006      	beq.n	8000708 <write_Pin_Output+0x40>
	{
		HAL_GPIO_WritePin(Q0_1_PORT, Q0_1_PIN, ENABLE);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <write_Pin_Output+0x78>)
 8000702:	f002 f913 	bl	800292c <HAL_GPIO_WritePin>
 8000706:	e005      	b.n	8000714 <write_Pin_Output+0x4c>
	}
	else
	{
		HAL_GPIO_WritePin(Q0_1_PORT, Q0_1_PIN, DISABLE);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <write_Pin_Output+0x78>)
 8000710:	f002 f90c 	bl	800292c <HAL_GPIO_WritePin>
	}
	if (Q0_2 >= 1)
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <write_Pin_Output+0x74>)
 8000716:	789b      	ldrb	r3, [r3, #2]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <write_Pin_Output+0x64>
	{
		HAL_GPIO_WritePin(Q0_2_PORT, Q0_2_PIN, ENABLE);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	4806      	ldr	r0, [pc, #24]	; (8000740 <write_Pin_Output+0x78>)
 8000726:	f002 f901 	bl	800292c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(Q0_2_PORT, Q0_2_PIN, DISABLE);
	}
}
 800072a:	e005      	b.n	8000738 <write_Pin_Output+0x70>
		HAL_GPIO_WritePin(Q0_2_PORT, Q0_2_PIN, DISABLE);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	4803      	ldr	r0, [pc, #12]	; (8000740 <write_Pin_Output+0x78>)
 8000734:	f002 f8fa 	bl	800292c <HAL_GPIO_WritePin>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000e0 	.word	0x200000e0
 8000740:	40020800 	.word	0x40020800

08000744 <Main_task>:
void Main_task(void *param)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b087      	sub	sp, #28
 8000748:	af02      	add	r7, sp, #8
 800074a:	6078      	str	r0, [r7, #4]
	volatile static const uint32_t datC2 = 2;
	volatile static uint8_t startC2 = 0;
	volatile static uint8_t checkC2 = 0;
	while (1)
	{
		read_Pin_Input();
 800074c:	f7ff ffaa 	bl	80006a4 <read_Pin_Input>
		/*--------------NetWork 1 -----------*/

		volatile uint8_t tempC2_0 = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	73fb      	strb	r3, [r7, #15]
		if (countC2 < 2)
 8000754:	4b98      	ldr	r3, [pc, #608]	; (80009b8 <Main_task+0x274>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d801      	bhi.n	8000760 <Main_task+0x1c>
		{
			tempC2_0 = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
		}
		M0_0 = ((I0_0 + M0_0) * tempC2_0);
 8000760:	4b96      	ldr	r3, [pc, #600]	; (80009bc <Main_task+0x278>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b96      	ldr	r3, [pc, #600]	; (80009c0 <Main_task+0x27c>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4413      	add	r3, r2
 800076e:	b2da      	uxtb	r2, r3
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	fb12 f303 	smulbb	r3, r2, r3
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b91      	ldr	r3, [pc, #580]	; (80009c0 <Main_task+0x27c>)
 800077c:	701a      	strb	r2, [r3, #0]
		if (M0_0 > 0)
 800077e:	4b90      	ldr	r3, [pc, #576]	; (80009c0 <Main_task+0x27c>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	d003      	beq.n	8000790 <Main_task+0x4c>
		{
			M0_0 = 1;
 8000788:	4b8d      	ldr	r3, [pc, #564]	; (80009c0 <Main_task+0x27c>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e002      	b.n	8000796 <Main_task+0x52>
		}
		else
		{
			M0_0 = 0;
 8000790:	4b8b      	ldr	r3, [pc, #556]	; (80009c0 <Main_task+0x27c>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
		}
		/*--------------NetWork 2 -----------*/

		if (!T37reset)
 8000796:	4b8b      	ldr	r3, [pc, #556]	; (80009c4 <Main_task+0x280>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d148      	bne.n	8000830 <Main_task+0xec>
		{
			vaoT37 = (M0_0);
 800079e:	4b88      	ldr	r3, [pc, #544]	; (80009c0 <Main_task+0x27c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b88      	ldr	r3, [pc, #544]	; (80009c8 <Main_task+0x284>)
 80007a6:	701a      	strb	r2, [r3, #0]
			T37;
 80007a8:	4b88      	ldr	r3, [pc, #544]	; (80009cc <Main_task+0x288>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
			if (vaoT37)
 80007ac:	4b86      	ldr	r3, [pc, #536]	; (80009c8 <Main_task+0x284>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d023      	beq.n	80007fe <Main_task+0xba>
			{
				if (countT37 >= datT37)
 80007b6:	4b86      	ldr	r3, [pc, #536]	; (80009d0 <Main_task+0x28c>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4b86      	ldr	r3, [pc, #536]	; (80009d4 <Main_task+0x290>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d302      	bcc.n	80007c8 <Main_task+0x84>
					T37 = 1;
 80007c2:	4b82      	ldr	r3, [pc, #520]	; (80009cc <Main_task+0x288>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]

				if ((T37 == 0) && (checkT37 == 0))
 80007c8:	4b80      	ldr	r3, [pc, #512]	; (80009cc <Main_task+0x288>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d141      	bne.n	8000856 <Main_task+0x112>
 80007d2:	4b81      	ldr	r3, [pc, #516]	; (80009d8 <Main_task+0x294>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d13c      	bne.n	8000856 <Main_task+0x112>
				{
					xTimerStart(handle_timerPLC[0], portMAX_DELAY);
 80007dc:	4b7f      	ldr	r3, [pc, #508]	; (80009dc <Main_task+0x298>)
 80007de:	681c      	ldr	r4, [r3, #0]
 80007e0:	f00b f870 	bl	800b8c4 <xTaskGetTickCount>
 80007e4:	4602      	mov	r2, r0
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2300      	movs	r3, #0
 80007ee:	2101      	movs	r1, #1
 80007f0:	4620      	mov	r0, r4
 80007f2:	f00b ff09 	bl	800c608 <xTimerGenericCommand>
					checkT37 = 1;
 80007f6:	4b78      	ldr	r3, [pc, #480]	; (80009d8 <Main_task+0x294>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
 80007fc:	e02b      	b.n	8000856 <Main_task+0x112>
				}
			}
			else
			{
				if (checkT37 == 1)
 80007fe:	4b76      	ldr	r3, [pc, #472]	; (80009d8 <Main_task+0x294>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b01      	cmp	r3, #1
 8000806:	d10c      	bne.n	8000822 <Main_task+0xde>
				{
					xTimerStop(handle_timerPLC[0], portMAX_DELAY);
 8000808:	4b74      	ldr	r3, [pc, #464]	; (80009dc <Main_task+0x298>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2300      	movs	r3, #0
 8000814:	2200      	movs	r2, #0
 8000816:	2103      	movs	r1, #3
 8000818:	f00b fef6 	bl	800c608 <xTimerGenericCommand>
					checkT37 = 0;
 800081c:	4b6e      	ldr	r3, [pc, #440]	; (80009d8 <Main_task+0x294>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
				}
				T37 = 0;
 8000822:	4b6a      	ldr	r3, [pc, #424]	; (80009cc <Main_task+0x288>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
				countT37 = 0;
 8000828:	4b69      	ldr	r3, [pc, #420]	; (80009d0 <Main_task+0x28c>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	e012      	b.n	8000856 <Main_task+0x112>
			}
		}
		else
		{
			xTimerStop(handle_timerPLC[0], portMAX_DELAY);
 8000830:	4b6a      	ldr	r3, [pc, #424]	; (80009dc <Main_task+0x298>)
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	f04f 33ff 	mov.w	r3, #4294967295
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2300      	movs	r3, #0
 800083c:	2200      	movs	r2, #0
 800083e:	2103      	movs	r1, #3
 8000840:	f00b fee2 	bl	800c608 <xTimerGenericCommand>
			countT37 = 0;
 8000844:	4b62      	ldr	r3, [pc, #392]	; (80009d0 <Main_task+0x28c>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
			T37 = 0;
 800084a:	4b60      	ldr	r3, [pc, #384]	; (80009cc <Main_task+0x288>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
			checkT37 = 0;
 8000850:	4b61      	ldr	r3, [pc, #388]	; (80009d8 <Main_task+0x294>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
		}
		/*--------------NetWork 3 -----------*/

		volatile uint8_t T37sl0 = T37;
 8000856:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <Main_task+0x288>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	73bb      	strb	r3, [r7, #14]
		volatile static uint8_t checkEU0 = 0;
		if (!(T37))
 800085e:	4b5b      	ldr	r3, [pc, #364]	; (80009cc <Main_task+0x288>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <Main_task+0x12a>
		{
			checkEU0 = 0;
 8000868:	4b5d      	ldr	r3, [pc, #372]	; (80009e0 <Main_task+0x29c>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
		}
		if ((!checkEU0) && (T37))
 800086e:	4b5c      	ldr	r3, [pc, #368]	; (80009e0 <Main_task+0x29c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d109      	bne.n	800088c <Main_task+0x148>
 8000878:	4b54      	ldr	r3, [pc, #336]	; (80009cc <Main_task+0x288>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d004      	beq.n	800088c <Main_task+0x148>
		{
			checkEU0 = 0;
 8000882:	4b57      	ldr	r3, [pc, #348]	; (80009e0 <Main_task+0x29c>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
			T37sl0 = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	73bb      	strb	r3, [r7, #14]
		}
		volatile uint8_t tempC1_1 = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	737b      	strb	r3, [r7, #13]
		if (countC1 >= 50)
 8000890:	4b54      	ldr	r3, [pc, #336]	; (80009e4 <Main_task+0x2a0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b31      	cmp	r3, #49	; 0x31
 8000896:	d901      	bls.n	800089c <Main_task+0x158>
		{
			tempC1_1 = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	737b      	strb	r3, [r7, #13]
		}
		vaoC1 = (T37sl0);
 800089c:	7bbb      	ldrb	r3, [r7, #14]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b51      	ldr	r3, [pc, #324]	; (80009e8 <Main_task+0x2a4>)
 80008a2:	701a      	strb	r2, [r3, #0]
		resetC1 = (tempC1_1 + (!M0_0));
 80008a4:	4b46      	ldr	r3, [pc, #280]	; (80009c0 <Main_task+0x27c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	bf0c      	ite	eq
 80008ae:	2301      	moveq	r3, #1
 80008b0:	2300      	movne	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	7b7b      	ldrb	r3, [r7, #13]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4413      	add	r3, r2
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b4b      	ldr	r3, [pc, #300]	; (80009ec <Main_task+0x2a8>)
 80008c0:	701a      	strb	r2, [r3, #0]
		if (resetC1)
 80008c2:	4b4a      	ldr	r3, [pc, #296]	; (80009ec <Main_task+0x2a8>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d009      	beq.n	80008e0 <Main_task+0x19c>
		{
			countC1 = 0;
 80008cc:	4b45      	ldr	r3, [pc, #276]	; (80009e4 <Main_task+0x2a0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
			C1 = 0;
 80008d2:	4b47      	ldr	r3, [pc, #284]	; (80009f0 <Main_task+0x2ac>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
			startC1 = 1;
 80008d8:	4b46      	ldr	r3, [pc, #280]	; (80009f4 <Main_task+0x2b0>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	e025      	b.n	800092c <Main_task+0x1e8>
		}
		else
		{
			if (vaoC1)
 80008e0:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <Main_task+0x2a4>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d01d      	beq.n	8000926 <Main_task+0x1e2>
			{
				if (((checkC1 == 1) || (startC1 == 1)) && (countC1 <= 4294967295))
 80008ea:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <Main_task+0x2b4>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d004      	beq.n	80008fe <Main_task+0x1ba>
 80008f4:	4b3f      	ldr	r3, [pc, #252]	; (80009f4 <Main_task+0x2b0>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d109      	bne.n	8000912 <Main_task+0x1ce>
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <Main_task+0x2a0>)
 8000900:	681b      	ldr	r3, [r3, #0]
				{
					countC1++;
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <Main_task+0x2a0>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	4a36      	ldr	r2, [pc, #216]	; (80009e4 <Main_task+0x2a0>)
 800090a:	6013      	str	r3, [r2, #0]
					startC1 = 0;
 800090c:	4b39      	ldr	r3, [pc, #228]	; (80009f4 <Main_task+0x2b0>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
				}
				if (countC1 >= datC1)
 8000912:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <Main_task+0x2a0>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4b39      	ldr	r3, [pc, #228]	; (80009fc <Main_task+0x2b8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	429a      	cmp	r2, r3
 800091c:	d306      	bcc.n	800092c <Main_task+0x1e8>
				{
					C1 = 1;
 800091e:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <Main_task+0x2ac>)
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e002      	b.n	800092c <Main_task+0x1e8>
				}
			}
			else
			{
				checkC1 = 1;
 8000926:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <Main_task+0x2b4>)
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
			}
		}
		/*--------------NetWork 4 -----------*/

		volatile uint8_t tempC1_2 = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	733b      	strb	r3, [r7, #12]
		if (countC1 <= 20)
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <Main_task+0x2a0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b14      	cmp	r3, #20
 8000936:	d801      	bhi.n	800093c <Main_task+0x1f8>
		{
			tempC1_2 = 1;
 8000938:	2301      	movs	r3, #1
 800093a:	733b      	strb	r3, [r7, #12]
		}
		Q0_0 = (tempC1_2 * M0_0);
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <Main_task+0x27c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	7b3b      	ldrb	r3, [r7, #12]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	fb12 f303 	smulbb	r3, r2, r3
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <Main_task+0x2bc>)
 800094e:	701a      	strb	r2, [r3, #0]
		if (Q0_0 > 0)
 8000950:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <Main_task+0x2bc>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <Main_task+0x21e>
		{
			Q0_0 = 1;
 800095a:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <Main_task+0x2bc>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
 8000960:	e002      	b.n	8000968 <Main_task+0x224>
		}
		else
		{
			Q0_0 = 0;
 8000962:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <Main_task+0x2bc>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
		}
		/*--------------NetWork 5 -----------*/

		volatile uint8_t tempC1_3 = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	72fb      	strb	r3, [r7, #11]
		if (countC1 > 20)
 800096c:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <Main_task+0x2a0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b14      	cmp	r3, #20
 8000972:	d901      	bls.n	8000978 <Main_task+0x234>
		{
			tempC1_3 = 1;
 8000974:	2301      	movs	r3, #1
 8000976:	72fb      	strb	r3, [r7, #11]
		}
		volatile uint8_t tempC1_4 = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	72bb      	strb	r3, [r7, #10]
		if (countC1 <= 25)
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <Main_task+0x2a0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b19      	cmp	r3, #25
 8000982:	d801      	bhi.n	8000988 <Main_task+0x244>
		{
			tempC1_4 = 1;
 8000984:	2301      	movs	r3, #1
 8000986:	72bb      	strb	r3, [r7, #10]
		}
		Q0_2 = (tempC1_3 * tempC1_4 * M0_0);
 8000988:	7afb      	ldrb	r3, [r7, #11]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	7abb      	ldrb	r3, [r7, #10]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	fb12 f303 	smulbb	r3, r2, r3
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <Main_task+0x27c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	fb12 f303 	smulbb	r3, r2, r3
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <Main_task+0x2bc>)
 80009a4:	709a      	strb	r2, [r3, #2]
		if (Q0_2 > 0)
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <Main_task+0x2bc>)
 80009a8:	789b      	ldrb	r3, [r3, #2]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d029      	beq.n	8000a04 <Main_task+0x2c0>
		{
			Q0_2 = 1;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <Main_task+0x2bc>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	709a      	strb	r2, [r3, #2]
 80009b6:	e028      	b.n	8000a0a <Main_task+0x2c6>
 80009b8:	2000011c 	.word	0x2000011c
 80009bc:	200000d0 	.word	0x200000d0
 80009c0:	200000f0 	.word	0x200000f0
 80009c4:	2000010c 	.word	0x2000010c
 80009c8:	200021a0 	.word	0x200021a0
 80009cc:	20000104 	.word	0x20000104
 80009d0:	20000108 	.word	0x20000108
 80009d4:	20000010 	.word	0x20000010
 80009d8:	200021a1 	.word	0x200021a1
 80009dc:	20002318 	.word	0x20002318
 80009e0:	200021a2 	.word	0x200021a2
 80009e4:	20000114 	.word	0x20000114
 80009e8:	200021a3 	.word	0x200021a3
 80009ec:	200021a4 	.word	0x200021a4
 80009f0:	20000110 	.word	0x20000110
 80009f4:	200021a5 	.word	0x200021a5
 80009f8:	200021a6 	.word	0x200021a6
 80009fc:	20000014 	.word	0x20000014
 8000a00:	200000e0 	.word	0x200000e0
		}
		else
		{
			Q0_2 = 0;
 8000a04:	4b48      	ldr	r3, [pc, #288]	; (8000b28 <Main_task+0x3e4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	709a      	strb	r2, [r3, #2]
		}
		/*--------------NetWork 6 -----------*/

		volatile uint8_t tempC1_5 = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	727b      	strb	r3, [r7, #9]
		if (countC1 > 25)
 8000a0e:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <Main_task+0x3e8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b19      	cmp	r3, #25
 8000a14:	d901      	bls.n	8000a1a <Main_task+0x2d6>
		{
			tempC1_5 = 1;
 8000a16:	2301      	movs	r3, #1
 8000a18:	727b      	strb	r3, [r7, #9]
		}
		Q0_1 = (tempC1_5 * M0_0);
 8000a1a:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <Main_task+0x3ec>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	7a7b      	ldrb	r3, [r7, #9]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	fb12 f303 	smulbb	r3, r2, r3
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4b3f      	ldr	r3, [pc, #252]	; (8000b28 <Main_task+0x3e4>)
 8000a2c:	705a      	strb	r2, [r3, #1]
		if (Q0_1 > 0)
 8000a2e:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <Main_task+0x3e4>)
 8000a30:	785b      	ldrb	r3, [r3, #1]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d003      	beq.n	8000a40 <Main_task+0x2fc>
		{
			Q0_1 = 1;
 8000a38:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <Main_task+0x3e4>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	705a      	strb	r2, [r3, #1]
 8000a3e:	e002      	b.n	8000a46 <Main_task+0x302>
		}
		else
		{
			Q0_1 = 0;
 8000a40:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <Main_task+0x3e4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	705a      	strb	r2, [r3, #1]
		}
		/*--------------NetWork 7 -----------*/

		volatile uint8_t T37sl1 = T37;
 8000a46:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <Main_task+0x3f0>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	723b      	strb	r3, [r7, #8]
		volatile static uint8_t checkEU1 = 0;
		if (!(T37))
 8000a4e:	4b39      	ldr	r3, [pc, #228]	; (8000b34 <Main_task+0x3f0>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <Main_task+0x31a>
		{
			checkEU1 = 0;
 8000a58:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <Main_task+0x3f4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
		}
		if ((!checkEU1) && (T37))
 8000a5e:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <Main_task+0x3f4>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d109      	bne.n	8000a7c <Main_task+0x338>
 8000a68:	4b32      	ldr	r3, [pc, #200]	; (8000b34 <Main_task+0x3f0>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d004      	beq.n	8000a7c <Main_task+0x338>
		{
			checkEU1 = 0;
 8000a72:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <Main_task+0x3f4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
			T37sl1 = 1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	723b      	strb	r3, [r7, #8]
		}
		T37reset = (T37sl1);
 8000a7c:	7a3b      	ldrb	r3, [r7, #8]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <Main_task+0x3f8>)
 8000a84:	601a      	str	r2, [r3, #0]
		if (T37reset > 0)
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <Main_task+0x3f8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <Main_task+0x352>
		{
			T37reset = 1;
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <Main_task+0x3f8>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	e002      	b.n	8000a9c <Main_task+0x358>
		}
		else
		{
			T37reset = 0;
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <Main_task+0x3f8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
		}
		/*--------------NetWork 8 -----------*/

		vaoC2 = (I0_0);
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <Main_task+0x3fc>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <Main_task+0x400>)
 8000aa4:	701a      	strb	r2, [r3, #0]
		resetC2 = (C2);
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <Main_task+0x404>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <Main_task+0x408>)
 8000aae:	701a      	strb	r2, [r3, #0]
		if (resetC2)
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <Main_task+0x408>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d009      	beq.n	8000ace <Main_task+0x38a>
		{
			countC2 = 0;
 8000aba:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <Main_task+0x40c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
			C2 = 0;
 8000ac0:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <Main_task+0x404>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
			startC2 = 1;
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <Main_task+0x410>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	e025      	b.n	8000b1a <Main_task+0x3d6>
		}
		else
		{
			if (vaoC2)
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <Main_task+0x400>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d01d      	beq.n	8000b14 <Main_task+0x3d0>
			{
				if (((checkC2 == 1) || (startC2 == 1)) && (countC2 <= 4294967295))
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <Main_task+0x414>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d004      	beq.n	8000aec <Main_task+0x3a8>
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <Main_task+0x410>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d109      	bne.n	8000b00 <Main_task+0x3bc>
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <Main_task+0x40c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
				{
					countC2++;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <Main_task+0x40c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <Main_task+0x40c>)
 8000af8:	6013      	str	r3, [r2, #0]
					startC2 = 0;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <Main_task+0x410>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
				}
				if (countC2 >= datC2)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <Main_task+0x40c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <Main_task+0x418>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d306      	bcc.n	8000b1a <Main_task+0x3d6>
				{
					C2 = 1;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <Main_task+0x404>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e002      	b.n	8000b1a <Main_task+0x3d6>
				}
			}
			else
			{
				checkC2 = 1;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <Main_task+0x414>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
			}
		}
		write_Pin_Output();
 8000b1a:	f7ff fdd5 	bl	80006c8 <write_Pin_Output>
		vTaskDelay(2);
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f00a fdaa 	bl	800b678 <vTaskDelay>
	{
 8000b24:	e612      	b.n	800074c <Main_task+0x8>
 8000b26:	bf00      	nop
 8000b28:	200000e0 	.word	0x200000e0
 8000b2c:	20000114 	.word	0x20000114
 8000b30:	200000f0 	.word	0x200000f0
 8000b34:	20000104 	.word	0x20000104
 8000b38:	200021a7 	.word	0x200021a7
 8000b3c:	2000010c 	.word	0x2000010c
 8000b40:	200000d0 	.word	0x200000d0
 8000b44:	200021a8 	.word	0x200021a8
 8000b48:	20000118 	.word	0x20000118
 8000b4c:	200021a9 	.word	0x200021a9
 8000b50:	2000011c 	.word	0x2000011c
 8000b54:	200021aa 	.word	0x200021aa
 8000b58:	200021ab 	.word	0x200021ab
 8000b5c:	20000018 	.word	0x20000018

08000b60 <TimerCallBack>:
	}
}
void TimerCallBack(TimerHandle_t xTimer)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f00c f831 	bl	800cbd0 <pvTimerGetTimerID>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	60fb      	str	r3, [r7, #12]
	switch (id)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d105      	bne.n	8000b84 <TimerCallBack+0x24>
	{
	case 1:
		countT37++;
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <TimerCallBack+0x2c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <TimerCallBack+0x2c>)
 8000b80:	6013      	str	r3, [r2, #0]
		break;
 8000b82:	bf00      	nop
	}
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000108 	.word	0x20000108

08000b90 <initTimer>:
void initTimer(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af02      	add	r7, sp, #8
	handle_timerPLC[0] = xTimerCreate("timerTONT37", pdMS_TO_TICKS(100), pdTRUE, (void *)(0 + 1), TimerCallBack);
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <initTimer+0x24>)
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <initTimer+0x28>)
 8000ba4:	f00b fcd6 	bl	800c554 <xTimerCreate>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <initTimer+0x2c>)
 8000bac:	6013      	str	r3, [r2, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	08000b61 	.word	0x08000b61
 8000bb8:	0800e988 	.word	0x0800e988
 8000bbc:	20002318 	.word	0x20002318

08000bc0 <Start_task>:
						"Enter  your choice here : " ;
const char *msg_inv = "///// Invalid option ???? ///// \n" ;
const char *msg_time_error = "Time error \n" ;

void Start_task ( void *param)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b09e      	sub	sp, #120	; 0x78
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	6078      	str	r0, [r7, #4]
	BaseType_t status ;
	uint32_t cmd_addr;
	command_t *cmd;
	 RTC_TIME time ;
	 const char *msg_start = "====================\n"
 8000bc8:	4b9b      	ldr	r3, [pc, #620]	; (8000e38 <Start_task+0x278>)
 8000bca:	66bb      	str	r3, [r7, #104]	; 0x68
							"Exit  				-->2  \n"
			 	 	 	 	"Enter  your choice here : " ;
	while(1)
	{

		status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f00b f9f1 	bl	800bfc0 <xTaskGenericNotifyWait>
 8000bde:	6678      	str	r0, [r7, #100]	; 0x64
		if (status != pdTRUE) continue ;
 8000be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	f040 81e6 	bne.w	8000fb4 <Start_task+0x3f4>
		RTC_Get_Time(&time);
 8000be8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bec:	4618      	mov	r0, r3
 8000bee:	f00c fc8d 	bl	800d50c <RTC_Get_Time>
		if (time.year == 0)
 8000bf2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d110      	bne.n	8000c1c <Start_task+0x5c>
		{
			send_uart(msg_time_error);
 8000bfa:	4b90      	ldr	r3, [pc, #576]	; (8000e3c <Start_task+0x27c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fd38 	bl	8000674 <send_uart>
			send_uart(msg_menu);
 8000c04:	4b8e      	ldr	r3, [pc, #568]	; (8000e40 <Start_task+0x280>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fd33 	bl	8000674 <send_uart>
			curr_state = sMenu ;
 8000c0e:	4b8d      	ldr	r3, [pc, #564]	; (8000e44 <Start_task+0x284>)
 8000c10:	2206      	movs	r2, #6
 8000c12:	701a      	strb	r2, [r3, #0]
			checkYear = 0 ;
 8000c14:	4b8c      	ldr	r3, [pc, #560]	; (8000e48 <Start_task+0x288>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
			continue ;
 8000c1a:	e1ce      	b.n	8000fba <Start_task+0x3fa>
		}
		send_uart(msg_start);
 8000c1c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000c1e:	f7ff fd29 	bl	8000674 <send_uart>

		while(curr_state != sNone && curr_state != sRunAndSave && curr_state != sRunOnly )
 8000c22:	e041      	b.n	8000ca8 <Start_task+0xe8>
		{
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8000c24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	9200      	str	r2, [sp, #0]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2000      	movs	r0, #0
 8000c34:	f00b f9c4 	bl	800bfc0 <xTaskGenericNotifyWait>
			cmd = (command_t *)cmd_addr ;
 8000c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c3a:	663b      	str	r3, [r7, #96]	; 0x60
			if (cmd->len == 1)
 8000c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d129      	bne.n	8000c98 <Start_task+0xd8>
			{
				uint8_t menu_code = cmd->payload[0]-48 ;
 8000c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	3b30      	subs	r3, #48	; 0x30
 8000c4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				switch(menu_code)
 8000c4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d00e      	beq.n	8000c74 <Start_task+0xb4>
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	dc15      	bgt.n	8000c86 <Start_task+0xc6>
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <Start_task+0xa4>
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d004      	beq.n	8000c6c <Start_task+0xac>
 8000c62:	e010      	b.n	8000c86 <Start_task+0xc6>
				{
				case 0:
					curr_state = sRunOnly ;
 8000c64:	4b77      	ldr	r3, [pc, #476]	; (8000e44 <Start_task+0x284>)
 8000c66:	2204      	movs	r2, #4
 8000c68:	701a      	strb	r2, [r3, #0]
					break ;
 8000c6a:	e01d      	b.n	8000ca8 <Start_task+0xe8>
				case 1:
					curr_state = sRunAndSave ;
 8000c6c:	4b75      	ldr	r3, [pc, #468]	; (8000e44 <Start_task+0x284>)
 8000c6e:	2205      	movs	r2, #5
 8000c70:	701a      	strb	r2, [r3, #0]
					break ;
 8000c72:	e019      	b.n	8000ca8 <Start_task+0xe8>
				case 2:
					curr_state = sNone;
 8000c74:	4b73      	ldr	r3, [pc, #460]	; (8000e44 <Start_task+0x284>)
 8000c76:	2207      	movs	r2, #7
 8000c78:	701a      	strb	r2, [r3, #0]
					send_uart(msg_menu);
 8000c7a:	4b71      	ldr	r3, [pc, #452]	; (8000e40 <Start_task+0x280>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fcf8 	bl	8000674 <send_uart>
					break ;
 8000c84:	e010      	b.n	8000ca8 <Start_task+0xe8>
				default:
					send_uart(msg_inv);
 8000c86:	4b71      	ldr	r3, [pc, #452]	; (8000e4c <Start_task+0x28c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fcf2 	bl	8000674 <send_uart>
					send_uart(msg_start);
 8000c90:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000c92:	f7ff fcef 	bl	8000674 <send_uart>
 8000c96:	e007      	b.n	8000ca8 <Start_task+0xe8>
				}
			}
			else
			{
				send_uart(msg_inv);
 8000c98:	4b6c      	ldr	r3, [pc, #432]	; (8000e4c <Start_task+0x28c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fce9 	bl	8000674 <send_uart>
				send_uart(msg_start);
 8000ca2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000ca4:	f7ff fce6 	bl	8000674 <send_uart>
		while(curr_state != sNone && curr_state != sRunAndSave && curr_state != sRunOnly )
 8000ca8:	4b66      	ldr	r3, [pc, #408]	; (8000e44 <Start_task+0x284>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b07      	cmp	r3, #7
 8000cae:	d007      	beq.n	8000cc0 <Start_task+0x100>
 8000cb0:	4b64      	ldr	r3, [pc, #400]	; (8000e44 <Start_task+0x284>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b05      	cmp	r3, #5
 8000cb6:	d003      	beq.n	8000cc0 <Start_task+0x100>
 8000cb8:	4b62      	ldr	r3, [pc, #392]	; (8000e44 <Start_task+0x284>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d1b1      	bne.n	8000c24 <Start_task+0x64>
			}
		} // while curr_state
		if (curr_state == sNone)
 8000cc0:	4b60      	ldr	r3, [pc, #384]	; (8000e44 <Start_task+0x284>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	f000 8177 	beq.w	8000fb8 <Start_task+0x3f8>
		{
			continue ;
		}
		checkDay = time.dayofmonth ;
 8000cca:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000cce:	4b60      	ldr	r3, [pc, #384]	; (8000e50 <Start_task+0x290>)
 8000cd0:	701a      	strb	r2, [r3, #0]
		clear_buffer(timeBuffer, 20);
 8000cd2:	2114      	movs	r1, #20
 8000cd4:	485f      	ldr	r0, [pc, #380]	; (8000e54 <Start_task+0x294>)
 8000cd6:	f7ff fcb1 	bl	800063c <clear_buffer>
		sprintf(timeBuffer,"%02d_%02d_%02ddata.txt",checkDay,time.month,time.year);
 8000cda:	4b5d      	ldr	r3, [pc, #372]	; (8000e50 <Start_task+0x290>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	460b      	mov	r3, r1
 8000cee:	495a      	ldr	r1, [pc, #360]	; (8000e58 <Start_task+0x298>)
 8000cf0:	4858      	ldr	r0, [pc, #352]	; (8000e54 <Start_task+0x294>)
 8000cf2:	f00d f9dd 	bl	800e0b0 <siprintf>

		//------------------ KIEM TRA HOAT DONG -----------------//
				fresult = f_mount(&fs, "/", 1);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4958      	ldr	r1, [pc, #352]	; (8000e5c <Start_task+0x29c>)
 8000cfa:	4859      	ldr	r0, [pc, #356]	; (8000e60 <Start_task+0x2a0>)
 8000cfc:	f008 fbac 	bl	8009458 <f_mount>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b57      	ldr	r3, [pc, #348]	; (8000e64 <Start_task+0x2a4>)
 8000d06:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 8000d08:	4b56      	ldr	r3, [pc, #344]	; (8000e64 <Start_task+0x2a4>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00b      	beq.n	8000d28 <Start_task+0x168>
				{
					send_uart ("LOI !!! KIEM TRA LAI SD CARD...\n\n");
 8000d10:	4855      	ldr	r0, [pc, #340]	; (8000e68 <Start_task+0x2a8>)
 8000d12:	f7ff fcaf 	bl	8000674 <send_uart>
					send_uart(msg_menu);
 8000d16:	4b4a      	ldr	r3, [pc, #296]	; (8000e40 <Start_task+0x280>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fcaa 	bl	8000674 <send_uart>
					curr_state = sMenu ;
 8000d20:	4b48      	ldr	r3, [pc, #288]	; (8000e44 <Start_task+0x284>)
 8000d22:	2206      	movs	r2, #6
 8000d24:	701a      	strb	r2, [r3, #0]
					continue ;
 8000d26:	e148      	b.n	8000fba <Start_task+0x3fa>
				}
				else send_uart("KET NOI THANH CONG\n\n");
 8000d28:	4850      	ldr	r0, [pc, #320]	; (8000e6c <Start_task+0x2ac>)
 8000d2a:	f7ff fca3 	bl	8000674 <send_uart>
		if (curr_state == sRunAndSave)
 8000d2e:	4b45      	ldr	r3, [pc, #276]	; (8000e44 <Start_task+0x284>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b05      	cmp	r3, #5
 8000d34:	f040 80c4 	bne.w	8000ec0 <Start_task+0x300>
		{
			int tempCheckDay = checkDay-1;
 8000d38:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <Start_task+0x290>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
			char tempTimeBuffer[20];
			if (checkDay ==1 && time.month ==1 )
 8000d40:	4b43      	ldr	r3, [pc, #268]	; (8000e50 <Start_task+0x290>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d129      	bne.n	8000d9c <Start_task+0x1dc>
 8000d48:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d125      	bne.n	8000d9c <Start_task+0x1dc>
			{
					tempCheckDay = 31 ;
 8000d50:	231f      	movs	r3, #31
 8000d52:	66fb      	str	r3, [r7, #108]	; 0x6c
						while(tempCheckDay)
 8000d54:	e01c      	b.n	8000d90 <Start_task+0x1d0>
						{
							sprintf(tempTimeBuffer,"%02d_%02d_%02ddata.txt",tempCheckDay,12,time.year-1);
 8000d56:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	230c      	movs	r3, #12
 8000d64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000d66:	493c      	ldr	r1, [pc, #240]	; (8000e58 <Start_task+0x298>)
 8000d68:	f00d f9a2 	bl	800e0b0 <siprintf>
							fresult = f_open(&fil,tempTimeBuffer, FA_READ);
 8000d6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d70:	2201      	movs	r2, #1
 8000d72:	4619      	mov	r1, r3
 8000d74:	483e      	ldr	r0, [pc, #248]	; (8000e70 <Start_task+0x2b0>)
 8000d76:	f008 fbb5 	bl	80094e4 <f_open>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <Start_task+0x2a4>)
 8000d80:	701a      	strb	r2, [r3, #0]
							if (fresult == FR_OK)
 8000d82:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <Start_task+0x2a4>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d006      	beq.n	8000d98 <Start_task+0x1d8>
								break ;
							tempCheckDay -- ;
 8000d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
						while(tempCheckDay)
 8000d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1df      	bne.n	8000d56 <Start_task+0x196>
			if (checkDay ==1 && time.month ==1 )
 8000d96:	e093      	b.n	8000ec0 <Start_task+0x300>
								break ;
 8000d98:	bf00      	nop
			if (checkDay ==1 && time.month ==1 )
 8000d9a:	e091      	b.n	8000ec0 <Start_task+0x300>
						}


			}
			else if ( checkDay ==1 )
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <Start_task+0x290>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	f040 8086 	bne.w	8000eb2 <Start_task+0x2f2>
			{
				if (time.month ==3 )
 8000da6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d10b      	bne.n	8000dc6 <Start_task+0x206>
				{
					if (! (time.year % 4))
 8000dae:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <Start_task+0x202>
					{
						tempCheckDay = 29 ;
 8000dbc:	231d      	movs	r3, #29
 8000dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000dc0:	e001      	b.n	8000dc6 <Start_task+0x206>
					}
					else
					{
						tempCheckDay = 28 ;
 8000dc2:	231c      	movs	r3, #28
 8000dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
					}

				}
				if (time.month == 4 || time.month == 6 || time.month == 9 || time.month == 11)
 8000dc6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	d00b      	beq.n	8000de6 <Start_task+0x226>
 8000dce:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d007      	beq.n	8000de6 <Start_task+0x226>
 8000dd6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000dda:	2b09      	cmp	r3, #9
 8000ddc:	d003      	beq.n	8000de6 <Start_task+0x226>
 8000dde:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000de2:	2b0b      	cmp	r3, #11
 8000de4:	d102      	bne.n	8000dec <Start_task+0x22c>
				{
					tempCheckDay = 30 ;
 8000de6:	231e      	movs	r3, #30
 8000de8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000dea:	e001      	b.n	8000df0 <Start_task+0x230>
				}
				else
				{
					tempCheckDay = 31 ;
 8000dec:	231f      	movs	r3, #31
 8000dee:	66fb      	str	r3, [r7, #108]	; 0x6c
				}
				while(tempCheckDay)
 8000df0:	e01d      	b.n	8000e2e <Start_task+0x26e>
				{
					sprintf(tempTimeBuffer,"%02d_%02d_%02ddata.txt",tempCheckDay,time.month-1,time.year);
 8000df2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000dfc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000e00:	9200      	str	r2, [sp, #0]
 8000e02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e04:	4914      	ldr	r1, [pc, #80]	; (8000e58 <Start_task+0x298>)
 8000e06:	f00d f953 	bl	800e0b0 <siprintf>
					fresult = f_open(&fil,tempTimeBuffer, FA_READ);
 8000e0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4619      	mov	r1, r3
 8000e12:	4817      	ldr	r0, [pc, #92]	; (8000e70 <Start_task+0x2b0>)
 8000e14:	f008 fb66 	bl	80094e4 <f_open>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <Start_task+0x2a4>)
 8000e1e:	701a      	strb	r2, [r3, #0]
					if (fresult == FR_OK)
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <Start_task+0x2a4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d048      	beq.n	8000eba <Start_task+0x2fa>
						break ;
					tempCheckDay -- ;
 8000e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(tempCheckDay)
 8000e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1de      	bne.n	8000df2 <Start_task+0x232>
 8000e34:	e044      	b.n	8000ec0 <Start_task+0x300>
 8000e36:	bf00      	nop
 8000e38:	0800ea40 	.word	0x0800ea40
 8000e3c:	2000000c 	.word	0x2000000c
 8000e40:	20000004 	.word	0x20000004
 8000e44:	2000001f 	.word	0x2000001f
 8000e48:	20002188 	.word	0x20002188
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000001 	.word	0x20000001
 8000e54:	2000218c 	.word	0x2000218c
 8000e58:	0800eadc 	.word	0x0800eadc
 8000e5c:	0800eaf4 	.word	0x0800eaf4
 8000e60:	20000120 	.word	0x20000120
 8000e64:	20000000 	.word	0x20000000
 8000e68:	0800eaf8 	.word	0x0800eaf8
 8000e6c:	0800eb1c 	.word	0x0800eb1c
 8000e70:	20001158 	.word	0x20001158
			}
			else
			{
				while(tempCheckDay)
				{
					sprintf(tempTimeBuffer,"%02d_%02d_%02ddata.txt",tempCheckDay,time.month,time.year);
 8000e74:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000e78:	461a      	mov	r2, r3
 8000e7a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000e7e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	4613      	mov	r3, r2
 8000e86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e88:	494c      	ldr	r1, [pc, #304]	; (8000fbc <Start_task+0x3fc>)
 8000e8a:	f00d f911 	bl	800e0b0 <siprintf>
					fresult = f_open(&fil,tempTimeBuffer, FA_READ);
 8000e8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e92:	2201      	movs	r2, #1
 8000e94:	4619      	mov	r1, r3
 8000e96:	484a      	ldr	r0, [pc, #296]	; (8000fc0 <Start_task+0x400>)
 8000e98:	f008 fb24 	bl	80094e4 <f_open>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b48      	ldr	r3, [pc, #288]	; (8000fc4 <Start_task+0x404>)
 8000ea2:	701a      	strb	r2, [r3, #0]
					if (fresult == FR_OK)
 8000ea4:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <Start_task+0x404>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d008      	beq.n	8000ebe <Start_task+0x2fe>
						break ;
					tempCheckDay -- ;
 8000eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(tempCheckDay)
 8000eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1dd      	bne.n	8000e74 <Start_task+0x2b4>
 8000eb8:	e002      	b.n	8000ec0 <Start_task+0x300>
						break ;
 8000eba:	bf00      	nop
 8000ebc:	e000      	b.n	8000ec0 <Start_task+0x300>
						break ;
 8000ebe:	bf00      	nop
				}
			}

		}// if  (curr_state == sRunAndSave)
		char buffer[50]={};
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	222e      	movs	r2, #46	; 0x2e
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f00d f8e7 	bl	800e0a0 <memset>
		if (fresult == FR_OK)
 8000ed2:	4b3c      	ldr	r3, [pc, #240]	; (8000fc4 <Start_task+0x404>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d118      	bne.n	8000f0c <Start_task+0x34c>
		{
			while (f_gets(buffer, 50, &fil))
 8000eda:	e00a      	b.n	8000ef2 <Start_task+0x332>
				{
					send_uart(buffer);
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fbc7 	bl	8000674 <send_uart>
					clear_buffer(buffer,50);
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	2132      	movs	r1, #50	; 0x32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fba5 	bl	800063c <clear_buffer>
			while (f_gets(buffer, 50, &fil))
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <Start_task+0x400>)
 8000ef8:	2132      	movs	r1, #50	; 0x32
 8000efa:	4618      	mov	r0, r3
 8000efc:	f009 fa7d 	bl	800a3fa <f_gets>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1ea      	bne.n	8000edc <Start_task+0x31c>
				}
			f_close(&fil);
 8000f06:	482e      	ldr	r0, [pc, #184]	; (8000fc0 <Start_task+0x400>)
 8000f08:	f009 f829 	bl	8009f5e <f_close>
		}
	// ------------------------ TAO FILE MOI -----------------------//
		fresult = f_open(&fil,timeBuffer, FA_WRITE); // Nếu đã tạo thì không tạo nữa
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	492e      	ldr	r1, [pc, #184]	; (8000fc8 <Start_task+0x408>)
 8000f10:	482b      	ldr	r0, [pc, #172]	; (8000fc0 <Start_task+0x400>)
 8000f12:	f008 fae7 	bl	80094e4 <f_open>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <Start_task+0x404>)
 8000f1c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000f1e:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <Start_task+0x404>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d02e      	beq.n	8000f84 <Start_task+0x3c4>
		{
			fresult = f_open(&fil,timeBuffer, FA_CREATE_ALWAYS | FA_WRITE);
 8000f26:	220a      	movs	r2, #10
 8000f28:	4927      	ldr	r1, [pc, #156]	; (8000fc8 <Start_task+0x408>)
 8000f2a:	4825      	ldr	r0, [pc, #148]	; (8000fc0 <Start_task+0x400>)
 8000f2c:	f008 fada 	bl	80094e4 <f_open>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <Start_task+0x404>)
 8000f36:	701a      	strb	r2, [r3, #0]
					if (fresult != FR_OK)
 8000f38:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <Start_task+0x404>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d009      	beq.n	8000f54 <Start_task+0x394>
					{
						send_uart("Khong Tao duoc file\n");
 8000f40:	4822      	ldr	r0, [pc, #136]	; (8000fcc <Start_task+0x40c>)
 8000f42:	f7ff fb97 	bl	8000674 <send_uart>
						curr_state =sRun ;
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <Start_task+0x410>)
 8000f48:	2203      	movs	r2, #3
 8000f4a:	701a      	strb	r2, [r3, #0]
						send_uart(msg_start);
 8000f4c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000f4e:	f7ff fb91 	bl	8000674 <send_uart>
 8000f52:	e63b      	b.n	8000bcc <Start_task+0xc>
					}
					else
					{
						send_uart("Tao file thanh cong\n");
 8000f54:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <Start_task+0x414>)
 8000f56:	f7ff fb8d 	bl	8000674 <send_uart>
						curr_state = sNone ;
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <Start_task+0x410>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	701a      	strb	r2, [r3, #0]
						send_uart(msg_menu);
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <Start_task+0x418>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fb85 	bl	8000674 <send_uart>
						f_close(&fil);
 8000f6a:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <Start_task+0x400>)
 8000f6c:	f008 fff7 	bl	8009f5e <f_close>
						xTaskNotify(handle_send_task,0,eNoAction);
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <Start_task+0x41c>)
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	2300      	movs	r3, #0
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	f00b f89b 	bl	800c0b8 <xTaskGenericNotify>
 8000f82:	e623      	b.n	8000bcc <Start_task+0xc>
					}
		}
		else
		{
				send_uart("File da duoc tao\n");
 8000f84:	4816      	ldr	r0, [pc, #88]	; (8000fe0 <Start_task+0x420>)
 8000f86:	f7ff fb75 	bl	8000674 <send_uart>
				curr_state = sNone ;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <Start_task+0x410>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	701a      	strb	r2, [r3, #0]
				send_uart(msg_menu);
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <Start_task+0x418>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fb6d 	bl	8000674 <send_uart>
				f_close(&fil);
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <Start_task+0x400>)
 8000f9c:	f008 ffdf 	bl	8009f5e <f_close>
				xTaskNotify(handle_send_task,0,eNoAction);
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <Start_task+0x41c>)
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	f00b f883 	bl	800c0b8 <xTaskGenericNotify>
 8000fb2:	e60b      	b.n	8000bcc <Start_task+0xc>
		if (status != pdTRUE) continue ;
 8000fb4:	bf00      	nop
 8000fb6:	e609      	b.n	8000bcc <Start_task+0xc>
			continue ;
 8000fb8:	bf00      	nop
	{
 8000fba:	e607      	b.n	8000bcc <Start_task+0xc>
 8000fbc:	0800eadc 	.word	0x0800eadc
 8000fc0:	20001158 	.word	0x20001158
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	2000218c 	.word	0x2000218c
 8000fcc:	0800eb34 	.word	0x0800eb34
 8000fd0:	2000001f 	.word	0x2000001f
 8000fd4:	0800eb4c 	.word	0x0800eb4c
 8000fd8:	20000004 	.word	0x20000004
 8000fdc:	20002324 	.word	0x20002324
 8000fe0:	0800eb64 	.word	0x0800eb64

08000fe4 <Send_task>:


	}// big while
}
void Send_task ( void *param)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
	static uint8_t checkQ0_0 = 1;
	static uint8_t checkQ0_1 = 1;
	static uint8_t checkQ0_2 = 1;
	static char Buffer[50] ;
	clear_buffer(Buffer, 50) ;
 8000fec:	2132      	movs	r1, #50	; 0x32
 8000fee:	4859      	ldr	r0, [pc, #356]	; (8001154 <Send_task+0x170>)
 8000ff0:	f7ff fb24 	bl	800063c <clear_buffer>
	RTC_TIME time ;
	while(1)
	{
		if (curr_state == sRunAndSave || curr_state == sRtcDateConfig || curr_state == sRtcTimeConfig )
 8000ff4:	4b58      	ldr	r3, [pc, #352]	; (8001158 <Send_task+0x174>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	d007      	beq.n	800100c <Send_task+0x28>
 8000ffc:	4b56      	ldr	r3, [pc, #344]	; (8001158 <Send_task+0x174>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d003      	beq.n	800100c <Send_task+0x28>
 8001004:	4b54      	ldr	r3, [pc, #336]	; (8001158 <Send_task+0x174>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d109      	bne.n	8001020 <Send_task+0x3c>
		{
			 xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2300      	movs	r3, #0
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	2000      	movs	r0, #0
 800101a:	f00a ffd1 	bl	800bfc0 <xTaskGenericNotifyWait>
			continue ;
 800101e:	e097      	b.n	8001150 <Send_task+0x16c>
		}
		fresult = f_open(&fil,timeBuffer, FA_WRITE);
 8001020:	2202      	movs	r2, #2
 8001022:	494e      	ldr	r1, [pc, #312]	; (800115c <Send_task+0x178>)
 8001024:	484e      	ldr	r0, [pc, #312]	; (8001160 <Send_task+0x17c>)
 8001026:	f008 fa5d 	bl	80094e4 <f_open>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <Send_task+0x180>)
 8001030:	701a      	strb	r2, [r3, #0]
		fresult = f_lseek(&fil, f_size(&fil));
 8001032:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <Send_task+0x17c>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	4619      	mov	r1, r3
 8001038:	4849      	ldr	r0, [pc, #292]	; (8001160 <Send_task+0x17c>)
 800103a:	f008 ffba 	bl	8009fb2 <f_lseek>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b48      	ldr	r3, [pc, #288]	; (8001164 <Send_task+0x180>)
 8001044:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK)
 8001046:	4b47      	ldr	r3, [pc, #284]	; (8001164 <Send_task+0x180>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d17d      	bne.n	800114a <Send_task+0x166>
		{
			if (Q0_0 ==1 && checkQ0_0 ==1)
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <Send_task+0x184>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d11b      	bne.n	8001090 <Send_task+0xac>
 8001058:	4b44      	ldr	r3, [pc, #272]	; (800116c <Send_task+0x188>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d117      	bne.n	8001090 <Send_task+0xac>
			{
				checkQ0_0 = 0 ;
 8001060:	4b42      	ldr	r3, [pc, #264]	; (800116c <Send_task+0x188>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
				RTC_Get_Time(&time);
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	4618      	mov	r0, r3
 800106c:	f00c fa4e 	bl	800d50c <RTC_Get_Time>
				sprintf(Buffer,"%02d-%02d-%02d :Xanh\n",time.hour,time.minutes,time.seconds);
 8001070:	7abb      	ldrb	r3, [r7, #10]
 8001072:	461a      	mov	r2, r3
 8001074:	7a7b      	ldrb	r3, [r7, #9]
 8001076:	4619      	mov	r1, r3
 8001078:	7a3b      	ldrb	r3, [r7, #8]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	460b      	mov	r3, r1
 800107e:	493c      	ldr	r1, [pc, #240]	; (8001170 <Send_task+0x18c>)
 8001080:	4834      	ldr	r0, [pc, #208]	; (8001154 <Send_task+0x170>)
 8001082:	f00d f815 	bl	800e0b0 <siprintf>
				 f_puts(Buffer, &fil);
 8001086:	4936      	ldr	r1, [pc, #216]	; (8001160 <Send_task+0x17c>)
 8001088:	4832      	ldr	r0, [pc, #200]	; (8001154 <Send_task+0x170>)
 800108a:	f009 fa6a 	bl	800a562 <f_puts>
 800108e:	e007      	b.n	80010a0 <Send_task+0xbc>

			}
			else if (Q0_0 == 0)
 8001090:	4b35      	ldr	r3, [pc, #212]	; (8001168 <Send_task+0x184>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <Send_task+0xbc>
			{
				checkQ0_0 = 1 ;
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <Send_task+0x188>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
			}

			if (Q0_1 ==1 && checkQ0_1 ==1)
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <Send_task+0x184>)
 80010a2:	785b      	ldrb	r3, [r3, #1]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d11b      	bne.n	80010e2 <Send_task+0xfe>
 80010aa:	4b32      	ldr	r3, [pc, #200]	; (8001174 <Send_task+0x190>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d117      	bne.n	80010e2 <Send_task+0xfe>
			{
					checkQ0_1 = 0 ;
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <Send_task+0x190>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
					RTC_Get_Time(&time);
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	4618      	mov	r0, r3
 80010be:	f00c fa25 	bl	800d50c <RTC_Get_Time>
					sprintf(Buffer,"%02d-%02d-%02d :Do\n",time.hour,time.minutes,time.seconds);
 80010c2:	7abb      	ldrb	r3, [r7, #10]
 80010c4:	461a      	mov	r2, r3
 80010c6:	7a7b      	ldrb	r3, [r7, #9]
 80010c8:	4619      	mov	r1, r3
 80010ca:	7a3b      	ldrb	r3, [r7, #8]
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	460b      	mov	r3, r1
 80010d0:	4929      	ldr	r1, [pc, #164]	; (8001178 <Send_task+0x194>)
 80010d2:	4820      	ldr	r0, [pc, #128]	; (8001154 <Send_task+0x170>)
 80010d4:	f00c ffec 	bl	800e0b0 <siprintf>
					f_puts(Buffer, &fil);
 80010d8:	4921      	ldr	r1, [pc, #132]	; (8001160 <Send_task+0x17c>)
 80010da:	481e      	ldr	r0, [pc, #120]	; (8001154 <Send_task+0x170>)
 80010dc:	f009 fa41 	bl	800a562 <f_puts>
 80010e0:	e007      	b.n	80010f2 <Send_task+0x10e>
			}
			else if ( Q0_1 == 0 )
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <Send_task+0x184>)
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <Send_task+0x10e>
			{
				checkQ0_1 = 1 ;
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <Send_task+0x190>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
			}

			if (Q0_2 ==1 && checkQ0_2 ==1)
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <Send_task+0x184>)
 80010f4:	789b      	ldrb	r3, [r3, #2]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d11b      	bne.n	8001134 <Send_task+0x150>
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <Send_task+0x198>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d117      	bne.n	8001134 <Send_task+0x150>
			{
					checkQ0_2 = 0 ;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <Send_task+0x198>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
					RTC_Get_Time(&time);
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4618      	mov	r0, r3
 8001110:	f00c f9fc 	bl	800d50c <RTC_Get_Time>
					sprintf(Buffer,"%02d-%02d-%02d :Vang\n",time.hour,time.minutes,time.seconds);
 8001114:	7abb      	ldrb	r3, [r7, #10]
 8001116:	461a      	mov	r2, r3
 8001118:	7a7b      	ldrb	r3, [r7, #9]
 800111a:	4619      	mov	r1, r3
 800111c:	7a3b      	ldrb	r3, [r7, #8]
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	460b      	mov	r3, r1
 8001122:	4917      	ldr	r1, [pc, #92]	; (8001180 <Send_task+0x19c>)
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <Send_task+0x170>)
 8001126:	f00c ffc3 	bl	800e0b0 <siprintf>
					f_puts(Buffer, &fil);
 800112a:	490d      	ldr	r1, [pc, #52]	; (8001160 <Send_task+0x17c>)
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <Send_task+0x170>)
 800112e:	f009 fa18 	bl	800a562 <f_puts>
 8001132:	e007      	b.n	8001144 <Send_task+0x160>
			}
			else if (Q0_2 == 0)
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <Send_task+0x184>)
 8001136:	789b      	ldrb	r3, [r3, #2]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <Send_task+0x160>
			{
					checkQ0_2 = 1 ;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <Send_task+0x198>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
			}
			f_close(&fil);
 8001144:	4806      	ldr	r0, [pc, #24]	; (8001160 <Send_task+0x17c>)
 8001146:	f008 ff0a 	bl	8009f5e <f_close>
		}
		vTaskDelay(pdMS_TO_TICKS(1000));
 800114a:	480e      	ldr	r0, [pc, #56]	; (8001184 <Send_task+0x1a0>)
 800114c:	f00a fa94 	bl	800b678 <vTaskDelay>
		if (curr_state == sRunAndSave || curr_state == sRtcDateConfig || curr_state == sRtcTimeConfig )
 8001150:	e750      	b.n	8000ff4 <Send_task+0x10>
 8001152:	bf00      	nop
 8001154:	200021ac 	.word	0x200021ac
 8001158:	2000001f 	.word	0x2000001f
 800115c:	2000218c 	.word	0x2000218c
 8001160:	20001158 	.word	0x20001158
 8001164:	20000000 	.word	0x20000000
 8001168:	200000e0 	.word	0x200000e0
 800116c:	2000001c 	.word	0x2000001c
 8001170:	0800eb78 	.word	0x0800eb78
 8001174:	2000001d 	.word	0x2000001d
 8001178:	0800eb90 	.word	0x0800eb90
 800117c:	2000001e 	.word	0x2000001e
 8001180:	0800eba4 	.word	0x0800eba4
 8001184:	000186a0 	.word	0x000186a0

08001188 <Setting_task>:
	}
}
void Setting_task( void *param)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b096      	sub	sp, #88	; 0x58
 800118c:	af02      	add	r7, sp, #8
 800118e:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001190:	4bae      	ldr	r3, [pc, #696]	; (800144c <Setting_task+0x2c4>)
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         Setting     |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8001194:	4bae      	ldr	r3, [pc, #696]	; (8001450 <Setting_task+0x2c8>)
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
							"Configure Date            ----> 1\n"
							"Exit                      ----> 2\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-24):";
 8001198:	4bae      	ldr	r3, [pc, #696]	; (8001454 <Setting_task+0x2cc>)
 800119a:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 800119c:	4bae      	ldr	r3, [pc, #696]	; (8001458 <Setting_task+0x2d0>)
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 80011a0:	4bae      	ldr	r3, [pc, #696]	; (800145c <Setting_task+0x2d4>)
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 80011a4:	4bae      	ldr	r3, [pc, #696]	; (8001460 <Setting_task+0x2d8>)
 80011a6:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 80011a8:	4bae      	ldr	r3, [pc, #696]	; (8001464 <Setting_task+0x2dc>)
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 80011ac:	4bae      	ldr	r3, [pc, #696]	; (8001468 <Setting_task+0x2e0>)
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 80011b0:	4bae      	ldr	r3, [pc, #696]	; (800146c <Setting_task+0x2e4>)
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 80011b4:	4bae      	ldr	r3, [pc, #696]	; (8001470 <Setting_task+0x2e8>)
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
#define DAY_CONFIG		2
#define YEAR_CONFIG		3
BaseType_t status ;
	while(1)
	{
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f00a fefb 	bl	800bfc0 <xTaskGenericNotifyWait>
 80011ca:	6278      	str	r0, [r7, #36]	; 0x24
			if (status != pdTRUE) continue ;
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	f040 816e 	bne.w	80014b0 <Setting_task+0x328>
			//HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc1, strlen(msg_rtc1), HAL_MAX_DELAY);
			send_uart(msg_rtc1);
 80011d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80011d6:	f7ff fa4d 	bl	8000674 <send_uart>
			show_time_date(&time);
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f00c f9e4 	bl	800d5ac <show_time_date>
			//HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc2, strlen(msg_rtc2), HAL_MAX_DELAY);
			send_uart(msg_rtc2);
 80011e4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80011e6:	f7ff fa45 	bl	8000674 <send_uart>

		while(curr_state != sMenu )
 80011ea:	e15b      	b.n	80014a4 <Setting_task+0x31c>
		{

			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	9200      	str	r2, [sp, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2000      	movs	r0, #0
 80011fc:	f00a fee0 	bl	800bfc0 <xTaskGenericNotifyWait>
			cmd = (command_t *)cmd_addr ;
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	623b      	str	r3, [r7, #32]
			switch(curr_state)
 8001204:	4b9b      	ldr	r3, [pc, #620]	; (8001474 <Setting_task+0x2ec>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b02      	cmp	r3, #2
 800120a:	f000 80af 	beq.w	800136c <Setting_task+0x1e4>
 800120e:	2b02      	cmp	r3, #2
 8001210:	f300 8148 	bgt.w	80014a4 <Setting_task+0x31c>
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <Setting_task+0x96>
 8001218:	2b01      	cmp	r3, #1
 800121a:	d03e      	beq.n	800129a <Setting_task+0x112>
 800121c:	e142      	b.n	80014a4 <Setting_task+0x31c>
			{
				case sSetting:
					{
						/*process RTC menu commands */
						if (cmd->len == 1)
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d130      	bne.n	8001288 <Setting_task+0x100>
						{
							menu_code = cmd->payload[0]-48 ;
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3b30      	subs	r3, #48	; 0x30
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d017      	beq.n	8001264 <Setting_task+0xdc>
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b02      	cmp	r3, #2
 8001238:	dc1d      	bgt.n	8001276 <Setting_task+0xee>
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <Setting_task+0xc0>
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d007      	beq.n	8001256 <Setting_task+0xce>
 8001246:	e016      	b.n	8001276 <Setting_task+0xee>
							switch(menu_code)
							{
							case 0:
								curr_state = sRtcTimeConfig ;
 8001248:	4b8a      	ldr	r3, [pc, #552]	; (8001474 <Setting_task+0x2ec>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
								//xQueueSend(q_printf,&msg_rtc_hh,portMAX_DELAY) ;
								//HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_hh, strlen(msg_rtc_hh), HAL_MAX_DELAY);
								send_uart(msg_rtc_hh);
 800124e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001250:	f7ff fa10 	bl	8000674 <send_uart>
								break ;
 8001254:	e020      	b.n	8001298 <Setting_task+0x110>
							case 1:
								curr_state = sRtcDateConfig ;
 8001256:	4b87      	ldr	r3, [pc, #540]	; (8001474 <Setting_task+0x2ec>)
 8001258:	2202      	movs	r2, #2
 800125a:	701a      	strb	r2, [r3, #0]
								//HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_dd, strlen(msg_rtc_dd), HAL_MAX_DELAY);
								send_uart(msg_rtc_dd);
 800125c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800125e:	f7ff fa09 	bl	8000674 <send_uart>
								break ;
 8001262:	e019      	b.n	8001298 <Setting_task+0x110>
							case 2:
								curr_state = sMenu;
 8001264:	4b83      	ldr	r3, [pc, #524]	; (8001474 <Setting_task+0x2ec>)
 8001266:	2206      	movs	r2, #6
 8001268:	701a      	strb	r2, [r3, #0]
								send_uart(msg_menu);
 800126a:	4b83      	ldr	r3, [pc, #524]	; (8001478 <Setting_task+0x2f0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fa00 	bl	8000674 <send_uart>
								break ;
 8001274:	e010      	b.n	8001298 <Setting_task+0x110>
							default:
								send_uart(msg_inv);
 8001276:	4b81      	ldr	r3, [pc, #516]	; (800147c <Setting_task+0x2f4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f9fa 	bl	8000674 <send_uart>
								//HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc2, strlen(msg_rtc2), HAL_MAX_DELAY);
								send_uart(msg_rtc2);
 8001280:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001282:	f7ff f9f7 	bl	8000674 <send_uart>
 8001286:	e10d      	b.n	80014a4 <Setting_task+0x31c>
							}
						}
						else
						{
							send_uart(msg_inv);
 8001288:	4b7c      	ldr	r3, [pc, #496]	; (800147c <Setting_task+0x2f4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f9f1 	bl	8000674 <send_uart>
							//HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc2, strlen(msg_rtc2), HAL_MAX_DELAY);
							send_uart(msg_rtc2);
 8001292:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001294:	f7ff f9ee 	bl	8000674 <send_uart>
						}

						break;
 8001298:	e104      	b.n	80014a4 <Setting_task+0x31c>
					}

				case sRtcTimeConfig:
					{
					/* get hh, mm, ss infor and configure RTC */
						switch(rtc_state)
 800129a:	4b79      	ldr	r3, [pc, #484]	; (8001480 <Setting_task+0x2f8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d02b      	beq.n	80012fa <Setting_task+0x172>
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	f300 80fe 	bgt.w	80014a4 <Setting_task+0x31c>
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <Setting_task+0x12a>
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d012      	beq.n	80012d6 <Setting_task+0x14e>
 80012b0:	e0f8      	b.n	80014a4 <Setting_task+0x31c>
						{
						case HH_CONFIG:
							{
								uint8_t hour = get_number(cmd->payload, cmd->len) ;
 80012b2:	6a3a      	ldr	r2, [r7, #32]
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4610      	mov	r0, r2
 80012bc:	f7ff f99a 	bl	80005f4 <get_number>
 80012c0:	4603      	mov	r3, r0
 80012c2:	767b      	strb	r3, [r7, #25]
								time.hour = hour ;
 80012c4:	7e7b      	ldrb	r3, [r7, #25]
 80012c6:	72bb      	strb	r3, [r7, #10]
								rtc_state = MM_CONFIG ;
 80012c8:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <Setting_task+0x2f8>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
								//HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_mm, strlen(msg_rtc_mm), HAL_MAX_DELAY);
								send_uart(msg_rtc_mm);
 80012ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012d0:	f7ff f9d0 	bl	8000674 <send_uart>
								break;
 80012d4:	e049      	b.n	800136a <Setting_task+0x1e2>
							}
						case MM_CONFIG:
							{
								uint8_t min = get_number(cmd->payload, cmd->len) ;
 80012d6:	6a3a      	ldr	r2, [r7, #32]
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4619      	mov	r1, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	f7ff f988 	bl	80005f4 <get_number>
 80012e4:	4603      	mov	r3, r0
 80012e6:	76bb      	strb	r3, [r7, #26]
								time.minutes = min ;
 80012e8:	7ebb      	ldrb	r3, [r7, #26]
 80012ea:	727b      	strb	r3, [r7, #9]
								rtc_state = SS_CONFIG ;
 80012ec:	4b64      	ldr	r3, [pc, #400]	; (8001480 <Setting_task+0x2f8>)
 80012ee:	2202      	movs	r2, #2
 80012f0:	601a      	str	r2, [r3, #0]
								//HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_ss, strlen(msg_rtc_ss), HAL_MAX_DELAY);
								send_uart(msg_rtc_ss);
 80012f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012f4:	f7ff f9be 	bl	8000674 <send_uart>
								break;
 80012f8:	e037      	b.n	800136a <Setting_task+0x1e2>
							}

						case SS_CONFIG:
							{
								uint8_t sec = get_number(cmd->payload, cmd->len) ;
 80012fa:	6a3a      	ldr	r2, [r7, #32]
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4619      	mov	r1, r3
 8001302:	4610      	mov	r0, r2
 8001304:	f7ff f976 	bl	80005f4 <get_number>
 8001308:	4603      	mov	r3, r0
 800130a:	76fb      	strb	r3, [r7, #27]
								time.seconds = sec ;
 800130c:	7efb      	ldrb	r3, [r7, #27]
 800130e:	723b      	strb	r3, [r7, #8]
								if (!validate_rtc_information(&time))
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4618      	mov	r0, r3
 8001316:	f00c f987 	bl	800d628 <validate_rtc_information>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d115      	bne.n	800134c <Setting_task+0x1c4>
								{
									RTC_Set_Time(&time) ;
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	4618      	mov	r0, r3
 8001326:	f00c f8a7 	bl	800d478 <RTC_Set_Time>
									//HAL_UART_Transmit(&huart3,(uint8_t*)msg_conf, strlen(msg_conf), HAL_MAX_DELAY);
									send_uart(msg_conf);
 800132a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800132c:	f7ff f9a2 	bl	8000674 <send_uart>
									show_time_date(&time);
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4618      	mov	r0, r3
 8001336:	f00c f939 	bl	800d5ac <show_time_date>
									curr_state = sMenu ;
 800133a:	4b4e      	ldr	r3, [pc, #312]	; (8001474 <Setting_task+0x2ec>)
 800133c:	2206      	movs	r2, #6
 800133e:	701a      	strb	r2, [r3, #0]
									send_uart(msg_menu);
 8001340:	4b4d      	ldr	r3, [pc, #308]	; (8001478 <Setting_task+0x2f0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f995 	bl	8000674 <send_uart>
 800134a:	e00a      	b.n	8001362 <Setting_task+0x1da>
								}
								else
								{
									send_uart(msg_inv);
 800134c:	4b4b      	ldr	r3, [pc, #300]	; (800147c <Setting_task+0x2f4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f98f 	bl	8000674 <send_uart>
									curr_state = sSetting ;
 8001356:	4b47      	ldr	r3, [pc, #284]	; (8001474 <Setting_task+0x2ec>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
									//HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc2, strlen(msg_rtc2), HAL_MAX_DELAY);
									send_uart(msg_rtc2);
 800135c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800135e:	f7ff f989 	bl	8000674 <send_uart>
								}
								rtc_state = 0 ;
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <Setting_task+0x2f8>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
								break ;
 8001368:	bf00      	nop

							}
						} // switch(rtc_state)

					break;} // case sRtcTimeConfig:
 800136a:	e09b      	b.n	80014a4 <Setting_task+0x31c>

				case sRtcDateConfig:
						{

							/* get date, month, day , year info and configure RTC */
							switch(rtc_state)
 800136c:	4b44      	ldr	r3, [pc, #272]	; (8001480 <Setting_task+0x2f8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b03      	cmp	r3, #3
 8001372:	f200 8096 	bhi.w	80014a2 <Setting_task+0x31a>
 8001376:	a201      	add	r2, pc, #4	; (adr r2, 800137c <Setting_task+0x1f4>)
 8001378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137c:	0800138d 	.word	0x0800138d
 8001380:	080013b1 	.word	0x080013b1
 8001384:	080013d5 	.word	0x080013d5
 8001388:	080013f9 	.word	0x080013f9
								{
								case DATE_CONFIG:
									{
										uint8_t d = get_number(cmd->payload, cmd->len) ;
 800138c:	6a3a      	ldr	r2, [r7, #32]
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	f7ff f92d 	bl	80005f4 <get_number>
 800139a:	4603      	mov	r3, r0
 800139c:	773b      	strb	r3, [r7, #28]
										time.dayofmonth = d ;
 800139e:	7f3b      	ldrb	r3, [r7, #28]
 80013a0:	733b      	strb	r3, [r7, #12]
										rtc_state = MONTH_CONFIG ;
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <Setting_task+0x2f8>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
										//HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_mo, strlen(msg_rtc_mo), HAL_MAX_DELAY);
										send_uart(msg_rtc_mo);
 80013a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013aa:	f7ff f963 	bl	8000674 <send_uart>
										break;
 80013ae:	e078      	b.n	80014a2 <Setting_task+0x31a>
									}
								case MONTH_CONFIG:
									{
										uint8_t month = get_number(cmd->payload, cmd->len) ;
 80013b0:	6a3a      	ldr	r2, [r7, #32]
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4610      	mov	r0, r2
 80013ba:	f7ff f91b 	bl	80005f4 <get_number>
 80013be:	4603      	mov	r3, r0
 80013c0:	777b      	strb	r3, [r7, #29]
										time.month = month ;
 80013c2:	7f7b      	ldrb	r3, [r7, #29]
 80013c4:	737b      	strb	r3, [r7, #13]
										rtc_state = DAY_CONFIG ;
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <Setting_task+0x2f8>)
 80013c8:	2202      	movs	r2, #2
 80013ca:	601a      	str	r2, [r3, #0]
										//HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_dow, strlen(msg_rtc_dow), HAL_MAX_DELAY);
										send_uart(msg_rtc_dow);
 80013cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013ce:	f7ff f951 	bl	8000674 <send_uart>
										break;
 80013d2:	e066      	b.n	80014a2 <Setting_task+0x31a>
									}
								case DAY_CONFIG:
								{
									uint8_t day = get_number(cmd->payload, cmd->len) ;
 80013d4:	6a3a      	ldr	r2, [r7, #32]
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	4619      	mov	r1, r3
 80013dc:	4610      	mov	r0, r2
 80013de:	f7ff f909 	bl	80005f4 <get_number>
 80013e2:	4603      	mov	r3, r0
 80013e4:	77bb      	strb	r3, [r7, #30]
									time.dayofweek = day ;
 80013e6:	7fbb      	ldrb	r3, [r7, #30]
 80013e8:	72fb      	strb	r3, [r7, #11]
									rtc_state = YEAR_CONFIG ;
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <Setting_task+0x2f8>)
 80013ec:	2203      	movs	r2, #3
 80013ee:	601a      	str	r2, [r3, #0]
								//	HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc_yr, strlen(msg_rtc_yr), HAL_MAX_DELAY);
									send_uart(msg_rtc_yr);
 80013f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013f2:	f7ff f93f 	bl	8000674 <send_uart>
									break;
 80013f6:	e054      	b.n	80014a2 <Setting_task+0x31a>
								}

								case YEAR_CONFIG:
									{
										uint8_t year = get_number(cmd->payload, cmd->len) ;
 80013f8:	6a3a      	ldr	r2, [r7, #32]
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	4619      	mov	r1, r3
 8001400:	4610      	mov	r0, r2
 8001402:	f7ff f8f7 	bl	80005f4 <get_number>
 8001406:	4603      	mov	r3, r0
 8001408:	77fb      	strb	r3, [r7, #31]
										time.year = year ;
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	73bb      	strb	r3, [r7, #14]
										if (!validate_rtc_information(&time))
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	4618      	mov	r0, r3
 8001414:	f00c f908 	bl	800d628 <validate_rtc_information>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d132      	bne.n	8001484 <Setting_task+0x2fc>
										{
											RTC_Set_Time(&time) ;
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4618      	mov	r0, r3
 8001424:	f00c f828 	bl	800d478 <RTC_Set_Time>
										//	HAL_UART_Transmit(&huart3,(uint8_t*)msg_conf, strlen(msg_conf), HAL_MAX_DELAY);
											send_uart(msg_conf);
 8001428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800142a:	f7ff f923 	bl	8000674 <send_uart>
											show_time_date(&time);
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	4618      	mov	r0, r3
 8001434:	f00c f8ba 	bl	800d5ac <show_time_date>
											curr_state = sMenu ;
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <Setting_task+0x2ec>)
 800143a:	2206      	movs	r2, #6
 800143c:	701a      	strb	r2, [r3, #0]
											send_uart(msg_menu);
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <Setting_task+0x2f0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f916 	bl	8000674 <send_uart>
 8001448:	e027      	b.n	800149a <Setting_task+0x312>
 800144a:	bf00      	nop
 800144c:	0800ebbc 	.word	0x0800ebbc
 8001450:	0800ec08 	.word	0x0800ec08
 8001454:	0800ec88 	.word	0x0800ec88
 8001458:	0800ec9c 	.word	0x0800ec9c
 800145c:	0800ecb4 	.word	0x0800ecb4
 8001460:	0800eccc 	.word	0x0800eccc
 8001464:	0800ece0 	.word	0x0800ece0
 8001468:	0800ecf4 	.word	0x0800ecf4
 800146c:	0800ed0c 	.word	0x0800ed0c
 8001470:	0800ed20 	.word	0x0800ed20
 8001474:	2000001f 	.word	0x2000001f
 8001478:	20000004 	.word	0x20000004
 800147c:	20000008 	.word	0x20000008
 8001480:	200021e0 	.word	0x200021e0
										}
										else
										{
											 send_uart(msg_inv);
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <Setting_task+0x32c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f8f3 	bl	8000674 <send_uart>
											curr_state = sSetting ;
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <Setting_task+0x330>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
											//HAL_UART_Transmit(&huart3,(uint8_t*)msg_rtc2, strlen(msg_rtc2), HAL_MAX_DELAY);
											send_uart(msg_rtc2);
 8001494:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001496:	f7ff f8ed 	bl	8000674 <send_uart>
										}
										rtc_state = 0 ;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <Setting_task+0x334>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
										break ;
 80014a0:	bf00      	nop

									}
								}
							break;
 80014a2:	bf00      	nop
		while(curr_state != sMenu )
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <Setting_task+0x330>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b06      	cmp	r3, #6
 80014aa:	f47f ae9f 	bne.w	80011ec <Setting_task+0x64>
 80014ae:	e683      	b.n	80011b8 <Setting_task+0x30>
			if (status != pdTRUE) continue ;
 80014b0:	bf00      	nop
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80014b2:	e681      	b.n	80011b8 <Setting_task+0x30>
 80014b4:	20000008 	.word	0x20000008
 80014b8:	2000001f 	.word	0x2000001f
 80014bc:	200021e0 	.word	0x200021e0

080014c0 <Command_task>:
		} //while end

		}//while super loop end
}
void Command_task( void *param)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	6078      	str	r0, [r7, #4]

	BaseType_t status ;
	command_t cmd ;
	send_uart(msg_menu);
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <Command_task+0x48>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f8d1 	bl	8000674 <send_uart>
	while(1)
	{
			/* Implement notify wait */
		status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2300      	movs	r3, #0
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	2000      	movs	r0, #0
 80014e0:	f00a fd6e 	bl	800bfc0 <xTaskGenericNotifyWait>
 80014e4:	61f8      	str	r0, [r7, #28]

		if (status == pdTRUE)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d1f2      	bne.n	80014d2 <Command_task+0x12>
		{
			/* process the user data ( command) stored  in input data  queue */
			if (curr_state == sNone)
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <Command_task+0x4c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b07      	cmp	r3, #7
 80014f2:	d102      	bne.n	80014fa <Command_task+0x3a>
			{
				curr_state = sMenu ;
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <Command_task+0x4c>)
 80014f6:	2206      	movs	r2, #6
 80014f8:	701a      	strb	r2, [r3, #0]
			}
			process_command(&cmd) ;
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f806 	bl	8001510 <process_command>
		status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001504:	e7e5      	b.n	80014d2 <Command_task+0x12>
 8001506:	bf00      	nop
 8001508:	20000004 	.word	0x20000004
 800150c:	2000001f 	.word	0x2000001f

08001510 <process_command>:

	}
}

void process_command ( command_t *cmd)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af02      	add	r7, sp, #8
 8001516:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f845 	bl	80015a8 <extract_command>

	if (curr_state != sNone)
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <process_command+0x84>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b07      	cmp	r3, #7
 8001524:	d030      	beq.n	8001588 <process_command+0x78>
	{
		if (curr_state == sMenu)
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <process_command+0x84>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b06      	cmp	r3, #6
 800152c:	d102      	bne.n	8001534 <process_command+0x24>
		checkState(cmd);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f874 	bl	800161c <checkState>
		switch (curr_state )
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <process_command+0x84>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b02      	cmp	r3, #2
 800153a:	dc02      	bgt.n	8001542 <process_command+0x32>
 800153c:	2b00      	cmp	r3, #0
 800153e:	da04      	bge.n	800154a <process_command+0x3a>
 8001540:	e017      	b.n	8001572 <process_command+0x62>
 8001542:	3b03      	subs	r3, #3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d814      	bhi.n	8001572 <process_command+0x62>
 8001548:	e009      	b.n	800155e <process_command+0x4e>
		{

		case sRtcDateConfig:
		case sRtcTimeConfig:
		case sSetting:
				xTaskNotify(handle_setting_task,(uint32_t)cmd ,eSetValueWithOverwrite) ;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <process_command+0x88>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	2300      	movs	r3, #0
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2303      	movs	r3, #3
 8001556:	2100      	movs	r1, #0
 8001558:	f00a fdae 	bl	800c0b8 <xTaskGenericNotify>
				break ;
 800155c:	e015      	b.n	800158a <process_command+0x7a>
		case sRunOnly:
		case sRunAndSave:
		case sRun:
				xTaskNotify(handle_start_task,(uint32_t)cmd ,eSetValueWithOverwrite) ;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <process_command+0x8c>)
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2303      	movs	r3, #3
 800156a:	2100      	movs	r1, #0
 800156c:	f00a fda4 	bl	800c0b8 <xTaskGenericNotify>
				break ;
 8001570:	e00b      	b.n	800158a <process_command+0x7a>
		 default:
			 send_uart(msg_inv);
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <process_command+0x90>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f87c 	bl	8000674 <send_uart>
			 send_uart(msg_menu);
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <process_command+0x94>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff f877 	bl	8000674 <send_uart>
		}
	}



}
 8001586:	e000      	b.n	800158a <process_command+0x7a>
	}
 8001588:	bf00      	nop
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000001f 	.word	0x2000001f
 8001598:	20002328 	.word	0x20002328
 800159c:	2000231c 	.word	0x2000231c
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000004 	.word	0x20000004

080015a8 <extract_command>:

int extract_command ( command_t *cmd )
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	uint8_t item ;
	BaseType_t status ;
	status = uxQueueMessagesWaiting(q_data); // trả về số phần tử có sẵn trong hàng đợi
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <extract_command+0x70>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f009 fd75 	bl	800b0a4 <uxQueueMessagesWaiting>
 80015ba:	4603      	mov	r3, r0
 80015bc:	613b      	str	r3, [r7, #16]
	if (!status) return  -1 ; // nếu không có phần tử nào
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <extract_command+0x22>
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	e022      	b.n	8001610 <extract_command+0x68>

	uint8_t i = 0 ;
 80015ca:	2300      	movs	r3, #0
 80015cc:	75fb      	strb	r3, [r7, #23]
	do
	{
		status = xQueueReceive(q_data, &item, 0) ;
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <extract_command+0x70>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f107 010f 	add.w	r1, r7, #15
 80015d6:	2200      	movs	r2, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f009 fc13 	bl	800ae04 <xQueueReceive>
 80015de:	6138      	str	r0, [r7, #16]
		if (status == pdTRUE) cmd->payload[i++] = item ;
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d106      	bne.n	80015f4 <extract_command+0x4c>
 80015e6:	7dfb      	ldrb	r3, [r7, #23]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	75fa      	strb	r2, [r7, #23]
 80015ec:	461a      	mov	r2, r3
 80015ee:	7bf9      	ldrb	r1, [r7, #15]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	5499      	strb	r1, [r3, r2]

	}
	while (item !='\n');
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	2b0a      	cmp	r3, #10
 80015f8:	d1e9      	bne.n	80015ce <extract_command+0x26>
	cmd->payload[i-1] = '\0';
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	2100      	movs	r1, #0
 8001602:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1 ;
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	3b01      	subs	r3, #1
 8001608:	461a      	mov	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60da      	str	r2, [r3, #12]
	return 0 ;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20002330 	.word	0x20002330

0800161c <checkState>:

void checkState( command_t *cmd )
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	uint8_t option ;
	if (cmd->len == 1 )
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d116      	bne.n	800165a <checkState+0x3e>
	{
		option = get_number(cmd->payload, cmd->len);
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	4619      	mov	r1, r3
 8001634:	4610      	mov	r0, r2
 8001636:	f7fe ffdd 	bl	80005f4 <get_number>
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]
		switch(option)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <checkState+0x2e>
 8001644:	2b01      	cmp	r3, #1
 8001646:	d004      	beq.n	8001652 <checkState+0x36>
			break;
		case 1:
			curr_state = sSetting ;
		}
	}
}
 8001648:	e008      	b.n	800165c <checkState+0x40>
			curr_state = sRun;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <checkState+0x48>)
 800164c:	2203      	movs	r2, #3
 800164e:	701a      	strb	r2, [r3, #0]
			break;
 8001650:	e004      	b.n	800165c <checkState+0x40>
			curr_state = sSetting ;
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <checkState+0x48>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
}
 8001658:	e000      	b.n	800165c <checkState+0x40>
	}
 800165a:	bf00      	nop
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000001f 	.word	0x2000001f

08001668 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800166e:	f000 fdf8 	bl	8002262 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001672:	f000 f8a9 	bl	80017c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001676:	f000 f9c3 	bl	8001a00 <MX_GPIO_Init>
	MX_I2C1_Init();
 800167a:	f000 f913 	bl	80018a4 <MX_I2C1_Init>
	MX_SPI1_Init();
 800167e:	f000 f951 	bl	8001924 <MX_SPI1_Init>
	MX_USART3_UART_Init();
 8001682:	f000 f98d 	bl	80019a0 <MX_USART3_UART_Init>
	MX_FATFS_Init();
 8001686:	f005 fc9d 	bl	8006fc4 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	status = xTaskCreate(Main_task, "menu_task", 10000, NULL, 2,&handle_main_task);
 800168a:	4b3c      	ldr	r3, [pc, #240]	; (800177c <main+0x114>)
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	2302      	movs	r3, #2
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	f242 7210 	movw	r2, #10000	; 0x2710
 8001698:	4939      	ldr	r1, [pc, #228]	; (8001780 <main+0x118>)
 800169a:	483a      	ldr	r0, [pc, #232]	; (8001784 <main+0x11c>)
 800169c:	f009 feaa 	bl	800b3f4 <xTaskCreate>
 80016a0:	6078      	str	r0, [r7, #4]
	configASSERT(status == pdPASS);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d003      	beq.n	80016b0 <main+0x48>
 80016a8:	4937      	ldr	r1, [pc, #220]	; (8001788 <main+0x120>)
 80016aa:	2073      	movs	r0, #115	; 0x73
 80016ac:	f000 fae2 	bl	8001c74 <vAssertCalled>
	status = xTaskCreate(Start_task, "start_task", 500, NULL, 2,&handle_start_task);
 80016b0:	4b36      	ldr	r3, [pc, #216]	; (800178c <main+0x124>)
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2302      	movs	r3, #2
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2300      	movs	r3, #0
 80016ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016be:	4934      	ldr	r1, [pc, #208]	; (8001790 <main+0x128>)
 80016c0:	4834      	ldr	r0, [pc, #208]	; (8001794 <main+0x12c>)
 80016c2:	f009 fe97 	bl	800b3f4 <xTaskCreate>
 80016c6:	6078      	str	r0, [r7, #4]
	configASSERT(status == pdPASS);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d003      	beq.n	80016d6 <main+0x6e>
 80016ce:	492e      	ldr	r1, [pc, #184]	; (8001788 <main+0x120>)
 80016d0:	2075      	movs	r0, #117	; 0x75
 80016d2:	f000 facf 	bl	8001c74 <vAssertCalled>
	status = xTaskCreate(Send_task, "send_task", 500, NULL, 2,&handle_send_task);
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <main+0x130>)
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	2302      	movs	r3, #2
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2300      	movs	r3, #0
 80016e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016e4:	492d      	ldr	r1, [pc, #180]	; (800179c <main+0x134>)
 80016e6:	482e      	ldr	r0, [pc, #184]	; (80017a0 <main+0x138>)
 80016e8:	f009 fe84 	bl	800b3f4 <xTaskCreate>
 80016ec:	6078      	str	r0, [r7, #4]
	configASSERT(status == pdPASS);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d003      	beq.n	80016fc <main+0x94>
 80016f4:	4924      	ldr	r1, [pc, #144]	; (8001788 <main+0x120>)
 80016f6:	2077      	movs	r0, #119	; 0x77
 80016f8:	f000 fabc 	bl	8001c74 <vAssertCalled>
	status = xTaskCreate(Setting_task, "Setting_task", 500, NULL, 2,&handle_setting_task);
 80016fc:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <main+0x13c>)
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	2302      	movs	r3, #2
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2300      	movs	r3, #0
 8001706:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800170a:	4927      	ldr	r1, [pc, #156]	; (80017a8 <main+0x140>)
 800170c:	4827      	ldr	r0, [pc, #156]	; (80017ac <main+0x144>)
 800170e:	f009 fe71 	bl	800b3f4 <xTaskCreate>
 8001712:	6078      	str	r0, [r7, #4]
	configASSERT(status == pdPASS);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d003      	beq.n	8001722 <main+0xba>
 800171a:	491b      	ldr	r1, [pc, #108]	; (8001788 <main+0x120>)
 800171c:	2079      	movs	r0, #121	; 0x79
 800171e:	f000 faa9 	bl	8001c74 <vAssertCalled>
	status = xTaskCreate(Command_task, "Command_task", 100, NULL, 2,&handle_command_task);
 8001722:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <main+0x148>)
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	2302      	movs	r3, #2
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2300      	movs	r3, #0
 800172c:	2264      	movs	r2, #100	; 0x64
 800172e:	4921      	ldr	r1, [pc, #132]	; (80017b4 <main+0x14c>)
 8001730:	4821      	ldr	r0, [pc, #132]	; (80017b8 <main+0x150>)
 8001732:	f009 fe5f 	bl	800b3f4 <xTaskCreate>
 8001736:	6078      	str	r0, [r7, #4]
	configASSERT(status == pdPASS);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d003      	beq.n	8001746 <main+0xde>
 800173e:	4912      	ldr	r1, [pc, #72]	; (8001788 <main+0x120>)
 8001740:	207b      	movs	r0, #123	; 0x7b
 8001742:	f000 fa97 	bl	8001c74 <vAssertCalled>

	q_data = xQueueCreate(10, sizeof(char));
 8001746:	2200      	movs	r2, #0
 8001748:	2101      	movs	r1, #1
 800174a:	200a      	movs	r0, #10
 800174c:	f009 f968 	bl	800aa20 <xQueueGenericCreate>
 8001750:	4603      	mov	r3, r0
 8001752:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <main+0x154>)
 8001754:	6013      	str	r3, [r2, #0]
	configASSERT(q_data != NULL);
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <main+0x154>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d103      	bne.n	8001766 <main+0xfe>
 800175e:	490a      	ldr	r1, [pc, #40]	; (8001788 <main+0x120>)
 8001760:	207e      	movs	r0, #126	; 0x7e
 8001762:	f000 fa87 	bl	8001c74 <vAssertCalled>

	/* USER CODE END 2 */
	initTimer();
 8001766:	f7ff fa13 	bl	8000b90 <initTimer>

	HAL_UART_Receive_IT(&huart3, (uint8_t*) &user_data, 1);
 800176a:	2201      	movs	r2, #1
 800176c:	4914      	ldr	r1, [pc, #80]	; (80017c0 <main+0x158>)
 800176e:	4815      	ldr	r0, [pc, #84]	; (80017c4 <main+0x15c>)
 8001770:	f004 f9f1 	bl	8005b56 <HAL_UART_Receive_IT>
	vTaskStartScheduler();
 8001774:	f009 ffb0 	bl	800b6d8 <vTaskStartScheduler>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001778:	e7fe      	b.n	8001778 <main+0x110>
 800177a:	bf00      	nop
 800177c:	20002320 	.word	0x20002320
 8001780:	0800ed3c 	.word	0x0800ed3c
 8001784:	08000745 	.word	0x08000745
 8001788:	0800ed48 	.word	0x0800ed48
 800178c:	2000231c 	.word	0x2000231c
 8001790:	0800ed5c 	.word	0x0800ed5c
 8001794:	08000bc1 	.word	0x08000bc1
 8001798:	20002324 	.word	0x20002324
 800179c:	0800ed68 	.word	0x0800ed68
 80017a0:	08000fe5 	.word	0x08000fe5
 80017a4:	20002328 	.word	0x20002328
 80017a8:	0800ed74 	.word	0x0800ed74
 80017ac:	08001189 	.word	0x08001189
 80017b0:	2000232c 	.word	0x2000232c
 80017b4:	0800ed84 	.word	0x0800ed84
 80017b8:	080014c1 	.word	0x080014c1
 80017bc:	20002330 	.word	0x20002330
 80017c0:	20002334 	.word	0x20002334
 80017c4:	20002294 	.word	0x20002294

080017c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b094      	sub	sp, #80	; 0x50
 80017cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	2234      	movs	r2, #52	; 0x34
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f00c fc62 	bl	800e0a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <SystemClock_Config+0xd4>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	4a2a      	ldr	r2, [pc, #168]	; (800189c <SystemClock_Config+0xd4>)
 80017f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f6:	6413      	str	r3, [r2, #64]	; 0x40
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <SystemClock_Config+0xd4>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <SystemClock_Config+0xd8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a25      	ldr	r2, [pc, #148]	; (80018a0 <SystemClock_Config+0xd8>)
 800180a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <SystemClock_Config+0xd8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800181c:	2302      	movs	r3, #2
 800181e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001820:	2301      	movs	r3, #1
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001824:	2310      	movs	r3, #16
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001828:	2302      	movs	r3, #2
 800182a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800182c:	2300      	movs	r3, #0
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001830:	2308      	movs	r3, #8
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001834:	23d8      	movs	r3, #216	; 0xd8
 8001836:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001838:	2302      	movs	r3, #2
 800183a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800183c:	2302      	movs	r3, #2
 800183e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001840:	2302      	movs	r3, #2
 8001842:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4618      	mov	r0, r3
 800184a:	f001 fed5 	bl	80035f8 <HAL_RCC_OscConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0x90>
		Error_Handler();
 8001854:	f000 fa88 	bl	8001d68 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001858:	f001 fe7e 	bl	8003558 <HAL_PWREx_EnableOverDrive>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x9e>
		Error_Handler();
 8001862:	f000 fa81 	bl	8001d68 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001866:	230f      	movs	r3, #15
 8001868:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186a:	2302      	movs	r3, #2
 800186c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001872:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001876:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	2107      	movs	r1, #7
 8001884:	4618      	mov	r0, r3
 8001886:	f002 f965 	bl	8003b54 <HAL_RCC_ClockConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <SystemClock_Config+0xcc>
		Error_Handler();
 8001890:	f000 fa6a 	bl	8001d68 <Error_Handler>
	}
}
 8001894:	bf00      	nop
 8001896:	3750      	adds	r7, #80	; 0x50
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000

080018a4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <MX_I2C1_Init+0x74>)
 80018aa:	4a1c      	ldr	r2, [pc, #112]	; (800191c <MX_I2C1_Init+0x78>)
 80018ac:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x6000030D;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_I2C1_Init+0x74>)
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <MX_I2C1_Init+0x7c>)
 80018b2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <MX_I2C1_Init+0x74>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_I2C1_Init+0x74>)
 80018bc:	2201      	movs	r2, #1
 80018be:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <MX_I2C1_Init+0x74>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_I2C1_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_I2C1_Init+0x74>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_I2C1_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_I2C1_Init+0x74>)
 80018da:	2200      	movs	r2, #0
 80018dc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80018de:	480e      	ldr	r0, [pc, #56]	; (8001918 <MX_I2C1_Init+0x74>)
 80018e0:	f001 f83e 	bl	8002960 <HAL_I2C_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_I2C1_Init+0x4a>
		Error_Handler();
 80018ea:	f000 fa3d 	bl	8001d68 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80018ee:	2100      	movs	r1, #0
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <MX_I2C1_Init+0x74>)
 80018f2:	f001 fd99 	bl	8003428 <HAL_I2CEx_ConfigAnalogFilter>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80018fc:	f000 fa34 	bl	8001d68 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001900:	2100      	movs	r1, #0
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_I2C1_Init+0x74>)
 8001904:	f001 fddb 	bl	80034be <HAL_I2CEx_ConfigDigitalFilter>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_I2C1_Init+0x6e>
		Error_Handler();
 800190e:	f000 fa2b 	bl	8001d68 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200021e4 	.word	0x200021e4
 800191c:	40005400 	.word	0x40005400
 8001920:	6000030d 	.word	0x6000030d

08001924 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <MX_SPI1_Init+0x74>)
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <MX_SPI1_Init+0x78>)
 800192c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <MX_SPI1_Init+0x74>)
 8001930:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001934:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <MX_SPI1_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <MX_SPI1_Init+0x74>)
 800193e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001942:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <MX_SPI1_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <MX_SPI1_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_SPI1_Init+0x74>)
 8001952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001956:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_SPI1_Init+0x74>)
 800195a:	2210      	movs	r2, #16
 800195c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_SPI1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_SPI1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_SPI1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_SPI1_Init+0x74>)
 8001972:	2207      	movs	r2, #7
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <MX_SPI1_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_SPI1_Init+0x74>)
 800197e:	2208      	movs	r2, #8
 8001980:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_SPI1_Init+0x74>)
 8001984:	f002 ff64 	bl	8004850 <HAL_SPI_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800198e:	f000 f9eb 	bl	8001d68 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20002230 	.word	0x20002230
 800199c:	40013000 	.word	0x40013000

080019a0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019a6:	4a15      	ldr	r2, [pc, #84]	; (80019fc <MX_USART3_UART_Init+0x5c>)
 80019a8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019e4:	f003 ffd6 	bl	8005994 <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 80019ee:	f000 f9bb 	bl	8001d68 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20002294 	.word	0x20002294
 80019fc:	40004800 	.word	0x40004800

08001a00 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	; 0x30
 8001a04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a16:	4b91      	ldr	r3, [pc, #580]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a90      	ldr	r2, [pc, #576]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b8e      	ldr	r3, [pc, #568]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2e:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a8a      	ldr	r2, [pc, #552]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b85      	ldr	r3, [pc, #532]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a84      	ldr	r2, [pc, #528]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b82      	ldr	r3, [pc, #520]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4b7f      	ldr	r3, [pc, #508]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a7e      	ldr	r2, [pc, #504]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b7c      	ldr	r3, [pc, #496]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001a76:	4b79      	ldr	r3, [pc, #484]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a78      	ldr	r2, [pc, #480]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a7c:	f043 0320 	orr.w	r3, r3, #32
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a72      	ldr	r2, [pc, #456]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b70      	ldr	r3, [pc, #448]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001aa6:	4b6d      	ldr	r3, [pc, #436]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a6c      	ldr	r2, [pc, #432]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <MX_GPIO_Init+0x25c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f244 0181 	movw	r1, #16513	; 0x4081
 8001ac4:	4866      	ldr	r0, [pc, #408]	; (8001c60 <MX_GPIO_Init+0x260>)
 8001ac6:	f000 ff31 	bl	800292c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_Pin_SDCard_GPIO_Port, CS_Pin_SDCard_Pin,
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad0:	4864      	ldr	r0, [pc, #400]	; (8001c64 <MX_GPIO_Init+0x264>)
 8001ad2:	f000 ff2b 	bl	800292c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2140      	movs	r1, #64	; 0x40
 8001ada:	4863      	ldr	r0, [pc, #396]	; (8001c68 <MX_GPIO_Init+0x268>)
 8001adc:	f000 ff26 	bl	800292c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12,
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001ae6:	4861      	ldr	r0, [pc, #388]	; (8001c6c <MX_GPIO_Init+0x26c>)
 8001ae8:	f000 ff20 	bl	800292c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	4619      	mov	r1, r3
 8001b00:	485a      	ldr	r0, [pc, #360]	; (8001c6c <MX_GPIO_Init+0x26c>)
 8001b02:	f000 fd4f 	bl	80025a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8001b06:	2332      	movs	r3, #50	; 0x32
 8001b08:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b16:	230b      	movs	r3, #11
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4852      	ldr	r0, [pc, #328]	; (8001c6c <MX_GPIO_Init+0x26c>)
 8001b22:	f000 fd3f 	bl	80025a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8001b26:	2386      	movs	r3, #134	; 0x86
 8001b28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b36:	230b      	movs	r3, #11
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	4619      	mov	r1, r3
 8001b40:	484b      	ldr	r0, [pc, #300]	; (8001c70 <MX_GPIO_Init+0x270>)
 8001b42:	f000 fd2f 	bl	80025a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001b46:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b4a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4840      	ldr	r0, [pc, #256]	; (8001c60 <MX_GPIO_Init+0x260>)
 8001b60:	f000 fd20 	bl	80025a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_Pin_SDCard_Pin */
	GPIO_InitStruct.Pin = CS_Pin_SDCard_Pin;
 8001b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b68:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_Pin_SDCard_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4839      	ldr	r0, [pc, #228]	; (8001c64 <MX_GPIO_Init+0x264>)
 8001b7e:	f000 fd11 	bl	80025a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b94:	230b      	movs	r3, #11
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4830      	ldr	r0, [pc, #192]	; (8001c60 <MX_GPIO_Init+0x260>)
 8001ba0:	f000 fd00 	bl	80025a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ba4:	2340      	movs	r3, #64	; 0x40
 8001ba6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	482b      	ldr	r0, [pc, #172]	; (8001c68 <MX_GPIO_Init+0x268>)
 8001bbc:	f000 fcf2 	bl	80025a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4825      	ldr	r0, [pc, #148]	; (8001c68 <MX_GPIO_Init+0x268>)
 8001bd4:	f000 fce6 	bl	80025a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8001bd8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001bdc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bea:	230a      	movs	r3, #10
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	481e      	ldr	r0, [pc, #120]	; (8001c70 <MX_GPIO_Init+0x270>)
 8001bf6:	f000 fcd5 	bl	80025a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4818      	ldr	r0, [pc, #96]	; (8001c70 <MX_GPIO_Init+0x270>)
 8001c10:	f000 fcc8 	bl	80025a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC10 PC11 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8001c14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	480f      	ldr	r0, [pc, #60]	; (8001c6c <MX_GPIO_Init+0x26c>)
 8001c2e:	f000 fcb9 	bl	80025a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8001c32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c36:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c44:	230b      	movs	r3, #11
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4806      	ldr	r0, [pc, #24]	; (8001c68 <MX_GPIO_Init+0x268>)
 8001c50:	f000 fca8 	bl	80025a4 <HAL_GPIO_Init>

}
 8001c54:	bf00      	nop
 8001c56:	3730      	adds	r7, #48	; 0x30
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020400 	.word	0x40020400
 8001c64:	40021400 	.word	0x40021400
 8001c68:	40021800 	.word	0x40021800
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020000 	.word	0x40020000

08001c74 <vAssertCalled>:

/* USER CODE BEGIN 4 */
void vAssertCalled(uint32_t ulLine, const char *pcFile) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
	volatile unsigned long ul = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
	(void) pcFile;
	(void) ulLine;
	taskENTER_CRITICAL();
 8001c82:	f00b f8c9 	bl	800ce18 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		 function. */
		while (ul == 0) {
 8001c86:	e000      	b.n	8001c8a <vAssertCalled+0x16>
			__NOP();
 8001c88:	bf00      	nop
		while (ul == 0) {
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0fb      	beq.n	8001c88 <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8001c90:	f00b f8ee 	bl	800ce70 <vPortExitCritical>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	for (int i = 0; i < 4000; i++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	e002      	b.n	8001cb0 <HAL_UART_RxCpltCallback+0x14>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3301      	adds	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001cb6:	dbf8      	blt.n	8001caa <HAL_UART_RxCpltCallback+0xe>
		;

	if (!xQueueIsQueueFullFromISR(q_data)) // Kiểm tra hàng đợi đã đầy chưa nếu chưa sẽ trả về pdFALSE còn nếu đầy rồi thì trả về pdTRUE
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_UART_RxCpltCallback+0x98>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f009 fb1b 	bl	800b2f8 <xQueueIsQueueFullFromISR>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <HAL_UART_RxCpltCallback+0x3c>
			{
		/*Queue is not full */
		/*TODO: Enqueue data byte */
		xQueueSendFromISR(q_data, (void* )&user_data, NULL); // user_data là nơi nhận data đc nhận về  thông qua khai báo HAL_UART_Receive_IT
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_UART_RxCpltCallback+0x98>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2200      	movs	r2, #0
 8001cd0:	4919      	ldr	r1, [pc, #100]	; (8001d38 <HAL_UART_RxCpltCallback+0x9c>)
 8001cd2:	f009 f801 	bl	800acd8 <xQueueGenericSendFromISR>
 8001cd6:	e013      	b.n	8001d00 <HAL_UART_RxCpltCallback+0x64>

	} else {
		/*Queue is full */

		if (user_data == '\n') {
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_UART_RxCpltCallback+0x9c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b0a      	cmp	r3, #10
 8001ce0:	d10e      	bne.n	8001d00 <HAL_UART_RxCpltCallback+0x64>
			/*user_data = '\n' */
			/*TODO: make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data, (void*) &dummy, NULL); // delete last data byte
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_UART_RxCpltCallback+0x98>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f107 010b 	add.w	r1, r7, #11
 8001cea:	2200      	movs	r2, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f009 f959 	bl	800afa4 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void* )&user_data, NULL);
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_UART_RxCpltCallback+0x98>)
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	490f      	ldr	r1, [pc, #60]	; (8001d38 <HAL_UART_RxCpltCallback+0x9c>)
 8001cfc:	f008 ffec 	bl	800acd8 <xQueueGenericSendFromISR>
		}
	}

	/*TODO: send notification to command handling task if user_data = '\n' */
	if (user_data == '\n') {
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_UART_RxCpltCallback+0x9c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b0a      	cmp	r3, #10
 8001d08:	d10a      	bne.n	8001d20 <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(handle_command_task, 0, eNoAction, NULL);
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_UART_RxCpltCallback+0xa0>)
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	2300      	movs	r3, #0
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2300      	movs	r3, #0
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	f00a fa96 	bl	800c24c <xTaskGenericNotifyFromISR>
	}

	/* TODO: Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart3, (uint8_t*) &user_data, 1);
 8001d20:	2201      	movs	r2, #1
 8001d22:	4905      	ldr	r1, [pc, #20]	; (8001d38 <HAL_UART_RxCpltCallback+0x9c>)
 8001d24:	4806      	ldr	r0, [pc, #24]	; (8001d40 <HAL_UART_RxCpltCallback+0xa4>)
 8001d26:	f003 ff16 	bl	8005b56 <HAL_UART_Receive_IT>
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20002330 	.word	0x20002330
 8001d38:	20002334 	.word	0x20002334
 8001d3c:	2000232c 	.word	0x2000232c
 8001d40:	20002294 	.word	0x20002294

08001d44 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d101      	bne.n	8001d5a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001d56:	f000 fa91 	bl	800227c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40001000 	.word	0x40001000

08001d68 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6c:	b672      	cpsid	i
}
 8001d6e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d70:	e7fe      	b.n	8001d70 <Error_Handler+0x8>
	...

08001d74 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_MspInit+0x44>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <HAL_MspInit+0x44>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_MspInit+0x44>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_MspInit+0x44>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_MspInit+0x44>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_MspInit+0x44>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b0ae      	sub	sp, #184	; 0xb8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001dc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	2290      	movs	r2, #144	; 0x90
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00c f95f 	bl	800e0a0 <memset>
	if (hi2c->Instance == I2C1) {
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_I2C_MspInit+0xb4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d13c      	bne.n	8001e66 <HAL_I2C_MspInit+0xaa>

		/* USER CODE END I2C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001df0:	617b      	str	r3, [r7, #20]
		PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	67bb      	str	r3, [r7, #120]	; 0x78
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 f900 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_MspInit+0x4e>
			Error_Handler();
 8001e06:	f7ff ffaf 	bl	8001d68 <Error_Handler>
		}

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_I2C_MspInit+0xb8>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_I2C_MspInit+0xb8>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_I2C_MspInit+0xb8>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_9;
 8001e22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2a:	2312      	movs	r3, #18
 8001e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e46:	4619      	mov	r1, r3
 8001e48:	480b      	ldr	r0, [pc, #44]	; (8001e78 <HAL_I2C_MspInit+0xbc>)
 8001e4a:	f000 fbab 	bl	80025a4 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_I2C_MspInit+0xb8>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a08      	ldr	r2, [pc, #32]	; (8001e74 <HAL_I2C_MspInit+0xb8>)
 8001e54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_I2C_MspInit+0xb8>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 8001e66:	bf00      	nop
 8001e68:	37b8      	adds	r7, #184	; 0xb8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40005400 	.word	0x40005400
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020400 	.word	0x40020400

08001e7c <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
	if (hspi->Instance == SPI1) {
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a25      	ldr	r2, [pc, #148]	; (8001f30 <HAL_SPI_MspInit+0xb4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d143      	bne.n	8001f26 <HAL_SPI_MspInit+0xaa>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001e9e:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <HAL_SPI_MspInit+0xb8>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4a24      	ldr	r2, [pc, #144]	; (8001f34 <HAL_SPI_MspInit+0xb8>)
 8001ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_SPI_MspInit+0xb8>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <HAL_SPI_MspInit+0xb8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a1e      	ldr	r2, [pc, #120]	; (8001f34 <HAL_SPI_MspInit+0xb8>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_SPI_MspInit+0xb8>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_SPI_MspInit+0xb8>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <HAL_SPI_MspInit+0xb8>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_SPI_MspInit+0xb8>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PD7     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001ee6:	2360      	movs	r3, #96	; 0x60
 8001ee8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	480d      	ldr	r0, [pc, #52]	; (8001f38 <HAL_SPI_MspInit+0xbc>)
 8001f02:	f000 fb4f 	bl	80025a4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f12:	2303      	movs	r3, #3
 8001f14:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f16:	2305      	movs	r3, #5
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4806      	ldr	r0, [pc, #24]	; (8001f3c <HAL_SPI_MspInit+0xc0>)
 8001f22:	f000 fb3f 	bl	80025a4 <HAL_GPIO_Init>
		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}

}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40013000 	.word	0x40013000
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40020c00 	.word	0x40020c00

08001f40 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0ae      	sub	sp, #184	; 0xb8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2290      	movs	r2, #144	; 0x90
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00c f89d 	bl	800e0a0 <memset>
	if (huart->Instance == USART3) {
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a26      	ldr	r2, [pc, #152]	; (8002004 <HAL_UART_MspInit+0xc4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d144      	bne.n	8001ffa <HAL_UART_MspInit+0xba>

		/* USER CODE END USART3_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f74:	617b      	str	r3, [r7, #20]
		PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	663b      	str	r3, [r7, #96]	; 0x60
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 f83e 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_UART_MspInit+0x4e>
			Error_Handler();
 8001f8a:	f7ff feed 	bl	8001d68 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_UART_MspInit+0xc8>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <HAL_UART_MspInit+0xc8>)
 8001f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_UART_MspInit+0xc8>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_UART_MspInit+0xc8>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a17      	ldr	r2, [pc, #92]	; (8002008 <HAL_UART_MspInit+0xc8>)
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_UART_MspInit+0xc8>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8001fbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fd8:	2307      	movs	r3, #7
 8001fda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fde:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4809      	ldr	r0, [pc, #36]	; (800200c <HAL_UART_MspInit+0xcc>)
 8001fe6:	f000 fadd 	bl	80025a4 <HAL_GPIO_Init>

		/* USART3 interrupt Init */
		HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2106      	movs	r1, #6
 8001fee:	2027      	movs	r0, #39	; 0x27
 8001ff0:	f000 fa1c 	bl	800242c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ff4:	2027      	movs	r0, #39	; 0x27
 8001ff6:	f000 fa35 	bl	8002464 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}

}
 8001ffa:	bf00      	nop
 8001ffc:	37b8      	adds	r7, #184	; 0xb8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40004800 	.word	0x40004800
 8002008:	40023800 	.word	0x40023800
 800200c:	40020c00 	.word	0x40020c00

08002010 <HAL_InitTick>:
 * @note   This function is called  automatically at the beginning of program after
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	; 0x30
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	RCC_ClkInitTypeDef clkconfig;
	uint32_t uwTimclock = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t uwPrescalerValue = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pFLatency;
	/*Configure the TIM6 IRQ priority */
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	2036      	movs	r0, #54	; 0x36
 8002026:	f000 fa01 	bl	800242c <HAL_NVIC_SetPriority>

	/* Enable the TIM6 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800202a:	2036      	movs	r0, #54	; 0x36
 800202c:	f000 fa1a 	bl	8002464 <HAL_NVIC_EnableIRQ>

	/* Enable TIM6 clock */
	__HAL_RCC_TIM6_CLK_ENABLE();
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <HAL_InitTick+0xa0>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	4a1e      	ldr	r2, [pc, #120]	; (80020b0 <HAL_InitTick+0xa0>)
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	6413      	str	r3, [r2, #64]	; 0x40
 800203c:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <HAL_InitTick+0xa0>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002048:	f107 0210 	add.w	r2, r7, #16
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f001 ffa2 	bl	8003f9c <HAL_RCC_GetClockConfig>

	/* Compute TIM6 clock */
	uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8002058:	f001 ff78 	bl	8003f4c <HAL_RCC_GetPCLK1Freq>
 800205c:	4603      	mov	r3, r0
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	4a13      	ldr	r2, [pc, #76]	; (80020b4 <HAL_InitTick+0xa4>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0c9b      	lsrs	r3, r3, #18
 800206c:	3b01      	subs	r3, #1
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Initialize TIM6 */
	htim6.Instance = TIM6;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_InitTick+0xa8>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <HAL_InitTick+0xac>)
 8002074:	601a      	str	r2, [r3, #0]
	 + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
	 + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
	 + ClockDivision = 0
	 + Counter direction = Up
	 */
	htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_InitTick+0xa8>)
 8002078:	f240 32e7 	movw	r2, #999	; 0x3e7
 800207c:	60da      	str	r2, [r3, #12]
	htim6.Init.Prescaler = uwPrescalerValue;
 800207e:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_InitTick+0xa8>)
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	6053      	str	r3, [r2, #4]
	htim6.Init.ClockDivision = 0;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_InitTick+0xa8>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_InitTick+0xa8>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]

	if (HAL_TIM_Base_Init(&htim6) == HAL_OK) {
 8002090:	4809      	ldr	r0, [pc, #36]	; (80020b8 <HAL_InitTick+0xa8>)
 8002092:	f003 f99f 	bl	80053d4 <HAL_TIM_Base_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d104      	bne.n	80020a6 <HAL_InitTick+0x96>
		/* Start the TIM time Base generation in interrupt mode */
		return HAL_TIM_Base_Start_IT(&htim6);
 800209c:	4806      	ldr	r0, [pc, #24]	; (80020b8 <HAL_InitTick+0xa8>)
 800209e:	f003 f9fb 	bl	8005498 <HAL_TIM_Base_Start_IT>
 80020a2:	4603      	mov	r3, r0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x98>
	}

	/* Return function status */
	return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3730      	adds	r7, #48	; 0x30
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40023800 	.word	0x40023800
 80020b4:	431bde83 	.word	0x431bde83
 80020b8:	20002338 	.word	0x20002338
 80020bc:	40001000 	.word	0x40001000

080020c0 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void) {
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <SDTimer_Handler+0x40>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <SDTimer_Handler+0x1c>
		Timer1--;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <SDTimer_Handler+0x40>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <SDTimer_Handler+0x40>)
 80020da:	801a      	strh	r2, [r3, #0]

	if (Timer2 > 0)
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <SDTimer_Handler+0x44>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <SDTimer_Handler+0x34>
		Timer2--;
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <SDTimer_Handler+0x44>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <SDTimer_Handler+0x44>)
 80020f2:	801a      	strh	r2, [r3, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20002386 	.word	0x20002386
 8002104:	20002388 	.word	0x20002388

08002108 <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800210c:	e7fe      	b.n	800210c <NMI_Handler+0x4>

0800210e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8002112:	e7fe      	b.n	8002112 <HardFault_Handler+0x4>

08002114 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8002118:	e7fe      	b.n	8002118 <MemManage_Handler+0x4>

0800211a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800211e:	e7fe      	b.n	800211e <BusFault_Handler+0x4>

08002120 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8002124:	e7fe      	b.n	8002124 <UsageFault_Handler+0x4>

08002126 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <USART3_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <USART3_IRQHandler+0x10>)
 800213a:	f003 fd5b 	bl	8005bf4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20002294 	.word	0x20002294

08002148 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	FatFsCnt++;
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <TIM6_DAC_IRQHandler+0x30>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	3301      	adds	r3, #1
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <TIM6_DAC_IRQHandler+0x30>)
 8002158:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <TIM6_DAC_IRQHandler+0x30>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b09      	cmp	r3, #9
 8002162:	d904      	bls.n	800216e <TIM6_DAC_IRQHandler+0x26>
		FatFsCnt = 0;
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <TIM6_DAC_IRQHandler+0x30>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800216a:	f7ff ffa9 	bl	80020c0 <SDTimer_Handler>
	}
	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 800216e:	4803      	ldr	r0, [pc, #12]	; (800217c <TIM6_DAC_IRQHandler+0x34>)
 8002170:	f003 fa0a 	bl	8005588 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20002384 	.word	0x20002384
 800217c:	20002338 	.word	0x20002338

08002180 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002188:	4a14      	ldr	r2, [pc, #80]	; (80021dc <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <_sbrk+0x64>)
 800219e:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <_sbrk+0x68>)
 80021a0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <_sbrk+0x64>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d207      	bcs.n	80021c0 <_sbrk+0x40>
		errno = ENOMEM;
 80021b0:	f00b ff3e 	bl	800e030 <__errno>
 80021b4:	4603      	mov	r3, r0
 80021b6:	220c      	movs	r2, #12
 80021b8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	e009      	b.n	80021d4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <_sbrk+0x64>)
 80021d0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20080000 	.word	0x20080000
 80021e0:	00000400 	.word	0x00000400
 80021e4:	2000238c 	.word	0x2000238c
 80021e8:	2001b7c8 	.word	0x2001b7c8

080021ec <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <SystemInit+0x20>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	4a05      	ldr	r2, [pc, #20]	; (800220c <SystemInit+0x20>)
 80021f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002248 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002214:	480d      	ldr	r0, [pc, #52]	; (800224c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002216:	490e      	ldr	r1, [pc, #56]	; (8002250 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800222c:	4c0b      	ldr	r4, [pc, #44]	; (800225c <LoopFillZerobss+0x26>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800223a:	f7ff ffd7 	bl	80021ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223e:	f00b fefd 	bl	800e03c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002242:	f7ff fa11 	bl	8001668 <main>
  bx  lr    
 8002246:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002248:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002250:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002254:	0800f3a0 	.word	0x0800f3a0
  ldr r2, =_sbss
 8002258:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800225c:	2001b7c8 	.word	0x2001b7c8

08002260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC_IRQHandler>

08002262 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002266:	2003      	movs	r0, #3
 8002268:	f000 f8d5 	bl	8002416 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226c:	200f      	movs	r0, #15
 800226e:	f7ff fecf 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002272:	f7ff fd7f 	bl	8001d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_IncTick+0x20>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_IncTick+0x24>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4413      	add	r3, r2
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_IncTick+0x24>)
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000028 	.word	0x20000028
 80022a0:	20002390 	.word	0x20002390

080022a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return uwTick;
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_GetTick+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20002390 	.word	0x20002390

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <__NVIC_SetPriorityGrouping+0x40>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <__NVIC_SetPriorityGrouping+0x40>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00
 8002300:	05fa0000 	.word	0x05fa0000

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	; (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	; (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	; (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ff4c 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243e:	f7ff ff61 	bl	8002304 <__NVIC_GetPriorityGrouping>
 8002442:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	6978      	ldr	r0, [r7, #20]
 800244a:	f7ff ffb1 	bl	80023b0 <NVIC_EncodePriority>
 800244e:	4602      	mov	r2, r0
 8002450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ff80 	bl	800235c <__NVIC_SetPriority>
}
 800245c:	bf00      	nop
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff54 	bl	8002320 <__NVIC_EnableIRQ>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800248e:	f7ff ff09 	bl	80022a4 <HAL_GetTick>
 8002492:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d008      	beq.n	80024b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e052      	b.n	8002558 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0216 	bic.w	r2, r2, #22
 80024c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_DMA_Abort+0x62>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0208 	bic.w	r2, r2, #8
 80024f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002502:	e013      	b.n	800252c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002504:	f7ff fece 	bl	80022a4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b05      	cmp	r3, #5
 8002510:	d90c      	bls.n	800252c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2203      	movs	r2, #3
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e015      	b.n	8002558 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1e4      	bne.n	8002504 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	223f      	movs	r2, #63	; 0x3f
 8002540:	409a      	lsls	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d004      	beq.n	800257e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e00c      	b.n	8002598 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2205      	movs	r2, #5
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	e175      	b.n	80028b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025c4:	2201      	movs	r2, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	429a      	cmp	r2, r3
 80025de:	f040 8164 	bne.w	80028aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d005      	beq.n	80025fa <HAL_GPIO_Init+0x56>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d130      	bne.n	800265c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2203      	movs	r2, #3
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002630:	2201      	movs	r2, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 0201 	and.w	r2, r3, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b03      	cmp	r3, #3
 8002666:	d017      	beq.n	8002698 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d123      	bne.n	80026ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	08da      	lsrs	r2, r3, #3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3208      	adds	r2, #8
 80026ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	69b9      	ldr	r1, [r7, #24]
 80026e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0203 	and.w	r2, r3, #3
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80be 	beq.w	80028aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a65      	ldr	r2, [pc, #404]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002746:	4a61      	ldr	r2, [pc, #388]	; (80028cc <HAL_GPIO_Init+0x328>)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a58      	ldr	r2, [pc, #352]	; (80028d0 <HAL_GPIO_Init+0x32c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d037      	beq.n	80027e2 <HAL_GPIO_Init+0x23e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a57      	ldr	r2, [pc, #348]	; (80028d4 <HAL_GPIO_Init+0x330>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d031      	beq.n	80027de <HAL_GPIO_Init+0x23a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a56      	ldr	r2, [pc, #344]	; (80028d8 <HAL_GPIO_Init+0x334>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d02b      	beq.n	80027da <HAL_GPIO_Init+0x236>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a55      	ldr	r2, [pc, #340]	; (80028dc <HAL_GPIO_Init+0x338>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d025      	beq.n	80027d6 <HAL_GPIO_Init+0x232>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a54      	ldr	r2, [pc, #336]	; (80028e0 <HAL_GPIO_Init+0x33c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01f      	beq.n	80027d2 <HAL_GPIO_Init+0x22e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a53      	ldr	r2, [pc, #332]	; (80028e4 <HAL_GPIO_Init+0x340>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d019      	beq.n	80027ce <HAL_GPIO_Init+0x22a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_GPIO_Init+0x344>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <HAL_GPIO_Init+0x226>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a51      	ldr	r2, [pc, #324]	; (80028ec <HAL_GPIO_Init+0x348>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00d      	beq.n	80027c6 <HAL_GPIO_Init+0x222>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a50      	ldr	r2, [pc, #320]	; (80028f0 <HAL_GPIO_Init+0x34c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d007      	beq.n	80027c2 <HAL_GPIO_Init+0x21e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4f      	ldr	r2, [pc, #316]	; (80028f4 <HAL_GPIO_Init+0x350>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_GPIO_Init+0x21a>
 80027ba:	2309      	movs	r3, #9
 80027bc:	e012      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027be:	230a      	movs	r3, #10
 80027c0:	e010      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027c2:	2308      	movs	r3, #8
 80027c4:	e00e      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027c6:	2307      	movs	r3, #7
 80027c8:	e00c      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027ca:	2306      	movs	r3, #6
 80027cc:	e00a      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027ce:	2305      	movs	r3, #5
 80027d0:	e008      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027d2:	2304      	movs	r3, #4
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027d6:	2303      	movs	r3, #3
 80027d8:	e004      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027da:	2302      	movs	r3, #2
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027e2:	2300      	movs	r3, #0
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f002 0203 	and.w	r2, r2, #3
 80027ea:	0092      	lsls	r2, r2, #2
 80027ec:	4093      	lsls	r3, r2
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027f4:	4935      	ldr	r1, [pc, #212]	; (80028cc <HAL_GPIO_Init+0x328>)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002802:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_GPIO_Init+0x354>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002826:	4a34      	ldr	r2, [pc, #208]	; (80028f8 <HAL_GPIO_Init+0x354>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800282c:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HAL_GPIO_Init+0x354>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002850:	4a29      	ldr	r2, [pc, #164]	; (80028f8 <HAL_GPIO_Init+0x354>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002856:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <HAL_GPIO_Init+0x354>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287a:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <HAL_GPIO_Init+0x354>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_GPIO_Init+0x354>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <HAL_GPIO_Init+0x354>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	f67f ae86 	bls.w	80025c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020c00 	.word	0x40020c00
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40021400 	.word	0x40021400
 80028e8:	40021800 	.word	0x40021800
 80028ec:	40021c00 	.word	0x40021c00
 80028f0:	40022000 	.word	0x40022000
 80028f4:	40022400 	.word	0x40022400
 80028f8:	40013c00 	.word	0x40013c00

080028fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	887b      	ldrh	r3, [r7, #2]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
 8002918:	e001      	b.n	800291e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
 8002938:	4613      	mov	r3, r2
 800293a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800293c:	787b      	ldrb	r3, [r7, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002942:	887a      	ldrh	r2, [r7, #2]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002948:	e003      	b.n	8002952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	041a      	lsls	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	619a      	str	r2, [r3, #24]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff fa18 	bl	8001dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2224      	movs	r2, #36	; 0x24
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d107      	bne.n	80029da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	e006      	b.n	80029e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d104      	bne.n	80029fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_I2C_Init+0x11c>)
 8002a06:	430b      	orrs	r3, r1
 8002a08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69d9      	ldr	r1, [r3, #28]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1a      	ldr	r2, [r3, #32]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	02008000 	.word	0x02008000

08002a80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	460b      	mov	r3, r1
 8002a94:	813b      	strh	r3, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	f040 80f9 	bne.w	8002c9a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_I2C_Mem_Write+0x34>
 8002aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d105      	bne.n	8002ac0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0ed      	b.n	8002c9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_I2C_Mem_Write+0x4e>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e0e6      	b.n	8002c9c <HAL_I2C_Mem_Write+0x21c>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ad6:	f7ff fbe5 	bl	80022a4 <HAL_GetTick>
 8002ada:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2319      	movs	r3, #25
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fac3 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0d1      	b.n	8002c9c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2221      	movs	r2, #33	; 0x21
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2240      	movs	r2, #64	; 0x40
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a3a      	ldr	r2, [r7, #32]
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b20:	88f8      	ldrh	r0, [r7, #6]
 8002b22:	893a      	ldrh	r2, [r7, #8]
 8002b24:	8979      	ldrh	r1, [r7, #10]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4603      	mov	r3, r0
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f9d3 	bl	8002edc <I2C_RequestMemoryWrite>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0a9      	b.n	8002c9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2bff      	cmp	r3, #255	; 0xff
 8002b50:	d90e      	bls.n	8002b70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	22ff      	movs	r2, #255	; 0xff
 8002b56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	8979      	ldrh	r1, [r7, #10]
 8002b60:	2300      	movs	r3, #0
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fc2b 	bl	80033c4 <I2C_TransferConfig>
 8002b6e:	e00f      	b.n	8002b90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	8979      	ldrh	r1, [r7, #10]
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fc1a 	bl	80033c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 faad 	bl	80030f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e07b      	b.n	8002c9c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d034      	beq.n	8002c48 <HAL_I2C_Mem_Write+0x1c8>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d130      	bne.n	8002c48 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	2200      	movs	r2, #0
 8002bee:	2180      	movs	r1, #128	; 0x80
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fa3f 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e04d      	b.n	8002c9c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2bff      	cmp	r3, #255	; 0xff
 8002c08:	d90e      	bls.n	8002c28 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	22ff      	movs	r2, #255	; 0xff
 8002c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	8979      	ldrh	r1, [r7, #10]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fbcf 	bl	80033c4 <I2C_TransferConfig>
 8002c26:	e00f      	b.n	8002c48 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	8979      	ldrh	r1, [r7, #10]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fbbe 	bl	80033c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d19e      	bne.n	8002b90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fa8c 	bl	8003174 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e01a      	b.n	8002c9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_I2C_Mem_Write+0x224>)
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	fe00e800 	.word	0xfe00e800

08002ca8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	4608      	mov	r0, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	817b      	strh	r3, [r7, #10]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	813b      	strh	r3, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	f040 80fd 	bne.w	8002eca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_I2C_Mem_Read+0x34>
 8002cd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0f1      	b.n	8002ecc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_I2C_Mem_Read+0x4e>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0ea      	b.n	8002ecc <HAL_I2C_Mem_Read+0x224>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cfe:	f7ff fad1 	bl	80022a4 <HAL_GetTick>
 8002d02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	2319      	movs	r3, #25
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f9af 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0d5      	b.n	8002ecc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2222      	movs	r2, #34	; 0x22
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2240      	movs	r2, #64	; 0x40
 8002d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a3a      	ldr	r2, [r7, #32]
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d48:	88f8      	ldrh	r0, [r7, #6]
 8002d4a:	893a      	ldrh	r2, [r7, #8]
 8002d4c:	8979      	ldrh	r1, [r7, #10]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	4603      	mov	r3, r0
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f913 	bl	8002f84 <I2C_RequestMemoryRead>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0ad      	b.n	8002ecc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2bff      	cmp	r3, #255	; 0xff
 8002d78:	d90e      	bls.n	8002d98 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	22ff      	movs	r2, #255	; 0xff
 8002d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	8979      	ldrh	r1, [r7, #10]
 8002d88:	4b52      	ldr	r3, [pc, #328]	; (8002ed4 <HAL_I2C_Mem_Read+0x22c>)
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fb17 	bl	80033c4 <I2C_TransferConfig>
 8002d96:	e00f      	b.n	8002db8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	8979      	ldrh	r1, [r7, #10]
 8002daa:	4b4a      	ldr	r3, [pc, #296]	; (8002ed4 <HAL_I2C_Mem_Read+0x22c>)
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fb06 	bl	80033c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2104      	movs	r1, #4
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f956 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e07c      	b.n	8002ecc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d034      	beq.n	8002e78 <HAL_I2C_Mem_Read+0x1d0>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d130      	bne.n	8002e78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f927 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e04d      	b.n	8002ecc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2bff      	cmp	r3, #255	; 0xff
 8002e38:	d90e      	bls.n	8002e58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	22ff      	movs	r2, #255	; 0xff
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	8979      	ldrh	r1, [r7, #10]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fab7 	bl	80033c4 <I2C_TransferConfig>
 8002e56:	e00f      	b.n	8002e78 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	8979      	ldrh	r1, [r7, #10]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 faa6 	bl	80033c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d19a      	bne.n	8002db8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f974 	bl	8003174 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e01a      	b.n	8002ecc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_I2C_Mem_Read+0x230>)
 8002eaa:	400b      	ands	r3, r1
 8002eac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e000      	b.n	8002ecc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002eca:	2302      	movs	r3, #2
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	80002400 	.word	0x80002400
 8002ed8:	fe00e800 	.word	0xfe00e800

08002edc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	817b      	strh	r3, [r7, #10]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	813b      	strh	r3, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	8979      	ldrh	r1, [r7, #10]
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <I2C_RequestMemoryWrite+0xa4>)
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fa5d 	bl	80033c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	69b9      	ldr	r1, [r7, #24]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f8f0 	bl	80030f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e02c      	b.n	8002f78 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d105      	bne.n	8002f30 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f24:	893b      	ldrh	r3, [r7, #8]
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f2e:	e015      	b.n	8002f5c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f30:	893b      	ldrh	r3, [r7, #8]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	69b9      	ldr	r1, [r7, #24]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f8d6 	bl	80030f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e012      	b.n	8002f78 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f52:	893b      	ldrh	r3, [r7, #8]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f884 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	80002000 	.word	0x80002000

08002f84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	461a      	mov	r2, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	817b      	strh	r3, [r7, #10]
 8002f96:	460b      	mov	r3, r1
 8002f98:	813b      	strh	r3, [r7, #8]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	8979      	ldrh	r1, [r7, #10]
 8002fa4:	4b20      	ldr	r3, [pc, #128]	; (8003028 <I2C_RequestMemoryRead+0xa4>)
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fa0a 	bl	80033c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f89d 	bl	80030f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e02c      	b.n	800301e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d105      	bne.n	8002fd6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fca:	893b      	ldrh	r3, [r7, #8]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002fd4:	e015      	b.n	8003002 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fd6:	893b      	ldrh	r3, [r7, #8]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	69b9      	ldr	r1, [r7, #24]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f883 	bl	80030f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e012      	b.n	800301e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff8:	893b      	ldrh	r3, [r7, #8]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	2200      	movs	r2, #0
 800300a:	2140      	movs	r1, #64	; 0x40
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f831 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	80002000 	.word	0x80002000

0800302c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d103      	bne.n	800304a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2200      	movs	r2, #0
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d007      	beq.n	8003068 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	619a      	str	r2, [r3, #24]
  }
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003084:	e022      	b.n	80030cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d01e      	beq.n	80030cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308e:	f7ff f909 	bl	80022a4 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d113      	bne.n	80030cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e00f      	b.n	80030ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4013      	ands	r3, r2
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	429a      	cmp	r2, r3
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d0cd      	beq.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003100:	e02c      	b.n	800315c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f870 	bl	80031ec <I2C_IsErrorOccurred>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e02a      	b.n	800316c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d01e      	beq.n	800315c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7ff f8c1 	bl	80022a4 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d113      	bne.n	800315c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	f043 0220 	orr.w	r2, r3, #32
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e007      	b.n	800316c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b02      	cmp	r3, #2
 8003168:	d1cb      	bne.n	8003102 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003180:	e028      	b.n	80031d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f830 	bl	80031ec <I2C_IsErrorOccurred>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e026      	b.n	80031e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003196:	f7ff f885 	bl	80022a4 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d302      	bcc.n	80031ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d113      	bne.n	80031d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e007      	b.n	80031e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d1cf      	bne.n	8003182 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	d075      	beq.n	8003304 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2210      	movs	r2, #16
 800321e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003220:	e056      	b.n	80032d0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d052      	beq.n	80032d0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7ff f83b 	bl	80022a4 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <I2C_IsErrorOccurred+0x54>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d147      	bne.n	80032d0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003252:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800325e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003262:	d12e      	bne.n	80032c2 <I2C_IsErrorOccurred+0xd6>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800326a:	d02a      	beq.n	80032c2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	2b20      	cmp	r3, #32
 8003270:	d027      	beq.n	80032c2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003280:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003282:	f7ff f80f 	bl	80022a4 <HAL_GetTick>
 8003286:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003288:	e01b      	b.n	80032c2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800328a:	f7ff f80b 	bl	80022a4 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b19      	cmp	r3, #25
 8003296:	d914      	bls.n	80032c2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d1dc      	bne.n	800328a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d003      	beq.n	80032e6 <I2C_IsErrorOccurred+0xfa>
 80032de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d09d      	beq.n	8003222 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2220      	movs	r2, #32
 80032f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003326:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	f043 0308 	orr.w	r3, r3, #8
 800333e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003348:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01c      	beq.n	80033b4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f7ff fe56 	bl	800302c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <I2C_IsErrorOccurred+0x1d4>)
 800338c:	400b      	ands	r3, r1
 800338e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	431a      	orrs	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80033b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3728      	adds	r7, #40	; 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	fe00e800 	.word	0xfe00e800

080033c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	817b      	strh	r3, [r7, #10]
 80033d2:	4613      	mov	r3, r2
 80033d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033dc:	7a7b      	ldrb	r3, [r7, #9]
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033e4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033f2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	0d5b      	lsrs	r3, r3, #21
 80033fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003402:	4b08      	ldr	r3, [pc, #32]	; (8003424 <I2C_TransferConfig+0x60>)
 8003404:	430b      	orrs	r3, r1
 8003406:	43db      	mvns	r3, r3
 8003408:	ea02 0103 	and.w	r1, r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	03ff63ff 	.word	0x03ff63ff

08003428 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b20      	cmp	r3, #32
 800343c:	d138      	bne.n	80034b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003448:	2302      	movs	r3, #2
 800344a:	e032      	b.n	80034b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2224      	movs	r2, #36	; 0x24
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800347a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6819      	ldr	r1, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e000      	b.n	80034b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034b0:	2302      	movs	r3, #2
  }
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034be:	b480      	push	{r7}
 80034c0:	b085      	sub	sp, #20
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d139      	bne.n	8003548 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034de:	2302      	movs	r3, #2
 80034e0:	e033      	b.n	800354a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2224      	movs	r2, #36	; 0x24
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0201 	bic.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003510:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e000      	b.n	800354a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4a22      	ldr	r2, [pc, #136]	; (80035f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356c:	6413      	str	r3, [r2, #64]	; 0x40
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800357a:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003586:	f7fe fe8d 	bl	80022a4 <HAL_GetTick>
 800358a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800358c:	e009      	b.n	80035a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800358e:	f7fe fe89 	bl	80022a4 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800359c:	d901      	bls.n	80035a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e022      	b.n	80035e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ae:	d1ee      	bne.n	800358e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035b0:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035bc:	f7fe fe72 	bl	80022a4 <HAL_GetTick>
 80035c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035c2:	e009      	b.n	80035d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035c4:	f7fe fe6e 	bl	80022a4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035d2:	d901      	bls.n	80035d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e007      	b.n	80035e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035e4:	d1ee      	bne.n	80035c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40007000 	.word	0x40007000

080035f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003600:	2300      	movs	r3, #0
 8003602:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e29b      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8087 	beq.w	800372a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800361c:	4b96      	ldr	r3, [pc, #600]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b04      	cmp	r3, #4
 8003626:	d00c      	beq.n	8003642 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003628:	4b93      	ldr	r3, [pc, #588]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b08      	cmp	r3, #8
 8003632:	d112      	bne.n	800365a <HAL_RCC_OscConfig+0x62>
 8003634:	4b90      	ldr	r3, [pc, #576]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003640:	d10b      	bne.n	800365a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003642:	4b8d      	ldr	r3, [pc, #564]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d06c      	beq.n	8003728 <HAL_RCC_OscConfig+0x130>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d168      	bne.n	8003728 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e275      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003662:	d106      	bne.n	8003672 <HAL_RCC_OscConfig+0x7a>
 8003664:	4b84      	ldr	r3, [pc, #528]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a83      	ldr	r2, [pc, #524]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800366a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	e02e      	b.n	80036d0 <HAL_RCC_OscConfig+0xd8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10c      	bne.n	8003694 <HAL_RCC_OscConfig+0x9c>
 800367a:	4b7f      	ldr	r3, [pc, #508]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a7e      	ldr	r2, [pc, #504]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	4b7c      	ldr	r3, [pc, #496]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7b      	ldr	r2, [pc, #492]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800368c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e01d      	b.n	80036d0 <HAL_RCC_OscConfig+0xd8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0xc0>
 800369e:	4b76      	ldr	r3, [pc, #472]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a75      	ldr	r2, [pc, #468]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b73      	ldr	r3, [pc, #460]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a72      	ldr	r2, [pc, #456]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0xd8>
 80036b8:	4b6f      	ldr	r3, [pc, #444]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a6e      	ldr	r2, [pc, #440]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b6c      	ldr	r3, [pc, #432]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6b      	ldr	r2, [pc, #428]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d013      	beq.n	8003700 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fe fde4 	bl	80022a4 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e0:	f7fe fde0 	bl	80022a4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e229      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	4b61      	ldr	r3, [pc, #388]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0xe8>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe fdd0 	bl	80022a4 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003708:	f7fe fdcc 	bl	80022a4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e215      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371a:	4b57      	ldr	r3, [pc, #348]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x110>
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d069      	beq.n	800380a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003736:	4b50      	ldr	r3, [pc, #320]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00b      	beq.n	800375a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003742:	4b4d      	ldr	r3, [pc, #308]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b08      	cmp	r3, #8
 800374c:	d11c      	bne.n	8003788 <HAL_RCC_OscConfig+0x190>
 800374e:	4b4a      	ldr	r3, [pc, #296]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_RCC_OscConfig+0x17a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d001      	beq.n	8003772 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e1e9      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003772:	4b41      	ldr	r3, [pc, #260]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	493d      	ldr	r1, [pc, #244]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	e040      	b.n	800380a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d023      	beq.n	80037d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a38      	ldr	r2, [pc, #224]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe fd82 	bl	80022a4 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a4:	f7fe fd7e 	bl	80022a4 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e1c7      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b6:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c2:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4929      	ldr	r1, [pc, #164]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
 80037d6:	e018      	b.n	800380a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a26      	ldr	r2, [pc, #152]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fe fd5e 	bl	80022a4 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ec:	f7fe fd5a 	bl	80022a4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e1a3      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d038      	beq.n	8003888 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d019      	beq.n	8003852 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381e:	4b16      	ldr	r3, [pc, #88]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003822:	4a15      	ldr	r2, [pc, #84]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fe fd3b 	bl	80022a4 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003832:	f7fe fd37 	bl	80022a4 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e180      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x23a>
 8003850:	e01a      	b.n	8003888 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <HAL_RCC_OscConfig+0x280>)
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fe fd21 	bl	80022a4 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003864:	e00a      	b.n	800387c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003866:	f7fe fd1d 	bl	80022a4 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d903      	bls.n	800387c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e166      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
 8003878:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387c:	4b92      	ldr	r3, [pc, #584]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ee      	bne.n	8003866 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80a4 	beq.w	80039de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003896:	4b8c      	ldr	r3, [pc, #560]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4b89      	ldr	r3, [pc, #548]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	4a88      	ldr	r2, [pc, #544]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	6413      	str	r3, [r2, #64]	; 0x40
 80038ae:	4b86      	ldr	r3, [pc, #536]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038be:	4b83      	ldr	r3, [pc, #524]	; (8003acc <HAL_RCC_OscConfig+0x4d4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d118      	bne.n	80038fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038ca:	4b80      	ldr	r3, [pc, #512]	; (8003acc <HAL_RCC_OscConfig+0x4d4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7f      	ldr	r2, [pc, #508]	; (8003acc <HAL_RCC_OscConfig+0x4d4>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d6:	f7fe fce5 	bl	80022a4 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7fe fce1 	bl	80022a4 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b64      	cmp	r3, #100	; 0x64
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e12a      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f0:	4b76      	ldr	r3, [pc, #472]	; (8003acc <HAL_RCC_OscConfig+0x4d4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x31a>
 8003904:	4b70      	ldr	r3, [pc, #448]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a6f      	ldr	r2, [pc, #444]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	e02d      	b.n	800396e <HAL_RCC_OscConfig+0x376>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0x33c>
 800391a:	4b6b      	ldr	r3, [pc, #428]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	4a6a      	ldr	r2, [pc, #424]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6713      	str	r3, [r2, #112]	; 0x70
 8003926:	4b68      	ldr	r3, [pc, #416]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	4a67      	ldr	r2, [pc, #412]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 800392c:	f023 0304 	bic.w	r3, r3, #4
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
 8003932:	e01c      	b.n	800396e <HAL_RCC_OscConfig+0x376>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x35e>
 800393c:	4b62      	ldr	r3, [pc, #392]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	4a61      	ldr	r2, [pc, #388]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003942:	f043 0304 	orr.w	r3, r3, #4
 8003946:	6713      	str	r3, [r2, #112]	; 0x70
 8003948:	4b5f      	ldr	r3, [pc, #380]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	4a5e      	ldr	r2, [pc, #376]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6713      	str	r3, [r2, #112]	; 0x70
 8003954:	e00b      	b.n	800396e <HAL_RCC_OscConfig+0x376>
 8003956:	4b5c      	ldr	r3, [pc, #368]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a5b      	ldr	r2, [pc, #364]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
 8003962:	4b59      	ldr	r3, [pc, #356]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	4a58      	ldr	r2, [pc, #352]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d015      	beq.n	80039a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7fe fc95 	bl	80022a4 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fe fc91 	bl	80022a4 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0d8      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	4b4c      	ldr	r3, [pc, #304]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ee      	beq.n	800397e <HAL_RCC_OscConfig+0x386>
 80039a0:	e014      	b.n	80039cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a2:	f7fe fc7f 	bl	80022a4 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fe fc7b 	bl	80022a4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e0c2      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ee      	bne.n	80039aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d2:	4b3d      	ldr	r3, [pc, #244]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a3c      	ldr	r2, [pc, #240]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 80039d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80ae 	beq.w	8003b44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e8:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d06d      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d14b      	bne.n	8003a94 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fc:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a31      	ldr	r2, [pc, #196]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fe fc4c 	bl	80022a4 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fe fc48 	bl	80022a4 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e091      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a22:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	019b      	lsls	r3, r3, #6
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	085b      	lsrs	r3, r3, #1
 8003a46:	3b01      	subs	r3, #1
 8003a48:	041b      	lsls	r3, r3, #16
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	071b      	lsls	r3, r3, #28
 8003a5a:	491b      	ldr	r1, [pc, #108]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fc1a 	bl	80022a4 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fe fc16 	bl	80022a4 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e05f      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x47c>
 8003a92:	e057      	b.n	8003b44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a0b      	ldr	r2, [pc, #44]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fc00 	bl	80022a4 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fe fbfc 	bl	80022a4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e045      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	4b03      	ldr	r3, [pc, #12]	; (8003ac8 <HAL_RCC_OscConfig+0x4d0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4b0>
 8003ac6:	e03d      	b.n	8003b44 <HAL_RCC_OscConfig+0x54c>
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ad0:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <HAL_RCC_OscConfig+0x558>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d030      	beq.n	8003b40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d129      	bne.n	8003b40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d122      	bne.n	8003b40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b00:	4013      	ands	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d119      	bne.n	8003b40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d10f      	bne.n	8003b40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800

08003b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0d0      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d910      	bls.n	8003b9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 020f 	bic.w	r2, r3, #15
 8003b82:	4965      	ldr	r1, [pc, #404]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b63      	ldr	r3, [pc, #396]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0b8      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d020      	beq.n	8003bea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb4:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a58      	ldr	r2, [pc, #352]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bcc:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4a52      	ldr	r2, [pc, #328]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd8:	4b50      	ldr	r3, [pc, #320]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	494d      	ldr	r1, [pc, #308]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d040      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d115      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e07f      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c16:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e073      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c26:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e06b      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c36:	4b39      	ldr	r3, [pc, #228]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f023 0203 	bic.w	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	4936      	ldr	r1, [pc, #216]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c48:	f7fe fb2c 	bl	80022a4 <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c50:	f7fe fb28 	bl	80022a4 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e053      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c66:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 020c 	and.w	r2, r3, #12
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d1eb      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c78:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d210      	bcs.n	8003ca8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 020f 	bic.w	r2, r3, #15
 8003c8e:	4922      	ldr	r1, [pc, #136]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e032      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4916      	ldr	r1, [pc, #88]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cd2:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	490e      	ldr	r1, [pc, #56]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ce6:	f000 f821 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 8003cea:	4602      	mov	r2, r0
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	490a      	ldr	r1, [pc, #40]	; (8003d20 <HAL_RCC_ClockConfig+0x1cc>)
 8003cf8:	5ccb      	ldrb	r3, [r1, r3]
 8003cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfe:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <HAL_RCC_ClockConfig+0x1d0>)
 8003d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_RCC_ClockConfig+0x1d4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe f982 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40023c00 	.word	0x40023c00
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	0800ef04 	.word	0x0800ef04
 8003d24:	20000020 	.word	0x20000020
 8003d28:	20000024 	.word	0x20000024

08003d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d30:	b094      	sub	sp, #80	; 0x50
 8003d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	647b      	str	r3, [r7, #68]	; 0x44
 8003d38:	2300      	movs	r3, #0
 8003d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d44:	4b79      	ldr	r3, [pc, #484]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 030c 	and.w	r3, r3, #12
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d00d      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x40>
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	f200 80e1 	bhi.w	8003f18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x34>
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d003      	beq.n	8003d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d5e:	e0db      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d60:	4b73      	ldr	r3, [pc, #460]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d64:	e0db      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d66:	4b72      	ldr	r3, [pc, #456]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d6a:	e0d8      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d6c:	4b6f      	ldr	r3, [pc, #444]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d74:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d76:	4b6d      	ldr	r3, [pc, #436]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d063      	beq.n	8003e4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d82:	4b6a      	ldr	r3, [pc, #424]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	099b      	lsrs	r3, r3, #6
 8003d88:	2200      	movs	r2, #0
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d94:	633b      	str	r3, [r7, #48]	; 0x30
 8003d96:	2300      	movs	r3, #0
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d9e:	4622      	mov	r2, r4
 8003da0:	462b      	mov	r3, r5
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	0159      	lsls	r1, r3, #5
 8003dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db0:	0150      	lsls	r0, r2, #5
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4621      	mov	r1, r4
 8003db8:	1a51      	subs	r1, r2, r1
 8003dba:	6139      	str	r1, [r7, #16]
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dd0:	4659      	mov	r1, fp
 8003dd2:	018b      	lsls	r3, r1, #6
 8003dd4:	4651      	mov	r1, sl
 8003dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dda:	4651      	mov	r1, sl
 8003ddc:	018a      	lsls	r2, r1, #6
 8003dde:	4651      	mov	r1, sl
 8003de0:	ebb2 0801 	subs.w	r8, r2, r1
 8003de4:	4659      	mov	r1, fp
 8003de6:	eb63 0901 	sbc.w	r9, r3, r1
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dfe:	4690      	mov	r8, r2
 8003e00:	4699      	mov	r9, r3
 8003e02:	4623      	mov	r3, r4
 8003e04:	eb18 0303 	adds.w	r3, r8, r3
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	462b      	mov	r3, r5
 8003e0c:	eb49 0303 	adc.w	r3, r9, r3
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e1e:	4629      	mov	r1, r5
 8003e20:	028b      	lsls	r3, r1, #10
 8003e22:	4621      	mov	r1, r4
 8003e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e28:	4621      	mov	r1, r4
 8003e2a:	028a      	lsls	r2, r1, #10
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e32:	2200      	movs	r2, #0
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e3c:	f7fc fa58 	bl	80002f0 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4613      	mov	r3, r2
 8003e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e48:	e058      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4a:	4b38      	ldr	r3, [pc, #224]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	099b      	lsrs	r3, r3, #6
 8003e50:	2200      	movs	r2, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	4611      	mov	r1, r2
 8003e56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e5a:	623b      	str	r3, [r7, #32]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e64:	4642      	mov	r2, r8
 8003e66:	464b      	mov	r3, r9
 8003e68:	f04f 0000 	mov.w	r0, #0
 8003e6c:	f04f 0100 	mov.w	r1, #0
 8003e70:	0159      	lsls	r1, r3, #5
 8003e72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e76:	0150      	lsls	r0, r2, #5
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e82:	4649      	mov	r1, r9
 8003e84:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e9c:	ebb2 040a 	subs.w	r4, r2, sl
 8003ea0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	00eb      	lsls	r3, r5, #3
 8003eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eb2:	00e2      	lsls	r2, r4, #3
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	461d      	mov	r5, r3
 8003eb8:	4643      	mov	r3, r8
 8003eba:	18e3      	adds	r3, r4, r3
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	eb45 0303 	adc.w	r3, r5, r3
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	028b      	lsls	r3, r1, #10
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003edc:	4621      	mov	r1, r4
 8003ede:	028a      	lsls	r2, r1, #10
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	61fa      	str	r2, [r7, #28]
 8003eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ef0:	f7fc f9fe 	bl	80002f0 <__aeabi_uldivmod>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4613      	mov	r3, r2
 8003efa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	0c1b      	lsrs	r3, r3, #16
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	3301      	adds	r3, #1
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003f0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f16:	e002      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3750      	adds	r7, #80	; 0x50
 8003f24:	46bd      	mov	sp, r7
 8003f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	00f42400 	.word	0x00f42400

08003f34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000020 	.word	0x20000020

08003f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f50:	f7ff fff0 	bl	8003f34 <HAL_RCC_GetHCLKFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	0a9b      	lsrs	r3, r3, #10
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4903      	ldr	r1, [pc, #12]	; (8003f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	0800ef14 	.word	0x0800ef14

08003f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f78:	f7ff ffdc 	bl	8003f34 <HAL_RCC_GetHCLKFreq>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	0b5b      	lsrs	r3, r3, #13
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	4903      	ldr	r1, [pc, #12]	; (8003f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f8a:	5ccb      	ldrb	r3, [r1, r3]
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40023800 	.word	0x40023800
 8003f98:	0800ef14 	.word	0x0800ef14

08003f9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	220f      	movs	r2, #15
 8003faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fac:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0203 	and.w	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	08db      	lsrs	r3, r3, #3
 8003fd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <HAL_RCC_GetClockConfig+0x60>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 020f 	and.w	r2, r3, #15
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	601a      	str	r2, [r3, #0]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40023c00 	.word	0x40023c00

08004000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d012      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004028:	4b69      	ldr	r3, [pc, #420]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a68      	ldr	r2, [pc, #416]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004032:	6093      	str	r3, [r2, #8]
 8004034:	4b66      	ldr	r3, [pc, #408]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403c:	4964      	ldr	r1, [pc, #400]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d017      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800405a:	4b5d      	ldr	r3, [pc, #372]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004060:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	4959      	ldr	r1, [pc, #356]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004078:	d101      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800407a:	2301      	movs	r3, #1
 800407c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d017      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004096:	4b4e      	ldr	r3, [pc, #312]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800409c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	494a      	ldr	r1, [pc, #296]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b4:	d101      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040d2:	2301      	movs	r3, #1
 80040d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 808b 	beq.w	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	4a39      	ldr	r2, [pc, #228]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ee:	6413      	str	r3, [r2, #64]	; 0x40
 80040f0:	4b37      	ldr	r3, [pc, #220]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040fc:	4b35      	ldr	r3, [pc, #212]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a34      	ldr	r2, [pc, #208]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004108:	f7fe f8cc 	bl	80022a4 <HAL_GetTick>
 800410c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004110:	f7fe f8c8 	bl	80022a4 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e38f      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004122:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800412e:	4b28      	ldr	r3, [pc, #160]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004136:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d035      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	429a      	cmp	r2, r3
 800414a:	d02e      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800414c:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004154:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004156:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004162:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a1a      	ldr	r2, [pc, #104]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800416e:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004174:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b01      	cmp	r3, #1
 800417e:	d114      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe f890 	bl	80022a4 <HAL_GetTick>
 8004184:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004186:	e00a      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fe f88c 	bl	80022a4 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e351      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419e:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0ee      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b6:	d111      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041c4:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041c6:	400b      	ands	r3, r1
 80041c8:	4901      	ldr	r1, [pc, #4]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
 80041ce:	e00b      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40007000 	.word	0x40007000
 80041d8:	0ffffcff 	.word	0x0ffffcff
 80041dc:	4bac      	ldr	r3, [pc, #688]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	4aab      	ldr	r2, [pc, #684]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041e6:	6093      	str	r3, [r2, #8]
 80041e8:	4ba9      	ldr	r3, [pc, #676]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f4:	49a6      	ldr	r1, [pc, #664]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004206:	4ba2      	ldr	r3, [pc, #648]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800420c:	4aa0      	ldr	r2, [pc, #640]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004212:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004216:	4b9e      	ldr	r3, [pc, #632]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004218:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	499b      	ldr	r1, [pc, #620]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004234:	4b96      	ldr	r3, [pc, #600]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004242:	4993      	ldr	r1, [pc, #588]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004256:	4b8e      	ldr	r3, [pc, #568]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004264:	498a      	ldr	r1, [pc, #552]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004278:	4b85      	ldr	r3, [pc, #532]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004286:	4982      	ldr	r1, [pc, #520]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800429a:	4b7d      	ldr	r3, [pc, #500]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	4979      	ldr	r1, [pc, #484]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042bc:	4b74      	ldr	r3, [pc, #464]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f023 0203 	bic.w	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	4971      	ldr	r1, [pc, #452]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042de:	4b6c      	ldr	r3, [pc, #432]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	f023 020c 	bic.w	r2, r3, #12
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ec:	4968      	ldr	r1, [pc, #416]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004300:	4b63      	ldr	r3, [pc, #396]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430e:	4960      	ldr	r1, [pc, #384]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004322:	4b5b      	ldr	r3, [pc, #364]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004330:	4957      	ldr	r1, [pc, #348]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004344:	4b52      	ldr	r3, [pc, #328]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	494f      	ldr	r1, [pc, #316]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004366:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	4946      	ldr	r1, [pc, #280]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004388:	4b41      	ldr	r3, [pc, #260]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	493e      	ldr	r1, [pc, #248]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80043aa:	4b39      	ldr	r3, [pc, #228]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b8:	4935      	ldr	r1, [pc, #212]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043cc:	4b30      	ldr	r3, [pc, #192]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043da:	492d      	ldr	r1, [pc, #180]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d011      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043ee:	4b28      	ldr	r3, [pc, #160]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043fc:	4924      	ldr	r1, [pc, #144]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800440c:	d101      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800440e:	2301      	movs	r3, #1
 8004410:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800442e:	4b18      	ldr	r3, [pc, #96]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443c:	4914      	ldr	r1, [pc, #80]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00b      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004450:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004460:	490b      	ldr	r1, [pc, #44]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00f      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004484:	4902      	ldr	r1, [pc, #8]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800448c:	e002      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044a0:	4b8a      	ldr	r3, [pc, #552]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	4986      	ldr	r1, [pc, #536]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044c4:	4b81      	ldr	r3, [pc, #516]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d4:	497d      	ldr	r1, [pc, #500]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d006      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 80d6 	beq.w	800469c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044f0:	4b76      	ldr	r3, [pc, #472]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a75      	ldr	r2, [pc, #468]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fc:	f7fd fed2 	bl	80022a4 <HAL_GetTick>
 8004500:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004504:	f7fd fece 	bl	80022a4 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e195      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004516:	4b6d      	ldr	r3, [pc, #436]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d021      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004532:	2b00      	cmp	r3, #0
 8004534:	d11d      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004536:	4b65      	ldr	r3, [pc, #404]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004544:	4b61      	ldr	r3, [pc, #388]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454a:	0e1b      	lsrs	r3, r3, #24
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	019a      	lsls	r2, r3, #6
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	431a      	orrs	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	061b      	lsls	r3, r3, #24
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	071b      	lsls	r3, r3, #28
 800456a:	4958      	ldr	r1, [pc, #352]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004586:	d00a      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004590:	2b00      	cmp	r3, #0
 8004592:	d02e      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800459c:	d129      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800459e:	4b4b      	ldr	r3, [pc, #300]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045ac:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b2:	0f1b      	lsrs	r3, r3, #28
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	019a      	lsls	r2, r3, #6
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	061b      	lsls	r3, r3, #24
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	071b      	lsls	r3, r3, #28
 80045d2:	493e      	ldr	r1, [pc, #248]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045da:	4b3c      	ldr	r3, [pc, #240]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e0:	f023 021f 	bic.w	r2, r3, #31
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	3b01      	subs	r3, #1
 80045ea:	4938      	ldr	r1, [pc, #224]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01d      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045fe:	4b33      	ldr	r3, [pc, #204]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004604:	0e1b      	lsrs	r3, r3, #24
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800460c:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800460e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004612:	0f1b      	lsrs	r3, r3, #28
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	019a      	lsls	r2, r3, #6
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	431a      	orrs	r2, r3
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	061b      	lsls	r3, r3, #24
 800462c:	431a      	orrs	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	071b      	lsls	r3, r3, #28
 8004632:	4926      	ldr	r1, [pc, #152]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d011      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	019a      	lsls	r2, r3, #6
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	061b      	lsls	r3, r3, #24
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	071b      	lsls	r3, r3, #28
 8004662:	491a      	ldr	r1, [pc, #104]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800466a:	4b18      	ldr	r3, [pc, #96]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004670:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004676:	f7fd fe15 	bl	80022a4 <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800467e:	f7fd fe11 	bl	80022a4 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b64      	cmp	r3, #100	; 0x64
 800468a:	d901      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0d8      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004690:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	f040 80ce 	bne.w	8004840 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a08      	ldr	r2, [pc, #32]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b0:	f7fd fdf8 	bl	80022a4 <HAL_GetTick>
 80046b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046b6:	e00b      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046b8:	f7fd fdf4 	bl	80022a4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d904      	bls.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e0bb      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046d0:	4b5e      	ldr	r3, [pc, #376]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046dc:	d0ec      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d02e      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d12a      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004706:	4b51      	ldr	r3, [pc, #324]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004714:	4b4d      	ldr	r3, [pc, #308]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	0f1b      	lsrs	r3, r3, #28
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	019a      	lsls	r2, r3, #6
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	041b      	lsls	r3, r3, #16
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	061b      	lsls	r3, r3, #24
 8004734:	431a      	orrs	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	071b      	lsls	r3, r3, #28
 800473a:	4944      	ldr	r1, [pc, #272]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004742:	4b42      	ldr	r3, [pc, #264]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004748:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	3b01      	subs	r3, #1
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	493d      	ldr	r1, [pc, #244]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d022      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800476c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004770:	d11d      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004772:	4b36      	ldr	r3, [pc, #216]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004778:	0e1b      	lsrs	r3, r3, #24
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004780:	4b32      	ldr	r3, [pc, #200]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	0f1b      	lsrs	r3, r3, #28
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	019a      	lsls	r2, r3, #6
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	431a      	orrs	r2, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	061b      	lsls	r3, r3, #24
 80047a0:	431a      	orrs	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	071b      	lsls	r3, r3, #28
 80047a6:	4929      	ldr	r1, [pc, #164]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d028      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	0e1b      	lsrs	r3, r3, #24
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	019a      	lsls	r2, r3, #6
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	041b      	lsls	r3, r3, #16
 80047e0:	431a      	orrs	r2, r3
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	071b      	lsls	r3, r3, #28
 80047ee:	4917      	ldr	r1, [pc, #92]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047f6:	4b15      	ldr	r3, [pc, #84]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	4911      	ldr	r1, [pc, #68]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800480c:	4b0f      	ldr	r3, [pc, #60]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0e      	ldr	r2, [pc, #56]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004818:	f7fd fd44 	bl	80022a4 <HAL_GetTick>
 800481c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004820:	f7fd fd40 	bl	80022a4 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e007      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004832:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800483a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800483e:	d1ef      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800

08004850 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e09d      	b.n	800499e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b00      	cmp	r3, #0
 8004868:	d108      	bne.n	800487c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004872:	d009      	beq.n	8004888 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	61da      	str	r2, [r3, #28]
 800487a:	e005      	b.n	8004888 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd faea 	bl	8001e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048c8:	d902      	bls.n	80048d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e002      	b.n	80048d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048de:	d007      	beq.n	80048f0 <HAL_SPI_Init+0xa0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048e8:	d002      	beq.n	80048f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004932:	ea42 0103 	orr.w	r1, r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	0c1b      	lsrs	r3, r3, #16
 800494c:	f003 0204 	and.w	r2, r3, #4
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800496c:	ea42 0103 	orr.w	r1, r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800498c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b088      	sub	sp, #32
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	4613      	mov	r3, r2
 80049b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_SPI_Transmit+0x22>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e158      	b.n	8004c7a <HAL_SPI_Transmit+0x2d4>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049d0:	f7fd fc68 	bl	80022a4 <HAL_GetTick>
 80049d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d002      	beq.n	80049ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
 80049e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049ea:	e13d      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_SPI_Transmit+0x52>
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049fc:	e134      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2203      	movs	r2, #3
 8004a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	88fa      	ldrh	r2, [r7, #6]
 8004a16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a48:	d10f      	bne.n	8004a6a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d007      	beq.n	8004a88 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a90:	d94b      	bls.n	8004b2a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_SPI_Transmit+0xfa>
 8004a9a:	8afb      	ldrh	r3, [r7, #22]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d13e      	bne.n	8004b1e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	881a      	ldrh	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	1c9a      	adds	r2, r3, #2
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ac4:	e02b      	b.n	8004b1e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d112      	bne.n	8004afa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	881a      	ldrh	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	1c9a      	adds	r2, r3, #2
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004af8:	e011      	b.n	8004b1e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004afa:	f7fd fbd3 	bl	80022a4 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d803      	bhi.n	8004b12 <HAL_SPI_Transmit+0x16c>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d102      	bne.n	8004b18 <HAL_SPI_Transmit+0x172>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b1c:	e0a4      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ce      	bne.n	8004ac6 <HAL_SPI_Transmit+0x120>
 8004b28:	e07c      	b.n	8004c24 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_SPI_Transmit+0x192>
 8004b32:	8afb      	ldrh	r3, [r7, #22]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d170      	bne.n	8004c1a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d912      	bls.n	8004b68 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	881a      	ldrh	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b02      	subs	r3, #2
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b66:	e058      	b.n	8004c1a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	7812      	ldrb	r2, [r2, #0]
 8004b74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b8e:	e044      	b.n	8004c1a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d12b      	bne.n	8004bf6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d912      	bls.n	8004bce <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	1c9a      	adds	r2, r3, #2
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b02      	subs	r3, #2
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bcc:	e025      	b.n	8004c1a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bf4:	e011      	b.n	8004c1a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf6:	f7fd fb55 	bl	80022a4 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d803      	bhi.n	8004c0e <HAL_SPI_Transmit+0x268>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d102      	bne.n	8004c14 <HAL_SPI_Transmit+0x26e>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c18:	e026      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1b5      	bne.n	8004b90 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	6839      	ldr	r1, [r7, #0]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fb69 	bl	8005300 <SPI_EndRxTxTransaction>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e000      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004c66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b08a      	sub	sp, #40	; 0x28
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
 8004c8e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c90:	2301      	movs	r3, #1
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_SPI_TransmitReceive+0x26>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e1fb      	b.n	80050a0 <HAL_SPI_TransmitReceive+0x41e>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb0:	f7fd faf8 	bl	80022a4 <HAL_GetTick>
 8004cb4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cbc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004cc4:	887b      	ldrh	r3, [r7, #2]
 8004cc6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ccc:	7efb      	ldrb	r3, [r7, #27]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d00e      	beq.n	8004cf0 <HAL_SPI_TransmitReceive+0x6e>
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd8:	d106      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x66>
 8004ce2:	7efb      	ldrb	r3, [r7, #27]
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d003      	beq.n	8004cf0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004cee:	e1cd      	b.n	800508c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_SPI_TransmitReceive+0x80>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_SPI_TransmitReceive+0x80>
 8004cfc:	887b      	ldrh	r3, [r7, #2]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d08:	e1c0      	b.n	800508c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d003      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2205      	movs	r2, #5
 8004d1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	887a      	ldrh	r2, [r7, #2]
 8004d2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	887a      	ldrh	r2, [r7, #2]
 8004d36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	887a      	ldrh	r2, [r7, #2]
 8004d4a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d60:	d802      	bhi.n	8004d68 <HAL_SPI_TransmitReceive+0xe6>
 8004d62:	8a3b      	ldrh	r3, [r7, #16]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d908      	bls.n	8004d7a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d76:	605a      	str	r2, [r3, #4]
 8004d78:	e007      	b.n	8004d8a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d88:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b40      	cmp	r3, #64	; 0x40
 8004d96:	d007      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004db0:	d97c      	bls.n	8004eac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <HAL_SPI_TransmitReceive+0x13e>
 8004dba:	8a7b      	ldrh	r3, [r7, #18]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d169      	bne.n	8004e94 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	881a      	ldrh	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	1c9a      	adds	r2, r3, #2
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de4:	e056      	b.n	8004e94 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d11b      	bne.n	8004e2c <HAL_SPI_TransmitReceive+0x1aa>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d016      	beq.n	8004e2c <HAL_SPI_TransmitReceive+0x1aa>
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d113      	bne.n	8004e2c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	881a      	ldrh	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	1c9a      	adds	r2, r3, #2
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d11c      	bne.n	8004e74 <HAL_SPI_TransmitReceive+0x1f2>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d016      	beq.n	8004e74 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	b292      	uxth	r2, r2
 8004e52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e70:	2301      	movs	r3, #1
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e74:	f7fd fa16 	bl	80022a4 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d807      	bhi.n	8004e94 <HAL_SPI_TransmitReceive+0x212>
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	d003      	beq.n	8004e94 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004e92:	e0fb      	b.n	800508c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1a3      	bne.n	8004de6 <HAL_SPI_TransmitReceive+0x164>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d19d      	bne.n	8004de6 <HAL_SPI_TransmitReceive+0x164>
 8004eaa:	e0df      	b.n	800506c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_SPI_TransmitReceive+0x23a>
 8004eb4:	8a7b      	ldrh	r3, [r7, #18]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	f040 80cb 	bne.w	8005052 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d912      	bls.n	8004eec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	881a      	ldrh	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	1c9a      	adds	r2, r3, #2
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b02      	subs	r3, #2
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eea:	e0b2      	b.n	8005052 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	330c      	adds	r3, #12
 8004ef6:	7812      	ldrb	r2, [r2, #0]
 8004ef8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f12:	e09e      	b.n	8005052 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d134      	bne.n	8004f8c <HAL_SPI_TransmitReceive+0x30a>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d02f      	beq.n	8004f8c <HAL_SPI_TransmitReceive+0x30a>
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d12c      	bne.n	8004f8c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d912      	bls.n	8004f62 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	881a      	ldrh	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	1c9a      	adds	r2, r3, #2
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b02      	subs	r3, #2
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f60:	e012      	b.n	8004f88 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d148      	bne.n	800502c <HAL_SPI_TransmitReceive+0x3aa>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d042      	beq.n	800502c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d923      	bls.n	8004ffa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	b292      	uxth	r2, r2
 8004fbe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	1c9a      	adds	r2, r3, #2
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b02      	subs	r3, #2
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d81f      	bhi.n	8005028 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	e016      	b.n	8005028 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f103 020c 	add.w	r2, r3, #12
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	7812      	ldrb	r2, [r2, #0]
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005028:	2301      	movs	r3, #1
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800502c:	f7fd f93a 	bl	80022a4 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005038:	429a      	cmp	r2, r3
 800503a:	d803      	bhi.n	8005044 <HAL_SPI_TransmitReceive+0x3c2>
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d102      	bne.n	800504a <HAL_SPI_TransmitReceive+0x3c8>
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	2b00      	cmp	r3, #0
 8005048:	d103      	bne.n	8005052 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005050:	e01c      	b.n	800508c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	f47f af5b 	bne.w	8004f14 <HAL_SPI_TransmitReceive+0x292>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	f47f af54 	bne.w	8004f14 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f945 	bl	8005300 <SPI_EndRxTxTransaction>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d006      	beq.n	800508a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	661a      	str	r2, [r3, #96]	; 0x60
 8005088:	e000      	b.n	800508c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800508a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800509c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3728      	adds	r7, #40	; 0x28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050b6:	b2db      	uxtb	r3, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050d4:	f7fd f8e6 	bl	80022a4 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	4413      	add	r3, r2
 80050e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050e4:	f7fd f8de 	bl	80022a4 <HAL_GetTick>
 80050e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050ea:	4b39      	ldr	r3, [pc, #228]	; (80051d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	015b      	lsls	r3, r3, #5
 80050f0:	0d1b      	lsrs	r3, r3, #20
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050fa:	e054      	b.n	80051a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d050      	beq.n	80051a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005104:	f7fd f8ce 	bl	80022a4 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	429a      	cmp	r2, r3
 8005112:	d902      	bls.n	800511a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d13d      	bne.n	8005196 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005128:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005132:	d111      	bne.n	8005158 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800513c:	d004      	beq.n	8005148 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005146:	d107      	bne.n	8005158 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005156:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005160:	d10f      	bne.n	8005182 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005180:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e017      	b.n	80051c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4013      	ands	r3, r2
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	bf0c      	ite	eq
 80051b6:	2301      	moveq	r3, #1
 80051b8:	2300      	movne	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d19b      	bne.n	80050fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20000020 	.word	0x20000020

080051d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80051e6:	f7fd f85d 	bl	80022a4 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	1a9b      	subs	r3, r3, r2
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	4413      	add	r3, r2
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80051f6:	f7fd f855 	bl	80022a4 <HAL_GetTick>
 80051fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	330c      	adds	r3, #12
 8005202:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005204:	4b3d      	ldr	r3, [pc, #244]	; (80052fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	00da      	lsls	r2, r3, #3
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	0d1b      	lsrs	r3, r3, #20
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800521c:	e060      	b.n	80052e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005224:	d107      	bne.n	8005236 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005234:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d050      	beq.n	80052e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800523e:	f7fd f831 	bl	80022a4 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524a:	429a      	cmp	r2, r3
 800524c:	d902      	bls.n	8005254 <SPI_WaitFifoStateUntilTimeout+0x80>
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d13d      	bne.n	80052d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005262:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800526c:	d111      	bne.n	8005292 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005276:	d004      	beq.n	8005282 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005280:	d107      	bne.n	8005292 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005290:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529a:	d10f      	bne.n	80052bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e010      	b.n	80052f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	3b01      	subs	r3, #1
 80052de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d196      	bne.n	800521e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3728      	adds	r7, #40	; 0x28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000020 	.word	0x20000020

08005300 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2200      	movs	r2, #0
 8005314:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff ff5b 	bl	80051d4 <SPI_WaitFifoStateUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005328:	f043 0220 	orr.w	r2, r3, #32
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e046      	b.n	80053c2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005334:	4b25      	ldr	r3, [pc, #148]	; (80053cc <SPI_EndRxTxTransaction+0xcc>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a25      	ldr	r2, [pc, #148]	; (80053d0 <SPI_EndRxTxTransaction+0xd0>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	0d5b      	lsrs	r3, r3, #21
 8005340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005344:	fb02 f303 	mul.w	r3, r2, r3
 8005348:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005352:	d112      	bne.n	800537a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2200      	movs	r2, #0
 800535c:	2180      	movs	r1, #128	; 0x80
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff feb0 	bl	80050c4 <SPI_WaitFlagStateUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d016      	beq.n	8005398 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536e:	f043 0220 	orr.w	r2, r3, #32
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e023      	b.n	80053c2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	3b01      	subs	r3, #1
 8005384:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005390:	2b80      	cmp	r3, #128	; 0x80
 8005392:	d0f2      	beq.n	800537a <SPI_EndRxTxTransaction+0x7a>
 8005394:	e000      	b.n	8005398 <SPI_EndRxTxTransaction+0x98>
        break;
 8005396:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2200      	movs	r2, #0
 80053a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff ff15 	bl	80051d4 <SPI_WaitFifoStateUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e000      	b.n	80053c2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000020 	.word	0x20000020
 80053d0:	165e9f81 	.word	0x165e9f81

080053d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e049      	b.n	800547a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f841 	bl	8005482 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f000 fa00 	bl	8005818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d001      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e054      	b.n	800555a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a26      	ldr	r2, [pc, #152]	; (8005568 <HAL_TIM_Base_Start_IT+0xd0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d022      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054da:	d01d      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a22      	ldr	r2, [pc, #136]	; (800556c <HAL_TIM_Base_Start_IT+0xd4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a21      	ldr	r2, [pc, #132]	; (8005570 <HAL_TIM_Base_Start_IT+0xd8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1f      	ldr	r2, [pc, #124]	; (8005574 <HAL_TIM_Base_Start_IT+0xdc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <HAL_TIM_Base_Start_IT+0xe0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1c      	ldr	r2, [pc, #112]	; (800557c <HAL_TIM_Base_Start_IT+0xe4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x80>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <HAL_TIM_Base_Start_IT+0xe8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d115      	bne.n	8005544 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_TIM_Base_Start_IT+0xec>)
 8005520:	4013      	ands	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b06      	cmp	r3, #6
 8005528:	d015      	beq.n	8005556 <HAL_TIM_Base_Start_IT+0xbe>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005530:	d011      	beq.n	8005556 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0201 	orr.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005542:	e008      	b.n	8005556 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	e000      	b.n	8005558 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40010000 	.word	0x40010000
 800556c:	40000400 	.word	0x40000400
 8005570:	40000800 	.word	0x40000800
 8005574:	40000c00 	.word	0x40000c00
 8005578:	40010400 	.word	0x40010400
 800557c:	40014000 	.word	0x40014000
 8005580:	40001800 	.word	0x40001800
 8005584:	00010007 	.word	0x00010007

08005588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d122      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d11b      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0202 	mvn.w	r2, #2
 80055b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f905 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 80055d0:	e005      	b.n	80055de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f8f7 	bl	80057c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f908 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d122      	bne.n	8005638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d11b      	bne.n	8005638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0204 	mvn.w	r2, #4
 8005608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8db 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8cd 	bl	80057c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f8de 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b08      	cmp	r3, #8
 8005644:	d122      	bne.n	800568c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b08      	cmp	r3, #8
 8005652:	d11b      	bne.n	800568c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0208 	mvn.w	r2, #8
 800565c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2204      	movs	r2, #4
 8005662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8b1 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f8a3 	bl	80057c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f8b4 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b10      	cmp	r3, #16
 8005698:	d122      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d11b      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0210 	mvn.w	r2, #16
 80056b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2208      	movs	r2, #8
 80056b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f887 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 80056cc:	e005      	b.n	80056da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f879 	bl	80057c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f88a 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d10e      	bne.n	800570c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d107      	bne.n	800570c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0201 	mvn.w	r2, #1
 8005704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fc fb1c 	bl	8001d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b80      	cmp	r3, #128	; 0x80
 8005718:	d10e      	bne.n	8005738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005724:	2b80      	cmp	r3, #128	; 0x80
 8005726:	d107      	bne.n	8005738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f91a 	bl	800596c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005746:	d10e      	bne.n	8005766 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	d107      	bne.n	8005766 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800575e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f90d 	bl	8005980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d10e      	bne.n	8005792 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	d107      	bne.n	8005792 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800578a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f838 	bl	8005802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b20      	cmp	r3, #32
 800579e:	d10e      	bne.n	80057be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d107      	bne.n	80057be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f06f 0220 	mvn.w	r2, #32
 80057b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f8cd 	bl	8005958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a40      	ldr	r2, [pc, #256]	; (800592c <TIM_Base_SetConfig+0x114>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d00f      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3d      	ldr	r2, [pc, #244]	; (8005930 <TIM_Base_SetConfig+0x118>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00b      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3c      	ldr	r2, [pc, #240]	; (8005934 <TIM_Base_SetConfig+0x11c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d007      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3b      	ldr	r2, [pc, #236]	; (8005938 <TIM_Base_SetConfig+0x120>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3a      	ldr	r2, [pc, #232]	; (800593c <TIM_Base_SetConfig+0x124>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d108      	bne.n	800586a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2f      	ldr	r2, [pc, #188]	; (800592c <TIM_Base_SetConfig+0x114>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d02b      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005878:	d027      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2c      	ldr	r2, [pc, #176]	; (8005930 <TIM_Base_SetConfig+0x118>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d023      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2b      	ldr	r2, [pc, #172]	; (8005934 <TIM_Base_SetConfig+0x11c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d01f      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2a      	ldr	r2, [pc, #168]	; (8005938 <TIM_Base_SetConfig+0x120>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01b      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a29      	ldr	r2, [pc, #164]	; (800593c <TIM_Base_SetConfig+0x124>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d017      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a28      	ldr	r2, [pc, #160]	; (8005940 <TIM_Base_SetConfig+0x128>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a27      	ldr	r2, [pc, #156]	; (8005944 <TIM_Base_SetConfig+0x12c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00f      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a26      	ldr	r2, [pc, #152]	; (8005948 <TIM_Base_SetConfig+0x130>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00b      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a25      	ldr	r2, [pc, #148]	; (800594c <TIM_Base_SetConfig+0x134>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d007      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a24      	ldr	r2, [pc, #144]	; (8005950 <TIM_Base_SetConfig+0x138>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d003      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a23      	ldr	r2, [pc, #140]	; (8005954 <TIM_Base_SetConfig+0x13c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d108      	bne.n	80058dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a0a      	ldr	r2, [pc, #40]	; (800592c <TIM_Base_SetConfig+0x114>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_Base_SetConfig+0xf8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a0c      	ldr	r2, [pc, #48]	; (800593c <TIM_Base_SetConfig+0x124>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d103      	bne.n	8005918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	615a      	str	r2, [r3, #20]
}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40010000 	.word	0x40010000
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40000c00 	.word	0x40000c00
 800593c:	40010400 	.word	0x40010400
 8005940:	40014000 	.word	0x40014000
 8005944:	40014400 	.word	0x40014400
 8005948:	40014800 	.word	0x40014800
 800594c:	40001800 	.word	0x40001800
 8005950:	40001c00 	.word	0x40001c00
 8005954:	40002000 	.word	0x40002000

08005958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e040      	b.n	8005a28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fc fac2 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2224      	movs	r2, #36	; 0x24
 80059c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fc18 	bl	8006208 <UART_SetConfig>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e022      	b.n	8005a28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fe70 	bl	80066d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fef7 	bl	8006814 <UART_CheckIdleState>
 8005a26:	4603      	mov	r3, r0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	; 0x28
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	f040 8081 	bne.w	8005b4c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_UART_Transmit+0x26>
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e079      	b.n	8005b4e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_UART_Transmit+0x38>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e072      	b.n	8005b4e <HAL_UART_Transmit+0x11e>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2221      	movs	r2, #33	; 0x21
 8005a7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a7e:	f7fc fc11 	bl	80022a4 <HAL_GetTick>
 8005a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	88fa      	ldrh	r2, [r7, #6]
 8005a88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9c:	d108      	bne.n	8005ab0 <HAL_UART_Transmit+0x80>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	e003      	b.n	8005ab8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005ac0:	e02c      	b.n	8005b1c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2180      	movs	r1, #128	; 0x80
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 feea 	bl	80068a6 <UART_WaitOnFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e038      	b.n	8005b4e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10b      	bne.n	8005afa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	3302      	adds	r3, #2
 8005af6:	61bb      	str	r3, [r7, #24]
 8005af8:	e007      	b.n	8005b0a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	781a      	ldrb	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	3301      	adds	r3, #1
 8005b08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1cc      	bne.n	8005ac2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2140      	movs	r1, #64	; 0x40
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 feb7 	bl	80068a6 <UART_WaitOnFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e005      	b.n	8005b4e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e000      	b.n	8005b4e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005b4c:	2302      	movs	r3, #2
  }
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b08a      	sub	sp, #40	; 0x28
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	4613      	mov	r3, r2
 8005b62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d13d      	bne.n	8005be8 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <HAL_UART_Receive_IT+0x22>
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e036      	b.n	8005bea <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Receive_IT+0x34>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e02f      	b.n	8005bea <HAL_UART_Receive_IT+0x94>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d018      	beq.n	8005bd8 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	623b      	str	r3, [r7, #32]
 8005bc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	69f9      	ldr	r1, [r7, #28]
 8005bca:	6a3a      	ldr	r2, [r7, #32]
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e6      	bne.n	8005ba6 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bd8:	88fb      	ldrh	r3, [r7, #6]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 ff26 	bl	8006a30 <UART_Start_Receive_IT>
 8005be4:	4603      	mov	r3, r0
 8005be6:	e000      	b.n	8005bea <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005be8:	2302      	movs	r3, #2
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3728      	adds	r7, #40	; 0x28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b0ba      	sub	sp, #232	; 0xe8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c22:	4013      	ands	r3, r2
 8005c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d115      	bne.n	8005c5c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00f      	beq.n	8005c5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 82a4 	beq.w	800619a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
      }
      return;
 8005c5a:	e29e      	b.n	800619a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8117 	beq.w	8005e94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c76:	4b85      	ldr	r3, [pc, #532]	; (8005e8c <HAL_UART_IRQHandler+0x298>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 810a 	beq.w	8005e94 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d011      	beq.n	8005cb0 <HAL_UART_IRQHandler+0xbc>
 8005c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00b      	beq.n	8005cb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca6:	f043 0201 	orr.w	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d011      	beq.n	8005ce0 <HAL_UART_IRQHandler+0xec>
 8005cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cd6:	f043 0204 	orr.w	r2, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d011      	beq.n	8005d10 <HAL_UART_IRQHandler+0x11c>
 8005cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d06:	f043 0202 	orr.w	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d017      	beq.n	8005d4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d42:	f043 0208 	orr.w	r2, r3, #8
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d012      	beq.n	8005d7e <HAL_UART_IRQHandler+0x18a>
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00c      	beq.n	8005d7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d74:	f043 0220 	orr.w	r2, r3, #32
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 820a 	beq.w	800619e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00d      	beq.n	8005db2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d005      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d04f      	beq.n	8005e76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fef4 	bl	8006bc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d141      	bne.n	8005e6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3308      	adds	r3, #8
 8005e12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1d9      	bne.n	8005dea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d013      	beq.n	8005e66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <HAL_UART_IRQHandler+0x29c>)
 8005e44:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fc fb88 	bl	8002560 <HAL_DMA_Abort_IT>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d017      	beq.n	8005e86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005e60:	4610      	mov	r0, r2
 8005e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	e00f      	b.n	8005e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f9ae 	bl	80061c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6c:	e00b      	b.n	8005e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f9aa 	bl	80061c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e74:	e007      	b.n	8005e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f9a6 	bl	80061c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005e84:	e18b      	b.n	800619e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e86:	bf00      	nop
    return;
 8005e88:	e189      	b.n	800619e <HAL_UART_IRQHandler+0x5aa>
 8005e8a:	bf00      	nop
 8005e8c:	04000120 	.word	0x04000120
 8005e90:	08006c8b 	.word	0x08006c8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	f040 8144 	bne.w	8006126 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f003 0310 	and.w	r3, r3, #16
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 813d 	beq.w	8006126 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8136 	beq.w	8006126 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2210      	movs	r2, #16
 8005ec0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	f040 80b2 	bne.w	8006036 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ede:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 815d 	beq.w	80061a2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	f080 8155 	bcs.w	80061a2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005efe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0c:	f000 8085 	beq.w	800601a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1da      	bne.n	8005f10 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3308      	adds	r3, #8
 8005f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e1      	bne.n	8005f5a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e3      	bne.n	8005f96 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fea:	f023 0310 	bic.w	r3, r3, #16
 8005fee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ffc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ffe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006002:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800600a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e4      	bne.n	8005fda <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006014:	4618      	mov	r0, r3
 8006016:	f7fc fa33 	bl	8002480 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006026:	b29b      	uxth	r3, r3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	b29b      	uxth	r3, r3
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f8d4 	bl	80061dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006034:	e0b5      	b.n	80061a2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006042:	b29b      	uxth	r3, r3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 80a7 	beq.w	80061a6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 80a2 	beq.w	80061a6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006076:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006084:	647b      	str	r3, [r7, #68]	; 0x44
 8006086:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800608a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e4      	bne.n	8006062 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3308      	adds	r3, #8
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	623b      	str	r3, [r7, #32]
   return(result);
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	f023 0301 	bic.w	r3, r3, #1
 80060ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060bc:	633a      	str	r2, [r7, #48]	; 0x30
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e3      	bne.n	8006098 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0310 	bic.w	r3, r3, #16
 80060f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006104:	61fb      	str	r3, [r7, #28]
 8006106:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	69b9      	ldr	r1, [r7, #24]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	617b      	str	r3, [r7, #20]
   return(result);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e4      	bne.n	80060e2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f85c 	bl	80061dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006124:	e03f      	b.n	80061a6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00e      	beq.n	8006150 <HAL_UART_IRQHandler+0x55c>
 8006132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006146:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f853 	bl	80061f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800614e:	e02d      	b.n	80061ac <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00e      	beq.n	800617a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006164:	2b00      	cmp	r3, #0
 8006166:	d008      	beq.n	800617a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01c      	beq.n	80061aa <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
    }
    return;
 8006178:	e017      	b.n	80061aa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d012      	beq.n	80061ac <HAL_UART_IRQHandler+0x5b8>
 8006186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00c      	beq.n	80061ac <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fd8f 	bl	8006cb6 <UART_EndTransmit_IT>
    return;
 8006198:	e008      	b.n	80061ac <HAL_UART_IRQHandler+0x5b8>
      return;
 800619a:	bf00      	nop
 800619c:	e006      	b.n	80061ac <HAL_UART_IRQHandler+0x5b8>
    return;
 800619e:	bf00      	nop
 80061a0:	e004      	b.n	80061ac <HAL_UART_IRQHandler+0x5b8>
      return;
 80061a2:	bf00      	nop
 80061a4:	e002      	b.n	80061ac <HAL_UART_IRQHandler+0x5b8>
      return;
 80061a6:	bf00      	nop
 80061a8:	e000      	b.n	80061ac <HAL_UART_IRQHandler+0x5b8>
    return;
 80061aa:	bf00      	nop
  }

}
 80061ac:	37e8      	adds	r7, #232	; 0xe8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop

080061b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4ba6      	ldr	r3, [pc, #664]	; (80064cc <UART_SetConfig+0x2c4>)
 8006234:	4013      	ands	r3, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6812      	ldr	r2, [r2, #0]
 800623a:	6979      	ldr	r1, [r7, #20]
 800623c:	430b      	orrs	r3, r1
 800623e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a94      	ldr	r2, [pc, #592]	; (80064d0 <UART_SetConfig+0x2c8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d120      	bne.n	80062c6 <UART_SetConfig+0xbe>
 8006284:	4b93      	ldr	r3, [pc, #588]	; (80064d4 <UART_SetConfig+0x2cc>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	2b03      	cmp	r3, #3
 8006290:	d816      	bhi.n	80062c0 <UART_SetConfig+0xb8>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <UART_SetConfig+0x90>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062a9 	.word	0x080062a9
 800629c:	080062b5 	.word	0x080062b5
 80062a0:	080062af 	.word	0x080062af
 80062a4:	080062bb 	.word	0x080062bb
 80062a8:	2301      	movs	r3, #1
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e150      	b.n	8006550 <UART_SetConfig+0x348>
 80062ae:	2302      	movs	r3, #2
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e14d      	b.n	8006550 <UART_SetConfig+0x348>
 80062b4:	2304      	movs	r3, #4
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	e14a      	b.n	8006550 <UART_SetConfig+0x348>
 80062ba:	2308      	movs	r3, #8
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	e147      	b.n	8006550 <UART_SetConfig+0x348>
 80062c0:	2310      	movs	r3, #16
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e144      	b.n	8006550 <UART_SetConfig+0x348>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a83      	ldr	r2, [pc, #524]	; (80064d8 <UART_SetConfig+0x2d0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d132      	bne.n	8006336 <UART_SetConfig+0x12e>
 80062d0:	4b80      	ldr	r3, [pc, #512]	; (80064d4 <UART_SetConfig+0x2cc>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d6:	f003 030c 	and.w	r3, r3, #12
 80062da:	2b0c      	cmp	r3, #12
 80062dc:	d828      	bhi.n	8006330 <UART_SetConfig+0x128>
 80062de:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <UART_SetConfig+0xdc>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	08006319 	.word	0x08006319
 80062e8:	08006331 	.word	0x08006331
 80062ec:	08006331 	.word	0x08006331
 80062f0:	08006331 	.word	0x08006331
 80062f4:	08006325 	.word	0x08006325
 80062f8:	08006331 	.word	0x08006331
 80062fc:	08006331 	.word	0x08006331
 8006300:	08006331 	.word	0x08006331
 8006304:	0800631f 	.word	0x0800631f
 8006308:	08006331 	.word	0x08006331
 800630c:	08006331 	.word	0x08006331
 8006310:	08006331 	.word	0x08006331
 8006314:	0800632b 	.word	0x0800632b
 8006318:	2300      	movs	r3, #0
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e118      	b.n	8006550 <UART_SetConfig+0x348>
 800631e:	2302      	movs	r3, #2
 8006320:	77fb      	strb	r3, [r7, #31]
 8006322:	e115      	b.n	8006550 <UART_SetConfig+0x348>
 8006324:	2304      	movs	r3, #4
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e112      	b.n	8006550 <UART_SetConfig+0x348>
 800632a:	2308      	movs	r3, #8
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e10f      	b.n	8006550 <UART_SetConfig+0x348>
 8006330:	2310      	movs	r3, #16
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e10c      	b.n	8006550 <UART_SetConfig+0x348>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a68      	ldr	r2, [pc, #416]	; (80064dc <UART_SetConfig+0x2d4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d120      	bne.n	8006382 <UART_SetConfig+0x17a>
 8006340:	4b64      	ldr	r3, [pc, #400]	; (80064d4 <UART_SetConfig+0x2cc>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800634a:	2b30      	cmp	r3, #48	; 0x30
 800634c:	d013      	beq.n	8006376 <UART_SetConfig+0x16e>
 800634e:	2b30      	cmp	r3, #48	; 0x30
 8006350:	d814      	bhi.n	800637c <UART_SetConfig+0x174>
 8006352:	2b20      	cmp	r3, #32
 8006354:	d009      	beq.n	800636a <UART_SetConfig+0x162>
 8006356:	2b20      	cmp	r3, #32
 8006358:	d810      	bhi.n	800637c <UART_SetConfig+0x174>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <UART_SetConfig+0x15c>
 800635e:	2b10      	cmp	r3, #16
 8006360:	d006      	beq.n	8006370 <UART_SetConfig+0x168>
 8006362:	e00b      	b.n	800637c <UART_SetConfig+0x174>
 8006364:	2300      	movs	r3, #0
 8006366:	77fb      	strb	r3, [r7, #31]
 8006368:	e0f2      	b.n	8006550 <UART_SetConfig+0x348>
 800636a:	2302      	movs	r3, #2
 800636c:	77fb      	strb	r3, [r7, #31]
 800636e:	e0ef      	b.n	8006550 <UART_SetConfig+0x348>
 8006370:	2304      	movs	r3, #4
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e0ec      	b.n	8006550 <UART_SetConfig+0x348>
 8006376:	2308      	movs	r3, #8
 8006378:	77fb      	strb	r3, [r7, #31]
 800637a:	e0e9      	b.n	8006550 <UART_SetConfig+0x348>
 800637c:	2310      	movs	r3, #16
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e0e6      	b.n	8006550 <UART_SetConfig+0x348>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a56      	ldr	r2, [pc, #344]	; (80064e0 <UART_SetConfig+0x2d8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d120      	bne.n	80063ce <UART_SetConfig+0x1c6>
 800638c:	4b51      	ldr	r3, [pc, #324]	; (80064d4 <UART_SetConfig+0x2cc>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006396:	2bc0      	cmp	r3, #192	; 0xc0
 8006398:	d013      	beq.n	80063c2 <UART_SetConfig+0x1ba>
 800639a:	2bc0      	cmp	r3, #192	; 0xc0
 800639c:	d814      	bhi.n	80063c8 <UART_SetConfig+0x1c0>
 800639e:	2b80      	cmp	r3, #128	; 0x80
 80063a0:	d009      	beq.n	80063b6 <UART_SetConfig+0x1ae>
 80063a2:	2b80      	cmp	r3, #128	; 0x80
 80063a4:	d810      	bhi.n	80063c8 <UART_SetConfig+0x1c0>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <UART_SetConfig+0x1a8>
 80063aa:	2b40      	cmp	r3, #64	; 0x40
 80063ac:	d006      	beq.n	80063bc <UART_SetConfig+0x1b4>
 80063ae:	e00b      	b.n	80063c8 <UART_SetConfig+0x1c0>
 80063b0:	2300      	movs	r3, #0
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e0cc      	b.n	8006550 <UART_SetConfig+0x348>
 80063b6:	2302      	movs	r3, #2
 80063b8:	77fb      	strb	r3, [r7, #31]
 80063ba:	e0c9      	b.n	8006550 <UART_SetConfig+0x348>
 80063bc:	2304      	movs	r3, #4
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e0c6      	b.n	8006550 <UART_SetConfig+0x348>
 80063c2:	2308      	movs	r3, #8
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e0c3      	b.n	8006550 <UART_SetConfig+0x348>
 80063c8:	2310      	movs	r3, #16
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e0c0      	b.n	8006550 <UART_SetConfig+0x348>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a44      	ldr	r2, [pc, #272]	; (80064e4 <UART_SetConfig+0x2dc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d125      	bne.n	8006424 <UART_SetConfig+0x21c>
 80063d8:	4b3e      	ldr	r3, [pc, #248]	; (80064d4 <UART_SetConfig+0x2cc>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063e6:	d017      	beq.n	8006418 <UART_SetConfig+0x210>
 80063e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ec:	d817      	bhi.n	800641e <UART_SetConfig+0x216>
 80063ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f2:	d00b      	beq.n	800640c <UART_SetConfig+0x204>
 80063f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f8:	d811      	bhi.n	800641e <UART_SetConfig+0x216>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <UART_SetConfig+0x1fe>
 80063fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006402:	d006      	beq.n	8006412 <UART_SetConfig+0x20a>
 8006404:	e00b      	b.n	800641e <UART_SetConfig+0x216>
 8006406:	2300      	movs	r3, #0
 8006408:	77fb      	strb	r3, [r7, #31]
 800640a:	e0a1      	b.n	8006550 <UART_SetConfig+0x348>
 800640c:	2302      	movs	r3, #2
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e09e      	b.n	8006550 <UART_SetConfig+0x348>
 8006412:	2304      	movs	r3, #4
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e09b      	b.n	8006550 <UART_SetConfig+0x348>
 8006418:	2308      	movs	r3, #8
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e098      	b.n	8006550 <UART_SetConfig+0x348>
 800641e:	2310      	movs	r3, #16
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	e095      	b.n	8006550 <UART_SetConfig+0x348>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a2f      	ldr	r2, [pc, #188]	; (80064e8 <UART_SetConfig+0x2e0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d125      	bne.n	800647a <UART_SetConfig+0x272>
 800642e:	4b29      	ldr	r3, [pc, #164]	; (80064d4 <UART_SetConfig+0x2cc>)
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800643c:	d017      	beq.n	800646e <UART_SetConfig+0x266>
 800643e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006442:	d817      	bhi.n	8006474 <UART_SetConfig+0x26c>
 8006444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006448:	d00b      	beq.n	8006462 <UART_SetConfig+0x25a>
 800644a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644e:	d811      	bhi.n	8006474 <UART_SetConfig+0x26c>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <UART_SetConfig+0x254>
 8006454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006458:	d006      	beq.n	8006468 <UART_SetConfig+0x260>
 800645a:	e00b      	b.n	8006474 <UART_SetConfig+0x26c>
 800645c:	2301      	movs	r3, #1
 800645e:	77fb      	strb	r3, [r7, #31]
 8006460:	e076      	b.n	8006550 <UART_SetConfig+0x348>
 8006462:	2302      	movs	r3, #2
 8006464:	77fb      	strb	r3, [r7, #31]
 8006466:	e073      	b.n	8006550 <UART_SetConfig+0x348>
 8006468:	2304      	movs	r3, #4
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e070      	b.n	8006550 <UART_SetConfig+0x348>
 800646e:	2308      	movs	r3, #8
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e06d      	b.n	8006550 <UART_SetConfig+0x348>
 8006474:	2310      	movs	r3, #16
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e06a      	b.n	8006550 <UART_SetConfig+0x348>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <UART_SetConfig+0x2e4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d138      	bne.n	80064f6 <UART_SetConfig+0x2ee>
 8006484:	4b13      	ldr	r3, [pc, #76]	; (80064d4 <UART_SetConfig+0x2cc>)
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800648e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006492:	d017      	beq.n	80064c4 <UART_SetConfig+0x2bc>
 8006494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006498:	d82a      	bhi.n	80064f0 <UART_SetConfig+0x2e8>
 800649a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649e:	d00b      	beq.n	80064b8 <UART_SetConfig+0x2b0>
 80064a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a4:	d824      	bhi.n	80064f0 <UART_SetConfig+0x2e8>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <UART_SetConfig+0x2aa>
 80064aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ae:	d006      	beq.n	80064be <UART_SetConfig+0x2b6>
 80064b0:	e01e      	b.n	80064f0 <UART_SetConfig+0x2e8>
 80064b2:	2300      	movs	r3, #0
 80064b4:	77fb      	strb	r3, [r7, #31]
 80064b6:	e04b      	b.n	8006550 <UART_SetConfig+0x348>
 80064b8:	2302      	movs	r3, #2
 80064ba:	77fb      	strb	r3, [r7, #31]
 80064bc:	e048      	b.n	8006550 <UART_SetConfig+0x348>
 80064be:	2304      	movs	r3, #4
 80064c0:	77fb      	strb	r3, [r7, #31]
 80064c2:	e045      	b.n	8006550 <UART_SetConfig+0x348>
 80064c4:	2308      	movs	r3, #8
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e042      	b.n	8006550 <UART_SetConfig+0x348>
 80064ca:	bf00      	nop
 80064cc:	efff69f3 	.word	0xefff69f3
 80064d0:	40011000 	.word	0x40011000
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40004400 	.word	0x40004400
 80064dc:	40004800 	.word	0x40004800
 80064e0:	40004c00 	.word	0x40004c00
 80064e4:	40005000 	.word	0x40005000
 80064e8:	40011400 	.word	0x40011400
 80064ec:	40007800 	.word	0x40007800
 80064f0:	2310      	movs	r3, #16
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e02c      	b.n	8006550 <UART_SetConfig+0x348>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a72      	ldr	r2, [pc, #456]	; (80066c4 <UART_SetConfig+0x4bc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d125      	bne.n	800654c <UART_SetConfig+0x344>
 8006500:	4b71      	ldr	r3, [pc, #452]	; (80066c8 <UART_SetConfig+0x4c0>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006506:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800650a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800650e:	d017      	beq.n	8006540 <UART_SetConfig+0x338>
 8006510:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006514:	d817      	bhi.n	8006546 <UART_SetConfig+0x33e>
 8006516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651a:	d00b      	beq.n	8006534 <UART_SetConfig+0x32c>
 800651c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006520:	d811      	bhi.n	8006546 <UART_SetConfig+0x33e>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <UART_SetConfig+0x326>
 8006526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800652a:	d006      	beq.n	800653a <UART_SetConfig+0x332>
 800652c:	e00b      	b.n	8006546 <UART_SetConfig+0x33e>
 800652e:	2300      	movs	r3, #0
 8006530:	77fb      	strb	r3, [r7, #31]
 8006532:	e00d      	b.n	8006550 <UART_SetConfig+0x348>
 8006534:	2302      	movs	r3, #2
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e00a      	b.n	8006550 <UART_SetConfig+0x348>
 800653a:	2304      	movs	r3, #4
 800653c:	77fb      	strb	r3, [r7, #31]
 800653e:	e007      	b.n	8006550 <UART_SetConfig+0x348>
 8006540:	2308      	movs	r3, #8
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e004      	b.n	8006550 <UART_SetConfig+0x348>
 8006546:	2310      	movs	r3, #16
 8006548:	77fb      	strb	r3, [r7, #31]
 800654a:	e001      	b.n	8006550 <UART_SetConfig+0x348>
 800654c:	2310      	movs	r3, #16
 800654e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006558:	d15b      	bne.n	8006612 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800655a:	7ffb      	ldrb	r3, [r7, #31]
 800655c:	2b08      	cmp	r3, #8
 800655e:	d828      	bhi.n	80065b2 <UART_SetConfig+0x3aa>
 8006560:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <UART_SetConfig+0x360>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	0800658d 	.word	0x0800658d
 800656c:	08006595 	.word	0x08006595
 8006570:	0800659d 	.word	0x0800659d
 8006574:	080065b3 	.word	0x080065b3
 8006578:	080065a3 	.word	0x080065a3
 800657c:	080065b3 	.word	0x080065b3
 8006580:	080065b3 	.word	0x080065b3
 8006584:	080065b3 	.word	0x080065b3
 8006588:	080065ab 	.word	0x080065ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800658c:	f7fd fcde 	bl	8003f4c <HAL_RCC_GetPCLK1Freq>
 8006590:	61b8      	str	r0, [r7, #24]
        break;
 8006592:	e013      	b.n	80065bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006594:	f7fd fcee 	bl	8003f74 <HAL_RCC_GetPCLK2Freq>
 8006598:	61b8      	str	r0, [r7, #24]
        break;
 800659a:	e00f      	b.n	80065bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800659c:	4b4b      	ldr	r3, [pc, #300]	; (80066cc <UART_SetConfig+0x4c4>)
 800659e:	61bb      	str	r3, [r7, #24]
        break;
 80065a0:	e00c      	b.n	80065bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065a2:	f7fd fbc3 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 80065a6:	61b8      	str	r0, [r7, #24]
        break;
 80065a8:	e008      	b.n	80065bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ae:	61bb      	str	r3, [r7, #24]
        break;
 80065b0:	e004      	b.n	80065bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	77bb      	strb	r3, [r7, #30]
        break;
 80065ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d074      	beq.n	80066ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	005a      	lsls	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	441a      	add	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	2b0f      	cmp	r3, #15
 80065dc:	d916      	bls.n	800660c <UART_SetConfig+0x404>
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e4:	d212      	bcs.n	800660c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f023 030f 	bic.w	r3, r3, #15
 80065ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	085b      	lsrs	r3, r3, #1
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	89fb      	ldrh	r3, [r7, #14]
 80065fe:	4313      	orrs	r3, r2
 8006600:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	89fa      	ldrh	r2, [r7, #14]
 8006608:	60da      	str	r2, [r3, #12]
 800660a:	e04f      	b.n	80066ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	77bb      	strb	r3, [r7, #30]
 8006610:	e04c      	b.n	80066ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006612:	7ffb      	ldrb	r3, [r7, #31]
 8006614:	2b08      	cmp	r3, #8
 8006616:	d828      	bhi.n	800666a <UART_SetConfig+0x462>
 8006618:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <UART_SetConfig+0x418>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	08006645 	.word	0x08006645
 8006624:	0800664d 	.word	0x0800664d
 8006628:	08006655 	.word	0x08006655
 800662c:	0800666b 	.word	0x0800666b
 8006630:	0800665b 	.word	0x0800665b
 8006634:	0800666b 	.word	0x0800666b
 8006638:	0800666b 	.word	0x0800666b
 800663c:	0800666b 	.word	0x0800666b
 8006640:	08006663 	.word	0x08006663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006644:	f7fd fc82 	bl	8003f4c <HAL_RCC_GetPCLK1Freq>
 8006648:	61b8      	str	r0, [r7, #24]
        break;
 800664a:	e013      	b.n	8006674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800664c:	f7fd fc92 	bl	8003f74 <HAL_RCC_GetPCLK2Freq>
 8006650:	61b8      	str	r0, [r7, #24]
        break;
 8006652:	e00f      	b.n	8006674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006654:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <UART_SetConfig+0x4c4>)
 8006656:	61bb      	str	r3, [r7, #24]
        break;
 8006658:	e00c      	b.n	8006674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800665a:	f7fd fb67 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 800665e:	61b8      	str	r0, [r7, #24]
        break;
 8006660:	e008      	b.n	8006674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006666:	61bb      	str	r3, [r7, #24]
        break;
 8006668:	e004      	b.n	8006674 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	77bb      	strb	r3, [r7, #30]
        break;
 8006672:	bf00      	nop
    }

    if (pclk != 0U)
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d018      	beq.n	80066ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	085a      	lsrs	r2, r3, #1
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	441a      	add	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	fbb2 f3f3 	udiv	r3, r2, r3
 800668c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b0f      	cmp	r3, #15
 8006692:	d909      	bls.n	80066a8 <UART_SetConfig+0x4a0>
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669a:	d205      	bcs.n	80066a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	b29a      	uxth	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	60da      	str	r2, [r3, #12]
 80066a6:	e001      	b.n	80066ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40007c00 	.word	0x40007c00
 80066c8:	40023800 	.word	0x40023800
 80066cc:	00f42400 	.word	0x00f42400

080066d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01a      	beq.n	80067e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ce:	d10a      	bne.n	80067e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	605a      	str	r2, [r3, #4]
  }
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af02      	add	r7, sp, #8
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006824:	f7fb fd3e 	bl	80022a4 <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b08      	cmp	r3, #8
 8006836:	d10e      	bne.n	8006856 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f82d 	bl	80068a6 <UART_WaitOnFlagUntilTimeout>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e023      	b.n	800689e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b04      	cmp	r3, #4
 8006862:	d10e      	bne.n	8006882 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f817 	bl	80068a6 <UART_WaitOnFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e00d      	b.n	800689e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b09c      	sub	sp, #112	; 0x70
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	603b      	str	r3, [r7, #0]
 80068b2:	4613      	mov	r3, r2
 80068b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b6:	e0a5      	b.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068be:	f000 80a1 	beq.w	8006a04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c2:	f7fb fcef 	bl	80022a4 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d302      	bcc.n	80068d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80068d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d13e      	bne.n	8006956 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068ec:	667b      	str	r3, [r7, #100]	; 0x64
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e6      	bne.n	80068d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3308      	adds	r3, #8
 8006910:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	f023 0301 	bic.w	r3, r3, #1
 8006920:	663b      	str	r3, [r7, #96]	; 0x60
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3308      	adds	r3, #8
 8006928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800692a:	64ba      	str	r2, [r7, #72]	; 0x48
 800692c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e5      	bne.n	800690a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e067      	b.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d04f      	beq.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006972:	d147      	bne.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800697c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006992:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
 800699e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e6      	bne.n	800697e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3308      	adds	r3, #8
 80069b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	613b      	str	r3, [r7, #16]
   return(result);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f023 0301 	bic.w	r3, r3, #1
 80069c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3308      	adds	r3, #8
 80069ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069d0:	623a      	str	r2, [r7, #32]
 80069d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	69f9      	ldr	r1, [r7, #28]
 80069d6:	6a3a      	ldr	r2, [r7, #32]
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e5      	bne.n	80069b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e010      	b.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69da      	ldr	r2, [r3, #28]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	bf0c      	ite	eq
 8006a14:	2301      	moveq	r3, #1
 8006a16:	2300      	movne	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	f43f af4a 	beq.w	80068b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3770      	adds	r7, #112	; 0x70
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b097      	sub	sp, #92	; 0x5c
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	88fa      	ldrh	r2, [r7, #6]
 8006a48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	88fa      	ldrh	r2, [r7, #6]
 8006a50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a62:	d10e      	bne.n	8006a82 <UART_Start_Receive_IT+0x52>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <UART_Start_Receive_IT+0x48>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a76:	e02d      	b.n	8006ad4 <UART_Start_Receive_IT+0xa4>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	22ff      	movs	r2, #255	; 0xff
 8006a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a80:	e028      	b.n	8006ad4 <UART_Start_Receive_IT+0xa4>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10d      	bne.n	8006aa6 <UART_Start_Receive_IT+0x76>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <UART_Start_Receive_IT+0x6c>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	22ff      	movs	r2, #255	; 0xff
 8006a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a9a:	e01b      	b.n	8006ad4 <UART_Start_Receive_IT+0xa4>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	227f      	movs	r2, #127	; 0x7f
 8006aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aa4:	e016      	b.n	8006ad4 <UART_Start_Receive_IT+0xa4>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aae:	d10d      	bne.n	8006acc <UART_Start_Receive_IT+0x9c>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <UART_Start_Receive_IT+0x92>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	227f      	movs	r2, #127	; 0x7f
 8006abc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ac0:	e008      	b.n	8006ad4 <UART_Start_Receive_IT+0xa4>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	223f      	movs	r2, #63	; 0x3f
 8006ac6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aca:	e003      	b.n	8006ad4 <UART_Start_Receive_IT+0xa4>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2222      	movs	r2, #34	; 0x22
 8006ae0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	f043 0301 	orr.w	r3, r3, #1
 8006af8:	657b      	str	r3, [r7, #84]	; 0x54
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b02:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e5      	bne.n	8006ae2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	d107      	bne.n	8006b30 <UART_Start_Receive_IT+0x100>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4a24      	ldr	r2, [pc, #144]	; (8006bbc <UART_Start_Receive_IT+0x18c>)
 8006b2c:	665a      	str	r2, [r3, #100]	; 0x64
 8006b2e:	e002      	b.n	8006b36 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4a23      	ldr	r2, [pc, #140]	; (8006bc0 <UART_Start_Receive_IT+0x190>)
 8006b34:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d019      	beq.n	8006b7a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
 8006b66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e6      	bne.n	8006b46 <UART_Start_Receive_IT+0x116>
 8006b78:	e018      	b.n	8006bac <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	613b      	str	r3, [r7, #16]
   return(result);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f043 0320 	orr.w	r3, r3, #32
 8006b8e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b98:	623b      	str	r3, [r7, #32]
 8006b9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	69f9      	ldr	r1, [r7, #28]
 8006b9e:	6a3a      	ldr	r2, [r7, #32]
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e6      	bne.n	8006b7a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	375c      	adds	r7, #92	; 0x5c
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	08006e67 	.word	0x08006e67
 8006bc0:	08006d0b 	.word	0x08006d0b

08006bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b095      	sub	sp, #84	; 0x54
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd4:	e853 3f00 	ldrex	r3, [r3]
 8006bd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006be0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bea:	643b      	str	r3, [r7, #64]	; 0x40
 8006bec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e6      	bne.n	8006bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3308      	adds	r3, #8
 8006c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	f023 0301 	bic.w	r3, r3, #1
 8006c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e5      	bne.n	8006bfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d118      	bne.n	8006c6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f023 0310 	bic.w	r3, r3, #16
 8006c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6979      	ldr	r1, [r7, #20]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	613b      	str	r3, [r7, #16]
   return(result);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e6      	bne.n	8006c3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006c7e:	bf00      	nop
 8006c80:	3754      	adds	r7, #84	; 0x54
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7ff fa8d 	bl	80061c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cae:	bf00      	nop
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b088      	sub	sp, #32
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd2:	61fb      	str	r3, [r7, #28]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	61bb      	str	r3, [r7, #24]
 8006cde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	6979      	ldr	r1, [r7, #20]
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e6      	bne.n	8006cbe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff fa59 	bl	80061b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d02:	bf00      	nop
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b096      	sub	sp, #88	; 0x58
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d20:	2b22      	cmp	r3, #34	; 0x22
 8006d22:	f040 8094 	bne.w	8006e4e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d30:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006d34:	b2d9      	uxtb	r1, r3
 8006d36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d40:	400a      	ands	r2, r1
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d177      	bne.n	8006e5e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d76:	e853 3f00 	ldrex	r3, [r3]
 8006d7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d82:	653b      	str	r3, [r7, #80]	; 0x50
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e6      	bne.n	8006d6e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3308      	adds	r3, #8
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	623b      	str	r3, [r7, #32]
   return(result);
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dc0:	633a      	str	r2, [r7, #48]	; 0x30
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e5      	bne.n	8006da0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d12e      	bne.n	8006e46 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0310 	bic.w	r3, r3, #16
 8006e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e0c:	61fb      	str	r3, [r7, #28]
 8006e0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	69b9      	ldr	r1, [r7, #24]
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	617b      	str	r3, [r7, #20]
   return(result);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e6      	bne.n	8006dee <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f003 0310 	and.w	r3, r3, #16
 8006e2a:	2b10      	cmp	r3, #16
 8006e2c:	d103      	bne.n	8006e36 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2210      	movs	r2, #16
 8006e34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff f9cc 	bl	80061dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e44:	e00b      	b.n	8006e5e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fa ff28 	bl	8001c9c <HAL_UART_RxCpltCallback>
}
 8006e4c:	e007      	b.n	8006e5e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	699a      	ldr	r2, [r3, #24]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f042 0208 	orr.w	r2, r2, #8
 8006e5c:	619a      	str	r2, [r3, #24]
}
 8006e5e:	bf00      	nop
 8006e60:	3758      	adds	r7, #88	; 0x58
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b096      	sub	sp, #88	; 0x58
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e7c:	2b22      	cmp	r3, #34	; 0x22
 8006e7e:	f040 8094 	bne.w	8006faa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e90:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e92:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006e96:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea6:	1c9a      	adds	r2, r3, #2
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d177      	bne.n	8006fba <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8006eea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e6      	bne.n	8006eca <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f023 0301 	bic.w	r3, r3, #1
 8006f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e5      	bne.n	8006efc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d12e      	bne.n	8006fa2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f023 0310 	bic.w	r3, r3, #16
 8006f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6979      	ldr	r1, [r7, #20]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	613b      	str	r3, [r7, #16]
   return(result);
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e6      	bne.n	8006f4a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	f003 0310 	and.w	r3, r3, #16
 8006f86:	2b10      	cmp	r3, #16
 8006f88:	d103      	bne.n	8006f92 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2210      	movs	r2, #16
 8006f90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff f91e 	bl	80061dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fa0:	e00b      	b.n	8006fba <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fa fe7a 	bl	8001c9c <HAL_UART_RxCpltCallback>
}
 8006fa8:	e007      	b.n	8006fba <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0208 	orr.w	r2, r2, #8
 8006fb8:	619a      	str	r2, [r3, #24]
}
 8006fba:	bf00      	nop
 8006fbc:	3758      	adds	r7, #88	; 0x58
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006fc8:	4904      	ldr	r1, [pc, #16]	; (8006fdc <MX_FATFS_Init+0x18>)
 8006fca:	4805      	ldr	r0, [pc, #20]	; (8006fe0 <MX_FATFS_Init+0x1c>)
 8006fcc:	f003 fb3a 	bl	800a644 <FATFS_LinkDriver>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <MX_FATFS_Init+0x20>)
 8006fd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006fd8:	bf00      	nop
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20002398 	.word	0x20002398
 8006fe0:	2000002c 	.word	0x2000002c
 8006fe4:	20002394 	.word	0x20002394

08006fe8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006fec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	4618      	mov	r0, r3
 8007006:	f006 fcf3 	bl	800d9f0 <SD_disk_initialize>
 800700a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	4618      	mov	r0, r3
 8007022:	f006 fdcf 	bl	800dbc4 <SD_disk_status>
 8007026:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007028:	4618      	mov	r0, r3
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	60b9      	str	r1, [r7, #8]
 8007038:	607a      	str	r2, [r7, #4]
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	4603      	mov	r3, r0
 800703e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007040:	7bf8      	ldrb	r0, [r7, #15]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	f006 fdd2 	bl	800dbf0 <SD_disk_read>
 800704c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
 8007062:	4603      	mov	r3, r0
 8007064:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007066:	7bf8      	ldrb	r0, [r7, #15]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	f006 fe29 	bl	800dcc4 <SD_disk_write>
 8007072:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	603a      	str	r2, [r7, #0]
 8007086:	71fb      	strb	r3, [r7, #7]
 8007088:	460b      	mov	r3, r1
 800708a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 800708c:	79b9      	ldrb	r1, [r7, #6]
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f006 fe9a 	bl	800ddcc <SD_disk_ioctl>
 8007098:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
	...

080070a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <disk_status+0x30>)
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	79fa      	ldrb	r2, [r7, #7]
 80070bc:	4905      	ldr	r1, [pc, #20]	; (80070d4 <disk_status+0x30>)
 80070be:	440a      	add	r2, r1
 80070c0:	7a12      	ldrb	r2, [r2, #8]
 80070c2:	4610      	mov	r0, r2
 80070c4:	4798      	blx	r3
 80070c6:	4603      	mov	r3, r0
 80070c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	200025c4 	.word	0x200025c4

080070d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80070e6:	79fb      	ldrb	r3, [r7, #7]
 80070e8:	4a0d      	ldr	r2, [pc, #52]	; (8007120 <disk_initialize+0x48>)
 80070ea:	5cd3      	ldrb	r3, [r2, r3]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d111      	bne.n	8007114 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	4a0b      	ldr	r2, [pc, #44]	; (8007120 <disk_initialize+0x48>)
 80070f4:	2101      	movs	r1, #1
 80070f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	4a09      	ldr	r2, [pc, #36]	; (8007120 <disk_initialize+0x48>)
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	79fa      	ldrb	r2, [r7, #7]
 8007106:	4906      	ldr	r1, [pc, #24]	; (8007120 <disk_initialize+0x48>)
 8007108:	440a      	add	r2, r1
 800710a:	7a12      	ldrb	r2, [r2, #8]
 800710c:	4610      	mov	r0, r2
 800710e:	4798      	blx	r3
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007114:	7bfb      	ldrb	r3, [r7, #15]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	200025c4 	.word	0x200025c4

08007124 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007124:	b590      	push	{r4, r7, lr}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	4603      	mov	r3, r0
 8007132:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	4a0a      	ldr	r2, [pc, #40]	; (8007160 <disk_read+0x3c>)
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	689c      	ldr	r4, [r3, #8]
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	4a07      	ldr	r2, [pc, #28]	; (8007160 <disk_read+0x3c>)
 8007144:	4413      	add	r3, r2
 8007146:	7a18      	ldrb	r0, [r3, #8]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	68b9      	ldr	r1, [r7, #8]
 800714e:	47a0      	blx	r4
 8007150:	4603      	mov	r3, r0
 8007152:	75fb      	strb	r3, [r7, #23]
  return res;
 8007154:	7dfb      	ldrb	r3, [r7, #23]
}
 8007156:	4618      	mov	r0, r3
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	bd90      	pop	{r4, r7, pc}
 800715e:	bf00      	nop
 8007160:	200025c4 	.word	0x200025c4

08007164 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007164:	b590      	push	{r4, r7, lr}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	4603      	mov	r3, r0
 8007172:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	4a0a      	ldr	r2, [pc, #40]	; (80071a0 <disk_write+0x3c>)
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	68dc      	ldr	r4, [r3, #12]
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	4a07      	ldr	r2, [pc, #28]	; (80071a0 <disk_write+0x3c>)
 8007184:	4413      	add	r3, r2
 8007186:	7a18      	ldrb	r0, [r3, #8]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	47a0      	blx	r4
 8007190:	4603      	mov	r3, r0
 8007192:	75fb      	strb	r3, [r7, #23]
  return res;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
}
 8007196:	4618      	mov	r0, r3
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	bd90      	pop	{r4, r7, pc}
 800719e:	bf00      	nop
 80071a0:	200025c4 	.word	0x200025c4

080071a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	603a      	str	r2, [r7, #0]
 80071ae:	71fb      	strb	r3, [r7, #7]
 80071b0:	460b      	mov	r3, r1
 80071b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80071b4:	79fb      	ldrb	r3, [r7, #7]
 80071b6:	4a09      	ldr	r2, [pc, #36]	; (80071dc <disk_ioctl+0x38>)
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	79fa      	ldrb	r2, [r7, #7]
 80071c2:	4906      	ldr	r1, [pc, #24]	; (80071dc <disk_ioctl+0x38>)
 80071c4:	440a      	add	r2, r1
 80071c6:	7a10      	ldrb	r0, [r2, #8]
 80071c8:	79b9      	ldrb	r1, [r7, #6]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	4798      	blx	r3
 80071ce:	4603      	mov	r3, r0
 80071d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	200025c4 	.word	0x200025c4

080071e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3301      	adds	r3, #1
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80071f0:	89fb      	ldrh	r3, [r7, #14]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	b21a      	sxth	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b21b      	sxth	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b21b      	sxth	r3, r3
 8007200:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007202:	89fb      	ldrh	r3, [r7, #14]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3303      	adds	r3, #3
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	021b      	lsls	r3, r3, #8
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	3202      	adds	r2, #2
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	3201      	adds	r2, #1
 8007236:	7812      	ldrb	r2, [r2, #0]
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	021b      	lsls	r3, r3, #8
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	7812      	ldrb	r2, [r2, #0]
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
	return rv;
 8007248:	68fb      	ldr	r3, [r7, #12]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	460b      	mov	r3, r1
 8007260:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	887a      	ldrh	r2, [r7, #2]
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]
 800726e:	887b      	ldrh	r3, [r7, #2]
 8007270:	0a1b      	lsrs	r3, r3, #8
 8007272:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	887a      	ldrh	r2, [r7, #2]
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	701a      	strb	r2, [r3, #0]
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	0a1b      	lsrs	r3, r3, #8
 80072a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	607a      	str	r2, [r7, #4]
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	b2d2      	uxtb	r2, r2
 80072b2:	701a      	strb	r2, [r3, #0]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	0a1b      	lsrs	r3, r3, #8
 80072b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	0a1b      	lsrs	r3, r3, #8
 80072ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	607a      	str	r2, [r7, #4]
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00d      	beq.n	800731a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	1c53      	adds	r3, r2, #1
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	1c59      	adds	r1, r3, #1
 8007308:	6179      	str	r1, [r7, #20]
 800730a:	7812      	ldrb	r2, [r2, #0]
 800730c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3b01      	subs	r3, #1
 8007312:	607b      	str	r3, [r7, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1f1      	bne.n	80072fe <mem_cpy+0x1a>
	}
}
 800731a:	bf00      	nop
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007326:	b480      	push	{r7}
 8007328:	b087      	sub	sp, #28
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	617a      	str	r2, [r7, #20]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	b2d2      	uxtb	r2, r2
 8007340:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3b01      	subs	r3, #1
 8007346:	607b      	str	r3, [r7, #4]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1f3      	bne.n	8007336 <mem_set+0x10>
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800735c:	b480      	push	{r7}
 800735e:	b089      	sub	sp, #36	; 0x24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	61fb      	str	r3, [r7, #28]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	61fa      	str	r2, [r7, #28]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	4619      	mov	r1, r3
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	61ba      	str	r2, [r7, #24]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	1acb      	subs	r3, r1, r3
 8007388:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3b01      	subs	r3, #1
 800738e:	607b      	str	r3, [r7, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <mem_cmp+0x40>
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0eb      	beq.n	8007374 <mem_cmp+0x18>

	return r;
 800739c:	697b      	ldr	r3, [r7, #20]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3724      	adds	r7, #36	; 0x24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80073b4:	e002      	b.n	80073bc <chk_chr+0x12>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3301      	adds	r3, #1
 80073ba:	607b      	str	r3, [r7, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <chk_chr+0x26>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d1f2      	bne.n	80073b6 <chk_chr+0xc>
	return *str;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	781b      	ldrb	r3, [r3, #0]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80073ea:	2300      	movs	r3, #0
 80073ec:	60bb      	str	r3, [r7, #8]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	60fb      	str	r3, [r7, #12]
 80073f2:	e029      	b.n	8007448 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80073f4:	4a27      	ldr	r2, [pc, #156]	; (8007494 <chk_lock+0xb4>)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	4413      	add	r3, r2
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01d      	beq.n	800743e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007402:	4a24      	ldr	r2, [pc, #144]	; (8007494 <chk_lock+0xb4>)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	4413      	add	r3, r2
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d116      	bne.n	8007442 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007414:	4a1f      	ldr	r2, [pc, #124]	; (8007494 <chk_lock+0xb4>)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	011b      	lsls	r3, r3, #4
 800741a:	4413      	add	r3, r2
 800741c:	3304      	adds	r3, #4
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007424:	429a      	cmp	r2, r3
 8007426:	d10c      	bne.n	8007442 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007428:	4a1a      	ldr	r2, [pc, #104]	; (8007494 <chk_lock+0xb4>)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	011b      	lsls	r3, r3, #4
 800742e:	4413      	add	r3, r2
 8007430:	3308      	adds	r3, #8
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007438:	429a      	cmp	r2, r3
 800743a:	d102      	bne.n	8007442 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800743c:	e007      	b.n	800744e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800743e:	2301      	movs	r3, #1
 8007440:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3301      	adds	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d9d2      	bls.n	80073f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b02      	cmp	r3, #2
 8007452:	d109      	bne.n	8007468 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <chk_lock+0x80>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b02      	cmp	r3, #2
 800745e:	d101      	bne.n	8007464 <chk_lock+0x84>
 8007460:	2300      	movs	r3, #0
 8007462:	e010      	b.n	8007486 <chk_lock+0xa6>
 8007464:	2312      	movs	r3, #18
 8007466:	e00e      	b.n	8007486 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d108      	bne.n	8007480 <chk_lock+0xa0>
 800746e:	4a09      	ldr	r2, [pc, #36]	; (8007494 <chk_lock+0xb4>)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	4413      	add	r3, r2
 8007476:	330c      	adds	r3, #12
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747e:	d101      	bne.n	8007484 <chk_lock+0xa4>
 8007480:	2310      	movs	r3, #16
 8007482:	e000      	b.n	8007486 <chk_lock+0xa6>
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	200023a4 	.word	0x200023a4

08007498 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800749e:	2300      	movs	r3, #0
 80074a0:	607b      	str	r3, [r7, #4]
 80074a2:	e002      	b.n	80074aa <enq_lock+0x12>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3301      	adds	r3, #1
 80074a8:	607b      	str	r3, [r7, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d806      	bhi.n	80074be <enq_lock+0x26>
 80074b0:	4a09      	ldr	r2, [pc, #36]	; (80074d8 <enq_lock+0x40>)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	4413      	add	r3, r2
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1f2      	bne.n	80074a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	bf14      	ite	ne
 80074c4:	2301      	movne	r3, #1
 80074c6:	2300      	moveq	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	200023a4 	.word	0x200023a4

080074dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	e01f      	b.n	800752c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80074ec:	4a41      	ldr	r2, [pc, #260]	; (80075f4 <inc_lock+0x118>)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	011b      	lsls	r3, r3, #4
 80074f2:	4413      	add	r3, r2
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d113      	bne.n	8007526 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80074fe:	4a3d      	ldr	r2, [pc, #244]	; (80075f4 <inc_lock+0x118>)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	4413      	add	r3, r2
 8007506:	3304      	adds	r3, #4
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800750e:	429a      	cmp	r2, r3
 8007510:	d109      	bne.n	8007526 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007512:	4a38      	ldr	r2, [pc, #224]	; (80075f4 <inc_lock+0x118>)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	4413      	add	r3, r2
 800751a:	3308      	adds	r3, #8
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007522:	429a      	cmp	r2, r3
 8007524:	d006      	beq.n	8007534 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3301      	adds	r3, #1
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d9dc      	bls.n	80074ec <inc_lock+0x10>
 8007532:	e000      	b.n	8007536 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007534:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b02      	cmp	r3, #2
 800753a:	d132      	bne.n	80075a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	e002      	b.n	8007548 <inc_lock+0x6c>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	3301      	adds	r3, #1
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d806      	bhi.n	800755c <inc_lock+0x80>
 800754e:	4a29      	ldr	r2, [pc, #164]	; (80075f4 <inc_lock+0x118>)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	011b      	lsls	r3, r3, #4
 8007554:	4413      	add	r3, r2
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f2      	bne.n	8007542 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d101      	bne.n	8007566 <inc_lock+0x8a>
 8007562:	2300      	movs	r3, #0
 8007564:	e040      	b.n	80075e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	4922      	ldr	r1, [pc, #136]	; (80075f4 <inc_lock+0x118>)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	440b      	add	r3, r1
 8007572:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	491e      	ldr	r1, [pc, #120]	; (80075f4 <inc_lock+0x118>)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	440b      	add	r3, r1
 8007580:	3304      	adds	r3, #4
 8007582:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	695a      	ldr	r2, [r3, #20]
 8007588:	491a      	ldr	r1, [pc, #104]	; (80075f4 <inc_lock+0x118>)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	440b      	add	r3, r1
 8007590:	3308      	adds	r3, #8
 8007592:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007594:	4a17      	ldr	r2, [pc, #92]	; (80075f4 <inc_lock+0x118>)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	4413      	add	r3, r2
 800759c:	330c      	adds	r3, #12
 800759e:	2200      	movs	r2, #0
 80075a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d009      	beq.n	80075bc <inc_lock+0xe0>
 80075a8:	4a12      	ldr	r2, [pc, #72]	; (80075f4 <inc_lock+0x118>)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	4413      	add	r3, r2
 80075b0:	330c      	adds	r3, #12
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <inc_lock+0xe0>
 80075b8:	2300      	movs	r3, #0
 80075ba:	e015      	b.n	80075e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d108      	bne.n	80075d4 <inc_lock+0xf8>
 80075c2:	4a0c      	ldr	r2, [pc, #48]	; (80075f4 <inc_lock+0x118>)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	4413      	add	r3, r2
 80075ca:	330c      	adds	r3, #12
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	3301      	adds	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	e001      	b.n	80075d8 <inc_lock+0xfc>
 80075d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075d8:	4906      	ldr	r1, [pc, #24]	; (80075f4 <inc_lock+0x118>)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	440b      	add	r3, r1
 80075e0:	330c      	adds	r3, #12
 80075e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3301      	adds	r3, #1
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	200023a4 	.word	0x200023a4

080075f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3b01      	subs	r3, #1
 8007604:	607b      	str	r3, [r7, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d825      	bhi.n	8007658 <dec_lock+0x60>
		n = Files[i].ctr;
 800760c:	4a17      	ldr	r2, [pc, #92]	; (800766c <dec_lock+0x74>)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	4413      	add	r3, r2
 8007614:	330c      	adds	r3, #12
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800761a:	89fb      	ldrh	r3, [r7, #14]
 800761c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007620:	d101      	bne.n	8007626 <dec_lock+0x2e>
 8007622:	2300      	movs	r3, #0
 8007624:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007626:	89fb      	ldrh	r3, [r7, #14]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <dec_lock+0x3a>
 800762c:	89fb      	ldrh	r3, [r7, #14]
 800762e:	3b01      	subs	r3, #1
 8007630:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007632:	4a0e      	ldr	r2, [pc, #56]	; (800766c <dec_lock+0x74>)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	4413      	add	r3, r2
 800763a:	330c      	adds	r3, #12
 800763c:	89fa      	ldrh	r2, [r7, #14]
 800763e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007640:	89fb      	ldrh	r3, [r7, #14]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d105      	bne.n	8007652 <dec_lock+0x5a>
 8007646:	4a09      	ldr	r2, [pc, #36]	; (800766c <dec_lock+0x74>)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	4413      	add	r3, r2
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	737b      	strb	r3, [r7, #13]
 8007656:	e001      	b.n	800765c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007658:	2302      	movs	r3, #2
 800765a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800765c:	7b7b      	ldrb	r3, [r7, #13]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	200023a4 	.word	0x200023a4

08007670 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	e010      	b.n	80076a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800767e:	4a0d      	ldr	r2, [pc, #52]	; (80076b4 <clear_lock+0x44>)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	4413      	add	r3, r2
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	429a      	cmp	r2, r3
 800768c:	d105      	bne.n	800769a <clear_lock+0x2a>
 800768e:	4a09      	ldr	r2, [pc, #36]	; (80076b4 <clear_lock+0x44>)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	4413      	add	r3, r2
 8007696:	2200      	movs	r2, #0
 8007698:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3301      	adds	r3, #1
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d9eb      	bls.n	800767e <clear_lock+0xe>
	}
}
 80076a6:	bf00      	nop
 80076a8:	bf00      	nop
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	200023a4 	.word	0x200023a4

080076b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	78db      	ldrb	r3, [r3, #3]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d034      	beq.n	8007736 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	7858      	ldrb	r0, [r3, #1]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80076dc:	2301      	movs	r3, #1
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	f7ff fd40 	bl	8007164 <disk_write>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	73fb      	strb	r3, [r7, #15]
 80076ee:	e022      	b.n	8007736 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	1ad2      	subs	r2, r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	429a      	cmp	r2, r3
 8007704:	d217      	bcs.n	8007736 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	789b      	ldrb	r3, [r3, #2]
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	e010      	b.n	8007730 <sync_window+0x78>
					wsect += fs->fsize;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4413      	add	r3, r2
 8007716:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	7858      	ldrb	r0, [r3, #1]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007722:	2301      	movs	r3, #1
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	f7ff fd1d 	bl	8007164 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	3b01      	subs	r3, #1
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d8eb      	bhi.n	800770e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d01b      	beq.n	8007790 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff ffad 	bl	80076b8 <sync_window>
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d113      	bne.n	8007790 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	7858      	ldrb	r0, [r3, #1]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007772:	2301      	movs	r3, #1
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	f7ff fcd5 	bl	8007124 <disk_read>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007780:	f04f 33ff 	mov.w	r3, #4294967295
 8007784:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007786:	2301      	movs	r3, #1
 8007788:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff ff87 	bl	80076b8 <sync_window>
 80077aa:	4603      	mov	r3, r0
 80077ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d159      	bne.n	8007868 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d149      	bne.n	8007850 <sync_fs+0xb4>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	791b      	ldrb	r3, [r3, #4]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d145      	bne.n	8007850 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	899b      	ldrh	r3, [r3, #12]
 80077ce:	461a      	mov	r2, r3
 80077d0:	2100      	movs	r1, #0
 80077d2:	f7ff fda8 	bl	8007326 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3338      	adds	r3, #56	; 0x38
 80077da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077de:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff fd37 	bl	8007256 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3338      	adds	r3, #56	; 0x38
 80077ec:	4921      	ldr	r1, [pc, #132]	; (8007874 <sync_fs+0xd8>)
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff fd4c 	bl	800728c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3338      	adds	r3, #56	; 0x38
 80077f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80077fc:	491e      	ldr	r1, [pc, #120]	; (8007878 <sync_fs+0xdc>)
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff fd44 	bl	800728c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3338      	adds	r3, #56	; 0x38
 8007808:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	f7ff fd3a 	bl	800728c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3338      	adds	r3, #56	; 0x38
 800781c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f7ff fd30 	bl	800728c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	7858      	ldrb	r0, [r3, #1]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007844:	2301      	movs	r3, #1
 8007846:	f7ff fc8d 	bl	8007164 <disk_write>
			fs->fsi_flag = 0;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	2200      	movs	r2, #0
 8007856:	2100      	movs	r1, #0
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff fca3 	bl	80071a4 <disk_ioctl>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <sync_fs+0xcc>
 8007864:	2301      	movs	r3, #1
 8007866:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007868:	7bfb      	ldrb	r3, [r7, #15]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	41615252 	.word	0x41615252
 8007878:	61417272 	.word	0x61417272

0800787c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	3b02      	subs	r3, #2
 800788a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	3b02      	subs	r3, #2
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d301      	bcc.n	800789c <clust2sect+0x20>
 8007898:	2300      	movs	r3, #0
 800789a:	e008      	b.n	80078ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	895b      	ldrh	r3, [r3, #10]
 80078a0:	461a      	mov	r2, r3
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	fb03 f202 	mul.w	r2, r3, r2
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	4413      	add	r3, r2
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b086      	sub	sp, #24
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d904      	bls.n	80078da <get_fat+0x20>
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d302      	bcc.n	80078e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80078da:	2301      	movs	r3, #1
 80078dc:	617b      	str	r3, [r7, #20]
 80078de:	e0bb      	b.n	8007a58 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80078e0:	f04f 33ff 	mov.w	r3, #4294967295
 80078e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	f000 8083 	beq.w	80079f6 <get_fat+0x13c>
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	f300 80a7 	bgt.w	8007a44 <get_fat+0x18a>
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d002      	beq.n	8007900 <get_fat+0x46>
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d056      	beq.n	80079ac <get_fat+0xf2>
 80078fe:	e0a1      	b.n	8007a44 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	085b      	lsrs	r3, r3, #1
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4413      	add	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	899b      	ldrh	r3, [r3, #12]
 8007916:	4619      	mov	r1, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	fbb3 f3f1 	udiv	r3, r3, r1
 800791e:	4413      	add	r3, r2
 8007920:	4619      	mov	r1, r3
 8007922:	6938      	ldr	r0, [r7, #16]
 8007924:	f7ff ff0c 	bl	8007740 <move_window>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	f040 808d 	bne.w	8007a4a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	60fa      	str	r2, [r7, #12]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	8992      	ldrh	r2, [r2, #12]
 800793a:	fbb3 f1f2 	udiv	r1, r3, r2
 800793e:	fb01 f202 	mul.w	r2, r1, r2
 8007942:	1a9b      	subs	r3, r3, r2
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	4413      	add	r3, r2
 8007948:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800794c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	899b      	ldrh	r3, [r3, #12]
 8007956:	4619      	mov	r1, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	fbb3 f3f1 	udiv	r3, r3, r1
 800795e:	4413      	add	r3, r2
 8007960:	4619      	mov	r1, r3
 8007962:	6938      	ldr	r0, [r7, #16]
 8007964:	f7ff feec 	bl	8007740 <move_window>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d16f      	bne.n	8007a4e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	899b      	ldrh	r3, [r3, #12]
 8007972:	461a      	mov	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	fbb3 f1f2 	udiv	r1, r3, r2
 800797a:	fb01 f202 	mul.w	r2, r1, r2
 800797e:	1a9b      	subs	r3, r3, r2
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	4413      	add	r3, r2
 8007984:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	461a      	mov	r2, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	4313      	orrs	r3, r2
 8007990:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <get_fat+0xe8>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	091b      	lsrs	r3, r3, #4
 80079a0:	e002      	b.n	80079a8 <get_fat+0xee>
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079a8:	617b      	str	r3, [r7, #20]
			break;
 80079aa:	e055      	b.n	8007a58 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	899b      	ldrh	r3, [r3, #12]
 80079b4:	085b      	lsrs	r3, r3, #1
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	4619      	mov	r1, r3
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80079c0:	4413      	add	r3, r2
 80079c2:	4619      	mov	r1, r3
 80079c4:	6938      	ldr	r0, [r7, #16]
 80079c6:	f7ff febb 	bl	8007740 <move_window>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d140      	bne.n	8007a52 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	8992      	ldrh	r2, [r2, #12]
 80079de:	fbb3 f0f2 	udiv	r0, r3, r2
 80079e2:	fb00 f202 	mul.w	r2, r0, r2
 80079e6:	1a9b      	subs	r3, r3, r2
 80079e8:	440b      	add	r3, r1
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff fbf8 	bl	80071e0 <ld_word>
 80079f0:	4603      	mov	r3, r0
 80079f2:	617b      	str	r3, [r7, #20]
			break;
 80079f4:	e030      	b.n	8007a58 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	899b      	ldrh	r3, [r3, #12]
 80079fe:	089b      	lsrs	r3, r3, #2
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	4619      	mov	r1, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a0a:	4413      	add	r3, r2
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6938      	ldr	r0, [r7, #16]
 8007a10:	f7ff fe96 	bl	8007740 <move_window>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d11d      	bne.n	8007a56 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	8992      	ldrh	r2, [r2, #12]
 8007a28:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a2c:	fb00 f202 	mul.w	r2, r0, r2
 8007a30:	1a9b      	subs	r3, r3, r2
 8007a32:	440b      	add	r3, r1
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff fbeb 	bl	8007210 <ld_dword>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007a40:	617b      	str	r3, [r7, #20]
			break;
 8007a42:	e009      	b.n	8007a58 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007a44:	2301      	movs	r3, #1
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	e006      	b.n	8007a58 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a4a:	bf00      	nop
 8007a4c:	e004      	b.n	8007a58 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a4e:	bf00      	nop
 8007a50:	e002      	b.n	8007a58 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a52:	bf00      	nop
 8007a54:	e000      	b.n	8007a58 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a56:	bf00      	nop
		}
	}

	return val;
 8007a58:	697b      	ldr	r3, [r7, #20]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007a62:	b590      	push	{r4, r7, lr}
 8007a64:	b089      	sub	sp, #36	; 0x24
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007a6e:	2302      	movs	r3, #2
 8007a70:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	f240 8102 	bls.w	8007c7e <put_fat+0x21c>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	f080 80fc 	bcs.w	8007c7e <put_fat+0x21c>
		switch (fs->fs_type) {
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	f000 80b6 	beq.w	8007bfc <put_fat+0x19a>
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	f300 80fd 	bgt.w	8007c90 <put_fat+0x22e>
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d003      	beq.n	8007aa2 <put_fat+0x40>
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	f000 8083 	beq.w	8007ba6 <put_fat+0x144>
 8007aa0:	e0f6      	b.n	8007c90 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	61bb      	str	r3, [r7, #24]
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	085b      	lsrs	r3, r3, #1
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	4413      	add	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	899b      	ldrh	r3, [r3, #12]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ac0:	4413      	add	r3, r2
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7ff fe3b 	bl	8007740 <move_window>
 8007aca:	4603      	mov	r3, r0
 8007acc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ace:	7ffb      	ldrb	r3, [r7, #31]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f040 80d6 	bne.w	8007c82 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	61ba      	str	r2, [r7, #24]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	8992      	ldrh	r2, [r2, #12]
 8007ae6:	fbb3 f0f2 	udiv	r0, r3, r2
 8007aea:	fb00 f202 	mul.w	r2, r0, r2
 8007aee:	1a9b      	subs	r3, r3, r2
 8007af0:	440b      	add	r3, r1
 8007af2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00d      	beq.n	8007b1a <put_fat+0xb8>
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b25b      	sxtb	r3, r3
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	b25a      	sxtb	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	b25b      	sxtb	r3, r3
 8007b12:	4313      	orrs	r3, r2
 8007b14:	b25b      	sxtb	r3, r3
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	e001      	b.n	8007b1e <put_fat+0xbc>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	899b      	ldrh	r3, [r3, #12]
 8007b30:	4619      	mov	r1, r3
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b38:	4413      	add	r3, r2
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7ff fdff 	bl	8007740 <move_window>
 8007b42:	4603      	mov	r3, r0
 8007b44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b46:	7ffb      	ldrb	r3, [r7, #31]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f040 809c 	bne.w	8007c86 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	899b      	ldrh	r3, [r3, #12]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b60:	fb00 f202 	mul.w	r2, r0, r2
 8007b64:	1a9b      	subs	r3, r3, r2
 8007b66:	440b      	add	r3, r1
 8007b68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <put_fat+0x11a>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	091b      	lsrs	r3, r3, #4
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	e00e      	b.n	8007b9a <put_fat+0x138>
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	b25b      	sxtb	r3, r3
 8007b82:	f023 030f 	bic.w	r3, r3, #15
 8007b86:	b25a      	sxtb	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	0a1b      	lsrs	r3, r3, #8
 8007b8c:	b25b      	sxtb	r3, r3
 8007b8e:	f003 030f 	and.w	r3, r3, #15
 8007b92:	b25b      	sxtb	r3, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	b25b      	sxtb	r3, r3
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	70da      	strb	r2, [r3, #3]
			break;
 8007ba4:	e074      	b.n	8007c90 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	899b      	ldrh	r3, [r3, #12]
 8007bae:	085b      	lsrs	r3, r3, #1
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bba:	4413      	add	r3, r2
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f7ff fdbe 	bl	8007740 <move_window>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007bc8:	7ffb      	ldrb	r3, [r7, #31]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d15d      	bne.n	8007c8a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	8992      	ldrh	r2, [r2, #12]
 8007bdc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007be0:	fb00 f202 	mul.w	r2, r0, r2
 8007be4:	1a9b      	subs	r3, r3, r2
 8007be6:	440b      	add	r3, r1
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	b292      	uxth	r2, r2
 8007bec:	4611      	mov	r1, r2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff fb31 	bl	8007256 <st_word>
			fs->wflag = 1;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	70da      	strb	r2, [r3, #3]
			break;
 8007bfa:	e049      	b.n	8007c90 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	899b      	ldrh	r3, [r3, #12]
 8007c04:	089b      	lsrs	r3, r3, #2
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4619      	mov	r1, r3
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c10:	4413      	add	r3, r2
 8007c12:	4619      	mov	r1, r3
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f7ff fd93 	bl	8007740 <move_window>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c1e:	7ffb      	ldrb	r3, [r7, #31]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d134      	bne.n	8007c8e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	8992      	ldrh	r2, [r2, #12]
 8007c38:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c3c:	fb00 f202 	mul.w	r2, r0, r2
 8007c40:	1a9b      	subs	r3, r3, r2
 8007c42:	440b      	add	r3, r1
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff fae3 	bl	8007210 <ld_dword>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007c50:	4323      	orrs	r3, r4
 8007c52:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	8992      	ldrh	r2, [r2, #12]
 8007c62:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c66:	fb00 f202 	mul.w	r2, r0, r2
 8007c6a:	1a9b      	subs	r3, r3, r2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7ff fb0b 	bl	800728c <st_dword>
			fs->wflag = 1;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	70da      	strb	r2, [r3, #3]
			break;
 8007c7c:	e008      	b.n	8007c90 <put_fat+0x22e>
		}
	}
 8007c7e:	bf00      	nop
 8007c80:	e006      	b.n	8007c90 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007c82:	bf00      	nop
 8007c84:	e004      	b.n	8007c90 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007c86:	bf00      	nop
 8007c88:	e002      	b.n	8007c90 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007c8a:	bf00      	nop
 8007c8c:	e000      	b.n	8007c90 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007c8e:	bf00      	nop
	return res;
 8007c90:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3724      	adds	r7, #36	; 0x24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd90      	pop	{r4, r7, pc}

08007c9a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b088      	sub	sp, #32
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d904      	bls.n	8007cc0 <remove_chain+0x26>
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d301      	bcc.n	8007cc4 <remove_chain+0x2a>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	e04b      	b.n	8007d5c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00c      	beq.n	8007ce4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007cca:	f04f 32ff 	mov.w	r2, #4294967295
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	69b8      	ldr	r0, [r7, #24]
 8007cd2:	f7ff fec6 	bl	8007a62 <put_fat>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007cda:	7ffb      	ldrb	r3, [r7, #31]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <remove_chain+0x4a>
 8007ce0:	7ffb      	ldrb	r3, [r7, #31]
 8007ce2:	e03b      	b.n	8007d5c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007ce4:	68b9      	ldr	r1, [r7, #8]
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff fde7 	bl	80078ba <get_fat>
 8007cec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d031      	beq.n	8007d58 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d101      	bne.n	8007cfe <remove_chain+0x64>
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e02e      	b.n	8007d5c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d101      	bne.n	8007d0a <remove_chain+0x70>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e028      	b.n	8007d5c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	69b8      	ldr	r0, [r7, #24]
 8007d10:	f7ff fea7 	bl	8007a62 <put_fat>
 8007d14:	4603      	mov	r3, r0
 8007d16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007d18:	7ffb      	ldrb	r3, [r7, #31]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <remove_chain+0x88>
 8007d1e:	7ffb      	ldrb	r3, [r7, #31]
 8007d20:	e01c      	b.n	8007d5c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	699a      	ldr	r2, [r3, #24]
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	3b02      	subs	r3, #2
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d20b      	bcs.n	8007d48 <remove_chain+0xae>
			fs->free_clst++;
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	791b      	ldrb	r3, [r3, #4]
 8007d3e:	f043 0301 	orr.w	r3, r3, #1
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d3c6      	bcc.n	8007ce4 <remove_chain+0x4a>
 8007d56:	e000      	b.n	8007d5a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007d58:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3720      	adds	r7, #32
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10d      	bne.n	8007d96 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d004      	beq.n	8007d90 <create_chain+0x2c>
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	69ba      	ldr	r2, [r7, #24]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d31b      	bcc.n	8007dc8 <create_chain+0x64>
 8007d90:	2301      	movs	r3, #1
 8007d92:	61bb      	str	r3, [r7, #24]
 8007d94:	e018      	b.n	8007dc8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff fd8e 	bl	80078ba <get_fat>
 8007d9e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d801      	bhi.n	8007daa <create_chain+0x46>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e070      	b.n	8007e8c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db0:	d101      	bne.n	8007db6 <create_chain+0x52>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	e06a      	b.n	8007e8c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d201      	bcs.n	8007dc4 <create_chain+0x60>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	e063      	b.n	8007e8c <create_chain+0x128>
		scl = clst;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	69fa      	ldr	r2, [r7, #28]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d307      	bcc.n	8007dec <create_chain+0x88>
				ncl = 2;
 8007ddc:	2302      	movs	r3, #2
 8007dde:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d901      	bls.n	8007dec <create_chain+0x88>
 8007de8:	2300      	movs	r3, #0
 8007dea:	e04f      	b.n	8007e8c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007dec:	69f9      	ldr	r1, [r7, #28]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff fd63 	bl	80078ba <get_fat>
 8007df4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00e      	beq.n	8007e1a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d003      	beq.n	8007e0a <create_chain+0xa6>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e08:	d101      	bne.n	8007e0e <create_chain+0xaa>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	e03e      	b.n	8007e8c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007e0e:	69fa      	ldr	r2, [r7, #28]
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d1da      	bne.n	8007dcc <create_chain+0x68>
 8007e16:	2300      	movs	r3, #0
 8007e18:	e038      	b.n	8007e8c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007e1a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e20:	69f9      	ldr	r1, [r7, #28]
 8007e22:	6938      	ldr	r0, [r7, #16]
 8007e24:	f7ff fe1d 	bl	8007a62 <put_fat>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d109      	bne.n	8007e46 <create_chain+0xe2>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d006      	beq.n	8007e46 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007e38:	69fa      	ldr	r2, [r7, #28]
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6938      	ldr	r0, [r7, #16]
 8007e3e:	f7ff fe10 	bl	8007a62 <put_fat>
 8007e42:	4603      	mov	r3, r0
 8007e44:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d116      	bne.n	8007e7a <create_chain+0x116>
		fs->last_clst = ncl;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	3b02      	subs	r3, #2
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d804      	bhi.n	8007e6a <create_chain+0x106>
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	1e5a      	subs	r2, r3, #1
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	791b      	ldrb	r3, [r3, #4]
 8007e6e:	f043 0301 	orr.w	r3, r3, #1
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	711a      	strb	r2, [r3, #4]
 8007e78:	e007      	b.n	8007e8a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007e7a:	7dfb      	ldrb	r3, [r7, #23]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d102      	bne.n	8007e86 <create_chain+0x122>
 8007e80:	f04f 33ff 	mov.w	r3, #4294967295
 8007e84:	e000      	b.n	8007e88 <create_chain+0x124>
 8007e86:	2301      	movs	r3, #1
 8007e88:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007e8a:	69fb      	ldr	r3, [r7, #28]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3720      	adds	r7, #32
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	899b      	ldrh	r3, [r3, #12]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	8952      	ldrh	r2, [r2, #10]
 8007ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	1d1a      	adds	r2, r3, #4
 8007ec6:	613a      	str	r2, [r7, #16]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <clmt_clust+0x42>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e010      	b.n	8007ef8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d307      	bcc.n	8007eee <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	617b      	str	r3, [r7, #20]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007eec:	e7e9      	b.n	8007ec2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007eee:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	4413      	add	r3, r2
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	371c      	adds	r7, #28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f1a:	d204      	bcs.n	8007f26 <dir_sdi+0x22>
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	f003 031f 	and.w	r3, r3, #31
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007f26:	2302      	movs	r3, #2
 8007f28:	e071      	b.n	800800e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d106      	bne.n	8007f4a <dir_sdi+0x46>
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d902      	bls.n	8007f4a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f48:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10c      	bne.n	8007f6a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	095b      	lsrs	r3, r3, #5
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	8912      	ldrh	r2, [r2, #8]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d301      	bcc.n	8007f60 <dir_sdi+0x5c>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e056      	b.n	800800e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	61da      	str	r2, [r3, #28]
 8007f68:	e02d      	b.n	8007fc6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	895b      	ldrh	r3, [r3, #10]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	899b      	ldrh	r3, [r3, #12]
 8007f74:	fb02 f303 	mul.w	r3, r2, r3
 8007f78:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f7a:	e019      	b.n	8007fb0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6979      	ldr	r1, [r7, #20]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7ff fc9a 	bl	80078ba <get_fat>
 8007f86:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	d101      	bne.n	8007f94 <dir_sdi+0x90>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e03c      	b.n	800800e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d904      	bls.n	8007fa4 <dir_sdi+0xa0>
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d301      	bcc.n	8007fa8 <dir_sdi+0xa4>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e032      	b.n	800800e <dir_sdi+0x10a>
			ofs -= csz;
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d2e1      	bcs.n	8007f7c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007fb8:	6979      	ldr	r1, [r7, #20]
 8007fba:	6938      	ldr	r0, [r7, #16]
 8007fbc:	f7ff fc5e 	bl	800787c <clust2sect>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <dir_sdi+0xd4>
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	e01a      	b.n	800800e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	69da      	ldr	r2, [r3, #28]
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	899b      	ldrh	r3, [r3, #12]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fe8:	441a      	add	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	899b      	ldrh	r3, [r3, #12]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008000:	fb00 f202 	mul.w	r2, r0, r2
 8008004:	1a9b      	subs	r3, r3, r2
 8008006:	18ca      	adds	r2, r1, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b086      	sub	sp, #24
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	3320      	adds	r3, #32
 800802c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <dir_next+0x28>
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800803c:	d301      	bcc.n	8008042 <dir_next+0x2c>
 800803e:	2304      	movs	r3, #4
 8008040:	e0bb      	b.n	80081ba <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	899b      	ldrh	r3, [r3, #12]
 8008046:	461a      	mov	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	fbb3 f1f2 	udiv	r1, r3, r2
 800804e:	fb01 f202 	mul.w	r2, r1, r2
 8008052:	1a9b      	subs	r3, r3, r2
 8008054:	2b00      	cmp	r3, #0
 8008056:	f040 809d 	bne.w	8008194 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10b      	bne.n	8008084 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	095b      	lsrs	r3, r3, #5
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	8912      	ldrh	r2, [r2, #8]
 8008074:	4293      	cmp	r3, r2
 8008076:	f0c0 808d 	bcc.w	8008194 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	61da      	str	r2, [r3, #28]
 8008080:	2304      	movs	r3, #4
 8008082:	e09a      	b.n	80081ba <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	899b      	ldrh	r3, [r3, #12]
 8008088:	461a      	mov	r2, r3
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	8952      	ldrh	r2, [r2, #10]
 8008094:	3a01      	subs	r2, #1
 8008096:	4013      	ands	r3, r2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d17b      	bne.n	8008194 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	4619      	mov	r1, r3
 80080a4:	4610      	mov	r0, r2
 80080a6:	f7ff fc08 	bl	80078ba <get_fat>
 80080aa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d801      	bhi.n	80080b6 <dir_next+0xa0>
 80080b2:	2302      	movs	r3, #2
 80080b4:	e081      	b.n	80081ba <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080bc:	d101      	bne.n	80080c2 <dir_next+0xac>
 80080be:	2301      	movs	r3, #1
 80080c0:	e07b      	b.n	80081ba <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d359      	bcc.n	8008180 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d104      	bne.n	80080dc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	61da      	str	r2, [r3, #28]
 80080d8:	2304      	movs	r3, #4
 80080da:	e06e      	b.n	80081ba <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	4619      	mov	r1, r3
 80080e4:	4610      	mov	r0, r2
 80080e6:	f7ff fe3d 	bl	8007d64 <create_chain>
 80080ea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <dir_next+0xe0>
 80080f2:	2307      	movs	r3, #7
 80080f4:	e061      	b.n	80081ba <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <dir_next+0xea>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e05c      	b.n	80081ba <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008106:	d101      	bne.n	800810c <dir_next+0xf6>
 8008108:	2301      	movs	r3, #1
 800810a:	e056      	b.n	80081ba <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f7ff fad3 	bl	80076b8 <sync_window>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <dir_next+0x106>
 8008118:	2301      	movs	r3, #1
 800811a:	e04e      	b.n	80081ba <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	899b      	ldrh	r3, [r3, #12]
 8008126:	461a      	mov	r2, r3
 8008128:	2100      	movs	r1, #0
 800812a:	f7ff f8fc 	bl	8007326 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800812e:	2300      	movs	r3, #0
 8008130:	613b      	str	r3, [r7, #16]
 8008132:	6979      	ldr	r1, [r7, #20]
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f7ff fba1 	bl	800787c <clust2sect>
 800813a:	4602      	mov	r2, r0
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	635a      	str	r2, [r3, #52]	; 0x34
 8008140:	e012      	b.n	8008168 <dir_next+0x152>
						fs->wflag = 1;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7ff fab5 	bl	80076b8 <sync_window>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <dir_next+0x142>
 8008154:	2301      	movs	r3, #1
 8008156:	e030      	b.n	80081ba <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	3301      	adds	r3, #1
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	635a      	str	r2, [r3, #52]	; 0x34
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	895b      	ldrh	r3, [r3, #10]
 800816c:	461a      	mov	r2, r3
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	4293      	cmp	r3, r2
 8008172:	d3e6      	bcc.n	8008142 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	1ad2      	subs	r2, r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008186:	6979      	ldr	r1, [r7, #20]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f7ff fb77 	bl	800787c <clust2sect>
 800818e:	4602      	mov	r2, r0
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	899b      	ldrh	r3, [r3, #12]
 80081a4:	461a      	mov	r2, r3
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80081ac:	fb00 f202 	mul.w	r2, r0, r2
 80081b0:	1a9b      	subs	r3, r3, r2
 80081b2:	18ca      	adds	r2, r1, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b086      	sub	sp, #24
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80081d2:	2100      	movs	r1, #0
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff fe95 	bl	8007f04 <dir_sdi>
 80081da:	4603      	mov	r3, r0
 80081dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d12b      	bne.n	800823c <dir_alloc+0x7a>
		n = 0;
 80081e4:	2300      	movs	r3, #0
 80081e6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	4619      	mov	r1, r3
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7ff faa6 	bl	8007740 <move_window>
 80081f4:	4603      	mov	r3, r0
 80081f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d11d      	bne.n	800823a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2be5      	cmp	r3, #229	; 0xe5
 8008206:	d004      	beq.n	8008212 <dir_alloc+0x50>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d107      	bne.n	8008222 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	3301      	adds	r3, #1
 8008216:	613b      	str	r3, [r7, #16]
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	429a      	cmp	r2, r3
 800821e:	d102      	bne.n	8008226 <dir_alloc+0x64>
 8008220:	e00c      	b.n	800823c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008222:	2300      	movs	r3, #0
 8008224:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008226:	2101      	movs	r1, #1
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7ff fef4 	bl	8008016 <dir_next>
 800822e:	4603      	mov	r3, r0
 8008230:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0d7      	beq.n	80081e8 <dir_alloc+0x26>
 8008238:	e000      	b.n	800823c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800823a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	2b04      	cmp	r3, #4
 8008240:	d101      	bne.n	8008246 <dir_alloc+0x84>
 8008242:	2307      	movs	r3, #7
 8008244:	75fb      	strb	r3, [r7, #23]
	return res;
 8008246:	7dfb      	ldrb	r3, [r7, #23]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	331a      	adds	r3, #26
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe ffbe 	bl	80071e0 <ld_word>
 8008264:	4603      	mov	r3, r0
 8008266:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b03      	cmp	r3, #3
 800826e:	d109      	bne.n	8008284 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	3314      	adds	r3, #20
 8008274:	4618      	mov	r0, r3
 8008276:	f7fe ffb3 	bl	80071e0 <ld_word>
 800827a:	4603      	mov	r3, r0
 800827c:	041b      	lsls	r3, r3, #16
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	4313      	orrs	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008284:	68fb      	ldr	r3, [r7, #12]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	331a      	adds	r3, #26
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	b292      	uxth	r2, r2
 80082a2:	4611      	mov	r1, r2
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fe ffd6 	bl	8007256 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d109      	bne.n	80082c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f103 0214 	add.w	r2, r3, #20
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	0c1b      	lsrs	r3, r3, #16
 80082bc:	b29b      	uxth	r3, r3
 80082be:	4619      	mov	r1, r3
 80082c0:	4610      	mov	r0, r2
 80082c2:	f7fe ffc8 	bl	8007256 <st_word>
	}
}
 80082c6:	bf00      	nop
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80082d0:	b590      	push	{r4, r7, lr}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	331a      	adds	r3, #26
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe ff7e 	bl	80071e0 <ld_word>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <cmp_lfn+0x1e>
 80082ea:	2300      	movs	r3, #0
 80082ec:	e059      	b.n	80083a2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082f6:	1e5a      	subs	r2, r3, #1
 80082f8:	4613      	mov	r3, r2
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008304:	2301      	movs	r3, #1
 8008306:	81fb      	strh	r3, [r7, #14]
 8008308:	2300      	movs	r3, #0
 800830a:	613b      	str	r3, [r7, #16]
 800830c:	e033      	b.n	8008376 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800830e:	4a27      	ldr	r2, [pc, #156]	; (80083ac <cmp_lfn+0xdc>)
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	4413      	add	r3, r2
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	4413      	add	r3, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe ff5f 	bl	80071e0 <ld_word>
 8008322:	4603      	mov	r3, r0
 8008324:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008326:	89fb      	ldrh	r3, [r7, #14]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d01a      	beq.n	8008362 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	2bfe      	cmp	r3, #254	; 0xfe
 8008330:	d812      	bhi.n	8008358 <cmp_lfn+0x88>
 8008332:	89bb      	ldrh	r3, [r7, #12]
 8008334:	4618      	mov	r0, r3
 8008336:	f002 f9d1 	bl	800a6dc <ff_wtoupper>
 800833a:	4603      	mov	r3, r0
 800833c:	461c      	mov	r4, r3
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	617a      	str	r2, [r7, #20]
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	4618      	mov	r0, r3
 800834e:	f002 f9c5 	bl	800a6dc <ff_wtoupper>
 8008352:	4603      	mov	r3, r0
 8008354:	429c      	cmp	r4, r3
 8008356:	d001      	beq.n	800835c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008358:	2300      	movs	r3, #0
 800835a:	e022      	b.n	80083a2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800835c:	89bb      	ldrh	r3, [r7, #12]
 800835e:	81fb      	strh	r3, [r7, #14]
 8008360:	e006      	b.n	8008370 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008362:	89bb      	ldrh	r3, [r7, #12]
 8008364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008368:	4293      	cmp	r3, r2
 800836a:	d001      	beq.n	8008370 <cmp_lfn+0xa0>
 800836c:	2300      	movs	r3, #0
 800836e:	e018      	b.n	80083a2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	3301      	adds	r3, #1
 8008374:	613b      	str	r3, [r7, #16]
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b0c      	cmp	r3, #12
 800837a:	d9c8      	bls.n	800830e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <cmp_lfn+0xd0>
 8008388:	89fb      	ldrh	r3, [r7, #14]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d008      	beq.n	80083a0 <cmp_lfn+0xd0>
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	4413      	add	r3, r2
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <cmp_lfn+0xd0>
 800839c:	2300      	movs	r3, #0
 800839e:	e000      	b.n	80083a2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80083a0:	2301      	movs	r3, #1
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd90      	pop	{r4, r7, pc}
 80083aa:	bf00      	nop
 80083ac:	0800ef9c 	.word	0x0800ef9c

080083b0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4611      	mov	r1, r2
 80083bc:	461a      	mov	r2, r3
 80083be:	460b      	mov	r3, r1
 80083c0:	71fb      	strb	r3, [r7, #7]
 80083c2:	4613      	mov	r3, r2
 80083c4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	330d      	adds	r3, #13
 80083ca:	79ba      	ldrb	r2, [r7, #6]
 80083cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	330b      	adds	r3, #11
 80083d2:	220f      	movs	r2, #15
 80083d4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	330c      	adds	r3, #12
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	331a      	adds	r3, #26
 80083e2:	2100      	movs	r1, #0
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fe ff36 	bl	8007256 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	1e5a      	subs	r2, r3, #1
 80083ee:	4613      	mov	r3, r2
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	82fb      	strh	r3, [r7, #22]
 80083fe:	2300      	movs	r3, #0
 8008400:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008402:	8afb      	ldrh	r3, [r7, #22]
 8008404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008408:	4293      	cmp	r3, r2
 800840a:	d007      	beq.n	800841c <put_lfn+0x6c>
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	61fa      	str	r2, [r7, #28]
 8008412:	005b      	lsls	r3, r3, #1
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800841c:	4a17      	ldr	r2, [pc, #92]	; (800847c <put_lfn+0xcc>)
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	4413      	add	r3, r2
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	461a      	mov	r2, r3
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	4413      	add	r3, r2
 800842a:	8afa      	ldrh	r2, [r7, #22]
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe ff11 	bl	8007256 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008434:	8afb      	ldrh	r3, [r7, #22]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d102      	bne.n	8008440 <put_lfn+0x90>
 800843a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800843e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	3301      	adds	r3, #1
 8008444:	61bb      	str	r3, [r7, #24]
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	2b0c      	cmp	r3, #12
 800844a:	d9da      	bls.n	8008402 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800844c:	8afb      	ldrh	r3, [r7, #22]
 800844e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008452:	4293      	cmp	r3, r2
 8008454:	d006      	beq.n	8008464 <put_lfn+0xb4>
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	4413      	add	r3, r2
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d103      	bne.n	800846c <put_lfn+0xbc>
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800846a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	79fa      	ldrb	r2, [r7, #7]
 8008470:	701a      	strb	r2, [r3, #0]
}
 8008472:	bf00      	nop
 8008474:	3720      	adds	r7, #32
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	0800ef9c 	.word	0x0800ef9c

08008480 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08c      	sub	sp, #48	; 0x30
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800848e:	220b      	movs	r2, #11
 8008490:	68b9      	ldr	r1, [r7, #8]
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f7fe ff26 	bl	80072e4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b05      	cmp	r3, #5
 800849c:	d929      	bls.n	80084f2 <gen_numname+0x72>
		sr = seq;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80084a2:	e020      	b.n	80084e6 <gen_numname+0x66>
			wc = *lfn++;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	1c9a      	adds	r2, r3, #2
 80084a8:	607a      	str	r2, [r7, #4]
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80084ae:	2300      	movs	r3, #0
 80084b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80084b2:	e015      	b.n	80084e0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	005a      	lsls	r2, r3, #1
 80084b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	4413      	add	r3, r2
 80084c0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80084c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084c4:	085b      	lsrs	r3, r3, #1
 80084c6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <gen_numname+0x5a>
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	4b30      	ldr	r3, [pc, #192]	; (8008598 <gen_numname+0x118>)
 80084d6:	4053      	eors	r3, r2
 80084d8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	3301      	adds	r3, #1
 80084de:	62bb      	str	r3, [r7, #40]	; 0x28
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	2b0f      	cmp	r3, #15
 80084e4:	d9e6      	bls.n	80084b4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1da      	bne.n	80084a4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80084f2:	2307      	movs	r3, #7
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	3330      	adds	r3, #48	; 0x30
 8008502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800850a:	2b39      	cmp	r3, #57	; 0x39
 800850c:	d904      	bls.n	8008518 <gen_numname+0x98>
 800850e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008512:	3307      	adds	r3, #7
 8008514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	1e5a      	subs	r2, r3, #1
 800851c:	62ba      	str	r2, [r7, #40]	; 0x28
 800851e:	3330      	adds	r3, #48	; 0x30
 8008520:	443b      	add	r3, r7
 8008522:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008526:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	091b      	lsrs	r3, r3, #4
 800852e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1df      	bne.n	80084f6 <gen_numname+0x76>
	ns[i] = '~';
 8008536:	f107 0214 	add.w	r2, r7, #20
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	4413      	add	r3, r2
 800853e:	227e      	movs	r2, #126	; 0x7e
 8008540:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008542:	2300      	movs	r3, #0
 8008544:	627b      	str	r3, [r7, #36]	; 0x24
 8008546:	e002      	b.n	800854e <gen_numname+0xce>
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	3301      	adds	r3, #1
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
 800854e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	429a      	cmp	r2, r3
 8008554:	d205      	bcs.n	8008562 <gen_numname+0xe2>
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	4413      	add	r3, r2
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b20      	cmp	r3, #32
 8008560:	d1f2      	bne.n	8008548 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	2b07      	cmp	r3, #7
 8008566:	d807      	bhi.n	8008578 <gen_numname+0xf8>
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	62ba      	str	r2, [r7, #40]	; 0x28
 800856e:	3330      	adds	r3, #48	; 0x30
 8008570:	443b      	add	r3, r7
 8008572:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008576:	e000      	b.n	800857a <gen_numname+0xfa>
 8008578:	2120      	movs	r1, #32
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	627a      	str	r2, [r7, #36]	; 0x24
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	4413      	add	r3, r2
 8008584:	460a      	mov	r2, r1
 8008586:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	2b07      	cmp	r3, #7
 800858c:	d9e9      	bls.n	8008562 <gen_numname+0xe2>
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	3730      	adds	r7, #48	; 0x30
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	00011021 	.word	0x00011021

0800859c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80085a8:	230b      	movs	r3, #11
 80085aa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	0852      	lsrs	r2, r2, #1
 80085b2:	01db      	lsls	r3, r3, #7
 80085b4:	4313      	orrs	r3, r2
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	1c59      	adds	r1, r3, #1
 80085bc:	6079      	str	r1, [r7, #4]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	4413      	add	r3, r2
 80085c2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	60bb      	str	r3, [r7, #8]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1ed      	bne.n	80085ac <sum_sfn+0x10>
	return sum;
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b086      	sub	sp, #24
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80085ec:	2100      	movs	r1, #0
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7ff fc88 	bl	8007f04 <dir_sdi>
 80085f4:	4603      	mov	r3, r0
 80085f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <dir_find+0x24>
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	e0a9      	b.n	8008756 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008602:	23ff      	movs	r3, #255	; 0xff
 8008604:	753b      	strb	r3, [r7, #20]
 8008606:	7d3b      	ldrb	r3, [r7, #20]
 8008608:	757b      	strb	r3, [r7, #21]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f04f 32ff 	mov.w	r2, #4294967295
 8008610:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	4619      	mov	r1, r3
 8008618:	6938      	ldr	r0, [r7, #16]
 800861a:	f7ff f891 	bl	8007740 <move_window>
 800861e:	4603      	mov	r3, r0
 8008620:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f040 8090 	bne.w	800874a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008632:	7dbb      	ldrb	r3, [r7, #22]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d102      	bne.n	800863e <dir_find+0x60>
 8008638:	2304      	movs	r3, #4
 800863a:	75fb      	strb	r3, [r7, #23]
 800863c:	e08a      	b.n	8008754 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	330b      	adds	r3, #11
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800864a:	73fb      	strb	r3, [r7, #15]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7bfa      	ldrb	r2, [r7, #15]
 8008650:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008652:	7dbb      	ldrb	r3, [r7, #22]
 8008654:	2be5      	cmp	r3, #229	; 0xe5
 8008656:	d007      	beq.n	8008668 <dir_find+0x8a>
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <dir_find+0x98>
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	2b0f      	cmp	r3, #15
 8008666:	d006      	beq.n	8008676 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008668:	23ff      	movs	r3, #255	; 0xff
 800866a:	757b      	strb	r3, [r7, #21]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f04f 32ff 	mov.w	r2, #4294967295
 8008672:	631a      	str	r2, [r3, #48]	; 0x30
 8008674:	e05e      	b.n	8008734 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	2b0f      	cmp	r3, #15
 800867a:	d136      	bne.n	80086ea <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d154      	bne.n	8008734 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800868a:	7dbb      	ldrb	r3, [r7, #22]
 800868c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00d      	beq.n	80086b0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	7b5b      	ldrb	r3, [r3, #13]
 800869a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800869c:	7dbb      	ldrb	r3, [r7, #22]
 800869e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a2:	75bb      	strb	r3, [r7, #22]
 80086a4:	7dbb      	ldrb	r3, [r7, #22]
 80086a6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	695a      	ldr	r2, [r3, #20]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80086b0:	7dba      	ldrb	r2, [r7, #22]
 80086b2:	7d7b      	ldrb	r3, [r7, #21]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d115      	bne.n	80086e4 <dir_find+0x106>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	330d      	adds	r3, #13
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	7d3a      	ldrb	r2, [r7, #20]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d10e      	bne.n	80086e4 <dir_find+0x106>
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	691a      	ldr	r2, [r3, #16]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	4619      	mov	r1, r3
 80086d0:	4610      	mov	r0, r2
 80086d2:	f7ff fdfd 	bl	80082d0 <cmp_lfn>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <dir_find+0x106>
 80086dc:	7d7b      	ldrb	r3, [r7, #21]
 80086de:	3b01      	subs	r3, #1
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	e000      	b.n	80086e6 <dir_find+0x108>
 80086e4:	23ff      	movs	r3, #255	; 0xff
 80086e6:	757b      	strb	r3, [r7, #21]
 80086e8:	e024      	b.n	8008734 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80086ea:	7d7b      	ldrb	r3, [r7, #21]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d109      	bne.n	8008704 <dir_find+0x126>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff ff51 	bl	800859c <sum_sfn>
 80086fa:	4603      	mov	r3, r0
 80086fc:	461a      	mov	r2, r3
 80086fe:	7d3b      	ldrb	r3, [r7, #20]
 8008700:	4293      	cmp	r3, r2
 8008702:	d024      	beq.n	800874e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10a      	bne.n	8008728 <dir_find+0x14a>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a18      	ldr	r0, [r3, #32]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3324      	adds	r3, #36	; 0x24
 800871a:	220b      	movs	r2, #11
 800871c:	4619      	mov	r1, r3
 800871e:	f7fe fe1d 	bl	800735c <mem_cmp>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d014      	beq.n	8008752 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008728:	23ff      	movs	r3, #255	; 0xff
 800872a:	757b      	strb	r3, [r7, #21]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f04f 32ff 	mov.w	r2, #4294967295
 8008732:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008734:	2100      	movs	r1, #0
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff fc6d 	bl	8008016 <dir_next>
 800873c:	4603      	mov	r3, r0
 800873e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f43f af65 	beq.w	8008612 <dir_find+0x34>
 8008748:	e004      	b.n	8008754 <dir_find+0x176>
		if (res != FR_OK) break;
 800874a:	bf00      	nop
 800874c:	e002      	b.n	8008754 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800874e:	bf00      	nop
 8008750:	e000      	b.n	8008754 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008752:	bf00      	nop

	return res;
 8008754:	7dfb      	ldrb	r3, [r7, #23]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08c      	sub	sp, #48	; 0x30
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008774:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <dir_register+0x20>
 800877c:	2306      	movs	r3, #6
 800877e:	e0e0      	b.n	8008942 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008780:	2300      	movs	r3, #0
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
 8008784:	e002      	b.n	800878c <dir_register+0x2c>
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	3301      	adds	r3, #1
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	4413      	add	r3, r2
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1f4      	bne.n	8008786 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80087a2:	f107 030c 	add.w	r3, r7, #12
 80087a6:	220c      	movs	r2, #12
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe fd9b 	bl	80072e4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d032      	beq.n	800881e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2240      	movs	r2, #64	; 0x40
 80087bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80087c0:	2301      	movs	r3, #1
 80087c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80087c4:	e016      	b.n	80087f4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	691a      	ldr	r2, [r3, #16]
 80087d0:	f107 010c 	add.w	r1, r7, #12
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	f7ff fe53 	bl	8008480 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff feff 	bl	80085de <dir_find>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80087e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	3301      	adds	r3, #1
 80087f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	2b63      	cmp	r3, #99	; 0x63
 80087f8:	d9e5      	bls.n	80087c6 <dir_register+0x66>
 80087fa:	e000      	b.n	80087fe <dir_register+0x9e>
			if (res != FR_OK) break;
 80087fc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80087fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008800:	2b64      	cmp	r3, #100	; 0x64
 8008802:	d101      	bne.n	8008808 <dir_register+0xa8>
 8008804:	2307      	movs	r3, #7
 8008806:	e09c      	b.n	8008942 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800880c:	2b04      	cmp	r3, #4
 800880e:	d002      	beq.n	8008816 <dir_register+0xb6>
 8008810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008814:	e095      	b.n	8008942 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008816:	7dfa      	ldrb	r2, [r7, #23]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d007      	beq.n	8008838 <dir_register+0xd8>
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	330c      	adds	r3, #12
 800882c:	4a47      	ldr	r2, [pc, #284]	; (800894c <dir_register+0x1ec>)
 800882e:	fba2 2303 	umull	r2, r3, r2, r3
 8008832:	089b      	lsrs	r3, r3, #2
 8008834:	3301      	adds	r3, #1
 8008836:	e000      	b.n	800883a <dir_register+0xda>
 8008838:	2301      	movs	r3, #1
 800883a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800883c:	6a39      	ldr	r1, [r7, #32]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff fcbf 	bl	80081c2 <dir_alloc>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800884a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800884e:	2b00      	cmp	r3, #0
 8008850:	d148      	bne.n	80088e4 <dir_register+0x184>
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	3b01      	subs	r3, #1
 8008856:	623b      	str	r3, [r7, #32]
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d042      	beq.n	80088e4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	695a      	ldr	r2, [r3, #20]
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	015b      	lsls	r3, r3, #5
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7ff fb4a 	bl	8007f04 <dir_sdi>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800887a:	2b00      	cmp	r3, #0
 800887c:	d132      	bne.n	80088e4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	3324      	adds	r3, #36	; 0x24
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff fe8a 	bl	800859c <sum_sfn>
 8008888:	4603      	mov	r3, r0
 800888a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	4619      	mov	r1, r3
 8008892:	69f8      	ldr	r0, [r7, #28]
 8008894:	f7fe ff54 	bl	8007740 <move_window>
 8008898:	4603      	mov	r3, r0
 800889a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800889e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d11d      	bne.n	80088e2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	6918      	ldr	r0, [r3, #16]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a19      	ldr	r1, [r3, #32]
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	7efb      	ldrb	r3, [r7, #27]
 80088b4:	f7ff fd7c 	bl	80083b0 <put_lfn>
				fs->wflag = 1;
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	2201      	movs	r2, #1
 80088bc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80088be:	2100      	movs	r1, #0
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff fba8 	bl	8008016 <dir_next>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80088cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d107      	bne.n	80088e4 <dir_register+0x184>
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	623b      	str	r3, [r7, #32]
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1d5      	bne.n	800888c <dir_register+0x12c>
 80088e0:	e000      	b.n	80088e4 <dir_register+0x184>
				if (res != FR_OK) break;
 80088e2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80088e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d128      	bne.n	800893e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	4619      	mov	r1, r3
 80088f2:	69f8      	ldr	r0, [r7, #28]
 80088f4:	f7fe ff24 	bl	8007740 <move_window>
 80088f8:	4603      	mov	r3, r0
 80088fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80088fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008902:	2b00      	cmp	r3, #0
 8008904:	d11b      	bne.n	800893e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	2220      	movs	r2, #32
 800890c:	2100      	movs	r1, #0
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fd09 	bl	8007326 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a18      	ldr	r0, [r3, #32]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3324      	adds	r3, #36	; 0x24
 800891c:	220b      	movs	r2, #11
 800891e:	4619      	mov	r1, r3
 8008920:	f7fe fce0 	bl	80072e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	330c      	adds	r3, #12
 8008930:	f002 0218 	and.w	r2, r2, #24
 8008934:	b2d2      	uxtb	r2, r2
 8008936:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	2201      	movs	r2, #1
 800893c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800893e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008942:	4618      	mov	r0, r3
 8008944:	3730      	adds	r7, #48	; 0x30
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	4ec4ec4f 	.word	0x4ec4ec4f

08008950 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08a      	sub	sp, #40	; 0x28
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	613b      	str	r3, [r7, #16]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	1c5a      	adds	r2, r3, #1
 8008974:	61ba      	str	r2, [r7, #24]
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	4413      	add	r3, r2
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800897e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008980:	2b1f      	cmp	r3, #31
 8008982:	d940      	bls.n	8008a06 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008986:	2b2f      	cmp	r3, #47	; 0x2f
 8008988:	d006      	beq.n	8008998 <create_name+0x48>
 800898a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800898c:	2b5c      	cmp	r3, #92	; 0x5c
 800898e:	d110      	bne.n	80089b2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008990:	e002      	b.n	8008998 <create_name+0x48>
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	3301      	adds	r3, #1
 8008996:	61bb      	str	r3, [r7, #24]
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	4413      	add	r3, r2
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	2b2f      	cmp	r3, #47	; 0x2f
 80089a2:	d0f6      	beq.n	8008992 <create_name+0x42>
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	4413      	add	r3, r2
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b5c      	cmp	r3, #92	; 0x5c
 80089ae:	d0f0      	beq.n	8008992 <create_name+0x42>
			break;
 80089b0:	e02a      	b.n	8008a08 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2bfe      	cmp	r3, #254	; 0xfe
 80089b6:	d901      	bls.n	80089bc <create_name+0x6c>
 80089b8:	2306      	movs	r3, #6
 80089ba:	e17d      	b.n	8008cb8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80089bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80089c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089c4:	2101      	movs	r1, #1
 80089c6:	4618      	mov	r0, r3
 80089c8:	f001 fe4c 	bl	800a664 <ff_convert>
 80089cc:	4603      	mov	r3, r0
 80089ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80089d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <create_name+0x8a>
 80089d6:	2306      	movs	r3, #6
 80089d8:	e16e      	b.n	8008cb8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80089da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089dc:	2b7f      	cmp	r3, #127	; 0x7f
 80089de:	d809      	bhi.n	80089f4 <create_name+0xa4>
 80089e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089e2:	4619      	mov	r1, r3
 80089e4:	488d      	ldr	r0, [pc, #564]	; (8008c1c <create_name+0x2cc>)
 80089e6:	f7fe fce0 	bl	80073aa <chk_chr>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <create_name+0xa4>
 80089f0:	2306      	movs	r3, #6
 80089f2:	e161      	b.n	8008cb8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	617a      	str	r2, [r7, #20]
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a02:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008a04:	e7b4      	b.n	8008970 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008a06:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	441a      	add	r2, r3
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a14:	2b1f      	cmp	r3, #31
 8008a16:	d801      	bhi.n	8008a1c <create_name+0xcc>
 8008a18:	2304      	movs	r3, #4
 8008a1a:	e000      	b.n	8008a1e <create_name+0xce>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008a22:	e011      	b.n	8008a48 <create_name+0xf8>
		w = lfn[di - 1];
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008a2a:	4413      	add	r3, r2
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4413      	add	r3, r2
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a38:	2b20      	cmp	r3, #32
 8008a3a:	d002      	beq.n	8008a42 <create_name+0xf2>
 8008a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a40:	d106      	bne.n	8008a50 <create_name+0x100>
		di--;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1ea      	bne.n	8008a24 <create_name+0xd4>
 8008a4e:	e000      	b.n	8008a52 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008a50:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	005b      	lsls	r3, r3, #1
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4413      	add	r3, r2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <create_name+0x118>
 8008a64:	2306      	movs	r3, #6
 8008a66:	e127      	b.n	8008cb8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3324      	adds	r3, #36	; 0x24
 8008a6c:	220b      	movs	r2, #11
 8008a6e:	2120      	movs	r1, #32
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fe fc58 	bl	8007326 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008a76:	2300      	movs	r3, #0
 8008a78:	61bb      	str	r3, [r7, #24]
 8008a7a:	e002      	b.n	8008a82 <create_name+0x132>
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	61bb      	str	r3, [r7, #24]
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	4413      	add	r3, r2
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	2b20      	cmp	r3, #32
 8008a8e:	d0f5      	beq.n	8008a7c <create_name+0x12c>
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	005b      	lsls	r3, r3, #1
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a9c:	d0ee      	beq.n	8008a7c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d009      	beq.n	8008ab8 <create_name+0x168>
 8008aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aa8:	f043 0303 	orr.w	r3, r3, #3
 8008aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008ab0:	e002      	b.n	8008ab8 <create_name+0x168>
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	617b      	str	r3, [r7, #20]
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d009      	beq.n	8008ad2 <create_name+0x182>
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008ac4:	4413      	add	r3, r2
 8008ac6:	005b      	lsls	r3, r3, #1
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	4413      	add	r3, r2
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	2b2e      	cmp	r3, #46	; 0x2e
 8008ad0:	d1ef      	bne.n	8008ab2 <create_name+0x162>

	i = b = 0; ni = 8;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008ad8:	2300      	movs	r3, #0
 8008ada:	623b      	str	r3, [r7, #32]
 8008adc:	2308      	movs	r3, #8
 8008ade:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	61ba      	str	r2, [r7, #24]
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4413      	add	r3, r2
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008af0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 8090 	beq.w	8008c18 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008af8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d006      	beq.n	8008b0c <create_name+0x1bc>
 8008afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b00:	2b2e      	cmp	r3, #46	; 0x2e
 8008b02:	d10a      	bne.n	8008b1a <create_name+0x1ca>
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d006      	beq.n	8008b1a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b10:	f043 0303 	orr.w	r3, r3, #3
 8008b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b18:	e07d      	b.n	8008c16 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008b1a:	6a3a      	ldr	r2, [r7, #32]
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d203      	bcs.n	8008b2a <create_name+0x1da>
 8008b22:	69ba      	ldr	r2, [r7, #24]
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d123      	bne.n	8008b72 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	2b0b      	cmp	r3, #11
 8008b2e:	d106      	bne.n	8008b3e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b34:	f043 0303 	orr.w	r3, r3, #3
 8008b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b3c:	e075      	b.n	8008c2a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d005      	beq.n	8008b52 <create_name+0x202>
 8008b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b4a:	f043 0303 	orr.w	r3, r3, #3
 8008b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d866      	bhi.n	8008c28 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	61bb      	str	r3, [r7, #24]
 8008b5e:	2308      	movs	r3, #8
 8008b60:	623b      	str	r3, [r7, #32]
 8008b62:	230b      	movs	r3, #11
 8008b64:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008b66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008b70:	e051      	b.n	8008c16 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008b72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b74:	2b7f      	cmp	r3, #127	; 0x7f
 8008b76:	d914      	bls.n	8008ba2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008b78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f001 fd71 	bl	800a664 <ff_convert>
 8008b82:	4603      	mov	r3, r0
 8008b84:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d004      	beq.n	8008b96 <create_name+0x246>
 8008b8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b8e:	3b80      	subs	r3, #128	; 0x80
 8008b90:	4a23      	ldr	r2, [pc, #140]	; (8008c20 <create_name+0x2d0>)
 8008b92:	5cd3      	ldrb	r3, [r2, r3]
 8008b94:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b9a:	f043 0302 	orr.w	r3, r3, #2
 8008b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d007      	beq.n	8008bb8 <create_name+0x268>
 8008ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008baa:	4619      	mov	r1, r3
 8008bac:	481d      	ldr	r0, [pc, #116]	; (8008c24 <create_name+0x2d4>)
 8008bae:	f7fe fbfc 	bl	80073aa <chk_chr>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d008      	beq.n	8008bca <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008bb8:	235f      	movs	r3, #95	; 0x5f
 8008bba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc0:	f043 0303 	orr.w	r3, r3, #3
 8008bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008bc8:	e01b      	b.n	8008c02 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bcc:	2b40      	cmp	r3, #64	; 0x40
 8008bce:	d909      	bls.n	8008be4 <create_name+0x294>
 8008bd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bd2:	2b5a      	cmp	r3, #90	; 0x5a
 8008bd4:	d806      	bhi.n	8008be4 <create_name+0x294>
					b |= 2;
 8008bd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008bda:	f043 0302 	orr.w	r3, r3, #2
 8008bde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008be2:	e00e      	b.n	8008c02 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008be4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008be6:	2b60      	cmp	r3, #96	; 0x60
 8008be8:	d90b      	bls.n	8008c02 <create_name+0x2b2>
 8008bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bec:	2b7a      	cmp	r3, #122	; 0x7a
 8008bee:	d808      	bhi.n	8008c02 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008bf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008bf4:	f043 0301 	orr.w	r3, r3, #1
 8008bf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008bfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bfe:	3b20      	subs	r3, #32
 8008c00:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	1c5a      	adds	r2, r3, #1
 8008c06:	623a      	str	r2, [r7, #32]
 8008c08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c0a:	b2d1      	uxtb	r1, r2
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	4413      	add	r3, r2
 8008c10:	460a      	mov	r2, r1
 8008c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008c16:	e763      	b.n	8008ae0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008c18:	bf00      	nop
 8008c1a:	e006      	b.n	8008c2a <create_name+0x2da>
 8008c1c:	0800ed94 	.word	0x0800ed94
 8008c20:	0800ef1c 	.word	0x0800ef1c
 8008c24:	0800eda0 	.word	0x0800eda0
			if (si > di) break;			/* No extension */
 8008c28:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c30:	2be5      	cmp	r3, #229	; 0xe5
 8008c32:	d103      	bne.n	8008c3c <create_name+0x2ec>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2205      	movs	r2, #5
 8008c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	2b08      	cmp	r3, #8
 8008c40:	d104      	bne.n	8008c4c <create_name+0x2fc>
 8008c42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c50:	f003 030c 	and.w	r3, r3, #12
 8008c54:	2b0c      	cmp	r3, #12
 8008c56:	d005      	beq.n	8008c64 <create_name+0x314>
 8008c58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c5c:	f003 0303 	and.w	r3, r3, #3
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d105      	bne.n	8008c70 <create_name+0x320>
 8008c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c68:	f043 0302 	orr.w	r3, r3, #2
 8008c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d117      	bne.n	8008cac <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008c7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c80:	f003 0303 	and.w	r3, r3, #3
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d105      	bne.n	8008c94 <create_name+0x344>
 8008c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c8c:	f043 0310 	orr.w	r3, r3, #16
 8008c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008c94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c98:	f003 030c 	and.w	r3, r3, #12
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	d105      	bne.n	8008cac <create_name+0x35c>
 8008ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ca4:	f043 0308 	orr.w	r3, r3, #8
 8008ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008cb2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008cb6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3728      	adds	r7, #40	; 0x28
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008cd4:	e002      	b.n	8008cdc <follow_path+0x1c>
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	603b      	str	r3, [r7, #0]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b2f      	cmp	r3, #47	; 0x2f
 8008ce2:	d0f8      	beq.n	8008cd6 <follow_path+0x16>
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b5c      	cmp	r3, #92	; 0x5c
 8008cea:	d0f4      	beq.n	8008cd6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	2b1f      	cmp	r3, #31
 8008cf8:	d80a      	bhi.n	8008d10 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2280      	movs	r2, #128	; 0x80
 8008cfe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008d02:	2100      	movs	r1, #0
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff f8fd 	bl	8007f04 <dir_sdi>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	75fb      	strb	r3, [r7, #23]
 8008d0e:	e048      	b.n	8008da2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008d10:	463b      	mov	r3, r7
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff fe1b 	bl	8008950 <create_name>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d139      	bne.n	8008d98 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff fc5a 	bl	80085de <dir_find>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008d34:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00a      	beq.n	8008d52 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	d12c      	bne.n	8008d9c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008d42:	7afb      	ldrb	r3, [r7, #11]
 8008d44:	f003 0304 	and.w	r3, r3, #4
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d127      	bne.n	8008d9c <follow_path+0xdc>
 8008d4c:	2305      	movs	r3, #5
 8008d4e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008d50:	e024      	b.n	8008d9c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008d52:	7afb      	ldrb	r3, [r7, #11]
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d121      	bne.n	8008da0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	799b      	ldrb	r3, [r3, #6]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008d68:	2305      	movs	r3, #5
 8008d6a:	75fb      	strb	r3, [r7, #23]
 8008d6c:	e019      	b.n	8008da2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	8992      	ldrh	r2, [r2, #12]
 8008d7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d80:	fb00 f202 	mul.w	r2, r0, r2
 8008d84:	1a9b      	subs	r3, r3, r2
 8008d86:	440b      	add	r3, r1
 8008d88:	4619      	mov	r1, r3
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f7ff fa60 	bl	8008250 <ld_clust>
 8008d90:	4602      	mov	r2, r0
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008d96:	e7bb      	b.n	8008d10 <follow_path+0x50>
			if (res != FR_OK) break;
 8008d98:	bf00      	nop
 8008d9a:	e002      	b.n	8008da2 <follow_path+0xe2>
				break;
 8008d9c:	bf00      	nop
 8008d9e:	e000      	b.n	8008da2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008da0:	bf00      	nop
			}
		}
	}

	return res;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008db4:	f04f 33ff 	mov.w	r3, #4294967295
 8008db8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d031      	beq.n	8008e26 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	e002      	b.n	8008dd0 <get_ldnumber+0x24>
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b1f      	cmp	r3, #31
 8008dd6:	d903      	bls.n	8008de0 <get_ldnumber+0x34>
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	2b3a      	cmp	r3, #58	; 0x3a
 8008dde:	d1f4      	bne.n	8008dca <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b3a      	cmp	r3, #58	; 0x3a
 8008de6:	d11c      	bne.n	8008e22 <get_ldnumber+0x76>
			tp = *path;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	1c5a      	adds	r2, r3, #1
 8008df2:	60fa      	str	r2, [r7, #12]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	3b30      	subs	r3, #48	; 0x30
 8008df8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d80e      	bhi.n	8008e1e <get_ldnumber+0x72>
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d10a      	bne.n	8008e1e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d107      	bne.n	8008e1e <get_ldnumber+0x72>
					vol = (int)i;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	3301      	adds	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	e002      	b.n	8008e28 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008e22:	2300      	movs	r3, #0
 8008e24:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008e26:	693b      	ldr	r3, [r7, #16]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	371c      	adds	r7, #28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	70da      	strb	r2, [r3, #3]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f04f 32ff 	mov.w	r2, #4294967295
 8008e4a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7fe fc76 	bl	8007740 <move_window>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <check_fs+0x2a>
 8008e5a:	2304      	movs	r3, #4
 8008e5c:	e038      	b.n	8008ed0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	3338      	adds	r3, #56	; 0x38
 8008e62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe f9ba 	bl	80071e0 <ld_word>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d001      	beq.n	8008e7c <check_fs+0x48>
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e029      	b.n	8008ed0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e82:	2be9      	cmp	r3, #233	; 0xe9
 8008e84:	d009      	beq.n	8008e9a <check_fs+0x66>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e8c:	2beb      	cmp	r3, #235	; 0xeb
 8008e8e:	d11e      	bne.n	8008ece <check_fs+0x9a>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e96:	2b90      	cmp	r3, #144	; 0x90
 8008e98:	d119      	bne.n	8008ece <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3338      	adds	r3, #56	; 0x38
 8008e9e:	3336      	adds	r3, #54	; 0x36
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe f9b5 	bl	8007210 <ld_dword>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008eac:	4a0a      	ldr	r2, [pc, #40]	; (8008ed8 <check_fs+0xa4>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d101      	bne.n	8008eb6 <check_fs+0x82>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e00c      	b.n	8008ed0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	3338      	adds	r3, #56	; 0x38
 8008eba:	3352      	adds	r3, #82	; 0x52
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fe f9a7 	bl	8007210 <ld_dword>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	4a05      	ldr	r2, [pc, #20]	; (8008edc <check_fs+0xa8>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d101      	bne.n	8008ece <check_fs+0x9a>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e000      	b.n	8008ed0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008ece:	2302      	movs	r3, #2
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	00544146 	.word	0x00544146
 8008edc:	33544146 	.word	0x33544146

08008ee0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b096      	sub	sp, #88	; 0x58
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff ff59 	bl	8008dac <get_ldnumber>
 8008efa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da01      	bge.n	8008f06 <find_volume+0x26>
 8008f02:	230b      	movs	r3, #11
 8008f04:	e265      	b.n	80093d2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008f06:	4a9f      	ldr	r2, [pc, #636]	; (8009184 <find_volume+0x2a4>)
 8008f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <find_volume+0x3a>
 8008f16:	230c      	movs	r3, #12
 8008f18:	e25b      	b.n	80093d2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f1e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008f20:	79fb      	ldrb	r3, [r7, #7]
 8008f22:	f023 0301 	bic.w	r3, r3, #1
 8008f26:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d01a      	beq.n	8008f66 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f32:	785b      	ldrb	r3, [r3, #1]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fe f8b5 	bl	80070a4 <disk_status>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008f40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10c      	bne.n	8008f66 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d007      	beq.n	8008f62 <find_volume+0x82>
 8008f52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f56:	f003 0304 	and.w	r3, r3, #4
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008f5e:	230a      	movs	r3, #10
 8008f60:	e237      	b.n	80093d2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008f62:	2300      	movs	r3, #0
 8008f64:	e235      	b.n	80093d2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f68:	2200      	movs	r2, #0
 8008f6a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fe f8ad 	bl	80070d8 <disk_initialize>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008f84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008f90:	2303      	movs	r3, #3
 8008f92:	e21e      	b.n	80093d2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d007      	beq.n	8008faa <find_volume+0xca>
 8008f9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f9e:	f003 0304 	and.w	r3, r3, #4
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008fa6:	230a      	movs	r3, #10
 8008fa8:	e213      	b.n	80093d2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fac:	7858      	ldrb	r0, [r3, #1]
 8008fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb0:	330c      	adds	r3, #12
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	2102      	movs	r1, #2
 8008fb6:	f7fe f8f5 	bl	80071a4 <disk_ioctl>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <find_volume+0xe4>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e206      	b.n	80093d2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc6:	899b      	ldrh	r3, [r3, #12]
 8008fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fcc:	d80d      	bhi.n	8008fea <find_volume+0x10a>
 8008fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd0:	899b      	ldrh	r3, [r3, #12]
 8008fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fd6:	d308      	bcc.n	8008fea <find_volume+0x10a>
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fda:	899b      	ldrh	r3, [r3, #12]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe0:	899b      	ldrh	r3, [r3, #12]
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <find_volume+0x10e>
 8008fea:	2301      	movs	r3, #1
 8008fec:	e1f1      	b.n	80093d2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008ff2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ff4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ff6:	f7ff ff1d 	bl	8008e34 <check_fs>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009004:	2b02      	cmp	r3, #2
 8009006:	d149      	bne.n	800909c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009008:	2300      	movs	r3, #0
 800900a:	643b      	str	r3, [r7, #64]	; 0x40
 800900c:	e01e      	b.n	800904c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800901c:	4413      	add	r3, r2
 800901e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	3304      	adds	r3, #4
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d006      	beq.n	8009038 <find_volume+0x158>
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	3308      	adds	r3, #8
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe f8ee 	bl	8007210 <ld_dword>
 8009034:	4602      	mov	r2, r0
 8009036:	e000      	b.n	800903a <find_volume+0x15a>
 8009038:	2200      	movs	r2, #0
 800903a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	3358      	adds	r3, #88	; 0x58
 8009040:	443b      	add	r3, r7
 8009042:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009048:	3301      	adds	r3, #1
 800904a:	643b      	str	r3, [r7, #64]	; 0x40
 800904c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800904e:	2b03      	cmp	r3, #3
 8009050:	d9dd      	bls.n	800900e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009052:	2300      	movs	r3, #0
 8009054:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <find_volume+0x182>
 800905c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800905e:	3b01      	subs	r3, #1
 8009060:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	3358      	adds	r3, #88	; 0x58
 8009068:	443b      	add	r3, r7
 800906a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800906e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009072:	2b00      	cmp	r3, #0
 8009074:	d005      	beq.n	8009082 <find_volume+0x1a2>
 8009076:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009078:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800907a:	f7ff fedb 	bl	8008e34 <check_fs>
 800907e:	4603      	mov	r3, r0
 8009080:	e000      	b.n	8009084 <find_volume+0x1a4>
 8009082:	2303      	movs	r3, #3
 8009084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800908c:	2b01      	cmp	r3, #1
 800908e:	d905      	bls.n	800909c <find_volume+0x1bc>
 8009090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009092:	3301      	adds	r3, #1
 8009094:	643b      	str	r3, [r7, #64]	; 0x40
 8009096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009098:	2b03      	cmp	r3, #3
 800909a:	d9e2      	bls.n	8009062 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800909c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090a0:	2b04      	cmp	r3, #4
 80090a2:	d101      	bne.n	80090a8 <find_volume+0x1c8>
 80090a4:	2301      	movs	r3, #1
 80090a6:	e194      	b.n	80093d2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80090a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d901      	bls.n	80090b4 <find_volume+0x1d4>
 80090b0:	230d      	movs	r3, #13
 80090b2:	e18e      	b.n	80093d2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	3338      	adds	r3, #56	; 0x38
 80090b8:	330b      	adds	r3, #11
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe f890 	bl	80071e0 <ld_word>
 80090c0:	4603      	mov	r3, r0
 80090c2:	461a      	mov	r2, r3
 80090c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c6:	899b      	ldrh	r3, [r3, #12]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d001      	beq.n	80090d0 <find_volume+0x1f0>
 80090cc:	230d      	movs	r3, #13
 80090ce:	e180      	b.n	80093d2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	3338      	adds	r3, #56	; 0x38
 80090d4:	3316      	adds	r3, #22
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fe f882 	bl	80071e0 <ld_word>
 80090dc:	4603      	mov	r3, r0
 80090de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80090e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d106      	bne.n	80090f4 <find_volume+0x214>
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	3338      	adds	r3, #56	; 0x38
 80090ea:	3324      	adds	r3, #36	; 0x24
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe f88f 	bl	8007210 <ld_dword>
 80090f2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80090f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090f8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009102:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	789b      	ldrb	r3, [r3, #2]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d005      	beq.n	8009118 <find_volume+0x238>
 800910c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910e:	789b      	ldrb	r3, [r3, #2]
 8009110:	2b02      	cmp	r3, #2
 8009112:	d001      	beq.n	8009118 <find_volume+0x238>
 8009114:	230d      	movs	r3, #13
 8009116:	e15c      	b.n	80093d2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	789b      	ldrb	r3, [r3, #2]
 800911c:	461a      	mov	r2, r3
 800911e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009120:	fb02 f303 	mul.w	r3, r2, r3
 8009124:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800912c:	b29a      	uxth	r2, r3
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009134:	895b      	ldrh	r3, [r3, #10]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d008      	beq.n	800914c <find_volume+0x26c>
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	895b      	ldrh	r3, [r3, #10]
 800913e:	461a      	mov	r2, r3
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	895b      	ldrh	r3, [r3, #10]
 8009144:	3b01      	subs	r3, #1
 8009146:	4013      	ands	r3, r2
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <find_volume+0x270>
 800914c:	230d      	movs	r3, #13
 800914e:	e140      	b.n	80093d2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009152:	3338      	adds	r3, #56	; 0x38
 8009154:	3311      	adds	r3, #17
 8009156:	4618      	mov	r0, r3
 8009158:	f7fe f842 	bl	80071e0 <ld_word>
 800915c:	4603      	mov	r3, r0
 800915e:	461a      	mov	r2, r3
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	891b      	ldrh	r3, [r3, #8]
 8009168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800916a:	8992      	ldrh	r2, [r2, #12]
 800916c:	0952      	lsrs	r2, r2, #5
 800916e:	b292      	uxth	r2, r2
 8009170:	fbb3 f1f2 	udiv	r1, r3, r2
 8009174:	fb01 f202 	mul.w	r2, r1, r2
 8009178:	1a9b      	subs	r3, r3, r2
 800917a:	b29b      	uxth	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <find_volume+0x2a8>
 8009180:	230d      	movs	r3, #13
 8009182:	e126      	b.n	80093d2 <find_volume+0x4f2>
 8009184:	2000239c 	.word	0x2000239c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	3338      	adds	r3, #56	; 0x38
 800918c:	3313      	adds	r3, #19
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe f826 	bl	80071e0 <ld_word>
 8009194:	4603      	mov	r3, r0
 8009196:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <find_volume+0x2cc>
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	3338      	adds	r3, #56	; 0x38
 80091a2:	3320      	adds	r3, #32
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fe f833 	bl	8007210 <ld_dword>
 80091aa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80091ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ae:	3338      	adds	r3, #56	; 0x38
 80091b0:	330e      	adds	r3, #14
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe f814 	bl	80071e0 <ld_word>
 80091b8:	4603      	mov	r3, r0
 80091ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80091bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <find_volume+0x2e6>
 80091c2:	230d      	movs	r3, #13
 80091c4:	e105      	b.n	80093d2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80091c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80091c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ca:	4413      	add	r3, r2
 80091cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091ce:	8911      	ldrh	r1, [r2, #8]
 80091d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091d2:	8992      	ldrh	r2, [r2, #12]
 80091d4:	0952      	lsrs	r2, r2, #5
 80091d6:	b292      	uxth	r2, r2
 80091d8:	fbb1 f2f2 	udiv	r2, r1, r2
 80091dc:	b292      	uxth	r2, r2
 80091de:	4413      	add	r3, r2
 80091e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80091e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d201      	bcs.n	80091ee <find_volume+0x30e>
 80091ea:	230d      	movs	r3, #13
 80091ec:	e0f1      	b.n	80093d2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80091ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091f6:	8952      	ldrh	r2, [r2, #10]
 80091f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	2b00      	cmp	r3, #0
 8009202:	d101      	bne.n	8009208 <find_volume+0x328>
 8009204:	230d      	movs	r3, #13
 8009206:	e0e4      	b.n	80093d2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009208:	2303      	movs	r3, #3
 800920a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009214:	4293      	cmp	r3, r2
 8009216:	d802      	bhi.n	800921e <find_volume+0x33e>
 8009218:	2302      	movs	r3, #2
 800921a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009224:	4293      	cmp	r3, r2
 8009226:	d802      	bhi.n	800922e <find_volume+0x34e>
 8009228:	2301      	movs	r3, #1
 800922a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	1c9a      	adds	r2, r3, #2
 8009232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009234:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800923a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800923c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800923e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009240:	441a      	add	r2, r3
 8009242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009244:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009246:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	441a      	add	r2, r3
 800924c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009254:	2b03      	cmp	r3, #3
 8009256:	d11e      	bne.n	8009296 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925a:	3338      	adds	r3, #56	; 0x38
 800925c:	332a      	adds	r3, #42	; 0x2a
 800925e:	4618      	mov	r0, r3
 8009260:	f7fd ffbe 	bl	80071e0 <ld_word>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <find_volume+0x38e>
 800926a:	230d      	movs	r3, #13
 800926c:	e0b1      	b.n	80093d2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009270:	891b      	ldrh	r3, [r3, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <find_volume+0x39a>
 8009276:	230d      	movs	r3, #13
 8009278:	e0ab      	b.n	80093d2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800927a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927c:	3338      	adds	r3, #56	; 0x38
 800927e:	332c      	adds	r3, #44	; 0x2c
 8009280:	4618      	mov	r0, r3
 8009282:	f7fd ffc5 	bl	8007210 <ld_dword>
 8009286:	4602      	mov	r2, r0
 8009288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800928c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	647b      	str	r3, [r7, #68]	; 0x44
 8009294:	e01f      	b.n	80092d6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009298:	891b      	ldrh	r3, [r3, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <find_volume+0x3c2>
 800929e:	230d      	movs	r3, #13
 80092a0:	e097      	b.n	80093d2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80092a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092a8:	441a      	add	r2, r3
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80092ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d103      	bne.n	80092be <find_volume+0x3de>
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	e00a      	b.n	80092d4 <find_volume+0x3f4>
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	69da      	ldr	r2, [r3, #28]
 80092c2:	4613      	mov	r3, r2
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	4413      	add	r3, r2
 80092c8:	085a      	lsrs	r2, r3, #1
 80092ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80092d4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	6a1a      	ldr	r2, [r3, #32]
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	899b      	ldrh	r3, [r3, #12]
 80092de:	4619      	mov	r1, r3
 80092e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092e2:	440b      	add	r3, r1
 80092e4:	3b01      	subs	r3, #1
 80092e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092e8:	8989      	ldrh	r1, [r1, #12]
 80092ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d201      	bcs.n	80092f6 <find_volume+0x416>
 80092f2:	230d      	movs	r3, #13
 80092f4:	e06d      	b.n	80093d2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	f04f 32ff 	mov.w	r2, #4294967295
 80092fc:	619a      	str	r2, [r3, #24]
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	2280      	movs	r2, #128	; 0x80
 800930a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800930c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009310:	2b03      	cmp	r3, #3
 8009312:	d149      	bne.n	80093a8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	3338      	adds	r3, #56	; 0x38
 8009318:	3330      	adds	r3, #48	; 0x30
 800931a:	4618      	mov	r0, r3
 800931c:	f7fd ff60 	bl	80071e0 <ld_word>
 8009320:	4603      	mov	r3, r0
 8009322:	2b01      	cmp	r3, #1
 8009324:	d140      	bne.n	80093a8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009328:	3301      	adds	r3, #1
 800932a:	4619      	mov	r1, r3
 800932c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800932e:	f7fe fa07 	bl	8007740 <move_window>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d137      	bne.n	80093a8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	2200      	movs	r2, #0
 800933c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	3338      	adds	r3, #56	; 0x38
 8009342:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009346:	4618      	mov	r0, r3
 8009348:	f7fd ff4a 	bl	80071e0 <ld_word>
 800934c:	4603      	mov	r3, r0
 800934e:	461a      	mov	r2, r3
 8009350:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009354:	429a      	cmp	r2, r3
 8009356:	d127      	bne.n	80093a8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	3338      	adds	r3, #56	; 0x38
 800935c:	4618      	mov	r0, r3
 800935e:	f7fd ff57 	bl	8007210 <ld_dword>
 8009362:	4603      	mov	r3, r0
 8009364:	4a1d      	ldr	r2, [pc, #116]	; (80093dc <find_volume+0x4fc>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d11e      	bne.n	80093a8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	3338      	adds	r3, #56	; 0x38
 800936e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009372:	4618      	mov	r0, r3
 8009374:	f7fd ff4c 	bl	8007210 <ld_dword>
 8009378:	4603      	mov	r3, r0
 800937a:	4a19      	ldr	r2, [pc, #100]	; (80093e0 <find_volume+0x500>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d113      	bne.n	80093a8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	3338      	adds	r3, #56	; 0x38
 8009384:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009388:	4618      	mov	r0, r3
 800938a:	f7fd ff41 	bl	8007210 <ld_dword>
 800938e:	4602      	mov	r2, r0
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	3338      	adds	r3, #56	; 0x38
 8009398:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800939c:	4618      	mov	r0, r3
 800939e:	f7fd ff37 	bl	8007210 <ld_dword>
 80093a2:	4602      	mov	r2, r0
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80093a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80093ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80093b0:	4b0c      	ldr	r3, [pc, #48]	; (80093e4 <find_volume+0x504>)
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	3301      	adds	r3, #1
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	4b0a      	ldr	r3, [pc, #40]	; (80093e4 <find_volume+0x504>)
 80093ba:	801a      	strh	r2, [r3, #0]
 80093bc:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <find_volume+0x504>)
 80093be:	881a      	ldrh	r2, [r3, #0]
 80093c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	4a08      	ldr	r2, [pc, #32]	; (80093e8 <find_volume+0x508>)
 80093c8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80093ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093cc:	f7fe f950 	bl	8007670 <clear_lock>
#endif
	return FR_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3758      	adds	r7, #88	; 0x58
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	41615252 	.word	0x41615252
 80093e0:	61417272 	.word	0x61417272
 80093e4:	200023a0 	.word	0x200023a0
 80093e8:	200023c4 	.word	0x200023c4

080093ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80093f6:	2309      	movs	r3, #9
 80093f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d01c      	beq.n	800943a <validate+0x4e>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d018      	beq.n	800943a <validate+0x4e>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d013      	beq.n	800943a <validate+0x4e>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	889a      	ldrh	r2, [r3, #4]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	88db      	ldrh	r3, [r3, #6]
 800941c:	429a      	cmp	r2, r3
 800941e:	d10c      	bne.n	800943a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	785b      	ldrb	r3, [r3, #1]
 8009426:	4618      	mov	r0, r3
 8009428:	f7fd fe3c 	bl	80070a4 <disk_status>
 800942c:	4603      	mov	r3, r0
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <validate+0x4e>
			res = FR_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d102      	bne.n	8009446 <validate+0x5a>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	e000      	b.n	8009448 <validate+0x5c>
 8009446:	2300      	movs	r3, #0
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	6013      	str	r3, [r2, #0]
	return res;
 800944c:	7bfb      	ldrb	r3, [r7, #15]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b088      	sub	sp, #32
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	4613      	mov	r3, r2
 8009464:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800946a:	f107 0310 	add.w	r3, r7, #16
 800946e:	4618      	mov	r0, r3
 8009470:	f7ff fc9c 	bl	8008dac <get_ldnumber>
 8009474:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	2b00      	cmp	r3, #0
 800947a:	da01      	bge.n	8009480 <f_mount+0x28>
 800947c:	230b      	movs	r3, #11
 800947e:	e02b      	b.n	80094d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009480:	4a17      	ldr	r2, [pc, #92]	; (80094e0 <f_mount+0x88>)
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009488:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d005      	beq.n	800949c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009490:	69b8      	ldr	r0, [r7, #24]
 8009492:	f7fe f8ed 	bl	8007670 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2200      	movs	r2, #0
 800949a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	490d      	ldr	r1, [pc, #52]	; (80094e0 <f_mount+0x88>)
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <f_mount+0x66>
 80094b8:	79fb      	ldrb	r3, [r7, #7]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d001      	beq.n	80094c2 <f_mount+0x6a>
 80094be:	2300      	movs	r3, #0
 80094c0:	e00a      	b.n	80094d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80094c2:	f107 010c 	add.w	r1, r7, #12
 80094c6:	f107 0308 	add.w	r3, r7, #8
 80094ca:	2200      	movs	r2, #0
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7ff fd07 	bl	8008ee0 <find_volume>
 80094d2:	4603      	mov	r3, r0
 80094d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3720      	adds	r7, #32
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	2000239c 	.word	0x2000239c

080094e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b09a      	sub	sp, #104	; 0x68
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	4613      	mov	r3, r2
 80094f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <f_open+0x18>
 80094f8:	2309      	movs	r3, #9
 80094fa:	e1bb      	b.n	8009874 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80094fc:	79fb      	ldrb	r3, [r7, #7]
 80094fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009502:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009504:	79fa      	ldrb	r2, [r7, #7]
 8009506:	f107 0114 	add.w	r1, r7, #20
 800950a:	f107 0308 	add.w	r3, r7, #8
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff fce6 	bl	8008ee0 <find_volume>
 8009514:	4603      	mov	r3, r0
 8009516:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800951a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800951e:	2b00      	cmp	r3, #0
 8009520:	f040 819f 	bne.w	8009862 <f_open+0x37e>
		dj.obj.fs = fs;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	f107 0318 	add.w	r3, r7, #24
 800952e:	4611      	mov	r1, r2
 8009530:	4618      	mov	r0, r3
 8009532:	f7ff fbc5 	bl	8008cc0 <follow_path>
 8009536:	4603      	mov	r3, r0
 8009538:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800953c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009540:	2b00      	cmp	r3, #0
 8009542:	d11a      	bne.n	800957a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009544:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009548:	b25b      	sxtb	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	da03      	bge.n	8009556 <f_open+0x72>
				res = FR_INVALID_NAME;
 800954e:	2306      	movs	r3, #6
 8009550:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009554:	e011      	b.n	800957a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009556:	79fb      	ldrb	r3, [r7, #7]
 8009558:	f023 0301 	bic.w	r3, r3, #1
 800955c:	2b00      	cmp	r3, #0
 800955e:	bf14      	ite	ne
 8009560:	2301      	movne	r3, #1
 8009562:	2300      	moveq	r3, #0
 8009564:	b2db      	uxtb	r3, r3
 8009566:	461a      	mov	r2, r3
 8009568:	f107 0318 	add.w	r3, r7, #24
 800956c:	4611      	mov	r1, r2
 800956e:	4618      	mov	r0, r3
 8009570:	f7fd ff36 	bl	80073e0 <chk_lock>
 8009574:	4603      	mov	r3, r0
 8009576:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	f003 031c 	and.w	r3, r3, #28
 8009580:	2b00      	cmp	r3, #0
 8009582:	d07f      	beq.n	8009684 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009584:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009588:	2b00      	cmp	r3, #0
 800958a:	d017      	beq.n	80095bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800958c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009590:	2b04      	cmp	r3, #4
 8009592:	d10e      	bne.n	80095b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009594:	f7fd ff80 	bl	8007498 <enq_lock>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d006      	beq.n	80095ac <f_open+0xc8>
 800959e:	f107 0318 	add.w	r3, r7, #24
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7ff f8dc 	bl	8008760 <dir_register>
 80095a8:	4603      	mov	r3, r0
 80095aa:	e000      	b.n	80095ae <f_open+0xca>
 80095ac:	2312      	movs	r3, #18
 80095ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	f043 0308 	orr.w	r3, r3, #8
 80095b8:	71fb      	strb	r3, [r7, #7]
 80095ba:	e010      	b.n	80095de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80095bc:	7fbb      	ldrb	r3, [r7, #30]
 80095be:	f003 0311 	and.w	r3, r3, #17
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <f_open+0xea>
					res = FR_DENIED;
 80095c6:	2307      	movs	r3, #7
 80095c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80095cc:	e007      	b.n	80095de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	f003 0304 	and.w	r3, r3, #4
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <f_open+0xfa>
 80095d8:	2308      	movs	r3, #8
 80095da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80095de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d168      	bne.n	80096b8 <f_open+0x1d4>
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	f003 0308 	and.w	r3, r3, #8
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d063      	beq.n	80096b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80095f0:	f7fd fcfa 	bl	8006fe8 <get_fattime>
 80095f4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80095f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f8:	330e      	adds	r3, #14
 80095fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fd fe45 	bl	800728c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	3316      	adds	r3, #22
 8009606:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009608:	4618      	mov	r0, r3
 800960a:	f7fd fe3f 	bl	800728c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	330b      	adds	r3, #11
 8009612:	2220      	movs	r2, #32
 8009614:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800961a:	4611      	mov	r1, r2
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe fe17 	bl	8008250 <ld_clust>
 8009622:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009628:	2200      	movs	r2, #0
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe fe2f 	bl	800828e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009632:	331c      	adds	r3, #28
 8009634:	2100      	movs	r1, #0
 8009636:	4618      	mov	r0, r3
 8009638:	f7fd fe28 	bl	800728c <st_dword>
					fs->wflag = 1;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	2201      	movs	r2, #1
 8009640:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009644:	2b00      	cmp	r3, #0
 8009646:	d037      	beq.n	80096b8 <f_open+0x1d4>
						dw = fs->winsect;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800964e:	f107 0318 	add.w	r3, r7, #24
 8009652:	2200      	movs	r2, #0
 8009654:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe fb1f 	bl	8007c9a <remove_chain>
 800965c:	4603      	mov	r3, r0
 800965e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009662:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009666:	2b00      	cmp	r3, #0
 8009668:	d126      	bne.n	80096b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe f866 	bl	8007740 <move_window>
 8009674:	4603      	mov	r3, r0
 8009676:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800967e:	3a01      	subs	r2, #1
 8009680:	615a      	str	r2, [r3, #20]
 8009682:	e019      	b.n	80096b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009684:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009688:	2b00      	cmp	r3, #0
 800968a:	d115      	bne.n	80096b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800968c:	7fbb      	ldrb	r3, [r7, #30]
 800968e:	f003 0310 	and.w	r3, r3, #16
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <f_open+0x1ba>
					res = FR_NO_FILE;
 8009696:	2304      	movs	r3, #4
 8009698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800969c:	e00c      	b.n	80096b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	f003 0302 	and.w	r3, r3, #2
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d007      	beq.n	80096b8 <f_open+0x1d4>
 80096a8:	7fbb      	ldrb	r3, [r7, #30]
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <f_open+0x1d4>
						res = FR_DENIED;
 80096b2:	2307      	movs	r3, #7
 80096b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80096b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d128      	bne.n	8009712 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80096c0:	79fb      	ldrb	r3, [r7, #7]
 80096c2:	f003 0308 	and.w	r3, r3, #8
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80096ca:	79fb      	ldrb	r3, [r7, #7]
 80096cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80096da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	f023 0301 	bic.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bf14      	ite	ne
 80096ea:	2301      	movne	r3, #1
 80096ec:	2300      	moveq	r3, #0
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	461a      	mov	r2, r3
 80096f2:	f107 0318 	add.w	r3, r7, #24
 80096f6:	4611      	mov	r1, r2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fd feef 	bl	80074dc <inc_lock>
 80096fe:	4602      	mov	r2, r0
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d102      	bne.n	8009712 <f_open+0x22e>
 800970c:	2302      	movs	r3, #2
 800970e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009712:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009716:	2b00      	cmp	r3, #0
 8009718:	f040 80a3 	bne.w	8009862 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009720:	4611      	mov	r1, r2
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe fd94 	bl	8008250 <ld_clust>
 8009728:	4602      	mov	r2, r0
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800972e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009730:	331c      	adds	r3, #28
 8009732:	4618      	mov	r0, r3
 8009734:	f7fd fd6c 	bl	8007210 <ld_dword>
 8009738:	4602      	mov	r2, r0
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	88da      	ldrh	r2, [r3, #6]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	79fa      	ldrb	r2, [r7, #7]
 8009756:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3330      	adds	r3, #48	; 0x30
 800976e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009772:	2100      	movs	r1, #0
 8009774:	4618      	mov	r0, r3
 8009776:	f7fd fdd6 	bl	8007326 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	f003 0320 	and.w	r3, r3, #32
 8009780:	2b00      	cmp	r3, #0
 8009782:	d06e      	beq.n	8009862 <f_open+0x37e>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d06a      	beq.n	8009862 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	68da      	ldr	r2, [r3, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	895b      	ldrh	r3, [r3, #10]
 8009798:	461a      	mov	r2, r3
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	899b      	ldrh	r3, [r3, #12]
 800979e:	fb02 f303 	mul.w	r3, r2, r3
 80097a2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097b0:	e016      	b.n	80097e0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe f87f 	bl	80078ba <get_fat>
 80097bc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80097be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d802      	bhi.n	80097ca <f_open+0x2e6>
 80097c4:	2302      	movs	r3, #2
 80097c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80097ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d0:	d102      	bne.n	80097d8 <f_open+0x2f4>
 80097d2:	2301      	movs	r3, #1
 80097d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80097d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d103      	bne.n	80097f0 <f_open+0x30c>
 80097e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d8e0      	bhi.n	80097b2 <f_open+0x2ce>
				}
				fp->clust = clst;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80097f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80097f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d131      	bne.n	8009862 <f_open+0x37e>
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	899b      	ldrh	r3, [r3, #12]
 8009802:	461a      	mov	r2, r3
 8009804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009806:	fbb3 f1f2 	udiv	r1, r3, r2
 800980a:	fb01 f202 	mul.w	r2, r1, r2
 800980e:	1a9b      	subs	r3, r3, r2
 8009810:	2b00      	cmp	r3, #0
 8009812:	d026      	beq.n	8009862 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009818:	4618      	mov	r0, r3
 800981a:	f7fe f82f 	bl	800787c <clust2sect>
 800981e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009822:	2b00      	cmp	r3, #0
 8009824:	d103      	bne.n	800982e <f_open+0x34a>
						res = FR_INT_ERR;
 8009826:	2302      	movs	r3, #2
 8009828:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800982c:	e019      	b.n	8009862 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	899b      	ldrh	r3, [r3, #12]
 8009832:	461a      	mov	r2, r3
 8009834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009836:	fbb3 f2f2 	udiv	r2, r3, r2
 800983a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800983c:	441a      	add	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	7858      	ldrb	r0, [r3, #1]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6a1a      	ldr	r2, [r3, #32]
 8009850:	2301      	movs	r3, #1
 8009852:	f7fd fc67 	bl	8007124 <disk_read>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <f_open+0x37e>
 800985c:	2301      	movs	r3, #1
 800985e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009862:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009866:	2b00      	cmp	r3, #0
 8009868:	d002      	beq.n	8009870 <f_open+0x38c>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009870:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009874:	4618      	mov	r0, r3
 8009876:	3768      	adds	r7, #104	; 0x68
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08e      	sub	sp, #56	; 0x38
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2200      	movs	r2, #0
 8009892:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f107 0214 	add.w	r2, r7, #20
 800989a:	4611      	mov	r1, r2
 800989c:	4618      	mov	r0, r3
 800989e:	f7ff fda5 	bl	80093ec <validate>
 80098a2:	4603      	mov	r3, r0
 80098a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80098a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d107      	bne.n	80098c0 <f_read+0x44>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	7d5b      	ldrb	r3, [r3, #21]
 80098b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80098b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <f_read+0x4a>
 80098c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098c4:	e135      	b.n	8009b32 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	7d1b      	ldrb	r3, [r3, #20]
 80098ca:	f003 0301 	and.w	r3, r3, #1
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <f_read+0x5a>
 80098d2:	2307      	movs	r3, #7
 80098d4:	e12d      	b.n	8009b32 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	68da      	ldr	r2, [r3, #12]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	f240 811e 	bls.w	8009b28 <f_read+0x2ac>
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80098f0:	e11a      	b.n	8009b28 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	8992      	ldrh	r2, [r2, #12]
 80098fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80098fe:	fb01 f202 	mul.w	r2, r1, r2
 8009902:	1a9b      	subs	r3, r3, r2
 8009904:	2b00      	cmp	r3, #0
 8009906:	f040 80d5 	bne.w	8009ab4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	8992      	ldrh	r2, [r2, #12]
 8009912:	fbb3 f3f2 	udiv	r3, r3, r2
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	8952      	ldrh	r2, [r2, #10]
 800991a:	3a01      	subs	r2, #1
 800991c:	4013      	ands	r3, r2
 800991e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d12f      	bne.n	8009986 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d103      	bne.n	8009936 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	633b      	str	r3, [r7, #48]	; 0x30
 8009934:	e013      	b.n	800995e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993a:	2b00      	cmp	r3, #0
 800993c:	d007      	beq.n	800994e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	4619      	mov	r1, r3
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f7fe faa5 	bl	8007e94 <clmt_clust>
 800994a:	6338      	str	r0, [r7, #48]	; 0x30
 800994c:	e007      	b.n	800995e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	4619      	mov	r1, r3
 8009956:	4610      	mov	r0, r2
 8009958:	f7fd ffaf 	bl	80078ba <get_fat>
 800995c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	2b01      	cmp	r3, #1
 8009962:	d804      	bhi.n	800996e <f_read+0xf2>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2202      	movs	r2, #2
 8009968:	755a      	strb	r2, [r3, #21]
 800996a:	2302      	movs	r3, #2
 800996c:	e0e1      	b.n	8009b32 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009974:	d104      	bne.n	8009980 <f_read+0x104>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2201      	movs	r2, #1
 800997a:	755a      	strb	r2, [r3, #21]
 800997c:	2301      	movs	r3, #1
 800997e:	e0d8      	b.n	8009b32 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009984:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	4619      	mov	r1, r3
 800998e:	4610      	mov	r0, r2
 8009990:	f7fd ff74 	bl	800787c <clust2sect>
 8009994:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d104      	bne.n	80099a6 <f_read+0x12a>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2202      	movs	r2, #2
 80099a0:	755a      	strb	r2, [r3, #21]
 80099a2:	2302      	movs	r3, #2
 80099a4:	e0c5      	b.n	8009b32 <f_read+0x2b6>
			sect += csect;
 80099a6:	69ba      	ldr	r2, [r7, #24]
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	4413      	add	r3, r2
 80099ac:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	899b      	ldrh	r3, [r3, #12]
 80099b2:	461a      	mov	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80099ba:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d041      	beq.n	8009a46 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80099c2:	69fa      	ldr	r2, [r7, #28]
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	4413      	add	r3, r2
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	8952      	ldrh	r2, [r2, #10]
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d905      	bls.n	80099dc <f_read+0x160>
					cc = fs->csize - csect;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	895b      	ldrh	r3, [r3, #10]
 80099d4:	461a      	mov	r2, r3
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	7858      	ldrb	r0, [r3, #1]
 80099e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099e6:	f7fd fb9d 	bl	8007124 <disk_read>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d004      	beq.n	80099fa <f_read+0x17e>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2201      	movs	r2, #1
 80099f4:	755a      	strb	r2, [r3, #21]
 80099f6:	2301      	movs	r3, #1
 80099f8:	e09b      	b.n	8009b32 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	7d1b      	ldrb	r3, [r3, #20]
 80099fe:	b25b      	sxtb	r3, r3
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	da18      	bge.n	8009a36 <f_read+0x1ba>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6a1a      	ldr	r2, [r3, #32]
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d911      	bls.n	8009a36 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6a1a      	ldr	r2, [r3, #32]
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	8992      	ldrh	r2, [r2, #12]
 8009a1e:	fb02 f303 	mul.w	r3, r2, r3
 8009a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a24:	18d0      	adds	r0, r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	899b      	ldrh	r3, [r3, #12]
 8009a30:	461a      	mov	r2, r3
 8009a32:	f7fd fc57 	bl	80072e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	899b      	ldrh	r3, [r3, #12]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	fb02 f303 	mul.w	r3, r2, r3
 8009a42:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009a44:	e05c      	b.n	8009b00 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	69ba      	ldr	r2, [r7, #24]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d02e      	beq.n	8009aae <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	7d1b      	ldrb	r3, [r3, #20]
 8009a54:	b25b      	sxtb	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	da18      	bge.n	8009a8c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	7858      	ldrb	r0, [r3, #1]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6a1a      	ldr	r2, [r3, #32]
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f7fd fb7b 	bl	8007164 <disk_write>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d004      	beq.n	8009a7e <f_read+0x202>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2201      	movs	r2, #1
 8009a78:	755a      	strb	r2, [r3, #21]
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e059      	b.n	8009b32 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	7d1b      	ldrb	r3, [r3, #20]
 8009a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	7858      	ldrb	r0, [r3, #1]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a96:	2301      	movs	r3, #1
 8009a98:	69ba      	ldr	r2, [r7, #24]
 8009a9a:	f7fd fb43 	bl	8007124 <disk_read>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d004      	beq.n	8009aae <f_read+0x232>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	755a      	strb	r2, [r3, #21]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e041      	b.n	8009b32 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	69ba      	ldr	r2, [r7, #24]
 8009ab2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	899b      	ldrh	r3, [r3, #12]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	8992      	ldrh	r2, [r2, #12]
 8009ac2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ac6:	fb01 f202 	mul.w	r2, r1, r2
 8009aca:	1a9b      	subs	r3, r3, r2
 8009acc:	1ac3      	subs	r3, r0, r3
 8009ace:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d901      	bls.n	8009adc <f_read+0x260>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	8992      	ldrh	r2, [r2, #12]
 8009aea:	fbb3 f0f2 	udiv	r0, r3, r2
 8009aee:	fb00 f202 	mul.w	r2, r0, r2
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	440b      	add	r3, r1
 8009af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009af8:	4619      	mov	r1, r3
 8009afa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009afc:	f7fd fbf2 	bl	80072e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b04:	4413      	add	r3, r2
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	699a      	ldr	r2, [r3, #24]
 8009b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0e:	441a      	add	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	619a      	str	r2, [r3, #24]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1a:	441a      	add	r2, r3
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f47f aee1 	bne.w	80098f2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3738      	adds	r7, #56	; 0x38
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b08c      	sub	sp, #48	; 0x30
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
 8009b46:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f107 0210 	add.w	r2, r7, #16
 8009b58:	4611      	mov	r1, r2
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7ff fc46 	bl	80093ec <validate>
 8009b60:	4603      	mov	r3, r0
 8009b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009b66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d107      	bne.n	8009b7e <f_write+0x44>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	7d5b      	ldrb	r3, [r3, #21]
 8009b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <f_write+0x4a>
 8009b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b82:	e16a      	b.n	8009e5a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	7d1b      	ldrb	r3, [r3, #20]
 8009b88:	f003 0302 	and.w	r3, r3, #2
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <f_write+0x5a>
 8009b90:	2307      	movs	r3, #7
 8009b92:	e162      	b.n	8009e5a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	699a      	ldr	r2, [r3, #24]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	441a      	add	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	f080 814c 	bcs.w	8009e3e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	43db      	mvns	r3, r3
 8009bac:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009bae:	e146      	b.n	8009e3e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	8992      	ldrh	r2, [r2, #12]
 8009bb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bbc:	fb01 f202 	mul.w	r2, r1, r2
 8009bc0:	1a9b      	subs	r3, r3, r2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f040 80f1 	bne.w	8009daa <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	8992      	ldrh	r2, [r2, #12]
 8009bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	8952      	ldrh	r2, [r2, #10]
 8009bd8:	3a01      	subs	r2, #1
 8009bda:	4013      	ands	r3, r2
 8009bdc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d143      	bne.n	8009c6c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10c      	bne.n	8009c06 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d11a      	bne.n	8009c2e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe f8b1 	bl	8007d64 <create_chain>
 8009c02:	62b8      	str	r0, [r7, #40]	; 0x28
 8009c04:	e013      	b.n	8009c2e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d007      	beq.n	8009c1e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	4619      	mov	r1, r3
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f7fe f93d 	bl	8007e94 <clmt_clust>
 8009c1a:	62b8      	str	r0, [r7, #40]	; 0x28
 8009c1c:	e007      	b.n	8009c2e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	4619      	mov	r1, r3
 8009c26:	4610      	mov	r0, r2
 8009c28:	f7fe f89c 	bl	8007d64 <create_chain>
 8009c2c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 8109 	beq.w	8009e48 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d104      	bne.n	8009c46 <f_write+0x10c>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	755a      	strb	r2, [r3, #21]
 8009c42:	2302      	movs	r3, #2
 8009c44:	e109      	b.n	8009e5a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4c:	d104      	bne.n	8009c58 <f_write+0x11e>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2201      	movs	r2, #1
 8009c52:	755a      	strb	r2, [r3, #21]
 8009c54:	2301      	movs	r3, #1
 8009c56:	e100      	b.n	8009e5a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c5c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d102      	bne.n	8009c6c <f_write+0x132>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c6a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	7d1b      	ldrb	r3, [r3, #20]
 8009c70:	b25b      	sxtb	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	da18      	bge.n	8009ca8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	7858      	ldrb	r0, [r3, #1]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6a1a      	ldr	r2, [r3, #32]
 8009c84:	2301      	movs	r3, #1
 8009c86:	f7fd fa6d 	bl	8007164 <disk_write>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d004      	beq.n	8009c9a <f_write+0x160>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2201      	movs	r2, #1
 8009c94:	755a      	strb	r2, [r3, #21]
 8009c96:	2301      	movs	r3, #1
 8009c98:	e0df      	b.n	8009e5a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	7d1b      	ldrb	r3, [r3, #20]
 8009c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	69db      	ldr	r3, [r3, #28]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	f7fd fde3 	bl	800787c <clust2sect>
 8009cb6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d104      	bne.n	8009cc8 <f_write+0x18e>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	755a      	strb	r2, [r3, #21]
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	e0c8      	b.n	8009e5a <f_write+0x320>
			sect += csect;
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	4413      	add	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	899b      	ldrh	r3, [r3, #12]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cdc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d043      	beq.n	8009d6c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	4413      	add	r3, r2
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	8952      	ldrh	r2, [r2, #10]
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d905      	bls.n	8009cfe <f_write+0x1c4>
					cc = fs->csize - csect;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	895b      	ldrh	r3, [r3, #10]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	7858      	ldrb	r0, [r3, #1]
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	69f9      	ldr	r1, [r7, #28]
 8009d08:	f7fd fa2c 	bl	8007164 <disk_write>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d004      	beq.n	8009d1c <f_write+0x1e2>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2201      	movs	r2, #1
 8009d16:	755a      	strb	r2, [r3, #21]
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e09e      	b.n	8009e5a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6a1a      	ldr	r2, [r3, #32]
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	6a3a      	ldr	r2, [r7, #32]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d918      	bls.n	8009d5c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6a1a      	ldr	r2, [r3, #32]
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	8992      	ldrh	r2, [r2, #12]
 8009d3c:	fb02 f303 	mul.w	r3, r2, r3
 8009d40:	69fa      	ldr	r2, [r7, #28]
 8009d42:	18d1      	adds	r1, r2, r3
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	899b      	ldrh	r3, [r3, #12]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	f7fd facb 	bl	80072e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	7d1b      	ldrb	r3, [r3, #20]
 8009d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	899b      	ldrh	r3, [r3, #12]
 8009d60:	461a      	mov	r2, r3
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	fb02 f303 	mul.w	r3, r2, r3
 8009d68:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009d6a:	e04b      	b.n	8009e04 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6a1b      	ldr	r3, [r3, #32]
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d016      	beq.n	8009da4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	699a      	ldr	r2, [r3, #24]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d210      	bcs.n	8009da4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	7858      	ldrb	r0, [r3, #1]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	f7fd f9c8 	bl	8007124 <disk_read>
 8009d94:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d004      	beq.n	8009da4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	755a      	strb	r2, [r3, #21]
 8009da0:	2301      	movs	r3, #1
 8009da2:	e05a      	b.n	8009e5a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	899b      	ldrh	r3, [r3, #12]
 8009dae:	4618      	mov	r0, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	8992      	ldrh	r2, [r2, #12]
 8009db8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dbc:	fb01 f202 	mul.w	r2, r1, r2
 8009dc0:	1a9b      	subs	r3, r3, r2
 8009dc2:	1ac3      	subs	r3, r0, r3
 8009dc4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d901      	bls.n	8009dd2 <f_write+0x298>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	8992      	ldrh	r2, [r2, #12]
 8009de0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009de4:	fb00 f202 	mul.w	r2, r0, r2
 8009de8:	1a9b      	subs	r3, r3, r2
 8009dea:	440b      	add	r3, r1
 8009dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dee:	69f9      	ldr	r1, [r7, #28]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fd fa77 	bl	80072e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	7d1b      	ldrb	r3, [r3, #20]
 8009dfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009e04:	69fa      	ldr	r2, [r7, #28]
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	4413      	add	r3, r2
 8009e0a:	61fb      	str	r3, [r7, #28]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	699a      	ldr	r2, [r3, #24]
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	441a      	add	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	619a      	str	r2, [r3, #24]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	68da      	ldr	r2, [r3, #12]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	bf38      	it	cc
 8009e24:	461a      	movcc	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	60da      	str	r2, [r3, #12]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	441a      	add	r2, r3
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f47f aeb5 	bne.w	8009bb0 <f_write+0x76>
 8009e46:	e000      	b.n	8009e4a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009e48:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	7d1b      	ldrb	r3, [r3, #20]
 8009e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3730      	adds	r7, #48	; 0x30
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b086      	sub	sp, #24
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f107 0208 	add.w	r2, r7, #8
 8009e70:	4611      	mov	r1, r2
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff faba 	bl	80093ec <validate>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d168      	bne.n	8009f54 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	7d1b      	ldrb	r3, [r3, #20]
 8009e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d062      	beq.n	8009f54 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	7d1b      	ldrb	r3, [r3, #20]
 8009e92:	b25b      	sxtb	r3, r3
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	da15      	bge.n	8009ec4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	7858      	ldrb	r0, [r3, #1]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a1a      	ldr	r2, [r3, #32]
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	f7fd f95c 	bl	8007164 <disk_write>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <f_sync+0x54>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e04f      	b.n	8009f56 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	7d1b      	ldrb	r3, [r3, #20]
 8009eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009ec4:	f7fd f890 	bl	8006fe8 <get_fattime>
 8009ec8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	f7fd fc34 	bl	8007740 <move_window>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009edc:	7dfb      	ldrb	r3, [r7, #23]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d138      	bne.n	8009f54 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	330b      	adds	r3, #11
 8009eec:	781a      	ldrb	r2, [r3, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	330b      	adds	r3, #11
 8009ef2:	f042 0220 	orr.w	r2, r2, #32
 8009ef6:	b2d2      	uxtb	r2, r2
 8009ef8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6818      	ldr	r0, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	461a      	mov	r2, r3
 8009f04:	68f9      	ldr	r1, [r7, #12]
 8009f06:	f7fe f9c2 	bl	800828e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f103 021c 	add.w	r2, r3, #28
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f7fd f9b8 	bl	800728c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3316      	adds	r3, #22
 8009f20:	6939      	ldr	r1, [r7, #16]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fd f9b2 	bl	800728c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3312      	adds	r3, #18
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fd f991 	bl	8007256 <st_word>
					fs->wflag = 1;
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2201      	movs	r2, #1
 8009f38:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fd fc2d 	bl	800779c <sync_fs>
 8009f42:	4603      	mov	r3, r0
 8009f44:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	7d1b      	ldrb	r3, [r3, #20]
 8009f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3718      	adds	r7, #24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff ff7b 	bl	8009e62 <f_sync>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d118      	bne.n	8009fa8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f107 0208 	add.w	r2, r7, #8
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7ff fa34 	bl	80093ec <validate>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10c      	bne.n	8009fa8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fd fb30 	bl	80075f8 <dec_lock>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d102      	bne.n	8009fa8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b090      	sub	sp, #64	; 0x40
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f107 0208 	add.w	r2, r7, #8
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff fa11 	bl	80093ec <validate>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009fd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d103      	bne.n	8009fe0 <f_lseek+0x2e>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	7d5b      	ldrb	r3, [r3, #21]
 8009fdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009fe0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <f_lseek+0x3c>
 8009fe8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009fec:	e201      	b.n	800a3f2 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 80d9 	beq.w	800a1aa <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffe:	d15a      	bne.n	800a0b6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a004:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	1d1a      	adds	r2, r3, #4
 800a00a:	627a      	str	r2, [r7, #36]	; 0x24
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	617b      	str	r3, [r7, #20]
 800a010:	2302      	movs	r3, #2
 800a012:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d03a      	beq.n	800a096 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a022:	613b      	str	r3, [r7, #16]
 800a024:	2300      	movs	r3, #0
 800a026:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02a:	3302      	adds	r3, #2
 800a02c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	60fb      	str	r3, [r7, #12]
 800a032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a034:	3301      	adds	r3, #1
 800a036:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fd fc3c 	bl	80078ba <get_fat>
 800a042:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a046:	2b01      	cmp	r3, #1
 800a048:	d804      	bhi.n	800a054 <f_lseek+0xa2>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2202      	movs	r2, #2
 800a04e:	755a      	strb	r2, [r3, #21]
 800a050:	2302      	movs	r3, #2
 800a052:	e1ce      	b.n	800a3f2 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05a:	d104      	bne.n	800a066 <f_lseek+0xb4>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	755a      	strb	r2, [r3, #21]
 800a062:	2301      	movs	r3, #1
 800a064:	e1c5      	b.n	800a3f2 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	3301      	adds	r3, #1
 800a06a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d0de      	beq.n	800a02e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	429a      	cmp	r2, r3
 800a076:	d809      	bhi.n	800a08c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	1d1a      	adds	r2, r3, #4
 800a07c:	627a      	str	r2, [r7, #36]	; 0x24
 800a07e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a080:	601a      	str	r2, [r3, #0]
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	1d1a      	adds	r2, r3, #4
 800a086:	627a      	str	r2, [r7, #36]	; 0x24
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a092:	429a      	cmp	r2, r3
 800a094:	d3c4      	bcc.n	800a020 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a09c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a09e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d803      	bhi.n	800a0ae <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	601a      	str	r2, [r3, #0]
 800a0ac:	e19f      	b.n	800a3ee <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a0ae:	2311      	movs	r3, #17
 800a0b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a0b4:	e19b      	b.n	800a3ee <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d902      	bls.n	800a0c6 <f_lseek+0x114>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 818d 	beq.w	800a3ee <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7fd feda 	bl	8007e94 <clmt_clust>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	f7fd fbc4 	bl	800787c <clust2sect>
 800a0f4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d104      	bne.n	800a106 <f_lseek+0x154>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	755a      	strb	r2, [r3, #21]
 800a102:	2302      	movs	r3, #2
 800a104:	e175      	b.n	800a3f2 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	3b01      	subs	r3, #1
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	8992      	ldrh	r2, [r2, #12]
 800a10e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	8952      	ldrh	r2, [r2, #10]
 800a116:	3a01      	subs	r2, #1
 800a118:	4013      	ands	r3, r2
 800a11a:	69ba      	ldr	r2, [r7, #24]
 800a11c:	4413      	add	r3, r2
 800a11e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	8992      	ldrh	r2, [r2, #12]
 800a128:	fbb3 f1f2 	udiv	r1, r3, r2
 800a12c:	fb01 f202 	mul.w	r2, r1, r2
 800a130:	1a9b      	subs	r3, r3, r2
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 815b 	beq.w	800a3ee <f_lseek+0x43c>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a1b      	ldr	r3, [r3, #32]
 800a13c:	69ba      	ldr	r2, [r7, #24]
 800a13e:	429a      	cmp	r2, r3
 800a140:	f000 8155 	beq.w	800a3ee <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	7d1b      	ldrb	r3, [r3, #20]
 800a148:	b25b      	sxtb	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	da18      	bge.n	800a180 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	7858      	ldrb	r0, [r3, #1]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a1a      	ldr	r2, [r3, #32]
 800a15c:	2301      	movs	r3, #1
 800a15e:	f7fd f801 	bl	8007164 <disk_write>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d004      	beq.n	800a172 <f_lseek+0x1c0>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	755a      	strb	r2, [r3, #21]
 800a16e:	2301      	movs	r3, #1
 800a170:	e13f      	b.n	800a3f2 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7d1b      	ldrb	r3, [r3, #20]
 800a176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	7858      	ldrb	r0, [r3, #1]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a18a:	2301      	movs	r3, #1
 800a18c:	69ba      	ldr	r2, [r7, #24]
 800a18e:	f7fc ffc9 	bl	8007124 <disk_read>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d004      	beq.n	800a1a2 <f_lseek+0x1f0>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	755a      	strb	r2, [r3, #21]
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e127      	b.n	800a3f2 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	69ba      	ldr	r2, [r7, #24]
 800a1a6:	621a      	str	r2, [r3, #32]
 800a1a8:	e121      	b.n	800a3ee <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d908      	bls.n	800a1c6 <f_lseek+0x214>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	7d1b      	ldrb	r3, [r3, #20]
 800a1b8:	f003 0302 	and.w	r3, r3, #2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d102      	bne.n	800a1c6 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	637b      	str	r3, [r7, #52]	; 0x34
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1d4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 80b5 	beq.w	800a348 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	895b      	ldrh	r3, [r3, #10]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	899b      	ldrh	r3, [r3, #12]
 800a1e8:	fb02 f303 	mul.w	r3, r2, r3
 800a1ec:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d01b      	beq.n	800a22c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	1e5a      	subs	r2, r3, #1
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	fbb2 f2f3 	udiv	r2, r2, r3
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	1e59      	subs	r1, r3, #1
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a208:	429a      	cmp	r2, r3
 800a20a:	d30f      	bcc.n	800a22c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a20c:	6a3b      	ldr	r3, [r7, #32]
 800a20e:	1e5a      	subs	r2, r3, #1
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	425b      	negs	r3, r3
 800a214:	401a      	ands	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	63bb      	str	r3, [r7, #56]	; 0x38
 800a22a:	e022      	b.n	800a272 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a234:	2b00      	cmp	r3, #0
 800a236:	d119      	bne.n	800a26c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2100      	movs	r1, #0
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fd fd91 	bl	8007d64 <create_chain>
 800a242:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a246:	2b01      	cmp	r3, #1
 800a248:	d104      	bne.n	800a254 <f_lseek+0x2a2>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2202      	movs	r2, #2
 800a24e:	755a      	strb	r2, [r3, #21]
 800a250:	2302      	movs	r3, #2
 800a252:	e0ce      	b.n	800a3f2 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25a:	d104      	bne.n	800a266 <f_lseek+0x2b4>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	755a      	strb	r2, [r3, #21]
 800a262:	2301      	movs	r3, #1
 800a264:	e0c5      	b.n	800a3f2 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a26a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a270:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a274:	2b00      	cmp	r3, #0
 800a276:	d067      	beq.n	800a348 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a278:	e03a      	b.n	800a2f0 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	603b      	str	r3, [r7, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	699a      	ldr	r2, [r3, #24]
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	441a      	add	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	7d1b      	ldrb	r3, [r3, #20]
 800a292:	f003 0302 	and.w	r3, r3, #2
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00b      	beq.n	800a2b2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fd fd60 	bl	8007d64 <create_chain>
 800a2a4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d108      	bne.n	800a2be <f_lseek+0x30c>
							ofs = 0; break;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	603b      	str	r3, [r7, #0]
 800a2b0:	e022      	b.n	800a2f8 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fd faff 	bl	80078ba <get_fat>
 800a2bc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c4:	d104      	bne.n	800a2d0 <f_lseek+0x31e>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	755a      	strb	r2, [r3, #21]
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e090      	b.n	800a3f2 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d904      	bls.n	800a2e0 <f_lseek+0x32e>
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	69db      	ldr	r3, [r3, #28]
 800a2da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d304      	bcc.n	800a2ea <f_lseek+0x338>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	755a      	strb	r2, [r3, #21]
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	e083      	b.n	800a3f2 <f_lseek+0x440>
					fp->clust = clst;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2ee:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d8c0      	bhi.n	800a27a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	699a      	ldr	r2, [r3, #24]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	441a      	add	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	899b      	ldrh	r3, [r3, #12]
 800a308:	461a      	mov	r2, r3
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a310:	fb01 f202 	mul.w	r2, r1, r2
 800a314:	1a9b      	subs	r3, r3, r2
 800a316:	2b00      	cmp	r3, #0
 800a318:	d016      	beq.n	800a348 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fd faac 	bl	800787c <clust2sect>
 800a324:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d104      	bne.n	800a336 <f_lseek+0x384>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2202      	movs	r2, #2
 800a330:	755a      	strb	r2, [r3, #21]
 800a332:	2302      	movs	r3, #2
 800a334:	e05d      	b.n	800a3f2 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	899b      	ldrh	r3, [r3, #12]
 800a33a:	461a      	mov	r2, r3
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a344:	4413      	add	r3, r2
 800a346:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	699a      	ldr	r2, [r3, #24]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	429a      	cmp	r2, r3
 800a352:	d90a      	bls.n	800a36a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	699a      	ldr	r2, [r3, #24]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	7d1b      	ldrb	r3, [r3, #20]
 800a360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a364:	b2da      	uxtb	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	8992      	ldrh	r2, [r2, #12]
 800a372:	fbb3 f1f2 	udiv	r1, r3, r2
 800a376:	fb01 f202 	mul.w	r2, r1, r2
 800a37a:	1a9b      	subs	r3, r3, r2
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d036      	beq.n	800a3ee <f_lseek+0x43c>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a1b      	ldr	r3, [r3, #32]
 800a384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a386:	429a      	cmp	r2, r3
 800a388:	d031      	beq.n	800a3ee <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	7d1b      	ldrb	r3, [r3, #20]
 800a38e:	b25b      	sxtb	r3, r3
 800a390:	2b00      	cmp	r3, #0
 800a392:	da18      	bge.n	800a3c6 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	7858      	ldrb	r0, [r3, #1]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1a      	ldr	r2, [r3, #32]
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	f7fc fede 	bl	8007164 <disk_write>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <f_lseek+0x406>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	755a      	strb	r2, [r3, #21]
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e01c      	b.n	800a3f2 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	7d1b      	ldrb	r3, [r3, #20]
 800a3bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	7858      	ldrb	r0, [r3, #1]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3d4:	f7fc fea6 	bl	8007124 <disk_read>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d004      	beq.n	800a3e8 <f_lseek+0x436>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	755a      	strb	r2, [r3, #21]
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e004      	b.n	800a3f2 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3ec:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a3ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3740      	adds	r7, #64	; 0x40
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b088      	sub	sp, #32
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a40e:	e01b      	b.n	800a448 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a410:	f107 0310 	add.w	r3, r7, #16
 800a414:	f107 0114 	add.w	r1, r7, #20
 800a418:	2201      	movs	r2, #1
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f7ff fa2e 	bl	800987c <f_read>
		if (rc != 1) break;
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	2b01      	cmp	r3, #1
 800a424:	d116      	bne.n	800a454 <f_gets+0x5a>
		c = s[0];
 800a426:	7d3b      	ldrb	r3, [r7, #20]
 800a428:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	2b0d      	cmp	r3, #13
 800a42e:	d100      	bne.n	800a432 <f_gets+0x38>
 800a430:	e00a      	b.n	800a448 <f_gets+0x4e>
		*p++ = c;
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	61ba      	str	r2, [r7, #24]
 800a438:	7dfa      	ldrb	r2, [r7, #23]
 800a43a:	701a      	strb	r2, [r3, #0]
		n++;
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	3301      	adds	r3, #1
 800a440:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a442:	7dfb      	ldrb	r3, [r7, #23]
 800a444:	2b0a      	cmp	r3, #10
 800a446:	d007      	beq.n	800a458 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	3b01      	subs	r3, #1
 800a44c:	69fa      	ldr	r2, [r7, #28]
 800a44e:	429a      	cmp	r2, r3
 800a450:	dbde      	blt.n	800a410 <f_gets+0x16>
 800a452:	e002      	b.n	800a45a <f_gets+0x60>
		if (rc != 1) break;
 800a454:	bf00      	nop
 800a456:	e000      	b.n	800a45a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a458:	bf00      	nop
	}
	*p = 0;
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	2200      	movs	r2, #0
 800a45e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <f_gets+0x70>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	e000      	b.n	800a46c <f_gets+0x72>
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3720      	adds	r7, #32
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	2b0a      	cmp	r3, #10
 800a484:	d103      	bne.n	800a48e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a486:	210d      	movs	r1, #13
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7ff fff3 	bl	800a474 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	db25      	blt.n	800a4e6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	60fa      	str	r2, [r7, #12]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	78fa      	ldrb	r2, [r7, #3]
 800a4a6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b3c      	cmp	r3, #60	; 0x3c
 800a4ac:	dd12      	ble.n	800a4d4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6818      	ldr	r0, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f103 010c 	add.w	r1, r3, #12
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	f107 0308 	add.w	r3, r7, #8
 800a4be:	f7ff fb3c 	bl	8009b3a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d101      	bne.n	800a4ce <putc_bfd+0x5a>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e001      	b.n	800a4d2 <putc_bfd+0x5e>
 800a4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	1c5a      	adds	r2, r3, #1
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	609a      	str	r2, [r3, #8]
 800a4e4:	e000      	b.n	800a4e8 <putc_bfd+0x74>
	if (i < 0) return;
 800a4e6:	bf00      	nop
}
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	db16      	blt.n	800a52c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6818      	ldr	r0, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f103 010c 	add.w	r1, r3, #12
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	461a      	mov	r2, r3
 800a50e:	f107 030c 	add.w	r3, r7, #12
 800a512:	f7ff fb12 	bl	8009b3a <f_write>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d107      	bne.n	800a52c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	4293      	cmp	r3, r2
 800a524:	d102      	bne.n	800a52c <putc_flush+0x3e>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	e001      	b.n	800a530 <putc_flush+0x42>
	return EOF;
 800a52c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	605a      	str	r2, [r3, #4]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	685a      	ldr	r2, [r3, #4]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	609a      	str	r2, [r3, #8]
}
 800a556:	bf00      	nop
 800a558:	370c      	adds	r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b096      	sub	sp, #88	; 0x58
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a56c:	f107 030c 	add.w	r3, r7, #12
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	4618      	mov	r0, r3
 800a574:	f7ff ffe0 	bl	800a538 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a578:	e009      	b.n	800a58e <f_puts+0x2c>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	1c5a      	adds	r2, r3, #1
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	781a      	ldrb	r2, [r3, #0]
 800a582:	f107 030c 	add.w	r3, r7, #12
 800a586:	4611      	mov	r1, r2
 800a588:	4618      	mov	r0, r3
 800a58a:	f7ff ff73 	bl	800a474 <putc_bfd>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1f1      	bne.n	800a57a <f_puts+0x18>
	return putc_flush(&pb);
 800a596:	f107 030c 	add.w	r3, r7, #12
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff ffa7 	bl	800a4ee <putc_flush>
 800a5a0:	4603      	mov	r3, r0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3758      	adds	r7, #88	; 0x58
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
	...

0800a5ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a5c2:	4b1f      	ldr	r3, [pc, #124]	; (800a640 <FATFS_LinkDriverEx+0x94>)
 800a5c4:	7a5b      	ldrb	r3, [r3, #9]
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d131      	bne.n	800a630 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a5cc:	4b1c      	ldr	r3, [pc, #112]	; (800a640 <FATFS_LinkDriverEx+0x94>)
 800a5ce:	7a5b      	ldrb	r3, [r3, #9]
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	4b1a      	ldr	r3, [pc, #104]	; (800a640 <FATFS_LinkDriverEx+0x94>)
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a5da:	4b19      	ldr	r3, [pc, #100]	; (800a640 <FATFS_LinkDriverEx+0x94>)
 800a5dc:	7a5b      	ldrb	r3, [r3, #9]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	4a17      	ldr	r2, [pc, #92]	; (800a640 <FATFS_LinkDriverEx+0x94>)
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4413      	add	r3, r2
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a5ea:	4b15      	ldr	r3, [pc, #84]	; (800a640 <FATFS_LinkDriverEx+0x94>)
 800a5ec:	7a5b      	ldrb	r3, [r3, #9]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	4b13      	ldr	r3, [pc, #76]	; (800a640 <FATFS_LinkDriverEx+0x94>)
 800a5f4:	4413      	add	r3, r2
 800a5f6:	79fa      	ldrb	r2, [r7, #7]
 800a5f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a5fa:	4b11      	ldr	r3, [pc, #68]	; (800a640 <FATFS_LinkDriverEx+0x94>)
 800a5fc:	7a5b      	ldrb	r3, [r3, #9]
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	1c5a      	adds	r2, r3, #1
 800a602:	b2d1      	uxtb	r1, r2
 800a604:	4a0e      	ldr	r2, [pc, #56]	; (800a640 <FATFS_LinkDriverEx+0x94>)
 800a606:	7251      	strb	r1, [r2, #9]
 800a608:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a60a:	7dbb      	ldrb	r3, [r7, #22]
 800a60c:	3330      	adds	r3, #48	; 0x30
 800a60e:	b2da      	uxtb	r2, r3
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	3301      	adds	r3, #1
 800a618:	223a      	movs	r2, #58	; 0x3a
 800a61a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	3302      	adds	r3, #2
 800a620:	222f      	movs	r2, #47	; 0x2f
 800a622:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	3303      	adds	r3, #3
 800a628:	2200      	movs	r2, #0
 800a62a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a62c:	2300      	movs	r3, #0
 800a62e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a630:	7dfb      	ldrb	r3, [r7, #23]
}
 800a632:	4618      	mov	r0, r3
 800a634:	371c      	adds	r7, #28
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	200025c4 	.word	0x200025c4

0800a644 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a64e:	2200      	movs	r2, #0
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff ffaa 	bl	800a5ac <FATFS_LinkDriverEx>
 800a658:	4603      	mov	r3, r0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
	...

0800a664 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	6039      	str	r1, [r7, #0]
 800a66e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a670:	88fb      	ldrh	r3, [r7, #6]
 800a672:	2b7f      	cmp	r3, #127	; 0x7f
 800a674:	d802      	bhi.n	800a67c <ff_convert+0x18>
		c = chr;
 800a676:	88fb      	ldrh	r3, [r7, #6]
 800a678:	81fb      	strh	r3, [r7, #14]
 800a67a:	e025      	b.n	800a6c8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00b      	beq.n	800a69a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a682:	88fb      	ldrh	r3, [r7, #6]
 800a684:	2bff      	cmp	r3, #255	; 0xff
 800a686:	d805      	bhi.n	800a694 <ff_convert+0x30>
 800a688:	88fb      	ldrh	r3, [r7, #6]
 800a68a:	3b80      	subs	r3, #128	; 0x80
 800a68c:	4a12      	ldr	r2, [pc, #72]	; (800a6d8 <ff_convert+0x74>)
 800a68e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a692:	e000      	b.n	800a696 <ff_convert+0x32>
 800a694:	2300      	movs	r3, #0
 800a696:	81fb      	strh	r3, [r7, #14]
 800a698:	e016      	b.n	800a6c8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a69a:	2300      	movs	r3, #0
 800a69c:	81fb      	strh	r3, [r7, #14]
 800a69e:	e009      	b.n	800a6b4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a6a0:	89fb      	ldrh	r3, [r7, #14]
 800a6a2:	4a0d      	ldr	r2, [pc, #52]	; (800a6d8 <ff_convert+0x74>)
 800a6a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6a8:	88fa      	ldrh	r2, [r7, #6]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d006      	beq.n	800a6bc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a6ae:	89fb      	ldrh	r3, [r7, #14]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	81fb      	strh	r3, [r7, #14]
 800a6b4:	89fb      	ldrh	r3, [r7, #14]
 800a6b6:	2b7f      	cmp	r3, #127	; 0x7f
 800a6b8:	d9f2      	bls.n	800a6a0 <ff_convert+0x3c>
 800a6ba:	e000      	b.n	800a6be <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a6bc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a6be:	89fb      	ldrh	r3, [r7, #14]
 800a6c0:	3380      	adds	r3, #128	; 0x80
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a6c8:	89fb      	ldrh	r3, [r7, #14]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	0800efac 	.word	0x0800efac

0800a6dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a6e6:	88fb      	ldrh	r3, [r7, #6]
 800a6e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6ec:	d201      	bcs.n	800a6f2 <ff_wtoupper+0x16>
 800a6ee:	4b3e      	ldr	r3, [pc, #248]	; (800a7e8 <ff_wtoupper+0x10c>)
 800a6f0:	e000      	b.n	800a6f4 <ff_wtoupper+0x18>
 800a6f2:	4b3e      	ldr	r3, [pc, #248]	; (800a7ec <ff_wtoupper+0x110>)
 800a6f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	1c9a      	adds	r2, r3, #2
 800a6fa:	617a      	str	r2, [r7, #20]
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a700:	8a7b      	ldrh	r3, [r7, #18]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d068      	beq.n	800a7d8 <ff_wtoupper+0xfc>
 800a706:	88fa      	ldrh	r2, [r7, #6]
 800a708:	8a7b      	ldrh	r3, [r7, #18]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d364      	bcc.n	800a7d8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	1c9a      	adds	r2, r3, #2
 800a712:	617a      	str	r2, [r7, #20]
 800a714:	881b      	ldrh	r3, [r3, #0]
 800a716:	823b      	strh	r3, [r7, #16]
 800a718:	8a3b      	ldrh	r3, [r7, #16]
 800a71a:	0a1b      	lsrs	r3, r3, #8
 800a71c:	81fb      	strh	r3, [r7, #14]
 800a71e:	8a3b      	ldrh	r3, [r7, #16]
 800a720:	b2db      	uxtb	r3, r3
 800a722:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a724:	88fa      	ldrh	r2, [r7, #6]
 800a726:	8a79      	ldrh	r1, [r7, #18]
 800a728:	8a3b      	ldrh	r3, [r7, #16]
 800a72a:	440b      	add	r3, r1
 800a72c:	429a      	cmp	r2, r3
 800a72e:	da49      	bge.n	800a7c4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a730:	89fb      	ldrh	r3, [r7, #14]
 800a732:	2b08      	cmp	r3, #8
 800a734:	d84f      	bhi.n	800a7d6 <ff_wtoupper+0xfa>
 800a736:	a201      	add	r2, pc, #4	; (adr r2, 800a73c <ff_wtoupper+0x60>)
 800a738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73c:	0800a761 	.word	0x0800a761
 800a740:	0800a773 	.word	0x0800a773
 800a744:	0800a789 	.word	0x0800a789
 800a748:	0800a791 	.word	0x0800a791
 800a74c:	0800a799 	.word	0x0800a799
 800a750:	0800a7a1 	.word	0x0800a7a1
 800a754:	0800a7a9 	.word	0x0800a7a9
 800a758:	0800a7b1 	.word	0x0800a7b1
 800a75c:	0800a7b9 	.word	0x0800a7b9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a760:	88fa      	ldrh	r2, [r7, #6]
 800a762:	8a7b      	ldrh	r3, [r7, #18]
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	005b      	lsls	r3, r3, #1
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	4413      	add	r3, r2
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	80fb      	strh	r3, [r7, #6]
 800a770:	e027      	b.n	800a7c2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a772:	88fa      	ldrh	r2, [r7, #6]
 800a774:	8a7b      	ldrh	r3, [r7, #18]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	b29b      	uxth	r3, r3
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	b29b      	uxth	r3, r3
 800a780:	88fa      	ldrh	r2, [r7, #6]
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	80fb      	strh	r3, [r7, #6]
 800a786:	e01c      	b.n	800a7c2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a788:	88fb      	ldrh	r3, [r7, #6]
 800a78a:	3b10      	subs	r3, #16
 800a78c:	80fb      	strh	r3, [r7, #6]
 800a78e:	e018      	b.n	800a7c2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a790:	88fb      	ldrh	r3, [r7, #6]
 800a792:	3b20      	subs	r3, #32
 800a794:	80fb      	strh	r3, [r7, #6]
 800a796:	e014      	b.n	800a7c2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a798:	88fb      	ldrh	r3, [r7, #6]
 800a79a:	3b30      	subs	r3, #48	; 0x30
 800a79c:	80fb      	strh	r3, [r7, #6]
 800a79e:	e010      	b.n	800a7c2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a7a0:	88fb      	ldrh	r3, [r7, #6]
 800a7a2:	3b1a      	subs	r3, #26
 800a7a4:	80fb      	strh	r3, [r7, #6]
 800a7a6:	e00c      	b.n	800a7c2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a7a8:	88fb      	ldrh	r3, [r7, #6]
 800a7aa:	3308      	adds	r3, #8
 800a7ac:	80fb      	strh	r3, [r7, #6]
 800a7ae:	e008      	b.n	800a7c2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a7b0:	88fb      	ldrh	r3, [r7, #6]
 800a7b2:	3b50      	subs	r3, #80	; 0x50
 800a7b4:	80fb      	strh	r3, [r7, #6]
 800a7b6:	e004      	b.n	800a7c2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a7b8:	88fb      	ldrh	r3, [r7, #6]
 800a7ba:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a7be:	80fb      	strh	r3, [r7, #6]
 800a7c0:	bf00      	nop
			}
			break;
 800a7c2:	e008      	b.n	800a7d6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a7c4:	89fb      	ldrh	r3, [r7, #14]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d195      	bne.n	800a6f6 <ff_wtoupper+0x1a>
 800a7ca:	8a3b      	ldrh	r3, [r7, #16]
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a7d4:	e78f      	b.n	800a6f6 <ff_wtoupper+0x1a>
			break;
 800a7d6:	bf00      	nop
	}

	return chr;
 800a7d8:	88fb      	ldrh	r3, [r7, #6]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	371c      	adds	r7, #28
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	0800f0ac 	.word	0x0800f0ac
 800a7ec:	0800f2a0 	.word	0x0800f2a0

0800a7f0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f103 0208 	add.w	r2, r3, #8
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f04f 32ff 	mov.w	r2, #4294967295
 800a808:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f103 0208 	add.w	r2, r3, #8
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f103 0208 	add.w	r2, r3, #8
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a83e:	bf00      	nop
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800a84a:	b480      	push	{r7}
 800a84c:	b085      	sub	sp, #20
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	689a      	ldr	r2, [r3, #8]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	683a      	ldr	r2, [r7, #0]
 800a874:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	1c5a      	adds	r2, r3, #1
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	601a      	str	r2, [r3, #0]
}
 800a886:	bf00      	nop
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800a892:	b480      	push	{r7}
 800a894:	b085      	sub	sp, #20
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a8:	d103      	bne.n	800a8b2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	e00c      	b.n	800a8cc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	e002      	b.n	800a8c0 <vListInsert+0x2e>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d2f6      	bcs.n	800a8ba <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	1c5a      	adds	r2, r3, #1
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	601a      	str	r2, [r3, #0]
}
 800a8f8:	bf00      	nop
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	6892      	ldr	r2, [r2, #8]
 800a91a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	6852      	ldr	r2, [r2, #4]
 800a924:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d103      	bne.n	800a938 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	689a      	ldr	r2, [r3, #8]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	1e5a      	subs	r2, r3, #1
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d104      	bne.n	800a976 <xQueueGenericReset+0x1e>
 800a96c:	492a      	ldr	r1, [pc, #168]	; (800aa18 <xQueueGenericReset+0xc0>)
 800a96e:	f240 100d 	movw	r0, #269	; 0x10d
 800a972:	f7f7 f97f 	bl	8001c74 <vAssertCalled>

    taskENTER_CRITICAL();
 800a976:	f002 fa4f 	bl	800ce18 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a982:	68f9      	ldr	r1, [r7, #12]
 800a984:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a986:	fb01 f303 	mul.w	r3, r1, r3
 800a98a:	441a      	add	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	68f9      	ldr	r1, [r7, #12]
 800a9aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a9ac:	fb01 f303 	mul.w	r3, r1, r3
 800a9b0:	441a      	add	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	22ff      	movs	r2, #255	; 0xff
 800a9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	22ff      	movs	r2, #255	; 0xff
 800a9c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d114      	bne.n	800a9f6 <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d01a      	beq.n	800aa0a <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3310      	adds	r3, #16
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f001 f8d5 	bl	800bb88 <xTaskRemoveFromEventList>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d012      	beq.n	800aa0a <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800a9e4:	4b0d      	ldr	r3, [pc, #52]	; (800aa1c <xQueueGenericReset+0xc4>)
 800a9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	e009      	b.n	800aa0a <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	3310      	adds	r3, #16
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff fef8 	bl	800a7f0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	3324      	adds	r3, #36	; 0x24
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7ff fef3 	bl	800a7f0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800aa0a:	f002 fa31 	bl	800ce70 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800aa0e:	2301      	movs	r3, #1
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	0800eddc 	.word	0x0800eddc
 800aa1c:	e000ed04 	.word	0xe000ed04

0800aa20 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b08a      	sub	sp, #40	; 0x28
 800aa24:	af02      	add	r7, sp, #8
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d104      	bne.n	800aa3e <xQueueGenericCreate+0x1e>
 800aa34:	4921      	ldr	r1, [pc, #132]	; (800aabc <xQueueGenericCreate+0x9c>)
 800aa36:	f44f 70c3 	mov.w	r0, #390	; 0x186
 800aa3a:	f7f7 f91b 	bl	8001c74 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	fb02 f303 	mul.w	r3, r2, r3
 800aa46:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d006      	beq.n	800aa5c <xQueueGenericCreate+0x3c>
 800aa4e:	69fa      	ldr	r2, [r7, #28]
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d101      	bne.n	800aa60 <xQueueGenericCreate+0x40>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <xQueueGenericCreate+0x42>
 800aa60:	2300      	movs	r3, #0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d104      	bne.n	800aa70 <xQueueGenericCreate+0x50>
 800aa66:	4915      	ldr	r1, [pc, #84]	; (800aabc <xQueueGenericCreate+0x9c>)
 800aa68:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 800aa6c:	f7f7 f902 	bl	8001c74 <vAssertCalled>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800aa76:	d904      	bls.n	800aa82 <xQueueGenericCreate+0x62>
 800aa78:	4910      	ldr	r1, [pc, #64]	; (800aabc <xQueueGenericCreate+0x9c>)
 800aa7a:	f240 1091 	movw	r0, #401	; 0x191
 800aa7e:	f7f7 f8f9 	bl	8001c74 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	3350      	adds	r3, #80	; 0x50
 800aa86:	4618      	mov	r0, r3
 800aa88:	f002 fad6 	bl	800d038 <pvPortMalloc>
 800aa8c:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00d      	beq.n	800aab0 <xQueueGenericCreate+0x90>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	3350      	adds	r3, #80	; 0x50
 800aa9c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa9e:	79fa      	ldrb	r2, [r7, #7]
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	68b9      	ldr	r1, [r7, #8]
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f000 f808 	bl	800aac0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800aab0:	69bb      	ldr	r3, [r7, #24]
    }
 800aab2:	4618      	mov	r0, r3
 800aab4:	3720      	adds	r7, #32
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	0800eddc 	.word	0x0800eddc

0800aac0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d103      	bne.n	800aadc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	69ba      	ldr	r2, [r7, #24]
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	e002      	b.n	800aae2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aaee:	2101      	movs	r1, #1
 800aaf0:	69b8      	ldr	r0, [r7, #24]
 800aaf2:	f7ff ff31 	bl	800a958 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	78fa      	ldrb	r2, [r7, #3]
 800aafa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800aafe:	bf00      	nop
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
	...

0800ab08 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08a      	sub	sp, #40	; 0x28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab16:	2300      	movs	r3, #0
 800ab18:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800ab1e:	6a3b      	ldr	r3, [r7, #32]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d104      	bne.n	800ab2e <xQueueGenericSend+0x26>
 800ab24:	496a      	ldr	r1, [pc, #424]	; (800acd0 <xQueueGenericSend+0x1c8>)
 800ab26:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800ab2a:	f7f7 f8a3 	bl	8001c74 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d103      	bne.n	800ab3c <xQueueGenericSend+0x34>
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d101      	bne.n	800ab40 <xQueueGenericSend+0x38>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e000      	b.n	800ab42 <xQueueGenericSend+0x3a>
 800ab40:	2300      	movs	r3, #0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d104      	bne.n	800ab50 <xQueueGenericSend+0x48>
 800ab46:	4962      	ldr	r1, [pc, #392]	; (800acd0 <xQueueGenericSend+0x1c8>)
 800ab48:	f240 300d 	movw	r0, #781	; 0x30d
 800ab4c:	f7f7 f892 	bl	8001c74 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d103      	bne.n	800ab5e <xQueueGenericSend+0x56>
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d101      	bne.n	800ab62 <xQueueGenericSend+0x5a>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e000      	b.n	800ab64 <xQueueGenericSend+0x5c>
 800ab62:	2300      	movs	r3, #0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d104      	bne.n	800ab72 <xQueueGenericSend+0x6a>
 800ab68:	4959      	ldr	r1, [pc, #356]	; (800acd0 <xQueueGenericSend+0x1c8>)
 800ab6a:	f240 300e 	movw	r0, #782	; 0x30e
 800ab6e:	f7f7 f881 	bl	8001c74 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab72:	f001 f997 	bl	800bea4 <xTaskGetSchedulerState>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d102      	bne.n	800ab82 <xQueueGenericSend+0x7a>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <xQueueGenericSend+0x7e>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <xQueueGenericSend+0x80>
 800ab86:	2300      	movs	r3, #0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d104      	bne.n	800ab96 <xQueueGenericSend+0x8e>
 800ab8c:	4950      	ldr	r1, [pc, #320]	; (800acd0 <xQueueGenericSend+0x1c8>)
 800ab8e:	f240 3011 	movw	r0, #785	; 0x311
 800ab92:	f7f7 f86f 	bl	8001c74 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800ab96:	f002 f93f 	bl	800ce18 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab9a:	6a3b      	ldr	r3, [r7, #32]
 800ab9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d302      	bcc.n	800abac <xQueueGenericSend+0xa4>
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d129      	bne.n	800ac00 <xQueueGenericSend+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	68b9      	ldr	r1, [r7, #8]
 800abb0:	6a38      	ldr	r0, [r7, #32]
 800abb2:	f000 fa91 	bl	800b0d8 <prvCopyDataToQueue>
 800abb6:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abb8:	6a3b      	ldr	r3, [r7, #32]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d010      	beq.n	800abe2 <xQueueGenericSend+0xda>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abc0:	6a3b      	ldr	r3, [r7, #32]
 800abc2:	3324      	adds	r3, #36	; 0x24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 ffdf 	bl	800bb88 <xTaskRemoveFromEventList>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d013      	beq.n	800abf8 <xQueueGenericSend+0xf0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800abd0:	4b40      	ldr	r3, [pc, #256]	; (800acd4 <xQueueGenericSend+0x1cc>)
 800abd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	e00a      	b.n	800abf8 <xQueueGenericSend+0xf0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d007      	beq.n	800abf8 <xQueueGenericSend+0xf0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800abe8:	4b3a      	ldr	r3, [pc, #232]	; (800acd4 <xQueueGenericSend+0x1cc>)
 800abea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abee:	601a      	str	r2, [r3, #0]
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800abf8:	f002 f93a 	bl	800ce70 <vPortExitCritical>
                return pdPASS;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e063      	b.n	800acc8 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d103      	bne.n	800ac0e <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800ac06:	f002 f933 	bl	800ce70 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e05c      	b.n	800acc8 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d106      	bne.n	800ac22 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800ac14:	f107 0314 	add.w	r3, r7, #20
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f001 f813 	bl	800bc44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800ac22:	f002 f925 	bl	800ce70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800ac26:	f000 fda7 	bl	800b778 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800ac2a:	f002 f8f5 	bl	800ce18 <vPortEnterCritical>
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac34:	b25b      	sxtb	r3, r3
 800ac36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3a:	d103      	bne.n	800ac44 <xQueueGenericSend+0x13c>
 800ac3c:	6a3b      	ldr	r3, [r7, #32]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac4a:	b25b      	sxtb	r3, r3
 800ac4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac50:	d103      	bne.n	800ac5a <xQueueGenericSend+0x152>
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac5a:	f002 f909 	bl	800ce70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac5e:	1d3a      	adds	r2, r7, #4
 800ac60:	f107 0314 	add.w	r3, r7, #20
 800ac64:	4611      	mov	r1, r2
 800ac66:	4618      	mov	r0, r3
 800ac68:	f001 f802 	bl	800bc70 <xTaskCheckForTimeOut>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d124      	bne.n	800acbc <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac72:	6a38      	ldr	r0, [r7, #32]
 800ac74:	f000 fb28 	bl	800b2c8 <prvIsQueueFull>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d018      	beq.n	800acb0 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	3310      	adds	r3, #16
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	4611      	mov	r1, r2
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 ff36 	bl	800baf8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800ac8c:	6a38      	ldr	r0, [r7, #32]
 800ac8e:	f000 fab3 	bl	800b1f8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800ac92:	f000 fd7f 	bl	800b794 <xTaskResumeAll>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f47f af7c 	bne.w	800ab96 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 800ac9e:	4b0d      	ldr	r3, [pc, #52]	; (800acd4 <xQueueGenericSend+0x1cc>)
 800aca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	e772      	b.n	800ab96 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800acb0:	6a38      	ldr	r0, [r7, #32]
 800acb2:	f000 faa1 	bl	800b1f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800acb6:	f000 fd6d 	bl	800b794 <xTaskResumeAll>
 800acba:	e76c      	b.n	800ab96 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800acbc:	6a38      	ldr	r0, [r7, #32]
 800acbe:	f000 fa9b 	bl	800b1f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800acc2:	f000 fd67 	bl	800b794 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800acc6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3728      	adds	r7, #40	; 0x28
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	0800eddc 	.word	0x0800eddc
 800acd4:	e000ed04 	.word	0xe000ed04

0800acd8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b08c      	sub	sp, #48	; 0x30
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 800acea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acec:	2b00      	cmp	r3, #0
 800acee:	d104      	bne.n	800acfa <xQueueGenericSendFromISR+0x22>
 800acf0:	4943      	ldr	r1, [pc, #268]	; (800ae00 <xQueueGenericSendFromISR+0x128>)
 800acf2:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 800acf6:	f7f6 ffbd 	bl	8001c74 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d103      	bne.n	800ad08 <xQueueGenericSendFromISR+0x30>
 800ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <xQueueGenericSendFromISR+0x34>
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e000      	b.n	800ad0e <xQueueGenericSendFromISR+0x36>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d104      	bne.n	800ad1c <xQueueGenericSendFromISR+0x44>
 800ad12:	493b      	ldr	r1, [pc, #236]	; (800ae00 <xQueueGenericSendFromISR+0x128>)
 800ad14:	f240 30e1 	movw	r0, #993	; 0x3e1
 800ad18:	f7f6 ffac 	bl	8001c74 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d103      	bne.n	800ad2a <xQueueGenericSendFromISR+0x52>
 800ad22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d101      	bne.n	800ad2e <xQueueGenericSendFromISR+0x56>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e000      	b.n	800ad30 <xQueueGenericSendFromISR+0x58>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d104      	bne.n	800ad3e <xQueueGenericSendFromISR+0x66>
 800ad34:	4932      	ldr	r1, [pc, #200]	; (800ae00 <xQueueGenericSendFromISR+0x128>)
 800ad36:	f240 30e2 	movw	r0, #994	; 0x3e2
 800ad3a:	f7f6 ff9b 	bl	8001c74 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad3e:	f002 f947 	bl	800cfd0 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800ad42:	f3ef 8211 	mrs	r2, BASEPRI
 800ad46:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ad4a:	b672      	cpsid	i
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	b662      	cpsie	i
 800ad5a:	61ba      	str	r2, [r7, #24]
 800ad5c:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800ad5e:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad60:	627b      	str	r3, [r7, #36]	; 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d302      	bcc.n	800ad74 <xQueueGenericSendFromISR+0x9c>
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	d138      	bne.n	800ade6 <xQueueGenericSendFromISR+0x10e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad82:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad8a:	f000 f9a5 	bl	800b0d8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800ad8e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ad92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad96:	d112      	bne.n	800adbe <xQueueGenericSendFromISR+0xe6>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d01f      	beq.n	800ade0 <xQueueGenericSendFromISR+0x108>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada2:	3324      	adds	r3, #36	; 0x24
 800ada4:	4618      	mov	r0, r3
 800ada6:	f000 feef 	bl	800bb88 <xTaskRemoveFromEventList>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d017      	beq.n	800ade0 <xQueueGenericSendFromISR+0x108>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d014      	beq.n	800ade0 <xQueueGenericSendFromISR+0x108>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	601a      	str	r2, [r3, #0]
 800adbc:	e010      	b.n	800ade0 <xQueueGenericSendFromISR+0x108>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800adbe:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800adc2:	2b7f      	cmp	r3, #127	; 0x7f
 800adc4:	d104      	bne.n	800add0 <xQueueGenericSendFromISR+0xf8>
 800adc6:	490e      	ldr	r1, [pc, #56]	; (800ae00 <xQueueGenericSendFromISR+0x128>)
 800adc8:	f240 406b 	movw	r0, #1131	; 0x46b
 800adcc:	f7f6 ff52 	bl	8001c74 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800add0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800add4:	3301      	adds	r3, #1
 800add6:	b2db      	uxtb	r3, r3
 800add8:	b25a      	sxtb	r2, r3
 800adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800addc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800ade0:	2301      	movs	r3, #1
 800ade2:	62fb      	str	r3, [r7, #44]	; 0x2c
        {
 800ade4:	e001      	b.n	800adea <xQueueGenericSendFromISR+0x112>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adec:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800adf4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800adf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3730      	adds	r7, #48	; 0x30
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	0800eddc 	.word	0x0800eddc

0800ae04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b08a      	sub	sp, #40	; 0x28
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800ae10:	2300      	movs	r3, #0
 800ae12:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d104      	bne.n	800ae28 <xQueueReceive+0x24>
 800ae1e:	495f      	ldr	r1, [pc, #380]	; (800af9c <xQueueReceive+0x198>)
 800ae20:	f240 502f 	movw	r0, #1327	; 0x52f
 800ae24:	f7f6 ff26 	bl	8001c74 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d103      	bne.n	800ae36 <xQueueReceive+0x32>
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <xQueueReceive+0x36>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <xQueueReceive+0x38>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d104      	bne.n	800ae4a <xQueueReceive+0x46>
 800ae40:	4956      	ldr	r1, [pc, #344]	; (800af9c <xQueueReceive+0x198>)
 800ae42:	f240 5033 	movw	r0, #1331	; 0x533
 800ae46:	f7f6 ff15 	bl	8001c74 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae4a:	f001 f82b 	bl	800bea4 <xTaskGetSchedulerState>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d102      	bne.n	800ae5a <xQueueReceive+0x56>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <xQueueReceive+0x5a>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e000      	b.n	800ae60 <xQueueReceive+0x5c>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d104      	bne.n	800ae6e <xQueueReceive+0x6a>
 800ae64:	494d      	ldr	r1, [pc, #308]	; (800af9c <xQueueReceive+0x198>)
 800ae66:	f44f 60a7 	mov.w	r0, #1336	; 0x538
 800ae6a:	f7f6 ff03 	bl	8001c74 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800ae6e:	f001 ffd3 	bl	800ce18 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae72:	6a3b      	ldr	r3, [r7, #32]
 800ae74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae76:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d01f      	beq.n	800aebe <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae7e:	68b9      	ldr	r1, [r7, #8]
 800ae80:	6a38      	ldr	r0, [r7, #32]
 800ae82:	f000 f993 	bl	800b1ac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	1e5a      	subs	r2, r3, #1
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00f      	beq.n	800aeb6 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	3310      	adds	r3, #16
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f000 fe74 	bl	800bb88 <xTaskRemoveFromEventList>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d007      	beq.n	800aeb6 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800aea6:	4b3e      	ldr	r3, [pc, #248]	; (800afa0 <xQueueReceive+0x19c>)
 800aea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800aeb6:	f001 ffdb 	bl	800ce70 <vPortExitCritical>
                return pdPASS;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e069      	b.n	800af92 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d103      	bne.n	800aecc <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800aec4:	f001 ffd4 	bl	800ce70 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800aec8:	2300      	movs	r3, #0
 800aeca:	e062      	b.n	800af92 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800aecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d106      	bne.n	800aee0 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800aed2:	f107 0314 	add.w	r3, r7, #20
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 feb4 	bl	800bc44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800aedc:	2301      	movs	r3, #1
 800aede:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800aee0:	f001 ffc6 	bl	800ce70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800aee4:	f000 fc48 	bl	800b778 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800aee8:	f001 ff96 	bl	800ce18 <vPortEnterCritical>
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aef2:	b25b      	sxtb	r3, r3
 800aef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef8:	d103      	bne.n	800af02 <xQueueReceive+0xfe>
 800aefa:	6a3b      	ldr	r3, [r7, #32]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af02:	6a3b      	ldr	r3, [r7, #32]
 800af04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af08:	b25b      	sxtb	r3, r3
 800af0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0e:	d103      	bne.n	800af18 <xQueueReceive+0x114>
 800af10:	6a3b      	ldr	r3, [r7, #32]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af18:	f001 ffaa 	bl	800ce70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af1c:	1d3a      	adds	r2, r7, #4
 800af1e:	f107 0314 	add.w	r3, r7, #20
 800af22:	4611      	mov	r1, r2
 800af24:	4618      	mov	r0, r3
 800af26:	f000 fea3 	bl	800bc70 <xTaskCheckForTimeOut>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d123      	bne.n	800af78 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af30:	6a38      	ldr	r0, [r7, #32]
 800af32:	f000 f9b3 	bl	800b29c <prvIsQueueEmpty>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d017      	beq.n	800af6c <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	3324      	adds	r3, #36	; 0x24
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	4611      	mov	r1, r2
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fdd7 	bl	800baf8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800af4a:	6a38      	ldr	r0, [r7, #32]
 800af4c:	f000 f954 	bl	800b1f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800af50:	f000 fc20 	bl	800b794 <xTaskResumeAll>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d189      	bne.n	800ae6e <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 800af5a:	4b11      	ldr	r3, [pc, #68]	; (800afa0 <xQueueReceive+0x19c>)
 800af5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	e780      	b.n	800ae6e <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800af6c:	6a38      	ldr	r0, [r7, #32]
 800af6e:	f000 f943 	bl	800b1f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800af72:	f000 fc0f 	bl	800b794 <xTaskResumeAll>
 800af76:	e77a      	b.n	800ae6e <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800af78:	6a38      	ldr	r0, [r7, #32]
 800af7a:	f000 f93d 	bl	800b1f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800af7e:	f000 fc09 	bl	800b794 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af82:	6a38      	ldr	r0, [r7, #32]
 800af84:	f000 f98a 	bl	800b29c <prvIsQueueEmpty>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f43f af6f 	beq.w	800ae6e <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800af90:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800af92:	4618      	mov	r0, r3
 800af94:	3728      	adds	r7, #40	; 0x28
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	0800eddc 	.word	0x0800eddc
 800afa0:	e000ed04 	.word	0xe000ed04

0800afa4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b08c      	sub	sp, #48	; 0x30
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 800afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d104      	bne.n	800afc4 <xQueueReceiveFromISR+0x20>
 800afba:	4939      	ldr	r1, [pc, #228]	; (800b0a0 <xQueueReceiveFromISR+0xfc>)
 800afbc:	f240 702f 	movw	r0, #1839	; 0x72f
 800afc0:	f7f6 fe58 	bl	8001c74 <vAssertCalled>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d103      	bne.n	800afd2 <xQueueReceiveFromISR+0x2e>
 800afca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d101      	bne.n	800afd6 <xQueueReceiveFromISR+0x32>
 800afd2:	2301      	movs	r3, #1
 800afd4:	e000      	b.n	800afd8 <xQueueReceiveFromISR+0x34>
 800afd6:	2300      	movs	r3, #0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d104      	bne.n	800afe6 <xQueueReceiveFromISR+0x42>
 800afdc:	4930      	ldr	r1, [pc, #192]	; (800b0a0 <xQueueReceiveFromISR+0xfc>)
 800afde:	f44f 60e6 	mov.w	r0, #1840	; 0x730
 800afe2:	f7f6 fe47 	bl	8001c74 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afe6:	f001 fff3 	bl	800cfd0 <vPortValidateInterruptPriority>
        __asm volatile
 800afea:	f3ef 8211 	mrs	r2, BASEPRI
 800afee:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aff2:	b672      	cpsid	i
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	b662      	cpsie	i
 800b002:	61ba      	str	r2, [r7, #24]
 800b004:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 800b006:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b008:	627b      	str	r3, [r7, #36]	; 0x24
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00e:	623b      	str	r3, [r7, #32]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b010:	6a3b      	ldr	r3, [r7, #32]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d036      	beq.n	800b084 <xQueueReceiveFromISR+0xe0>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800b016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b01c:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b022:	f000 f8c3 	bl	800b1ac <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	1e5a      	subs	r2, r3, #1
 800b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02c:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800b02e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b036:	d112      	bne.n	800b05e <xQueueReceiveFromISR+0xba>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d01e      	beq.n	800b07e <xQueueReceiveFromISR+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	3310      	adds	r3, #16
 800b044:	4618      	mov	r0, r3
 800b046:	f000 fd9f 	bl	800bb88 <xTaskRemoveFromEventList>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d016      	beq.n	800b07e <xQueueReceiveFromISR+0xda>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d013      	beq.n	800b07e <xQueueReceiveFromISR+0xda>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2201      	movs	r2, #1
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	e00f      	b.n	800b07e <xQueueReceiveFromISR+0xda>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800b05e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b062:	2b7f      	cmp	r3, #127	; 0x7f
 800b064:	d104      	bne.n	800b070 <xQueueReceiveFromISR+0xcc>
 800b066:	490e      	ldr	r1, [pc, #56]	; (800b0a0 <xQueueReceiveFromISR+0xfc>)
 800b068:	f240 7073 	movw	r0, #1907	; 0x773
 800b06c:	f7f6 fe02 	bl	8001c74 <vAssertCalled>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b070:	7ffb      	ldrb	r3, [r7, #31]
 800b072:	3301      	adds	r3, #1
 800b074:	b2db      	uxtb	r3, r3
 800b076:	b25a      	sxtb	r2, r3
 800b078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800b07e:	2301      	movs	r3, #1
 800b080:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b082:	e001      	b.n	800b088 <xQueueReceiveFromISR+0xe4>
        }
        else
        {
            xReturn = pdFAIL;
 800b084:	2300      	movs	r3, #0
 800b086:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	613b      	str	r3, [r7, #16]
        __asm volatile
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	f383 8811 	msr	BASEPRI, r3
    }
 800b092:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800b094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b096:	4618      	mov	r0, r3
 800b098:	3730      	adds	r7, #48	; 0x30
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	0800eddc 	.word	0x0800eddc

0800b0a4 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d104      	bne.n	800b0bc <uxQueueMessagesWaiting+0x18>
 800b0b2:	4908      	ldr	r1, [pc, #32]	; (800b0d4 <uxQueueMessagesWaiting+0x30>)
 800b0b4:	f240 70c1 	movw	r0, #1985	; 0x7c1
 800b0b8:	f7f6 fddc 	bl	8001c74 <vAssertCalled>

    taskENTER_CRITICAL();
 800b0bc:	f001 feac 	bl	800ce18 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c4:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800b0c6:	f001 fed3 	bl	800ce70 <vPortExitCritical>

    return uxReturn;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	0800eddc 	.word	0x0800eddc

0800b0d8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ec:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10d      	bne.n	800b112 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d14d      	bne.n	800b19a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	4618      	mov	r0, r3
 800b104:	f000 feec 	bl	800bee0 <xTaskPriorityDisinherit>
 800b108:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	609a      	str	r2, [r3, #8]
 800b110:	e043      	b.n	800b19a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d119      	bne.n	800b14c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6858      	ldr	r0, [r3, #4]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b120:	461a      	mov	r2, r3
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	f002 ffae 	bl	800e084 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b130:	441a      	add	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	685a      	ldr	r2, [r3, #4]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d32b      	bcc.n	800b19a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	605a      	str	r2, [r3, #4]
 800b14a:	e026      	b.n	800b19a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	68d8      	ldr	r0, [r3, #12]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b154:	461a      	mov	r2, r3
 800b156:	68b9      	ldr	r1, [r7, #8]
 800b158:	f002 ff94 	bl	800e084 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	68da      	ldr	r2, [r3, #12]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b164:	425b      	negs	r3, r3
 800b166:	441a      	add	r2, r3
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	68da      	ldr	r2, [r3, #12]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	429a      	cmp	r2, r3
 800b176:	d207      	bcs.n	800b188 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	689a      	ldr	r2, [r3, #8]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b180:	425b      	negs	r3, r3
 800b182:	441a      	add	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	d105      	bne.n	800b19a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	3b01      	subs	r3, #1
 800b198:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	1c5a      	adds	r2, r3, #1
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800b1a2:	697b      	ldr	r3, [r7, #20]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3718      	adds	r7, #24
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d018      	beq.n	800b1f0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	68da      	ldr	r2, [r3, #12]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c6:	441a      	add	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	68da      	ldr	r2, [r3, #12]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d303      	bcc.n	800b1e0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	68d9      	ldr	r1, [r3, #12]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	6838      	ldr	r0, [r7, #0]
 800b1ec:	f002 ff4a 	bl	800e084 <memcpy>
    }
}
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800b200:	f001 fe0a 	bl	800ce18 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b20a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800b20c:	e011      	b.n	800b232 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b212:	2b00      	cmp	r3, #0
 800b214:	d012      	beq.n	800b23c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	3324      	adds	r3, #36	; 0x24
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 fcb4 	bl	800bb88 <xTaskRemoveFromEventList>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800b226:	f000 fd7f 	bl	800bd28 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800b22a:	7bfb      	ldrb	r3, [r7, #15]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800b232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b236:	2b00      	cmp	r3, #0
 800b238:	dce9      	bgt.n	800b20e <prvUnlockQueue+0x16>
 800b23a:	e000      	b.n	800b23e <prvUnlockQueue+0x46>
                        break;
 800b23c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	22ff      	movs	r2, #255	; 0xff
 800b242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800b246:	f001 fe13 	bl	800ce70 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800b24a:	f001 fde5 	bl	800ce18 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b254:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800b256:	e011      	b.n	800b27c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d012      	beq.n	800b286 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	3310      	adds	r3, #16
 800b264:	4618      	mov	r0, r3
 800b266:	f000 fc8f 	bl	800bb88 <xTaskRemoveFromEventList>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d001      	beq.n	800b274 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800b270:	f000 fd5a 	bl	800bd28 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800b274:	7bbb      	ldrb	r3, [r7, #14]
 800b276:	3b01      	subs	r3, #1
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800b27c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b280:	2b00      	cmp	r3, #0
 800b282:	dce9      	bgt.n	800b258 <prvUnlockQueue+0x60>
 800b284:	e000      	b.n	800b288 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800b286:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	22ff      	movs	r2, #255	; 0xff
 800b28c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800b290:	f001 fdee 	bl	800ce70 <vPortExitCritical>
}
 800b294:	bf00      	nop
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800b2a4:	f001 fdb8 	bl	800ce18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d102      	bne.n	800b2b6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	e001      	b.n	800b2ba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800b2ba:	f001 fdd9 	bl	800ce70 <vPortExitCritical>

    return xReturn;
 800b2be:	68fb      	ldr	r3, [r7, #12]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3710      	adds	r7, #16
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800b2d0:	f001 fda2 	bl	800ce18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d102      	bne.n	800b2e6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	60fb      	str	r3, [r7, #12]
 800b2e4:	e001      	b.n	800b2ea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800b2ea:	f001 fdc1 	bl	800ce70 <vPortExitCritical>

    return xReturn;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d104      	bne.n	800b314 <xQueueIsQueueFullFromISR+0x1c>
 800b30a:	490a      	ldr	r1, [pc, #40]	; (800b334 <xQueueIsQueueFullFromISR+0x3c>)
 800b30c:	f640 1071 	movw	r0, #2417	; 0x971
 800b310:	f7f6 fcb0 	bl	8001c74 <vAssertCalled>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d102      	bne.n	800b326 <xQueueIsQueueFullFromISR+0x2e>
    {
        xReturn = pdTRUE;
 800b320:	2301      	movs	r3, #1
 800b322:	60fb      	str	r3, [r7, #12]
 800b324:	e001      	b.n	800b32a <xQueueIsQueueFullFromISR+0x32>
    }
    else
    {
        xReturn = pdFALSE;
 800b326:	2300      	movs	r3, #0
 800b328:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800b32a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	0800eddc 	.word	0x0800eddc

0800b338 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b342:	2300      	movs	r3, #0
 800b344:	60fb      	str	r3, [r7, #12]
 800b346:	e014      	b.n	800b372 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b348:	4a0f      	ldr	r2, [pc, #60]	; (800b388 <vQueueAddToRegistry+0x50>)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10b      	bne.n	800b36c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b354:	490c      	ldr	r1, [pc, #48]	; (800b388 <vQueueAddToRegistry+0x50>)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800b35e:	4a0a      	ldr	r2, [pc, #40]	; (800b388 <vQueueAddToRegistry+0x50>)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	00db      	lsls	r3, r3, #3
 800b364:	4413      	add	r3, r2
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800b36a:	e006      	b.n	800b37a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3301      	adds	r3, #1
 800b370:	60fb      	str	r3, [r7, #12]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2b07      	cmp	r3, #7
 800b376:	d9e7      	bls.n	800b348 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800b378:	bf00      	nop
 800b37a:	bf00      	nop
 800b37c:	3714      	adds	r7, #20
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	200025d0 	.word	0x200025d0

0800b38c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800b39c:	f001 fd3c 	bl	800ce18 <vPortEnterCritical>
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3a6:	b25b      	sxtb	r3, r3
 800b3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ac:	d103      	bne.n	800b3b6 <vQueueWaitForMessageRestricted+0x2a>
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3bc:	b25b      	sxtb	r3, r3
 800b3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c2:	d103      	bne.n	800b3cc <vQueueWaitForMessageRestricted+0x40>
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3cc:	f001 fd50 	bl	800ce70 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d106      	bne.n	800b3e6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	3324      	adds	r3, #36	; 0x24
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	68b9      	ldr	r1, [r7, #8]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 fba9 	bl	800bb38 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800b3e6:	6978      	ldr	r0, [r7, #20]
 800b3e8:	f7ff ff06 	bl	800b1f8 <prvUnlockQueue>
    }
 800b3ec:	bf00      	nop
 800b3ee:	3718      	adds	r7, #24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b08c      	sub	sp, #48	; 0x30
 800b3f8:	af04      	add	r7, sp, #16
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	4613      	mov	r3, r2
 800b402:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b404:	88fb      	ldrh	r3, [r7, #6]
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4618      	mov	r0, r3
 800b40a:	f001 fe15 	bl	800d038 <pvPortMalloc>
 800b40e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00e      	beq.n	800b434 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b416:	2058      	movs	r0, #88	; 0x58
 800b418:	f001 fe0e 	bl	800d038 <pvPortMalloc>
 800b41c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	631a      	str	r2, [r3, #48]	; 0x30
 800b42a:	e005      	b.n	800b438 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800b42c:	6978      	ldr	r0, [r7, #20]
 800b42e:	f001 fed1 	bl	800d1d4 <vPortFree>
 800b432:	e001      	b.n	800b438 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800b434:	2300      	movs	r3, #0
 800b436:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d013      	beq.n	800b466 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b43e:	88fa      	ldrh	r2, [r7, #6]
 800b440:	2300      	movs	r3, #0
 800b442:	9303      	str	r3, [sp, #12]
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	9302      	str	r3, [sp, #8]
 800b448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	68b9      	ldr	r1, [r7, #8]
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 f80f 	bl	800b478 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b45a:	69f8      	ldr	r0, [r7, #28]
 800b45c:	f000 f89e 	bl	800b59c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800b460:	2301      	movs	r3, #1
 800b462:	61bb      	str	r3, [r7, #24]
 800b464:	e002      	b.n	800b46c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b466:	f04f 33ff 	mov.w	r3, #4294967295
 800b46a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b46c:	69bb      	ldr	r3, [r7, #24]
    }
 800b46e:	4618      	mov	r0, r3
 800b470:	3720      	adds	r7, #32
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
	...

0800b478 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
 800b484:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b488:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	461a      	mov	r2, r3
 800b490:	21a5      	movs	r1, #165	; 0xa5
 800b492:	f002 fe05 	bl	800e0a0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b49a:	6879      	ldr	r1, [r7, #4]
 800b49c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b4a0:	440b      	add	r3, r1
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	f023 0307 	bic.w	r3, r3, #7
 800b4ae:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	f003 0307 	and.w	r3, r3, #7
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d004      	beq.n	800b4c4 <prvInitialiseNewTask+0x4c>
 800b4ba:	4937      	ldr	r1, [pc, #220]	; (800b598 <prvInitialiseNewTask+0x120>)
 800b4bc:	f240 3069 	movw	r0, #873	; 0x369
 800b4c0:	f7f6 fbd8 	bl	8001c74 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d01f      	beq.n	800b50a <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	617b      	str	r3, [r7, #20]
 800b4ce:	e012      	b.n	800b4f6 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	7819      	ldrb	r1, [r3, #0]
 800b4d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	4413      	add	r3, r2
 800b4de:	3334      	adds	r3, #52	; 0x34
 800b4e0:	460a      	mov	r2, r1
 800b4e2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d006      	beq.n	800b4fe <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	617b      	str	r3, [r7, #20]
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	2b09      	cmp	r3, #9
 800b4fa:	d9e9      	bls.n	800b4d0 <prvInitialiseNewTask+0x58>
 800b4fc:	e000      	b.n	800b500 <prvInitialiseNewTask+0x88>
            {
                break;
 800b4fe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b502:	2200      	movs	r2, #0
 800b504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b508:	e003      	b.n	800b512 <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b512:	6a3b      	ldr	r3, [r7, #32]
 800b514:	2b04      	cmp	r3, #4
 800b516:	d901      	bls.n	800b51c <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b518:	2304      	movs	r3, #4
 800b51a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800b51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51e:	6a3a      	ldr	r2, [r7, #32]
 800b520:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	6a3a      	ldr	r2, [r7, #32]
 800b526:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800b528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52a:	2200      	movs	r2, #0
 800b52c:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b530:	3304      	adds	r3, #4
 800b532:	4618      	mov	r0, r3
 800b534:	f7ff f97c 	bl	800a830 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53a:	3318      	adds	r3, #24
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff f977 	bl	800a830 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b546:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b548:	6a3b      	ldr	r3, [r7, #32]
 800b54a:	f1c3 0205 	rsb	r2, r3, #5
 800b54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b550:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b556:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55a:	3350      	adds	r3, #80	; 0x50
 800b55c:	2204      	movs	r2, #4
 800b55e:	2100      	movs	r1, #0
 800b560:	4618      	mov	r0, r3
 800b562:	f002 fd9d 	bl	800e0a0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800b566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b568:	3354      	adds	r3, #84	; 0x54
 800b56a:	2201      	movs	r2, #1
 800b56c:	2100      	movs	r1, #0
 800b56e:	4618      	mov	r0, r3
 800b570:	f002 fd96 	bl	800e0a0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	68f9      	ldr	r1, [r7, #12]
 800b578:	6938      	ldr	r0, [r7, #16]
 800b57a:	f001 fb45 	bl	800cc08 <pxPortInitialiseStack>
 800b57e:	4602      	mov	r2, r0
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	d002      	beq.n	800b590 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b58e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b590:	bf00      	nop
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	0800edfc 	.word	0x0800edfc

0800b59c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800b5a4:	f001 fc38 	bl	800ce18 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800b5a8:	4b2c      	ldr	r3, [pc, #176]	; (800b65c <prvAddNewTaskToReadyList+0xc0>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	4a2b      	ldr	r2, [pc, #172]	; (800b65c <prvAddNewTaskToReadyList+0xc0>)
 800b5b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800b5b2:	4b2b      	ldr	r3, [pc, #172]	; (800b660 <prvAddNewTaskToReadyList+0xc4>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d109      	bne.n	800b5ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800b5ba:	4a29      	ldr	r2, [pc, #164]	; (800b660 <prvAddNewTaskToReadyList+0xc4>)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b5c0:	4b26      	ldr	r3, [pc, #152]	; (800b65c <prvAddNewTaskToReadyList+0xc0>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d110      	bne.n	800b5ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800b5c8:	f000 fbd2 	bl	800bd70 <prvInitialiseTaskLists>
 800b5cc:	e00d      	b.n	800b5ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800b5ce:	4b25      	ldr	r3, [pc, #148]	; (800b664 <prvAddNewTaskToReadyList+0xc8>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d109      	bne.n	800b5ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b5d6:	4b22      	ldr	r3, [pc, #136]	; (800b660 <prvAddNewTaskToReadyList+0xc4>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d802      	bhi.n	800b5ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800b5e4:	4a1e      	ldr	r2, [pc, #120]	; (800b660 <prvAddNewTaskToReadyList+0xc4>)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800b5ea:	4b1f      	ldr	r3, [pc, #124]	; (800b668 <prvAddNewTaskToReadyList+0xcc>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	4a1d      	ldr	r2, [pc, #116]	; (800b668 <prvAddNewTaskToReadyList+0xcc>)
 800b5f2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b5f4:	4b1c      	ldr	r3, [pc, #112]	; (800b668 <prvAddNewTaskToReadyList+0xcc>)
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	2201      	movs	r2, #1
 800b602:	409a      	lsls	r2, r3
 800b604:	4b19      	ldr	r3, [pc, #100]	; (800b66c <prvAddNewTaskToReadyList+0xd0>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4313      	orrs	r3, r2
 800b60a:	4a18      	ldr	r2, [pc, #96]	; (800b66c <prvAddNewTaskToReadyList+0xd0>)
 800b60c:	6013      	str	r3, [r2, #0]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b612:	4613      	mov	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4413      	add	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4a15      	ldr	r2, [pc, #84]	; (800b670 <prvAddNewTaskToReadyList+0xd4>)
 800b61c:	441a      	add	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3304      	adds	r3, #4
 800b622:	4619      	mov	r1, r3
 800b624:	4610      	mov	r0, r2
 800b626:	f7ff f910 	bl	800a84a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800b62a:	f001 fc21 	bl	800ce70 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800b62e:	4b0d      	ldr	r3, [pc, #52]	; (800b664 <prvAddNewTaskToReadyList+0xc8>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00e      	beq.n	800b654 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b636:	4b0a      	ldr	r3, [pc, #40]	; (800b660 <prvAddNewTaskToReadyList+0xc4>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b640:	429a      	cmp	r2, r3
 800b642:	d207      	bcs.n	800b654 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800b644:	4b0b      	ldr	r3, [pc, #44]	; (800b674 <prvAddNewTaskToReadyList+0xd8>)
 800b646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b654:	bf00      	nop
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	200026e8 	.word	0x200026e8
 800b660:	20002610 	.word	0x20002610
 800b664:	200026f4 	.word	0x200026f4
 800b668:	20002704 	.word	0x20002704
 800b66c:	200026f0 	.word	0x200026f0
 800b670:	20002614 	.word	0x20002614
 800b674:	e000ed04 	.word	0xe000ed04

0800b678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800b680:	2300      	movs	r3, #0
 800b682:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d011      	beq.n	800b6ae <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800b68a:	4b10      	ldr	r3, [pc, #64]	; (800b6cc <vTaskDelay+0x54>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d004      	beq.n	800b69c <vTaskDelay+0x24>
 800b692:	490f      	ldr	r1, [pc, #60]	; (800b6d0 <vTaskDelay+0x58>)
 800b694:	f240 504a 	movw	r0, #1354	; 0x54a
 800b698:	f7f6 faec 	bl	8001c74 <vAssertCalled>
            vTaskSuspendAll();
 800b69c:	f000 f86c 	bl	800b778 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fec2 	bl	800c42c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800b6a8:	f000 f874 	bl	800b794 <xTaskResumeAll>
 800b6ac:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d107      	bne.n	800b6c4 <vTaskDelay+0x4c>
        {
            portYIELD_WITHIN_API();
 800b6b4:	4b07      	ldr	r3, [pc, #28]	; (800b6d4 <vTaskDelay+0x5c>)
 800b6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ba:	601a      	str	r2, [r3, #0]
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b6c4:	bf00      	nop
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	20002710 	.word	0x20002710
 800b6d0:	0800edfc 	.word	0x0800edfc
 800b6d4:	e000ed04 	.word	0xe000ed04

0800b6d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800b6de:	4b1e      	ldr	r3, [pc, #120]	; (800b758 <vTaskStartScheduler+0x80>)
 800b6e0:	9301      	str	r3, [sp, #4]
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	2282      	movs	r2, #130	; 0x82
 800b6ea:	491c      	ldr	r1, [pc, #112]	; (800b75c <vTaskStartScheduler+0x84>)
 800b6ec:	481c      	ldr	r0, [pc, #112]	; (800b760 <vTaskStartScheduler+0x88>)
 800b6ee:	f7ff fe81 	bl	800b3f4 <xTaskCreate>
 800b6f2:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d102      	bne.n	800b700 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800b6fa:	f000 fefd 	bl	800c4f8 <xTimerCreateTimerTask>
 800b6fe:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d118      	bne.n	800b738 <vTaskStartScheduler+0x60>
        __asm volatile
 800b706:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b70a:	b672      	cpsid	i
 800b70c:	f383 8811 	msr	BASEPRI, r3
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	b662      	cpsie	i
 800b71a:	603b      	str	r3, [r7, #0]
    }
 800b71c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800b71e:	4b11      	ldr	r3, [pc, #68]	; (800b764 <vTaskStartScheduler+0x8c>)
 800b720:	f04f 32ff 	mov.w	r2, #4294967295
 800b724:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800b726:	4b10      	ldr	r3, [pc, #64]	; (800b768 <vTaskStartScheduler+0x90>)
 800b728:	2201      	movs	r2, #1
 800b72a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b72c:	4b0f      	ldr	r3, [pc, #60]	; (800b76c <vTaskStartScheduler+0x94>)
 800b72e:	2200      	movs	r2, #0
 800b730:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800b732:	f001 faef 	bl	800cd14 <xPortStartScheduler>
 800b736:	e008      	b.n	800b74a <vTaskStartScheduler+0x72>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73e:	d104      	bne.n	800b74a <vTaskStartScheduler+0x72>
 800b740:	490b      	ldr	r1, [pc, #44]	; (800b770 <vTaskStartScheduler+0x98>)
 800b742:	f640 0041 	movw	r0, #2113	; 0x841
 800b746:	f7f6 fa95 	bl	8001c74 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800b74a:	4b0a      	ldr	r3, [pc, #40]	; (800b774 <vTaskStartScheduler+0x9c>)
 800b74c:	681b      	ldr	r3, [r3, #0]
}
 800b74e:	bf00      	nop
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	2000270c 	.word	0x2000270c
 800b75c:	0800ee1c 	.word	0x0800ee1c
 800b760:	0800bd41 	.word	0x0800bd41
 800b764:	20002708 	.word	0x20002708
 800b768:	200026f4 	.word	0x200026f4
 800b76c:	200026ec 	.word	0x200026ec
 800b770:	0800edfc 	.word	0x0800edfc
 800b774:	20000040 	.word	0x20000040

0800b778 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b778:	b480      	push	{r7}
 800b77a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800b77c:	4b04      	ldr	r3, [pc, #16]	; (800b790 <vTaskSuspendAll+0x18>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3301      	adds	r3, #1
 800b782:	4a03      	ldr	r2, [pc, #12]	; (800b790 <vTaskSuspendAll+0x18>)
 800b784:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800b786:	bf00      	nop
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr
 800b790:	20002710 	.word	0x20002710

0800b794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800b79a:	2300      	movs	r3, #0
 800b79c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800b7a2:	4b3e      	ldr	r3, [pc, #248]	; (800b89c <xTaskResumeAll+0x108>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d104      	bne.n	800b7b4 <xTaskResumeAll+0x20>
 800b7aa:	493d      	ldr	r1, [pc, #244]	; (800b8a0 <xTaskResumeAll+0x10c>)
 800b7ac:	f640 00b4 	movw	r0, #2228	; 0x8b4
 800b7b0:	f7f6 fa60 	bl	8001c74 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800b7b4:	f001 fb30 	bl	800ce18 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800b7b8:	4b38      	ldr	r3, [pc, #224]	; (800b89c <xTaskResumeAll+0x108>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	4a37      	ldr	r2, [pc, #220]	; (800b89c <xTaskResumeAll+0x108>)
 800b7c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7c2:	4b36      	ldr	r3, [pc, #216]	; (800b89c <xTaskResumeAll+0x108>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d161      	bne.n	800b88e <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b7ca:	4b36      	ldr	r3, [pc, #216]	; (800b8a4 <xTaskResumeAll+0x110>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d05d      	beq.n	800b88e <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7d2:	e02e      	b.n	800b832 <xTaskResumeAll+0x9e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d4:	4b34      	ldr	r3, [pc, #208]	; (800b8a8 <xTaskResumeAll+0x114>)
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	3318      	adds	r3, #24
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7ff f88f 	bl	800a904 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7ff f88a 	bl	800a904 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	409a      	lsls	r2, r3
 800b7f8:	4b2c      	ldr	r3, [pc, #176]	; (800b8ac <xTaskResumeAll+0x118>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	4a2b      	ldr	r2, [pc, #172]	; (800b8ac <xTaskResumeAll+0x118>)
 800b800:	6013      	str	r3, [r2, #0]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b806:	4613      	mov	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4a28      	ldr	r2, [pc, #160]	; (800b8b0 <xTaskResumeAll+0x11c>)
 800b810:	441a      	add	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3304      	adds	r3, #4
 800b816:	4619      	mov	r1, r3
 800b818:	4610      	mov	r0, r2
 800b81a:	f7ff f816 	bl	800a84a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b822:	4b24      	ldr	r3, [pc, #144]	; (800b8b4 <xTaskResumeAll+0x120>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b828:	429a      	cmp	r2, r3
 800b82a:	d302      	bcc.n	800b832 <xTaskResumeAll+0x9e>
                    {
                        xYieldPending = pdTRUE;
 800b82c:	4b22      	ldr	r3, [pc, #136]	; (800b8b8 <xTaskResumeAll+0x124>)
 800b82e:	2201      	movs	r2, #1
 800b830:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b832:	4b1d      	ldr	r3, [pc, #116]	; (800b8a8 <xTaskResumeAll+0x114>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1cc      	bne.n	800b7d4 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <xTaskResumeAll+0xb0>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800b840:	f000 fb14 	bl	800be6c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b844:	4b1d      	ldr	r3, [pc, #116]	; (800b8bc <xTaskResumeAll+0x128>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d010      	beq.n	800b872 <xTaskResumeAll+0xde>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800b850:	f000 f848 	bl	800b8e4 <xTaskIncrementTick>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d002      	beq.n	800b860 <xTaskResumeAll+0xcc>
                            {
                                xYieldPending = pdTRUE;
 800b85a:	4b17      	ldr	r3, [pc, #92]	; (800b8b8 <xTaskResumeAll+0x124>)
 800b85c:	2201      	movs	r2, #1
 800b85e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3b01      	subs	r3, #1
 800b864:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1f1      	bne.n	800b850 <xTaskResumeAll+0xbc>

                        xPendedTicks = 0;
 800b86c:	4b13      	ldr	r3, [pc, #76]	; (800b8bc <xTaskResumeAll+0x128>)
 800b86e:	2200      	movs	r2, #0
 800b870:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800b872:	4b11      	ldr	r3, [pc, #68]	; (800b8b8 <xTaskResumeAll+0x124>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d009      	beq.n	800b88e <xTaskResumeAll+0xfa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800b87a:	2301      	movs	r3, #1
 800b87c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800b87e:	4b10      	ldr	r3, [pc, #64]	; (800b8c0 <xTaskResumeAll+0x12c>)
 800b880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800b88e:	f001 faef 	bl	800ce70 <vPortExitCritical>

    return xAlreadyYielded;
 800b892:	68bb      	ldr	r3, [r7, #8]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	20002710 	.word	0x20002710
 800b8a0:	0800edfc 	.word	0x0800edfc
 800b8a4:	200026e8 	.word	0x200026e8
 800b8a8:	200026a8 	.word	0x200026a8
 800b8ac:	200026f0 	.word	0x200026f0
 800b8b0:	20002614 	.word	0x20002614
 800b8b4:	20002610 	.word	0x20002610
 800b8b8:	200026fc 	.word	0x200026fc
 800b8bc:	200026f8 	.word	0x200026f8
 800b8c0:	e000ed04 	.word	0xe000ed04

0800b8c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800b8ca:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <xTaskGetTickCount+0x1c>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800b8d0:	687b      	ldr	r3, [r7, #4]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	370c      	adds	r7, #12
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	200026ec 	.word	0x200026ec

0800b8e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8ee:	4b4b      	ldr	r3, [pc, #300]	; (800ba1c <xTaskIncrementTick+0x138>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f040 8088 	bne.w	800ba08 <xTaskIncrementTick+0x124>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b8f8:	4b49      	ldr	r3, [pc, #292]	; (800ba20 <xTaskIncrementTick+0x13c>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800b900:	4a47      	ldr	r2, [pc, #284]	; (800ba20 <xTaskIncrementTick+0x13c>)
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d11a      	bne.n	800b942 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 800b90c:	4b45      	ldr	r3, [pc, #276]	; (800ba24 <xTaskIncrementTick+0x140>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d004      	beq.n	800b920 <xTaskIncrementTick+0x3c>
 800b916:	4944      	ldr	r1, [pc, #272]	; (800ba28 <xTaskIncrementTick+0x144>)
 800b918:	f640 20c7 	movw	r0, #2759	; 0xac7
 800b91c:	f7f6 f9aa 	bl	8001c74 <vAssertCalled>
 800b920:	4b40      	ldr	r3, [pc, #256]	; (800ba24 <xTaskIncrementTick+0x140>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	60fb      	str	r3, [r7, #12]
 800b926:	4b41      	ldr	r3, [pc, #260]	; (800ba2c <xTaskIncrementTick+0x148>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a3e      	ldr	r2, [pc, #248]	; (800ba24 <xTaskIncrementTick+0x140>)
 800b92c:	6013      	str	r3, [r2, #0]
 800b92e:	4a3f      	ldr	r2, [pc, #252]	; (800ba2c <xTaskIncrementTick+0x148>)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	4b3e      	ldr	r3, [pc, #248]	; (800ba30 <xTaskIncrementTick+0x14c>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	3301      	adds	r3, #1
 800b93a:	4a3d      	ldr	r2, [pc, #244]	; (800ba30 <xTaskIncrementTick+0x14c>)
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	f000 fa95 	bl	800be6c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800b942:	4b3c      	ldr	r3, [pc, #240]	; (800ba34 <xTaskIncrementTick+0x150>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d348      	bcc.n	800b9de <xTaskIncrementTick+0xfa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b94c:	4b35      	ldr	r3, [pc, #212]	; (800ba24 <xTaskIncrementTick+0x140>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d104      	bne.n	800b960 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b956:	4b37      	ldr	r3, [pc, #220]	; (800ba34 <xTaskIncrementTick+0x150>)
 800b958:	f04f 32ff 	mov.w	r2, #4294967295
 800b95c:	601a      	str	r2, [r3, #0]
                    break;
 800b95e:	e03e      	b.n	800b9de <xTaskIncrementTick+0xfa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b960:	4b30      	ldr	r3, [pc, #192]	; (800ba24 <xTaskIncrementTick+0x140>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	429a      	cmp	r2, r3
 800b976:	d203      	bcs.n	800b980 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800b978:	4a2e      	ldr	r2, [pc, #184]	; (800ba34 <xTaskIncrementTick+0x150>)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b97e:	e02e      	b.n	800b9de <xTaskIncrementTick+0xfa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	3304      	adds	r3, #4
 800b984:	4618      	mov	r0, r3
 800b986:	f7fe ffbd 	bl	800a904 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d004      	beq.n	800b99c <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	3318      	adds	r3, #24
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe ffb4 	bl	800a904 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	409a      	lsls	r2, r3
 800b9a4:	4b24      	ldr	r3, [pc, #144]	; (800ba38 <xTaskIncrementTick+0x154>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	4a23      	ldr	r2, [pc, #140]	; (800ba38 <xTaskIncrementTick+0x154>)
 800b9ac:	6013      	str	r3, [r2, #0]
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	4413      	add	r3, r2
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	4a20      	ldr	r2, [pc, #128]	; (800ba3c <xTaskIncrementTick+0x158>)
 800b9bc:	441a      	add	r2, r3
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4610      	mov	r0, r2
 800b9c6:	f7fe ff40 	bl	800a84a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ce:	4b1c      	ldr	r3, [pc, #112]	; (800ba40 <xTaskIncrementTick+0x15c>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d3b9      	bcc.n	800b94c <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9dc:	e7b6      	b.n	800b94c <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9de:	4b18      	ldr	r3, [pc, #96]	; (800ba40 <xTaskIncrementTick+0x15c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e4:	4915      	ldr	r1, [pc, #84]	; (800ba3c <xTaskIncrementTick+0x158>)
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	440b      	add	r3, r1
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d901      	bls.n	800b9fa <xTaskIncrementTick+0x116>
                {
                    xSwitchRequired = pdTRUE;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800b9fa:	4b12      	ldr	r3, [pc, #72]	; (800ba44 <xTaskIncrementTick+0x160>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d007      	beq.n	800ba12 <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 800ba02:	2301      	movs	r3, #1
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	e004      	b.n	800ba12 <xTaskIncrementTick+0x12e>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800ba08:	4b0f      	ldr	r3, [pc, #60]	; (800ba48 <xTaskIncrementTick+0x164>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	4a0e      	ldr	r2, [pc, #56]	; (800ba48 <xTaskIncrementTick+0x164>)
 800ba10:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800ba12:	697b      	ldr	r3, [r7, #20]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3718      	adds	r7, #24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	20002710 	.word	0x20002710
 800ba20:	200026ec 	.word	0x200026ec
 800ba24:	200026a0 	.word	0x200026a0
 800ba28:	0800edfc 	.word	0x0800edfc
 800ba2c:	200026a4 	.word	0x200026a4
 800ba30:	20002700 	.word	0x20002700
 800ba34:	20002708 	.word	0x20002708
 800ba38:	200026f0 	.word	0x200026f0
 800ba3c:	20002614 	.word	0x20002614
 800ba40:	20002610 	.word	0x20002610
 800ba44:	200026fc 	.word	0x200026fc
 800ba48:	200026f8 	.word	0x200026f8

0800ba4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba52:	4b23      	ldr	r3, [pc, #140]	; (800bae0 <vTaskSwitchContext+0x94>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d003      	beq.n	800ba62 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800ba5a:	4b22      	ldr	r3, [pc, #136]	; (800bae4 <vTaskSwitchContext+0x98>)
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800ba60:	e039      	b.n	800bad6 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800ba62:	4b20      	ldr	r3, [pc, #128]	; (800bae4 <vTaskSwitchContext+0x98>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba68:	4b1f      	ldr	r3, [pc, #124]	; (800bae8 <vTaskSwitchContext+0x9c>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	fab3 f383 	clz	r3, r3
 800ba74:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800ba76:	78fb      	ldrb	r3, [r7, #3]
 800ba78:	f1c3 031f 	rsb	r3, r3, #31
 800ba7c:	60fb      	str	r3, [r7, #12]
 800ba7e:	491b      	ldr	r1, [pc, #108]	; (800baec <vTaskSwitchContext+0xa0>)
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	4613      	mov	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4413      	add	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	440b      	add	r3, r1
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d104      	bne.n	800ba9c <vTaskSwitchContext+0x50>
 800ba92:	4917      	ldr	r1, [pc, #92]	; (800baf0 <vTaskSwitchContext+0xa4>)
 800ba94:	f640 4002 	movw	r0, #3074	; 0xc02
 800ba98:	f7f6 f8ec 	bl	8001c74 <vAssertCalled>
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	4413      	add	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	4a11      	ldr	r2, [pc, #68]	; (800baec <vTaskSwitchContext+0xa0>)
 800baa8:	4413      	add	r3, r2
 800baaa:	60bb      	str	r3, [r7, #8]
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	685a      	ldr	r2, [r3, #4]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	605a      	str	r2, [r3, #4]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	685a      	ldr	r2, [r3, #4]
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	3308      	adds	r3, #8
 800babe:	429a      	cmp	r2, r3
 800bac0:	d104      	bne.n	800bacc <vTaskSwitchContext+0x80>
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	685a      	ldr	r2, [r3, #4]
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	605a      	str	r2, [r3, #4]
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	4a08      	ldr	r2, [pc, #32]	; (800baf4 <vTaskSwitchContext+0xa8>)
 800bad4:	6013      	str	r3, [r2, #0]
}
 800bad6:	bf00      	nop
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	20002710 	.word	0x20002710
 800bae4:	200026fc 	.word	0x200026fc
 800bae8:	200026f0 	.word	0x200026f0
 800baec:	20002614 	.word	0x20002614
 800baf0:	0800edfc 	.word	0x0800edfc
 800baf4:	20002610 	.word	0x20002610

0800baf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d104      	bne.n	800bb12 <vTaskPlaceOnEventList+0x1a>
 800bb08:	4909      	ldr	r1, [pc, #36]	; (800bb30 <vTaskPlaceOnEventList+0x38>)
 800bb0a:	f640 401c 	movw	r0, #3100	; 0xc1c
 800bb0e:	f7f6 f8b1 	bl	8001c74 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb12:	4b08      	ldr	r3, [pc, #32]	; (800bb34 <vTaskPlaceOnEventList+0x3c>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3318      	adds	r3, #24
 800bb18:	4619      	mov	r1, r3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7fe feb9 	bl	800a892 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb20:	2101      	movs	r1, #1
 800bb22:	6838      	ldr	r0, [r7, #0]
 800bb24:	f000 fc82 	bl	800c42c <prvAddCurrentTaskToDelayedList>
}
 800bb28:	bf00      	nop
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	0800edfc 	.word	0x0800edfc
 800bb34:	20002610 	.word	0x20002610

0800bb38 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d104      	bne.n	800bb54 <vTaskPlaceOnEventListRestricted+0x1c>
 800bb4a:	490d      	ldr	r1, [pc, #52]	; (800bb80 <vTaskPlaceOnEventListRestricted+0x48>)
 800bb4c:	f640 404b 	movw	r0, #3147	; 0xc4b
 800bb50:	f7f6 f890 	bl	8001c74 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb54:	4b0b      	ldr	r3, [pc, #44]	; (800bb84 <vTaskPlaceOnEventListRestricted+0x4c>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	3318      	adds	r3, #24
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f7fe fe74 	bl	800a84a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 800bb68:	f04f 33ff 	mov.w	r3, #4294967295
 800bb6c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb6e:	6879      	ldr	r1, [r7, #4]
 800bb70:	68b8      	ldr	r0, [r7, #8]
 800bb72:	f000 fc5b 	bl	800c42c <prvAddCurrentTaskToDelayedList>
    }
 800bb76:	bf00      	nop
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	0800edfc 	.word	0x0800edfc
 800bb84:	20002610 	.word	0x20002610

0800bb88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d104      	bne.n	800bba8 <xTaskRemoveFromEventList+0x20>
 800bb9e:	4922      	ldr	r1, [pc, #136]	; (800bc28 <xTaskRemoveFromEventList+0xa0>)
 800bba0:	f640 407b 	movw	r0, #3195	; 0xc7b
 800bba4:	f7f6 f866 	bl	8001c74 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	3318      	adds	r3, #24
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fe fea9 	bl	800a904 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbb2:	4b1e      	ldr	r3, [pc, #120]	; (800bc2c <xTaskRemoveFromEventList+0xa4>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d11c      	bne.n	800bbf4 <xTaskRemoveFromEventList+0x6c>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fe fea0 	bl	800a904 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc8:	2201      	movs	r2, #1
 800bbca:	409a      	lsls	r2, r3
 800bbcc:	4b18      	ldr	r3, [pc, #96]	; (800bc30 <xTaskRemoveFromEventList+0xa8>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	4a17      	ldr	r2, [pc, #92]	; (800bc30 <xTaskRemoveFromEventList+0xa8>)
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbda:	4613      	mov	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	4413      	add	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4a14      	ldr	r2, [pc, #80]	; (800bc34 <xTaskRemoveFromEventList+0xac>)
 800bbe4:	441a      	add	r2, r3
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4619      	mov	r1, r3
 800bbec:	4610      	mov	r0, r2
 800bbee:	f7fe fe2c 	bl	800a84a <vListInsertEnd>
 800bbf2:	e005      	b.n	800bc00 <xTaskRemoveFromEventList+0x78>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	3318      	adds	r3, #24
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	480f      	ldr	r0, [pc, #60]	; (800bc38 <xTaskRemoveFromEventList+0xb0>)
 800bbfc:	f7fe fe25 	bl	800a84a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc04:	4b0d      	ldr	r3, [pc, #52]	; (800bc3c <xTaskRemoveFromEventList+0xb4>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d905      	bls.n	800bc1a <xTaskRemoveFromEventList+0x92>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800bc12:	4b0b      	ldr	r3, [pc, #44]	; (800bc40 <xTaskRemoveFromEventList+0xb8>)
 800bc14:	2201      	movs	r2, #1
 800bc16:	601a      	str	r2, [r3, #0]
 800bc18:	e001      	b.n	800bc1e <xTaskRemoveFromEventList+0x96>
    }
    else
    {
        xReturn = pdFALSE;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	0800edfc 	.word	0x0800edfc
 800bc2c:	20002710 	.word	0x20002710
 800bc30:	200026f0 	.word	0x200026f0
 800bc34:	20002614 	.word	0x20002614
 800bc38:	200026a8 	.word	0x200026a8
 800bc3c:	20002610 	.word	0x20002610
 800bc40:	200026fc 	.word	0x200026fc

0800bc44 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc4c:	4b06      	ldr	r3, [pc, #24]	; (800bc68 <vTaskInternalSetTimeOutState+0x24>)
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800bc54:	4b05      	ldr	r3, [pc, #20]	; (800bc6c <vTaskInternalSetTimeOutState+0x28>)
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	605a      	str	r2, [r3, #4]
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr
 800bc68:	20002700 	.word	0x20002700
 800bc6c:	200026ec 	.word	0x200026ec

0800bc70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b086      	sub	sp, #24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d104      	bne.n	800bc8a <xTaskCheckForTimeOut+0x1a>
 800bc80:	4926      	ldr	r1, [pc, #152]	; (800bd1c <xTaskCheckForTimeOut+0xac>)
 800bc82:	f640 40f6 	movw	r0, #3318	; 0xcf6
 800bc86:	f7f5 fff5 	bl	8001c74 <vAssertCalled>
    configASSERT( pxTicksToWait );
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d104      	bne.n	800bc9a <xTaskCheckForTimeOut+0x2a>
 800bc90:	4922      	ldr	r1, [pc, #136]	; (800bd1c <xTaskCheckForTimeOut+0xac>)
 800bc92:	f640 40f7 	movw	r0, #3319	; 0xcf7
 800bc96:	f7f5 ffed 	bl	8001c74 <vAssertCalled>

    taskENTER_CRITICAL();
 800bc9a:	f001 f8bd 	bl	800ce18 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800bc9e:	4b20      	ldr	r3, [pc, #128]	; (800bd20 <xTaskCheckForTimeOut+0xb0>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb6:	d102      	bne.n	800bcbe <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	e026      	b.n	800bd0c <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	4b18      	ldr	r3, [pc, #96]	; (800bd24 <xTaskCheckForTimeOut+0xb4>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d00a      	beq.n	800bce0 <xTaskCheckForTimeOut+0x70>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	693a      	ldr	r2, [r7, #16]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d305      	bcc.n	800bce0 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	e015      	b.n	800bd0c <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d20b      	bcs.n	800bd02 <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	1ad2      	subs	r2, r2, r3
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff ffa4 	bl	800bc44 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	617b      	str	r3, [r7, #20]
 800bd00:	e004      	b.n	800bd0c <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	2200      	movs	r2, #0
 800bd06:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800bd0c:	f001 f8b0 	bl	800ce70 <vPortExitCritical>

    return xReturn;
 800bd10:	697b      	ldr	r3, [r7, #20]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	0800edfc 	.word	0x0800edfc
 800bd20:	200026ec 	.word	0x200026ec
 800bd24:	20002700 	.word	0x20002700

0800bd28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd28:	b480      	push	{r7}
 800bd2a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800bd2c:	4b03      	ldr	r3, [pc, #12]	; (800bd3c <vTaskMissedYield+0x14>)
 800bd2e:	2201      	movs	r2, #1
 800bd30:	601a      	str	r2, [r3, #0]
}
 800bd32:	bf00      	nop
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	200026fc 	.word	0x200026fc

0800bd40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800bd48:	f000 f852 	bl	800bdf0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd4c:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <prvIdleTask+0x28>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d9f9      	bls.n	800bd48 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800bd54:	4b05      	ldr	r3, [pc, #20]	; (800bd6c <prvIdleTask+0x2c>)
 800bd56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd5a:	601a      	str	r2, [r3, #0]
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800bd64:	e7f0      	b.n	800bd48 <prvIdleTask+0x8>
 800bd66:	bf00      	nop
 800bd68:	20002614 	.word	0x20002614
 800bd6c:	e000ed04 	.word	0xe000ed04

0800bd70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd76:	2300      	movs	r3, #0
 800bd78:	607b      	str	r3, [r7, #4]
 800bd7a:	e00c      	b.n	800bd96 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4413      	add	r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	4a12      	ldr	r2, [pc, #72]	; (800bdd0 <prvInitialiseTaskLists+0x60>)
 800bd88:	4413      	add	r3, r2
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fe fd30 	bl	800a7f0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	3301      	adds	r3, #1
 800bd94:	607b      	str	r3, [r7, #4]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b04      	cmp	r3, #4
 800bd9a:	d9ef      	bls.n	800bd7c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800bd9c:	480d      	ldr	r0, [pc, #52]	; (800bdd4 <prvInitialiseTaskLists+0x64>)
 800bd9e:	f7fe fd27 	bl	800a7f0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800bda2:	480d      	ldr	r0, [pc, #52]	; (800bdd8 <prvInitialiseTaskLists+0x68>)
 800bda4:	f7fe fd24 	bl	800a7f0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800bda8:	480c      	ldr	r0, [pc, #48]	; (800bddc <prvInitialiseTaskLists+0x6c>)
 800bdaa:	f7fe fd21 	bl	800a7f0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800bdae:	480c      	ldr	r0, [pc, #48]	; (800bde0 <prvInitialiseTaskLists+0x70>)
 800bdb0:	f7fe fd1e 	bl	800a7f0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800bdb4:	480b      	ldr	r0, [pc, #44]	; (800bde4 <prvInitialiseTaskLists+0x74>)
 800bdb6:	f7fe fd1b 	bl	800a7f0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800bdba:	4b0b      	ldr	r3, [pc, #44]	; (800bde8 <prvInitialiseTaskLists+0x78>)
 800bdbc:	4a05      	ldr	r2, [pc, #20]	; (800bdd4 <prvInitialiseTaskLists+0x64>)
 800bdbe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bdc0:	4b0a      	ldr	r3, [pc, #40]	; (800bdec <prvInitialiseTaskLists+0x7c>)
 800bdc2:	4a05      	ldr	r2, [pc, #20]	; (800bdd8 <prvInitialiseTaskLists+0x68>)
 800bdc4:	601a      	str	r2, [r3, #0]
}
 800bdc6:	bf00      	nop
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	20002614 	.word	0x20002614
 800bdd4:	20002678 	.word	0x20002678
 800bdd8:	2000268c 	.word	0x2000268c
 800bddc:	200026a8 	.word	0x200026a8
 800bde0:	200026bc 	.word	0x200026bc
 800bde4:	200026d4 	.word	0x200026d4
 800bde8:	200026a0 	.word	0x200026a0
 800bdec:	200026a4 	.word	0x200026a4

0800bdf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdf6:	e019      	b.n	800be2c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800bdf8:	f001 f80e 	bl	800ce18 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdfc:	4b10      	ldr	r3, [pc, #64]	; (800be40 <prvCheckTasksWaitingTermination+0x50>)
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	3304      	adds	r3, #4
 800be08:	4618      	mov	r0, r3
 800be0a:	f7fe fd7b 	bl	800a904 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800be0e:	4b0d      	ldr	r3, [pc, #52]	; (800be44 <prvCheckTasksWaitingTermination+0x54>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3b01      	subs	r3, #1
 800be14:	4a0b      	ldr	r2, [pc, #44]	; (800be44 <prvCheckTasksWaitingTermination+0x54>)
 800be16:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800be18:	4b0b      	ldr	r3, [pc, #44]	; (800be48 <prvCheckTasksWaitingTermination+0x58>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	3b01      	subs	r3, #1
 800be1e:	4a0a      	ldr	r2, [pc, #40]	; (800be48 <prvCheckTasksWaitingTermination+0x58>)
 800be20:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800be22:	f001 f825 	bl	800ce70 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f810 	bl	800be4c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be2c:	4b06      	ldr	r3, [pc, #24]	; (800be48 <prvCheckTasksWaitingTermination+0x58>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1e1      	bne.n	800bdf8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800be34:	bf00      	nop
 800be36:	bf00      	nop
 800be38:	3708      	adds	r7, #8
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	200026bc 	.word	0x200026bc
 800be44:	200026e8 	.word	0x200026e8
 800be48:	200026d0 	.word	0x200026d0

0800be4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be58:	4618      	mov	r0, r3
 800be5a:	f001 f9bb 	bl	800d1d4 <vPortFree>
                vPortFree( pxTCB );
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f001 f9b8 	bl	800d1d4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800be64:	bf00      	nop
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be6c:	b480      	push	{r7}
 800be6e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be70:	4b0a      	ldr	r3, [pc, #40]	; (800be9c <prvResetNextTaskUnblockTime+0x30>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d104      	bne.n	800be84 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800be7a:	4b09      	ldr	r3, [pc, #36]	; (800bea0 <prvResetNextTaskUnblockTime+0x34>)
 800be7c:	f04f 32ff 	mov.w	r2, #4294967295
 800be80:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800be82:	e005      	b.n	800be90 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800be84:	4b05      	ldr	r3, [pc, #20]	; (800be9c <prvResetNextTaskUnblockTime+0x30>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a04      	ldr	r2, [pc, #16]	; (800bea0 <prvResetNextTaskUnblockTime+0x34>)
 800be8e:	6013      	str	r3, [r2, #0]
}
 800be90:	bf00      	nop
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	200026a0 	.word	0x200026a0
 800bea0:	20002708 	.word	0x20002708

0800bea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800beaa:	4b0b      	ldr	r3, [pc, #44]	; (800bed8 <xTaskGetSchedulerState+0x34>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d102      	bne.n	800beb8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800beb2:	2301      	movs	r3, #1
 800beb4:	607b      	str	r3, [r7, #4]
 800beb6:	e008      	b.n	800beca <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beb8:	4b08      	ldr	r3, [pc, #32]	; (800bedc <xTaskGetSchedulerState+0x38>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d102      	bne.n	800bec6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800bec0:	2302      	movs	r3, #2
 800bec2:	607b      	str	r3, [r7, #4]
 800bec4:	e001      	b.n	800beca <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800bec6:	2300      	movs	r3, #0
 800bec8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800beca:	687b      	ldr	r3, [r7, #4]
    }
 800becc:	4618      	mov	r0, r3
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	200026f4 	.word	0x200026f4
 800bedc:	20002710 	.word	0x20002710

0800bee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d057      	beq.n	800bfa6 <xTaskPriorityDisinherit+0xc6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800bef6:	4b2e      	ldr	r3, [pc, #184]	; (800bfb0 <xTaskPriorityDisinherit+0xd0>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	429a      	cmp	r2, r3
 800befe:	d004      	beq.n	800bf0a <xTaskPriorityDisinherit+0x2a>
 800bf00:	492c      	ldr	r1, [pc, #176]	; (800bfb4 <xTaskPriorityDisinherit+0xd4>)
 800bf02:	f241 0056 	movw	r0, #4182	; 0x1056
 800bf06:	f7f5 feb5 	bl	8001c74 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d104      	bne.n	800bf1c <xTaskPriorityDisinherit+0x3c>
 800bf12:	4928      	ldr	r1, [pc, #160]	; (800bfb4 <xTaskPriorityDisinherit+0xd4>)
 800bf14:	f241 0057 	movw	r0, #4183	; 0x1057
 800bf18:	f7f5 feac 	bl	8001c74 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf20:	1e5a      	subs	r2, r3, #1
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d039      	beq.n	800bfa6 <xTaskPriorityDisinherit+0xc6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d135      	bne.n	800bfa6 <xTaskPriorityDisinherit+0xc6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	3304      	adds	r3, #4
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fe fce0 	bl	800a904 <uxListRemove>
 800bf44:	4603      	mov	r3, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10a      	bne.n	800bf60 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4e:	2201      	movs	r2, #1
 800bf50:	fa02 f303 	lsl.w	r3, r2, r3
 800bf54:	43da      	mvns	r2, r3
 800bf56:	4b18      	ldr	r3, [pc, #96]	; (800bfb8 <xTaskPriorityDisinherit+0xd8>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	4a16      	ldr	r2, [pc, #88]	; (800bfb8 <xTaskPriorityDisinherit+0xd8>)
 800bf5e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6c:	f1c3 0205 	rsb	r2, r3, #5
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf78:	2201      	movs	r2, #1
 800bf7a:	409a      	lsls	r2, r3
 800bf7c:	4b0e      	ldr	r3, [pc, #56]	; (800bfb8 <xTaskPriorityDisinherit+0xd8>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	4a0d      	ldr	r2, [pc, #52]	; (800bfb8 <xTaskPriorityDisinherit+0xd8>)
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4413      	add	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	4a0a      	ldr	r2, [pc, #40]	; (800bfbc <xTaskPriorityDisinherit+0xdc>)
 800bf94:	441a      	add	r2, r3
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	3304      	adds	r3, #4
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	f7fe fc54 	bl	800a84a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
    }
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	20002610 	.word	0x20002610
 800bfb4:	0800edfc 	.word	0x0800edfc
 800bfb8:	200026f0 	.word	0x200026f0
 800bfbc:	20002614 	.word	0x20002614

0800bfc0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
 800bfcc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d004      	beq.n	800bfde <xTaskGenericNotifyWait+0x1e>
 800bfd4:	4935      	ldr	r1, [pc, #212]	; (800c0ac <xTaskGenericNotifyWait+0xec>)
 800bfd6:	f241 20b5 	movw	r0, #4789	; 0x12b5
 800bfda:	f7f5 fe4b 	bl	8001c74 <vAssertCalled>

        taskENTER_CRITICAL();
 800bfde:	f000 ff1b 	bl	800ce18 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800bfe2:	4b33      	ldr	r3, [pc, #204]	; (800c0b0 <xTaskGenericNotifyWait+0xf0>)
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	4413      	add	r3, r2
 800bfea:	3354      	adds	r3, #84	; 0x54
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	2b02      	cmp	r3, #2
 800bff2:	d022      	beq.n	800c03a <xTaskGenericNotifyWait+0x7a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800bff4:	4b2e      	ldr	r3, [pc, #184]	; (800c0b0 <xTaskGenericNotifyWait+0xf0>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	3214      	adds	r2, #20
 800bffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	43d2      	mvns	r2, r2
 800c004:	4011      	ands	r1, r2
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	3214      	adds	r2, #20
 800c00a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800c00e:	4b28      	ldr	r3, [pc, #160]	; (800c0b0 <xTaskGenericNotifyWait+0xf0>)
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	4413      	add	r3, r2
 800c016:	3354      	adds	r3, #84	; 0x54
 800c018:	2201      	movs	r2, #1
 800c01a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800c01c:	6a3b      	ldr	r3, [r7, #32]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00b      	beq.n	800c03a <xTaskGenericNotifyWait+0x7a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c022:	2101      	movs	r1, #1
 800c024:	6a38      	ldr	r0, [r7, #32]
 800c026:	f000 fa01 	bl	800c42c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800c02a:	4b22      	ldr	r3, [pc, #136]	; (800c0b4 <xTaskGenericNotifyWait+0xf4>)
 800c02c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	f3bf 8f4f 	dsb	sy
 800c036:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800c03a:	f000 ff19 	bl	800ce70 <vPortExitCritical>

        taskENTER_CRITICAL();
 800c03e:	f000 feeb 	bl	800ce18 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d007      	beq.n	800c058 <xTaskGenericNotifyWait+0x98>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800c048:	4b19      	ldr	r3, [pc, #100]	; (800c0b0 <xTaskGenericNotifyWait+0xf0>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	3214      	adds	r2, #20
 800c050:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800c058:	4b15      	ldr	r3, [pc, #84]	; (800c0b0 <xTaskGenericNotifyWait+0xf0>)
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	4413      	add	r3, r2
 800c060:	3354      	adds	r3, #84	; 0x54
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b02      	cmp	r3, #2
 800c068:	d002      	beq.n	800c070 <xTaskGenericNotifyWait+0xb0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800c06a:	2300      	movs	r3, #0
 800c06c:	617b      	str	r3, [r7, #20]
 800c06e:	e00e      	b.n	800c08e <xTaskGenericNotifyWait+0xce>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800c070:	4b0f      	ldr	r3, [pc, #60]	; (800c0b0 <xTaskGenericNotifyWait+0xf0>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	3214      	adds	r2, #20
 800c078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	43d2      	mvns	r2, r2
 800c080:	4011      	ands	r1, r2
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	3214      	adds	r2, #20
 800c086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800c08a:	2301      	movs	r3, #1
 800c08c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800c08e:	4b08      	ldr	r3, [pc, #32]	; (800c0b0 <xTaskGenericNotifyWait+0xf0>)
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	4413      	add	r3, r2
 800c096:	3354      	adds	r3, #84	; 0x54
 800c098:	2200      	movs	r2, #0
 800c09a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800c09c:	f000 fee8 	bl	800ce70 <vPortExitCritical>

        return xReturn;
 800c0a0:	697b      	ldr	r3, [r7, #20]
    }
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3718      	adds	r7, #24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	0800edfc 	.word	0x0800edfc
 800c0b0:	20002610 	.word	0x20002610
 800c0b4:	e000ed04 	.word	0xe000ed04

0800c0b8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b088      	sub	sp, #32
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
 800c0c4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	61fb      	str	r3, [r7, #28]
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d004      	beq.n	800c0da <xTaskGenericNotify+0x22>
 800c0d0:	4958      	ldr	r1, [pc, #352]	; (800c234 <xTaskGenericNotify+0x17c>)
 800c0d2:	f241 300d 	movw	r0, #4877	; 0x130d
 800c0d6:	f7f5 fdcd 	bl	8001c74 <vAssertCalled>
        configASSERT( xTaskToNotify );
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d104      	bne.n	800c0ea <xTaskGenericNotify+0x32>
 800c0e0:	4954      	ldr	r1, [pc, #336]	; (800c234 <xTaskGenericNotify+0x17c>)
 800c0e2:	f241 300e 	movw	r0, #4878	; 0x130e
 800c0e6:	f7f5 fdc5 	bl	8001c74 <vAssertCalled>
        pxTCB = xTaskToNotify;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	61bb      	str	r3, [r7, #24]

        taskENTER_CRITICAL();
 800c0ee:	f000 fe93 	bl	800ce18 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800c0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d006      	beq.n	800c106 <xTaskGenericNotify+0x4e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	68ba      	ldr	r2, [r7, #8]
 800c0fc:	3214      	adds	r2, #20
 800c0fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800c106:	69ba      	ldr	r2, [r7, #24]
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	4413      	add	r3, r2
 800c10c:	3354      	adds	r3, #84	; 0x54
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	75fb      	strb	r3, [r7, #23]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	4413      	add	r3, r2
 800c118:	3354      	adds	r3, #84	; 0x54
 800c11a:	2202      	movs	r2, #2
 800c11c:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800c11e:	78fb      	ldrb	r3, [r7, #3]
 800c120:	2b04      	cmp	r3, #4
 800c122:	d83b      	bhi.n	800c19c <xTaskGenericNotify+0xe4>
 800c124:	a201      	add	r2, pc, #4	; (adr r2, 800c12c <xTaskGenericNotify+0x74>)
 800c126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c12a:	bf00      	nop
 800c12c:	0800c1b1 	.word	0x0800c1b1
 800c130:	0800c141 	.word	0x0800c141
 800c134:	0800c15d 	.word	0x0800c15d
 800c138:	0800c175 	.word	0x0800c175
 800c13c:	0800c183 	.word	0x0800c183
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	3214      	adds	r2, #20
 800c146:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	ea42 0103 	orr.w	r1, r2, r3
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	3214      	adds	r2, #20
 800c156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800c15a:	e02c      	b.n	800c1b6 <xTaskGenericNotify+0xfe>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	68ba      	ldr	r2, [r7, #8]
 800c160:	3214      	adds	r2, #20
 800c162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c166:	1c59      	adds	r1, r3, #1
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	68ba      	ldr	r2, [r7, #8]
 800c16c:	3214      	adds	r2, #20
 800c16e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800c172:	e020      	b.n	800c1b6 <xTaskGenericNotify+0xfe>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	3214      	adds	r2, #20
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800c180:	e019      	b.n	800c1b6 <xTaskGenericNotify+0xfe>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c182:	7dfb      	ldrb	r3, [r7, #23]
 800c184:	2b02      	cmp	r3, #2
 800c186:	d006      	beq.n	800c196 <xTaskGenericNotify+0xde>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	3214      	adds	r2, #20
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800c194:	e00f      	b.n	800c1b6 <xTaskGenericNotify+0xfe>
                        xReturn = pdFAIL;
 800c196:	2300      	movs	r3, #0
 800c198:	61fb      	str	r3, [r7, #28]
                    break;
 800c19a:	e00c      	b.n	800c1b6 <xTaskGenericNotify+0xfe>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800c19c:	4b26      	ldr	r3, [pc, #152]	; (800c238 <xTaskGenericNotify+0x180>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d007      	beq.n	800c1b4 <xTaskGenericNotify+0xfc>
 800c1a4:	4923      	ldr	r1, [pc, #140]	; (800c234 <xTaskGenericNotify+0x17c>)
 800c1a6:	f241 3043 	movw	r0, #4931	; 0x1343
 800c1aa:	f7f5 fd63 	bl	8001c74 <vAssertCalled>

                    break;
 800c1ae:	e001      	b.n	800c1b4 <xTaskGenericNotify+0xfc>
                    break;
 800c1b0:	bf00      	nop
 800c1b2:	e000      	b.n	800c1b6 <xTaskGenericNotify+0xfe>
                    break;
 800c1b4:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c1b6:	7dfb      	ldrb	r3, [r7, #23]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d133      	bne.n	800c224 <xTaskGenericNotify+0x16c>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	3304      	adds	r3, #4
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fe fb9f 	bl	800a904 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	409a      	lsls	r2, r3
 800c1ce:	4b1b      	ldr	r3, [pc, #108]	; (800c23c <xTaskGenericNotify+0x184>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	4a19      	ldr	r2, [pc, #100]	; (800c23c <xTaskGenericNotify+0x184>)
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1dc:	4613      	mov	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4a16      	ldr	r2, [pc, #88]	; (800c240 <xTaskGenericNotify+0x188>)
 800c1e6:	441a      	add	r2, r3
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	4610      	mov	r0, r2
 800c1f0:	f7fe fb2b 	bl	800a84a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d004      	beq.n	800c206 <xTaskGenericNotify+0x14e>
 800c1fc:	490d      	ldr	r1, [pc, #52]	; (800c234 <xTaskGenericNotify+0x17c>)
 800c1fe:	f241 3052 	movw	r0, #4946	; 0x1352
 800c202:	f7f5 fd37 	bl	8001c74 <vAssertCalled>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20a:	4b0e      	ldr	r3, [pc, #56]	; (800c244 <xTaskGenericNotify+0x18c>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c210:	429a      	cmp	r2, r3
 800c212:	d907      	bls.n	800c224 <xTaskGenericNotify+0x16c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800c214:	4b0c      	ldr	r3, [pc, #48]	; (800c248 <xTaskGenericNotify+0x190>)
 800c216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c21a:	601a      	str	r2, [r3, #0]
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800c224:	f000 fe24 	bl	800ce70 <vPortExitCritical>

        return xReturn;
 800c228:	69fb      	ldr	r3, [r7, #28]
    }
 800c22a:	4618      	mov	r0, r3
 800c22c:	3720      	adds	r7, #32
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	0800edfc 	.word	0x0800edfc
 800c238:	200026ec 	.word	0x200026ec
 800c23c:	200026f0 	.word	0x200026f0
 800c240:	20002614 	.word	0x20002614
 800c244:	20002610 	.word	0x20002610
 800c248:	e000ed04 	.word	0xe000ed04

0800c24c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08c      	sub	sp, #48	; 0x30
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
 800c258:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800c25a:	2301      	movs	r3, #1
 800c25c:	62fb      	str	r3, [r7, #44]	; 0x2c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d104      	bne.n	800c26e <xTaskGenericNotifyFromISR+0x22>
 800c264:	4969      	ldr	r1, [pc, #420]	; (800c40c <xTaskGenericNotifyFromISR+0x1c0>)
 800c266:	f241 308a 	movw	r0, #5002	; 0x138a
 800c26a:	f7f5 fd03 	bl	8001c74 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d004      	beq.n	800c27e <xTaskGenericNotifyFromISR+0x32>
 800c274:	4965      	ldr	r1, [pc, #404]	; (800c40c <xTaskGenericNotifyFromISR+0x1c0>)
 800c276:	f241 308b 	movw	r0, #5003	; 0x138b
 800c27a:	f7f5 fcfb 	bl	8001c74 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c27e:	f000 fea7 	bl	800cfd0 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	62bb      	str	r3, [r7, #40]	; 0x28
        __asm volatile
 800c286:	f3ef 8211 	mrs	r2, BASEPRI
 800c28a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c28e:	b672      	cpsid	i
 800c290:	f383 8811 	msr	BASEPRI, r3
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	b662      	cpsie	i
 800c29e:	61fa      	str	r2, [r7, #28]
 800c2a0:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 800c2a2:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2a4:	627b      	str	r3, [r7, #36]	; 0x24
        {
            if( pulPreviousNotificationValue != NULL )
 800c2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d006      	beq.n	800c2ba <xTaskGenericNotifyFromISR+0x6e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800c2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ae:	68ba      	ldr	r2, [r7, #8]
 800c2b0:	3214      	adds	r2, #20
 800c2b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800c2ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	4413      	add	r3, r2
 800c2c0:	3354      	adds	r3, #84	; 0x54
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800c2c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	3354      	adds	r3, #84	; 0x54
 800c2d0:	2202      	movs	r2, #2
 800c2d2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800c2d4:	78fb      	ldrb	r3, [r7, #3]
 800c2d6:	2b04      	cmp	r3, #4
 800c2d8:	d83b      	bhi.n	800c352 <xTaskGenericNotifyFromISR+0x106>
 800c2da:	a201      	add	r2, pc, #4	; (adr r2, 800c2e0 <xTaskGenericNotifyFromISR+0x94>)
 800c2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e0:	0800c367 	.word	0x0800c367
 800c2e4:	0800c2f5 	.word	0x0800c2f5
 800c2e8:	0800c311 	.word	0x0800c311
 800c2ec:	0800c329 	.word	0x0800c329
 800c2f0:	0800c337 	.word	0x0800c337
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	3214      	adds	r2, #20
 800c2fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	ea42 0103 	orr.w	r1, r2, r3
 800c304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	3214      	adds	r2, #20
 800c30a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800c30e:	e02d      	b.n	800c36c <xTaskGenericNotifyFromISR+0x120>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	3214      	adds	r2, #20
 800c316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c31a:	1c59      	adds	r1, r3, #1
 800c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	3214      	adds	r2, #20
 800c322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800c326:	e021      	b.n	800c36c <xTaskGenericNotifyFromISR+0x120>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	3214      	adds	r2, #20
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800c334:	e01a      	b.n	800c36c <xTaskGenericNotifyFromISR+0x120>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d006      	beq.n	800c34c <xTaskGenericNotifyFromISR+0x100>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800c33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	3214      	adds	r2, #20
 800c344:	6879      	ldr	r1, [r7, #4]
 800c346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800c34a:	e00f      	b.n	800c36c <xTaskGenericNotifyFromISR+0x120>
                        xReturn = pdFAIL;
 800c34c:	2300      	movs	r3, #0
 800c34e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800c350:	e00c      	b.n	800c36c <xTaskGenericNotifyFromISR+0x120>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800c352:	4b2f      	ldr	r3, [pc, #188]	; (800c410 <xTaskGenericNotifyFromISR+0x1c4>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d007      	beq.n	800c36a <xTaskGenericNotifyFromISR+0x11e>
 800c35a:	492c      	ldr	r1, [pc, #176]	; (800c40c <xTaskGenericNotifyFromISR+0x1c0>)
 800c35c:	f241 30d2 	movw	r0, #5074	; 0x13d2
 800c360:	f7f5 fc88 	bl	8001c74 <vAssertCalled>
                    break;
 800c364:	e001      	b.n	800c36a <xTaskGenericNotifyFromISR+0x11e>
                    break;
 800c366:	bf00      	nop
 800c368:	e000      	b.n	800c36c <xTaskGenericNotifyFromISR+0x120>
                    break;
 800c36a:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c36c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c370:	2b01      	cmp	r3, #1
 800c372:	d13f      	bne.n	800c3f4 <xTaskGenericNotifyFromISR+0x1a8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d004      	beq.n	800c386 <xTaskGenericNotifyFromISR+0x13a>
 800c37c:	4923      	ldr	r1, [pc, #140]	; (800c40c <xTaskGenericNotifyFromISR+0x1c0>)
 800c37e:	f241 30dd 	movw	r0, #5085	; 0x13dd
 800c382:	f7f5 fc77 	bl	8001c74 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c386:	4b23      	ldr	r3, [pc, #140]	; (800c414 <xTaskGenericNotifyFromISR+0x1c8>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d11c      	bne.n	800c3c8 <xTaskGenericNotifyFromISR+0x17c>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c390:	3304      	adds	r3, #4
 800c392:	4618      	mov	r0, r3
 800c394:	f7fe fab6 	bl	800a904 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39c:	2201      	movs	r2, #1
 800c39e:	409a      	lsls	r2, r3
 800c3a0:	4b1d      	ldr	r3, [pc, #116]	; (800c418 <xTaskGenericNotifyFromISR+0x1cc>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	4a1c      	ldr	r2, [pc, #112]	; (800c418 <xTaskGenericNotifyFromISR+0x1cc>)
 800c3a8:	6013      	str	r3, [r2, #0]
 800c3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	4413      	add	r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4a19      	ldr	r2, [pc, #100]	; (800c41c <xTaskGenericNotifyFromISR+0x1d0>)
 800c3b8:	441a      	add	r2, r3
 800c3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3bc:	3304      	adds	r3, #4
 800c3be:	4619      	mov	r1, r3
 800c3c0:	4610      	mov	r0, r2
 800c3c2:	f7fe fa42 	bl	800a84a <vListInsertEnd>
 800c3c6:	e005      	b.n	800c3d4 <xTaskGenericNotifyFromISR+0x188>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ca:	3318      	adds	r3, #24
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	4814      	ldr	r0, [pc, #80]	; (800c420 <xTaskGenericNotifyFromISR+0x1d4>)
 800c3d0:	f7fe fa3b 	bl	800a84a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d8:	4b12      	ldr	r3, [pc, #72]	; (800c424 <xTaskGenericNotifyFromISR+0x1d8>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d908      	bls.n	800c3f4 <xTaskGenericNotifyFromISR+0x1a8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800c3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <xTaskGenericNotifyFromISR+0x1a2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800c3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800c3ee:	4b0e      	ldr	r3, [pc, #56]	; (800c428 <xTaskGenericNotifyFromISR+0x1dc>)
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f6:	617b      	str	r3, [r7, #20]
        __asm volatile
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	f383 8811 	msr	BASEPRI, r3
    }
 800c3fe:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800c400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800c402:	4618      	mov	r0, r3
 800c404:	3730      	adds	r7, #48	; 0x30
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	0800edfc 	.word	0x0800edfc
 800c410:	200026ec 	.word	0x200026ec
 800c414:	20002710 	.word	0x20002710
 800c418:	200026f0 	.word	0x200026f0
 800c41c:	20002614 	.word	0x20002614
 800c420:	200026a8 	.word	0x200026a8
 800c424:	20002610 	.word	0x20002610
 800c428:	200026fc 	.word	0x200026fc

0800c42c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800c436:	4b29      	ldr	r3, [pc, #164]	; (800c4dc <prvAddCurrentTaskToDelayedList+0xb0>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c43c:	4b28      	ldr	r3, [pc, #160]	; (800c4e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3304      	adds	r3, #4
 800c442:	4618      	mov	r0, r3
 800c444:	f7fe fa5e 	bl	800a904 <uxListRemove>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d10b      	bne.n	800c466 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c44e:	4b24      	ldr	r3, [pc, #144]	; (800c4e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c454:	2201      	movs	r2, #1
 800c456:	fa02 f303 	lsl.w	r3, r2, r3
 800c45a:	43da      	mvns	r2, r3
 800c45c:	4b21      	ldr	r3, [pc, #132]	; (800c4e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4013      	ands	r3, r2
 800c462:	4a20      	ldr	r2, [pc, #128]	; (800c4e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c464:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46c:	d10a      	bne.n	800c484 <prvAddCurrentTaskToDelayedList+0x58>
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d007      	beq.n	800c484 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c474:	4b1a      	ldr	r3, [pc, #104]	; (800c4e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	3304      	adds	r3, #4
 800c47a:	4619      	mov	r1, r3
 800c47c:	481a      	ldr	r0, [pc, #104]	; (800c4e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c47e:	f7fe f9e4 	bl	800a84a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800c482:	e026      	b.n	800c4d2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4413      	add	r3, r2
 800c48a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c48c:	4b14      	ldr	r3, [pc, #80]	; (800c4e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d209      	bcs.n	800c4b0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c49c:	4b13      	ldr	r3, [pc, #76]	; (800c4ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	4b0f      	ldr	r3, [pc, #60]	; (800c4e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3304      	adds	r3, #4
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	f7fe f9f2 	bl	800a892 <vListInsert>
}
 800c4ae:	e010      	b.n	800c4d2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4b0:	4b0f      	ldr	r3, [pc, #60]	; (800c4f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	4b0a      	ldr	r3, [pc, #40]	; (800c4e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	4610      	mov	r0, r2
 800c4be:	f7fe f9e8 	bl	800a892 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800c4c2:	4b0c      	ldr	r3, [pc, #48]	; (800c4f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68ba      	ldr	r2, [r7, #8]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d202      	bcs.n	800c4d2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800c4cc:	4a09      	ldr	r2, [pc, #36]	; (800c4f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	6013      	str	r3, [r2, #0]
}
 800c4d2:	bf00      	nop
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	200026ec 	.word	0x200026ec
 800c4e0:	20002610 	.word	0x20002610
 800c4e4:	200026f0 	.word	0x200026f0
 800c4e8:	200026d4 	.word	0x200026d4
 800c4ec:	200026a4 	.word	0x200026a4
 800c4f0:	200026a0 	.word	0x200026a0
 800c4f4:	20002708 	.word	0x20002708

0800c4f8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800c4fe:	2300      	movs	r3, #0
 800c500:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800c502:	f000 fb2f 	bl	800cb64 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800c506:	4b0e      	ldr	r3, [pc, #56]	; (800c540 <xTimerCreateTimerTask+0x48>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00b      	beq.n	800c526 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800c50e:	4b0d      	ldr	r3, [pc, #52]	; (800c544 <xTimerCreateTimerTask+0x4c>)
 800c510:	9301      	str	r3, [sp, #4]
 800c512:	2304      	movs	r3, #4
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	2300      	movs	r3, #0
 800c518:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c51c:	490a      	ldr	r1, [pc, #40]	; (800c548 <xTimerCreateTimerTask+0x50>)
 800c51e:	480b      	ldr	r0, [pc, #44]	; (800c54c <xTimerCreateTimerTask+0x54>)
 800c520:	f7fe ff68 	bl	800b3f4 <xTaskCreate>
 800c524:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d104      	bne.n	800c536 <xTimerCreateTimerTask+0x3e>
 800c52c:	4908      	ldr	r1, [pc, #32]	; (800c550 <xTimerCreateTimerTask+0x58>)
 800c52e:	f240 100d 	movw	r0, #269	; 0x10d
 800c532:	f7f5 fb9f 	bl	8001c74 <vAssertCalled>
        return xReturn;
 800c536:	687b      	ldr	r3, [r7, #4]
    }
 800c538:	4618      	mov	r0, r3
 800c53a:	3708      	adds	r7, #8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	20002744 	.word	0x20002744
 800c544:	20002748 	.word	0x20002748
 800c548:	0800ee34 	.word	0x0800ee34
 800c54c:	0800c731 	.word	0x0800c731
 800c550:	0800ee3c 	.word	0x0800ee3c

0800c554 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800c554:	b580      	push	{r7, lr}
 800c556:	b088      	sub	sp, #32
 800c558:	af02      	add	r7, sp, #8
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
 800c560:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c562:	202c      	movs	r0, #44	; 0x2c
 800c564:	f000 fd68 	bl	800d038 <pvPortMalloc>
 800c568:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00d      	beq.n	800c58c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	2200      	movs	r2, #0
 800c574:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	9301      	str	r3, [sp, #4]
 800c57c:	6a3b      	ldr	r3, [r7, #32]
 800c57e:	9300      	str	r3, [sp, #0]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	68b9      	ldr	r1, [r7, #8]
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f000 f806 	bl	800c598 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800c58c:	697b      	ldr	r3, [r7, #20]
        }
 800c58e:	4618      	mov	r0, r3
 800c590:	3718      	adds	r7, #24
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
	...

0800c598 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
 800c5a4:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d104      	bne.n	800c5b6 <prvInitialiseNewTimer+0x1e>
 800c5ac:	4915      	ldr	r1, [pc, #84]	; (800c604 <prvInitialiseNewTimer+0x6c>)
 800c5ae:	f240 105f 	movw	r0, #351	; 0x15f
 800c5b2:	f7f5 fb5f 	bl	8001c74 <vAssertCalled>

        if( pxNewTimer != NULL )
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d01e      	beq.n	800c5fa <prvInitialiseNewTimer+0x62>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800c5bc:	f000 fad2 	bl	800cb64 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	683a      	ldr	r2, [r7, #0]
 800c5d0:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	69ba      	ldr	r2, [r7, #24]
 800c5d6:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	3304      	adds	r3, #4
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fe f927 	bl	800a830 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d008      	beq.n	800c5fa <prvInitialiseNewTimer+0x62>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5ee:	f043 0304 	orr.w	r3, r3, #4
 800c5f2:	b2da      	uxtb	r2, r3
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800c5fa:	bf00      	nop
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	0800ee3c 	.word	0x0800ee3c

0800c608 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800c608:	b580      	push	{r7, lr}
 800c60a:	b08a      	sub	sp, #40	; 0x28
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800c616:	2300      	movs	r3, #0
 800c618:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d104      	bne.n	800c62a <xTimerGenericCommand+0x22>
 800c620:	491c      	ldr	r1, [pc, #112]	; (800c694 <xTimerGenericCommand+0x8c>)
 800c622:	f44f 70c1 	mov.w	r0, #386	; 0x182
 800c626:	f7f5 fb25 	bl	8001c74 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800c62a:	4b1b      	ldr	r3, [pc, #108]	; (800c698 <xTimerGenericCommand+0x90>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d02a      	beq.n	800c688 <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2b05      	cmp	r3, #5
 800c642:	dc18      	bgt.n	800c676 <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c644:	f7ff fc2e 	bl	800bea4 <xTaskGetSchedulerState>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d109      	bne.n	800c662 <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c64e:	4b12      	ldr	r3, [pc, #72]	; (800c698 <xTimerGenericCommand+0x90>)
 800c650:	6818      	ldr	r0, [r3, #0]
 800c652:	f107 0114 	add.w	r1, r7, #20
 800c656:	2300      	movs	r3, #0
 800c658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c65a:	f7fe fa55 	bl	800ab08 <xQueueGenericSend>
 800c65e:	6278      	str	r0, [r7, #36]	; 0x24
 800c660:	e012      	b.n	800c688 <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c662:	4b0d      	ldr	r3, [pc, #52]	; (800c698 <xTimerGenericCommand+0x90>)
 800c664:	6818      	ldr	r0, [r3, #0]
 800c666:	f107 0114 	add.w	r1, r7, #20
 800c66a:	2300      	movs	r3, #0
 800c66c:	2200      	movs	r2, #0
 800c66e:	f7fe fa4b 	bl	800ab08 <xQueueGenericSend>
 800c672:	6278      	str	r0, [r7, #36]	; 0x24
 800c674:	e008      	b.n	800c688 <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c676:	4b08      	ldr	r3, [pc, #32]	; (800c698 <xTimerGenericCommand+0x90>)
 800c678:	6818      	ldr	r0, [r3, #0]
 800c67a:	f107 0114 	add.w	r1, r7, #20
 800c67e:	2300      	movs	r3, #0
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	f7fe fb29 	bl	800acd8 <xQueueGenericSendFromISR>
 800c686:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800c688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800c68a:	4618      	mov	r0, r3
 800c68c:	3728      	adds	r7, #40	; 0x28
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	0800ee3c 	.word	0x0800ee3c
 800c698:	20002744 	.word	0x20002744

0800c69c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af02      	add	r7, sp, #8
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6a6:	4b20      	ldr	r3, [pc, #128]	; (800c728 <prvProcessExpiredTimer+0x8c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3304      	adds	r3, #4
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7fe f925 	bl	800a904 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6c0:	f003 0304 	and.w	r3, r3, #4
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d01d      	beq.n	800c704 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	699a      	ldr	r2, [r3, #24]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	18d1      	adds	r1, r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f000 f8cf 	bl	800c878 <prvInsertTimerInActiveList>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d01a      	beq.n	800c716 <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f7ff ff8c 	bl	800c608 <xTimerGenericCommand>
 800c6f0:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10e      	bne.n	800c716 <prvProcessExpiredTimer+0x7a>
 800c6f8:	490c      	ldr	r1, [pc, #48]	; (800c72c <prvProcessExpiredTimer+0x90>)
 800c6fa:	f44f 7005 	mov.w	r0, #532	; 0x214
 800c6fe:	f7f5 fab9 	bl	8001c74 <vAssertCalled>
 800c702:	e008      	b.n	800c716 <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c70a:	f023 0301 	bic.w	r3, r3, #1
 800c70e:	b2da      	uxtb	r2, r3
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6a1b      	ldr	r3, [r3, #32]
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	4798      	blx	r3
    }
 800c71e:	bf00      	nop
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	2000273c 	.word	0x2000273c
 800c72c:	0800ee3c 	.word	0x0800ee3c

0800c730 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c738:	f107 0308 	add.w	r3, r7, #8
 800c73c:	4618      	mov	r0, r3
 800c73e:	f000 f857 	bl	800c7f0 <prvGetNextExpireTime>
 800c742:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	4619      	mov	r1, r3
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f000 f803 	bl	800c754 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800c74e:	f000 f8d5 	bl	800c8fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c752:	e7f1      	b.n	800c738 <prvTimerTask+0x8>

0800c754 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800c75e:	f7ff f80b 	bl	800b778 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c762:	f107 0308 	add.w	r3, r7, #8
 800c766:	4618      	mov	r0, r3
 800c768:	f000 f866 	bl	800c838 <prvSampleTimeNow>
 800c76c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d130      	bne.n	800c7d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10a      	bne.n	800c790 <prvProcessTimerOrBlockTask+0x3c>
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d806      	bhi.n	800c790 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800c782:	f7ff f807 	bl	800b794 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c786:	68f9      	ldr	r1, [r7, #12]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7ff ff87 	bl	800c69c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800c78e:	e024      	b.n	800c7da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d008      	beq.n	800c7a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c796:	4b13      	ldr	r3, [pc, #76]	; (800c7e4 <prvProcessTimerOrBlockTask+0x90>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d101      	bne.n	800c7a4 <prvProcessTimerOrBlockTask+0x50>
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e000      	b.n	800c7a6 <prvProcessTimerOrBlockTask+0x52>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c7a8:	4b0f      	ldr	r3, [pc, #60]	; (800c7e8 <prvProcessTimerOrBlockTask+0x94>)
 800c7aa:	6818      	ldr	r0, [r3, #0]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	1ad3      	subs	r3, r2, r3
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	f7fe fde9 	bl	800b38c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800c7ba:	f7fe ffeb 	bl	800b794 <xTaskResumeAll>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10a      	bne.n	800c7da <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800c7c4:	4b09      	ldr	r3, [pc, #36]	; (800c7ec <prvProcessTimerOrBlockTask+0x98>)
 800c7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ca:	601a      	str	r2, [r3, #0]
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	f3bf 8f6f 	isb	sy
    }
 800c7d4:	e001      	b.n	800c7da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800c7d6:	f7fe ffdd 	bl	800b794 <xTaskResumeAll>
    }
 800c7da:	bf00      	nop
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	20002740 	.word	0x20002740
 800c7e8:	20002744 	.word	0x20002744
 800c7ec:	e000ed04 	.word	0xe000ed04

0800c7f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c7f8:	4b0e      	ldr	r3, [pc, #56]	; (800c834 <prvGetNextExpireTime+0x44>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d101      	bne.n	800c806 <prvGetNextExpireTime+0x16>
 800c802:	2201      	movs	r2, #1
 800c804:	e000      	b.n	800c808 <prvGetNextExpireTime+0x18>
 800c806:	2200      	movs	r2, #0
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d105      	bne.n	800c820 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c814:	4b07      	ldr	r3, [pc, #28]	; (800c834 <prvGetNextExpireTime+0x44>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	60fb      	str	r3, [r7, #12]
 800c81e:	e001      	b.n	800c824 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800c820:	2300      	movs	r3, #0
 800c822:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800c824:	68fb      	ldr	r3, [r7, #12]
    }
 800c826:	4618      	mov	r0, r3
 800c828:	3714      	adds	r7, #20
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	2000273c 	.word	0x2000273c

0800c838 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800c840:	f7ff f840 	bl	800b8c4 <xTaskGetTickCount>
 800c844:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800c846:	4b0b      	ldr	r3, [pc, #44]	; (800c874 <prvSampleTimeNow+0x3c>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d205      	bcs.n	800c85c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800c850:	f000 f928 	bl	800caa4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2201      	movs	r2, #1
 800c858:	601a      	str	r2, [r3, #0]
 800c85a:	e002      	b.n	800c862 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800c862:	4a04      	ldr	r2, [pc, #16]	; (800c874 <prvSampleTimeNow+0x3c>)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800c868:	68fb      	ldr	r3, [r7, #12]
    }
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	2000274c 	.word	0x2000274c

0800c878 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800c878:	b580      	push	{r7, lr}
 800c87a:	b086      	sub	sp, #24
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	607a      	str	r2, [r7, #4]
 800c884:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800c886:	2300      	movs	r3, #0
 800c888:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	68ba      	ldr	r2, [r7, #8]
 800c88e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d812      	bhi.n	800c8c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	1ad2      	subs	r2, r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	699b      	ldr	r3, [r3, #24]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d302      	bcc.n	800c8b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	617b      	str	r3, [r7, #20]
 800c8b0:	e01b      	b.n	800c8ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c8b2:	4b10      	ldr	r3, [pc, #64]	; (800c8f4 <prvInsertTimerInActiveList+0x7c>)
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3304      	adds	r3, #4
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	4610      	mov	r0, r2
 800c8be:	f7fd ffe8 	bl	800a892 <vListInsert>
 800c8c2:	e012      	b.n	800c8ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d206      	bcs.n	800c8da <prvInsertTimerInActiveList+0x62>
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d302      	bcc.n	800c8da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	617b      	str	r3, [r7, #20]
 800c8d8:	e007      	b.n	800c8ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8da:	4b07      	ldr	r3, [pc, #28]	; (800c8f8 <prvInsertTimerInActiveList+0x80>)
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	3304      	adds	r3, #4
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	f7fd ffd4 	bl	800a892 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800c8ea:	697b      	ldr	r3, [r7, #20]
    }
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3718      	adds	r7, #24
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	20002740 	.word	0x20002740
 800c8f8:	2000273c 	.word	0x2000273c

0800c8fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b08c      	sub	sp, #48	; 0x30
 800c900:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c902:	e0b9      	b.n	800ca78 <prvProcessReceivedCommands+0x17c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	da13      	bge.n	800c932 <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c90a:	f107 0308 	add.w	r3, r7, #8
 800c90e:	3304      	adds	r3, #4
 800c910:	627b      	str	r3, [r7, #36]	; 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800c912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c914:	2b00      	cmp	r3, #0
 800c916:	d104      	bne.n	800c922 <prvProcessReceivedCommands+0x26>
 800c918:	4960      	ldr	r1, [pc, #384]	; (800ca9c <prvProcessReceivedCommands+0x1a0>)
 800c91a:	f240 20fa 	movw	r0, #762	; 0x2fa
 800c91e:	f7f5 f9a9 	bl	8001c74 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c928:	6850      	ldr	r0, [r2, #4]
 800c92a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c92c:	6892      	ldr	r2, [r2, #8]
 800c92e:	4611      	mov	r1, r2
 800c930:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	2b00      	cmp	r3, #0
 800c936:	f2c0 809e 	blt.w	800ca76 <prvProcessReceivedCommands+0x17a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d004      	beq.n	800c950 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c946:	6a3b      	ldr	r3, [r7, #32]
 800c948:	3304      	adds	r3, #4
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fd ffda 	bl	800a904 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c950:	1d3b      	adds	r3, r7, #4
 800c952:	4618      	mov	r0, r3
 800c954:	f7ff ff70 	bl	800c838 <prvSampleTimeNow>
 800c958:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	2b09      	cmp	r3, #9
 800c95e:	f200 808b 	bhi.w	800ca78 <prvProcessReceivedCommands+0x17c>
 800c962:	a201      	add	r2, pc, #4	; (adr r2, 800c968 <prvProcessReceivedCommands+0x6c>)
 800c964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c968:	0800c991 	.word	0x0800c991
 800c96c:	0800c991 	.word	0x0800c991
 800c970:	0800c991 	.word	0x0800c991
 800c974:	0800c9fb 	.word	0x0800c9fb
 800c978:	0800ca0f 	.word	0x0800ca0f
 800c97c:	0800ca4d 	.word	0x0800ca4d
 800c980:	0800c991 	.word	0x0800c991
 800c984:	0800c991 	.word	0x0800c991
 800c988:	0800c9fb 	.word	0x0800c9fb
 800c98c:	0800ca0f 	.word	0x0800ca0f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c990:	6a3b      	ldr	r3, [r7, #32]
 800c992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c996:	f043 0301 	orr.w	r3, r3, #1
 800c99a:	b2da      	uxtb	r2, r3
 800c99c:	6a3b      	ldr	r3, [r7, #32]
 800c99e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	6a3b      	ldr	r3, [r7, #32]
 800c9a6:	699b      	ldr	r3, [r3, #24]
 800c9a8:	18d1      	adds	r1, r2, r3
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	69fa      	ldr	r2, [r7, #28]
 800c9ae:	6a38      	ldr	r0, [r7, #32]
 800c9b0:	f7ff ff62 	bl	800c878 <prvInsertTimerInActiveList>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d05e      	beq.n	800ca78 <prvProcessReceivedCommands+0x17c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9ba:	6a3b      	ldr	r3, [r7, #32]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	6a38      	ldr	r0, [r7, #32]
 800c9c0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9c2:	6a3b      	ldr	r3, [r7, #32]
 800c9c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9c8:	f003 0304 	and.w	r3, r3, #4
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d053      	beq.n	800ca78 <prvProcessReceivedCommands+0x17c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	441a      	add	r2, r3
 800c9d8:	2300      	movs	r3, #0
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	2300      	movs	r3, #0
 800c9de:	2100      	movs	r1, #0
 800c9e0:	6a38      	ldr	r0, [r7, #32]
 800c9e2:	f7ff fe11 	bl	800c608 <xTimerGenericCommand>
 800c9e6:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d144      	bne.n	800ca78 <prvProcessReceivedCommands+0x17c>
 800c9ee:	492b      	ldr	r1, [pc, #172]	; (800ca9c <prvProcessReceivedCommands+0x1a0>)
 800c9f0:	f240 3036 	movw	r0, #822	; 0x336
 800c9f4:	f7f5 f93e 	bl	8001c74 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800c9f8:	e03e      	b.n	800ca78 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9fa:	6a3b      	ldr	r3, [r7, #32]
 800c9fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca00:	f023 0301 	bic.w	r3, r3, #1
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800ca0c:	e034      	b.n	800ca78 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca0e:	6a3b      	ldr	r3, [r7, #32]
 800ca10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca14:	f043 0301 	orr.w	r3, r3, #1
 800ca18:	b2da      	uxtb	r2, r3
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	6a3b      	ldr	r3, [r7, #32]
 800ca24:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca26:	6a3b      	ldr	r3, [r7, #32]
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d104      	bne.n	800ca38 <prvProcessReceivedCommands+0x13c>
 800ca2e:	491b      	ldr	r1, [pc, #108]	; (800ca9c <prvProcessReceivedCommands+0x1a0>)
 800ca30:	f240 304f 	movw	r0, #847	; 0x34f
 800ca34:	f7f5 f91e 	bl	8001c74 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca38:	6a3b      	ldr	r3, [r7, #32]
 800ca3a:	699a      	ldr	r2, [r3, #24]
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	18d1      	adds	r1, r2, r3
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	69fa      	ldr	r2, [r7, #28]
 800ca44:	6a38      	ldr	r0, [r7, #32]
 800ca46:	f7ff ff17 	bl	800c878 <prvInsertTimerInActiveList>
                        break;
 800ca4a:	e015      	b.n	800ca78 <prvProcessReceivedCommands+0x17c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca52:	f003 0302 	and.w	r3, r3, #2
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d103      	bne.n	800ca62 <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 800ca5a:	6a38      	ldr	r0, [r7, #32]
 800ca5c:	f000 fbba 	bl	800d1d4 <vPortFree>
 800ca60:	e00a      	b.n	800ca78 <prvProcessReceivedCommands+0x17c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca62:	6a3b      	ldr	r3, [r7, #32]
 800ca64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca68:	f023 0301 	bic.w	r3, r3, #1
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	6a3b      	ldr	r3, [r7, #32]
 800ca70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800ca74:	e000      	b.n	800ca78 <prvProcessReceivedCommands+0x17c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800ca76:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca78:	4b09      	ldr	r3, [pc, #36]	; (800caa0 <prvProcessReceivedCommands+0x1a4>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f107 0108 	add.w	r1, r7, #8
 800ca80:	2200      	movs	r2, #0
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fe f9be 	bl	800ae04 <xQueueReceive>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f47f af3a 	bne.w	800c904 <prvProcessReceivedCommands+0x8>
        }
    }
 800ca90:	bf00      	nop
 800ca92:	bf00      	nop
 800ca94:	3728      	adds	r7, #40	; 0x28
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	0800ee3c 	.word	0x0800ee3c
 800caa0:	20002744 	.word	0x20002744

0800caa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b088      	sub	sp, #32
 800caa8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800caaa:	e042      	b.n	800cb32 <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800caac:	4b2a      	ldr	r3, [pc, #168]	; (800cb58 <prvSwitchTimerLists+0xb4>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cab6:	4b28      	ldr	r3, [pc, #160]	; (800cb58 <prvSwitchTimerLists+0xb4>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	3304      	adds	r3, #4
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fd ff1d 	bl	800a904 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6a1b      	ldr	r3, [r3, #32]
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cad8:	f003 0304 	and.w	r3, r3, #4
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d028      	beq.n	800cb32 <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	699b      	ldr	r3, [r3, #24]
 800cae4:	693a      	ldr	r2, [r7, #16]
 800cae6:	4413      	add	r3, r2
 800cae8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d90e      	bls.n	800cb10 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	68ba      	ldr	r2, [r7, #8]
 800caf6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cafe:	4b16      	ldr	r3, [pc, #88]	; (800cb58 <prvSwitchTimerLists+0xb4>)
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	3304      	adds	r3, #4
 800cb06:	4619      	mov	r1, r3
 800cb08:	4610      	mov	r0, r2
 800cb0a:	f7fd fec2 	bl	800a892 <vListInsert>
 800cb0e:	e010      	b.n	800cb32 <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb10:	2300      	movs	r3, #0
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	2300      	movs	r3, #0
 800cb16:	693a      	ldr	r2, [r7, #16]
 800cb18:	2100      	movs	r1, #0
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	f7ff fd74 	bl	800c608 <xTimerGenericCommand>
 800cb20:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d104      	bne.n	800cb32 <prvSwitchTimerLists+0x8e>
 800cb28:	490c      	ldr	r1, [pc, #48]	; (800cb5c <prvSwitchTimerLists+0xb8>)
 800cb2a:	f240 30a9 	movw	r0, #937	; 0x3a9
 800cb2e:	f7f5 f8a1 	bl	8001c74 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb32:	4b09      	ldr	r3, [pc, #36]	; (800cb58 <prvSwitchTimerLists+0xb4>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d1b7      	bne.n	800caac <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800cb3c:	4b06      	ldr	r3, [pc, #24]	; (800cb58 <prvSwitchTimerLists+0xb4>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800cb42:	4b07      	ldr	r3, [pc, #28]	; (800cb60 <prvSwitchTimerLists+0xbc>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a04      	ldr	r2, [pc, #16]	; (800cb58 <prvSwitchTimerLists+0xb4>)
 800cb48:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800cb4a:	4a05      	ldr	r2, [pc, #20]	; (800cb60 <prvSwitchTimerLists+0xbc>)
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	6013      	str	r3, [r2, #0]
    }
 800cb50:	bf00      	nop
 800cb52:	3718      	adds	r7, #24
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	2000273c 	.word	0x2000273c
 800cb5c:	0800ee3c 	.word	0x0800ee3c
 800cb60:	20002740 	.word	0x20002740

0800cb64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800cb64:	b580      	push	{r7, lr}
 800cb66:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800cb68:	f000 f956 	bl	800ce18 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800cb6c:	4b12      	ldr	r3, [pc, #72]	; (800cbb8 <prvCheckForValidListAndQueue+0x54>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d11d      	bne.n	800cbb0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800cb74:	4811      	ldr	r0, [pc, #68]	; (800cbbc <prvCheckForValidListAndQueue+0x58>)
 800cb76:	f7fd fe3b 	bl	800a7f0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800cb7a:	4811      	ldr	r0, [pc, #68]	; (800cbc0 <prvCheckForValidListAndQueue+0x5c>)
 800cb7c:	f7fd fe38 	bl	800a7f0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800cb80:	4b10      	ldr	r3, [pc, #64]	; (800cbc4 <prvCheckForValidListAndQueue+0x60>)
 800cb82:	4a0e      	ldr	r2, [pc, #56]	; (800cbbc <prvCheckForValidListAndQueue+0x58>)
 800cb84:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800cb86:	4b10      	ldr	r3, [pc, #64]	; (800cbc8 <prvCheckForValidListAndQueue+0x64>)
 800cb88:	4a0d      	ldr	r2, [pc, #52]	; (800cbc0 <prvCheckForValidListAndQueue+0x5c>)
 800cb8a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2110      	movs	r1, #16
 800cb90:	2005      	movs	r0, #5
 800cb92:	f7fd ff45 	bl	800aa20 <xQueueGenericCreate>
 800cb96:	4603      	mov	r3, r0
 800cb98:	4a07      	ldr	r2, [pc, #28]	; (800cbb8 <prvCheckForValidListAndQueue+0x54>)
 800cb9a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800cb9c:	4b06      	ldr	r3, [pc, #24]	; (800cbb8 <prvCheckForValidListAndQueue+0x54>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d005      	beq.n	800cbb0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cba4:	4b04      	ldr	r3, [pc, #16]	; (800cbb8 <prvCheckForValidListAndQueue+0x54>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4908      	ldr	r1, [pc, #32]	; (800cbcc <prvCheckForValidListAndQueue+0x68>)
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fe fbc4 	bl	800b338 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800cbb0:	f000 f95e 	bl	800ce70 <vPortExitCritical>
    }
 800cbb4:	bf00      	nop
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	20002744 	.word	0x20002744
 800cbbc:	20002714 	.word	0x20002714
 800cbc0:	20002728 	.word	0x20002728
 800cbc4:	2000273c 	.word	0x2000273c
 800cbc8:	20002740 	.word	0x20002740
 800cbcc:	0800ee5c 	.word	0x0800ee5c

0800cbd0 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	60fb      	str	r3, [r7, #12]
        void * pvReturn;

        configASSERT( xTimer );
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d104      	bne.n	800cbec <pvTimerGetTimerID+0x1c>
 800cbe2:	4908      	ldr	r1, [pc, #32]	; (800cc04 <pvTimerGetTimerID+0x34>)
 800cbe4:	f240 400a 	movw	r0, #1034	; 0x40a
 800cbe8:	f7f5 f844 	bl	8001c74 <vAssertCalled>

        taskENTER_CRITICAL();
 800cbec:	f000 f914 	bl	800ce18 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	69db      	ldr	r3, [r3, #28]
 800cbf4:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800cbf6:	f000 f93b 	bl	800ce70 <vPortExitCritical>

        return pvReturn;
 800cbfa:	68bb      	ldr	r3, [r7, #8]
    }
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	0800ee3c 	.word	0x0800ee3c

0800cc08 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	3b04      	subs	r3, #4
 800cc18:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc20:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	3b04      	subs	r3, #4
 800cc26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	f023 0201 	bic.w	r2, r3, #1
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	3b04      	subs	r3, #4
 800cc36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800cc38:	4a0c      	ldr	r2, [pc, #48]	; (800cc6c <pxPortInitialiseStack+0x64>)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	3b14      	subs	r3, #20
 800cc42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	3b04      	subs	r3, #4
 800cc4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f06f 0202 	mvn.w	r2, #2
 800cc56:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	3b20      	subs	r3, #32
 800cc5c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	0800cc71 	.word	0x0800cc71

0800cc70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800cc7a:	4b0f      	ldr	r3, [pc, #60]	; (800ccb8 <prvTaskExitError+0x48>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc82:	d003      	beq.n	800cc8c <prvTaskExitError+0x1c>
 800cc84:	490d      	ldr	r1, [pc, #52]	; (800ccbc <prvTaskExitError+0x4c>)
 800cc86:	20e3      	movs	r0, #227	; 0xe3
 800cc88:	f7f4 fff4 	bl	8001c74 <vAssertCalled>
        __asm volatile
 800cc8c:	f04f 0340 	mov.w	r3, #64	; 0x40
 800cc90:	b672      	cpsid	i
 800cc92:	f383 8811 	msr	BASEPRI, r3
 800cc96:	f3bf 8f6f 	isb	sy
 800cc9a:	f3bf 8f4f 	dsb	sy
 800cc9e:	b662      	cpsie	i
 800cca0:	607b      	str	r3, [r7, #4]
    }
 800cca2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800cca4:	bf00      	nop
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d0fc      	beq.n	800cca6 <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800ccac:	bf00      	nop
 800ccae:	bf00      	nop
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20000044 	.word	0x20000044
 800ccbc:	0800ee64 	.word	0x0800ee64

0800ccc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800ccc0:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <pxCurrentTCBConst2>)
 800ccc2:	6819      	ldr	r1, [r3, #0]
 800ccc4:	6808      	ldr	r0, [r1, #0]
 800ccc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccca:	f380 8809 	msr	PSP, r0
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f04f 0000 	mov.w	r0, #0
 800ccd6:	f380 8811 	msr	BASEPRI, r0
 800ccda:	4770      	bx	lr
 800ccdc:	f3af 8000 	nop.w

0800cce0 <pxCurrentTCBConst2>:
 800cce0:	20002610 	.word	0x20002610
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800cce4:	bf00      	nop
 800cce6:	bf00      	nop

0800cce8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800cce8:	4808      	ldr	r0, [pc, #32]	; (800cd0c <prvPortStartFirstTask+0x24>)
 800ccea:	6800      	ldr	r0, [r0, #0]
 800ccec:	6800      	ldr	r0, [r0, #0]
 800ccee:	f380 8808 	msr	MSP, r0
 800ccf2:	f04f 0000 	mov.w	r0, #0
 800ccf6:	f380 8814 	msr	CONTROL, r0
 800ccfa:	b662      	cpsie	i
 800ccfc:	b661      	cpsie	f
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	df00      	svc	0
 800cd08:	bf00      	nop
 800cd0a:	0000      	.short	0x0000
 800cd0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800cd10:	bf00      	nop
 800cd12:	bf00      	nop

0800cd14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd1a:	4b38      	ldr	r3, [pc, #224]	; (800cdfc <xPortStartScheduler+0xe8>)
 800cd1c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	22ff      	movs	r2, #255	; 0xff
 800cd2a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd34:	79fb      	ldrb	r3, [r7, #7]
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	4b30      	ldr	r3, [pc, #192]	; (800ce00 <xPortStartScheduler+0xec>)
 800cd40:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd42:	4b30      	ldr	r3, [pc, #192]	; (800ce04 <xPortStartScheduler+0xf0>)
 800cd44:	2207      	movs	r2, #7
 800cd46:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd48:	e009      	b.n	800cd5e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800cd4a:	4b2e      	ldr	r3, [pc, #184]	; (800ce04 <xPortStartScheduler+0xf0>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	4a2c      	ldr	r2, [pc, #176]	; (800ce04 <xPortStartScheduler+0xf0>)
 800cd52:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd54:	79fb      	ldrb	r3, [r7, #7]
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd5e:	79fb      	ldrb	r3, [r7, #7]
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd66:	2b80      	cmp	r3, #128	; 0x80
 800cd68:	d0ef      	beq.n	800cd4a <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800cd6a:	4b26      	ldr	r3, [pc, #152]	; (800ce04 <xPortStartScheduler+0xf0>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f1c3 0307 	rsb	r3, r3, #7
 800cd72:	2b04      	cmp	r3, #4
 800cd74:	d004      	beq.n	800cd80 <xPortStartScheduler+0x6c>
 800cd76:	4924      	ldr	r1, [pc, #144]	; (800ce08 <xPortStartScheduler+0xf4>)
 800cd78:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800cd7c:	f7f4 ff7a 	bl	8001c74 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd80:	4b20      	ldr	r3, [pc, #128]	; (800ce04 <xPortStartScheduler+0xf0>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f1c3 0307 	rsb	r3, r3, #7
 800cd88:	2b04      	cmp	r3, #4
 800cd8a:	d004      	beq.n	800cd96 <xPortStartScheduler+0x82>
 800cd8c:	491e      	ldr	r1, [pc, #120]	; (800ce08 <xPortStartScheduler+0xf4>)
 800cd8e:	f240 1057 	movw	r0, #343	; 0x157
 800cd92:	f7f4 ff6f 	bl	8001c74 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd96:	4b1b      	ldr	r3, [pc, #108]	; (800ce04 <xPortStartScheduler+0xf0>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	021b      	lsls	r3, r3, #8
 800cd9c:	4a19      	ldr	r2, [pc, #100]	; (800ce04 <xPortStartScheduler+0xf0>)
 800cd9e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cda0:	4b18      	ldr	r3, [pc, #96]	; (800ce04 <xPortStartScheduler+0xf0>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cda8:	4a16      	ldr	r2, [pc, #88]	; (800ce04 <xPortStartScheduler+0xf0>)
 800cdaa:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	b2da      	uxtb	r2, r3
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800cdb4:	4b15      	ldr	r3, [pc, #84]	; (800ce0c <xPortStartScheduler+0xf8>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a14      	ldr	r2, [pc, #80]	; (800ce0c <xPortStartScheduler+0xf8>)
 800cdba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cdbe:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800cdc0:	4b12      	ldr	r3, [pc, #72]	; (800ce0c <xPortStartScheduler+0xf8>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a11      	ldr	r2, [pc, #68]	; (800ce0c <xPortStartScheduler+0xf8>)
 800cdc6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cdca:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800cdcc:	f000 f8d0 	bl	800cf70 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800cdd0:	4b0f      	ldr	r3, [pc, #60]	; (800ce10 <xPortStartScheduler+0xfc>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800cdd6:	f000 f8ef 	bl	800cfb8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cdda:	4b0e      	ldr	r3, [pc, #56]	; (800ce14 <xPortStartScheduler+0x100>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a0d      	ldr	r2, [pc, #52]	; (800ce14 <xPortStartScheduler+0x100>)
 800cde0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cde4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800cde6:	f7ff ff7f 	bl	800cce8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800cdea:	f7fe fe2f 	bl	800ba4c <vTaskSwitchContext>
    prvTaskExitError();
 800cdee:	f7ff ff3f 	bl	800cc70 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	e000e400 	.word	0xe000e400
 800ce00:	20002750 	.word	0x20002750
 800ce04:	20002754 	.word	0x20002754
 800ce08:	0800ee64 	.word	0x0800ee64
 800ce0c:	e000ed20 	.word	0xe000ed20
 800ce10:	20000044 	.word	0x20000044
 800ce14:	e000ef34 	.word	0xe000ef34

0800ce18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
        __asm volatile
 800ce1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ce22:	b672      	cpsid	i
 800ce24:	f383 8811 	msr	BASEPRI, r3
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	b662      	cpsie	i
 800ce32:	607b      	str	r3, [r7, #4]
    }
 800ce34:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800ce36:	4b0b      	ldr	r3, [pc, #44]	; (800ce64 <vPortEnterCritical+0x4c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	4a09      	ldr	r2, [pc, #36]	; (800ce64 <vPortEnterCritical+0x4c>)
 800ce3e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800ce40:	4b08      	ldr	r3, [pc, #32]	; (800ce64 <vPortEnterCritical+0x4c>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d109      	bne.n	800ce5c <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce48:	4b07      	ldr	r3, [pc, #28]	; (800ce68 <vPortEnterCritical+0x50>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d004      	beq.n	800ce5c <vPortEnterCritical+0x44>
 800ce52:	4906      	ldr	r1, [pc, #24]	; (800ce6c <vPortEnterCritical+0x54>)
 800ce54:	f240 10e9 	movw	r0, #489	; 0x1e9
 800ce58:	f7f4 ff0c 	bl	8001c74 <vAssertCalled>
    }
}
 800ce5c:	bf00      	nop
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	20000044 	.word	0x20000044
 800ce68:	e000ed04 	.word	0xe000ed04
 800ce6c:	0800ee64 	.word	0x0800ee64

0800ce70 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800ce76:	4b0e      	ldr	r3, [pc, #56]	; (800ceb0 <vPortExitCritical+0x40>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d104      	bne.n	800ce88 <vPortExitCritical+0x18>
 800ce7e:	490d      	ldr	r1, [pc, #52]	; (800ceb4 <vPortExitCritical+0x44>)
 800ce80:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 800ce84:	f7f4 fef6 	bl	8001c74 <vAssertCalled>
    uxCriticalNesting--;
 800ce88:	4b09      	ldr	r3, [pc, #36]	; (800ceb0 <vPortExitCritical+0x40>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	4a08      	ldr	r2, [pc, #32]	; (800ceb0 <vPortExitCritical+0x40>)
 800ce90:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800ce92:	4b07      	ldr	r3, [pc, #28]	; (800ceb0 <vPortExitCritical+0x40>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d105      	bne.n	800cea6 <vPortExitCritical+0x36>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	607b      	str	r3, [r7, #4]
        __asm volatile
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f383 8811 	msr	BASEPRI, r3
    }
 800cea4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800cea6:	bf00      	nop
 800cea8:	3708      	adds	r7, #8
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	20000044 	.word	0x20000044
 800ceb4:	0800ee64 	.word	0x0800ee64
	...

0800cec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800cec0:	f3ef 8009 	mrs	r0, PSP
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	4b15      	ldr	r3, [pc, #84]	; (800cf20 <pxCurrentTCBConst>)
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	f01e 0f10 	tst.w	lr, #16
 800ced0:	bf08      	it	eq
 800ced2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ced6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceda:	6010      	str	r0, [r2, #0]
 800cedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cee0:	f04f 0040 	mov.w	r0, #64	; 0x40
 800cee4:	b672      	cpsid	i
 800cee6:	f380 8811 	msr	BASEPRI, r0
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	b662      	cpsie	i
 800cef4:	f7fe fdaa 	bl	800ba4c <vTaskSwitchContext>
 800cef8:	f04f 0000 	mov.w	r0, #0
 800cefc:	f380 8811 	msr	BASEPRI, r0
 800cf00:	bc09      	pop	{r0, r3}
 800cf02:	6819      	ldr	r1, [r3, #0]
 800cf04:	6808      	ldr	r0, [r1, #0]
 800cf06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0a:	f01e 0f10 	tst.w	lr, #16
 800cf0e:	bf08      	it	eq
 800cf10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf14:	f380 8809 	msr	PSP, r0
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop

0800cf20 <pxCurrentTCBConst>:
 800cf20:	20002610 	.word	0x20002610
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800cf24:	bf00      	nop
 800cf26:	bf00      	nop

0800cf28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
        __asm volatile
 800cf2e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800cf32:	b672      	cpsid	i
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	b662      	cpsie	i
 800cf42:	607b      	str	r3, [r7, #4]
    }
 800cf44:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800cf46:	f7fe fccd 	bl	800b8e4 <xTaskIncrementTick>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d003      	beq.n	800cf58 <SysTick_Handler+0x30>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf50:	4b06      	ldr	r3, [pc, #24]	; (800cf6c <SysTick_Handler+0x44>)
 800cf52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf56:	601a      	str	r2, [r3, #0]
 800cf58:	2300      	movs	r3, #0
 800cf5a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	f383 8811 	msr	BASEPRI, r3
    }
 800cf62:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 800cf64:	bf00      	nop
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	e000ed04 	.word	0xe000ed04

0800cf70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800cf70:	b480      	push	{r7}
 800cf72:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf74:	4b0b      	ldr	r3, [pc, #44]	; (800cfa4 <vPortSetupTimerInterrupt+0x34>)
 800cf76:	2200      	movs	r2, #0
 800cf78:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf7a:	4b0b      	ldr	r3, [pc, #44]	; (800cfa8 <vPortSetupTimerInterrupt+0x38>)
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf80:	4b0a      	ldr	r3, [pc, #40]	; (800cfac <vPortSetupTimerInterrupt+0x3c>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	095b      	lsrs	r3, r3, #5
 800cf86:	4a0a      	ldr	r2, [pc, #40]	; (800cfb0 <vPortSetupTimerInterrupt+0x40>)
 800cf88:	fba2 2303 	umull	r2, r3, r2, r3
 800cf8c:	09db      	lsrs	r3, r3, #7
 800cf8e:	4a09      	ldr	r2, [pc, #36]	; (800cfb4 <vPortSetupTimerInterrupt+0x44>)
 800cf90:	3b01      	subs	r3, #1
 800cf92:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf94:	4b03      	ldr	r3, [pc, #12]	; (800cfa4 <vPortSetupTimerInterrupt+0x34>)
 800cf96:	2207      	movs	r2, #7
 800cf98:	601a      	str	r2, [r3, #0]
}
 800cf9a:	bf00      	nop
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	e000e010 	.word	0xe000e010
 800cfa8:	e000e018 	.word	0xe000e018
 800cfac:	20000020 	.word	0x20000020
 800cfb0:	0a7c5ac5 	.word	0x0a7c5ac5
 800cfb4:	e000e014 	.word	0xe000e014

0800cfb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800cfb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cfc8 <vPortEnableVFP+0x10>
 800cfbc:	6801      	ldr	r1, [r0, #0]
 800cfbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cfc2:	6001      	str	r1, [r0, #0]
 800cfc4:	4770      	bx	lr
 800cfc6:	0000      	.short	0x0000
 800cfc8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800cfcc:	bf00      	nop
 800cfce:	bf00      	nop

0800cfd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800cfd6:	f3ef 8305 	mrs	r3, IPSR
 800cfda:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b0f      	cmp	r3, #15
 800cfe0:	d90e      	bls.n	800d000 <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfe2:	4a10      	ldr	r2, [pc, #64]	; (800d024 <vPortValidateInterruptPriority+0x54>)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cfec:	4b0e      	ldr	r3, [pc, #56]	; (800d028 <vPortValidateInterruptPriority+0x58>)
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	78fa      	ldrb	r2, [r7, #3]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d204      	bcs.n	800d000 <vPortValidateInterruptPriority+0x30>
 800cff6:	490d      	ldr	r1, [pc, #52]	; (800d02c <vPortValidateInterruptPriority+0x5c>)
 800cff8:	f240 3049 	movw	r0, #841	; 0x349
 800cffc:	f7f4 fe3a 	bl	8001c74 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d000:	4b0b      	ldr	r3, [pc, #44]	; (800d030 <vPortValidateInterruptPriority+0x60>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d008:	4b0a      	ldr	r3, [pc, #40]	; (800d034 <vPortValidateInterruptPriority+0x64>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d904      	bls.n	800d01a <vPortValidateInterruptPriority+0x4a>
 800d010:	4906      	ldr	r1, [pc, #24]	; (800d02c <vPortValidateInterruptPriority+0x5c>)
 800d012:	f240 3059 	movw	r0, #857	; 0x359
 800d016:	f7f4 fe2d 	bl	8001c74 <vAssertCalled>
    }
 800d01a:	bf00      	nop
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	e000e3f0 	.word	0xe000e3f0
 800d028:	20002750 	.word	0x20002750
 800d02c:	0800ee64 	.word	0x0800ee64
 800d030:	e000ed0c 	.word	0xe000ed0c
 800d034:	20002754 	.word	0x20002754

0800d038 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800d040:	2300      	movs	r3, #0
 800d042:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 800d044:	f7fe fb98 	bl	800b778 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800d048:	4b5b      	ldr	r3, [pc, #364]	; (800d1b8 <pvPortMalloc+0x180>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d101      	bne.n	800d054 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800d050:	f000 f918 	bl	800d284 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d054:	4b59      	ldr	r3, [pc, #356]	; (800d1bc <pvPortMalloc+0x184>)
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4013      	ands	r3, r2
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f040 809a 	bne.w	800d196 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d027      	beq.n	800d0b8 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800d068:	2208      	movs	r2, #8
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	429a      	cmp	r2, r3
 800d072:	d221      	bcs.n	800d0b8 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 800d074:	2208      	movs	r2, #8
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4413      	add	r3, r2
 800d07a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f003 0307 	and.w	r3, r3, #7
 800d082:	2b00      	cmp	r3, #0
 800d084:	d01b      	beq.n	800d0be <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f023 0307 	bic.w	r3, r3, #7
 800d08c:	3308      	adds	r3, #8
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	429a      	cmp	r2, r3
 800d092:	d20e      	bcs.n	800d0b2 <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f023 0307 	bic.w	r3, r3, #7
 800d09a:	3308      	adds	r3, #8
 800d09c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f003 0307 	and.w	r3, r3, #7
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00a      	beq.n	800d0be <pvPortMalloc+0x86>
 800d0a8:	4945      	ldr	r1, [pc, #276]	; (800d1c0 <pvPortMalloc+0x188>)
 800d0aa:	209a      	movs	r0, #154	; 0x9a
 800d0ac:	f7f4 fde2 	bl	8001c74 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0b0:	e005      	b.n	800d0be <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0b6:	e002      	b.n	800d0be <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	607b      	str	r3, [r7, #4]
 800d0bc:	e000      	b.n	800d0c0 <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d067      	beq.n	800d196 <pvPortMalloc+0x15e>
 800d0c6:	4b3f      	ldr	r3, [pc, #252]	; (800d1c4 <pvPortMalloc+0x18c>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d862      	bhi.n	800d196 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800d0d0:	4b3d      	ldr	r3, [pc, #244]	; (800d1c8 <pvPortMalloc+0x190>)
 800d0d2:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 800d0d4:	4b3c      	ldr	r3, [pc, #240]	; (800d1c8 <pvPortMalloc+0x190>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0da:	e004      	b.n	800d0e6 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d903      	bls.n	800d0f8 <pvPortMalloc+0xc0>
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1f1      	bne.n	800d0dc <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800d0f8:	4b2f      	ldr	r3, [pc, #188]	; (800d1b8 <pvPortMalloc+0x180>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	697a      	ldr	r2, [r7, #20]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d049      	beq.n	800d196 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2208      	movs	r2, #8
 800d108:	4413      	add	r3, r2
 800d10a:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	1ad2      	subs	r2, r2, r3
 800d11c:	2308      	movs	r3, #8
 800d11e:	005b      	lsls	r3, r3, #1
 800d120:	429a      	cmp	r2, r3
 800d122:	d918      	bls.n	800d156 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d124:	697a      	ldr	r2, [r7, #20]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	4413      	add	r3, r2
 800d12a:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	f003 0307 	and.w	r3, r3, #7
 800d132:	2b00      	cmp	r3, #0
 800d134:	d003      	beq.n	800d13e <pvPortMalloc+0x106>
 800d136:	4922      	ldr	r1, [pc, #136]	; (800d1c0 <pvPortMalloc+0x188>)
 800d138:	20cd      	movs	r0, #205	; 0xcd
 800d13a:	f7f4 fd9b 	bl	8001c74 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	685a      	ldr	r2, [r3, #4]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	1ad2      	subs	r2, r2, r3
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d150:	68b8      	ldr	r0, [r7, #8]
 800d152:	f000 f8f9 	bl	800d348 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d156:	4b1b      	ldr	r3, [pc, #108]	; (800d1c4 <pvPortMalloc+0x18c>)
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	1ad3      	subs	r3, r2, r3
 800d160:	4a18      	ldr	r2, [pc, #96]	; (800d1c4 <pvPortMalloc+0x18c>)
 800d162:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d164:	4b17      	ldr	r3, [pc, #92]	; (800d1c4 <pvPortMalloc+0x18c>)
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	4b18      	ldr	r3, [pc, #96]	; (800d1cc <pvPortMalloc+0x194>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d203      	bcs.n	800d178 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d170:	4b14      	ldr	r3, [pc, #80]	; (800d1c4 <pvPortMalloc+0x18c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a15      	ldr	r2, [pc, #84]	; (800d1cc <pvPortMalloc+0x194>)
 800d176:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	4b0f      	ldr	r3, [pc, #60]	; (800d1bc <pvPortMalloc+0x184>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	431a      	orrs	r2, r3
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	2200      	movs	r2, #0
 800d18a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800d18c:	4b10      	ldr	r3, [pc, #64]	; (800d1d0 <pvPortMalloc+0x198>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	3301      	adds	r3, #1
 800d192:	4a0f      	ldr	r2, [pc, #60]	; (800d1d0 <pvPortMalloc+0x198>)
 800d194:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800d196:	f7fe fafd 	bl	800b794 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f003 0307 	and.w	r3, r3, #7
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d004      	beq.n	800d1ae <pvPortMalloc+0x176>
 800d1a4:	4906      	ldr	r1, [pc, #24]	; (800d1c0 <pvPortMalloc+0x188>)
 800d1a6:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800d1aa:	f7f4 fd63 	bl	8001c74 <vAssertCalled>
    return pvReturn;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	2001b760 	.word	0x2001b760
 800d1bc:	2001b774 	.word	0x2001b774
 800d1c0:	0800ee9c 	.word	0x0800ee9c
 800d1c4:	2001b764 	.word	0x2001b764
 800d1c8:	2001b758 	.word	0x2001b758
 800d1cc:	2001b768 	.word	0x2001b768
 800d1d0:	2001b76c 	.word	0x2001b76c

0800d1d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d041      	beq.n	800d26a <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800d1e6:	2308      	movs	r3, #8
 800d1e8:	425b      	negs	r3, r3
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	685a      	ldr	r2, [r3, #4]
 800d1f8:	4b1e      	ldr	r3, [pc, #120]	; (800d274 <vPortFree+0xa0>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d104      	bne.n	800d20c <vPortFree+0x38>
 800d202:	491d      	ldr	r1, [pc, #116]	; (800d278 <vPortFree+0xa4>)
 800d204:	f44f 7091 	mov.w	r0, #290	; 0x122
 800d208:	f7f4 fd34 	bl	8001c74 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d004      	beq.n	800d21e <vPortFree+0x4a>
 800d214:	4918      	ldr	r1, [pc, #96]	; (800d278 <vPortFree+0xa4>)
 800d216:	f240 1023 	movw	r0, #291	; 0x123
 800d21a:	f7f4 fd2b 	bl	8001c74 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	685a      	ldr	r2, [r3, #4]
 800d222:	4b14      	ldr	r3, [pc, #80]	; (800d274 <vPortFree+0xa0>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4013      	ands	r3, r2
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d01e      	beq.n	800d26a <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d11a      	bne.n	800d26a <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	685a      	ldr	r2, [r3, #4]
 800d238:	4b0e      	ldr	r3, [pc, #56]	; (800d274 <vPortFree+0xa0>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	43db      	mvns	r3, r3
 800d23e:	401a      	ands	r2, r3
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800d244:	f7fe fa98 	bl	800b778 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	685a      	ldr	r2, [r3, #4]
 800d24c:	4b0b      	ldr	r3, [pc, #44]	; (800d27c <vPortFree+0xa8>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4413      	add	r3, r2
 800d252:	4a0a      	ldr	r2, [pc, #40]	; (800d27c <vPortFree+0xa8>)
 800d254:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d256:	68b8      	ldr	r0, [r7, #8]
 800d258:	f000 f876 	bl	800d348 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800d25c:	4b08      	ldr	r3, [pc, #32]	; (800d280 <vPortFree+0xac>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	3301      	adds	r3, #1
 800d262:	4a07      	ldr	r2, [pc, #28]	; (800d280 <vPortFree+0xac>)
 800d264:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800d266:	f7fe fa95 	bl	800b794 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800d26a:	bf00      	nop
 800d26c:	3710      	adds	r7, #16
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	2001b774 	.word	0x2001b774
 800d278:	0800ee9c 	.word	0x0800ee9c
 800d27c:	2001b764 	.word	0x2001b764
 800d280:	2001b770 	.word	0x2001b770

0800d284 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800d284:	b480      	push	{r7}
 800d286:	b085      	sub	sp, #20
 800d288:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d28a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800d28e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800d290:	4b27      	ldr	r3, [pc, #156]	; (800d330 <prvHeapInit+0xac>)
 800d292:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f003 0307 	and.w	r3, r3, #7
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00c      	beq.n	800d2b8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	3307      	adds	r3, #7
 800d2a2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f023 0307 	bic.w	r3, r3, #7
 800d2aa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	4a1f      	ldr	r2, [pc, #124]	; (800d330 <prvHeapInit+0xac>)
 800d2b4:	4413      	add	r3, r2
 800d2b6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2bc:	4a1d      	ldr	r2, [pc, #116]	; (800d334 <prvHeapInit+0xb0>)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800d2c2:	4b1c      	ldr	r3, [pc, #112]	; (800d334 <prvHeapInit+0xb0>)
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	68ba      	ldr	r2, [r7, #8]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800d2d0:	2208      	movs	r2, #8
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	1a9b      	subs	r3, r3, r2
 800d2d6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f023 0307 	bic.w	r3, r3, #7
 800d2de:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	4a15      	ldr	r2, [pc, #84]	; (800d338 <prvHeapInit+0xb4>)
 800d2e4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800d2e6:	4b14      	ldr	r3, [pc, #80]	; (800d338 <prvHeapInit+0xb4>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800d2ee:	4b12      	ldr	r3, [pc, #72]	; (800d338 <prvHeapInit+0xb4>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	1ad2      	subs	r2, r2, r3
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d304:	4b0c      	ldr	r3, [pc, #48]	; (800d338 <prvHeapInit+0xb4>)
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	4a0a      	ldr	r2, [pc, #40]	; (800d33c <prvHeapInit+0xb8>)
 800d312:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	4a09      	ldr	r2, [pc, #36]	; (800d340 <prvHeapInit+0xbc>)
 800d31a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d31c:	4b09      	ldr	r3, [pc, #36]	; (800d344 <prvHeapInit+0xc0>)
 800d31e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d322:	601a      	str	r2, [r3, #0]
}
 800d324:	bf00      	nop
 800d326:	3714      	adds	r7, #20
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr
 800d330:	20002758 	.word	0x20002758
 800d334:	2001b758 	.word	0x2001b758
 800d338:	2001b760 	.word	0x2001b760
 800d33c:	2001b768 	.word	0x2001b768
 800d340:	2001b764 	.word	0x2001b764
 800d344:	2001b774 	.word	0x2001b774

0800d348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d350:	4b28      	ldr	r3, [pc, #160]	; (800d3f4 <prvInsertBlockIntoFreeList+0xac>)
 800d352:	60fb      	str	r3, [r7, #12]
 800d354:	e002      	b.n	800d35c <prvInsertBlockIntoFreeList+0x14>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	60fb      	str	r3, [r7, #12]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	429a      	cmp	r2, r3
 800d364:	d8f7      	bhi.n	800d356 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	4413      	add	r3, r2
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	429a      	cmp	r2, r3
 800d376:	d108      	bne.n	800d38a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	685a      	ldr	r2, [r3, #4]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	441a      	add	r2, r3
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	68ba      	ldr	r2, [r7, #8]
 800d394:	441a      	add	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d118      	bne.n	800d3d0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	4b15      	ldr	r3, [pc, #84]	; (800d3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d00d      	beq.n	800d3c6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	685a      	ldr	r2, [r3, #4]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	441a      	add	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	601a      	str	r2, [r3, #0]
 800d3c4:	e008      	b.n	800d3d8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d3c6:	4b0c      	ldr	r3, [pc, #48]	; (800d3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	601a      	str	r2, [r3, #0]
 800d3ce:	e003      	b.n	800d3d8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d002      	beq.n	800d3e6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d3e6:	bf00      	nop
 800d3e8:	3714      	adds	r7, #20
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	2001b758 	.word	0x2001b758
 800d3f8:	2001b760 	.word	0x2001b760

0800d3fc <RTC_decToBcd>:



// Convert normal decimal numbers to binary coded decimal
uint8_t RTC_decToBcd(int val)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	4a0f      	ldr	r2, [pc, #60]	; (800d444 <RTC_decToBcd+0x48>)
 800d408:	fb82 1203 	smull	r1, r2, r2, r3
 800d40c:	1092      	asrs	r2, r2, #2
 800d40e:	17db      	asrs	r3, r3, #31
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	b2db      	uxtb	r3, r3
 800d414:	011b      	lsls	r3, r3, #4
 800d416:	b2d8      	uxtb	r0, r3
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	4b0a      	ldr	r3, [pc, #40]	; (800d444 <RTC_decToBcd+0x48>)
 800d41c:	fb83 1302 	smull	r1, r3, r3, r2
 800d420:	1099      	asrs	r1, r3, #2
 800d422:	17d3      	asrs	r3, r2, #31
 800d424:	1ac9      	subs	r1, r1, r3
 800d426:	460b      	mov	r3, r1
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	440b      	add	r3, r1
 800d42c:	005b      	lsls	r3, r3, #1
 800d42e:	1ad1      	subs	r1, r2, r3
 800d430:	b2cb      	uxtb	r3, r1
 800d432:	4403      	add	r3, r0
 800d434:	b2db      	uxtb	r3, r3
}
 800d436:	4618      	mov	r0, r3
 800d438:	370c      	adds	r7, #12
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	66666667 	.word	0x66666667

0800d448 <RTC_bcdToDec>:

// Convert binary coded decimal to normal decimal numbers
int RTC_bcdToDec(uint8_t val)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	4603      	mov	r3, r0
 800d450:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800d452:	79fb      	ldrb	r3, [r7, #7]
 800d454:	091b      	lsrs	r3, r3, #4
 800d456:	b2db      	uxtb	r3, r3
 800d458:	461a      	mov	r2, r3
 800d45a:	4613      	mov	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	4413      	add	r3, r2
 800d460:	005b      	lsls	r3, r3, #1
 800d462:	461a      	mov	r2, r3
 800d464:	79fb      	ldrb	r3, [r7, #7]
 800d466:	f003 030f 	and.w	r3, r3, #15
 800d46a:	4413      	add	r3, r2
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <RTC_Set_Time>:

//void RTC_Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
void RTC_Set_Time (RTC_TIME *time)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b088      	sub	sp, #32
 800d47c:	af04      	add	r7, sp, #16
 800d47e:	6078      	str	r0, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = RTC_decToBcd(time->seconds);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	4618      	mov	r0, r3
 800d486:	f7ff ffb9 	bl	800d3fc <RTC_decToBcd>
 800d48a:	4603      	mov	r3, r0
 800d48c:	723b      	strb	r3, [r7, #8]
	set_time[1] = RTC_decToBcd(time->minutes);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	785b      	ldrb	r3, [r3, #1]
 800d492:	4618      	mov	r0, r3
 800d494:	f7ff ffb2 	bl	800d3fc <RTC_decToBcd>
 800d498:	4603      	mov	r3, r0
 800d49a:	727b      	strb	r3, [r7, #9]
	set_time[2] = RTC_decToBcd(time->hour);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	789b      	ldrb	r3, [r3, #2]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7ff ffab 	bl	800d3fc <RTC_decToBcd>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	72bb      	strb	r3, [r7, #10]
	set_time[3] = RTC_decToBcd(time->dayofweek);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	78db      	ldrb	r3, [r3, #3]
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7ff ffa4 	bl	800d3fc <RTC_decToBcd>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	72fb      	strb	r3, [r7, #11]
	set_time[4] = RTC_decToBcd(time->dayofmonth);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	791b      	ldrb	r3, [r3, #4]
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7ff ff9d 	bl	800d3fc <RTC_decToBcd>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	733b      	strb	r3, [r7, #12]
	set_time[5] = RTC_decToBcd(time->month);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	795b      	ldrb	r3, [r3, #5]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7ff ff96 	bl	800d3fc <RTC_decToBcd>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	737b      	strb	r3, [r7, #13]
	set_time[6] = RTC_decToBcd(time->year);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	799b      	ldrb	r3, [r3, #6]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7ff ff8f 	bl	800d3fc <RTC_decToBcd>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, portMAX_DELAY);
 800d4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4e6:	9302      	str	r3, [sp, #8]
 800d4e8:	2307      	movs	r3, #7
 800d4ea:	9301      	str	r3, [sp, #4]
 800d4ec:	f107 0308 	add.w	r3, r7, #8
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	21d0      	movs	r1, #208	; 0xd0
 800d4f8:	4803      	ldr	r0, [pc, #12]	; (800d508 <RTC_Set_Time+0x90>)
 800d4fa:	f7f5 fac1 	bl	8002a80 <HAL_I2C_Mem_Write>

}
 800d4fe:	bf00      	nop
 800d500:	3710      	adds	r7, #16
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	200021e4 	.word	0x200021e4

0800d50c <RTC_Get_Time>:

void RTC_Get_Time (RTC_TIME *time)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b088      	sub	sp, #32
 800d510:	af04      	add	r7, sp, #16
 800d512:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, portMAX_DELAY);
 800d514:	f04f 33ff 	mov.w	r3, #4294967295
 800d518:	9302      	str	r3, [sp, #8]
 800d51a:	2307      	movs	r3, #7
 800d51c:	9301      	str	r3, [sp, #4]
 800d51e:	f107 0308 	add.w	r3, r7, #8
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	2301      	movs	r3, #1
 800d526:	2200      	movs	r2, #0
 800d528:	21d0      	movs	r1, #208	; 0xd0
 800d52a:	481f      	ldr	r0, [pc, #124]	; (800d5a8 <RTC_Get_Time+0x9c>)
 800d52c:	f7f5 fbbc 	bl	8002ca8 <HAL_I2C_Mem_Read>
	time->seconds = RTC_bcdToDec(get_time[0]);
 800d530:	7a3b      	ldrb	r3, [r7, #8]
 800d532:	4618      	mov	r0, r3
 800d534:	f7ff ff88 	bl	800d448 <RTC_bcdToDec>
 800d538:	4603      	mov	r3, r0
 800d53a:	b2da      	uxtb	r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	701a      	strb	r2, [r3, #0]
	time->minutes = RTC_bcdToDec(get_time[1]);
 800d540:	7a7b      	ldrb	r3, [r7, #9]
 800d542:	4618      	mov	r0, r3
 800d544:	f7ff ff80 	bl	800d448 <RTC_bcdToDec>
 800d548:	4603      	mov	r3, r0
 800d54a:	b2da      	uxtb	r2, r3
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	705a      	strb	r2, [r3, #1]
	time->hour = RTC_bcdToDec(get_time[2]);
 800d550:	7abb      	ldrb	r3, [r7, #10]
 800d552:	4618      	mov	r0, r3
 800d554:	f7ff ff78 	bl	800d448 <RTC_bcdToDec>
 800d558:	4603      	mov	r3, r0
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	709a      	strb	r2, [r3, #2]
	time->dayofweek = RTC_bcdToDec(get_time[3]);
 800d560:	7afb      	ldrb	r3, [r7, #11]
 800d562:	4618      	mov	r0, r3
 800d564:	f7ff ff70 	bl	800d448 <RTC_bcdToDec>
 800d568:	4603      	mov	r3, r0
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	70da      	strb	r2, [r3, #3]
	time->dayofmonth = RTC_bcdToDec(get_time[4]);
 800d570:	7b3b      	ldrb	r3, [r7, #12]
 800d572:	4618      	mov	r0, r3
 800d574:	f7ff ff68 	bl	800d448 <RTC_bcdToDec>
 800d578:	4603      	mov	r3, r0
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	711a      	strb	r2, [r3, #4]
	time->month = RTC_bcdToDec(get_time[5]);
 800d580:	7b7b      	ldrb	r3, [r7, #13]
 800d582:	4618      	mov	r0, r3
 800d584:	f7ff ff60 	bl	800d448 <RTC_bcdToDec>
 800d588:	4603      	mov	r3, r0
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	715a      	strb	r2, [r3, #5]
	time->year = RTC_bcdToDec(get_time[6]);
 800d590:	7bbb      	ldrb	r3, [r7, #14]
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff ff58 	bl	800d448 <RTC_bcdToDec>
 800d598:	4603      	mov	r3, r0
 800d59a:	b2da      	uxtb	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	719a      	strb	r2, [r3, #6]
}
 800d5a0:	bf00      	nop
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	200021e4 	.word	0x200021e4

0800d5ac <show_time_date>:


void show_time_date(RTC_TIME *time)
{
 800d5ac:	b5b0      	push	{r4, r5, r7, lr}
 800d5ae:	b086      	sub	sp, #24
 800d5b0:	af04      	add	r7, sp, #16
 800d5b2:	6078      	str	r0, [r7, #4]
	static char buffer[60];
	 static char *rtc_time = buffer ;
//	memset(&rtc_time,0,sizeof(rtc_time)) ;
	RTC_Get_Time(time) ;
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f7ff ffa9 	bl	800d50c <RTC_Get_Time>
	 sprintf ((char *)buffer, "Time&Date :  %02d:%02d:%02d     %02d-%02d-20%02d \n",  time->hour, time->minutes, time->seconds ,time->dayofmonth, time->month, time->year);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	789b      	ldrb	r3, [r3, #2]
 800d5be:	461c      	mov	r4, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	785b      	ldrb	r3, [r3, #1]
 800d5c4:	461d      	mov	r5, r3
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	791b      	ldrb	r3, [r3, #4]
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	795b      	ldrb	r3, [r3, #5]
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	799b      	ldrb	r3, [r3, #6]
 800d5dc:	9303      	str	r3, [sp, #12]
 800d5de:	9002      	str	r0, [sp, #8]
 800d5e0:	9101      	str	r1, [sp, #4]
 800d5e2:	9200      	str	r2, [sp, #0]
 800d5e4:	462b      	mov	r3, r5
 800d5e6:	4622      	mov	r2, r4
 800d5e8:	490b      	ldr	r1, [pc, #44]	; (800d618 <show_time_date+0x6c>)
 800d5ea:	480c      	ldr	r0, [pc, #48]	; (800d61c <show_time_date+0x70>)
 800d5ec:	f000 fd60 	bl	800e0b0 <siprintf>
	 HAL_UART_Transmit(&huart3,(uint8_t*)rtc_time, strlen(rtc_time), HAL_MAX_DELAY);
 800d5f0:	4b0b      	ldr	r3, [pc, #44]	; (800d620 <show_time_date+0x74>)
 800d5f2:	681c      	ldr	r4, [r3, #0]
 800d5f4:	4b0a      	ldr	r3, [pc, #40]	; (800d620 <show_time_date+0x74>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7f2 fe21 	bl	8000240 <strlen>
 800d5fe:	4603      	mov	r3, r0
 800d600:	b29a      	uxth	r2, r3
 800d602:	f04f 33ff 	mov.w	r3, #4294967295
 800d606:	4621      	mov	r1, r4
 800d608:	4806      	ldr	r0, [pc, #24]	; (800d624 <show_time_date+0x78>)
 800d60a:	f7f8 fa11 	bl	8005a30 <HAL_UART_Transmit>

}
 800d60e:	bf00      	nop
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bdb0      	pop	{r4, r5, r7, pc}
 800d616:	bf00      	nop
 800d618:	0800eed0 	.word	0x0800eed0
 800d61c:	2001b778 	.word	0x2001b778
 800d620:	20000048 	.word	0x20000048
 800d624:	20002294 	.word	0x20002294

0800d628 <validate_rtc_information>:


int validate_rtc_information (RTC_TIME *time)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
	if ( time->hour > 24 || time->minutes > 59 || time->seconds > 59 || time->dayofweek > 7 || time->dayofmonth > 31 || time->month > 12 || time->year > 99 )
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	789b      	ldrb	r3, [r3, #2]
 800d634:	2b18      	cmp	r3, #24
 800d636:	d817      	bhi.n	800d668 <validate_rtc_information+0x40>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	785b      	ldrb	r3, [r3, #1]
 800d63c:	2b3b      	cmp	r3, #59	; 0x3b
 800d63e:	d813      	bhi.n	800d668 <validate_rtc_information+0x40>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	2b3b      	cmp	r3, #59	; 0x3b
 800d646:	d80f      	bhi.n	800d668 <validate_rtc_information+0x40>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	78db      	ldrb	r3, [r3, #3]
 800d64c:	2b07      	cmp	r3, #7
 800d64e:	d80b      	bhi.n	800d668 <validate_rtc_information+0x40>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	791b      	ldrb	r3, [r3, #4]
 800d654:	2b1f      	cmp	r3, #31
 800d656:	d807      	bhi.n	800d668 <validate_rtc_information+0x40>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	795b      	ldrb	r3, [r3, #5]
 800d65c:	2b0c      	cmp	r3, #12
 800d65e:	d803      	bhi.n	800d668 <validate_rtc_information+0x40>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	799b      	ldrb	r3, [r3, #6]
 800d664:	2b63      	cmp	r3, #99	; 0x63
 800d666:	d901      	bls.n	800d66c <validate_rtc_information+0x44>
	{
		return 1 ;
 800d668:	2301      	movs	r3, #1
 800d66a:	e000      	b.n	800d66e <validate_rtc_information+0x46>
	}
	return 0 ;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	370c      	adds	r7, #12
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr
	...

0800d67c <SELECT>:
#define SD_CS_GPIO_Port GPIOF
#define SD_CS_Pin GPIO_PIN_12

/* SPI Chip Select */
static void SELECT(void)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800d680:	2200      	movs	r2, #0
 800d682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d686:	4802      	ldr	r0, [pc, #8]	; (800d690 <SELECT+0x14>)
 800d688:	f7f5 f950 	bl	800292c <HAL_GPIO_WritePin>
}
 800d68c:	bf00      	nop
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	40021400 	.word	0x40021400

0800d694 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800d698:	2201      	movs	r2, #1
 800d69a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d69e:	4802      	ldr	r0, [pc, #8]	; (800d6a8 <DESELECT+0x14>)
 800d6a0:	f7f5 f944 	bl	800292c <HAL_GPIO_WritePin>
}
 800d6a4:	bf00      	nop
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	40021400 	.word	0x40021400

0800d6ac <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800d6b6:	bf00      	nop
 800d6b8:	4808      	ldr	r0, [pc, #32]	; (800d6dc <SPI_TxByte+0x30>)
 800d6ba:	f7f7 fcf5 	bl	80050a8 <HAL_SPI_GetState>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d1f9      	bne.n	800d6b8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800d6c4:	1df9      	adds	r1, r7, #7
 800d6c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	4803      	ldr	r0, [pc, #12]	; (800d6dc <SPI_TxByte+0x30>)
 800d6ce:	f7f7 f96a 	bl	80049a6 <HAL_SPI_Transmit>
}
 800d6d2:	bf00      	nop
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	20002230 	.word	0x20002230

0800d6e0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800d6e6:	23ff      	movs	r3, #255	; 0xff
 800d6e8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800d6ee:	bf00      	nop
 800d6f0:	4809      	ldr	r0, [pc, #36]	; (800d718 <SPI_RxByte+0x38>)
 800d6f2:	f7f7 fcd9 	bl	80050a8 <HAL_SPI_GetState>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d1f9      	bne.n	800d6f0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800d6fc:	1dba      	adds	r2, r7, #6
 800d6fe:	1df9      	adds	r1, r7, #7
 800d700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d704:	9300      	str	r3, [sp, #0]
 800d706:	2301      	movs	r3, #1
 800d708:	4803      	ldr	r0, [pc, #12]	; (800d718 <SPI_RxByte+0x38>)
 800d70a:	f7f7 faba 	bl	8004c82 <HAL_SPI_TransmitReceive>

  return data;
 800d70e:	79bb      	ldrb	r3, [r7, #6]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3708      	adds	r7, #8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	20002230 	.word	0x20002230

0800d71c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800d724:	f7ff ffdc 	bl	800d6e0 <SPI_RxByte>
 800d728:	4603      	mov	r3, r0
 800d72a:	461a      	mov	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	701a      	strb	r2, [r3, #0]
}
 800d730:	bf00      	nop
 800d732:	3708      	adds	r7, #8
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800d73e:	4b0b      	ldr	r3, [pc, #44]	; (800d76c <SD_ReadyWait+0x34>)
 800d740:	2232      	movs	r2, #50	; 0x32
 800d742:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800d744:	f7ff ffcc 	bl	800d6e0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 800d748:	f7ff ffca 	bl	800d6e0 <SPI_RxByte>
 800d74c:	4603      	mov	r3, r0
 800d74e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800d750:	79fb      	ldrb	r3, [r7, #7]
 800d752:	2bff      	cmp	r3, #255	; 0xff
 800d754:	d004      	beq.n	800d760 <SD_ReadyWait+0x28>
 800d756:	4b05      	ldr	r3, [pc, #20]	; (800d76c <SD_ReadyWait+0x34>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1f3      	bne.n	800d748 <SD_ReadyWait+0x10>

  return res;
 800d760:	79fb      	ldrb	r3, [r7, #7]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3708      	adds	r7, #8
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	20002388 	.word	0x20002388

0800d770 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800d776:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800d77a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800d77c:	f7ff ff8a 	bl	800d694 <DESELECT>

  for(int i = 0; i < 10; i++)
 800d780:	2300      	movs	r3, #0
 800d782:	613b      	str	r3, [r7, #16]
 800d784:	e005      	b.n	800d792 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800d786:	20ff      	movs	r0, #255	; 0xff
 800d788:	f7ff ff90 	bl	800d6ac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	3301      	adds	r3, #1
 800d790:	613b      	str	r3, [r7, #16]
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	2b09      	cmp	r3, #9
 800d796:	ddf6      	ble.n	800d786 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 800d798:	f7ff ff70 	bl	800d67c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800d79c:	2340      	movs	r3, #64	; 0x40
 800d79e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800d7b0:	2395      	movs	r3, #149	; 0x95
 800d7b2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	60fb      	str	r3, [r7, #12]
 800d7b8:	e009      	b.n	800d7ce <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800d7ba:	1d3a      	adds	r2, r7, #4
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	4413      	add	r3, r2
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7ff ff72 	bl	800d6ac <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	60fb      	str	r3, [r7, #12]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2b05      	cmp	r3, #5
 800d7d2:	ddf2      	ble.n	800d7ba <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 800d7d4:	e002      	b.n	800d7dc <SD_PowerOn+0x6c>
  {
    Count--;
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800d7dc:	f7ff ff80 	bl	800d6e0 <SPI_RxByte>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d002      	beq.n	800d7ec <SD_PowerOn+0x7c>
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d1f4      	bne.n	800d7d6 <SD_PowerOn+0x66>
  }

  DESELECT();
 800d7ec:	f7ff ff52 	bl	800d694 <DESELECT>
  SPI_TxByte(0XFF);
 800d7f0:	20ff      	movs	r0, #255	; 0xff
 800d7f2:	f7ff ff5b 	bl	800d6ac <SPI_TxByte>

  PowerFlag = 1;
 800d7f6:	4b03      	ldr	r3, [pc, #12]	; (800d804 <SD_PowerOn+0x94>)
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	701a      	strb	r2, [r3, #0]
}
 800d7fc:	bf00      	nop
 800d7fe:	3718      	adds	r7, #24
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	2001b7b5 	.word	0x2001b7b5

0800d808 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 800d808:	b480      	push	{r7}
 800d80a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800d80c:	4b03      	ldr	r3, [pc, #12]	; (800d81c <SD_PowerOff+0x14>)
 800d80e:	2200      	movs	r2, #0
 800d810:	701a      	strb	r2, [r3, #0]
}
 800d812:	bf00      	nop
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr
 800d81c:	2001b7b5 	.word	0x2001b7b5

0800d820 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800d820:	b480      	push	{r7}
 800d822:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800d824:	4b03      	ldr	r3, [pc, #12]	; (800d834 <SD_CheckPower+0x14>)
 800d826:	781b      	ldrb	r3, [r3, #0]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	2001b7b5 	.word	0x2001b7b5

0800d838 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800d842:	4b17      	ldr	r3, [pc, #92]	; (800d8a0 <SD_RxDataBlock+0x68>)
 800d844:	220a      	movs	r2, #10
 800d846:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 800d848:	f7ff ff4a 	bl	800d6e0 <SPI_RxByte>
 800d84c:	4603      	mov	r3, r0
 800d84e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800d850:	7bfb      	ldrb	r3, [r7, #15]
 800d852:	2bff      	cmp	r3, #255	; 0xff
 800d854:	d104      	bne.n	800d860 <SD_RxDataBlock+0x28>
 800d856:	4b12      	ldr	r3, [pc, #72]	; (800d8a0 <SD_RxDataBlock+0x68>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1f3      	bne.n	800d848 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800d860:	7bfb      	ldrb	r3, [r7, #15]
 800d862:	2bfe      	cmp	r3, #254	; 0xfe
 800d864:	d001      	beq.n	800d86a <SD_RxDataBlock+0x32>
    return FALSE;
 800d866:	2300      	movs	r3, #0
 800d868:	e016      	b.n	800d898 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	1c5a      	adds	r2, r3, #1
 800d86e:	607a      	str	r2, [r7, #4]
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff ff53 	bl	800d71c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	1c5a      	adds	r2, r3, #1
 800d87a:	607a      	str	r2, [r7, #4]
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7ff ff4d 	bl	800d71c <SPI_RxBytePtr>
  } while(btr -= 2);
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	3b02      	subs	r3, #2
 800d886:	603b      	str	r3, [r7, #0]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d1ed      	bne.n	800d86a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800d88e:	f7ff ff27 	bl	800d6e0 <SPI_RxByte>
  SPI_RxByte();
 800d892:	f7ff ff25 	bl	800d6e0 <SPI_RxByte>

  return TRUE;
 800d896:	2301      	movs	r3, #1
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3710      	adds	r7, #16
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	20002386 	.word	0x20002386

0800d8a4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800d8b4:	f7ff ff40 	bl	800d738 <SD_ReadyWait>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2bff      	cmp	r3, #255	; 0xff
 800d8bc:	d001      	beq.n	800d8c2 <SD_TxDataBlock+0x1e>
    return FALSE;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	e040      	b.n	800d944 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800d8c2:	78fb      	ldrb	r3, [r7, #3]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7ff fef1 	bl	800d6ac <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800d8ca:	78fb      	ldrb	r3, [r7, #3]
 800d8cc:	2bfd      	cmp	r3, #253	; 0xfd
 800d8ce:	d031      	beq.n	800d934 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	1c5a      	adds	r2, r3, #1
 800d8d8:	607a      	str	r2, [r7, #4]
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7ff fee5 	bl	800d6ac <SPI_TxByte>
      SPI_TxByte(*buff++);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	1c5a      	adds	r2, r3, #1
 800d8e6:	607a      	str	r2, [r7, #4]
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7ff fede 	bl	800d6ac <SPI_TxByte>
    } while (--wc);
 800d8f0:	7bbb      	ldrb	r3, [r7, #14]
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	73bb      	strb	r3, [r7, #14]
 800d8f6:	7bbb      	ldrb	r3, [r7, #14]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d1eb      	bne.n	800d8d4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 800d8fc:	f7ff fef0 	bl	800d6e0 <SPI_RxByte>
    SPI_RxByte();
 800d900:	f7ff feee 	bl	800d6e0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 800d904:	e00b      	b.n	800d91e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800d906:	f7ff feeb 	bl	800d6e0 <SPI_RxByte>
 800d90a:	4603      	mov	r3, r0
 800d90c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800d90e:	7bfb      	ldrb	r3, [r7, #15]
 800d910:	f003 031f 	and.w	r3, r3, #31
 800d914:	2b05      	cmp	r3, #5
 800d916:	d006      	beq.n	800d926 <SD_TxDataBlock+0x82>
        break;

      i++;
 800d918:	7b7b      	ldrb	r3, [r7, #13]
 800d91a:	3301      	adds	r3, #1
 800d91c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800d91e:	7b7b      	ldrb	r3, [r7, #13]
 800d920:	2b40      	cmp	r3, #64	; 0x40
 800d922:	d9f0      	bls.n	800d906 <SD_TxDataBlock+0x62>
 800d924:	e000      	b.n	800d928 <SD_TxDataBlock+0x84>
        break;
 800d926:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800d928:	bf00      	nop
 800d92a:	f7ff fed9 	bl	800d6e0 <SPI_RxByte>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d0fa      	beq.n	800d92a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800d934:	7bfb      	ldrb	r3, [r7, #15]
 800d936:	f003 031f 	and.w	r3, r3, #31
 800d93a:	2b05      	cmp	r3, #5
 800d93c:	d101      	bne.n	800d942 <SD_TxDataBlock+0x9e>
    return TRUE;
 800d93e:	2301      	movs	r3, #1
 800d940:	e000      	b.n	800d944 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	3710      	adds	r7, #16
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	4603      	mov	r3, r0
 800d954:	6039      	str	r1, [r7, #0]
 800d956:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800d958:	f7ff feee 	bl	800d738 <SD_ReadyWait>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2bff      	cmp	r3, #255	; 0xff
 800d960:	d001      	beq.n	800d966 <SD_SendCmd+0x1a>
    return 0xFF;
 800d962:	23ff      	movs	r3, #255	; 0xff
 800d964:	e040      	b.n	800d9e8 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800d966:	79fb      	ldrb	r3, [r7, #7]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7ff fe9f 	bl	800d6ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	0e1b      	lsrs	r3, r3, #24
 800d972:	b2db      	uxtb	r3, r3
 800d974:	4618      	mov	r0, r3
 800d976:	f7ff fe99 	bl	800d6ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	0c1b      	lsrs	r3, r3, #16
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	4618      	mov	r0, r3
 800d982:	f7ff fe93 	bl	800d6ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	0a1b      	lsrs	r3, r3, #8
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7ff fe8d 	bl	800d6ac <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	b2db      	uxtb	r3, r3
 800d996:	4618      	mov	r0, r3
 800d998:	f7ff fe88 	bl	800d6ac <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 800d99c:	2300      	movs	r3, #0
 800d99e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800d9a0:	79fb      	ldrb	r3, [r7, #7]
 800d9a2:	2b40      	cmp	r3, #64	; 0x40
 800d9a4:	d101      	bne.n	800d9aa <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800d9a6:	2395      	movs	r3, #149	; 0x95
 800d9a8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800d9aa:	79fb      	ldrb	r3, [r7, #7]
 800d9ac:	2b48      	cmp	r3, #72	; 0x48
 800d9ae:	d101      	bne.n	800d9b4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800d9b0:	2387      	movs	r3, #135	; 0x87
 800d9b2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 800d9b4:	7bfb      	ldrb	r3, [r7, #15]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7ff fe78 	bl	800d6ac <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800d9bc:	79fb      	ldrb	r3, [r7, #7]
 800d9be:	2b4c      	cmp	r3, #76	; 0x4c
 800d9c0:	d101      	bne.n	800d9c6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800d9c2:	f7ff fe8d 	bl	800d6e0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800d9c6:	230a      	movs	r3, #10
 800d9c8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800d9ca:	f7ff fe89 	bl	800d6e0 <SPI_RxByte>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800d9d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	da05      	bge.n	800d9e6 <SD_SendCmd+0x9a>
 800d9da:	7bbb      	ldrb	r3, [r7, #14]
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	73bb      	strb	r3, [r7, #14]
 800d9e0:	7bbb      	ldrb	r3, [r7, #14]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1f1      	bne.n	800d9ca <SD_SendCmd+0x7e>

  return res;
 800d9e6:	7b7b      	ldrb	r3, [r7, #13]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800d9f0:	b590      	push	{r4, r7, lr}
 800d9f2:	b085      	sub	sp, #20
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800d9fa:	79fb      	ldrb	r3, [r7, #7]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d001      	beq.n	800da04 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 800da00:	2301      	movs	r3, #1
 800da02:	e0d5      	b.n	800dbb0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 800da04:	4b6c      	ldr	r3, [pc, #432]	; (800dbb8 <SD_disk_initialize+0x1c8>)
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	f003 0302 	and.w	r3, r3, #2
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d003      	beq.n	800da1a <SD_disk_initialize+0x2a>
    return Stat;
 800da12:	4b69      	ldr	r3, [pc, #420]	; (800dbb8 <SD_disk_initialize+0x1c8>)
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	b2db      	uxtb	r3, r3
 800da18:	e0ca      	b.n	800dbb0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800da1a:	f7ff fea9 	bl	800d770 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800da1e:	f7ff fe2d 	bl	800d67c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800da22:	2300      	movs	r3, #0
 800da24:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800da26:	2100      	movs	r1, #0
 800da28:	2040      	movs	r0, #64	; 0x40
 800da2a:	f7ff ff8f 	bl	800d94c <SD_SendCmd>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b01      	cmp	r3, #1
 800da32:	f040 80a5 	bne.w	800db80 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800da36:	4b61      	ldr	r3, [pc, #388]	; (800dbbc <SD_disk_initialize+0x1cc>)
 800da38:	2264      	movs	r2, #100	; 0x64
 800da3a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800da3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800da40:	2048      	movs	r0, #72	; 0x48
 800da42:	f7ff ff83 	bl	800d94c <SD_SendCmd>
 800da46:	4603      	mov	r3, r0
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d158      	bne.n	800dafe <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800da4c:	2300      	movs	r3, #0
 800da4e:	73fb      	strb	r3, [r7, #15]
 800da50:	e00c      	b.n	800da6c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800da52:	7bfc      	ldrb	r4, [r7, #15]
 800da54:	f7ff fe44 	bl	800d6e0 <SPI_RxByte>
 800da58:	4603      	mov	r3, r0
 800da5a:	461a      	mov	r2, r3
 800da5c:	f104 0310 	add.w	r3, r4, #16
 800da60:	443b      	add	r3, r7
 800da62:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800da66:	7bfb      	ldrb	r3, [r7, #15]
 800da68:	3301      	adds	r3, #1
 800da6a:	73fb      	strb	r3, [r7, #15]
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
 800da6e:	2b03      	cmp	r3, #3
 800da70:	d9ef      	bls.n	800da52 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800da72:	7abb      	ldrb	r3, [r7, #10]
 800da74:	2b01      	cmp	r3, #1
 800da76:	f040 8083 	bne.w	800db80 <SD_disk_initialize+0x190>
 800da7a:	7afb      	ldrb	r3, [r7, #11]
 800da7c:	2baa      	cmp	r3, #170	; 0xaa
 800da7e:	d17f      	bne.n	800db80 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800da80:	2100      	movs	r1, #0
 800da82:	2077      	movs	r0, #119	; 0x77
 800da84:	f7ff ff62 	bl	800d94c <SD_SendCmd>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d807      	bhi.n	800da9e <SD_disk_initialize+0xae>
 800da8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800da92:	2069      	movs	r0, #105	; 0x69
 800da94:	f7ff ff5a 	bl	800d94c <SD_SendCmd>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d005      	beq.n	800daaa <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800da9e:	4b47      	ldr	r3, [pc, #284]	; (800dbbc <SD_disk_initialize+0x1cc>)
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d1eb      	bne.n	800da80 <SD_disk_initialize+0x90>
 800daa8:	e000      	b.n	800daac <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800daaa:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800daac:	4b43      	ldr	r3, [pc, #268]	; (800dbbc <SD_disk_initialize+0x1cc>)
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d064      	beq.n	800db80 <SD_disk_initialize+0x190>
 800dab6:	2100      	movs	r1, #0
 800dab8:	207a      	movs	r0, #122	; 0x7a
 800daba:	f7ff ff47 	bl	800d94c <SD_SendCmd>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d15d      	bne.n	800db80 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800dac4:	2300      	movs	r3, #0
 800dac6:	73fb      	strb	r3, [r7, #15]
 800dac8:	e00c      	b.n	800dae4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800daca:	7bfc      	ldrb	r4, [r7, #15]
 800dacc:	f7ff fe08 	bl	800d6e0 <SPI_RxByte>
 800dad0:	4603      	mov	r3, r0
 800dad2:	461a      	mov	r2, r3
 800dad4:	f104 0310 	add.w	r3, r4, #16
 800dad8:	443b      	add	r3, r7
 800dada:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800dade:	7bfb      	ldrb	r3, [r7, #15]
 800dae0:	3301      	adds	r3, #1
 800dae2:	73fb      	strb	r3, [r7, #15]
 800dae4:	7bfb      	ldrb	r3, [r7, #15]
 800dae6:	2b03      	cmp	r3, #3
 800dae8:	d9ef      	bls.n	800daca <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800daea:	7a3b      	ldrb	r3, [r7, #8]
 800daec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d001      	beq.n	800daf8 <SD_disk_initialize+0x108>
 800daf4:	2306      	movs	r3, #6
 800daf6:	e000      	b.n	800dafa <SD_disk_initialize+0x10a>
 800daf8:	2302      	movs	r3, #2
 800dafa:	73bb      	strb	r3, [r7, #14]
 800dafc:	e040      	b.n	800db80 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800dafe:	2100      	movs	r1, #0
 800db00:	2077      	movs	r0, #119	; 0x77
 800db02:	f7ff ff23 	bl	800d94c <SD_SendCmd>
 800db06:	4603      	mov	r3, r0
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d808      	bhi.n	800db1e <SD_disk_initialize+0x12e>
 800db0c:	2100      	movs	r1, #0
 800db0e:	2069      	movs	r0, #105	; 0x69
 800db10:	f7ff ff1c 	bl	800d94c <SD_SendCmd>
 800db14:	4603      	mov	r3, r0
 800db16:	2b01      	cmp	r3, #1
 800db18:	d801      	bhi.n	800db1e <SD_disk_initialize+0x12e>
 800db1a:	2302      	movs	r3, #2
 800db1c:	e000      	b.n	800db20 <SD_disk_initialize+0x130>
 800db1e:	2301      	movs	r3, #1
 800db20:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800db22:	7bbb      	ldrb	r3, [r7, #14]
 800db24:	2b02      	cmp	r3, #2
 800db26:	d10e      	bne.n	800db46 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800db28:	2100      	movs	r1, #0
 800db2a:	2077      	movs	r0, #119	; 0x77
 800db2c:	f7ff ff0e 	bl	800d94c <SD_SendCmd>
 800db30:	4603      	mov	r3, r0
 800db32:	2b01      	cmp	r3, #1
 800db34:	d80e      	bhi.n	800db54 <SD_disk_initialize+0x164>
 800db36:	2100      	movs	r1, #0
 800db38:	2069      	movs	r0, #105	; 0x69
 800db3a:	f7ff ff07 	bl	800d94c <SD_SendCmd>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d107      	bne.n	800db54 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800db44:	e00d      	b.n	800db62 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800db46:	2100      	movs	r1, #0
 800db48:	2041      	movs	r0, #65	; 0x41
 800db4a:	f7ff feff 	bl	800d94c <SD_SendCmd>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d005      	beq.n	800db60 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800db54:	4b19      	ldr	r3, [pc, #100]	; (800dbbc <SD_disk_initialize+0x1cc>)
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1e1      	bne.n	800db22 <SD_disk_initialize+0x132>
 800db5e:	e000      	b.n	800db62 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800db60:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800db62:	4b16      	ldr	r3, [pc, #88]	; (800dbbc <SD_disk_initialize+0x1cc>)
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	b2db      	uxtb	r3, r3
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d007      	beq.n	800db7c <SD_disk_initialize+0x18c>
 800db6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800db70:	2050      	movs	r0, #80	; 0x50
 800db72:	f7ff feeb 	bl	800d94c <SD_SendCmd>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d001      	beq.n	800db80 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800db7c:	2300      	movs	r3, #0
 800db7e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800db80:	4a0f      	ldr	r2, [pc, #60]	; (800dbc0 <SD_disk_initialize+0x1d0>)
 800db82:	7bbb      	ldrb	r3, [r7, #14]
 800db84:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800db86:	f7ff fd85 	bl	800d694 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800db8a:	f7ff fda9 	bl	800d6e0 <SPI_RxByte>

  if (type)
 800db8e:	7bbb      	ldrb	r3, [r7, #14]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d008      	beq.n	800dba6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 800db94:	4b08      	ldr	r3, [pc, #32]	; (800dbb8 <SD_disk_initialize+0x1c8>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	f023 0301 	bic.w	r3, r3, #1
 800db9e:	b2da      	uxtb	r2, r3
 800dba0:	4b05      	ldr	r3, [pc, #20]	; (800dbb8 <SD_disk_initialize+0x1c8>)
 800dba2:	701a      	strb	r2, [r3, #0]
 800dba4:	e001      	b.n	800dbaa <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800dba6:	f7ff fe2f 	bl	800d808 <SD_PowerOff>
  }

  return Stat;
 800dbaa:	4b03      	ldr	r3, [pc, #12]	; (800dbb8 <SD_disk_initialize+0x1c8>)
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	b2db      	uxtb	r3, r3
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3714      	adds	r7, #20
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd90      	pop	{r4, r7, pc}
 800dbb8:	2000004c 	.word	0x2000004c
 800dbbc:	20002386 	.word	0x20002386
 800dbc0:	2001b7b4 	.word	0x2001b7b4

0800dbc4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	4603      	mov	r3, r0
 800dbcc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800dbce:	79fb      	ldrb	r3, [r7, #7]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <SD_disk_status+0x14>
    return STA_NOINIT;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	e002      	b.n	800dbde <SD_disk_status+0x1a>

  return Stat;
 800dbd8:	4b04      	ldr	r3, [pc, #16]	; (800dbec <SD_disk_status+0x28>)
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	b2db      	uxtb	r3, r3
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	370c      	adds	r7, #12
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	2000004c 	.word	0x2000004c

0800dbf0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60b9      	str	r1, [r7, #8]
 800dbf8:	607a      	str	r2, [r7, #4]
 800dbfa:	603b      	str	r3, [r7, #0]
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800dc00:	7bfb      	ldrb	r3, [r7, #15]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d102      	bne.n	800dc0c <SD_disk_read+0x1c>
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d101      	bne.n	800dc10 <SD_disk_read+0x20>
    return RES_PARERR;
 800dc0c:	2304      	movs	r3, #4
 800dc0e:	e051      	b.n	800dcb4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 800dc10:	4b2a      	ldr	r3, [pc, #168]	; (800dcbc <SD_disk_read+0xcc>)
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	f003 0301 	and.w	r3, r3, #1
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d001      	beq.n	800dc22 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800dc1e:	2303      	movs	r3, #3
 800dc20:	e048      	b.n	800dcb4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800dc22:	4b27      	ldr	r3, [pc, #156]	; (800dcc0 <SD_disk_read+0xd0>)
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	f003 0304 	and.w	r3, r3, #4
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d102      	bne.n	800dc34 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	025b      	lsls	r3, r3, #9
 800dc32:	607b      	str	r3, [r7, #4]

  SELECT();
 800dc34:	f7ff fd22 	bl	800d67c <SELECT>

  if (count == 1)
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d111      	bne.n	800dc62 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	2051      	movs	r0, #81	; 0x51
 800dc42:	f7ff fe83 	bl	800d94c <SD_SendCmd>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d129      	bne.n	800dca0 <SD_disk_read+0xb0>
 800dc4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc50:	68b8      	ldr	r0, [r7, #8]
 800dc52:	f7ff fdf1 	bl	800d838 <SD_RxDataBlock>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d021      	beq.n	800dca0 <SD_disk_read+0xb0>
      count = 0;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	603b      	str	r3, [r7, #0]
 800dc60:	e01e      	b.n	800dca0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800dc62:	6879      	ldr	r1, [r7, #4]
 800dc64:	2052      	movs	r0, #82	; 0x52
 800dc66:	f7ff fe71 	bl	800d94c <SD_SendCmd>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d117      	bne.n	800dca0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800dc70:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc74:	68b8      	ldr	r0, [r7, #8]
 800dc76:	f7ff fddf 	bl	800d838 <SD_RxDataBlock>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00a      	beq.n	800dc96 <SD_disk_read+0xa6>
          break;

        buff += 512;
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dc86:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	603b      	str	r3, [r7, #0]
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d1ed      	bne.n	800dc70 <SD_disk_read+0x80>
 800dc94:	e000      	b.n	800dc98 <SD_disk_read+0xa8>
          break;
 800dc96:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800dc98:	2100      	movs	r1, #0
 800dc9a:	204c      	movs	r0, #76	; 0x4c
 800dc9c:	f7ff fe56 	bl	800d94c <SD_SendCmd>
    }
  }

  DESELECT();
 800dca0:	f7ff fcf8 	bl	800d694 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800dca4:	f7ff fd1c 	bl	800d6e0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	bf14      	ite	ne
 800dcae:	2301      	movne	r3, #1
 800dcb0:	2300      	moveq	r3, #0
 800dcb2:	b2db      	uxtb	r3, r3
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	2000004c 	.word	0x2000004c
 800dcc0:	2001b7b4 	.word	0x2001b7b4

0800dcc4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60b9      	str	r1, [r7, #8]
 800dccc:	607a      	str	r2, [r7, #4]
 800dcce:	603b      	str	r3, [r7, #0]
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800dcd4:	7bfb      	ldrb	r3, [r7, #15]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d102      	bne.n	800dce0 <SD_disk_write+0x1c>
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d101      	bne.n	800dce4 <SD_disk_write+0x20>
    return RES_PARERR;
 800dce0:	2304      	movs	r3, #4
 800dce2:	e06b      	b.n	800ddbc <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 800dce4:	4b37      	ldr	r3, [pc, #220]	; (800ddc4 <SD_disk_write+0x100>)
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	f003 0301 	and.w	r3, r3, #1
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d001      	beq.n	800dcf6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	e062      	b.n	800ddbc <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800dcf6:	4b33      	ldr	r3, [pc, #204]	; (800ddc4 <SD_disk_write+0x100>)
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	f003 0304 	and.w	r3, r3, #4
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d001      	beq.n	800dd08 <SD_disk_write+0x44>
    return RES_WRPRT;
 800dd04:	2302      	movs	r3, #2
 800dd06:	e059      	b.n	800ddbc <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800dd08:	4b2f      	ldr	r3, [pc, #188]	; (800ddc8 <SD_disk_write+0x104>)
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	f003 0304 	and.w	r3, r3, #4
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d102      	bne.n	800dd1a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	025b      	lsls	r3, r3, #9
 800dd18:	607b      	str	r3, [r7, #4]

  SELECT();
 800dd1a:	f7ff fcaf 	bl	800d67c <SELECT>

  if (count == 1)
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d110      	bne.n	800dd46 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800dd24:	6879      	ldr	r1, [r7, #4]
 800dd26:	2058      	movs	r0, #88	; 0x58
 800dd28:	f7ff fe10 	bl	800d94c <SD_SendCmd>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d13a      	bne.n	800dda8 <SD_disk_write+0xe4>
 800dd32:	21fe      	movs	r1, #254	; 0xfe
 800dd34:	68b8      	ldr	r0, [r7, #8]
 800dd36:	f7ff fdb5 	bl	800d8a4 <SD_TxDataBlock>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d033      	beq.n	800dda8 <SD_disk_write+0xe4>
      count = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	603b      	str	r3, [r7, #0]
 800dd44:	e030      	b.n	800dda8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800dd46:	4b20      	ldr	r3, [pc, #128]	; (800ddc8 <SD_disk_write+0x104>)
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	f003 0302 	and.w	r3, r3, #2
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d007      	beq.n	800dd62 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800dd52:	2100      	movs	r1, #0
 800dd54:	2077      	movs	r0, #119	; 0x77
 800dd56:	f7ff fdf9 	bl	800d94c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800dd5a:	6839      	ldr	r1, [r7, #0]
 800dd5c:	2057      	movs	r0, #87	; 0x57
 800dd5e:	f7ff fdf5 	bl	800d94c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800dd62:	6879      	ldr	r1, [r7, #4]
 800dd64:	2059      	movs	r0, #89	; 0x59
 800dd66:	f7ff fdf1 	bl	800d94c <SD_SendCmd>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d11b      	bne.n	800dda8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800dd70:	21fc      	movs	r1, #252	; 0xfc
 800dd72:	68b8      	ldr	r0, [r7, #8]
 800dd74:	f7ff fd96 	bl	800d8a4 <SD_TxDataBlock>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00a      	beq.n	800dd94 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dd84:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	3b01      	subs	r3, #1
 800dd8a:	603b      	str	r3, [r7, #0]
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1ee      	bne.n	800dd70 <SD_disk_write+0xac>
 800dd92:	e000      	b.n	800dd96 <SD_disk_write+0xd2>
          break;
 800dd94:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800dd96:	21fd      	movs	r1, #253	; 0xfd
 800dd98:	2000      	movs	r0, #0
 800dd9a:	f7ff fd83 	bl	800d8a4 <SD_TxDataBlock>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d101      	bne.n	800dda8 <SD_disk_write+0xe4>
      {
        count = 1;
 800dda4:	2301      	movs	r3, #1
 800dda6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 800dda8:	f7ff fc74 	bl	800d694 <DESELECT>
  SPI_RxByte();
 800ddac:	f7ff fc98 	bl	800d6e0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	bf14      	ite	ne
 800ddb6:	2301      	movne	r3, #1
 800ddb8:	2300      	moveq	r3, #0
 800ddba:	b2db      	uxtb	r3, r3
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	2000004c 	.word	0x2000004c
 800ddc8:	2001b7b4 	.word	0x2001b7b4

0800ddcc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800ddcc:	b590      	push	{r4, r7, lr}
 800ddce:	b08b      	sub	sp, #44	; 0x2c
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	603a      	str	r2, [r7, #0]
 800ddd6:	71fb      	strb	r3, [r7, #7]
 800ddd8:	460b      	mov	r3, r1
 800ddda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 800dde0:	79fb      	ldrb	r3, [r7, #7]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d001      	beq.n	800ddea <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800dde6:	2304      	movs	r3, #4
 800dde8:	e11b      	b.n	800e022 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 800ddf0:	79bb      	ldrb	r3, [r7, #6]
 800ddf2:	2b05      	cmp	r3, #5
 800ddf4:	d129      	bne.n	800de4a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	d017      	beq.n	800de2e <SD_disk_ioctl+0x62>
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	dc1f      	bgt.n	800de42 <SD_disk_ioctl+0x76>
 800de02:	2b00      	cmp	r3, #0
 800de04:	d002      	beq.n	800de0c <SD_disk_ioctl+0x40>
 800de06:	2b01      	cmp	r3, #1
 800de08:	d00b      	beq.n	800de22 <SD_disk_ioctl+0x56>
 800de0a:	e01a      	b.n	800de42 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800de0c:	f7ff fd08 	bl	800d820 <SD_CheckPower>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d001      	beq.n	800de1a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800de16:	f7ff fcf7 	bl	800d808 <SD_PowerOff>
      res = RES_OK;
 800de1a:	2300      	movs	r3, #0
 800de1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800de20:	e0fd      	b.n	800e01e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800de22:	f7ff fca5 	bl	800d770 <SD_PowerOn>
      res = RES_OK;
 800de26:	2300      	movs	r3, #0
 800de28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800de2c:	e0f7      	b.n	800e01e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800de2e:	6a3b      	ldr	r3, [r7, #32]
 800de30:	1c5c      	adds	r4, r3, #1
 800de32:	f7ff fcf5 	bl	800d820 <SD_CheckPower>
 800de36:	4603      	mov	r3, r0
 800de38:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800de3a:	2300      	movs	r3, #0
 800de3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800de40:	e0ed      	b.n	800e01e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800de42:	2304      	movs	r3, #4
 800de44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de48:	e0e9      	b.n	800e01e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800de4a:	4b78      	ldr	r3, [pc, #480]	; (800e02c <SD_disk_ioctl+0x260>)
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	f003 0301 	and.w	r3, r3, #1
 800de54:	2b00      	cmp	r3, #0
 800de56:	d001      	beq.n	800de5c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800de58:	2303      	movs	r3, #3
 800de5a:	e0e2      	b.n	800e022 <SD_disk_ioctl+0x256>

    SELECT();
 800de5c:	f7ff fc0e 	bl	800d67c <SELECT>

    switch (ctrl)
 800de60:	79bb      	ldrb	r3, [r7, #6]
 800de62:	2b0d      	cmp	r3, #13
 800de64:	f200 80cc 	bhi.w	800e000 <SD_disk_ioctl+0x234>
 800de68:	a201      	add	r2, pc, #4	; (adr r2, 800de70 <SD_disk_ioctl+0xa4>)
 800de6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de6e:	bf00      	nop
 800de70:	0800df6b 	.word	0x0800df6b
 800de74:	0800dea9 	.word	0x0800dea9
 800de78:	0800df5b 	.word	0x0800df5b
 800de7c:	0800e001 	.word	0x0800e001
 800de80:	0800e001 	.word	0x0800e001
 800de84:	0800e001 	.word	0x0800e001
 800de88:	0800e001 	.word	0x0800e001
 800de8c:	0800e001 	.word	0x0800e001
 800de90:	0800e001 	.word	0x0800e001
 800de94:	0800e001 	.word	0x0800e001
 800de98:	0800e001 	.word	0x0800e001
 800de9c:	0800df7d 	.word	0x0800df7d
 800dea0:	0800dfa1 	.word	0x0800dfa1
 800dea4:	0800dfc5 	.word	0x0800dfc5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800dea8:	2100      	movs	r1, #0
 800deaa:	2049      	movs	r0, #73	; 0x49
 800deac:	f7ff fd4e 	bl	800d94c <SD_SendCmd>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f040 80a8 	bne.w	800e008 <SD_disk_ioctl+0x23c>
 800deb8:	f107 030c 	add.w	r3, r7, #12
 800debc:	2110      	movs	r1, #16
 800debe:	4618      	mov	r0, r3
 800dec0:	f7ff fcba 	bl	800d838 <SD_RxDataBlock>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	f000 809e 	beq.w	800e008 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 800decc:	7b3b      	ldrb	r3, [r7, #12]
 800dece:	099b      	lsrs	r3, r3, #6
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d10e      	bne.n	800def4 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800ded6:	7d7b      	ldrb	r3, [r7, #21]
 800ded8:	b29a      	uxth	r2, r3
 800deda:	7d3b      	ldrb	r3, [r7, #20]
 800dedc:	b29b      	uxth	r3, r3
 800dede:	021b      	lsls	r3, r3, #8
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	4413      	add	r3, r2
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	3301      	adds	r3, #1
 800dee8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800deea:	8bfb      	ldrh	r3, [r7, #30]
 800deec:	029a      	lsls	r2, r3, #10
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	601a      	str	r2, [r3, #0]
 800def2:	e02e      	b.n	800df52 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800def4:	7c7b      	ldrb	r3, [r7, #17]
 800def6:	f003 030f 	and.w	r3, r3, #15
 800defa:	b2da      	uxtb	r2, r3
 800defc:	7dbb      	ldrb	r3, [r7, #22]
 800defe:	09db      	lsrs	r3, r3, #7
 800df00:	b2db      	uxtb	r3, r3
 800df02:	4413      	add	r3, r2
 800df04:	b2da      	uxtb	r2, r3
 800df06:	7d7b      	ldrb	r3, [r7, #21]
 800df08:	005b      	lsls	r3, r3, #1
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	f003 0306 	and.w	r3, r3, #6
 800df10:	b2db      	uxtb	r3, r3
 800df12:	4413      	add	r3, r2
 800df14:	b2db      	uxtb	r3, r3
 800df16:	3302      	adds	r3, #2
 800df18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800df1c:	7d3b      	ldrb	r3, [r7, #20]
 800df1e:	099b      	lsrs	r3, r3, #6
 800df20:	b2db      	uxtb	r3, r3
 800df22:	b29a      	uxth	r2, r3
 800df24:	7cfb      	ldrb	r3, [r7, #19]
 800df26:	b29b      	uxth	r3, r3
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	4413      	add	r3, r2
 800df2e:	b29a      	uxth	r2, r3
 800df30:	7cbb      	ldrb	r3, [r7, #18]
 800df32:	029b      	lsls	r3, r3, #10
 800df34:	b29b      	uxth	r3, r3
 800df36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	4413      	add	r3, r2
 800df3e:	b29b      	uxth	r3, r3
 800df40:	3301      	adds	r3, #1
 800df42:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800df44:	8bfa      	ldrh	r2, [r7, #30]
 800df46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df4a:	3b09      	subs	r3, #9
 800df4c:	409a      	lsls	r2, r3
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800df52:	2300      	movs	r3, #0
 800df54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800df58:	e056      	b.n	800e008 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df60:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800df62:	2300      	movs	r3, #0
 800df64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800df68:	e055      	b.n	800e016 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800df6a:	f7ff fbe5 	bl	800d738 <SD_ReadyWait>
 800df6e:	4603      	mov	r3, r0
 800df70:	2bff      	cmp	r3, #255	; 0xff
 800df72:	d14b      	bne.n	800e00c <SD_disk_ioctl+0x240>
        res = RES_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800df7a:	e047      	b.n	800e00c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800df7c:	2100      	movs	r1, #0
 800df7e:	2049      	movs	r0, #73	; 0x49
 800df80:	f7ff fce4 	bl	800d94c <SD_SendCmd>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d142      	bne.n	800e010 <SD_disk_ioctl+0x244>
 800df8a:	2110      	movs	r1, #16
 800df8c:	6a38      	ldr	r0, [r7, #32]
 800df8e:	f7ff fc53 	bl	800d838 <SD_RxDataBlock>
 800df92:	4603      	mov	r3, r0
 800df94:	2b00      	cmp	r3, #0
 800df96:	d03b      	beq.n	800e010 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800df9e:	e037      	b.n	800e010 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	204a      	movs	r0, #74	; 0x4a
 800dfa4:	f7ff fcd2 	bl	800d94c <SD_SendCmd>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d132      	bne.n	800e014 <SD_disk_ioctl+0x248>
 800dfae:	2110      	movs	r1, #16
 800dfb0:	6a38      	ldr	r0, [r7, #32]
 800dfb2:	f7ff fc41 	bl	800d838 <SD_RxDataBlock>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d02b      	beq.n	800e014 <SD_disk_ioctl+0x248>
        res = RES_OK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800dfc2:	e027      	b.n	800e014 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	207a      	movs	r0, #122	; 0x7a
 800dfc8:	f7ff fcc0 	bl	800d94c <SD_SendCmd>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d116      	bne.n	800e000 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dfd8:	e00b      	b.n	800dff2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800dfda:	6a3c      	ldr	r4, [r7, #32]
 800dfdc:	1c63      	adds	r3, r4, #1
 800dfde:	623b      	str	r3, [r7, #32]
 800dfe0:	f7ff fb7e 	bl	800d6e0 <SPI_RxByte>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800dfe8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfec:	3301      	adds	r3, #1
 800dfee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dff2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dff6:	2b03      	cmp	r3, #3
 800dff8:	d9ef      	bls.n	800dfda <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 800e000:	2304      	movs	r3, #4
 800e002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e006:	e006      	b.n	800e016 <SD_disk_ioctl+0x24a>
      break;
 800e008:	bf00      	nop
 800e00a:	e004      	b.n	800e016 <SD_disk_ioctl+0x24a>
      break;
 800e00c:	bf00      	nop
 800e00e:	e002      	b.n	800e016 <SD_disk_ioctl+0x24a>
      break;
 800e010:	bf00      	nop
 800e012:	e000      	b.n	800e016 <SD_disk_ioctl+0x24a>
      break;
 800e014:	bf00      	nop
    }

    DESELECT();
 800e016:	f7ff fb3d 	bl	800d694 <DESELECT>
    SPI_RxByte();
 800e01a:	f7ff fb61 	bl	800d6e0 <SPI_RxByte>
  }

  return res;
 800e01e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e022:	4618      	mov	r0, r3
 800e024:	372c      	adds	r7, #44	; 0x2c
 800e026:	46bd      	mov	sp, r7
 800e028:	bd90      	pop	{r4, r7, pc}
 800e02a:	bf00      	nop
 800e02c:	2000004c 	.word	0x2000004c

0800e030 <__errno>:
 800e030:	4b01      	ldr	r3, [pc, #4]	; (800e038 <__errno+0x8>)
 800e032:	6818      	ldr	r0, [r3, #0]
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop
 800e038:	20000050 	.word	0x20000050

0800e03c <__libc_init_array>:
 800e03c:	b570      	push	{r4, r5, r6, lr}
 800e03e:	4d0d      	ldr	r5, [pc, #52]	; (800e074 <__libc_init_array+0x38>)
 800e040:	4c0d      	ldr	r4, [pc, #52]	; (800e078 <__libc_init_array+0x3c>)
 800e042:	1b64      	subs	r4, r4, r5
 800e044:	10a4      	asrs	r4, r4, #2
 800e046:	2600      	movs	r6, #0
 800e048:	42a6      	cmp	r6, r4
 800e04a:	d109      	bne.n	800e060 <__libc_init_array+0x24>
 800e04c:	4d0b      	ldr	r5, [pc, #44]	; (800e07c <__libc_init_array+0x40>)
 800e04e:	4c0c      	ldr	r4, [pc, #48]	; (800e080 <__libc_init_array+0x44>)
 800e050:	f000 fc8e 	bl	800e970 <_init>
 800e054:	1b64      	subs	r4, r4, r5
 800e056:	10a4      	asrs	r4, r4, #2
 800e058:	2600      	movs	r6, #0
 800e05a:	42a6      	cmp	r6, r4
 800e05c:	d105      	bne.n	800e06a <__libc_init_array+0x2e>
 800e05e:	bd70      	pop	{r4, r5, r6, pc}
 800e060:	f855 3b04 	ldr.w	r3, [r5], #4
 800e064:	4798      	blx	r3
 800e066:	3601      	adds	r6, #1
 800e068:	e7ee      	b.n	800e048 <__libc_init_array+0xc>
 800e06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e06e:	4798      	blx	r3
 800e070:	3601      	adds	r6, #1
 800e072:	e7f2      	b.n	800e05a <__libc_init_array+0x1e>
 800e074:	0800f398 	.word	0x0800f398
 800e078:	0800f398 	.word	0x0800f398
 800e07c:	0800f398 	.word	0x0800f398
 800e080:	0800f39c 	.word	0x0800f39c

0800e084 <memcpy>:
 800e084:	440a      	add	r2, r1
 800e086:	4291      	cmp	r1, r2
 800e088:	f100 33ff 	add.w	r3, r0, #4294967295
 800e08c:	d100      	bne.n	800e090 <memcpy+0xc>
 800e08e:	4770      	bx	lr
 800e090:	b510      	push	{r4, lr}
 800e092:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e09a:	4291      	cmp	r1, r2
 800e09c:	d1f9      	bne.n	800e092 <memcpy+0xe>
 800e09e:	bd10      	pop	{r4, pc}

0800e0a0 <memset>:
 800e0a0:	4402      	add	r2, r0
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d100      	bne.n	800e0aa <memset+0xa>
 800e0a8:	4770      	bx	lr
 800e0aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e0ae:	e7f9      	b.n	800e0a4 <memset+0x4>

0800e0b0 <siprintf>:
 800e0b0:	b40e      	push	{r1, r2, r3}
 800e0b2:	b500      	push	{lr}
 800e0b4:	b09c      	sub	sp, #112	; 0x70
 800e0b6:	ab1d      	add	r3, sp, #116	; 0x74
 800e0b8:	9002      	str	r0, [sp, #8]
 800e0ba:	9006      	str	r0, [sp, #24]
 800e0bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e0c0:	4809      	ldr	r0, [pc, #36]	; (800e0e8 <siprintf+0x38>)
 800e0c2:	9107      	str	r1, [sp, #28]
 800e0c4:	9104      	str	r1, [sp, #16]
 800e0c6:	4909      	ldr	r1, [pc, #36]	; (800e0ec <siprintf+0x3c>)
 800e0c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0cc:	9105      	str	r1, [sp, #20]
 800e0ce:	6800      	ldr	r0, [r0, #0]
 800e0d0:	9301      	str	r3, [sp, #4]
 800e0d2:	a902      	add	r1, sp, #8
 800e0d4:	f000 f868 	bl	800e1a8 <_svfiprintf_r>
 800e0d8:	9b02      	ldr	r3, [sp, #8]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	701a      	strb	r2, [r3, #0]
 800e0de:	b01c      	add	sp, #112	; 0x70
 800e0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0e4:	b003      	add	sp, #12
 800e0e6:	4770      	bx	lr
 800e0e8:	20000050 	.word	0x20000050
 800e0ec:	ffff0208 	.word	0xffff0208

0800e0f0 <__ssputs_r>:
 800e0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f4:	688e      	ldr	r6, [r1, #8]
 800e0f6:	429e      	cmp	r6, r3
 800e0f8:	4682      	mov	sl, r0
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	4690      	mov	r8, r2
 800e0fe:	461f      	mov	r7, r3
 800e100:	d838      	bhi.n	800e174 <__ssputs_r+0x84>
 800e102:	898a      	ldrh	r2, [r1, #12]
 800e104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e108:	d032      	beq.n	800e170 <__ssputs_r+0x80>
 800e10a:	6825      	ldr	r5, [r4, #0]
 800e10c:	6909      	ldr	r1, [r1, #16]
 800e10e:	eba5 0901 	sub.w	r9, r5, r1
 800e112:	6965      	ldr	r5, [r4, #20]
 800e114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e11c:	3301      	adds	r3, #1
 800e11e:	444b      	add	r3, r9
 800e120:	106d      	asrs	r5, r5, #1
 800e122:	429d      	cmp	r5, r3
 800e124:	bf38      	it	cc
 800e126:	461d      	movcc	r5, r3
 800e128:	0553      	lsls	r3, r2, #21
 800e12a:	d531      	bpl.n	800e190 <__ssputs_r+0xa0>
 800e12c:	4629      	mov	r1, r5
 800e12e:	f000 fb55 	bl	800e7dc <_malloc_r>
 800e132:	4606      	mov	r6, r0
 800e134:	b950      	cbnz	r0, 800e14c <__ssputs_r+0x5c>
 800e136:	230c      	movs	r3, #12
 800e138:	f8ca 3000 	str.w	r3, [sl]
 800e13c:	89a3      	ldrh	r3, [r4, #12]
 800e13e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e142:	81a3      	strh	r3, [r4, #12]
 800e144:	f04f 30ff 	mov.w	r0, #4294967295
 800e148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e14c:	6921      	ldr	r1, [r4, #16]
 800e14e:	464a      	mov	r2, r9
 800e150:	f7ff ff98 	bl	800e084 <memcpy>
 800e154:	89a3      	ldrh	r3, [r4, #12]
 800e156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e15a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e15e:	81a3      	strh	r3, [r4, #12]
 800e160:	6126      	str	r6, [r4, #16]
 800e162:	6165      	str	r5, [r4, #20]
 800e164:	444e      	add	r6, r9
 800e166:	eba5 0509 	sub.w	r5, r5, r9
 800e16a:	6026      	str	r6, [r4, #0]
 800e16c:	60a5      	str	r5, [r4, #8]
 800e16e:	463e      	mov	r6, r7
 800e170:	42be      	cmp	r6, r7
 800e172:	d900      	bls.n	800e176 <__ssputs_r+0x86>
 800e174:	463e      	mov	r6, r7
 800e176:	6820      	ldr	r0, [r4, #0]
 800e178:	4632      	mov	r2, r6
 800e17a:	4641      	mov	r1, r8
 800e17c:	f000 faa8 	bl	800e6d0 <memmove>
 800e180:	68a3      	ldr	r3, [r4, #8]
 800e182:	1b9b      	subs	r3, r3, r6
 800e184:	60a3      	str	r3, [r4, #8]
 800e186:	6823      	ldr	r3, [r4, #0]
 800e188:	4433      	add	r3, r6
 800e18a:	6023      	str	r3, [r4, #0]
 800e18c:	2000      	movs	r0, #0
 800e18e:	e7db      	b.n	800e148 <__ssputs_r+0x58>
 800e190:	462a      	mov	r2, r5
 800e192:	f000 fb97 	bl	800e8c4 <_realloc_r>
 800e196:	4606      	mov	r6, r0
 800e198:	2800      	cmp	r0, #0
 800e19a:	d1e1      	bne.n	800e160 <__ssputs_r+0x70>
 800e19c:	6921      	ldr	r1, [r4, #16]
 800e19e:	4650      	mov	r0, sl
 800e1a0:	f000 fab0 	bl	800e704 <_free_r>
 800e1a4:	e7c7      	b.n	800e136 <__ssputs_r+0x46>
	...

0800e1a8 <_svfiprintf_r>:
 800e1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ac:	4698      	mov	r8, r3
 800e1ae:	898b      	ldrh	r3, [r1, #12]
 800e1b0:	061b      	lsls	r3, r3, #24
 800e1b2:	b09d      	sub	sp, #116	; 0x74
 800e1b4:	4607      	mov	r7, r0
 800e1b6:	460d      	mov	r5, r1
 800e1b8:	4614      	mov	r4, r2
 800e1ba:	d50e      	bpl.n	800e1da <_svfiprintf_r+0x32>
 800e1bc:	690b      	ldr	r3, [r1, #16]
 800e1be:	b963      	cbnz	r3, 800e1da <_svfiprintf_r+0x32>
 800e1c0:	2140      	movs	r1, #64	; 0x40
 800e1c2:	f000 fb0b 	bl	800e7dc <_malloc_r>
 800e1c6:	6028      	str	r0, [r5, #0]
 800e1c8:	6128      	str	r0, [r5, #16]
 800e1ca:	b920      	cbnz	r0, 800e1d6 <_svfiprintf_r+0x2e>
 800e1cc:	230c      	movs	r3, #12
 800e1ce:	603b      	str	r3, [r7, #0]
 800e1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d4:	e0d1      	b.n	800e37a <_svfiprintf_r+0x1d2>
 800e1d6:	2340      	movs	r3, #64	; 0x40
 800e1d8:	616b      	str	r3, [r5, #20]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e1de:	2320      	movs	r3, #32
 800e1e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1e8:	2330      	movs	r3, #48	; 0x30
 800e1ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e394 <_svfiprintf_r+0x1ec>
 800e1ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1f2:	f04f 0901 	mov.w	r9, #1
 800e1f6:	4623      	mov	r3, r4
 800e1f8:	469a      	mov	sl, r3
 800e1fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1fe:	b10a      	cbz	r2, 800e204 <_svfiprintf_r+0x5c>
 800e200:	2a25      	cmp	r2, #37	; 0x25
 800e202:	d1f9      	bne.n	800e1f8 <_svfiprintf_r+0x50>
 800e204:	ebba 0b04 	subs.w	fp, sl, r4
 800e208:	d00b      	beq.n	800e222 <_svfiprintf_r+0x7a>
 800e20a:	465b      	mov	r3, fp
 800e20c:	4622      	mov	r2, r4
 800e20e:	4629      	mov	r1, r5
 800e210:	4638      	mov	r0, r7
 800e212:	f7ff ff6d 	bl	800e0f0 <__ssputs_r>
 800e216:	3001      	adds	r0, #1
 800e218:	f000 80aa 	beq.w	800e370 <_svfiprintf_r+0x1c8>
 800e21c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e21e:	445a      	add	r2, fp
 800e220:	9209      	str	r2, [sp, #36]	; 0x24
 800e222:	f89a 3000 	ldrb.w	r3, [sl]
 800e226:	2b00      	cmp	r3, #0
 800e228:	f000 80a2 	beq.w	800e370 <_svfiprintf_r+0x1c8>
 800e22c:	2300      	movs	r3, #0
 800e22e:	f04f 32ff 	mov.w	r2, #4294967295
 800e232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e236:	f10a 0a01 	add.w	sl, sl, #1
 800e23a:	9304      	str	r3, [sp, #16]
 800e23c:	9307      	str	r3, [sp, #28]
 800e23e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e242:	931a      	str	r3, [sp, #104]	; 0x68
 800e244:	4654      	mov	r4, sl
 800e246:	2205      	movs	r2, #5
 800e248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e24c:	4851      	ldr	r0, [pc, #324]	; (800e394 <_svfiprintf_r+0x1ec>)
 800e24e:	f7f1 ffff 	bl	8000250 <memchr>
 800e252:	9a04      	ldr	r2, [sp, #16]
 800e254:	b9d8      	cbnz	r0, 800e28e <_svfiprintf_r+0xe6>
 800e256:	06d0      	lsls	r0, r2, #27
 800e258:	bf44      	itt	mi
 800e25a:	2320      	movmi	r3, #32
 800e25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e260:	0711      	lsls	r1, r2, #28
 800e262:	bf44      	itt	mi
 800e264:	232b      	movmi	r3, #43	; 0x2b
 800e266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e26a:	f89a 3000 	ldrb.w	r3, [sl]
 800e26e:	2b2a      	cmp	r3, #42	; 0x2a
 800e270:	d015      	beq.n	800e29e <_svfiprintf_r+0xf6>
 800e272:	9a07      	ldr	r2, [sp, #28]
 800e274:	4654      	mov	r4, sl
 800e276:	2000      	movs	r0, #0
 800e278:	f04f 0c0a 	mov.w	ip, #10
 800e27c:	4621      	mov	r1, r4
 800e27e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e282:	3b30      	subs	r3, #48	; 0x30
 800e284:	2b09      	cmp	r3, #9
 800e286:	d94e      	bls.n	800e326 <_svfiprintf_r+0x17e>
 800e288:	b1b0      	cbz	r0, 800e2b8 <_svfiprintf_r+0x110>
 800e28a:	9207      	str	r2, [sp, #28]
 800e28c:	e014      	b.n	800e2b8 <_svfiprintf_r+0x110>
 800e28e:	eba0 0308 	sub.w	r3, r0, r8
 800e292:	fa09 f303 	lsl.w	r3, r9, r3
 800e296:	4313      	orrs	r3, r2
 800e298:	9304      	str	r3, [sp, #16]
 800e29a:	46a2      	mov	sl, r4
 800e29c:	e7d2      	b.n	800e244 <_svfiprintf_r+0x9c>
 800e29e:	9b03      	ldr	r3, [sp, #12]
 800e2a0:	1d19      	adds	r1, r3, #4
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	9103      	str	r1, [sp, #12]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	bfbb      	ittet	lt
 800e2aa:	425b      	neglt	r3, r3
 800e2ac:	f042 0202 	orrlt.w	r2, r2, #2
 800e2b0:	9307      	strge	r3, [sp, #28]
 800e2b2:	9307      	strlt	r3, [sp, #28]
 800e2b4:	bfb8      	it	lt
 800e2b6:	9204      	strlt	r2, [sp, #16]
 800e2b8:	7823      	ldrb	r3, [r4, #0]
 800e2ba:	2b2e      	cmp	r3, #46	; 0x2e
 800e2bc:	d10c      	bne.n	800e2d8 <_svfiprintf_r+0x130>
 800e2be:	7863      	ldrb	r3, [r4, #1]
 800e2c0:	2b2a      	cmp	r3, #42	; 0x2a
 800e2c2:	d135      	bne.n	800e330 <_svfiprintf_r+0x188>
 800e2c4:	9b03      	ldr	r3, [sp, #12]
 800e2c6:	1d1a      	adds	r2, r3, #4
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	9203      	str	r2, [sp, #12]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	bfb8      	it	lt
 800e2d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2d4:	3402      	adds	r4, #2
 800e2d6:	9305      	str	r3, [sp, #20]
 800e2d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e3a4 <_svfiprintf_r+0x1fc>
 800e2dc:	7821      	ldrb	r1, [r4, #0]
 800e2de:	2203      	movs	r2, #3
 800e2e0:	4650      	mov	r0, sl
 800e2e2:	f7f1 ffb5 	bl	8000250 <memchr>
 800e2e6:	b140      	cbz	r0, 800e2fa <_svfiprintf_r+0x152>
 800e2e8:	2340      	movs	r3, #64	; 0x40
 800e2ea:	eba0 000a 	sub.w	r0, r0, sl
 800e2ee:	fa03 f000 	lsl.w	r0, r3, r0
 800e2f2:	9b04      	ldr	r3, [sp, #16]
 800e2f4:	4303      	orrs	r3, r0
 800e2f6:	3401      	adds	r4, #1
 800e2f8:	9304      	str	r3, [sp, #16]
 800e2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2fe:	4826      	ldr	r0, [pc, #152]	; (800e398 <_svfiprintf_r+0x1f0>)
 800e300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e304:	2206      	movs	r2, #6
 800e306:	f7f1 ffa3 	bl	8000250 <memchr>
 800e30a:	2800      	cmp	r0, #0
 800e30c:	d038      	beq.n	800e380 <_svfiprintf_r+0x1d8>
 800e30e:	4b23      	ldr	r3, [pc, #140]	; (800e39c <_svfiprintf_r+0x1f4>)
 800e310:	bb1b      	cbnz	r3, 800e35a <_svfiprintf_r+0x1b2>
 800e312:	9b03      	ldr	r3, [sp, #12]
 800e314:	3307      	adds	r3, #7
 800e316:	f023 0307 	bic.w	r3, r3, #7
 800e31a:	3308      	adds	r3, #8
 800e31c:	9303      	str	r3, [sp, #12]
 800e31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e320:	4433      	add	r3, r6
 800e322:	9309      	str	r3, [sp, #36]	; 0x24
 800e324:	e767      	b.n	800e1f6 <_svfiprintf_r+0x4e>
 800e326:	fb0c 3202 	mla	r2, ip, r2, r3
 800e32a:	460c      	mov	r4, r1
 800e32c:	2001      	movs	r0, #1
 800e32e:	e7a5      	b.n	800e27c <_svfiprintf_r+0xd4>
 800e330:	2300      	movs	r3, #0
 800e332:	3401      	adds	r4, #1
 800e334:	9305      	str	r3, [sp, #20]
 800e336:	4619      	mov	r1, r3
 800e338:	f04f 0c0a 	mov.w	ip, #10
 800e33c:	4620      	mov	r0, r4
 800e33e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e342:	3a30      	subs	r2, #48	; 0x30
 800e344:	2a09      	cmp	r2, #9
 800e346:	d903      	bls.n	800e350 <_svfiprintf_r+0x1a8>
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d0c5      	beq.n	800e2d8 <_svfiprintf_r+0x130>
 800e34c:	9105      	str	r1, [sp, #20]
 800e34e:	e7c3      	b.n	800e2d8 <_svfiprintf_r+0x130>
 800e350:	fb0c 2101 	mla	r1, ip, r1, r2
 800e354:	4604      	mov	r4, r0
 800e356:	2301      	movs	r3, #1
 800e358:	e7f0      	b.n	800e33c <_svfiprintf_r+0x194>
 800e35a:	ab03      	add	r3, sp, #12
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	462a      	mov	r2, r5
 800e360:	4b0f      	ldr	r3, [pc, #60]	; (800e3a0 <_svfiprintf_r+0x1f8>)
 800e362:	a904      	add	r1, sp, #16
 800e364:	4638      	mov	r0, r7
 800e366:	f3af 8000 	nop.w
 800e36a:	1c42      	adds	r2, r0, #1
 800e36c:	4606      	mov	r6, r0
 800e36e:	d1d6      	bne.n	800e31e <_svfiprintf_r+0x176>
 800e370:	89ab      	ldrh	r3, [r5, #12]
 800e372:	065b      	lsls	r3, r3, #25
 800e374:	f53f af2c 	bmi.w	800e1d0 <_svfiprintf_r+0x28>
 800e378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e37a:	b01d      	add	sp, #116	; 0x74
 800e37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e380:	ab03      	add	r3, sp, #12
 800e382:	9300      	str	r3, [sp, #0]
 800e384:	462a      	mov	r2, r5
 800e386:	4b06      	ldr	r3, [pc, #24]	; (800e3a0 <_svfiprintf_r+0x1f8>)
 800e388:	a904      	add	r1, sp, #16
 800e38a:	4638      	mov	r0, r7
 800e38c:	f000 f87a 	bl	800e484 <_printf_i>
 800e390:	e7eb      	b.n	800e36a <_svfiprintf_r+0x1c2>
 800e392:	bf00      	nop
 800e394:	0800f35c 	.word	0x0800f35c
 800e398:	0800f366 	.word	0x0800f366
 800e39c:	00000000 	.word	0x00000000
 800e3a0:	0800e0f1 	.word	0x0800e0f1
 800e3a4:	0800f362 	.word	0x0800f362

0800e3a8 <_printf_common>:
 800e3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3ac:	4616      	mov	r6, r2
 800e3ae:	4699      	mov	r9, r3
 800e3b0:	688a      	ldr	r2, [r1, #8]
 800e3b2:	690b      	ldr	r3, [r1, #16]
 800e3b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	bfb8      	it	lt
 800e3bc:	4613      	movlt	r3, r2
 800e3be:	6033      	str	r3, [r6, #0]
 800e3c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3c4:	4607      	mov	r7, r0
 800e3c6:	460c      	mov	r4, r1
 800e3c8:	b10a      	cbz	r2, 800e3ce <_printf_common+0x26>
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	6033      	str	r3, [r6, #0]
 800e3ce:	6823      	ldr	r3, [r4, #0]
 800e3d0:	0699      	lsls	r1, r3, #26
 800e3d2:	bf42      	ittt	mi
 800e3d4:	6833      	ldrmi	r3, [r6, #0]
 800e3d6:	3302      	addmi	r3, #2
 800e3d8:	6033      	strmi	r3, [r6, #0]
 800e3da:	6825      	ldr	r5, [r4, #0]
 800e3dc:	f015 0506 	ands.w	r5, r5, #6
 800e3e0:	d106      	bne.n	800e3f0 <_printf_common+0x48>
 800e3e2:	f104 0a19 	add.w	sl, r4, #25
 800e3e6:	68e3      	ldr	r3, [r4, #12]
 800e3e8:	6832      	ldr	r2, [r6, #0]
 800e3ea:	1a9b      	subs	r3, r3, r2
 800e3ec:	42ab      	cmp	r3, r5
 800e3ee:	dc26      	bgt.n	800e43e <_printf_common+0x96>
 800e3f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3f4:	1e13      	subs	r3, r2, #0
 800e3f6:	6822      	ldr	r2, [r4, #0]
 800e3f8:	bf18      	it	ne
 800e3fa:	2301      	movne	r3, #1
 800e3fc:	0692      	lsls	r2, r2, #26
 800e3fe:	d42b      	bmi.n	800e458 <_printf_common+0xb0>
 800e400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e404:	4649      	mov	r1, r9
 800e406:	4638      	mov	r0, r7
 800e408:	47c0      	blx	r8
 800e40a:	3001      	adds	r0, #1
 800e40c:	d01e      	beq.n	800e44c <_printf_common+0xa4>
 800e40e:	6823      	ldr	r3, [r4, #0]
 800e410:	68e5      	ldr	r5, [r4, #12]
 800e412:	6832      	ldr	r2, [r6, #0]
 800e414:	f003 0306 	and.w	r3, r3, #6
 800e418:	2b04      	cmp	r3, #4
 800e41a:	bf08      	it	eq
 800e41c:	1aad      	subeq	r5, r5, r2
 800e41e:	68a3      	ldr	r3, [r4, #8]
 800e420:	6922      	ldr	r2, [r4, #16]
 800e422:	bf0c      	ite	eq
 800e424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e428:	2500      	movne	r5, #0
 800e42a:	4293      	cmp	r3, r2
 800e42c:	bfc4      	itt	gt
 800e42e:	1a9b      	subgt	r3, r3, r2
 800e430:	18ed      	addgt	r5, r5, r3
 800e432:	2600      	movs	r6, #0
 800e434:	341a      	adds	r4, #26
 800e436:	42b5      	cmp	r5, r6
 800e438:	d11a      	bne.n	800e470 <_printf_common+0xc8>
 800e43a:	2000      	movs	r0, #0
 800e43c:	e008      	b.n	800e450 <_printf_common+0xa8>
 800e43e:	2301      	movs	r3, #1
 800e440:	4652      	mov	r2, sl
 800e442:	4649      	mov	r1, r9
 800e444:	4638      	mov	r0, r7
 800e446:	47c0      	blx	r8
 800e448:	3001      	adds	r0, #1
 800e44a:	d103      	bne.n	800e454 <_printf_common+0xac>
 800e44c:	f04f 30ff 	mov.w	r0, #4294967295
 800e450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e454:	3501      	adds	r5, #1
 800e456:	e7c6      	b.n	800e3e6 <_printf_common+0x3e>
 800e458:	18e1      	adds	r1, r4, r3
 800e45a:	1c5a      	adds	r2, r3, #1
 800e45c:	2030      	movs	r0, #48	; 0x30
 800e45e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e462:	4422      	add	r2, r4
 800e464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e46c:	3302      	adds	r3, #2
 800e46e:	e7c7      	b.n	800e400 <_printf_common+0x58>
 800e470:	2301      	movs	r3, #1
 800e472:	4622      	mov	r2, r4
 800e474:	4649      	mov	r1, r9
 800e476:	4638      	mov	r0, r7
 800e478:	47c0      	blx	r8
 800e47a:	3001      	adds	r0, #1
 800e47c:	d0e6      	beq.n	800e44c <_printf_common+0xa4>
 800e47e:	3601      	adds	r6, #1
 800e480:	e7d9      	b.n	800e436 <_printf_common+0x8e>
	...

0800e484 <_printf_i>:
 800e484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e488:	7e0f      	ldrb	r7, [r1, #24]
 800e48a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e48c:	2f78      	cmp	r7, #120	; 0x78
 800e48e:	4691      	mov	r9, r2
 800e490:	4680      	mov	r8, r0
 800e492:	460c      	mov	r4, r1
 800e494:	469a      	mov	sl, r3
 800e496:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e49a:	d807      	bhi.n	800e4ac <_printf_i+0x28>
 800e49c:	2f62      	cmp	r7, #98	; 0x62
 800e49e:	d80a      	bhi.n	800e4b6 <_printf_i+0x32>
 800e4a0:	2f00      	cmp	r7, #0
 800e4a2:	f000 80d8 	beq.w	800e656 <_printf_i+0x1d2>
 800e4a6:	2f58      	cmp	r7, #88	; 0x58
 800e4a8:	f000 80a3 	beq.w	800e5f2 <_printf_i+0x16e>
 800e4ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4b4:	e03a      	b.n	800e52c <_printf_i+0xa8>
 800e4b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4ba:	2b15      	cmp	r3, #21
 800e4bc:	d8f6      	bhi.n	800e4ac <_printf_i+0x28>
 800e4be:	a101      	add	r1, pc, #4	; (adr r1, 800e4c4 <_printf_i+0x40>)
 800e4c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e4c4:	0800e51d 	.word	0x0800e51d
 800e4c8:	0800e531 	.word	0x0800e531
 800e4cc:	0800e4ad 	.word	0x0800e4ad
 800e4d0:	0800e4ad 	.word	0x0800e4ad
 800e4d4:	0800e4ad 	.word	0x0800e4ad
 800e4d8:	0800e4ad 	.word	0x0800e4ad
 800e4dc:	0800e531 	.word	0x0800e531
 800e4e0:	0800e4ad 	.word	0x0800e4ad
 800e4e4:	0800e4ad 	.word	0x0800e4ad
 800e4e8:	0800e4ad 	.word	0x0800e4ad
 800e4ec:	0800e4ad 	.word	0x0800e4ad
 800e4f0:	0800e63d 	.word	0x0800e63d
 800e4f4:	0800e561 	.word	0x0800e561
 800e4f8:	0800e61f 	.word	0x0800e61f
 800e4fc:	0800e4ad 	.word	0x0800e4ad
 800e500:	0800e4ad 	.word	0x0800e4ad
 800e504:	0800e65f 	.word	0x0800e65f
 800e508:	0800e4ad 	.word	0x0800e4ad
 800e50c:	0800e561 	.word	0x0800e561
 800e510:	0800e4ad 	.word	0x0800e4ad
 800e514:	0800e4ad 	.word	0x0800e4ad
 800e518:	0800e627 	.word	0x0800e627
 800e51c:	682b      	ldr	r3, [r5, #0]
 800e51e:	1d1a      	adds	r2, r3, #4
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	602a      	str	r2, [r5, #0]
 800e524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e52c:	2301      	movs	r3, #1
 800e52e:	e0a3      	b.n	800e678 <_printf_i+0x1f4>
 800e530:	6820      	ldr	r0, [r4, #0]
 800e532:	6829      	ldr	r1, [r5, #0]
 800e534:	0606      	lsls	r6, r0, #24
 800e536:	f101 0304 	add.w	r3, r1, #4
 800e53a:	d50a      	bpl.n	800e552 <_printf_i+0xce>
 800e53c:	680e      	ldr	r6, [r1, #0]
 800e53e:	602b      	str	r3, [r5, #0]
 800e540:	2e00      	cmp	r6, #0
 800e542:	da03      	bge.n	800e54c <_printf_i+0xc8>
 800e544:	232d      	movs	r3, #45	; 0x2d
 800e546:	4276      	negs	r6, r6
 800e548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e54c:	485e      	ldr	r0, [pc, #376]	; (800e6c8 <_printf_i+0x244>)
 800e54e:	230a      	movs	r3, #10
 800e550:	e019      	b.n	800e586 <_printf_i+0x102>
 800e552:	680e      	ldr	r6, [r1, #0]
 800e554:	602b      	str	r3, [r5, #0]
 800e556:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e55a:	bf18      	it	ne
 800e55c:	b236      	sxthne	r6, r6
 800e55e:	e7ef      	b.n	800e540 <_printf_i+0xbc>
 800e560:	682b      	ldr	r3, [r5, #0]
 800e562:	6820      	ldr	r0, [r4, #0]
 800e564:	1d19      	adds	r1, r3, #4
 800e566:	6029      	str	r1, [r5, #0]
 800e568:	0601      	lsls	r1, r0, #24
 800e56a:	d501      	bpl.n	800e570 <_printf_i+0xec>
 800e56c:	681e      	ldr	r6, [r3, #0]
 800e56e:	e002      	b.n	800e576 <_printf_i+0xf2>
 800e570:	0646      	lsls	r6, r0, #25
 800e572:	d5fb      	bpl.n	800e56c <_printf_i+0xe8>
 800e574:	881e      	ldrh	r6, [r3, #0]
 800e576:	4854      	ldr	r0, [pc, #336]	; (800e6c8 <_printf_i+0x244>)
 800e578:	2f6f      	cmp	r7, #111	; 0x6f
 800e57a:	bf0c      	ite	eq
 800e57c:	2308      	moveq	r3, #8
 800e57e:	230a      	movne	r3, #10
 800e580:	2100      	movs	r1, #0
 800e582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e586:	6865      	ldr	r5, [r4, #4]
 800e588:	60a5      	str	r5, [r4, #8]
 800e58a:	2d00      	cmp	r5, #0
 800e58c:	bfa2      	ittt	ge
 800e58e:	6821      	ldrge	r1, [r4, #0]
 800e590:	f021 0104 	bicge.w	r1, r1, #4
 800e594:	6021      	strge	r1, [r4, #0]
 800e596:	b90e      	cbnz	r6, 800e59c <_printf_i+0x118>
 800e598:	2d00      	cmp	r5, #0
 800e59a:	d04d      	beq.n	800e638 <_printf_i+0x1b4>
 800e59c:	4615      	mov	r5, r2
 800e59e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e5a2:	fb03 6711 	mls	r7, r3, r1, r6
 800e5a6:	5dc7      	ldrb	r7, [r0, r7]
 800e5a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e5ac:	4637      	mov	r7, r6
 800e5ae:	42bb      	cmp	r3, r7
 800e5b0:	460e      	mov	r6, r1
 800e5b2:	d9f4      	bls.n	800e59e <_printf_i+0x11a>
 800e5b4:	2b08      	cmp	r3, #8
 800e5b6:	d10b      	bne.n	800e5d0 <_printf_i+0x14c>
 800e5b8:	6823      	ldr	r3, [r4, #0]
 800e5ba:	07de      	lsls	r6, r3, #31
 800e5bc:	d508      	bpl.n	800e5d0 <_printf_i+0x14c>
 800e5be:	6923      	ldr	r3, [r4, #16]
 800e5c0:	6861      	ldr	r1, [r4, #4]
 800e5c2:	4299      	cmp	r1, r3
 800e5c4:	bfde      	ittt	le
 800e5c6:	2330      	movle	r3, #48	; 0x30
 800e5c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e5cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e5d0:	1b52      	subs	r2, r2, r5
 800e5d2:	6122      	str	r2, [r4, #16]
 800e5d4:	f8cd a000 	str.w	sl, [sp]
 800e5d8:	464b      	mov	r3, r9
 800e5da:	aa03      	add	r2, sp, #12
 800e5dc:	4621      	mov	r1, r4
 800e5de:	4640      	mov	r0, r8
 800e5e0:	f7ff fee2 	bl	800e3a8 <_printf_common>
 800e5e4:	3001      	adds	r0, #1
 800e5e6:	d14c      	bne.n	800e682 <_printf_i+0x1fe>
 800e5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ec:	b004      	add	sp, #16
 800e5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5f2:	4835      	ldr	r0, [pc, #212]	; (800e6c8 <_printf_i+0x244>)
 800e5f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e5f8:	6829      	ldr	r1, [r5, #0]
 800e5fa:	6823      	ldr	r3, [r4, #0]
 800e5fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800e600:	6029      	str	r1, [r5, #0]
 800e602:	061d      	lsls	r5, r3, #24
 800e604:	d514      	bpl.n	800e630 <_printf_i+0x1ac>
 800e606:	07df      	lsls	r7, r3, #31
 800e608:	bf44      	itt	mi
 800e60a:	f043 0320 	orrmi.w	r3, r3, #32
 800e60e:	6023      	strmi	r3, [r4, #0]
 800e610:	b91e      	cbnz	r6, 800e61a <_printf_i+0x196>
 800e612:	6823      	ldr	r3, [r4, #0]
 800e614:	f023 0320 	bic.w	r3, r3, #32
 800e618:	6023      	str	r3, [r4, #0]
 800e61a:	2310      	movs	r3, #16
 800e61c:	e7b0      	b.n	800e580 <_printf_i+0xfc>
 800e61e:	6823      	ldr	r3, [r4, #0]
 800e620:	f043 0320 	orr.w	r3, r3, #32
 800e624:	6023      	str	r3, [r4, #0]
 800e626:	2378      	movs	r3, #120	; 0x78
 800e628:	4828      	ldr	r0, [pc, #160]	; (800e6cc <_printf_i+0x248>)
 800e62a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e62e:	e7e3      	b.n	800e5f8 <_printf_i+0x174>
 800e630:	0659      	lsls	r1, r3, #25
 800e632:	bf48      	it	mi
 800e634:	b2b6      	uxthmi	r6, r6
 800e636:	e7e6      	b.n	800e606 <_printf_i+0x182>
 800e638:	4615      	mov	r5, r2
 800e63a:	e7bb      	b.n	800e5b4 <_printf_i+0x130>
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	6826      	ldr	r6, [r4, #0]
 800e640:	6961      	ldr	r1, [r4, #20]
 800e642:	1d18      	adds	r0, r3, #4
 800e644:	6028      	str	r0, [r5, #0]
 800e646:	0635      	lsls	r5, r6, #24
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	d501      	bpl.n	800e650 <_printf_i+0x1cc>
 800e64c:	6019      	str	r1, [r3, #0]
 800e64e:	e002      	b.n	800e656 <_printf_i+0x1d2>
 800e650:	0670      	lsls	r0, r6, #25
 800e652:	d5fb      	bpl.n	800e64c <_printf_i+0x1c8>
 800e654:	8019      	strh	r1, [r3, #0]
 800e656:	2300      	movs	r3, #0
 800e658:	6123      	str	r3, [r4, #16]
 800e65a:	4615      	mov	r5, r2
 800e65c:	e7ba      	b.n	800e5d4 <_printf_i+0x150>
 800e65e:	682b      	ldr	r3, [r5, #0]
 800e660:	1d1a      	adds	r2, r3, #4
 800e662:	602a      	str	r2, [r5, #0]
 800e664:	681d      	ldr	r5, [r3, #0]
 800e666:	6862      	ldr	r2, [r4, #4]
 800e668:	2100      	movs	r1, #0
 800e66a:	4628      	mov	r0, r5
 800e66c:	f7f1 fdf0 	bl	8000250 <memchr>
 800e670:	b108      	cbz	r0, 800e676 <_printf_i+0x1f2>
 800e672:	1b40      	subs	r0, r0, r5
 800e674:	6060      	str	r0, [r4, #4]
 800e676:	6863      	ldr	r3, [r4, #4]
 800e678:	6123      	str	r3, [r4, #16]
 800e67a:	2300      	movs	r3, #0
 800e67c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e680:	e7a8      	b.n	800e5d4 <_printf_i+0x150>
 800e682:	6923      	ldr	r3, [r4, #16]
 800e684:	462a      	mov	r2, r5
 800e686:	4649      	mov	r1, r9
 800e688:	4640      	mov	r0, r8
 800e68a:	47d0      	blx	sl
 800e68c:	3001      	adds	r0, #1
 800e68e:	d0ab      	beq.n	800e5e8 <_printf_i+0x164>
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	079b      	lsls	r3, r3, #30
 800e694:	d413      	bmi.n	800e6be <_printf_i+0x23a>
 800e696:	68e0      	ldr	r0, [r4, #12]
 800e698:	9b03      	ldr	r3, [sp, #12]
 800e69a:	4298      	cmp	r0, r3
 800e69c:	bfb8      	it	lt
 800e69e:	4618      	movlt	r0, r3
 800e6a0:	e7a4      	b.n	800e5ec <_printf_i+0x168>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	4632      	mov	r2, r6
 800e6a6:	4649      	mov	r1, r9
 800e6a8:	4640      	mov	r0, r8
 800e6aa:	47d0      	blx	sl
 800e6ac:	3001      	adds	r0, #1
 800e6ae:	d09b      	beq.n	800e5e8 <_printf_i+0x164>
 800e6b0:	3501      	adds	r5, #1
 800e6b2:	68e3      	ldr	r3, [r4, #12]
 800e6b4:	9903      	ldr	r1, [sp, #12]
 800e6b6:	1a5b      	subs	r3, r3, r1
 800e6b8:	42ab      	cmp	r3, r5
 800e6ba:	dcf2      	bgt.n	800e6a2 <_printf_i+0x21e>
 800e6bc:	e7eb      	b.n	800e696 <_printf_i+0x212>
 800e6be:	2500      	movs	r5, #0
 800e6c0:	f104 0619 	add.w	r6, r4, #25
 800e6c4:	e7f5      	b.n	800e6b2 <_printf_i+0x22e>
 800e6c6:	bf00      	nop
 800e6c8:	0800f36d 	.word	0x0800f36d
 800e6cc:	0800f37e 	.word	0x0800f37e

0800e6d0 <memmove>:
 800e6d0:	4288      	cmp	r0, r1
 800e6d2:	b510      	push	{r4, lr}
 800e6d4:	eb01 0402 	add.w	r4, r1, r2
 800e6d8:	d902      	bls.n	800e6e0 <memmove+0x10>
 800e6da:	4284      	cmp	r4, r0
 800e6dc:	4623      	mov	r3, r4
 800e6de:	d807      	bhi.n	800e6f0 <memmove+0x20>
 800e6e0:	1e43      	subs	r3, r0, #1
 800e6e2:	42a1      	cmp	r1, r4
 800e6e4:	d008      	beq.n	800e6f8 <memmove+0x28>
 800e6e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6ee:	e7f8      	b.n	800e6e2 <memmove+0x12>
 800e6f0:	4402      	add	r2, r0
 800e6f2:	4601      	mov	r1, r0
 800e6f4:	428a      	cmp	r2, r1
 800e6f6:	d100      	bne.n	800e6fa <memmove+0x2a>
 800e6f8:	bd10      	pop	{r4, pc}
 800e6fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e702:	e7f7      	b.n	800e6f4 <memmove+0x24>

0800e704 <_free_r>:
 800e704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e706:	2900      	cmp	r1, #0
 800e708:	d044      	beq.n	800e794 <_free_r+0x90>
 800e70a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e70e:	9001      	str	r0, [sp, #4]
 800e710:	2b00      	cmp	r3, #0
 800e712:	f1a1 0404 	sub.w	r4, r1, #4
 800e716:	bfb8      	it	lt
 800e718:	18e4      	addlt	r4, r4, r3
 800e71a:	f000 f913 	bl	800e944 <__malloc_lock>
 800e71e:	4a1e      	ldr	r2, [pc, #120]	; (800e798 <_free_r+0x94>)
 800e720:	9801      	ldr	r0, [sp, #4]
 800e722:	6813      	ldr	r3, [r2, #0]
 800e724:	b933      	cbnz	r3, 800e734 <_free_r+0x30>
 800e726:	6063      	str	r3, [r4, #4]
 800e728:	6014      	str	r4, [r2, #0]
 800e72a:	b003      	add	sp, #12
 800e72c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e730:	f000 b90e 	b.w	800e950 <__malloc_unlock>
 800e734:	42a3      	cmp	r3, r4
 800e736:	d908      	bls.n	800e74a <_free_r+0x46>
 800e738:	6825      	ldr	r5, [r4, #0]
 800e73a:	1961      	adds	r1, r4, r5
 800e73c:	428b      	cmp	r3, r1
 800e73e:	bf01      	itttt	eq
 800e740:	6819      	ldreq	r1, [r3, #0]
 800e742:	685b      	ldreq	r3, [r3, #4]
 800e744:	1949      	addeq	r1, r1, r5
 800e746:	6021      	streq	r1, [r4, #0]
 800e748:	e7ed      	b.n	800e726 <_free_r+0x22>
 800e74a:	461a      	mov	r2, r3
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	b10b      	cbz	r3, 800e754 <_free_r+0x50>
 800e750:	42a3      	cmp	r3, r4
 800e752:	d9fa      	bls.n	800e74a <_free_r+0x46>
 800e754:	6811      	ldr	r1, [r2, #0]
 800e756:	1855      	adds	r5, r2, r1
 800e758:	42a5      	cmp	r5, r4
 800e75a:	d10b      	bne.n	800e774 <_free_r+0x70>
 800e75c:	6824      	ldr	r4, [r4, #0]
 800e75e:	4421      	add	r1, r4
 800e760:	1854      	adds	r4, r2, r1
 800e762:	42a3      	cmp	r3, r4
 800e764:	6011      	str	r1, [r2, #0]
 800e766:	d1e0      	bne.n	800e72a <_free_r+0x26>
 800e768:	681c      	ldr	r4, [r3, #0]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	6053      	str	r3, [r2, #4]
 800e76e:	4421      	add	r1, r4
 800e770:	6011      	str	r1, [r2, #0]
 800e772:	e7da      	b.n	800e72a <_free_r+0x26>
 800e774:	d902      	bls.n	800e77c <_free_r+0x78>
 800e776:	230c      	movs	r3, #12
 800e778:	6003      	str	r3, [r0, #0]
 800e77a:	e7d6      	b.n	800e72a <_free_r+0x26>
 800e77c:	6825      	ldr	r5, [r4, #0]
 800e77e:	1961      	adds	r1, r4, r5
 800e780:	428b      	cmp	r3, r1
 800e782:	bf04      	itt	eq
 800e784:	6819      	ldreq	r1, [r3, #0]
 800e786:	685b      	ldreq	r3, [r3, #4]
 800e788:	6063      	str	r3, [r4, #4]
 800e78a:	bf04      	itt	eq
 800e78c:	1949      	addeq	r1, r1, r5
 800e78e:	6021      	streq	r1, [r4, #0]
 800e790:	6054      	str	r4, [r2, #4]
 800e792:	e7ca      	b.n	800e72a <_free_r+0x26>
 800e794:	b003      	add	sp, #12
 800e796:	bd30      	pop	{r4, r5, pc}
 800e798:	2001b7b8 	.word	0x2001b7b8

0800e79c <sbrk_aligned>:
 800e79c:	b570      	push	{r4, r5, r6, lr}
 800e79e:	4e0e      	ldr	r6, [pc, #56]	; (800e7d8 <sbrk_aligned+0x3c>)
 800e7a0:	460c      	mov	r4, r1
 800e7a2:	6831      	ldr	r1, [r6, #0]
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	b911      	cbnz	r1, 800e7ae <sbrk_aligned+0x12>
 800e7a8:	f000 f8bc 	bl	800e924 <_sbrk_r>
 800e7ac:	6030      	str	r0, [r6, #0]
 800e7ae:	4621      	mov	r1, r4
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	f000 f8b7 	bl	800e924 <_sbrk_r>
 800e7b6:	1c43      	adds	r3, r0, #1
 800e7b8:	d00a      	beq.n	800e7d0 <sbrk_aligned+0x34>
 800e7ba:	1cc4      	adds	r4, r0, #3
 800e7bc:	f024 0403 	bic.w	r4, r4, #3
 800e7c0:	42a0      	cmp	r0, r4
 800e7c2:	d007      	beq.n	800e7d4 <sbrk_aligned+0x38>
 800e7c4:	1a21      	subs	r1, r4, r0
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	f000 f8ac 	bl	800e924 <_sbrk_r>
 800e7cc:	3001      	adds	r0, #1
 800e7ce:	d101      	bne.n	800e7d4 <sbrk_aligned+0x38>
 800e7d0:	f04f 34ff 	mov.w	r4, #4294967295
 800e7d4:	4620      	mov	r0, r4
 800e7d6:	bd70      	pop	{r4, r5, r6, pc}
 800e7d8:	2001b7bc 	.word	0x2001b7bc

0800e7dc <_malloc_r>:
 800e7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e0:	1ccd      	adds	r5, r1, #3
 800e7e2:	f025 0503 	bic.w	r5, r5, #3
 800e7e6:	3508      	adds	r5, #8
 800e7e8:	2d0c      	cmp	r5, #12
 800e7ea:	bf38      	it	cc
 800e7ec:	250c      	movcc	r5, #12
 800e7ee:	2d00      	cmp	r5, #0
 800e7f0:	4607      	mov	r7, r0
 800e7f2:	db01      	blt.n	800e7f8 <_malloc_r+0x1c>
 800e7f4:	42a9      	cmp	r1, r5
 800e7f6:	d905      	bls.n	800e804 <_malloc_r+0x28>
 800e7f8:	230c      	movs	r3, #12
 800e7fa:	603b      	str	r3, [r7, #0]
 800e7fc:	2600      	movs	r6, #0
 800e7fe:	4630      	mov	r0, r6
 800e800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e804:	4e2e      	ldr	r6, [pc, #184]	; (800e8c0 <_malloc_r+0xe4>)
 800e806:	f000 f89d 	bl	800e944 <__malloc_lock>
 800e80a:	6833      	ldr	r3, [r6, #0]
 800e80c:	461c      	mov	r4, r3
 800e80e:	bb34      	cbnz	r4, 800e85e <_malloc_r+0x82>
 800e810:	4629      	mov	r1, r5
 800e812:	4638      	mov	r0, r7
 800e814:	f7ff ffc2 	bl	800e79c <sbrk_aligned>
 800e818:	1c43      	adds	r3, r0, #1
 800e81a:	4604      	mov	r4, r0
 800e81c:	d14d      	bne.n	800e8ba <_malloc_r+0xde>
 800e81e:	6834      	ldr	r4, [r6, #0]
 800e820:	4626      	mov	r6, r4
 800e822:	2e00      	cmp	r6, #0
 800e824:	d140      	bne.n	800e8a8 <_malloc_r+0xcc>
 800e826:	6823      	ldr	r3, [r4, #0]
 800e828:	4631      	mov	r1, r6
 800e82a:	4638      	mov	r0, r7
 800e82c:	eb04 0803 	add.w	r8, r4, r3
 800e830:	f000 f878 	bl	800e924 <_sbrk_r>
 800e834:	4580      	cmp	r8, r0
 800e836:	d13a      	bne.n	800e8ae <_malloc_r+0xd2>
 800e838:	6821      	ldr	r1, [r4, #0]
 800e83a:	3503      	adds	r5, #3
 800e83c:	1a6d      	subs	r5, r5, r1
 800e83e:	f025 0503 	bic.w	r5, r5, #3
 800e842:	3508      	adds	r5, #8
 800e844:	2d0c      	cmp	r5, #12
 800e846:	bf38      	it	cc
 800e848:	250c      	movcc	r5, #12
 800e84a:	4629      	mov	r1, r5
 800e84c:	4638      	mov	r0, r7
 800e84e:	f7ff ffa5 	bl	800e79c <sbrk_aligned>
 800e852:	3001      	adds	r0, #1
 800e854:	d02b      	beq.n	800e8ae <_malloc_r+0xd2>
 800e856:	6823      	ldr	r3, [r4, #0]
 800e858:	442b      	add	r3, r5
 800e85a:	6023      	str	r3, [r4, #0]
 800e85c:	e00e      	b.n	800e87c <_malloc_r+0xa0>
 800e85e:	6822      	ldr	r2, [r4, #0]
 800e860:	1b52      	subs	r2, r2, r5
 800e862:	d41e      	bmi.n	800e8a2 <_malloc_r+0xc6>
 800e864:	2a0b      	cmp	r2, #11
 800e866:	d916      	bls.n	800e896 <_malloc_r+0xba>
 800e868:	1961      	adds	r1, r4, r5
 800e86a:	42a3      	cmp	r3, r4
 800e86c:	6025      	str	r5, [r4, #0]
 800e86e:	bf18      	it	ne
 800e870:	6059      	strne	r1, [r3, #4]
 800e872:	6863      	ldr	r3, [r4, #4]
 800e874:	bf08      	it	eq
 800e876:	6031      	streq	r1, [r6, #0]
 800e878:	5162      	str	r2, [r4, r5]
 800e87a:	604b      	str	r3, [r1, #4]
 800e87c:	4638      	mov	r0, r7
 800e87e:	f104 060b 	add.w	r6, r4, #11
 800e882:	f000 f865 	bl	800e950 <__malloc_unlock>
 800e886:	f026 0607 	bic.w	r6, r6, #7
 800e88a:	1d23      	adds	r3, r4, #4
 800e88c:	1af2      	subs	r2, r6, r3
 800e88e:	d0b6      	beq.n	800e7fe <_malloc_r+0x22>
 800e890:	1b9b      	subs	r3, r3, r6
 800e892:	50a3      	str	r3, [r4, r2]
 800e894:	e7b3      	b.n	800e7fe <_malloc_r+0x22>
 800e896:	6862      	ldr	r2, [r4, #4]
 800e898:	42a3      	cmp	r3, r4
 800e89a:	bf0c      	ite	eq
 800e89c:	6032      	streq	r2, [r6, #0]
 800e89e:	605a      	strne	r2, [r3, #4]
 800e8a0:	e7ec      	b.n	800e87c <_malloc_r+0xa0>
 800e8a2:	4623      	mov	r3, r4
 800e8a4:	6864      	ldr	r4, [r4, #4]
 800e8a6:	e7b2      	b.n	800e80e <_malloc_r+0x32>
 800e8a8:	4634      	mov	r4, r6
 800e8aa:	6876      	ldr	r6, [r6, #4]
 800e8ac:	e7b9      	b.n	800e822 <_malloc_r+0x46>
 800e8ae:	230c      	movs	r3, #12
 800e8b0:	603b      	str	r3, [r7, #0]
 800e8b2:	4638      	mov	r0, r7
 800e8b4:	f000 f84c 	bl	800e950 <__malloc_unlock>
 800e8b8:	e7a1      	b.n	800e7fe <_malloc_r+0x22>
 800e8ba:	6025      	str	r5, [r4, #0]
 800e8bc:	e7de      	b.n	800e87c <_malloc_r+0xa0>
 800e8be:	bf00      	nop
 800e8c0:	2001b7b8 	.word	0x2001b7b8

0800e8c4 <_realloc_r>:
 800e8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c8:	4680      	mov	r8, r0
 800e8ca:	4614      	mov	r4, r2
 800e8cc:	460e      	mov	r6, r1
 800e8ce:	b921      	cbnz	r1, 800e8da <_realloc_r+0x16>
 800e8d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	f7ff bf81 	b.w	800e7dc <_malloc_r>
 800e8da:	b92a      	cbnz	r2, 800e8e8 <_realloc_r+0x24>
 800e8dc:	f7ff ff12 	bl	800e704 <_free_r>
 800e8e0:	4625      	mov	r5, r4
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e8:	f000 f838 	bl	800e95c <_malloc_usable_size_r>
 800e8ec:	4284      	cmp	r4, r0
 800e8ee:	4607      	mov	r7, r0
 800e8f0:	d802      	bhi.n	800e8f8 <_realloc_r+0x34>
 800e8f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e8f6:	d812      	bhi.n	800e91e <_realloc_r+0x5a>
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	4640      	mov	r0, r8
 800e8fc:	f7ff ff6e 	bl	800e7dc <_malloc_r>
 800e900:	4605      	mov	r5, r0
 800e902:	2800      	cmp	r0, #0
 800e904:	d0ed      	beq.n	800e8e2 <_realloc_r+0x1e>
 800e906:	42bc      	cmp	r4, r7
 800e908:	4622      	mov	r2, r4
 800e90a:	4631      	mov	r1, r6
 800e90c:	bf28      	it	cs
 800e90e:	463a      	movcs	r2, r7
 800e910:	f7ff fbb8 	bl	800e084 <memcpy>
 800e914:	4631      	mov	r1, r6
 800e916:	4640      	mov	r0, r8
 800e918:	f7ff fef4 	bl	800e704 <_free_r>
 800e91c:	e7e1      	b.n	800e8e2 <_realloc_r+0x1e>
 800e91e:	4635      	mov	r5, r6
 800e920:	e7df      	b.n	800e8e2 <_realloc_r+0x1e>
	...

0800e924 <_sbrk_r>:
 800e924:	b538      	push	{r3, r4, r5, lr}
 800e926:	4d06      	ldr	r5, [pc, #24]	; (800e940 <_sbrk_r+0x1c>)
 800e928:	2300      	movs	r3, #0
 800e92a:	4604      	mov	r4, r0
 800e92c:	4608      	mov	r0, r1
 800e92e:	602b      	str	r3, [r5, #0]
 800e930:	f7f3 fc26 	bl	8002180 <_sbrk>
 800e934:	1c43      	adds	r3, r0, #1
 800e936:	d102      	bne.n	800e93e <_sbrk_r+0x1a>
 800e938:	682b      	ldr	r3, [r5, #0]
 800e93a:	b103      	cbz	r3, 800e93e <_sbrk_r+0x1a>
 800e93c:	6023      	str	r3, [r4, #0]
 800e93e:	bd38      	pop	{r3, r4, r5, pc}
 800e940:	2001b7c0 	.word	0x2001b7c0

0800e944 <__malloc_lock>:
 800e944:	4801      	ldr	r0, [pc, #4]	; (800e94c <__malloc_lock+0x8>)
 800e946:	f000 b811 	b.w	800e96c <__retarget_lock_acquire_recursive>
 800e94a:	bf00      	nop
 800e94c:	2001b7c4 	.word	0x2001b7c4

0800e950 <__malloc_unlock>:
 800e950:	4801      	ldr	r0, [pc, #4]	; (800e958 <__malloc_unlock+0x8>)
 800e952:	f000 b80c 	b.w	800e96e <__retarget_lock_release_recursive>
 800e956:	bf00      	nop
 800e958:	2001b7c4 	.word	0x2001b7c4

0800e95c <_malloc_usable_size_r>:
 800e95c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e960:	1f18      	subs	r0, r3, #4
 800e962:	2b00      	cmp	r3, #0
 800e964:	bfbc      	itt	lt
 800e966:	580b      	ldrlt	r3, [r1, r0]
 800e968:	18c0      	addlt	r0, r0, r3
 800e96a:	4770      	bx	lr

0800e96c <__retarget_lock_acquire_recursive>:
 800e96c:	4770      	bx	lr

0800e96e <__retarget_lock_release_recursive>:
 800e96e:	4770      	bx	lr

0800e970 <_init>:
 800e970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e972:	bf00      	nop
 800e974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e976:	bc08      	pop	{r3}
 800e978:	469e      	mov	lr, r3
 800e97a:	4770      	bx	lr

0800e97c <_fini>:
 800e97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e97e:	bf00      	nop
 800e980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e982:	bc08      	pop	{r3}
 800e984:	469e      	mov	lr, r3
 800e986:	4770      	bx	lr
