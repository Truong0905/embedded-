
LED_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a310  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800a4e0  0800a4e0  0001a4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c0  0800a8c0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c0  0800a8c0  0001a8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8c8  0800a8c8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8c8  0800a8c8  0001a8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8cc  0800a8cc  0001a8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a8d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f30  20000088  0800a958  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012fb8  0800a958  00022fb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019789  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003962  00000000  00000000  00039841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  0003d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  0003e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002527e  00000000  00000000  0003fc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c25b  00000000  00000000  00064ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc6ae  00000000  00000000  00081141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d7ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000604c  00000000  00000000  0015d840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a4c8 	.word	0x0800a4c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800a4c8 	.word	0x0800a4c8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <led_effect_stop>:

#include "main.h"


void led_effect_stop (void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(GPIOC, LED1, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f0:	4816      	ldr	r0, [pc, #88]	; (800064c <led_effect_stop+0x68>)
 80005f2:	f001 fe8b 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED2, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fc:	4813      	ldr	r0, [pc, #76]	; (800064c <led_effect_stop+0x68>)
 80005fe:	f001 fe85 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED3, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <led_effect_stop+0x68>)
 800060a:	f001 fe7f 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2104      	movs	r1, #4
 8000612:	480f      	ldr	r0, [pc, #60]	; (8000650 <led_effect_stop+0x6c>)
 8000614:	f001 fe7a 	bl	800230c <HAL_GPIO_WritePin>
	for ( int i = 0  ; i< 4 ; i++)
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	e00e      	b.n	800063c <led_effect_stop+0x58>
	{
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 800061e:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <led_effect_stop+0x70>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	2200      	movs	r2, #0
 8000630:	2103      	movs	r1, #3
 8000632:	f008 fb59 	bl	8008ce8 <xTimerGenericCommand>
	for ( int i = 0  ; i< 4 ; i++)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3301      	adds	r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b03      	cmp	r3, #3
 8000640:	dded      	ble.n	800061e <led_effect_stop+0x3a>

	}
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40020800 	.word	0x40020800
 8000650:	40020c00 	.word	0x40020c00
 8000654:	2000015c 	.word	0x2000015c

08000658 <led_effect>:

void led_effect ( int n)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b085      	sub	sp, #20
 800065c:	af02      	add	r7, sp, #8
 800065e:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 8000660:	f7ff ffc0 	bl	80005e4 <led_effect_stop>
	xTimerStart (handle_led_timer[n-1], portMAX_DELAY);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3b01      	subs	r3, #1
 8000668:	4a08      	ldr	r2, [pc, #32]	; (800068c <led_effect+0x34>)
 800066a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800066e:	f007 fc3d 	bl	8007eec <xTaskGetTickCount>
 8000672:	4602      	mov	r2, r0
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2101      	movs	r1, #1
 800067e:	4620      	mov	r0, r4
 8000680:	f008 fb32 	bl	8008ce8 <xTimerGenericCommand>
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	2000015c 	.word	0x2000015c

08000690 <turn_off_all_leds>:

void turn_off_all_leds (void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LED1, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <turn_off_all_leds+0x38>)
 800069c:	f001 fe36 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED2, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <turn_off_all_leds+0x38>)
 80006a8:	f001 fe30 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED3, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <turn_off_all_leds+0x38>)
 80006b4:	f001 fe2a 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2104      	movs	r1, #4
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <turn_off_all_leds+0x3c>)
 80006be:	f001 fe25 	bl	800230c <HAL_GPIO_WritePin>

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020c00 	.word	0x40020c00

080006d0 <turn_on_all_leds>:


void turn_on_all_leds (void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LED1, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <turn_on_all_leds+0x38>)
 80006dc:	f001 fe16 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED2, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e6:	4808      	ldr	r0, [pc, #32]	; (8000708 <turn_on_all_leds+0x38>)
 80006e8:	f001 fe10 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED3, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <turn_on_all_leds+0x38>)
 80006f4:	f001 fe0a 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2104      	movs	r1, #4
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <turn_on_all_leds+0x3c>)
 80006fe:	f001 fe05 	bl	800230c <HAL_GPIO_WritePin>

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40020800 	.word	0x40020800
 800070c:	40020c00 	.word	0x40020c00

08000710 <turn_on_even_leds>:

void turn_on_even_leds(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LED1, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071a:	480b      	ldr	r0, [pc, #44]	; (8000748 <turn_on_even_leds+0x38>)
 800071c:	f001 fdf6 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED2, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000726:	4808      	ldr	r0, [pc, #32]	; (8000748 <turn_on_even_leds+0x38>)
 8000728:	f001 fdf0 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED3, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <turn_on_even_leds+0x38>)
 8000734:	f001 fdea 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2104      	movs	r1, #4
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <turn_on_even_leds+0x3c>)
 800073e:	f001 fde5 	bl	800230c <HAL_GPIO_WritePin>

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40020800 	.word	0x40020800
 800074c:	40020c00 	.word	0x40020c00

08000750 <turn_on_odd_leds>:
void turn_on_odd_leds(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LED1, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <turn_on_odd_leds+0x38>)
 800075c:	f001 fdd6 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED2, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000766:	4808      	ldr	r0, [pc, #32]	; (8000788 <turn_on_odd_leds+0x38>)
 8000768:	f001 fdd0 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED3, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <turn_on_odd_leds+0x38>)
 8000774:	f001 fdca 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2104      	movs	r1, #4
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <turn_on_odd_leds+0x3c>)
 800077e:	f001 fdc5 	bl	800230c <HAL_GPIO_WritePin>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40020800 	.word	0x40020800
 800078c:	40020c00 	.word	0x40020c00

08000790 <Led_Control>:

void Led_Control (int value)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	static uint8_t a = 0 ;
	static uint8_t b = 0 ;
	HAL_GPIO_WritePin(GPIOC, LED1, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079e:	4829      	ldr	r0, [pc, #164]	; (8000844 <Led_Control+0xb4>)
 80007a0:	f001 fdb4 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED2, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007aa:	4826      	ldr	r0, [pc, #152]	; (8000844 <Led_Control+0xb4>)
 80007ac:	f001 fdae 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED3, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b6:	4823      	ldr	r0, [pc, #140]	; (8000844 <Led_Control+0xb4>)
 80007b8:	f001 fda8 	bl	800230c <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOD, LED4) ;
 80007bc:	2104      	movs	r1, #4
 80007be:	4822      	ldr	r0, [pc, #136]	; (8000848 <Led_Control+0xb8>)
 80007c0:	f001 fdbd 	bl	800233e <HAL_GPIO_TogglePin>
	if (value == 1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d11c      	bne.n	8000804 <Led_Control+0x74>
	{
		b = 0 ;
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <Led_Control+0xbc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC,LED3<<a,GPIO_PIN_SET);
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <Led_Control+0xc0>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007da:	4093      	lsls	r3, r2
 80007dc:	b29b      	uxth	r3, r3
 80007de:	2201      	movs	r2, #1
 80007e0:	4619      	mov	r1, r3
 80007e2:	4818      	ldr	r0, [pc, #96]	; (8000844 <Led_Control+0xb4>)
 80007e4:	f001 fd92 	bl	800230c <HAL_GPIO_WritePin>
		a = (a+1) %4 ;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <Led_Control+0xc0>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	425a      	negs	r2, r3
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	f002 0203 	and.w	r2, r2, #3
 80007f8:	bf58      	it	pl
 80007fa:	4253      	negpl	r3, r2
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <Led_Control+0xc0>)
 8000800:	701a      	strb	r2, [r3, #0]
	{
		a = 0 ;
		HAL_GPIO_WritePin(GPIOC,LED1>>b,GPIO_PIN_SET);
		b = (b + 1) % 4 ;
	}
}
 8000802:	e01b      	b.n	800083c <Led_Control+0xac>
		a = 0 ;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <Led_Control+0xc0>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC,LED1>>b,GPIO_PIN_SET);
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <Led_Control+0xbc>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	4113      	asrs	r3, r2
 8000816:	b29b      	uxth	r3, r3
 8000818:	2201      	movs	r2, #1
 800081a:	4619      	mov	r1, r3
 800081c:	4809      	ldr	r0, [pc, #36]	; (8000844 <Led_Control+0xb4>)
 800081e:	f001 fd75 	bl	800230c <HAL_GPIO_WritePin>
		b = (b + 1) % 4 ;
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <Led_Control+0xbc>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	425a      	negs	r2, r3
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	f002 0203 	and.w	r2, r2, #3
 8000832:	bf58      	it	pl
 8000834:	4253      	negpl	r3, r2
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <Led_Control+0xbc>)
 800083a:	701a      	strb	r2, [r3, #0]
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40020800 	.word	0x40020800
 8000848:	40020c00 	.word	0x40020c00
 800084c:	200000a4 	.word	0x200000a4
 8000850:	200000a5 	.word	0x200000a5

08000854 <led_effect1>:

void led_effect1(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	static int flag = 1 ;
	(flag ^=1) ? turn_off_all_leds() : turn_on_all_leds() ;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <led_effect1+0x28>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f083 0301 	eor.w	r3, r3, #1
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <led_effect1+0x28>)
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <led_effect1+0x28>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d002      	beq.n	8000872 <led_effect1+0x1e>
 800086c:	f7ff ff10 	bl	8000690 <turn_off_all_leds>
}
 8000870:	e001      	b.n	8000876 <led_effect1+0x22>
	(flag ^=1) ? turn_off_all_leds() : turn_on_all_leds() ;
 8000872:	f7ff ff2d 	bl	80006d0 <turn_on_all_leds>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000000 	.word	0x20000000

08000880 <led_effect2>:

void led_effect2(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	static int flag = 1 ;
	(flag ^=1) ? turn_on_even_leds() : turn_on_odd_leds() ;
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <led_effect2+0x28>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f083 0301 	eor.w	r3, r3, #1
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <led_effect2+0x28>)
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <led_effect2+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d002      	beq.n	800089e <led_effect2+0x1e>
 8000898:	f7ff ff3a 	bl	8000710 <turn_on_even_leds>

}
 800089c:	e001      	b.n	80008a2 <led_effect2+0x22>
	(flag ^=1) ? turn_on_even_leds() : turn_on_odd_leds() ;
 800089e:	f7ff ff57 	bl	8000750 <turn_on_odd_leds>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000004 	.word	0x20000004

080008ac <led_effect3>:
void led_effect3(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	Led_Control(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff ff6d 	bl	8000790 <Led_Control>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}

080008ba <led_effect4>:
void led_effect4(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
	Led_Control(0);
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff ff66 	bl	8000790 <Led_Control>
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ce:	f001 f9c5 	bl	8001c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d2:	f000 f8e1 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d6:	f000 f9a9 	bl	8000c2c <MX_GPIO_Init>
  MX_I2C1_Init();
 80008da:	f000 f94f 	bl	8000b7c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80008de:	f000 f97b 	bl	8000bd8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(menu_task, "menu_task", 250,NULL,2, &handle_menu_task) ;
 80008e2:	4b5a      	ldr	r3, [pc, #360]	; (8000a4c <main+0x184>)
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	2302      	movs	r3, #2
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2300      	movs	r3, #0
 80008ec:	22fa      	movs	r2, #250	; 0xfa
 80008ee:	4958      	ldr	r1, [pc, #352]	; (8000a50 <main+0x188>)
 80008f0:	4858      	ldr	r0, [pc, #352]	; (8000a54 <main+0x18c>)
 80008f2:	f007 f8bb 	bl	8007a6c <xTaskCreate>
 80008f6:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS) ;
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d00a      	beq.n	8000914 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000902:	f383 8811 	msr	BASEPRI, r3
 8000906:	f3bf 8f6f 	isb	sy
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000910:	bf00      	nop
 8000912:	e7fe      	b.n	8000912 <main+0x4a>

  status = xTaskCreate(cmd_hanlder_task, "cmd_task", 250, NULL,2, &hanlde_cmd_task) ;
 8000914:	4b50      	ldr	r3, [pc, #320]	; (8000a58 <main+0x190>)
 8000916:	9301      	str	r3, [sp, #4]
 8000918:	2302      	movs	r3, #2
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2300      	movs	r3, #0
 800091e:	22fa      	movs	r2, #250	; 0xfa
 8000920:	494e      	ldr	r1, [pc, #312]	; (8000a5c <main+0x194>)
 8000922:	484f      	ldr	r0, [pc, #316]	; (8000a60 <main+0x198>)
 8000924:	f007 f8a2 	bl	8007a6c <xTaskCreate>
 8000928:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS) ;
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d00a      	beq.n	8000946 <main+0x7e>
        __asm volatile
 8000930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000934:	f383 8811 	msr	BASEPRI, r3
 8000938:	f3bf 8f6f 	isb	sy
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	617b      	str	r3, [r7, #20]
    }
 8000942:	bf00      	nop
 8000944:	e7fe      	b.n	8000944 <main+0x7c>

  status = xTaskCreate(printf_task, "printf_task", 250, NULL,2, &handle_printf_task) ;
 8000946:	4b47      	ldr	r3, [pc, #284]	; (8000a64 <main+0x19c>)
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	2302      	movs	r3, #2
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2300      	movs	r3, #0
 8000950:	22fa      	movs	r2, #250	; 0xfa
 8000952:	4945      	ldr	r1, [pc, #276]	; (8000a68 <main+0x1a0>)
 8000954:	4845      	ldr	r0, [pc, #276]	; (8000a6c <main+0x1a4>)
 8000956:	f007 f889 	bl	8007a6c <xTaskCreate>
 800095a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS) ;
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d00a      	beq.n	8000978 <main+0xb0>
        __asm volatile
 8000962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000966:	f383 8811 	msr	BASEPRI, r3
 800096a:	f3bf 8f6f 	isb	sy
 800096e:	f3bf 8f4f 	dsb	sy
 8000972:	613b      	str	r3, [r7, #16]
    }
 8000974:	bf00      	nop
 8000976:	e7fe      	b.n	8000976 <main+0xae>

  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task) ;
 8000978:	4b3d      	ldr	r3, [pc, #244]	; (8000a70 <main+0x1a8>)
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	2302      	movs	r3, #2
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2300      	movs	r3, #0
 8000982:	22fa      	movs	r2, #250	; 0xfa
 8000984:	493b      	ldr	r1, [pc, #236]	; (8000a74 <main+0x1ac>)
 8000986:	483c      	ldr	r0, [pc, #240]	; (8000a78 <main+0x1b0>)
 8000988:	f007 f870 	bl	8007a6c <xTaskCreate>
 800098c:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS) ;
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d00a      	beq.n	80009aa <main+0xe2>
        __asm volatile
 8000994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000998:	f383 8811 	msr	BASEPRI, r3
 800099c:	f3bf 8f6f 	isb	sy
 80009a0:	f3bf 8f4f 	dsb	sy
 80009a4:	60fb      	str	r3, [r7, #12]
    }
 80009a6:	bf00      	nop
 80009a8:	e7fe      	b.n	80009a8 <main+0xe0>

  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task) ;
 80009aa:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <main+0x1b4>)
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	2302      	movs	r3, #2
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2300      	movs	r3, #0
 80009b4:	22fa      	movs	r2, #250	; 0xfa
 80009b6:	4932      	ldr	r1, [pc, #200]	; (8000a80 <main+0x1b8>)
 80009b8:	4832      	ldr	r0, [pc, #200]	; (8000a84 <main+0x1bc>)
 80009ba:	f007 f857 	bl	8007a6c <xTaskCreate>
 80009be:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS) ;
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d00a      	beq.n	80009dc <main+0x114>
        __asm volatile
 80009c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ca:	f383 8811 	msr	BASEPRI, r3
 80009ce:	f3bf 8f6f 	isb	sy
 80009d2:	f3bf 8f4f 	dsb	sy
 80009d6:	60bb      	str	r3, [r7, #8]
    }
 80009d8:	bf00      	nop
 80009da:	e7fe      	b.n	80009da <main+0x112>

  q_data = xQueueCreate(10,sizeof(char)) ;
 80009dc:	2200      	movs	r2, #0
 80009de:	2101      	movs	r1, #1
 80009e0:	200a      	movs	r0, #10
 80009e2:	f006 faf7 	bl	8006fd4 <xQueueGenericCreate>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <main+0x1c0>)
 80009ea:	6013      	str	r3, [r2, #0]
  configASSERT(q_data != NULL) ;
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <main+0x1c0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d10a      	bne.n	8000a0a <main+0x142>
        __asm volatile
 80009f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009f8:	f383 8811 	msr	BASEPRI, r3
 80009fc:	f3bf 8f6f 	isb	sy
 8000a00:	f3bf 8f4f 	dsb	sy
 8000a04:	607b      	str	r3, [r7, #4]
    }
 8000a06:	bf00      	nop
 8000a08:	e7fe      	b.n	8000a08 <main+0x140>

  // we enqueue a pointer to the string or pointer to the message into this queue
  q_printf = xQueueCreate(10,sizeof(size_t)) ;
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	200a      	movs	r0, #10
 8000a10:	f006 fae0 	bl	8006fd4 <xQueueGenericCreate>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <main+0x1c4>)
 8000a18:	6013      	str	r3, [r2, #0]
   configASSERT(q_printf != NULL) ;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <main+0x1c4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d10a      	bne.n	8000a38 <main+0x170>
        __asm volatile
 8000a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a26:	f383 8811 	msr	BASEPRI, r3
 8000a2a:	f3bf 8f6f 	isb	sy
 8000a2e:	f3bf 8f4f 	dsb	sy
 8000a32:	603b      	str	r3, [r7, #0]
    }
 8000a34:	bf00      	nop
 8000a36:	e7fe      	b.n	8000a36 <main+0x16e>

   // creat software timers for LED effects.
   initTimer();
 8000a38:	f001 f898 	bl	8001b6c <initTimer>
//   for (int i = 0 ; i< 4 ; i ++)
//   {
//	   handle_led_timer[i] =  xTimerCreate("led_timer", pdMS_TO_TICKS(500),pdTRUE,(void *)(i+1),led_effect_callback) ;
//   }

   HAL_UART_Receive_IT(&huart2,(uint8_t *)&user_data,1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4914      	ldr	r1, [pc, #80]	; (8000a90 <main+0x1c8>)
 8000a40:	4814      	ldr	r0, [pc, #80]	; (8000a94 <main+0x1cc>)
 8000a42:	f005 fa12 	bl	8005e6a <HAL_UART_Receive_IT>

  // start the FreeRTOS scheduler
  vTaskStartScheduler();
 8000a46:	f007 f955 	bl	8007cf4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x182>
 8000a4c:	20000140 	.word	0x20000140
 8000a50:	0800a4e0 	.word	0x0800a4e0
 8000a54:	08001401 	.word	0x08001401
 8000a58:	20000144 	.word	0x20000144
 8000a5c:	0800a4ec 	.word	0x0800a4ec
 8000a60:	08001a51 	.word	0x08001a51
 8000a64:	20000148 	.word	0x20000148
 8000a68:	0800a4f8 	.word	0x0800a4f8
 8000a6c:	080014e9 	.word	0x080014e9
 8000a70:	2000014c 	.word	0x2000014c
 8000a74:	0800a504 	.word	0x0800a504
 8000a78:	08001529 	.word	0x08001529
 8000a7c:	20000150 	.word	0x20000150
 8000a80:	0800a510 	.word	0x0800a510
 8000a84:	08001655 	.word	0x08001655
 8000a88:	20000154 	.word	0x20000154
 8000a8c:	20000158 	.word	0x20000158
 8000a90:	2000016d 	.word	0x2000016d
 8000a94:	200000fc 	.word	0x200000fc

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b094      	sub	sp, #80	; 0x50
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	2234      	movs	r2, #52	; 0x34
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f009 f8a6 	bl	8009bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <SystemClock_Config+0xdc>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a2b      	ldr	r2, [pc, #172]	; (8000b74 <SystemClock_Config+0xdc>)
 8000ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemClock_Config+0xdc>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad8:	2300      	movs	r3, #0
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <SystemClock_Config+0xe0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <SystemClock_Config+0xe0>)
 8000ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemClock_Config+0xe0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2310      	movs	r3, #16
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b00:	2302      	movs	r3, #2
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000b0c:	23b4      	movs	r3, #180	; 0xb4
 8000b0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 fb77 	bl	8005214 <HAL_RCC_OscConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b2c:	f000 f968 	bl	8000e00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b30:	f003 ffa4 	bl	8004a7c <HAL_PWREx_EnableOverDrive>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b3a:	f000 f961 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	230f      	movs	r3, #15
 8000b40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b42:	2302      	movs	r3, #2
 8000b44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b54:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	2105      	movs	r1, #5
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 ffdd 	bl	8004b1c <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b68:	f000 f94a 	bl	8000e00 <Error_Handler>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3750      	adds	r7, #80	; 0x50
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40007000 	.word	0x40007000

08000b7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b82:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <MX_I2C1_Init+0x54>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_I2C1_Init+0x58>)
 8000b8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bba:	f001 fbdb 	bl	8002374 <HAL_I2C_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc4:	f000 f91c 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200000a8 	.word	0x200000a8
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	000186a0 	.word	0x000186a0

08000bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MX_USART2_UART_Init+0x50>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c10:	f005 f84c 	bl	8005cac <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c1a:	f000 f8f1 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000fc 	.word	0x200000fc
 8000c28:	40004400 	.word	0x40004400

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b38      	ldr	r3, [pc, #224]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a37      	ldr	r2, [pc, #220]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a30      	ldr	r2, [pc, #192]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a29      	ldr	r2, [pc, #164]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_GPIO_Init+0xfc>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000cd4:	4815      	ldr	r0, [pc, #84]	; (8000d2c <MX_GPIO_Init+0x100>)
 8000cd6:	f001 fb19 	bl	800230c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2104      	movs	r1, #4
 8000cde:	4814      	ldr	r0, [pc, #80]	; (8000d30 <MX_GPIO_Init+0x104>)
 8000ce0:	f001 fb14 	bl	800230c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ce4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480b      	ldr	r0, [pc, #44]	; (8000d2c <MX_GPIO_Init+0x100>)
 8000cfe:	f001 f971 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d02:	2304      	movs	r3, #4
 8000d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_GPIO_Init+0x104>)
 8000d1a:	f001 f963 	bl	8001fe4 <HAL_GPIO_Init>

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020c00 	.word	0x40020c00

08000d34 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af02      	add	r7, sp, #8
 8000d3a:	6078      	str	r0, [r7, #4]
	uint8_t dummy ;
	for (int i= 0 ; i < 4000 ; i++);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	e002      	b.n	8000d48 <HAL_UART_RxCpltCallback+0x14>
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d4e:	dbf8      	blt.n	8000d42 <HAL_UART_RxCpltCallback+0xe>

	if( !xQueueIsQueueFullFromISR(q_data))
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <HAL_UART_RxCpltCallback+0x98>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f006 fe04 	bl	8007962 <xQueueIsQueueFullFromISR>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d107      	bne.n	8000d70 <HAL_UART_RxCpltCallback+0x3c>
	{
		/*Queue is not full */
		/*TODO: Enqueue data byte */
		xQueueSendFromISR(q_data,(void*)&user_data,NULL);  // user_data là nơi nhận data đc nhận về  thông qua khai báo HAL_UART_Receive_IT
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_UART_RxCpltCallback+0x98>)
 8000d62:	6818      	ldr	r0, [r3, #0]
 8000d64:	2300      	movs	r3, #0
 8000d66:	2200      	movs	r2, #0
 8000d68:	4919      	ldr	r1, [pc, #100]	; (8000dd0 <HAL_UART_RxCpltCallback+0x9c>)
 8000d6a:	f006 fab3 	bl	80072d4 <xQueueGenericSendFromISR>
 8000d6e:	e013      	b.n	8000d98 <HAL_UART_RxCpltCallback+0x64>


	}else{
		/*Queue is full */

		if(user_data == '\n')
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_UART_RxCpltCallback+0x9c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	d10e      	bne.n	8000d98 <HAL_UART_RxCpltCallback+0x64>
		{
			/*user_data = '\n' */
			/*TODO: make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void *)&dummy,NULL);  // delete last data byte
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_UART_RxCpltCallback+0x98>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f107 010b 	add.w	r1, r7, #11
 8000d82:	2200      	movs	r2, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f006 fc2f 	bl	80075e8 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void *)&user_data,NULL);
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_UART_RxCpltCallback+0x98>)
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2200      	movs	r2, #0
 8000d92:	490f      	ldr	r1, [pc, #60]	; (8000dd0 <HAL_UART_RxCpltCallback+0x9c>)
 8000d94:	f006 fa9e 	bl	80072d4 <xQueueGenericSendFromISR>
		}
	}


	/*TODO: send notification to command handling task if user_data = '\n' */
	if(user_data == '\n')
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_UART_RxCpltCallback+0x9c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b0a      	cmp	r3, #10
 8000da0:	d10a      	bne.n	8000db8 <HAL_UART_RxCpltCallback+0x84>
	{
		xTaskNotifyFromISR(hanlde_cmd_task,0,eNoAction , NULL);
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_UART_RxCpltCallback+0xa0>)
 8000da4:	6818      	ldr	r0, [r3, #0]
 8000da6:	2300      	movs	r3, #0
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	2300      	movs	r3, #0
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2300      	movs	r3, #0
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	f007 fda2 	bl	80088fc <xTaskGenericNotifyFromISR>
	}

	/* TODO: Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2,(uint8_t *)&user_data,1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	4905      	ldr	r1, [pc, #20]	; (8000dd0 <HAL_UART_RxCpltCallback+0x9c>)
 8000dbc:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa4>)
 8000dbe:	f005 f854 	bl	8005e6a <HAL_UART_Receive_IT>

}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000154 	.word	0x20000154
 8000dd0:	2000016d 	.word	0x2000016d
 8000dd4:	20000144 	.word	0x20000144
 8000dd8:	200000fc 	.word	0x200000fc

08000ddc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dee:	f000 ff57 	bl	8001ca0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40001000 	.word	0x40001000

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <Error_Handler+0x8>
	...

08000e0c <RTC_decToBcd>:



// Convert normal decimal numbers to binary coded decimal
uint8_t RTC_decToBcd(int val)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <RTC_decToBcd+0x48>)
 8000e18:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1c:	1092      	asrs	r2, r2, #2
 8000e1e:	17db      	asrs	r3, r3, #31
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	b2d8      	uxtb	r0, r3
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <RTC_decToBcd+0x48>)
 8000e2c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e30:	1099      	asrs	r1, r3, #2
 8000e32:	17d3      	asrs	r3, r2, #31
 8000e34:	1ac9      	subs	r1, r1, r3
 8000e36:	460b      	mov	r3, r1
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	1ad1      	subs	r1, r2, r3
 8000e40:	b2cb      	uxtb	r3, r1
 8000e42:	4403      	add	r3, r0
 8000e44:	b2db      	uxtb	r3, r3
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	66666667 	.word	0x66666667

08000e58 <RTC_bcdToDec>:

// Convert binary coded decimal to normal decimal numbers
int RTC_bcdToDec(uint8_t val)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	091b      	lsrs	r3, r3, #4
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	461a      	mov	r2, r3
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	4413      	add	r3, r2
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <RTC_Set_Time>:

//void RTC_Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
void RTC_Set_Time (RTC_TIME *time)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	6078      	str	r0, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = RTC_decToBcd(time->seconds);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ffb9 	bl	8000e0c <RTC_decToBcd>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	723b      	strb	r3, [r7, #8]
	set_time[1] = RTC_decToBcd(time->minutes);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	785b      	ldrb	r3, [r3, #1]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ffb2 	bl	8000e0c <RTC_decToBcd>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	727b      	strb	r3, [r7, #9]
	set_time[2] = RTC_decToBcd(time->hour);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ffab 	bl	8000e0c <RTC_decToBcd>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	72bb      	strb	r3, [r7, #10]
	set_time[3] = RTC_decToBcd(time->dayofweek);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	78db      	ldrb	r3, [r3, #3]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ffa4 	bl	8000e0c <RTC_decToBcd>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	72fb      	strb	r3, [r7, #11]
	set_time[4] = RTC_decToBcd(time->dayofmonth);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	791b      	ldrb	r3, [r3, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff9d 	bl	8000e0c <RTC_decToBcd>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	733b      	strb	r3, [r7, #12]
	set_time[5] = RTC_decToBcd(time->month);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	795b      	ldrb	r3, [r3, #5]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff96 	bl	8000e0c <RTC_decToBcd>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	737b      	strb	r3, [r7, #13]
	set_time[6] = RTC_decToBcd(time->year);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	799b      	ldrb	r3, [r3, #6]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff8f 	bl	8000e0c <RTC_decToBcd>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, portMAX_DELAY);
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2307      	movs	r3, #7
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2301      	movs	r3, #1
 8000f04:	2200      	movs	r2, #0
 8000f06:	21d0      	movs	r1, #208	; 0xd0
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <RTC_Set_Time+0x90>)
 8000f0a:	f001 fb77 	bl	80025fc <HAL_I2C_Mem_Write>

}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000a8 	.word	0x200000a8

08000f1c <RTC_Get_Time>:

void RTC_Get_Time (RTC_TIME *time)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af04      	add	r7, sp, #16
 8000f22:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, portMAX_DELAY);
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	9302      	str	r3, [sp, #8]
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2301      	movs	r3, #1
 8000f36:	2200      	movs	r2, #0
 8000f38:	21d0      	movs	r1, #208	; 0xd0
 8000f3a:	481f      	ldr	r0, [pc, #124]	; (8000fb8 <RTC_Get_Time+0x9c>)
 8000f3c:	f001 fc58 	bl	80027f0 <HAL_I2C_Mem_Read>
	time->seconds = RTC_bcdToDec(get_time[0]);
 8000f40:	7a3b      	ldrb	r3, [r7, #8]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff88 	bl	8000e58 <RTC_bcdToDec>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	701a      	strb	r2, [r3, #0]
	time->minutes = RTC_bcdToDec(get_time[1]);
 8000f50:	7a7b      	ldrb	r3, [r7, #9]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff80 	bl	8000e58 <RTC_bcdToDec>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	705a      	strb	r2, [r3, #1]
	time->hour = RTC_bcdToDec(get_time[2]);
 8000f60:	7abb      	ldrb	r3, [r7, #10]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff78 	bl	8000e58 <RTC_bcdToDec>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	709a      	strb	r2, [r3, #2]
	time->dayofweek = RTC_bcdToDec(get_time[3]);
 8000f70:	7afb      	ldrb	r3, [r7, #11]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff70 	bl	8000e58 <RTC_bcdToDec>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	70da      	strb	r2, [r3, #3]
	time->dayofmonth = RTC_bcdToDec(get_time[4]);
 8000f80:	7b3b      	ldrb	r3, [r7, #12]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff68 	bl	8000e58 <RTC_bcdToDec>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	711a      	strb	r2, [r3, #4]
	time->month = RTC_bcdToDec(get_time[5]);
 8000f90:	7b7b      	ldrb	r3, [r7, #13]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff60 	bl	8000e58 <RTC_bcdToDec>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	715a      	strb	r2, [r3, #5]
	time->year = RTC_bcdToDec(get_time[6]);
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff58 	bl	8000e58 <RTC_bcdToDec>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	719a      	strb	r2, [r3, #6]
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200000a8 	.word	0x200000a8

08000fbc <show_time_date>:


void show_time_date(RTC_TIME *time)
{
 8000fbc:	b5b0      	push	{r4, r5, r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	6078      	str	r0, [r7, #4]
	static char buffer[60];
	static char *rtc_time = buffer ;
//	memset(&rtc_time,0,sizeof(rtc_time)) ;
	RTC_Get_Time(time) ;
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ffa9 	bl	8000f1c <RTC_Get_Time>
	 sprintf ((char *)buffer, "Time&Date :  %02d:%02d:%02d     %02d-%02d-20%02d \n",  time->hour, time->minutes, time->seconds ,time->dayofmonth, time->month, time->year);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	789b      	ldrb	r3, [r3, #2]
 8000fce:	461c      	mov	r4, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	785b      	ldrb	r3, [r3, #1]
 8000fd4:	461d      	mov	r5, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	791b      	ldrb	r3, [r3, #4]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	795b      	ldrb	r3, [r3, #5]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	799b      	ldrb	r3, [r3, #6]
 8000fec:	9303      	str	r3, [sp, #12]
 8000fee:	9002      	str	r0, [sp, #8]
 8000ff0:	9101      	str	r1, [sp, #4]
 8000ff2:	9200      	str	r2, [sp, #0]
 8000ff4:	462b      	mov	r3, r5
 8000ff6:	4622      	mov	r2, r4
 8000ff8:	4907      	ldr	r1, [pc, #28]	; (8001018 <show_time_date+0x5c>)
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <show_time_date+0x60>)
 8000ffc:	f008 fe04 	bl	8009c08 <siprintf>
	xQueueSend(q_printf,&rtc_time,portMAX_DELAY) ;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <show_time_date+0x64>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	2300      	movs	r3, #0
 8001006:	f04f 32ff 	mov.w	r2, #4294967295
 800100a:	4906      	ldr	r1, [pc, #24]	; (8001024 <show_time_date+0x68>)
 800100c:	f006 f864 	bl	80070d8 <xQueueGenericSend>

}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bdb0      	pop	{r4, r5, r7, pc}
 8001018:	0800a51c 	.word	0x0800a51c
 800101c:	20000170 	.word	0x20000170
 8001020:	20000158 	.word	0x20000158
 8001024:	20000008 	.word	0x20000008

08001028 <validate_rtc_information>:


int validate_rtc_information (RTC_TIME *time)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	if ( time->hour > 24 || time->minutes > 59 || time->seconds > 59 || time->dayofweek > 7 || time->dayofmonth > 31 || time->month > 12 || time->year > 99 )
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	789b      	ldrb	r3, [r3, #2]
 8001034:	2b18      	cmp	r3, #24
 8001036:	d817      	bhi.n	8001068 <validate_rtc_information+0x40>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	2b3b      	cmp	r3, #59	; 0x3b
 800103e:	d813      	bhi.n	8001068 <validate_rtc_information+0x40>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b3b      	cmp	r3, #59	; 0x3b
 8001046:	d80f      	bhi.n	8001068 <validate_rtc_information+0x40>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	78db      	ldrb	r3, [r3, #3]
 800104c:	2b07      	cmp	r3, #7
 800104e:	d80b      	bhi.n	8001068 <validate_rtc_information+0x40>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	791b      	ldrb	r3, [r3, #4]
 8001054:	2b1f      	cmp	r3, #31
 8001056:	d807      	bhi.n	8001068 <validate_rtc_information+0x40>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	795b      	ldrb	r3, [r3, #5]
 800105c:	2b0c      	cmp	r3, #12
 800105e:	d803      	bhi.n	8001068 <validate_rtc_information+0x40>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	799b      	ldrb	r3, [r3, #6]
 8001064:	2b63      	cmp	r3, #99	; 0x63
 8001066:	d901      	bls.n	800106c <validate_rtc_information+0x44>
	{
		return 1 ;
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <validate_rtc_information+0x46>
	}
	return 0 ;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <HAL_MspInit+0x4c>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <HAL_I2C_MspInit+0x94>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d133      	bne.n	8001156 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <HAL_I2C_MspInit+0x98>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <HAL_I2C_MspInit+0x98>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_I2C_MspInit+0x98>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800110a:	23c0      	movs	r3, #192	; 0xc0
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110e:	2312      	movs	r3, #18
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800111a:	2304      	movs	r3, #4
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4810      	ldr	r0, [pc, #64]	; (8001168 <HAL_I2C_MspInit+0x9c>)
 8001126:	f000 ff5d 	bl	8001fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_I2C_MspInit+0x98>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_I2C_MspInit+0x98>)
 8001134:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_I2C_MspInit+0x98>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2106      	movs	r1, #6
 800114a:	201f      	movs	r0, #31
 800114c:	f000 fe80 	bl	8001e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001150:	201f      	movs	r0, #31
 8001152:	f000 fe99 	bl	8001e88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40005400 	.word	0x40005400
 8001164:	40023800 	.word	0x40023800
 8001168:	40020400 	.word	0x40020400

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <HAL_UART_MspInit+0x94>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d133      	bne.n	80011f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_UART_MspInit+0x98>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_UART_MspInit+0x98>)
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011c6:	230c      	movs	r3, #12
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d6:	2307      	movs	r3, #7
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <HAL_UART_MspInit+0x9c>)
 80011e2:	f000 feff 	bl	8001fe4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2106      	movs	r1, #6
 80011ea:	2026      	movs	r0, #38	; 0x26
 80011ec:	f000 fe30 	bl	8001e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011f0:	2026      	movs	r0, #38	; 0x26
 80011f2:	f000 fe49 	bl	8001e88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40004400 	.word	0x40004400
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000

0800120c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	2036      	movs	r0, #54	; 0x36
 8001222:	f000 fe15 	bl	8001e50 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001226:	2036      	movs	r0, #54	; 0x36
 8001228:	f000 fe2e 	bl	8001e88 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <HAL_InitTick+0xa4>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <HAL_InitTick+0xa4>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <HAL_InitTick+0xa4>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001248:	f107 0210 	add.w	r2, r7, #16
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fd7c 	bl	8004d50 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001258:	f003 fd52 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 800125c:	4603      	mov	r3, r0
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001264:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <HAL_InitTick+0xa8>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	0c9b      	lsrs	r3, r3, #18
 800126c:	3b01      	subs	r3, #1
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_InitTick+0xac>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <HAL_InitTick+0xb0>)
 8001274:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_InitTick+0xac>)
 8001278:	f240 32e7 	movw	r2, #999	; 0x3e7
 800127c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_InitTick+0xac>)
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_InitTick+0xac>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_InitTick+0xac>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <HAL_InitTick+0xac>)
 8001292:	f004 fa5d 	bl	8005750 <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800129c:	4806      	ldr	r0, [pc, #24]	; (80012b8 <HAL_InitTick+0xac>)
 800129e:	f004 fab1 	bl	8005804 <HAL_TIM_Base_Start_IT>
 80012a2:	4603      	mov	r3, r0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3730      	adds	r7, #48	; 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	431bde83 	.word	0x431bde83
 80012b8:	200001ac 	.word	0x200001ac
 80012bc:	40001000 	.word	0x40001000

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <NMI_Handler+0x4>

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler+0x4>

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <I2C1_EV_IRQHandler+0x10>)
 80012f2:	f001 fca3 	bl	8002c3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000a8 	.word	0x200000a8

08001300 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <USART2_IRQHandler+0x10>)
 8001306:	f004 fde1 	bl	8005ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000fc 	.word	0x200000fc

08001314 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TIM6_DAC_IRQHandler+0x10>)
 800131a:	f004 fae3 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200001ac 	.word	0x200001ac

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d207      	bcs.n	8001368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001358:	f008 fc16 	bl	8009b88 <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	220c      	movs	r2, #12
 8001360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e009      	b.n	800137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <_sbrk+0x64>)
 8001378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20020000 	.word	0x20020000
 8001388:	00000400 	.word	0x00000400
 800138c:	200001f4 	.word	0x200001f4
 8001390:	20012fb8 	.word	0x20012fb8

08001394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <SystemInit+0x20>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <SystemInit+0x20>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <get_number>:

const char *msg_inv = "///// Invalid option ???? ///// \n" ;


uint8_t get_number(uint8_t *p , int len )
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	int value ;
	if (len>1)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	dd0f      	ble.n	80013e8 <get_number+0x30>
	{
		value = (((p[0]-48)*10) +(p[1]-48)) ;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	461a      	mov	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3301      	adds	r3, #1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	3b30      	subs	r3, #48	; 0x30
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e003      	b.n	80013f0 <get_number+0x38>
	}
	else
	value = p[0]-48 ;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	3b30      	subs	r3, #48	; 0x30
 80013ee:	60fb      	str	r3, [r7, #12]
	return value ;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	b2db      	uxtb	r3, r3
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <menu_task>:

void menu_task ( void *param)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af02      	add	r7, sp, #8
 8001406:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr ;
	const char *msg_menu = "====================\n"
 8001408:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <menu_task+0xd0>)
 800140a:	60bb      	str	r3, [r7, #8]
	command_t *cmd ;
	int option ;

	while(1)
	{
		xQueueSend(q_printf,&msg_menu,portMAX_DELAY) ;
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <menu_task+0xd4>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	f107 0108 	add.w	r1, r7, #8
 8001414:	2300      	movs	r3, #0
 8001416:	f04f 32ff 	mov.w	r2, #4294967295
 800141a:	f005 fe5d 	bl	80070d8 <xQueueGenericSend>
		// Wait for menu command
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY) ;
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	f04f 32ff 	mov.w	r2, #4294967295
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2000      	movs	r0, #0
 800142e:	f007 f905 	bl	800863c <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr ;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	617b      	str	r3, [r7, #20]

		if (cmd->len == 1)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d133      	bne.n	80014a6 <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48  ;  //  just convert ASCII to number by subtracting 48
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	3b30      	subs	r3, #48	; 0x30
 8001444:	613b      	str	r3, [r7, #16]

			switch (option)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d035      	beq.n	80014b8 <menu_task+0xb8>
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	2b02      	cmp	r3, #2
 8001450:	dc20      	bgt.n	8001494 <menu_task+0x94>
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <menu_task+0x60>
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d00d      	beq.n	800147a <menu_task+0x7a>
 800145e:	e019      	b.n	8001494 <menu_task+0x94>
			{
			case 0:
					curr_state  = sLedEffect ;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <menu_task+0xd8>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task,0,eNoAction);
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <menu_task+0xdc>)
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	2300      	movs	r3, #0
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2300      	movs	r3, #0
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	f007 f962 	bl	800873c <xTaskGenericNotify>
					break;
 8001478:	e01f      	b.n	80014ba <menu_task+0xba>
			case 1:
				curr_state  = sRtcMenu ;
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <menu_task+0xd8>)
 800147c:	2202      	movs	r2, #2
 800147e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task,0,eNoAction);
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <menu_task+0xe0>)
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2300      	movs	r3, #0
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	f007 f955 	bl	800873c <xTaskGenericNotify>
					break;
 8001492:	e012      	b.n	80014ba <menu_task+0xba>
			case 2:  // Implement exit
					break;
			default:
				xQueueSend(q_printf,&msg_inv,portMAX_DELAY) ;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <menu_task+0xd4>)
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	2300      	movs	r3, #0
 800149a:	f04f 32ff 	mov.w	r2, #4294967295
 800149e:	4911      	ldr	r1, [pc, #68]	; (80014e4 <menu_task+0xe4>)
 80014a0:	f005 fe1a 	bl	80070d8 <xQueueGenericSend>
					continue;
 80014a4:	e012      	b.n	80014cc <menu_task+0xcc>
			}
		}
		else
		{
			//invalid entry.
			xQueueSend(q_printf,&msg_inv,portMAX_DELAY) ;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <menu_task+0xd4>)
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	2300      	movs	r3, #0
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <menu_task+0xe4>)
 80014b2:	f005 fe11 	bl	80070d8 <xQueueGenericSend>
			continue ;
 80014b6:	e009      	b.n	80014cc <menu_task+0xcc>
					break;
 80014b8:	bf00      	nop
		}


		// wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2300      	movs	r3, #0
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2000      	movs	r0, #0
 80014c8:	f007 f8b8 	bl	800863c <xTaskGenericNotifyWait>
		xQueueSend(q_printf,&msg_menu,portMAX_DELAY) ;
 80014cc:	e79e      	b.n	800140c <menu_task+0xc>
 80014ce:	bf00      	nop
 80014d0:	0800a574 	.word	0x0800a574
 80014d4:	20000158 	.word	0x20000158
 80014d8:	2000016c 	.word	0x2000016c
 80014dc:	2000014c 	.word	0x2000014c
 80014e0:	20000150 	.word	0x20000150
 80014e4:	20000010 	.word	0x20000010

080014e8 <printf_task>:
	} // while super loop.
}


void printf_task ( void *param)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	uint32_t *msg ;
	while(1)
	{
		xQueueReceive(q_printf,&msg, portMAX_DELAY);
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <printf_task+0x38>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f107 010c 	add.w	r1, r7, #12
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	4618      	mov	r0, r3
 80014fe:	f005 ff93 	bl	8007428 <xQueueReceive>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001502:	68fc      	ldr	r4, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe fe8c 	bl	8000224 <strlen>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	4621      	mov	r1, r4
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <printf_task+0x3c>)
 8001518:	f004 fc15 	bl	8005d46 <HAL_UART_Transmit>
		xQueueReceive(q_printf,&msg, portMAX_DELAY);
 800151c:	e7e8      	b.n	80014f0 <printf_task+0x8>
 800151e:	bf00      	nop
 8001520:	20000158 	.word	0x20000158
 8001524:	200000fc 	.word	0x200000fc

08001528 <led_task>:
	}
}
void led_task ( void *param)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af02      	add	r7, sp, #8
 800152e:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 8001530:	4b3e      	ldr	r3, [pc, #248]	; (800162c <led_task+0x104>)
 8001532:	60fb      	str	r3, [r7, #12]
						  "(s,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*TODO: Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2300      	movs	r3, #0
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2000      	movs	r0, #0
 8001542:	f007 f87b 	bl	800863c <xTaskGenericNotifyWait>
		/*TODO: Print LED menu */
		xQueueSend(q_printf,&msg_led,portMAX_DELAY);
 8001546:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <led_task+0x108>)
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	f107 010c 	add.w	r1, r7, #12
 800154e:	2300      	movs	r3, #0
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	f005 fdc0 	bl	80070d8 <xQueueGenericSend>
		/*TODO: wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY) ;
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	9200      	str	r2, [sp, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2000      	movs	r0, #0
 8001568:	f007 f868 	bl	800863c <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr ;
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d843      	bhi.n	8001600 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"s"))
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	492e      	ldr	r1, [pc, #184]	; (8001634 <led_task+0x10c>)
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fe47 	bl	8000210 <strcmp>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <led_task+0x66>
				led_effect_stop();
 8001588:	f7ff f82c 	bl	80005e4 <led_effect_stop>
 800158c:	e040      	b.n	8001610 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	4929      	ldr	r1, [pc, #164]	; (8001638 <led_task+0x110>)
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fe3c 	bl	8000210 <strcmp>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d103      	bne.n	80015a6 <led_task+0x7e>
				led_effect(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff f85a 	bl	8000658 <led_effect>
 80015a4:	e034      	b.n	8001610 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	4924      	ldr	r1, [pc, #144]	; (800163c <led_task+0x114>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fe30 	bl	8000210 <strcmp>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d103      	bne.n	80015be <led_task+0x96>
				led_effect(2);
 80015b6:	2002      	movs	r0, #2
 80015b8:	f7ff f84e 	bl	8000658 <led_effect>
 80015bc:	e028      	b.n	8001610 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	491f      	ldr	r1, [pc, #124]	; (8001640 <led_task+0x118>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe24 	bl	8000210 <strcmp>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d103      	bne.n	80015d6 <led_task+0xae>
				led_effect(3);
 80015ce:	2003      	movs	r0, #3
 80015d0:	f7ff f842 	bl	8000658 <led_effect>
 80015d4:	e01c      	b.n	8001610 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	491a      	ldr	r1, [pc, #104]	; (8001644 <led_task+0x11c>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe fe18 	bl	8000210 <strcmp>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d103      	bne.n	80015ee <led_task+0xc6>
				led_effect(4);
 80015e6:	2004      	movs	r0, #4
 80015e8:	f7ff f836 	bl	8000658 <led_effect>
 80015ec:	e010      	b.n	8001610 <led_task+0xe8>
			else
				/*TODO: print invalid message */
				xQueueSend(q_printf,&msg_inv,portMAX_DELAY) ;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <led_task+0x108>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	2300      	movs	r3, #0
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	4913      	ldr	r1, [pc, #76]	; (8001648 <led_task+0x120>)
 80015fa:	f005 fd6d 	bl	80070d8 <xQueueGenericSend>
 80015fe:	e007      	b.n	8001610 <led_task+0xe8>
		}else
			/*TODO: print invalid message */
			xQueueSend(q_printf,&msg_inv,portMAX_DELAY) ;
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <led_task+0x108>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	2300      	movs	r3, #0
 8001606:	f04f 32ff 	mov.w	r2, #4294967295
 800160a:	490f      	ldr	r1, [pc, #60]	; (8001648 <led_task+0x120>)
 800160c:	f005 fd64 	bl	80070d8 <xQueueGenericSend>
		/*TODO : update state variable */
		curr_state = sMainMenu;
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <led_task+0x124>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]

		/*TODO : Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <led_task+0x128>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2300      	movs	r3, #0
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	f007 f88a 	bl	800873c <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001628:	e784      	b.n	8001534 <led_task+0xc>
 800162a:	bf00      	nop
 800162c:	0800a600 	.word	0x0800a600
 8001630:	20000158 	.word	0x20000158
 8001634:	0800a674 	.word	0x0800a674
 8001638:	0800a678 	.word	0x0800a678
 800163c:	0800a67c 	.word	0x0800a67c
 8001640:	0800a680 	.word	0x0800a680
 8001644:	0800a684 	.word	0x0800a684
 8001648:	20000010 	.word	0x20000010
 800164c:	2000016c 	.word	0x2000016c
 8001650:	20000140 	.word	0x20000140

08001654 <rtc_task>:

	}
}

void rtc_task(void *param)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b096      	sub	sp, #88	; 0x58
 8001658:	af02      	add	r7, sp, #8
 800165a:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 800165c:	4bb5      	ldr	r3, [pc, #724]	; (8001934 <rtc_task+0x2e0>)
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8001660:	4bb5      	ldr	r3, [pc, #724]	; (8001938 <rtc_task+0x2e4>)
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-24):";
 8001664:	4bb5      	ldr	r3, [pc, #724]	; (800193c <rtc_task+0x2e8>)
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001668:	4bb5      	ldr	r3, [pc, #724]	; (8001940 <rtc_task+0x2ec>)
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 800166c:	4bb5      	ldr	r3, [pc, #724]	; (8001944 <rtc_task+0x2f0>)
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001670:	4bb5      	ldr	r3, [pc, #724]	; (8001948 <rtc_task+0x2f4>)
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001674:	4bb5      	ldr	r3, [pc, #724]	; (800194c <rtc_task+0x2f8>)
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8001678:	4bb5      	ldr	r3, [pc, #724]	; (8001950 <rtc_task+0x2fc>)
 800167a:	623b      	str	r3, [r7, #32]
	const char *msg_rtc_yr  = "Enter year(0-99):";
 800167c:	4bb5      	ldr	r3, [pc, #724]	; (8001954 <rtc_task+0x300>)
 800167e:	61fb      	str	r3, [r7, #28]

	const char *msg_conf = "Configuration successful\n";
 8001680:	4bb5      	ldr	r3, [pc, #724]	; (8001958 <rtc_task+0x304>)
 8001682:	61bb      	str	r3, [r7, #24]
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001684:	4bb5      	ldr	r3, [pc, #724]	; (800195c <rtc_task+0x308>)
 8001686:	617b      	str	r3, [r7, #20]
#define DAY_CONFIG		2
#define YEAR_CONFIG		3

	while(1){
		/*TODO: Notify wait (wait till someone notifies) */
			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2300      	movs	r3, #0
 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	2000      	movs	r0, #0
 8001696:	f006 ffd1 	bl	800863c <xTaskGenericNotifyWait>
		/*TODO : Print the menu and show current date and time information */
			xQueueSend(q_printf,&msg_rtc1,portMAX_DELAY) ;
 800169a:	4bb1      	ldr	r3, [pc, #708]	; (8001960 <rtc_task+0x30c>)
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80016a2:	2300      	movs	r3, #0
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	f005 fd16 	bl	80070d8 <xQueueGenericSend>
			show_time_date(&time);
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fc83 	bl	8000fbc <show_time_date>
			xQueueSend(q_printf,&msg_rtc2,portMAX_DELAY) ;
 80016b6:	4baa      	ldr	r3, [pc, #680]	; (8001960 <rtc_task+0x30c>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80016be:	2300      	movs	r3, #0
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	f005 fd08 	bl	80070d8 <xQueueGenericSend>

		while(curr_state != sMainMenu)
 80016c8:	bf00      	nop
 80016ca:	e1a8      	b.n	8001a1e <rtc_task+0x3ca>
		{

			/*TODO: Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	9200      	str	r2, [sp, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2000      	movs	r0, #0
 80016dc:	f006 ffae 	bl	800863c <xTaskGenericNotifyWait>
			cmd = (command_t *)cmd_addr ;
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	64fb      	str	r3, [r7, #76]	; 0x4c
			switch(curr_state)
 80016e4:	4b9f      	ldr	r3, [pc, #636]	; (8001964 <rtc_task+0x310>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	3b02      	subs	r3, #2
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	f200 8197 	bhi.w	8001a1e <rtc_task+0x3ca>
 80016f0:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <rtc_task+0xa4>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	08001709 	.word	0x08001709
 80016fc:	080017bb 	.word	0x080017bb
 8001700:	080018ad 	.word	0x080018ad
 8001704:	08001a17 	.word	0x08001a17
			{
				case sRtcMenu:
					{
						/*process RTC menu commands */
						if (cmd->len == 1)
 8001708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d148      	bne.n	80017a2 <rtc_task+0x14e>
						{
							menu_code = cmd->payload[0]-48 ;
 8001710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	3b30      	subs	r3, #48	; 0x30
 8001716:	643b      	str	r3, [r7, #64]	; 0x40
 8001718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800171a:	2b03      	cmp	r3, #3
 800171c:	d835      	bhi.n	800178a <rtc_task+0x136>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <rtc_task+0xd0>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	08001735 	.word	0x08001735
 8001728:	0800174f 	.word	0x0800174f
 800172c:	08001769 	.word	0x08001769
 8001730:	08001783 	.word	0x08001783
							switch(menu_code)
							{
							case 0:
								curr_state = sRtcTimeConfig ;
 8001734:	4b8b      	ldr	r3, [pc, #556]	; (8001964 <rtc_task+0x310>)
 8001736:	2203      	movs	r2, #3
 8001738:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_printf,&msg_rtc_hh,portMAX_DELAY) ;
 800173a:	4b89      	ldr	r3, [pc, #548]	; (8001960 <rtc_task+0x30c>)
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001742:	2300      	movs	r3, #0
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	f005 fcc6 	bl	80070d8 <xQueueGenericSend>
								break ;
 800174c:	e034      	b.n	80017b8 <rtc_task+0x164>
							case 1:
								curr_state = sRtcDateConfig ;
 800174e:	4b85      	ldr	r3, [pc, #532]	; (8001964 <rtc_task+0x310>)
 8001750:	2204      	movs	r2, #4
 8001752:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_printf,&msg_rtc_dd,portMAX_DELAY) ;
 8001754:	4b82      	ldr	r3, [pc, #520]	; (8001960 <rtc_task+0x30c>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800175c:	2300      	movs	r3, #0
 800175e:	f04f 32ff 	mov.w	r2, #4294967295
 8001762:	f005 fcb9 	bl	80070d8 <xQueueGenericSend>
								break ;
 8001766:	e027      	b.n	80017b8 <rtc_task+0x164>
							case 2:
								curr_state = sRtcReport ;
 8001768:	4b7e      	ldr	r3, [pc, #504]	; (8001964 <rtc_task+0x310>)
 800176a:	2205      	movs	r2, #5
 800176c:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_printf,&msg_rtc_report,portMAX_DELAY) ;
 800176e:	4b7c      	ldr	r3, [pc, #496]	; (8001960 <rtc_task+0x30c>)
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	f107 0114 	add.w	r1, r7, #20
 8001776:	2300      	movs	r3, #0
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	f005 fcac 	bl	80070d8 <xQueueGenericSend>
								break ;
 8001780:	e01a      	b.n	80017b8 <rtc_task+0x164>
							case 3:
								curr_state = sMainMenu ;
 8001782:	4b78      	ldr	r3, [pc, #480]	; (8001964 <rtc_task+0x310>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
								break ;
 8001788:	e016      	b.n	80017b8 <rtc_task+0x164>
							default:
								curr_state = sMainMenu ;
 800178a:	4b76      	ldr	r3, [pc, #472]	; (8001964 <rtc_task+0x310>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_printf,&msg_inv,portMAX_DELAY) ;
 8001790:	4b73      	ldr	r3, [pc, #460]	; (8001960 <rtc_task+0x30c>)
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	2300      	movs	r3, #0
 8001796:	f04f 32ff 	mov.w	r2, #4294967295
 800179a:	4973      	ldr	r1, [pc, #460]	; (8001968 <rtc_task+0x314>)
 800179c:	f005 fc9c 	bl	80070d8 <xQueueGenericSend>
 80017a0:	e13d      	b.n	8001a1e <rtc_task+0x3ca>
							}
						}
						else
						{
							curr_state = sMainMenu ;
 80017a2:	4b70      	ldr	r3, [pc, #448]	; (8001964 <rtc_task+0x310>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_printf,&msg_inv,portMAX_DELAY) ;
 80017a8:	4b6d      	ldr	r3, [pc, #436]	; (8001960 <rtc_task+0x30c>)
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	2300      	movs	r3, #0
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295
 80017b2:	496d      	ldr	r1, [pc, #436]	; (8001968 <rtc_task+0x314>)
 80017b4:	f005 fc90 	bl	80070d8 <xQueueGenericSend>
						}

						break;
 80017b8:	e131      	b.n	8001a1e <rtc_task+0x3ca>
					}

				case sRtcTimeConfig:
					{
					/* get hh, mm, ss infor and configure RTC */
						switch(rtc_state)
 80017ba:	4b6c      	ldr	r3, [pc, #432]	; (800196c <rtc_task+0x318>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d03b      	beq.n	800183a <rtc_task+0x1e6>
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	f300 812b 	bgt.w	8001a1e <rtc_task+0x3ca>
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <rtc_task+0x17e>
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d01a      	beq.n	8001806 <rtc_task+0x1b2>
 80017d0:	e125      	b.n	8001a1e <rtc_task+0x3ca>
						{
						case HH_CONFIG:
							{
								uint8_t hour = get_number(cmd->payload, cmd->len) ;
 80017d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4619      	mov	r1, r3
 80017da:	4610      	mov	r0, r2
 80017dc:	f7ff fdec 	bl	80013b8 <get_number>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
								time.hour = hour ;
 80017e6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80017ea:	72bb      	strb	r3, [r7, #10]
								rtc_state = MM_CONFIG ;
 80017ec:	4b5f      	ldr	r3, [pc, #380]	; (800196c <rtc_task+0x318>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
								xQueueSend(q_printf,&msg_rtc_mm,portMAX_DELAY) ;
 80017f2:	4b5b      	ldr	r3, [pc, #364]	; (8001960 <rtc_task+0x30c>)
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80017fa:	2300      	movs	r3, #0
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	f005 fc6a 	bl	80070d8 <xQueueGenericSend>
								break;
 8001804:	e051      	b.n	80018aa <rtc_task+0x256>
							}
						case MM_CONFIG:
							{
								uint8_t min = get_number(cmd->payload, cmd->len) ;
 8001806:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4619      	mov	r1, r3
 800180e:	4610      	mov	r0, r2
 8001810:	f7ff fdd2 	bl	80013b8 <get_number>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								time.minutes = min ;
 800181a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800181e:	727b      	strb	r3, [r7, #9]
								rtc_state = SS_CONFIG ;
 8001820:	4b52      	ldr	r3, [pc, #328]	; (800196c <rtc_task+0x318>)
 8001822:	2202      	movs	r2, #2
 8001824:	601a      	str	r2, [r3, #0]
								xQueueSend(q_printf,&msg_rtc_ss,portMAX_DELAY) ;
 8001826:	4b4e      	ldr	r3, [pc, #312]	; (8001960 <rtc_task+0x30c>)
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800182e:	2300      	movs	r3, #0
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	f005 fc50 	bl	80070d8 <xQueueGenericSend>
								break;
 8001838:	e037      	b.n	80018aa <rtc_task+0x256>
							}

						case SS_CONFIG:
							{
								uint8_t sec = get_number(cmd->payload, cmd->len) ;
 800183a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800183c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f7ff fdb8 	bl	80013b8 <get_number>
 8001848:	4603      	mov	r3, r0
 800184a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								time.seconds = sec ;
 800184e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001852:	723b      	strb	r3, [r7, #8]
								if (!validate_rtc_information(&time))
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fbe5 	bl	8001028 <validate_rtc_information>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d113      	bne.n	800188c <rtc_task+0x238>
								{
									RTC_Set_Time(&time) ;
 8001864:	f107 0308 	add.w	r3, r7, #8
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fb0d 	bl	8000e88 <RTC_Set_Time>
									xQueueSend(q_printf,&msg_conf,portMAX_DELAY) ;
 800186e:	4b3c      	ldr	r3, [pc, #240]	; (8001960 <rtc_task+0x30c>)
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	f107 0118 	add.w	r1, r7, #24
 8001876:	2300      	movs	r3, #0
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	f005 fc2c 	bl	80070d8 <xQueueGenericSend>
									show_time_date(&time);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fb99 	bl	8000fbc <show_time_date>
 800188a:	e007      	b.n	800189c <rtc_task+0x248>

								}
								else
									xQueueSend(q_printf,&msg_inv,portMAX_DELAY) ;
 800188c:	4b34      	ldr	r3, [pc, #208]	; (8001960 <rtc_task+0x30c>)
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	2300      	movs	r3, #0
 8001892:	f04f 32ff 	mov.w	r2, #4294967295
 8001896:	4934      	ldr	r1, [pc, #208]	; (8001968 <rtc_task+0x314>)
 8001898:	f005 fc1e 	bl	80070d8 <xQueueGenericSend>

								curr_state = sMainMenu ;
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <rtc_task+0x310>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
								rtc_state = 0 ;
 80018a2:	4b32      	ldr	r3, [pc, #200]	; (800196c <rtc_task+0x318>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
								break ;
 80018a8:	bf00      	nop

							}
						} // switch(rtc_state)

					break;} // case sRtcTimeConfig:
 80018aa:	e0b8      	b.n	8001a1e <rtc_task+0x3ca>

				case sRtcDateConfig:
						{

							/* get date, month, day , year info and configure RTC */
							switch(rtc_state)
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <rtc_task+0x318>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	f200 80b4 	bhi.w	8001a1e <rtc_task+0x3ca>
 80018b6:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <rtc_task+0x268>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080018cd 	.word	0x080018cd
 80018c0:	08001901 	.word	0x08001901
 80018c4:	08001971 	.word	0x08001971
 80018c8:	080019a5 	.word	0x080019a5
								{
								case DATE_CONFIG:
									{
										uint8_t d = get_number(cmd->payload, cmd->len) ;
 80018cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	4619      	mov	r1, r3
 80018d4:	4610      	mov	r0, r2
 80018d6:	f7ff fd6f 	bl	80013b8 <get_number>
 80018da:	4603      	mov	r3, r0
 80018dc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
										time.dayofmonth = d ;
 80018e0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80018e4:	733b      	strb	r3, [r7, #12]
										rtc_state = MONTH_CONFIG ;
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <rtc_task+0x318>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
										xQueueSend(q_printf,&msg_rtc_mo,portMAX_DELAY) ;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <rtc_task+0x30c>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80018f4:	2300      	movs	r3, #0
 80018f6:	f04f 32ff 	mov.w	r2, #4294967295
 80018fa:	f005 fbed 	bl	80070d8 <xQueueGenericSend>
										break;
 80018fe:	e089      	b.n	8001a14 <rtc_task+0x3c0>
									}
								case MONTH_CONFIG:
									{
										uint8_t month = get_number(cmd->payload, cmd->len) ;
 8001900:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	4619      	mov	r1, r3
 8001908:	4610      	mov	r0, r2
 800190a:	f7ff fd55 	bl	80013b8 <get_number>
 800190e:	4603      	mov	r3, r0
 8001910:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
										time.month = month ;
 8001914:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001918:	737b      	strb	r3, [r7, #13]
										rtc_state = DAY_CONFIG ;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <rtc_task+0x318>)
 800191c:	2202      	movs	r2, #2
 800191e:	601a      	str	r2, [r3, #0]
										xQueueSend(q_printf,&msg_rtc_dow,portMAX_DELAY) ;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <rtc_task+0x30c>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	f107 0120 	add.w	r1, r7, #32
 8001928:	2300      	movs	r3, #0
 800192a:	f04f 32ff 	mov.w	r2, #4294967295
 800192e:	f005 fbd3 	bl	80070d8 <xQueueGenericSend>
										break;
 8001932:	e06f      	b.n	8001a14 <rtc_task+0x3c0>
 8001934:	0800a688 	.word	0x0800a688
 8001938:	0800a6d4 	.word	0x0800a6d4
 800193c:	0800a778 	.word	0x0800a778
 8001940:	0800a78c 	.word	0x0800a78c
 8001944:	0800a7a4 	.word	0x0800a7a4
 8001948:	0800a7bc 	.word	0x0800a7bc
 800194c:	0800a7d0 	.word	0x0800a7d0
 8001950:	0800a7e4 	.word	0x0800a7e4
 8001954:	0800a7fc 	.word	0x0800a7fc
 8001958:	0800a810 	.word	0x0800a810
 800195c:	0800a82c 	.word	0x0800a82c
 8001960:	20000158 	.word	0x20000158
 8001964:	2000016c 	.word	0x2000016c
 8001968:	20000010 	.word	0x20000010
 800196c:	200001f8 	.word	0x200001f8
									}
								case DAY_CONFIG:
								{
									uint8_t day = get_number(cmd->payload, cmd->len) ;
 8001970:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	4619      	mov	r1, r3
 8001978:	4610      	mov	r0, r2
 800197a:	f7ff fd1d 	bl	80013b8 <get_number>
 800197e:	4603      	mov	r3, r0
 8001980:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
									time.dayofweek = day ;
 8001984:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001988:	72fb      	strb	r3, [r7, #11]
									rtc_state = YEAR_CONFIG ;
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <rtc_task+0x3e8>)
 800198c:	2203      	movs	r2, #3
 800198e:	601a      	str	r2, [r3, #0]
									xQueueSend(q_printf,&msg_rtc_yr,portMAX_DELAY) ;
 8001990:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <rtc_task+0x3ec>)
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	f107 011c 	add.w	r1, r7, #28
 8001998:	2300      	movs	r3, #0
 800199a:	f04f 32ff 	mov.w	r2, #4294967295
 800199e:	f005 fb9b 	bl	80070d8 <xQueueGenericSend>
									break;
 80019a2:	e037      	b.n	8001a14 <rtc_task+0x3c0>
								}

								case YEAR_CONFIG:
									{
										uint8_t year = get_number(cmd->payload, cmd->len) ;
 80019a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	4619      	mov	r1, r3
 80019ac:	4610      	mov	r0, r2
 80019ae:	f7ff fd03 	bl	80013b8 <get_number>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
										time.year = year ;
 80019b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80019bc:	73bb      	strb	r3, [r7, #14]
										if (!validate_rtc_information(&time))
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fb30 	bl	8001028 <validate_rtc_information>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d113      	bne.n	80019f6 <rtc_task+0x3a2>
										{
											RTC_Set_Time(&time) ;
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fa58 	bl	8000e88 <RTC_Set_Time>
											xQueueSend(q_printf,&msg_conf,portMAX_DELAY) ;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <rtc_task+0x3ec>)
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	f107 0118 	add.w	r1, r7, #24
 80019e0:	2300      	movs	r3, #0
 80019e2:	f04f 32ff 	mov.w	r2, #4294967295
 80019e6:	f005 fb77 	bl	80070d8 <xQueueGenericSend>
											show_time_date(&time);
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fae4 	bl	8000fbc <show_time_date>
 80019f4:	e007      	b.n	8001a06 <rtc_task+0x3b2>

										}
										else
											xQueueSend(q_printf,&msg_inv,portMAX_DELAY) ;
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <rtc_task+0x3ec>)
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	2300      	movs	r3, #0
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	4910      	ldr	r1, [pc, #64]	; (8001a44 <rtc_task+0x3f0>)
 8001a02:	f005 fb69 	bl	80070d8 <xQueueGenericSend>

										curr_state = sMainMenu ;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <rtc_task+0x3f4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
										rtc_state = 0 ;
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <rtc_task+0x3e8>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
										break ;
 8001a12:	bf00      	nop

									}
								}
							break;
 8001a14:	e003      	b.n	8001a1e <rtc_task+0x3ca>
						}

				case sRtcReport:{
					/*TODO: enable or disable RTC current time reporting over ITM printf */
					curr_state = sMainMenu ;
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <rtc_task+0x3f4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
					break;}
 8001a1c:	bf00      	nop
		while(curr_state != sMainMenu)
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <rtc_task+0x3f4>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f47f ae52 	bne.w	80016cc <rtc_task+0x78>
			}// switch end

		} //while end

		   /* Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <rtc_task+0x3f8>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2300      	movs	r3, #0
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	f006 fe81 	bl	800873c <xTaskGenericNotify>
			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001a3a:	e625      	b.n	8001688 <rtc_task+0x34>
 8001a3c:	200001f8 	.word	0x200001f8
 8001a40:	20000158 	.word	0x20000158
 8001a44:	20000010 	.word	0x20000010
 8001a48:	2000016c 	.word	0x2000016c
 8001a4c:	20000140 	.word	0x20000140

08001a50 <cmd_hanlder_task>:

		}//while super loop end
}

void cmd_hanlder_task ( void *param)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	6078      	str	r0, [r7, #4]
	BaseType_t ret ;
	command_t cmd ;
	while(1)
	{
			/* Implement notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2000      	movs	r0, #0
 8001a66:	f006 fde9 	bl	800863c <xTaskGenericNotifyWait>
 8001a6a:	61f8      	str	r0, [r7, #28]

		if (ret == pdTRUE)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d1f2      	bne.n	8001a58 <cmd_hanlder_task+0x8>
		{
			/* process the user data ( command) stored  in input data  queue */
			process_command(&cmd) ;
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f802 	bl	8001a80 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001a7c:	e7ec      	b.n	8001a58 <cmd_hanlder_task+0x8>
	...

08001a80 <process_command>:
	}
}


void process_command ( command_t *cmd)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	6078      	str	r0, [r7, #4]
	extract_cmmand(cmd);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f835 	bl	8001af8 <extract_cmmand>

	switch (curr_state )
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <process_command+0x68>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	dc24      	bgt.n	8001ae0 <process_command+0x60>
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	da18      	bge.n	8001acc <process_command+0x4c>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <process_command+0x24>
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d00a      	beq.n	8001ab8 <process_command+0x38>


	}


}
 8001aa2:	e01d      	b.n	8001ae0 <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd ,eSetValueWithOverwrite) ;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <process_command+0x6c>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2303      	movs	r3, #3
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	f006 fe43 	bl	800873c <xTaskGenericNotify>
			break ;
 8001ab6:	e013      	b.n	8001ae0 <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd ,eSetValueWithOverwrite) ;
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <process_command+0x70>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	f006 fe39 	bl	800873c <xTaskGenericNotify>
			break ;
 8001aca:	e009      	b.n	8001ae0 <process_command+0x60>
		xTaskNotify(handle_rtc_task,(uint32_t)cmd ,eSetValueWithOverwrite) ;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <process_command+0x74>)
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	2100      	movs	r1, #0
 8001ada:	f006 fe2f 	bl	800873c <xTaskGenericNotify>
		break ;
 8001ade:	bf00      	nop
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000016c 	.word	0x2000016c
 8001aec:	20000140 	.word	0x20000140
 8001af0:	2000014c 	.word	0x2000014c
 8001af4:	20000150 	.word	0x20000150

08001af8 <extract_cmmand>:


int extract_cmmand ( command_t *cmd )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	uint8_t item ;
	BaseType_t status ;
	status = uxQueueMessagesWaiting(q_data);
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <extract_cmmand+0x70>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f005 fdfe 	bl	8007706 <uxQueueMessagesWaiting>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	613b      	str	r3, [r7, #16]
	if (!status) return  -1 ;
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <extract_cmmand+0x22>
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	e022      	b.n	8001b60 <extract_cmmand+0x68>

	uint8_t i = 0 ;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
	do
	{
		status = xQueueReceive(q_data, &item, 0) ;
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <extract_cmmand+0x70>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f107 010f 	add.w	r1, r7, #15
 8001b26:	2200      	movs	r2, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f005 fc7d 	bl	8007428 <xQueueReceive>
 8001b2e:	6138      	str	r0, [r7, #16]
		if (status == pdTRUE) cmd->payload[i++] = item ;
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d106      	bne.n	8001b44 <extract_cmmand+0x4c>
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	75fa      	strb	r2, [r7, #23]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	7bf9      	ldrb	r1, [r7, #15]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	5499      	strb	r1, [r3, r2]

	}
	while (item !='\n');
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	2b0a      	cmp	r3, #10
 8001b48:	d1e9      	bne.n	8001b1e <extract_cmmand+0x26>
	cmd->payload[i-1] = '\0';
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	2100      	movs	r1, #0
 8001b52:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1 ;
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	461a      	mov	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	60da      	str	r2, [r3, #12]

	return 0 ;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000154 	.word	0x20000154

08001b6c <initTimer>:


void initTimer(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af02      	add	r7, sp, #8
	   for (int i = 0 ; i< 4 ; i ++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	e010      	b.n	8001b9a <initTimer+0x2e>
	   {
		   handle_led_timer[i] =  xTimerCreate("led_timer", pdMS_TO_TICKS(500),pdTRUE,NULL,led_effect_callback) ;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <initTimer+0x40>)
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b84:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <initTimer+0x44>)
 8001b86:	f007 f853 	bl	8008c30 <xTimerCreate>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	4909      	ldr	r1, [pc, #36]	; (8001bb4 <initTimer+0x48>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	   for (int i = 0 ; i< 4 ; i ++)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3301      	adds	r3, #1
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	ddeb      	ble.n	8001b78 <initTimer+0xc>
	   }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	08001bb9 	.word	0x08001bb9
 8001bb0:	0800a850 	.word	0x0800a850
 8001bb4:	2000015c 	.word	0x2000015c

08001bb8 <led_effect_callback>:
void led_effect_callback (TimerHandle_t xTimer)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	int id ;
	id = (uint32_t)pvTimerGetTimerID(xTimer) ;
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f007 fb71 	bl	80092a8 <pvTimerGetTimerID>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	60fb      	str	r3, [r7, #12]
	switch(id)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d816      	bhi.n	8001c00 <led_effect_callback+0x48>
 8001bd2:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <led_effect_callback+0x20>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001be9 	.word	0x08001be9
 8001bdc:	08001bef 	.word	0x08001bef
 8001be0:	08001bf5 	.word	0x08001bf5
 8001be4:	08001bfb 	.word	0x08001bfb
	{
	case 1:
		led_effect1();
 8001be8:	f7fe fe34 	bl	8000854 <led_effect1>
		break ;
 8001bec:	e008      	b.n	8001c00 <led_effect_callback+0x48>
	case 2:
		led_effect2();
 8001bee:	f7fe fe47 	bl	8000880 <led_effect2>
		break ;
 8001bf2:	e005      	b.n	8001c00 <led_effect_callback+0x48>
	case 3:
		led_effect3();
 8001bf4:	f7fe fe5a 	bl	80008ac <led_effect3>
		break ;
 8001bf8:	e002      	b.n	8001c00 <led_effect_callback+0x48>
	case 4:
		led_effect4();
 8001bfa:	f7fe fe5e 	bl	80008ba <led_effect4>
		break ;
 8001bfe:	bf00      	nop


	}

}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c0e:	490e      	ldr	r1, [pc, #56]	; (8001c48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c10:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c14:	e002      	b.n	8001c1c <LoopCopyDataInit>

08001c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1a:	3304      	adds	r3, #4

08001c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c20:	d3f9      	bcc.n	8001c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c22:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c24:	4c0b      	ldr	r4, [pc, #44]	; (8001c54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c28:	e001      	b.n	8001c2e <LoopFillZerobss>

08001c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c2c:	3204      	adds	r2, #4

08001c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c30:	d3fb      	bcc.n	8001c2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c32:	f7ff fbaf 	bl	8001394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c36:	f007 ffad 	bl	8009b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3a:	f7fe fe45 	bl	80008c8 <main>
  bx  lr    
 8001c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001c4c:	0800a8d0 	.word	0x0800a8d0
  ldr r2, =_sbss
 8001c50:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001c54:	20012fb8 	.word	0x20012fb8

08001c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC_IRQHandler>
	...

08001c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <HAL_Init+0x40>)
 8001c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_Init+0x40>)
 8001c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_Init+0x40>)
 8001c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c84:	2003      	movs	r0, #3
 8001c86:	f000 f8d8 	bl	8001e3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	f7ff fabe 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c90:	f7ff f9f4 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023c00 	.word	0x40023c00

08001ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x20>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x24>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <HAL_IncTick+0x24>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000018 	.word	0x20000018
 8001cc4:	200001fc 	.word	0x200001fc

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_GetTick+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	200001fc 	.word	0x200001fc

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff4c 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e62:	f7ff ff61 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001e66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	6978      	ldr	r0, [r7, #20]
 8001e6e:	f7ff ffb1 	bl	8001dd4 <NVIC_EncodePriority>
 8001e72:	4602      	mov	r2, r0
 8001e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff80 	bl	8001d80 <__NVIC_SetPriority>
}
 8001e80:	bf00      	nop
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff54 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eb2:	f7ff ff09 	bl	8001cc8 <HAL_GetTick>
 8001eb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d008      	beq.n	8001ed6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e052      	b.n	8001f7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0216 	bic.w	r2, r2, #22
 8001ee4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <HAL_DMA_Abort+0x62>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0208 	bic.w	r2, r2, #8
 8001f14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0201 	bic.w	r2, r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f26:	e013      	b.n	8001f50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f28:	f7ff fece 	bl	8001cc8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d90c      	bls.n	8001f50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e015      	b.n	8001f7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1e4      	bne.n	8001f28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	223f      	movs	r2, #63	; 0x3f
 8001f64:	409a      	lsls	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d004      	beq.n	8001fa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00c      	b.n	8001fbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2205      	movs	r2, #5
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd6:	b2db      	uxtb	r3, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e165      	b.n	80022cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	f040 8154 	bne.w	80022c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d005      	beq.n	8002036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	2b02      	cmp	r3, #2
 8002034:	d130      	bne.n	8002098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d017      	beq.n	80020d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d123      	bne.n	8002128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	69b9      	ldr	r1, [r7, #24]
 8002124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80ae 	beq.w	80022c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b5d      	ldr	r3, [pc, #372]	; (80022e4 <HAL_GPIO_Init+0x300>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a5c      	ldr	r2, [pc, #368]	; (80022e4 <HAL_GPIO_Init+0x300>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b5a      	ldr	r3, [pc, #360]	; (80022e4 <HAL_GPIO_Init+0x300>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002186:	4a58      	ldr	r2, [pc, #352]	; (80022e8 <HAL_GPIO_Init+0x304>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4f      	ldr	r2, [pc, #316]	; (80022ec <HAL_GPIO_Init+0x308>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d025      	beq.n	80021fe <HAL_GPIO_Init+0x21a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4e      	ldr	r2, [pc, #312]	; (80022f0 <HAL_GPIO_Init+0x30c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <HAL_GPIO_Init+0x216>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4d      	ldr	r2, [pc, #308]	; (80022f4 <HAL_GPIO_Init+0x310>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0x212>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4c      	ldr	r2, [pc, #304]	; (80022f8 <HAL_GPIO_Init+0x314>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x20e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4b      	ldr	r2, [pc, #300]	; (80022fc <HAL_GPIO_Init+0x318>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x20a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4a      	ldr	r2, [pc, #296]	; (8002300 <HAL_GPIO_Init+0x31c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x206>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a49      	ldr	r2, [pc, #292]	; (8002304 <HAL_GPIO_Init+0x320>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x202>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e00c      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e00a      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e008      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021f2:	2303      	movs	r3, #3
 80021f4:	e004      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021fe:	2300      	movs	r3, #0
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	f002 0203 	and.w	r2, r2, #3
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	4093      	lsls	r3, r2
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002210:	4935      	ldr	r1, [pc, #212]	; (80022e8 <HAL_GPIO_Init+0x304>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221e:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_GPIO_Init+0x324>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002242:	4a31      	ldr	r2, [pc, #196]	; (8002308 <HAL_GPIO_Init+0x324>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002248:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <HAL_GPIO_Init+0x324>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800226c:	4a26      	ldr	r2, [pc, #152]	; (8002308 <HAL_GPIO_Init+0x324>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002272:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_GPIO_Init+0x324>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_GPIO_Init+0x324>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_GPIO_Init+0x324>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022c0:	4a11      	ldr	r2, [pc, #68]	; (8002308 <HAL_GPIO_Init+0x324>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	f67f ae96 	bls.w	8002000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40021400 	.word	0x40021400
 8002304:	40021800 	.word	0x40021800
 8002308:	40013c00 	.word	0x40013c00

0800230c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
 8002318:	4613      	mov	r3, r2
 800231a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800231c:	787b      	ldrb	r3, [r7, #1]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002328:	e003      	b.n	8002332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800232a:	887b      	ldrh	r3, [r7, #2]
 800232c:	041a      	lsls	r2, r3, #16
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	619a      	str	r2, [r3, #24]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002350:	887a      	ldrh	r2, [r7, #2]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4013      	ands	r3, r2
 8002356:	041a      	lsls	r2, r3, #16
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	43d9      	mvns	r1, r3
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	400b      	ands	r3, r1
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	619a      	str	r2, [r3, #24]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e12b      	b.n	80025de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe fe96 	bl	80010cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023d8:	f002 fc92 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a81      	ldr	r2, [pc, #516]	; (80025e8 <HAL_I2C_Init+0x274>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d807      	bhi.n	80023f8 <HAL_I2C_Init+0x84>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a80      	ldr	r2, [pc, #512]	; (80025ec <HAL_I2C_Init+0x278>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bf94      	ite	ls
 80023f0:	2301      	movls	r3, #1
 80023f2:	2300      	movhi	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e006      	b.n	8002406 <HAL_I2C_Init+0x92>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a7d      	ldr	r2, [pc, #500]	; (80025f0 <HAL_I2C_Init+0x27c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	bf94      	ite	ls
 8002400:	2301      	movls	r3, #1
 8002402:	2300      	movhi	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0e7      	b.n	80025de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4a78      	ldr	r2, [pc, #480]	; (80025f4 <HAL_I2C_Init+0x280>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0c9b      	lsrs	r3, r3, #18
 8002418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a6a      	ldr	r2, [pc, #424]	; (80025e8 <HAL_I2C_Init+0x274>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d802      	bhi.n	8002448 <HAL_I2C_Init+0xd4>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3301      	adds	r3, #1
 8002446:	e009      	b.n	800245c <HAL_I2C_Init+0xe8>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	4a69      	ldr	r2, [pc, #420]	; (80025f8 <HAL_I2C_Init+0x284>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	3301      	adds	r3, #1
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800246e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	495c      	ldr	r1, [pc, #368]	; (80025e8 <HAL_I2C_Init+0x274>)
 8002478:	428b      	cmp	r3, r1
 800247a:	d819      	bhi.n	80024b0 <HAL_I2C_Init+0x13c>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e59      	subs	r1, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fbb1 f3f3 	udiv	r3, r1, r3
 800248a:	1c59      	adds	r1, r3, #1
 800248c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002490:	400b      	ands	r3, r1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_I2C_Init+0x138>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1e59      	subs	r1, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024aa:	e051      	b.n	8002550 <HAL_I2C_Init+0x1dc>
 80024ac:	2304      	movs	r3, #4
 80024ae:	e04f      	b.n	8002550 <HAL_I2C_Init+0x1dc>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d111      	bne.n	80024dc <HAL_I2C_Init+0x168>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1e58      	subs	r0, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	440b      	add	r3, r1
 80024c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ca:	3301      	adds	r3, #1
 80024cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e012      	b.n	8002502 <HAL_I2C_Init+0x18e>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e58      	subs	r0, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	0099      	lsls	r1, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Init+0x196>
 8002506:	2301      	movs	r3, #1
 8002508:	e022      	b.n	8002550 <HAL_I2C_Init+0x1dc>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10e      	bne.n	8002530 <HAL_I2C_Init+0x1bc>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1e58      	subs	r0, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6859      	ldr	r1, [r3, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	440b      	add	r3, r1
 8002520:	fbb0 f3f3 	udiv	r3, r0, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800252e:	e00f      	b.n	8002550 <HAL_I2C_Init+0x1dc>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1e58      	subs	r0, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	0099      	lsls	r1, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	fbb0 f3f3 	udiv	r3, r0, r3
 8002546:	3301      	adds	r3, #1
 8002548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	6809      	ldr	r1, [r1, #0]
 8002554:	4313      	orrs	r3, r2
 8002556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800257e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6911      	ldr	r1, [r2, #16]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68d2      	ldr	r2, [r2, #12]
 800258a:	4311      	orrs	r1, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	430b      	orrs	r3, r1
 8002592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	000186a0 	.word	0x000186a0
 80025ec:	001e847f 	.word	0x001e847f
 80025f0:	003d08ff 	.word	0x003d08ff
 80025f4:	431bde83 	.word	0x431bde83
 80025f8:	10624dd3 	.word	0x10624dd3

080025fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	4608      	mov	r0, r1
 8002606:	4611      	mov	r1, r2
 8002608:	461a      	mov	r2, r3
 800260a:	4603      	mov	r3, r0
 800260c:	817b      	strh	r3, [r7, #10]
 800260e:	460b      	mov	r3, r1
 8002610:	813b      	strh	r3, [r7, #8]
 8002612:	4613      	mov	r3, r2
 8002614:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002616:	f7ff fb57 	bl	8001cc8 <HAL_GetTick>
 800261a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b20      	cmp	r3, #32
 8002626:	f040 80d9 	bne.w	80027dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2319      	movs	r3, #25
 8002630:	2201      	movs	r2, #1
 8002632:	496d      	ldr	r1, [pc, #436]	; (80027e8 <HAL_I2C_Mem_Write+0x1ec>)
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f001 fff7 	bl	8004628 <I2C_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002640:	2302      	movs	r3, #2
 8002642:	e0cc      	b.n	80027de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_I2C_Mem_Write+0x56>
 800264e:	2302      	movs	r3, #2
 8002650:	e0c5      	b.n	80027de <HAL_I2C_Mem_Write+0x1e2>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d007      	beq.n	8002678 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002686:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2221      	movs	r2, #33	; 0x21
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2240      	movs	r2, #64	; 0x40
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a3a      	ldr	r2, [r7, #32]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a4d      	ldr	r2, [pc, #308]	; (80027ec <HAL_I2C_Mem_Write+0x1f0>)
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ba:	88f8      	ldrh	r0, [r7, #6]
 80026bc:	893a      	ldrh	r2, [r7, #8]
 80026be:	8979      	ldrh	r1, [r7, #10]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4603      	mov	r3, r0
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f001 fd86 	bl	80041dc <I2C_RequestMemoryWrite>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d052      	beq.n	800277c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e081      	b.n	80027de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f002 f878 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00d      	beq.n	8002706 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d107      	bne.n	8002702 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002700:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e06b      	b.n	80027de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b04      	cmp	r3, #4
 8002742:	d11b      	bne.n	800277c <HAL_I2C_Mem_Write+0x180>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d017      	beq.n	800277c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	781a      	ldrb	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1aa      	bne.n	80026da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f002 f864 	bl	8004856 <I2C_WaitOnBTFFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00d      	beq.n	80027b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	2b04      	cmp	r3, #4
 800279a:	d107      	bne.n	80027ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e016      	b.n	80027de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	e000      	b.n	80027de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	00100002 	.word	0x00100002
 80027ec:	ffff0000 	.word	0xffff0000

080027f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	817b      	strh	r3, [r7, #10]
 8002802:	460b      	mov	r3, r1
 8002804:	813b      	strh	r3, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800280a:	f7ff fa5d 	bl	8001cc8 <HAL_GetTick>
 800280e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b20      	cmp	r3, #32
 800281a:	f040 8208 	bne.w	8002c2e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	2319      	movs	r3, #25
 8002824:	2201      	movs	r2, #1
 8002826:	497b      	ldr	r1, [pc, #492]	; (8002a14 <HAL_I2C_Mem_Read+0x224>)
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f001 fefd 	bl	8004628 <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
 8002836:	e1fb      	b.n	8002c30 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_I2C_Mem_Read+0x56>
 8002842:	2302      	movs	r3, #2
 8002844:	e1f4      	b.n	8002c30 <HAL_I2C_Mem_Read+0x440>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d007      	beq.n	800286c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800287a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2222      	movs	r2, #34	; 0x22
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2240      	movs	r2, #64	; 0x40
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a5b      	ldr	r2, [pc, #364]	; (8002a18 <HAL_I2C_Mem_Read+0x228>)
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ae:	88f8      	ldrh	r0, [r7, #6]
 80028b0:	893a      	ldrh	r2, [r7, #8]
 80028b2:	8979      	ldrh	r1, [r7, #10]
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4603      	mov	r3, r0
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f001 fd22 	bl	8004308 <I2C_RequestMemoryRead>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e1b0      	b.n	8002c30 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d113      	bne.n	80028fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	623b      	str	r3, [r7, #32]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e184      	b.n	8002c08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002902:	2b01      	cmp	r3, #1
 8002904:	d11b      	bne.n	800293e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e164      	b.n	8002c08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	2b02      	cmp	r3, #2
 8002944:	d11b      	bne.n	800297e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002954:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002964:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	e144      	b.n	8002c08 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002994:	e138      	b.n	8002c08 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	2b03      	cmp	r3, #3
 800299c:	f200 80f1 	bhi.w	8002b82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d123      	bne.n	80029f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f001 ffc5 	bl	800493c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e139      	b.n	8002c30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029ee:	e10b      	b.n	8002c08 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d14e      	bne.n	8002a96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	2200      	movs	r2, #0
 8002a00:	4906      	ldr	r1, [pc, #24]	; (8002a1c <HAL_I2C_Mem_Read+0x22c>)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f001 fe10 	bl	8004628 <I2C_WaitOnFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e10e      	b.n	8002c30 <HAL_I2C_Mem_Read+0x440>
 8002a12:	bf00      	nop
 8002a14:	00100002 	.word	0x00100002
 8002a18:	ffff0000 	.word	0xffff0000
 8002a1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a94:	e0b8      	b.n	8002c08 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	4966      	ldr	r1, [pc, #408]	; (8002c38 <HAL_I2C_Mem_Read+0x448>)
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f001 fdc1 	bl	8004628 <I2C_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0bf      	b.n	8002c30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af8:	2200      	movs	r2, #0
 8002afa:	494f      	ldr	r1, [pc, #316]	; (8002c38 <HAL_I2C_Mem_Read+0x448>)
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f001 fd93 	bl	8004628 <I2C_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e091      	b.n	8002c30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b80:	e042      	b.n	8002c08 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f001 fed8 	bl	800493c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e04c      	b.n	8002c30 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d118      	bne.n	8002c08 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f47f aec2 	bne.w	8002996 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e000      	b.n	8002c30 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
  }
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3728      	adds	r7, #40	; 0x28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	00010004 	.word	0x00010004

08002c3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c64:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d003      	beq.n	8002c74 <HAL_I2C_EV_IRQHandler+0x38>
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	f040 80c1 	bne.w	8002df6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_I2C_EV_IRQHandler+0x6e>
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c94:	d003      	beq.n	8002c9e <HAL_I2C_EV_IRQHandler+0x62>
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2C_EV_IRQHandler+0x66>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x68>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	f000 8132 	beq.w	8002f0e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00c      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0x92>
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	0a5b      	lsrs	r3, r3, #9
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d006      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f001 fec0 	bl	8004a46 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fcdc 	bl	8003684 <I2C_Master_SB>
 8002ccc:	e092      	b.n	8002df4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	08db      	lsrs	r3, r3, #3
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0xb2>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	0a5b      	lsrs	r3, r3, #9
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fd52 	bl	8003790 <I2C_Master_ADD10>
 8002cec:	e082      	b.n	8002df4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0xd2>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	0a5b      	lsrs	r3, r3, #9
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fd6c 	bl	80037e4 <I2C_Master_ADDR>
 8002d0c:	e072      	b.n	8002df4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d03b      	beq.n	8002d92 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d28:	f000 80f3 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	09db      	lsrs	r3, r3, #7
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00f      	beq.n	8002d58 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	0a9b      	lsrs	r3, r3, #10
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d009      	beq.n	8002d58 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d103      	bne.n	8002d58 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f94c 	bl	8002fee <I2C_MasterTransmit_TXE>
 8002d56:	e04d      	b.n	8002df4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80d6 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	0a5b      	lsrs	r3, r3, #9
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80cf 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d74:	7bbb      	ldrb	r3, [r7, #14]
 8002d76:	2b21      	cmp	r3, #33	; 0x21
 8002d78:	d103      	bne.n	8002d82 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9d3 	bl	8003126 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d80:	e0c7      	b.n	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b40      	cmp	r3, #64	; 0x40
 8002d86:	f040 80c4 	bne.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa41 	bl	8003212 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d90:	e0bf      	b.n	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da0:	f000 80b7 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	099b      	lsrs	r3, r3, #6
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00f      	beq.n	8002dd0 <HAL_I2C_EV_IRQHandler+0x194>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	0a9b      	lsrs	r3, r3, #10
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_I2C_EV_IRQHandler+0x194>
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d103      	bne.n	8002dd0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fab6 	bl	800333a <I2C_MasterReceive_RXNE>
 8002dce:	e011      	b.n	8002df4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 809a 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	0a5b      	lsrs	r3, r3, #9
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8093 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fb5f 	bl	80034b0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002df2:	e08e      	b.n	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002df4:	e08d      	b.n	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	e007      	b.n	8002e18 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	085b      	lsrs	r3, r3, #1
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0x20e>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	0a5b      	lsrs	r3, r3, #9
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00c      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e40:	69b9      	ldr	r1, [r7, #24]
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 ff1d 	bl	8003c82 <I2C_Slave_ADDR>
 8002e48:	e066      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_I2C_EV_IRQHandler+0x22e>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	0a5b      	lsrs	r3, r3, #9
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 ff58 	bl	8003d18 <I2C_Slave_STOPF>
 8002e68:	e056      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e6a:	7bbb      	ldrb	r3, [r7, #14]
 8002e6c:	2b21      	cmp	r3, #33	; 0x21
 8002e6e:	d002      	beq.n	8002e76 <HAL_I2C_EV_IRQHandler+0x23a>
 8002e70:	7bbb      	ldrb	r3, [r7, #14]
 8002e72:	2b29      	cmp	r3, #41	; 0x29
 8002e74:	d125      	bne.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	09db      	lsrs	r3, r3, #7
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00f      	beq.n	8002ea2 <HAL_I2C_EV_IRQHandler+0x266>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	0a9b      	lsrs	r3, r3, #10
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_I2C_EV_IRQHandler+0x266>
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fe33 	bl	8003b06 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ea0:	e039      	b.n	8002f16 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d033      	beq.n	8002f16 <HAL_I2C_EV_IRQHandler+0x2da>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	0a5b      	lsrs	r3, r3, #9
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d02d      	beq.n	8002f16 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fe60 	bl	8003b80 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ec0:	e029      	b.n	8002f16 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00f      	beq.n	8002eee <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	0a9b      	lsrs	r3, r3, #10
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_I2C_EV_IRQHandler+0x2b2>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d103      	bne.n	8002eee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fe6b 	bl	8003bc2 <I2C_SlaveReceive_RXNE>
 8002eec:	e014      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	089b      	lsrs	r3, r3, #2
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00e      	beq.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	0a5b      	lsrs	r3, r3, #9
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fe99 	bl	8003c3e <I2C_SlaveReceive_BTF>
 8002f0c:	e004      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f16:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	460b      	mov	r3, r1
 8002f78:	70fb      	strb	r3, [r7, #3]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003004:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	2b00      	cmp	r3, #0
 8003012:	d150      	bne.n	80030b6 <I2C_MasterTransmit_TXE+0xc8>
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b21      	cmp	r3, #33	; 0x21
 8003018:	d14d      	bne.n	80030b6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d01d      	beq.n	800305c <I2C_MasterTransmit_TXE+0x6e>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b20      	cmp	r3, #32
 8003024:	d01a      	beq.n	800305c <I2C_MasterTransmit_TXE+0x6e>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800302c:	d016      	beq.n	800305c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800303c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2211      	movs	r2, #17
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff62 	bl	8002f1e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800305a:	e060      	b.n	800311e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800306a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d107      	bne.n	80030a6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ff7d 	bl	8002f9e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030a4:	e03b      	b.n	800311e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ff35 	bl	8002f1e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030b4:	e033      	b.n	800311e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b21      	cmp	r3, #33	; 0x21
 80030ba:	d005      	beq.n	80030c8 <I2C_MasterTransmit_TXE+0xda>
 80030bc:	7bbb      	ldrb	r3, [r7, #14]
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d12d      	bne.n	800311e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	2b22      	cmp	r3, #34	; 0x22
 80030c6:	d12a      	bne.n	800311e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d108      	bne.n	80030e4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80030e2:	e01c      	b.n	800311e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d103      	bne.n	80030f8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f88e 	bl	8003212 <I2C_MemoryTransmit_TXE_BTF>
}
 80030f6:	e012      	b.n	800311e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	781a      	ldrb	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800311c:	e7ff      	b.n	800311e <I2C_MasterTransmit_TXE+0x130>
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b21      	cmp	r3, #33	; 0x21
 800313e:	d164      	bne.n	800320a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d012      	beq.n	8003170 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800316e:	e04c      	b.n	800320a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b08      	cmp	r3, #8
 8003174:	d01d      	beq.n	80031b2 <I2C_MasterTransmit_BTF+0x8c>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b20      	cmp	r3, #32
 800317a:	d01a      	beq.n	80031b2 <I2C_MasterTransmit_BTF+0x8c>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003182:	d016      	beq.n	80031b2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003192:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2211      	movs	r2, #17
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff feb7 	bl	8002f1e <HAL_I2C_MasterTxCpltCallback>
}
 80031b0:	e02b      	b.n	800320a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031c0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d107      	bne.n	80031fc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fed2 	bl	8002f9e <HAL_I2C_MemTxCpltCallback>
}
 80031fa:	e006      	b.n	800320a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fe8a 	bl	8002f1e <HAL_I2C_MasterTxCpltCallback>
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11d      	bne.n	8003266 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d10b      	bne.n	800324a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003236:	b2da      	uxtb	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	1c9a      	adds	r2, r3, #2
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003248:	e073      	b.n	8003332 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324e:	b29b      	uxth	r3, r3
 8003250:	121b      	asrs	r3, r3, #8
 8003252:	b2da      	uxtb	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003264:	e065      	b.n	8003332 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326a:	2b01      	cmp	r3, #1
 800326c:	d10b      	bne.n	8003286 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003272:	b2da      	uxtb	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003284:	e055      	b.n	8003332 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328a:	2b02      	cmp	r3, #2
 800328c:	d151      	bne.n	8003332 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	2b22      	cmp	r3, #34	; 0x22
 8003292:	d10d      	bne.n	80032b0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032ae:	e040      	b.n	8003332 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d015      	beq.n	80032e6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	2b21      	cmp	r3, #33	; 0x21
 80032be:	d112      	bne.n	80032e6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032e4:	e025      	b.n	8003332 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d120      	bne.n	8003332 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b21      	cmp	r3, #33	; 0x21
 80032f4:	d11d      	bne.n	8003332 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003304:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003314:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff fe36 	bl	8002f9e <HAL_I2C_MemTxCpltCallback>
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b22      	cmp	r3, #34	; 0x22
 800334c:	f040 80ac 	bne.w	80034a8 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d921      	bls.n	80033a2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b03      	cmp	r3, #3
 800338c:	f040 808c 	bne.w	80034a8 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80033a0:	e082      	b.n	80034a8 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d075      	beq.n	8003496 <I2C_MasterReceive_RXNE+0x15c>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d002      	beq.n	80033b6 <I2C_MasterReceive_RXNE+0x7c>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d16f      	bne.n	8003496 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f001 fa8e 	bl	80048d8 <I2C_WaitOnSTOPRequestThroughIT>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d142      	bne.n	8003448 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033e0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b40      	cmp	r3, #64	; 0x40
 800341a:	d10a      	bne.n	8003432 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff fdc1 	bl	8002fb2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003430:	e03a      	b.n	80034a8 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2212      	movs	r2, #18
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff fd76 	bl	8002f32 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003446:	e02f      	b.n	80034a8 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003456:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fd99 	bl	8002fc6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003494:	e008      	b.n	80034a8 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a4:	605a      	str	r2, [r3, #4]
}
 80034a6:	e7ff      	b.n	80034a8 <I2C_MasterReceive_RXNE+0x16e>
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d11b      	bne.n	8003500 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80034fe:	e0bd      	b.n	800367c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b03      	cmp	r3, #3
 8003508:	d129      	bne.n	800355e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003518:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d00a      	beq.n	8003536 <I2C_MasterReceive_BTF+0x86>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d007      	beq.n	8003536 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003534:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800355c:	e08e      	b.n	800367c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d176      	bne.n	8003656 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d002      	beq.n	8003574 <I2C_MasterReceive_BTF+0xc4>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b10      	cmp	r3, #16
 8003572:	d108      	bne.n	8003586 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e019      	b.n	80035ba <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b04      	cmp	r3, #4
 800358a:	d002      	beq.n	8003592 <I2C_MasterReceive_BTF+0xe2>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d108      	bne.n	80035a4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e00a      	b.n	80035ba <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d007      	beq.n	80035ba <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003614:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d10a      	bne.n	8003640 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff fcba 	bl	8002fb2 <HAL_I2C_MemRxCpltCallback>
}
 800363e:	e01d      	b.n	800367c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2212      	movs	r2, #18
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff fc6f 	bl	8002f32 <HAL_I2C_MasterRxCpltCallback>
}
 8003654:	e012      	b.n	800367c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d117      	bne.n	80036c8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036b0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80036b2:	e067      	b.n	8003784 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	611a      	str	r2, [r3, #16]
}
 80036c6:	e05d      	b.n	8003784 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d0:	d133      	bne.n	800373a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b21      	cmp	r3, #33	; 0x21
 80036dc:	d109      	bne.n	80036f2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036ee:	611a      	str	r2, [r3, #16]
 80036f0:	e008      	b.n	8003704 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d004      	beq.n	8003716 <I2C_Master_SB+0x92>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d108      	bne.n	8003728 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	2b00      	cmp	r3, #0
 800371c:	d032      	beq.n	8003784 <I2C_Master_SB+0x100>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d02d      	beq.n	8003784 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003736:	605a      	str	r2, [r3, #4]
}
 8003738:	e024      	b.n	8003784 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10e      	bne.n	8003760 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	b29b      	uxth	r3, r3
 8003748:	11db      	asrs	r3, r3, #7
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f003 0306 	and.w	r3, r3, #6
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f063 030f 	orn	r3, r3, #15
 8003756:	b2da      	uxtb	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	611a      	str	r2, [r3, #16]
}
 800375e:	e011      	b.n	8003784 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003764:	2b01      	cmp	r3, #1
 8003766:	d10d      	bne.n	8003784 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	b29b      	uxth	r3, r3
 800376e:	11db      	asrs	r3, r3, #7
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f003 0306 	and.w	r3, r3, #6
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f063 030e 	orn	r3, r3, #14
 800377c:	b2da      	uxtb	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	611a      	str	r2, [r3, #16]
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	b2da      	uxtb	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <I2C_Master_ADD10+0x26>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d108      	bne.n	80037c8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00c      	beq.n	80037d8 <I2C_Master_ADD10+0x48>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d6:	605a      	str	r2, [r3, #4]
  }
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b091      	sub	sp, #68	; 0x44
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b22      	cmp	r3, #34	; 0x22
 800380c:	f040 8169 	bne.w	8003ae2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10f      	bne.n	8003838 <I2C_Master_ADDR+0x54>
 8003818:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d10b      	bne.n	8003838 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003820:	2300      	movs	r3, #0
 8003822:	633b      	str	r3, [r7, #48]	; 0x30
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	633b      	str	r3, [r7, #48]	; 0x30
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	633b      	str	r3, [r7, #48]	; 0x30
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	e160      	b.n	8003afa <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383c:	2b00      	cmp	r3, #0
 800383e:	d11d      	bne.n	800387c <I2C_Master_ADDR+0x98>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003848:	d118      	bne.n	800387c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384a:	2300      	movs	r3, #0
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	651a      	str	r2, [r3, #80]	; 0x50
 800387a:	e13e      	b.n	8003afa <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d113      	bne.n	80038ae <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003886:	2300      	movs	r3, #0
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e115      	b.n	8003ada <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	f040 808a 	bne.w	80039ce <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80038ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c0:	d137      	bne.n	8003932 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e0:	d113      	bne.n	800390a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f2:	2300      	movs	r3, #0
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	e0e7      	b.n	8003ada <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390a:	2300      	movs	r3, #0
 800390c:	623b      	str	r3, [r7, #32]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	623b      	str	r3, [r7, #32]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	623b      	str	r3, [r7, #32]
 800391e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e0d3      	b.n	8003ada <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	2b08      	cmp	r3, #8
 8003936:	d02e      	beq.n	8003996 <I2C_Master_ADDR+0x1b2>
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	2b20      	cmp	r3, #32
 800393c:	d02b      	beq.n	8003996 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800393e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003940:	2b12      	cmp	r3, #18
 8003942:	d102      	bne.n	800394a <I2C_Master_ADDR+0x166>
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	2b01      	cmp	r3, #1
 8003948:	d125      	bne.n	8003996 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	2b04      	cmp	r3, #4
 800394e:	d00e      	beq.n	800396e <I2C_Master_ADDR+0x18a>
 8003950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003952:	2b02      	cmp	r3, #2
 8003954:	d00b      	beq.n	800396e <I2C_Master_ADDR+0x18a>
 8003956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003958:	2b10      	cmp	r3, #16
 800395a:	d008      	beq.n	800396e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e007      	b.n	800397e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800397c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	e0a1      	b.n	8003ada <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e085      	b.n	8003ada <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d14d      	bne.n	8003a74 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d016      	beq.n	8003a0c <I2C_Master_ADDR+0x228>
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d013      	beq.n	8003a0c <I2C_Master_ADDR+0x228>
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d010      	beq.n	8003a0c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e007      	b.n	8003a1c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a1a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2a:	d117      	bne.n	8003a5c <I2C_Master_ADDR+0x278>
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a32:	d00b      	beq.n	8003a4c <I2C_Master_ADDR+0x268>
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d008      	beq.n	8003a4c <I2C_Master_ADDR+0x268>
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d005      	beq.n	8003a4c <I2C_Master_ADDR+0x268>
 8003a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d002      	beq.n	8003a4c <I2C_Master_ADDR+0x268>
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d107      	bne.n	8003a5c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a5a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	e032      	b.n	8003ada <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a82:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a92:	d117      	bne.n	8003ac4 <I2C_Master_ADDR+0x2e0>
 8003a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a9a:	d00b      	beq.n	8003ab4 <I2C_Master_ADDR+0x2d0>
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d008      	beq.n	8003ab4 <I2C_Master_ADDR+0x2d0>
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d005      	beq.n	8003ab4 <I2C_Master_ADDR+0x2d0>
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d002      	beq.n	8003ab4 <I2C_Master_ADDR+0x2d0>
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d107      	bne.n	8003ac4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ac2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ae0:	e00b      	b.n	8003afa <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
}
 8003af8:	e7ff      	b.n	8003afa <I2C_Master_ADDR+0x316>
 8003afa:	bf00      	nop
 8003afc:	3744      	adds	r7, #68	; 0x44
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02b      	beq.n	8003b78 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d114      	bne.n	8003b78 <I2C_SlaveTransmit_TXE+0x72>
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b29      	cmp	r3, #41	; 0x29
 8003b52:	d111      	bne.n	8003b78 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b62:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2221      	movs	r2, #33	; 0x21
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2228      	movs	r2, #40	; 0x28
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff f9e7 	bl	8002f46 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b78:	bf00      	nop
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d011      	beq.n	8003bb6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d02c      	beq.n	8003c36 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d114      	bne.n	8003c36 <I2C_SlaveReceive_RXNE+0x74>
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c10:	d111      	bne.n	8003c36 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c20:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2222      	movs	r2, #34	; 0x22
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2228      	movs	r2, #40	; 0x28
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff f992 	bl	8002f5a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d012      	beq.n	8003c76 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c9c:	2b28      	cmp	r3, #40	; 0x28
 8003c9e:	d127      	bne.n	8003cf0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cae:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	089b      	lsrs	r3, r3, #2
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	09db      	lsrs	r3, r3, #7
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	81bb      	strh	r3, [r7, #12]
 8003cd2:	e002      	b.n	8003cda <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ce2:	89ba      	ldrh	r2, [r7, #12]
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff f940 	bl	8002f6e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003cee:	e00e      	b.n	8003d0e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d36:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d64:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d74:	d172      	bne.n	8003e5c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b22      	cmp	r3, #34	; 0x22
 8003d7a:	d002      	beq.n	8003d82 <I2C_Slave_STOPF+0x6a>
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d80:	d135      	bne.n	8003dee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f043 0204 	orr.w	r2, r3, #4
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe f904 	bl	8001fc8 <HAL_DMA_GetState>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d049      	beq.n	8003e5a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	4a69      	ldr	r2, [pc, #420]	; (8003f70 <I2C_Slave_STOPF+0x258>)
 8003dcc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe f8d6 	bl	8001f84 <HAL_DMA_Abort_IT>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d03d      	beq.n	8003e5a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de8:	4610      	mov	r0, r2
 8003dea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dec:	e035      	b.n	8003e5a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f043 0204 	orr.w	r2, r3, #4
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe f8ce 	bl	8001fc8 <HAL_DMA_GetState>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d014      	beq.n	8003e5c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e36:	4a4e      	ldr	r2, [pc, #312]	; (8003f70 <I2C_Slave_STOPF+0x258>)
 8003e38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f8a0 	bl	8001f84 <HAL_DMA_Abort_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e54:	4610      	mov	r0, r2
 8003e56:	4798      	blx	r3
 8003e58:	e000      	b.n	8003e5c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e5a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d03e      	beq.n	8003ee4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d112      	bne.n	8003e9a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d112      	bne.n	8003ece <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f043 0204 	orr.w	r2, r3, #4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f843 	bl	8003f78 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003ef2:	e039      	b.n	8003f68 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef8:	d109      	bne.n	8003f0e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2228      	movs	r2, #40	; 0x28
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff f826 	bl	8002f5a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b28      	cmp	r3, #40	; 0x28
 8003f18:	d111      	bne.n	8003f3e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <I2C_Slave_STOPF+0x25c>)
 8003f1e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff f827 	bl	8002f8a <HAL_I2C_ListenCpltCallback>
}
 8003f3c:	e014      	b.n	8003f68 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	2b22      	cmp	r3, #34	; 0x22
 8003f44:	d002      	beq.n	8003f4c <I2C_Slave_STOPF+0x234>
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b22      	cmp	r3, #34	; 0x22
 8003f4a:	d10d      	bne.n	8003f68 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fe fff9 	bl	8002f5a <HAL_I2C_SlaveRxCpltCallback>
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	080044d9 	.word	0x080044d9
 8003f74:	ffff0000 	.word	0xffff0000

08003f78 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f86:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f90:	7bbb      	ldrb	r3, [r7, #14]
 8003f92:	2b10      	cmp	r3, #16
 8003f94:	d002      	beq.n	8003f9c <I2C_ITError+0x24>
 8003f96:	7bbb      	ldrb	r3, [r7, #14]
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d10a      	bne.n	8003fb2 <I2C_ITError+0x3a>
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b22      	cmp	r3, #34	; 0x22
 8003fa0:	d107      	bne.n	8003fb2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fb8:	2b28      	cmp	r3, #40	; 0x28
 8003fba:	d107      	bne.n	8003fcc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2228      	movs	r2, #40	; 0x28
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003fca:	e015      	b.n	8003ff8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fda:	d00a      	beq.n	8003ff2 <I2C_ITError+0x7a>
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b60      	cmp	r3, #96	; 0x60
 8003fe0:	d007      	beq.n	8003ff2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004006:	d162      	bne.n	80040ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004016:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d020      	beq.n	8004068 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402a:	4a6a      	ldr	r2, [pc, #424]	; (80041d4 <I2C_ITError+0x25c>)
 800402c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd ffa6 	bl	8001f84 <HAL_DMA_Abort_IT>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8089 	beq.w	8004152 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004062:	4610      	mov	r0, r2
 8004064:	4798      	blx	r3
 8004066:	e074      	b.n	8004152 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	4a59      	ldr	r2, [pc, #356]	; (80041d4 <I2C_ITError+0x25c>)
 800406e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	4618      	mov	r0, r3
 8004076:	f7fd ff85 	bl	8001f84 <HAL_DMA_Abort_IT>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d068      	beq.n	8004152 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d10b      	bne.n	80040a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040c8:	4610      	mov	r0, r2
 80040ca:	4798      	blx	r3
 80040cc:	e041      	b.n	8004152 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b60      	cmp	r3, #96	; 0x60
 80040d8:	d125      	bne.n	8004126 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d10b      	bne.n	800410e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fe ff5b 	bl	8002fda <HAL_I2C_AbortCpltCallback>
 8004124:	e015      	b.n	8004152 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	d10b      	bne.n	800414c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7fe ff3a 	bl	8002fc6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10e      	bne.n	8004180 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800418e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004196:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d113      	bne.n	80041cc <I2C_ITError+0x254>
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b28      	cmp	r3, #40	; 0x28
 80041a8:	d110      	bne.n	80041cc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <I2C_ITError+0x260>)
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe fedf 	bl	8002f8a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	080044d9 	.word	0x080044d9
 80041d8:	ffff0000 	.word	0xffff0000

080041dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	461a      	mov	r2, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	817b      	strh	r3, [r7, #10]
 80041ee:	460b      	mov	r3, r1
 80041f0:	813b      	strh	r3, [r7, #8]
 80041f2:	4613      	mov	r3, r2
 80041f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004204:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	2200      	movs	r2, #0
 800420e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fa08 	bl	8004628 <I2C_WaitOnFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422c:	d103      	bne.n	8004236 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e05f      	b.n	80042fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800423a:	897b      	ldrh	r3, [r7, #10]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004248:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	6a3a      	ldr	r2, [r7, #32]
 800424e:	492d      	ldr	r1, [pc, #180]	; (8004304 <I2C_RequestMemoryWrite+0x128>)
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fa40 	bl	80046d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e04c      	b.n	80042fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	6a39      	ldr	r1, [r7, #32]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 faaa 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	2b04      	cmp	r3, #4
 800428c:	d107      	bne.n	800429e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e02b      	b.n	80042fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d105      	bne.n	80042b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042a8:	893b      	ldrh	r3, [r7, #8]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	611a      	str	r2, [r3, #16]
 80042b2:	e021      	b.n	80042f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042b4:	893b      	ldrh	r3, [r7, #8]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c4:	6a39      	ldr	r1, [r7, #32]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fa84 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d107      	bne.n	80042ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e005      	b.n	80042fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ee:	893b      	ldrh	r3, [r7, #8]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	00010002 	.word	0x00010002

08004308 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	4608      	mov	r0, r1
 8004312:	4611      	mov	r1, r2
 8004314:	461a      	mov	r2, r3
 8004316:	4603      	mov	r3, r0
 8004318:	817b      	strh	r3, [r7, #10]
 800431a:	460b      	mov	r3, r1
 800431c:	813b      	strh	r3, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004330:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004340:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	2200      	movs	r2, #0
 800434a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f96a 	bl	8004628 <I2C_WaitOnFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004368:	d103      	bne.n	8004372 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e0aa      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004376:	897b      	ldrh	r3, [r7, #10]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004384:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	6a3a      	ldr	r2, [r7, #32]
 800438a:	4952      	ldr	r1, [pc, #328]	; (80044d4 <I2C_RequestMemoryRead+0x1cc>)
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f9a2 	bl	80046d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e097      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	6a39      	ldr	r1, [r7, #32]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fa0c 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d107      	bne.n	80043da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e076      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d105      	bne.n	80043f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043e4:	893b      	ldrh	r3, [r7, #8]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	611a      	str	r2, [r3, #16]
 80043ee:	e021      	b.n	8004434 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043f0:	893b      	ldrh	r3, [r7, #8]
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004400:	6a39      	ldr	r1, [r7, #32]
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f9e6 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00d      	beq.n	800442a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	2b04      	cmp	r3, #4
 8004414:	d107      	bne.n	8004426 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004424:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e050      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800442a:	893b      	ldrh	r3, [r7, #8]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004436:	6a39      	ldr	r1, [r7, #32]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f9cb 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00d      	beq.n	8004460 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	2b04      	cmp	r3, #4
 800444a:	d107      	bne.n	800445c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e035      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800446e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	2200      	movs	r2, #0
 8004478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f8d3 	bl	8004628 <I2C_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00d      	beq.n	80044a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004496:	d103      	bne.n	80044a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e013      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044a4:	897b      	ldrh	r3, [r7, #10]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	6a3a      	ldr	r2, [r7, #32]
 80044b8:	4906      	ldr	r1, [pc, #24]	; (80044d4 <I2C_RequestMemoryRead+0x1cc>)
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f90b 	bl	80046d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	00010002 	.word	0x00010002

080044d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044f2:	4b4b      	ldr	r3, [pc, #300]	; (8004620 <I2C_DMAAbort+0x148>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	08db      	lsrs	r3, r3, #3
 80044f8:	4a4a      	ldr	r2, [pc, #296]	; (8004624 <I2C_DMAAbort+0x14c>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	0a1a      	lsrs	r2, r3, #8
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	00da      	lsls	r2, r3, #3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f043 0220 	orr.w	r2, r3, #32
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800451e:	e00a      	b.n	8004536 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3b01      	subs	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004534:	d0ea      	beq.n	800450c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	2200      	movs	r2, #0
 8004544:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	2200      	movs	r2, #0
 8004554:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004564:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2200      	movs	r2, #0
 800456a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004578:	2200      	movs	r2, #0
 800457a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	2200      	movs	r2, #0
 800458a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b60      	cmp	r3, #96	; 0x60
 80045a6:	d10e      	bne.n	80045c6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2200      	movs	r2, #0
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045be:	6978      	ldr	r0, [r7, #20]
 80045c0:	f7fe fd0b 	bl	8002fda <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045c4:	e027      	b.n	8004616 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045cc:	2b28      	cmp	r3, #40	; 0x28
 80045ce:	d117      	bne.n	8004600 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2228      	movs	r2, #40	; 0x28
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045fe:	e007      	b.n	8004610 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004610:	6978      	ldr	r0, [r7, #20]
 8004612:	f7fe fcd8 	bl	8002fc6 <HAL_I2C_ErrorCallback>
}
 8004616:	bf00      	nop
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	2000000c 	.word	0x2000000c
 8004624:	14f8b589 	.word	0x14f8b589

08004628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4613      	mov	r3, r2
 8004636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004638:	e025      	b.n	8004686 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d021      	beq.n	8004686 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7fd fb41 	bl	8001cc8 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d116      	bne.n	8004686 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f043 0220 	orr.w	r2, r3, #32
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e023      	b.n	80046ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	0c1b      	lsrs	r3, r3, #16
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10d      	bne.n	80046ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	43da      	mvns	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4013      	ands	r3, r2
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	e00c      	b.n	80046c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	43da      	mvns	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4013      	ands	r3, r2
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf0c      	ite	eq
 80046be:	2301      	moveq	r3, #1
 80046c0:	2300      	movne	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d0b6      	beq.n	800463a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046e4:	e051      	b.n	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f4:	d123      	bne.n	800473e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004704:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800470e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f043 0204 	orr.w	r2, r3, #4
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e046      	b.n	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d021      	beq.n	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004746:	f7fd fabf 	bl	8001cc8 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d116      	bne.n	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f043 0220 	orr.w	r2, r3, #32
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e020      	b.n	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	d10c      	bne.n	80047ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	43da      	mvns	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4013      	ands	r3, r2
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	bf14      	ite	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	2300      	moveq	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	e00b      	b.n	80047c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	43da      	mvns	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4013      	ands	r3, r2
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d18d      	bne.n	80046e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047e0:	e02d      	b.n	800483e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f900 	bl	80049e8 <I2C_IsAcknowledgeFailed>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e02d      	b.n	800484e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d021      	beq.n	800483e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fd fa65 	bl	8001cc8 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d116      	bne.n	800483e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f043 0220 	orr.w	r2, r3, #32
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e007      	b.n	800484e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004848:	2b80      	cmp	r3, #128	; 0x80
 800484a:	d1ca      	bne.n	80047e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004862:	e02d      	b.n	80048c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f8bf 	bl	80049e8 <I2C_IsAcknowledgeFailed>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e02d      	b.n	80048d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d021      	beq.n	80048c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487c:	f7fd fa24 	bl	8001cc8 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d116      	bne.n	80048c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	f043 0220 	orr.w	r2, r3, #32
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e007      	b.n	80048d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d1ca      	bne.n	8004864 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80048e4:	4b13      	ldr	r3, [pc, #76]	; (8004934 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	08db      	lsrs	r3, r3, #3
 80048ea:	4a13      	ldr	r2, [pc, #76]	; (8004938 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	0a1a      	lsrs	r2, r3, #8
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d107      	bne.n	8004916 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f043 0220 	orr.w	r2, r3, #32
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e008      	b.n	8004928 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004924:	d0e9      	beq.n	80048fa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	2000000c 	.word	0x2000000c
 8004938:	14f8b589 	.word	0x14f8b589

0800493c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004948:	e042      	b.n	80049d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b10      	cmp	r3, #16
 8004956:	d119      	bne.n	800498c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0210 	mvn.w	r2, #16
 8004960:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e029      	b.n	80049e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498c:	f7fd f99c 	bl	8001cc8 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	429a      	cmp	r2, r3
 800499a:	d302      	bcc.n	80049a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d116      	bne.n	80049d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e007      	b.n	80049e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049da:	2b40      	cmp	r3, #64	; 0x40
 80049dc:	d1b5      	bne.n	800494a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fe:	d11b      	bne.n	8004a38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f043 0204 	orr.w	r2, r3, #4
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a56:	d103      	bne.n	8004a60 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a5e:	e007      	b.n	8004a70 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a68:	d102      	bne.n	8004a70 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a86:	2300      	movs	r3, #0
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_PWREx_EnableOverDrive+0x90>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	4a1f      	ldr	r2, [pc, #124]	; (8004b0c <HAL_PWREx_EnableOverDrive+0x90>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6413      	str	r3, [r2, #64]	; 0x40
 8004a96:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <HAL_PWREx_EnableOverDrive+0x90>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004aa2:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <HAL_PWREx_EnableOverDrive+0x94>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aa8:	f7fd f90e 	bl	8001cc8 <HAL_GetTick>
 8004aac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aae:	e009      	b.n	8004ac4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ab0:	f7fd f90a 	bl	8001cc8 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004abe:	d901      	bls.n	8004ac4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e01f      	b.n	8004b04 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ac4:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d1ee      	bne.n	8004ab0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ad2:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ad8:	f7fd f8f6 	bl	8001cc8 <HAL_GetTick>
 8004adc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ade:	e009      	b.n	8004af4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ae0:	f7fd f8f2 	bl	8001cc8 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aee:	d901      	bls.n	8004af4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e007      	b.n	8004b04 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <HAL_PWREx_EnableOverDrive+0x98>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b00:	d1ee      	bne.n	8004ae0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	420e0040 	.word	0x420e0040
 8004b14:	40007000 	.word	0x40007000
 8004b18:	420e0044 	.word	0x420e0044

08004b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0cc      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b30:	4b68      	ldr	r3, [pc, #416]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d90c      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3e:	4b65      	ldr	r3, [pc, #404]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b63      	ldr	r3, [pc, #396]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0b8      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d020      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b70:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4a58      	ldr	r2, [pc, #352]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b88:	4b53      	ldr	r3, [pc, #332]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4a52      	ldr	r2, [pc, #328]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b94:	4b50      	ldr	r3, [pc, #320]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	494d      	ldr	r1, [pc, #308]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d044      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d119      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e07f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d003      	beq.n	8004bda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bda:	4b3f      	ldr	r3, [pc, #252]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e06f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bea:	4b3b      	ldr	r3, [pc, #236]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e067      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bfa:	4b37      	ldr	r3, [pc, #220]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f023 0203 	bic.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4934      	ldr	r1, [pc, #208]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c0c:	f7fd f85c 	bl	8001cc8 <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c14:	f7fd f858 	bl	8001cc8 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e04f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	4b2b      	ldr	r3, [pc, #172]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 020c 	and.w	r2, r3, #12
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1eb      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d20c      	bcs.n	8004c64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b22      	ldr	r3, [pc, #136]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e032      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c70:	4b19      	ldr	r3, [pc, #100]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4916      	ldr	r1, [pc, #88]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c8e:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	490e      	ldr	r1, [pc, #56]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ca2:	f000 f887 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	490a      	ldr	r1, [pc, #40]	; (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004cb4:	5ccb      	ldrb	r3, [r1, r3]
 8004cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cba:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fc faa2 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40023c00 	.word	0x40023c00
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	0800a874 	.word	0x0800a874
 8004ce0:	2000000c 	.word	0x2000000c
 8004ce4:	20000014 	.word	0x20000014

08004ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cec:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cee:	681b      	ldr	r3, [r3, #0]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	2000000c 	.word	0x2000000c

08004d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d04:	f7ff fff0 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	0a9b      	lsrs	r3, r3, #10
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	4903      	ldr	r1, [pc, #12]	; (8004d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d16:	5ccb      	ldrb	r3, [r1, r3]
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40023800 	.word	0x40023800
 8004d24:	0800a884 	.word	0x0800a884

08004d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d2c:	f7ff ffdc 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d30:	4602      	mov	r2, r0
 8004d32:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	0b5b      	lsrs	r3, r3, #13
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	4903      	ldr	r1, [pc, #12]	; (8004d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d3e:	5ccb      	ldrb	r3, [r1, r3]
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	0800a884 	.word	0x0800a884

08004d50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	220f      	movs	r2, #15
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d60:	4b12      	ldr	r3, [pc, #72]	; (8004dac <HAL_RCC_GetClockConfig+0x5c>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0203 	and.w	r2, r3, #3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <HAL_RCC_GetClockConfig+0x5c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <HAL_RCC_GetClockConfig+0x5c>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <HAL_RCC_GetClockConfig+0x5c>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	08db      	lsrs	r3, r3, #3
 8004d8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d92:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <HAL_RCC_GetClockConfig+0x60>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 020f 	and.w	r2, r3, #15
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	601a      	str	r2, [r3, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40023c00 	.word	0x40023c00

08004db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db8:	b0ae      	sub	sp, #184	; 0xb8
 8004dba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dda:	4bcb      	ldr	r3, [pc, #812]	; (8005108 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 030c 	and.w	r3, r3, #12
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	f200 8206 	bhi.w	80051f4 <HAL_RCC_GetSysClockFreq+0x440>
 8004de8:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e25 	.word	0x08004e25
 8004df4:	080051f5 	.word	0x080051f5
 8004df8:	080051f5 	.word	0x080051f5
 8004dfc:	080051f5 	.word	0x080051f5
 8004e00:	08004e2d 	.word	0x08004e2d
 8004e04:	080051f5 	.word	0x080051f5
 8004e08:	080051f5 	.word	0x080051f5
 8004e0c:	080051f5 	.word	0x080051f5
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	080051f5 	.word	0x080051f5
 8004e18:	080051f5 	.word	0x080051f5
 8004e1c:	080051f5 	.word	0x080051f5
 8004e20:	08005025 	.word	0x08005025
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e24:	4bb9      	ldr	r3, [pc, #740]	; (800510c <HAL_RCC_GetSysClockFreq+0x358>)
 8004e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004e2a:	e1e7      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e2c:	4bb8      	ldr	r3, [pc, #736]	; (8005110 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e32:	e1e3      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e34:	4bb4      	ldr	r3, [pc, #720]	; (8005108 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e40:	4bb1      	ldr	r3, [pc, #708]	; (8005108 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d071      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e4c:	4bae      	ldr	r3, [pc, #696]	; (8005108 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	099b      	lsrs	r3, r3, #6
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e58:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004e5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e72:	4622      	mov	r2, r4
 8004e74:	462b      	mov	r3, r5
 8004e76:	f04f 0000 	mov.w	r0, #0
 8004e7a:	f04f 0100 	mov.w	r1, #0
 8004e7e:	0159      	lsls	r1, r3, #5
 8004e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e84:	0150      	lsls	r0, r2, #5
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	1a51      	subs	r1, r2, r1
 8004e8e:	6439      	str	r1, [r7, #64]	; 0x40
 8004e90:	4629      	mov	r1, r5
 8004e92:	eb63 0301 	sbc.w	r3, r3, r1
 8004e96:	647b      	str	r3, [r7, #68]	; 0x44
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	018b      	lsls	r3, r1, #6
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eae:	4641      	mov	r1, r8
 8004eb0:	018a      	lsls	r2, r1, #6
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	1a51      	subs	r1, r2, r1
 8004eb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004eb8:	4649      	mov	r1, r9
 8004eba:	eb63 0301 	sbc.w	r3, r3, r1
 8004ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004ecc:	4649      	mov	r1, r9
 8004ece:	00cb      	lsls	r3, r1, #3
 8004ed0:	4641      	mov	r1, r8
 8004ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ed6:	4641      	mov	r1, r8
 8004ed8:	00ca      	lsls	r2, r1, #3
 8004eda:	4610      	mov	r0, r2
 8004edc:	4619      	mov	r1, r3
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	189b      	adds	r3, r3, r2
 8004ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee6:	462b      	mov	r3, r5
 8004ee8:	460a      	mov	r2, r1
 8004eea:	eb42 0303 	adc.w	r3, r2, r3
 8004eee:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004efc:	4629      	mov	r1, r5
 8004efe:	024b      	lsls	r3, r1, #9
 8004f00:	4621      	mov	r1, r4
 8004f02:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f06:	4621      	mov	r1, r4
 8004f08:	024a      	lsls	r2, r1, #9
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f1c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004f20:	f7fb f9de 	bl	80002e0 <__aeabi_uldivmod>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4613      	mov	r3, r2
 8004f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f2e:	e067      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f30:	4b75      	ldr	r3, [pc, #468]	; (8005108 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	099b      	lsrs	r3, r3, #6
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f3c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f4e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004f52:	4622      	mov	r2, r4
 8004f54:	462b      	mov	r3, r5
 8004f56:	f04f 0000 	mov.w	r0, #0
 8004f5a:	f04f 0100 	mov.w	r1, #0
 8004f5e:	0159      	lsls	r1, r3, #5
 8004f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f64:	0150      	lsls	r0, r2, #5
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	1a51      	subs	r1, r2, r1
 8004f6e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f70:	4629      	mov	r1, r5
 8004f72:	eb63 0301 	sbc.w	r3, r3, r1
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004f84:	4649      	mov	r1, r9
 8004f86:	018b      	lsls	r3, r1, #6
 8004f88:	4641      	mov	r1, r8
 8004f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f8e:	4641      	mov	r1, r8
 8004f90:	018a      	lsls	r2, r1, #6
 8004f92:	4641      	mov	r1, r8
 8004f94:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f98:	4649      	mov	r1, r9
 8004f9a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004faa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb2:	4692      	mov	sl, r2
 8004fb4:	469b      	mov	fp, r3
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	eb1a 0303 	adds.w	r3, sl, r3
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	462b      	mov	r3, r5
 8004fc0:	eb4b 0303 	adc.w	r3, fp, r3
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	028b      	lsls	r3, r1, #10
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fdc:	4621      	mov	r1, r4
 8004fde:	028a      	lsls	r2, r1, #10
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fe8:	2200      	movs	r2, #0
 8004fea:	673b      	str	r3, [r7, #112]	; 0x70
 8004fec:	677a      	str	r2, [r7, #116]	; 0x74
 8004fee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004ff2:	f7fb f975 	bl	80002e0 <__aeabi_uldivmod>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005000:	4b41      	ldr	r3, [pc, #260]	; (8005108 <HAL_RCC_GetSysClockFreq+0x354>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	0c1b      	lsrs	r3, r3, #16
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	3301      	adds	r3, #1
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005012:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005016:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005022:	e0eb      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005024:	4b38      	ldr	r3, [pc, #224]	; (8005108 <HAL_RCC_GetSysClockFreq+0x354>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800502c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005030:	4b35      	ldr	r3, [pc, #212]	; (8005108 <HAL_RCC_GetSysClockFreq+0x354>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d06b      	beq.n	8005114 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800503c:	4b32      	ldr	r3, [pc, #200]	; (8005108 <HAL_RCC_GetSysClockFreq+0x354>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	099b      	lsrs	r3, r3, #6
 8005042:	2200      	movs	r2, #0
 8005044:	66bb      	str	r3, [r7, #104]	; 0x68
 8005046:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800504a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504e:	663b      	str	r3, [r7, #96]	; 0x60
 8005050:	2300      	movs	r3, #0
 8005052:	667b      	str	r3, [r7, #100]	; 0x64
 8005054:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005058:	4622      	mov	r2, r4
 800505a:	462b      	mov	r3, r5
 800505c:	f04f 0000 	mov.w	r0, #0
 8005060:	f04f 0100 	mov.w	r1, #0
 8005064:	0159      	lsls	r1, r3, #5
 8005066:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800506a:	0150      	lsls	r0, r2, #5
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4621      	mov	r1, r4
 8005072:	1a51      	subs	r1, r2, r1
 8005074:	61b9      	str	r1, [r7, #24]
 8005076:	4629      	mov	r1, r5
 8005078:	eb63 0301 	sbc.w	r3, r3, r1
 800507c:	61fb      	str	r3, [r7, #28]
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800508a:	4659      	mov	r1, fp
 800508c:	018b      	lsls	r3, r1, #6
 800508e:	4651      	mov	r1, sl
 8005090:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005094:	4651      	mov	r1, sl
 8005096:	018a      	lsls	r2, r1, #6
 8005098:	4651      	mov	r1, sl
 800509a:	ebb2 0801 	subs.w	r8, r2, r1
 800509e:	4659      	mov	r1, fp
 80050a0:	eb63 0901 	sbc.w	r9, r3, r1
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050b8:	4690      	mov	r8, r2
 80050ba:	4699      	mov	r9, r3
 80050bc:	4623      	mov	r3, r4
 80050be:	eb18 0303 	adds.w	r3, r8, r3
 80050c2:	613b      	str	r3, [r7, #16]
 80050c4:	462b      	mov	r3, r5
 80050c6:	eb49 0303 	adc.w	r3, r9, r3
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80050d8:	4629      	mov	r1, r5
 80050da:	024b      	lsls	r3, r1, #9
 80050dc:	4621      	mov	r1, r4
 80050de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050e2:	4621      	mov	r1, r4
 80050e4:	024a      	lsls	r2, r1, #9
 80050e6:	4610      	mov	r0, r2
 80050e8:	4619      	mov	r1, r3
 80050ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ee:	2200      	movs	r2, #0
 80050f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80050f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80050f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050f8:	f7fb f8f2 	bl	80002e0 <__aeabi_uldivmod>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4613      	mov	r3, r2
 8005102:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005106:	e065      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x420>
 8005108:	40023800 	.word	0x40023800
 800510c:	00f42400 	.word	0x00f42400
 8005110:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005114:	4b3d      	ldr	r3, [pc, #244]	; (800520c <HAL_RCC_GetSysClockFreq+0x458>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	099b      	lsrs	r3, r3, #6
 800511a:	2200      	movs	r2, #0
 800511c:	4618      	mov	r0, r3
 800511e:	4611      	mov	r1, r2
 8005120:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005124:	653b      	str	r3, [r7, #80]	; 0x50
 8005126:	2300      	movs	r3, #0
 8005128:	657b      	str	r3, [r7, #84]	; 0x54
 800512a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800512e:	4642      	mov	r2, r8
 8005130:	464b      	mov	r3, r9
 8005132:	f04f 0000 	mov.w	r0, #0
 8005136:	f04f 0100 	mov.w	r1, #0
 800513a:	0159      	lsls	r1, r3, #5
 800513c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005140:	0150      	lsls	r0, r2, #5
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4641      	mov	r1, r8
 8005148:	1a51      	subs	r1, r2, r1
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	4649      	mov	r1, r9
 800514e:	eb63 0301 	sbc.w	r3, r3, r1
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005160:	4659      	mov	r1, fp
 8005162:	018b      	lsls	r3, r1, #6
 8005164:	4651      	mov	r1, sl
 8005166:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800516a:	4651      	mov	r1, sl
 800516c:	018a      	lsls	r2, r1, #6
 800516e:	4651      	mov	r1, sl
 8005170:	1a54      	subs	r4, r2, r1
 8005172:	4659      	mov	r1, fp
 8005174:	eb63 0501 	sbc.w	r5, r3, r1
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	00eb      	lsls	r3, r5, #3
 8005182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005186:	00e2      	lsls	r2, r4, #3
 8005188:	4614      	mov	r4, r2
 800518a:	461d      	mov	r5, r3
 800518c:	4643      	mov	r3, r8
 800518e:	18e3      	adds	r3, r4, r3
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	464b      	mov	r3, r9
 8005194:	eb45 0303 	adc.w	r3, r5, r3
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051a6:	4629      	mov	r1, r5
 80051a8:	028b      	lsls	r3, r1, #10
 80051aa:	4621      	mov	r1, r4
 80051ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051b0:	4621      	mov	r1, r4
 80051b2:	028a      	lsls	r2, r1, #10
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051bc:	2200      	movs	r2, #0
 80051be:	64bb      	str	r3, [r7, #72]	; 0x48
 80051c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80051c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051c6:	f7fb f88b 	bl	80002e0 <__aeabi_uldivmod>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4613      	mov	r3, r2
 80051d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80051d4:	4b0d      	ldr	r3, [pc, #52]	; (800520c <HAL_RCC_GetSysClockFreq+0x458>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	0f1b      	lsrs	r3, r3, #28
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80051e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80051f2:	e003      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051f4:	4b06      	ldr	r3, [pc, #24]	; (8005210 <HAL_RCC_GetSysClockFreq+0x45c>)
 80051f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80051fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005200:	4618      	mov	r0, r3
 8005202:	37b8      	adds	r7, #184	; 0xb8
 8005204:	46bd      	mov	sp, r7
 8005206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520a:	bf00      	nop
 800520c:	40023800 	.word	0x40023800
 8005210:	00f42400 	.word	0x00f42400

08005214 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e28d      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8083 	beq.w	800533a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005234:	4b94      	ldr	r3, [pc, #592]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 030c 	and.w	r3, r3, #12
 800523c:	2b04      	cmp	r3, #4
 800523e:	d019      	beq.n	8005274 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005240:	4b91      	ldr	r3, [pc, #580]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005248:	2b08      	cmp	r3, #8
 800524a:	d106      	bne.n	800525a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800524c:	4b8e      	ldr	r3, [pc, #568]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005258:	d00c      	beq.n	8005274 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800525a:	4b8b      	ldr	r3, [pc, #556]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005262:	2b0c      	cmp	r3, #12
 8005264:	d112      	bne.n	800528c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005266:	4b88      	ldr	r3, [pc, #544]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005272:	d10b      	bne.n	800528c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005274:	4b84      	ldr	r3, [pc, #528]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d05b      	beq.n	8005338 <HAL_RCC_OscConfig+0x124>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d157      	bne.n	8005338 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e25a      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005294:	d106      	bne.n	80052a4 <HAL_RCC_OscConfig+0x90>
 8005296:	4b7c      	ldr	r3, [pc, #496]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a7b      	ldr	r2, [pc, #492]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 800529c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e01d      	b.n	80052e0 <HAL_RCC_OscConfig+0xcc>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ac:	d10c      	bne.n	80052c8 <HAL_RCC_OscConfig+0xb4>
 80052ae:	4b76      	ldr	r3, [pc, #472]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a75      	ldr	r2, [pc, #468]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 80052b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	4b73      	ldr	r3, [pc, #460]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a72      	ldr	r2, [pc, #456]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 80052c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	e00b      	b.n	80052e0 <HAL_RCC_OscConfig+0xcc>
 80052c8:	4b6f      	ldr	r3, [pc, #444]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a6e      	ldr	r2, [pc, #440]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 80052ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	4b6c      	ldr	r3, [pc, #432]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a6b      	ldr	r2, [pc, #428]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 80052da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d013      	beq.n	8005310 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fc fcee 	bl	8001cc8 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f0:	f7fc fcea 	bl	8001cc8 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	; 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e21f      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005302:	4b61      	ldr	r3, [pc, #388]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0xdc>
 800530e:	e014      	b.n	800533a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005310:	f7fc fcda 	bl	8001cc8 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005318:	f7fc fcd6 	bl	8001cc8 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b64      	cmp	r3, #100	; 0x64
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e20b      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800532a:	4b57      	ldr	r3, [pc, #348]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x104>
 8005336:	e000      	b.n	800533a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d06f      	beq.n	8005426 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005346:	4b50      	ldr	r3, [pc, #320]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	2b00      	cmp	r3, #0
 8005350:	d017      	beq.n	8005382 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005352:	4b4d      	ldr	r3, [pc, #308]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800535a:	2b08      	cmp	r3, #8
 800535c:	d105      	bne.n	800536a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800535e:	4b4a      	ldr	r3, [pc, #296]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00b      	beq.n	8005382 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800536a:	4b47      	ldr	r3, [pc, #284]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005372:	2b0c      	cmp	r3, #12
 8005374:	d11c      	bne.n	80053b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005376:	4b44      	ldr	r3, [pc, #272]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d116      	bne.n	80053b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005382:	4b41      	ldr	r3, [pc, #260]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <HAL_RCC_OscConfig+0x186>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d001      	beq.n	800539a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e1d3      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800539a:	4b3b      	ldr	r3, [pc, #236]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4937      	ldr	r1, [pc, #220]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ae:	e03a      	b.n	8005426 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d020      	beq.n	80053fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053b8:	4b34      	ldr	r3, [pc, #208]	; (800548c <HAL_RCC_OscConfig+0x278>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053be:	f7fc fc83 	bl	8001cc8 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c6:	f7fc fc7f 	bl	8001cc8 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e1b4      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d8:	4b2b      	ldr	r3, [pc, #172]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e4:	4b28      	ldr	r3, [pc, #160]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4925      	ldr	r1, [pc, #148]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	600b      	str	r3, [r1, #0]
 80053f8:	e015      	b.n	8005426 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053fa:	4b24      	ldr	r3, [pc, #144]	; (800548c <HAL_RCC_OscConfig+0x278>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005400:	f7fc fc62 	bl	8001cc8 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005408:	f7fc fc5e 	bl	8001cc8 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e193      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800541a:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d036      	beq.n	80054a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800543a:	4b15      	ldr	r3, [pc, #84]	; (8005490 <HAL_RCC_OscConfig+0x27c>)
 800543c:	2201      	movs	r2, #1
 800543e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005440:	f7fc fc42 	bl	8001cc8 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005448:	f7fc fc3e 	bl	8001cc8 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e173      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 800545c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCC_OscConfig+0x234>
 8005466:	e01b      	b.n	80054a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <HAL_RCC_OscConfig+0x27c>)
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546e:	f7fc fc2b 	bl	8001cc8 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005474:	e00e      	b.n	8005494 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005476:	f7fc fc27 	bl	8001cc8 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d907      	bls.n	8005494 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e15c      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
 8005488:	40023800 	.word	0x40023800
 800548c:	42470000 	.word	0x42470000
 8005490:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005494:	4b8a      	ldr	r3, [pc, #552]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 8005496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1ea      	bne.n	8005476 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8097 	beq.w	80055dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ae:	2300      	movs	r3, #0
 80054b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b2:	4b83      	ldr	r3, [pc, #524]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10f      	bne.n	80054de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054be:	2300      	movs	r3, #0
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	4b7f      	ldr	r3, [pc, #508]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	4a7e      	ldr	r2, [pc, #504]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 80054c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054cc:	6413      	str	r3, [r2, #64]	; 0x40
 80054ce:	4b7c      	ldr	r3, [pc, #496]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d6:	60bb      	str	r3, [r7, #8]
 80054d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054de:	4b79      	ldr	r3, [pc, #484]	; (80056c4 <HAL_RCC_OscConfig+0x4b0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d118      	bne.n	800551c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ea:	4b76      	ldr	r3, [pc, #472]	; (80056c4 <HAL_RCC_OscConfig+0x4b0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a75      	ldr	r2, [pc, #468]	; (80056c4 <HAL_RCC_OscConfig+0x4b0>)
 80054f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f6:	f7fc fbe7 	bl	8001cc8 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fe:	f7fc fbe3 	bl	8001cc8 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e118      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	4b6c      	ldr	r3, [pc, #432]	; (80056c4 <HAL_RCC_OscConfig+0x4b0>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d106      	bne.n	8005532 <HAL_RCC_OscConfig+0x31e>
 8005524:	4b66      	ldr	r3, [pc, #408]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	4a65      	ldr	r2, [pc, #404]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	6713      	str	r3, [r2, #112]	; 0x70
 8005530:	e01c      	b.n	800556c <HAL_RCC_OscConfig+0x358>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b05      	cmp	r3, #5
 8005538:	d10c      	bne.n	8005554 <HAL_RCC_OscConfig+0x340>
 800553a:	4b61      	ldr	r3, [pc, #388]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553e:	4a60      	ldr	r2, [pc, #384]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 8005540:	f043 0304 	orr.w	r3, r3, #4
 8005544:	6713      	str	r3, [r2, #112]	; 0x70
 8005546:	4b5e      	ldr	r3, [pc, #376]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	4a5d      	ldr	r2, [pc, #372]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	6713      	str	r3, [r2, #112]	; 0x70
 8005552:	e00b      	b.n	800556c <HAL_RCC_OscConfig+0x358>
 8005554:	4b5a      	ldr	r3, [pc, #360]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 8005556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005558:	4a59      	ldr	r2, [pc, #356]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 800555a:	f023 0301 	bic.w	r3, r3, #1
 800555e:	6713      	str	r3, [r2, #112]	; 0x70
 8005560:	4b57      	ldr	r3, [pc, #348]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	4a56      	ldr	r2, [pc, #344]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 8005566:	f023 0304 	bic.w	r3, r3, #4
 800556a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d015      	beq.n	80055a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005574:	f7fc fba8 	bl	8001cc8 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800557a:	e00a      	b.n	8005592 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800557c:	f7fc fba4 	bl	8001cc8 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	f241 3288 	movw	r2, #5000	; 0x1388
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e0d7      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005592:	4b4b      	ldr	r3, [pc, #300]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0ee      	beq.n	800557c <HAL_RCC_OscConfig+0x368>
 800559e:	e014      	b.n	80055ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a0:	f7fc fb92 	bl	8001cc8 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055a6:	e00a      	b.n	80055be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a8:	f7fc fb8e 	bl	8001cc8 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e0c1      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055be:	4b40      	ldr	r3, [pc, #256]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1ee      	bne.n	80055a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d105      	bne.n	80055dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d0:	4b3b      	ldr	r3, [pc, #236]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	4a3a      	ldr	r2, [pc, #232]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 80055d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80ad 	beq.w	8005740 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055e6:	4b36      	ldr	r3, [pc, #216]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d060      	beq.n	80056b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d145      	bne.n	8005686 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055fa:	4b33      	ldr	r3, [pc, #204]	; (80056c8 <HAL_RCC_OscConfig+0x4b4>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005600:	f7fc fb62 	bl	8001cc8 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005608:	f7fc fb5e 	bl	8001cc8 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e093      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561a:	4b29      	ldr	r3, [pc, #164]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69da      	ldr	r2, [r3, #28]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	019b      	lsls	r3, r3, #6
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	3b01      	subs	r3, #1
 8005640:	041b      	lsls	r3, r3, #16
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	061b      	lsls	r3, r3, #24
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	071b      	lsls	r3, r3, #28
 8005652:	491b      	ldr	r1, [pc, #108]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 8005654:	4313      	orrs	r3, r2
 8005656:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005658:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <HAL_RCC_OscConfig+0x4b4>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565e:	f7fc fb33 	bl	8001cc8 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005666:	f7fc fb2f 	bl	8001cc8 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e064      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005678:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x452>
 8005684:	e05c      	b.n	8005740 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005686:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <HAL_RCC_OscConfig+0x4b4>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fc fb1c 	bl	8001cc8 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005694:	f7fc fb18 	bl	8001cc8 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e04d      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a6:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <HAL_RCC_OscConfig+0x4ac>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0x480>
 80056b2:	e045      	b.n	8005740 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d107      	bne.n	80056cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e040      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
 80056c0:	40023800 	.word	0x40023800
 80056c4:	40007000 	.word	0x40007000
 80056c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056cc:	4b1f      	ldr	r3, [pc, #124]	; (800574c <HAL_RCC_OscConfig+0x538>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d030      	beq.n	800573c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d129      	bne.n	800573c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d122      	bne.n	800573c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056fc:	4013      	ands	r3, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005704:	4293      	cmp	r3, r2
 8005706:	d119      	bne.n	800573c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	085b      	lsrs	r3, r3, #1
 8005714:	3b01      	subs	r3, #1
 8005716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005718:	429a      	cmp	r2, r3
 800571a:	d10f      	bne.n	800573c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005728:	429a      	cmp	r2, r3
 800572a:	d107      	bne.n	800573c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005736:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005738:	429a      	cmp	r2, r3
 800573a:	d001      	beq.n	8005740 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800

08005750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e041      	b.n	80057e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f839 	bl	80057ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f000 f9d8 	bl	8005b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d001      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e04e      	b.n	80058ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a23      	ldr	r2, [pc, #140]	; (80058c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d022      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005846:	d01d      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1f      	ldr	r2, [pc, #124]	; (80058cc <HAL_TIM_Base_Start_IT+0xc8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d018      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a1e      	ldr	r2, [pc, #120]	; (80058d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1c      	ldr	r2, [pc, #112]	; (80058d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00e      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1b      	ldr	r2, [pc, #108]	; (80058d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d009      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a19      	ldr	r2, [pc, #100]	; (80058dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a18      	ldr	r2, [pc, #96]	; (80058e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d111      	bne.n	80058a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b06      	cmp	r3, #6
 8005894:	d010      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a6:	e007      	b.n	80058b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40010000 	.word	0x40010000
 80058cc:	40000400 	.word	0x40000400
 80058d0:	40000800 	.word	0x40000800
 80058d4:	40000c00 	.word	0x40000c00
 80058d8:	40010400 	.word	0x40010400
 80058dc:	40014000 	.word	0x40014000
 80058e0:	40001800 	.word	0x40001800

080058e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d122      	bne.n	8005940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b02      	cmp	r3, #2
 8005906:	d11b      	bne.n	8005940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0202 	mvn.w	r2, #2
 8005910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f8ee 	bl	8005b08 <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f8e0 	bl	8005af4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f8f1 	bl	8005b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b04      	cmp	r3, #4
 800594c:	d122      	bne.n	8005994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b04      	cmp	r3, #4
 800595a:	d11b      	bne.n	8005994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0204 	mvn.w	r2, #4
 8005964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f8c4 	bl	8005b08 <HAL_TIM_IC_CaptureCallback>
 8005980:	e005      	b.n	800598e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f8b6 	bl	8005af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f8c7 	bl	8005b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d122      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d11b      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0208 	mvn.w	r2, #8
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f89a 	bl	8005b08 <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f88c 	bl	8005af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f89d 	bl	8005b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b10      	cmp	r3, #16
 80059f4:	d122      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d11b      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0210 	mvn.w	r2, #16
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2208      	movs	r2, #8
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f870 	bl	8005b08 <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f862 	bl	8005af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f873 	bl	8005b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d10e      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d107      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0201 	mvn.w	r2, #1
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fb f9ba 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d10e      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a80:	2b80      	cmp	r3, #128	; 0x80
 8005a82:	d107      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f902 	bl	8005c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d10e      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d107      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f838 	bl	8005b30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d10e      	bne.n	8005aec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d107      	bne.n	8005aec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0220 	mvn.w	r2, #32
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8cc 	bl	8005c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aec:	bf00      	nop
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a40      	ldr	r2, [pc, #256]	; (8005c58 <TIM_Base_SetConfig+0x114>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b62:	d00f      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a3d      	ldr	r2, [pc, #244]	; (8005c5c <TIM_Base_SetConfig+0x118>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3c      	ldr	r2, [pc, #240]	; (8005c60 <TIM_Base_SetConfig+0x11c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d007      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a3b      	ldr	r2, [pc, #236]	; (8005c64 <TIM_Base_SetConfig+0x120>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a3a      	ldr	r2, [pc, #232]	; (8005c68 <TIM_Base_SetConfig+0x124>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d108      	bne.n	8005b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2f      	ldr	r2, [pc, #188]	; (8005c58 <TIM_Base_SetConfig+0x114>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d02b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba4:	d027      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a2c      	ldr	r2, [pc, #176]	; (8005c5c <TIM_Base_SetConfig+0x118>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d023      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2b      	ldr	r2, [pc, #172]	; (8005c60 <TIM_Base_SetConfig+0x11c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01f      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2a      	ldr	r2, [pc, #168]	; (8005c64 <TIM_Base_SetConfig+0x120>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a29      	ldr	r2, [pc, #164]	; (8005c68 <TIM_Base_SetConfig+0x124>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d017      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a28      	ldr	r2, [pc, #160]	; (8005c6c <TIM_Base_SetConfig+0x128>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a27      	ldr	r2, [pc, #156]	; (8005c70 <TIM_Base_SetConfig+0x12c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a26      	ldr	r2, [pc, #152]	; (8005c74 <TIM_Base_SetConfig+0x130>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a25      	ldr	r2, [pc, #148]	; (8005c78 <TIM_Base_SetConfig+0x134>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a24      	ldr	r2, [pc, #144]	; (8005c7c <TIM_Base_SetConfig+0x138>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a23      	ldr	r2, [pc, #140]	; (8005c80 <TIM_Base_SetConfig+0x13c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d108      	bne.n	8005c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a0a      	ldr	r2, [pc, #40]	; (8005c58 <TIM_Base_SetConfig+0x114>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_Base_SetConfig+0xf8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a0c      	ldr	r2, [pc, #48]	; (8005c68 <TIM_Base_SetConfig+0x124>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d103      	bne.n	8005c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	615a      	str	r2, [r3, #20]
}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40000800 	.word	0x40000800
 8005c64:	40000c00 	.word	0x40000c00
 8005c68:	40010400 	.word	0x40010400
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	40014400 	.word	0x40014400
 8005c74:	40014800 	.word	0x40014800
 8005c78:	40001800 	.word	0x40001800
 8005c7c:	40001c00 	.word	0x40001c00
 8005c80:	40002000 	.word	0x40002000

08005c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e03f      	b.n	8005d3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fb fa4a 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2224      	movs	r2, #36	; 0x24
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fddf 	bl	80068b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695a      	ldr	r2, [r3, #20]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b08a      	sub	sp, #40	; 0x28
 8005d4a:	af02      	add	r7, sp, #8
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	603b      	str	r3, [r7, #0]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d17c      	bne.n	8005e60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <HAL_UART_Transmit+0x2c>
 8005d6c:	88fb      	ldrh	r3, [r7, #6]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e075      	b.n	8005e62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_UART_Transmit+0x3e>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e06e      	b.n	8005e62 <HAL_UART_Transmit+0x11c>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2221      	movs	r2, #33	; 0x21
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d9a:	f7fb ff95 	bl	8001cc8 <HAL_GetTick>
 8005d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	88fa      	ldrh	r2, [r7, #6]
 8005da4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	88fa      	ldrh	r2, [r7, #6]
 8005daa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db4:	d108      	bne.n	8005dc8 <HAL_UART_Transmit+0x82>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d104      	bne.n	8005dc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	e003      	b.n	8005dd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005dd8:	e02a      	b.n	8005e30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2200      	movs	r2, #0
 8005de2:	2180      	movs	r1, #128	; 0x80
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fb1f 	bl	8006428 <UART_WaitOnFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e036      	b.n	8005e62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10b      	bne.n	8005e12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	e007      	b.n	8005e22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	781a      	ldrb	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1cf      	bne.n	8005dda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2200      	movs	r2, #0
 8005e42:	2140      	movs	r1, #64	; 0x40
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 faef 	bl	8006428 <UART_WaitOnFlagUntilTimeout>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e006      	b.n	8005e62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e000      	b.n	8005e62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e60:	2302      	movs	r3, #2
  }
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3720      	adds	r7, #32
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	4613      	mov	r3, r2
 8005e76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d11d      	bne.n	8005ec0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_UART_Receive_IT+0x26>
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e016      	b.n	8005ec2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_UART_Receive_IT+0x38>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e00f      	b.n	8005ec2 <HAL_UART_Receive_IT+0x58>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005eb0:	88fb      	ldrh	r3, [r7, #6]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 fb24 	bl	8006504 <UART_Start_Receive_IT>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	e000      	b.n	8005ec2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ec0:	2302      	movs	r3, #2
  }
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b0ba      	sub	sp, #232	; 0xe8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10f      	bne.n	8005f32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d009      	beq.n	8005f32 <HAL_UART_IRQHandler+0x66>
 8005f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fc07 	bl	800673e <UART_Receive_IT>
      return;
 8005f30:	e256      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 80de 	beq.w	80060f8 <HAL_UART_IRQHandler+0x22c>
 8005f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80d1 	beq.w	80060f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <HAL_UART_IRQHandler+0xae>
 8005f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f043 0201 	orr.w	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <HAL_UART_IRQHandler+0xd2>
 8005f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f043 0202 	orr.w	r2, r3, #2
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00b      	beq.n	8005fc2 <HAL_UART_IRQHandler+0xf6>
 8005faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f043 0204 	orr.w	r2, r3, #4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d011      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x126>
 8005fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d105      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f043 0208 	orr.w	r2, r3, #8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 81ed 	beq.w	80063d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <HAL_UART_IRQHandler+0x14e>
 8006008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fb92 	bl	800673e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	bf0c      	ite	eq
 8006028:	2301      	moveq	r3, #1
 800602a:	2300      	movne	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <HAL_UART_IRQHandler+0x17a>
 800603e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d04f      	beq.n	80060e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa9a 	bl	8006580 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d141      	bne.n	80060de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3314      	adds	r3, #20
 8006060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3314      	adds	r3, #20
 8006082:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006086:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800608a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006092:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800609e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1d9      	bne.n	800605a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d013      	beq.n	80060d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	4a7d      	ldr	r2, [pc, #500]	; (80062a8 <HAL_UART_IRQHandler+0x3dc>)
 80060b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fb ff62 	bl	8001f84 <HAL_DMA_Abort_IT>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d016      	beq.n	80060f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060d0:	4610      	mov	r0, r2
 80060d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d4:	e00e      	b.n	80060f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f990 	bl	80063fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060dc:	e00a      	b.n	80060f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f98c 	bl	80063fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e4:	e006      	b.n	80060f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f988 	bl	80063fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060f2:	e170      	b.n	80063d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f4:	bf00      	nop
    return;
 80060f6:	e16e      	b.n	80063d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	f040 814a 	bne.w	8006396 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8143 	beq.w	8006396 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 813c 	beq.w	8006396 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800611e:	2300      	movs	r3, #0
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60bb      	str	r3, [r7, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	f040 80b4 	bne.w	80062ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006150:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8140 	beq.w	80063da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800615e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006162:	429a      	cmp	r2, r3
 8006164:	f080 8139 	bcs.w	80063da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800616e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617a:	f000 8088 	beq.w	800628e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	330c      	adds	r3, #12
 8006184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800619c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	330c      	adds	r3, #12
 80061a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1d9      	bne.n	800617e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3314      	adds	r3, #20
 80061d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3314      	adds	r3, #20
 80061ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e1      	bne.n	80061ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3314      	adds	r3, #20
 800620c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3314      	adds	r3, #20
 8006226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800622a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800622c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800625c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800625e:	f023 0310 	bic.w	r3, r3, #16
 8006262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	330c      	adds	r3, #12
 800626c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006270:	65ba      	str	r2, [r7, #88]	; 0x58
 8006272:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800627e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e3      	bne.n	800624c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	4618      	mov	r0, r3
 800628a:	f7fb fe0b 	bl	8001ea4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006296:	b29b      	uxth	r3, r3
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	b29b      	uxth	r3, r3
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f8b6 	bl	8006410 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062a4:	e099      	b.n	80063da <HAL_UART_IRQHandler+0x50e>
 80062a6:	bf00      	nop
 80062a8:	08006647 	.word	0x08006647
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 808b 	beq.w	80063de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80062c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8086 	beq.w	80063de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	330c      	adds	r3, #12
 80062d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062f6:	647a      	str	r2, [r7, #68]	; 0x44
 80062f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e3      	bne.n	80062d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3314      	adds	r3, #20
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	623b      	str	r3, [r7, #32]
   return(result);
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3314      	adds	r3, #20
 800632a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800632e:	633a      	str	r2, [r7, #48]	; 0x30
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e3      	bne.n	800630a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0310 	bic.w	r3, r3, #16
 8006366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006374:	61fa      	str	r2, [r7, #28]
 8006376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	69b9      	ldr	r1, [r7, #24]
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	617b      	str	r3, [r7, #20]
   return(result);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e3      	bne.n	8006350 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f83e 	bl	8006410 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006394:	e023      	b.n	80063de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <HAL_UART_IRQHandler+0x4ea>
 80063a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f95d 	bl	800666e <UART_Transmit_IT>
    return;
 80063b4:	e014      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <HAL_UART_IRQHandler+0x514>
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d008      	beq.n	80063e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f99d 	bl	800670e <UART_EndTransmit_IT>
    return;
 80063d4:	e004      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
    return;
 80063d6:	bf00      	nop
 80063d8:	e002      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
      return;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
      return;
 80063de:	bf00      	nop
  }
}
 80063e0:	37e8      	adds	r7, #232	; 0xe8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop

080063e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b090      	sub	sp, #64	; 0x40
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	4613      	mov	r3, r2
 8006436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006438:	e050      	b.n	80064dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800643a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d04c      	beq.n	80064dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006444:	2b00      	cmp	r3, #0
 8006446:	d007      	beq.n	8006458 <UART_WaitOnFlagUntilTimeout+0x30>
 8006448:	f7fb fc3e 	bl	8001cc8 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006454:	429a      	cmp	r2, r3
 8006456:	d241      	bcs.n	80064dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	330c      	adds	r3, #12
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	330c      	adds	r3, #12
 8006476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006478:	637a      	str	r2, [r7, #52]	; 0x34
 800647a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800647e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e5      	bne.n	8006458 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3314      	adds	r3, #20
 8006492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	613b      	str	r3, [r7, #16]
   return(result);
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f023 0301 	bic.w	r3, r3, #1
 80064a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3314      	adds	r3, #20
 80064aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ac:	623a      	str	r2, [r7, #32]
 80064ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	69f9      	ldr	r1, [r7, #28]
 80064b2:	6a3a      	ldr	r2, [r7, #32]
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e5      	bne.n	800648c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e00f      	b.n	80064fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	4013      	ands	r3, r2
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	bf0c      	ite	eq
 80064ec:	2301      	moveq	r3, #1
 80064ee:	2300      	movne	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	461a      	mov	r2, r3
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d09f      	beq.n	800643a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3740      	adds	r7, #64	; 0x40
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	88fa      	ldrh	r2, [r7, #6]
 800651c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	88fa      	ldrh	r2, [r7, #6]
 8006522:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2222      	movs	r2, #34	; 0x22
 800652e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006550:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695a      	ldr	r2, [r3, #20]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0201 	orr.w	r2, r2, #1
 8006560:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0220 	orr.w	r2, r2, #32
 8006570:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b095      	sub	sp, #84	; 0x54
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	330c      	adds	r3, #12
 800658e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800659e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	330c      	adds	r3, #12
 80065a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065a8:	643a      	str	r2, [r7, #64]	; 0x40
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e5      	bne.n	8006588 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3314      	adds	r3, #20
 80065c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f023 0301 	bic.w	r3, r3, #1
 80065d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3314      	adds	r3, #20
 80065da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e5      	bne.n	80065bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d119      	bne.n	800662c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	330c      	adds	r3, #12
 80065fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	60bb      	str	r3, [r7, #8]
   return(result);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f023 0310 	bic.w	r3, r3, #16
 800660e:	647b      	str	r3, [r7, #68]	; 0x44
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006618:	61ba      	str	r2, [r7, #24]
 800661a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6979      	ldr	r1, [r7, #20]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	613b      	str	r3, [r7, #16]
   return(result);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e5      	bne.n	80065f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	631a      	str	r2, [r3, #48]	; 0x30
}
 800663a:	bf00      	nop
 800663c:	3754      	adds	r7, #84	; 0x54
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7ff fecb 	bl	80063fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006666:	bf00      	nop
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b21      	cmp	r3, #33	; 0x21
 8006680:	d13e      	bne.n	8006700 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668a:	d114      	bne.n	80066b6 <UART_Transmit_IT+0x48>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d110      	bne.n	80066b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	1c9a      	adds	r2, r3, #2
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	621a      	str	r2, [r3, #32]
 80066b4:	e008      	b.n	80066c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	1c59      	adds	r1, r3, #1
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6211      	str	r1, [r2, #32]
 80066c0:	781a      	ldrb	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	4619      	mov	r1, r3
 80066d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10f      	bne.n	80066fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e000      	b.n	8006702 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006700:	2302      	movs	r3, #2
  }
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006724:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff fe5a 	bl	80063e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b08c      	sub	sp, #48	; 0x30
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b22      	cmp	r3, #34	; 0x22
 8006750:	f040 80ab 	bne.w	80068aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675c:	d117      	bne.n	800678e <UART_Receive_IT+0x50>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d113      	bne.n	800678e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006766:	2300      	movs	r3, #0
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	b29b      	uxth	r3, r3
 8006778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677c:	b29a      	uxth	r2, r3
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006786:	1c9a      	adds	r2, r3, #2
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	629a      	str	r2, [r3, #40]	; 0x28
 800678c:	e026      	b.n	80067dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006794:	2300      	movs	r3, #0
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a0:	d007      	beq.n	80067b2 <UART_Receive_IT+0x74>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10a      	bne.n	80067c0 <UART_Receive_IT+0x82>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	e008      	b.n	80067d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4619      	mov	r1, r3
 80067ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d15a      	bne.n	80068a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0220 	bic.w	r2, r2, #32
 80067fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800680e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0201 	bic.w	r2, r2, #1
 800681e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682c:	2b01      	cmp	r3, #1
 800682e:	d135      	bne.n	800689c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	330c      	adds	r3, #12
 800683c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	e853 3f00 	ldrex	r3, [r3]
 8006844:	613b      	str	r3, [r7, #16]
   return(result);
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f023 0310 	bic.w	r3, r3, #16
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	330c      	adds	r3, #12
 8006854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006856:	623a      	str	r2, [r7, #32]
 8006858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	69f9      	ldr	r1, [r7, #28]
 800685c:	6a3a      	ldr	r2, [r7, #32]
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	61bb      	str	r3, [r7, #24]
   return(result);
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1e5      	bne.n	8006836 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	2b10      	cmp	r3, #16
 8006876:	d10a      	bne.n	800688e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff fdbb 	bl	8006410 <HAL_UARTEx_RxEventCallback>
 800689a:	e002      	b.n	80068a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7fa fa49 	bl	8000d34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e002      	b.n	80068ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	e000      	b.n	80068ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80068aa:	2302      	movs	r3, #2
  }
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3730      	adds	r7, #48	; 0x30
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b8:	b0c0      	sub	sp, #256	; 0x100
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d0:	68d9      	ldr	r1, [r3, #12]
 80068d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	ea40 0301 	orr.w	r3, r0, r1
 80068dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800690c:	f021 010c 	bic.w	r1, r1, #12
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800691a:	430b      	orrs	r3, r1
 800691c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800691e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692e:	6999      	ldr	r1, [r3, #24]
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	ea40 0301 	orr.w	r3, r0, r1
 800693a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4b8f      	ldr	r3, [pc, #572]	; (8006b80 <UART_SetConfig+0x2cc>)
 8006944:	429a      	cmp	r2, r3
 8006946:	d005      	beq.n	8006954 <UART_SetConfig+0xa0>
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4b8d      	ldr	r3, [pc, #564]	; (8006b84 <UART_SetConfig+0x2d0>)
 8006950:	429a      	cmp	r2, r3
 8006952:	d104      	bne.n	800695e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006954:	f7fe f9e8 	bl	8004d28 <HAL_RCC_GetPCLK2Freq>
 8006958:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800695c:	e003      	b.n	8006966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800695e:	f7fe f9cf 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8006962:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006970:	f040 810c 	bne.w	8006b8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006978:	2200      	movs	r2, #0
 800697a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800697e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006986:	4622      	mov	r2, r4
 8006988:	462b      	mov	r3, r5
 800698a:	1891      	adds	r1, r2, r2
 800698c:	65b9      	str	r1, [r7, #88]	; 0x58
 800698e:	415b      	adcs	r3, r3
 8006990:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006996:	4621      	mov	r1, r4
 8006998:	eb12 0801 	adds.w	r8, r2, r1
 800699c:	4629      	mov	r1, r5
 800699e:	eb43 0901 	adc.w	r9, r3, r1
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069b6:	4690      	mov	r8, r2
 80069b8:	4699      	mov	r9, r3
 80069ba:	4623      	mov	r3, r4
 80069bc:	eb18 0303 	adds.w	r3, r8, r3
 80069c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069c4:	462b      	mov	r3, r5
 80069c6:	eb49 0303 	adc.w	r3, r9, r3
 80069ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80069e2:	460b      	mov	r3, r1
 80069e4:	18db      	adds	r3, r3, r3
 80069e6:	653b      	str	r3, [r7, #80]	; 0x50
 80069e8:	4613      	mov	r3, r2
 80069ea:	eb42 0303 	adc.w	r3, r2, r3
 80069ee:	657b      	str	r3, [r7, #84]	; 0x54
 80069f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80069f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80069f8:	f7f9 fc72 	bl	80002e0 <__aeabi_uldivmod>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4b61      	ldr	r3, [pc, #388]	; (8006b88 <UART_SetConfig+0x2d4>)
 8006a02:	fba3 2302 	umull	r2, r3, r3, r2
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	011c      	lsls	r4, r3, #4
 8006a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	464b      	mov	r3, r9
 8006a20:	1891      	adds	r1, r2, r2
 8006a22:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a24:	415b      	adcs	r3, r3
 8006a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a2c:	4641      	mov	r1, r8
 8006a2e:	eb12 0a01 	adds.w	sl, r2, r1
 8006a32:	4649      	mov	r1, r9
 8006a34:	eb43 0b01 	adc.w	fp, r3, r1
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a4c:	4692      	mov	sl, r2
 8006a4e:	469b      	mov	fp, r3
 8006a50:	4643      	mov	r3, r8
 8006a52:	eb1a 0303 	adds.w	r3, sl, r3
 8006a56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8006a60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	18db      	adds	r3, r3, r3
 8006a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a7e:	4613      	mov	r3, r2
 8006a80:	eb42 0303 	adc.w	r3, r2, r3
 8006a84:	647b      	str	r3, [r7, #68]	; 0x44
 8006a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a8e:	f7f9 fc27 	bl	80002e0 <__aeabi_uldivmod>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4611      	mov	r1, r2
 8006a98:	4b3b      	ldr	r3, [pc, #236]	; (8006b88 <UART_SetConfig+0x2d4>)
 8006a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8006a9e:	095b      	lsrs	r3, r3, #5
 8006aa0:	2264      	movs	r2, #100	; 0x64
 8006aa2:	fb02 f303 	mul.w	r3, r2, r3
 8006aa6:	1acb      	subs	r3, r1, r3
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006aae:	4b36      	ldr	r3, [pc, #216]	; (8006b88 <UART_SetConfig+0x2d4>)
 8006ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ab4:	095b      	lsrs	r3, r3, #5
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006abc:	441c      	add	r4, r3
 8006abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ac8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006acc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	1891      	adds	r1, r2, r2
 8006ad6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ad8:	415b      	adcs	r3, r3
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	1851      	adds	r1, r2, r1
 8006ae4:	6339      	str	r1, [r7, #48]	; 0x30
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	414b      	adcs	r3, r1
 8006aea:	637b      	str	r3, [r7, #52]	; 0x34
 8006aec:	f04f 0200 	mov.w	r2, #0
 8006af0:	f04f 0300 	mov.w	r3, #0
 8006af4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006af8:	4659      	mov	r1, fp
 8006afa:	00cb      	lsls	r3, r1, #3
 8006afc:	4651      	mov	r1, sl
 8006afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b02:	4651      	mov	r1, sl
 8006b04:	00ca      	lsls	r2, r1, #3
 8006b06:	4610      	mov	r0, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	189b      	adds	r3, r3, r2
 8006b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b14:	464b      	mov	r3, r9
 8006b16:	460a      	mov	r2, r1
 8006b18:	eb42 0303 	adc.w	r3, r2, r3
 8006b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b34:	460b      	mov	r3, r1
 8006b36:	18db      	adds	r3, r3, r3
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	eb42 0303 	adc.w	r3, r2, r3
 8006b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b4a:	f7f9 fbc9 	bl	80002e0 <__aeabi_uldivmod>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <UART_SetConfig+0x2d4>)
 8006b54:	fba3 1302 	umull	r1, r3, r3, r2
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	2164      	movs	r1, #100	; 0x64
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	3332      	adds	r3, #50	; 0x32
 8006b66:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <UART_SetConfig+0x2d4>)
 8006b68:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	f003 0207 	and.w	r2, r3, #7
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4422      	add	r2, r4
 8006b7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b7c:	e105      	b.n	8006d8a <UART_SetConfig+0x4d6>
 8006b7e:	bf00      	nop
 8006b80:	40011000 	.word	0x40011000
 8006b84:	40011400 	.word	0x40011400
 8006b88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	1891      	adds	r1, r2, r2
 8006ba4:	6239      	str	r1, [r7, #32]
 8006ba6:	415b      	adcs	r3, r3
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8006baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bae:	4641      	mov	r1, r8
 8006bb0:	1854      	adds	r4, r2, r1
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	eb43 0501 	adc.w	r5, r3, r1
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	00eb      	lsls	r3, r5, #3
 8006bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bc6:	00e2      	lsls	r2, r4, #3
 8006bc8:	4614      	mov	r4, r2
 8006bca:	461d      	mov	r5, r3
 8006bcc:	4643      	mov	r3, r8
 8006bce:	18e3      	adds	r3, r4, r3
 8006bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	eb45 0303 	adc.w	r3, r5, r3
 8006bda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bee:	f04f 0200 	mov.w	r2, #0
 8006bf2:	f04f 0300 	mov.w	r3, #0
 8006bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	008b      	lsls	r3, r1, #2
 8006bfe:	4621      	mov	r1, r4
 8006c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c04:	4621      	mov	r1, r4
 8006c06:	008a      	lsls	r2, r1, #2
 8006c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c0c:	f7f9 fb68 	bl	80002e0 <__aeabi_uldivmod>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4b60      	ldr	r3, [pc, #384]	; (8006d98 <UART_SetConfig+0x4e4>)
 8006c16:	fba3 2302 	umull	r2, r3, r3, r2
 8006c1a:	095b      	lsrs	r3, r3, #5
 8006c1c:	011c      	lsls	r4, r3, #4
 8006c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c30:	4642      	mov	r2, r8
 8006c32:	464b      	mov	r3, r9
 8006c34:	1891      	adds	r1, r2, r2
 8006c36:	61b9      	str	r1, [r7, #24]
 8006c38:	415b      	adcs	r3, r3
 8006c3a:	61fb      	str	r3, [r7, #28]
 8006c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c40:	4641      	mov	r1, r8
 8006c42:	1851      	adds	r1, r2, r1
 8006c44:	6139      	str	r1, [r7, #16]
 8006c46:	4649      	mov	r1, r9
 8006c48:	414b      	adcs	r3, r1
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c58:	4659      	mov	r1, fp
 8006c5a:	00cb      	lsls	r3, r1, #3
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c62:	4651      	mov	r1, sl
 8006c64:	00ca      	lsls	r2, r1, #3
 8006c66:	4610      	mov	r0, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	189b      	adds	r3, r3, r2
 8006c70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c74:	464b      	mov	r3, r9
 8006c76:	460a      	mov	r2, r1
 8006c78:	eb42 0303 	adc.w	r3, r2, r3
 8006c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c98:	4649      	mov	r1, r9
 8006c9a:	008b      	lsls	r3, r1, #2
 8006c9c:	4641      	mov	r1, r8
 8006c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ca2:	4641      	mov	r1, r8
 8006ca4:	008a      	lsls	r2, r1, #2
 8006ca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006caa:	f7f9 fb19 	bl	80002e0 <__aeabi_uldivmod>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4b39      	ldr	r3, [pc, #228]	; (8006d98 <UART_SetConfig+0x4e4>)
 8006cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb8:	095b      	lsrs	r3, r3, #5
 8006cba:	2164      	movs	r1, #100	; 0x64
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	3332      	adds	r3, #50	; 0x32
 8006cc6:	4a34      	ldr	r2, [pc, #208]	; (8006d98 <UART_SetConfig+0x4e4>)
 8006cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cd2:	441c      	add	r4, r3
 8006cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd8:	2200      	movs	r2, #0
 8006cda:	673b      	str	r3, [r7, #112]	; 0x70
 8006cdc:	677a      	str	r2, [r7, #116]	; 0x74
 8006cde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ce2:	4642      	mov	r2, r8
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	1891      	adds	r1, r2, r2
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	415b      	adcs	r3, r3
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cf2:	4641      	mov	r1, r8
 8006cf4:	1851      	adds	r1, r2, r1
 8006cf6:	6039      	str	r1, [r7, #0]
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	414b      	adcs	r3, r1
 8006cfc:	607b      	str	r3, [r7, #4]
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d0a:	4659      	mov	r1, fp
 8006d0c:	00cb      	lsls	r3, r1, #3
 8006d0e:	4651      	mov	r1, sl
 8006d10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d14:	4651      	mov	r1, sl
 8006d16:	00ca      	lsls	r2, r1, #3
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	4642      	mov	r2, r8
 8006d20:	189b      	adds	r3, r3, r2
 8006d22:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d24:	464b      	mov	r3, r9
 8006d26:	460a      	mov	r2, r1
 8006d28:	eb42 0303 	adc.w	r3, r2, r3
 8006d2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	663b      	str	r3, [r7, #96]	; 0x60
 8006d38:	667a      	str	r2, [r7, #100]	; 0x64
 8006d3a:	f04f 0200 	mov.w	r2, #0
 8006d3e:	f04f 0300 	mov.w	r3, #0
 8006d42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d46:	4649      	mov	r1, r9
 8006d48:	008b      	lsls	r3, r1, #2
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d50:	4641      	mov	r1, r8
 8006d52:	008a      	lsls	r2, r1, #2
 8006d54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d58:	f7f9 fac2 	bl	80002e0 <__aeabi_uldivmod>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4b0d      	ldr	r3, [pc, #52]	; (8006d98 <UART_SetConfig+0x4e4>)
 8006d62:	fba3 1302 	umull	r1, r3, r3, r2
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	2164      	movs	r1, #100	; 0x64
 8006d6a:	fb01 f303 	mul.w	r3, r1, r3
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	3332      	adds	r3, #50	; 0x32
 8006d74:	4a08      	ldr	r2, [pc, #32]	; (8006d98 <UART_SetConfig+0x4e4>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	f003 020f 	and.w	r2, r3, #15
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4422      	add	r2, r4
 8006d88:	609a      	str	r2, [r3, #8]
}
 8006d8a:	bf00      	nop
 8006d8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d90:	46bd      	mov	sp, r7
 8006d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d96:	bf00      	nop
 8006d98:	51eb851f 	.word	0x51eb851f

08006d9c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f103 0208 	add.w	r2, r3, #8
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f04f 32ff 	mov.w	r2, #4294967295
 8006db4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f103 0208 	add.w	r2, r3, #8
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f103 0208 	add.w	r2, r3, #8
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	601a      	str	r2, [r3, #0]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e54:	d103      	bne.n	8006e5e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	e00c      	b.n	8006e78 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3308      	adds	r3, #8
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	e002      	b.n	8006e6c <vListInsert+0x2e>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d2f6      	bcs.n	8006e66 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6892      	ldr	r2, [r2, #8]
 8006ec6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6852      	ldr	r2, [r2, #4]
 8006ed0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d103      	bne.n	8006ee4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	1e5a      	subs	r2, r3, #1
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <xQueueGenericReset+0x2a>
        __asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	60bb      	str	r3, [r7, #8]
    }
 8006f2a:	bf00      	nop
 8006f2c:	e7fe      	b.n	8006f2c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8006f2e:	f002 fb0b 	bl	8009548 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f3e:	fb01 f303 	mul.w	r3, r1, r3
 8006f42:	441a      	add	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	68f9      	ldr	r1, [r7, #12]
 8006f62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f64:	fb01 f303 	mul.w	r3, r1, r3
 8006f68:	441a      	add	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	22ff      	movs	r2, #255	; 0xff
 8006f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	22ff      	movs	r2, #255	; 0xff
 8006f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d114      	bne.n	8006fae <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01a      	beq.n	8006fc2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	3310      	adds	r3, #16
 8006f90:	4618      	mov	r0, r3
 8006f92:	f001 f91f 	bl	80081d4 <xTaskRemoveFromEventList>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d012      	beq.n	8006fc2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8006f9c:	4b0c      	ldr	r3, [pc, #48]	; (8006fd0 <xQueueGenericReset+0xcc>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	e009      	b.n	8006fc2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3310      	adds	r3, #16
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff fef2 	bl	8006d9c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3324      	adds	r3, #36	; 0x24
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff feed 	bl	8006d9c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8006fc2:	f002 faf1 	bl	80095a8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8006fc6:	2301      	movs	r3, #1
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	e000ed04 	.word	0xe000ed04

08006fd4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08c      	sub	sp, #48	; 0x30
 8006fd8:	af02      	add	r7, sp, #8
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10a      	bne.n	8006ffe <xQueueGenericCreate+0x2a>
        __asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	61bb      	str	r3, [r7, #24]
    }
 8006ffa:	bf00      	nop
 8006ffc:	e7fe      	b.n	8006ffc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	fb02 f303 	mul.w	r3, r2, r3
 8007006:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d006      	beq.n	800701c <xQueueGenericCreate+0x48>
 800700e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	fbb2 f3f3 	udiv	r3, r2, r3
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	429a      	cmp	r2, r3
 800701a:	d101      	bne.n	8007020 <xQueueGenericCreate+0x4c>
 800701c:	2301      	movs	r3, #1
 800701e:	e000      	b.n	8007022 <xQueueGenericCreate+0x4e>
 8007020:	2300      	movs	r3, #0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10a      	bne.n	800703c <xQueueGenericCreate+0x68>
        __asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	617b      	str	r3, [r7, #20]
    }
 8007038:	bf00      	nop
 800703a:	e7fe      	b.n	800703a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8007042:	d90a      	bls.n	800705a <xQueueGenericCreate+0x86>
        __asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	613b      	str	r3, [r7, #16]
    }
 8007056:	bf00      	nop
 8007058:	e7fe      	b.n	8007058 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	3350      	adds	r3, #80	; 0x50
 800705e:	4618      	mov	r0, r3
 8007060:	f002 fb94 	bl	800978c <pvPortMalloc>
 8007064:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00d      	beq.n	8007088 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	3350      	adds	r3, #80	; 0x50
 8007074:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007076:	79fa      	ldrb	r2, [r7, #7]
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	4613      	mov	r3, r2
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 f805 	bl	8007092 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007088:	6a3b      	ldr	r3, [r7, #32]
    }
 800708a:	4618      	mov	r0, r3
 800708c:	3728      	adds	r7, #40	; 0x28
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
 800709e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d103      	bne.n	80070ae <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	e002      	b.n	80070b4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070c0:	2101      	movs	r1, #1
 80070c2:	69b8      	ldr	r0, [r7, #24]
 80070c4:	f7ff ff1e 	bl	8006f04 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	78fa      	ldrb	r2, [r7, #3]
 80070cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80070d0:	bf00      	nop
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08e      	sub	sp, #56	; 0x38
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070e6:	2300      	movs	r3, #0
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <xQueueGenericSend+0x32>
        __asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d103      	bne.n	8007118 <xQueueGenericSend+0x40>
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <xQueueGenericSend+0x44>
 8007118:	2301      	movs	r3, #1
 800711a:	e000      	b.n	800711e <xQueueGenericSend+0x46>
 800711c:	2300      	movs	r3, #0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10a      	bne.n	8007138 <xQueueGenericSend+0x60>
        __asm volatile
 8007122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8007134:	bf00      	nop
 8007136:	e7fe      	b.n	8007136 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d103      	bne.n	8007146 <xQueueGenericSend+0x6e>
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <xQueueGenericSend+0x72>
 8007146:	2301      	movs	r3, #1
 8007148:	e000      	b.n	800714c <xQueueGenericSend+0x74>
 800714a:	2300      	movs	r3, #0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <xQueueGenericSend+0x8e>
        __asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	623b      	str	r3, [r7, #32]
    }
 8007162:	bf00      	nop
 8007164:	e7fe      	b.n	8007164 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007166:	f001 f9d1 	bl	800850c <xTaskGetSchedulerState>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <xQueueGenericSend+0x9e>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <xQueueGenericSend+0xa2>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <xQueueGenericSend+0xa4>
 800717a:	2300      	movs	r3, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <xQueueGenericSend+0xbe>
        __asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	61fb      	str	r3, [r7, #28]
    }
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007196:	f002 f9d7 	bl	8009548 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d302      	bcc.n	80071ac <xQueueGenericSend+0xd4>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d129      	bne.n	8007200 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071b2:	f000 fac6 	bl	8007742 <prvCopyDataToQueue>
 80071b6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d010      	beq.n	80071e2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	3324      	adds	r3, #36	; 0x24
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 f805 	bl	80081d4 <xTaskRemoveFromEventList>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d013      	beq.n	80071f8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80071d0:	4b3f      	ldr	r3, [pc, #252]	; (80072d0 <xQueueGenericSend+0x1f8>)
 80071d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	e00a      	b.n	80071f8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d007      	beq.n	80071f8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80071e8:	4b39      	ldr	r3, [pc, #228]	; (80072d0 <xQueueGenericSend+0x1f8>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80071f8:	f002 f9d6 	bl	80095a8 <vPortExitCritical>
                return pdPASS;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e063      	b.n	80072c8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d103      	bne.n	800720e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007206:	f002 f9cf 	bl	80095a8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800720a:	2300      	movs	r3, #0
 800720c:	e05c      	b.n	80072c8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	2b00      	cmp	r3, #0
 8007212:	d106      	bne.n	8007222 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007214:	f107 0314 	add.w	r3, r7, #20
 8007218:	4618      	mov	r0, r3
 800721a:	f001 f83d 	bl	8008298 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800721e:	2301      	movs	r3, #1
 8007220:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007222:	f002 f9c1 	bl	80095a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007226:	f000 fdb7 	bl	8007d98 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800722a:	f002 f98d 	bl	8009548 <vPortEnterCritical>
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007234:	b25b      	sxtb	r3, r3
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d103      	bne.n	8007244 <xQueueGenericSend+0x16c>
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800724a:	b25b      	sxtb	r3, r3
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d103      	bne.n	800725a <xQueueGenericSend+0x182>
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800725a:	f002 f9a5 	bl	80095a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800725e:	1d3a      	adds	r2, r7, #4
 8007260:	f107 0314 	add.w	r3, r7, #20
 8007264:	4611      	mov	r1, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f001 f82c 	bl	80082c4 <xTaskCheckForTimeOut>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d124      	bne.n	80072bc <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007274:	f000 fb5d 	bl	8007932 <prvIsQueueFull>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d018      	beq.n	80072b0 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	3310      	adds	r3, #16
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	4611      	mov	r1, r2
 8007286:	4618      	mov	r0, r3
 8007288:	f000 ff54 	bl	8008134 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800728c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800728e:	f000 fae8 	bl	8007862 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8007292:	f000 fd8f 	bl	8007db4 <xTaskResumeAll>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	f47f af7c 	bne.w	8007196 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800729e:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <xQueueGenericSend+0x1f8>)
 80072a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	e772      	b.n	8007196 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80072b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b2:	f000 fad6 	bl	8007862 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80072b6:	f000 fd7d 	bl	8007db4 <xTaskResumeAll>
 80072ba:	e76c      	b.n	8007196 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80072bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072be:	f000 fad0 	bl	8007862 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80072c2:	f000 fd77 	bl	8007db4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80072c6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3738      	adds	r7, #56	; 0x38
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	e000ed04 	.word	0xe000ed04

080072d4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b090      	sub	sp, #64	; 0x40
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10a      	bne.n	8007302 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d103      	bne.n	8007310 <xQueueGenericSendFromISR+0x3c>
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <xQueueGenericSendFromISR+0x40>
 8007310:	2301      	movs	r3, #1
 8007312:	e000      	b.n	8007316 <xQueueGenericSendFromISR+0x42>
 8007314:	2300      	movs	r3, #0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10a      	bne.n	8007330 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800732c:	bf00      	nop
 800732e:	e7fe      	b.n	800732e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d103      	bne.n	800733e <xQueueGenericSendFromISR+0x6a>
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733a:	2b01      	cmp	r3, #1
 800733c:	d101      	bne.n	8007342 <xQueueGenericSendFromISR+0x6e>
 800733e:	2301      	movs	r3, #1
 8007340:	e000      	b.n	8007344 <xQueueGenericSendFromISR+0x70>
 8007342:	2300      	movs	r3, #0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	623b      	str	r3, [r7, #32]
    }
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800735e:	f002 f9d5 	bl	800970c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8007362:	f3ef 8211 	mrs	r2, BASEPRI
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	61fa      	str	r2, [r7, #28]
 8007378:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800737a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007386:	429a      	cmp	r2, r3
 8007388:	d302      	bcc.n	8007390 <xQueueGenericSendFromISR+0xbc>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b02      	cmp	r3, #2
 800738e:	d13e      	bne.n	800740e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073a6:	f000 f9cc 	bl	8007742 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80073aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b2:	d112      	bne.n	80073da <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d025      	beq.n	8007408 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	3324      	adds	r3, #36	; 0x24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 ff07 	bl	80081d4 <xTaskRemoveFromEventList>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01d      	beq.n	8007408 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01a      	beq.n	8007408 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	e016      	b.n	8007408 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80073da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80073de:	2b7f      	cmp	r3, #127	; 0x7f
 80073e0:	d10a      	bne.n	80073f8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	617b      	str	r3, [r7, #20]
    }
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80073fc:	3301      	adds	r3, #1
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	b25a      	sxtb	r2, r3
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8007408:	2301      	movs	r3, #1
 800740a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800740c:	e001      	b.n	8007412 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800740e:	2300      	movs	r3, #0
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007414:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800741c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800741e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007420:	4618      	mov	r0, r3
 8007422:	3740      	adds	r7, #64	; 0x40
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08c      	sub	sp, #48	; 0x30
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8007434:	2300      	movs	r3, #0
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <xQueueReceive+0x30>
        __asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	623b      	str	r3, [r7, #32]
    }
 8007454:	bf00      	nop
 8007456:	e7fe      	b.n	8007456 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <xQueueReceive+0x3e>
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <xQueueReceive+0x42>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <xQueueReceive+0x44>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <xQueueReceive+0x5e>
        __asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	61fb      	str	r3, [r7, #28]
    }
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007486:	f001 f841 	bl	800850c <xTaskGetSchedulerState>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <xQueueReceive+0x6e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <xQueueReceive+0x72>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <xQueueReceive+0x74>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <xQueueReceive+0x8e>
        __asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	61bb      	str	r3, [r7, #24]
    }
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80074b6:	f002 f847 	bl	8009548 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074be:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d01f      	beq.n	8007506 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074c6:	68b9      	ldr	r1, [r7, #8]
 80074c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ca:	f000 f9a4 	bl	8007816 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	1e5a      	subs	r2, r3, #1
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00f      	beq.n	80074fe <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	3310      	adds	r3, #16
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 fe76 	bl	80081d4 <xTaskRemoveFromEventList>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d007      	beq.n	80074fe <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80074ee:	4b3d      	ldr	r3, [pc, #244]	; (80075e4 <xQueueReceive+0x1bc>)
 80074f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80074fe:	f002 f853 	bl	80095a8 <vPortExitCritical>
                return pdPASS;
 8007502:	2301      	movs	r3, #1
 8007504:	e069      	b.n	80075da <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d103      	bne.n	8007514 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800750c:	f002 f84c 	bl	80095a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8007510:	2300      	movs	r3, #0
 8007512:	e062      	b.n	80075da <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800751a:	f107 0310 	add.w	r3, r7, #16
 800751e:	4618      	mov	r0, r3
 8007520:	f000 feba 	bl	8008298 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007524:	2301      	movs	r3, #1
 8007526:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007528:	f002 f83e 	bl	80095a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800752c:	f000 fc34 	bl	8007d98 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007530:	f002 f80a 	bl	8009548 <vPortEnterCritical>
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800753a:	b25b      	sxtb	r3, r3
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d103      	bne.n	800754a <xQueueReceive+0x122>
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007550:	b25b      	sxtb	r3, r3
 8007552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007556:	d103      	bne.n	8007560 <xQueueReceive+0x138>
 8007558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007560:	f002 f822 	bl	80095a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007564:	1d3a      	adds	r2, r7, #4
 8007566:	f107 0310 	add.w	r3, r7, #16
 800756a:	4611      	mov	r1, r2
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fea9 	bl	80082c4 <xTaskCheckForTimeOut>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d123      	bne.n	80075c0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757a:	f000 f9c4 	bl	8007906 <prvIsQueueEmpty>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d017      	beq.n	80075b4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	3324      	adds	r3, #36	; 0x24
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	4611      	mov	r1, r2
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fdd1 	bl	8008134 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007594:	f000 f965 	bl	8007862 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8007598:	f000 fc0c 	bl	8007db4 <xTaskResumeAll>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d189      	bne.n	80074b6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80075a2:	4b10      	ldr	r3, [pc, #64]	; (80075e4 <xQueueReceive+0x1bc>)
 80075a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	e780      	b.n	80074b6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80075b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075b6:	f000 f954 	bl	8007862 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80075ba:	f000 fbfb 	bl	8007db4 <xTaskResumeAll>
 80075be:	e77a      	b.n	80074b6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80075c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075c2:	f000 f94e 	bl	8007862 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80075c6:	f000 fbf5 	bl	8007db4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075cc:	f000 f99b 	bl	8007906 <prvIsQueueEmpty>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f43f af6f 	beq.w	80074b6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80075d8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3730      	adds	r7, #48	; 0x30
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	e000ed04 	.word	0xe000ed04

080075e8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b090      	sub	sp, #64	; 0x40
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10a      	bne.n	8007614 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8007610:	bf00      	nop
 8007612:	e7fe      	b.n	8007612 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d103      	bne.n	8007622 <xQueueReceiveFromISR+0x3a>
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <xQueueReceiveFromISR+0x3e>
 8007622:	2301      	movs	r3, #1
 8007624:	e000      	b.n	8007628 <xQueueReceiveFromISR+0x40>
 8007626:	2300      	movs	r3, #0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007642:	f002 f863 	bl	800970c <vPortValidateInterruptPriority>
        __asm volatile
 8007646:	f3ef 8211 	mrs	r2, BASEPRI
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	623a      	str	r2, [r7, #32]
 800765c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800765e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007660:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	2b00      	cmp	r3, #0
 800766c:	d03e      	beq.n	80076ec <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800766e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800767c:	f000 f8cb 	bl	8007816 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	1e5a      	subs	r2, r3, #1
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8007688:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800768c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007690:	d112      	bne.n	80076b8 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d025      	beq.n	80076e6 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	3310      	adds	r3, #16
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fd98 	bl	80081d4 <xTaskRemoveFromEventList>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d01d      	beq.n	80076e6 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d01a      	beq.n	80076e6 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	e016      	b.n	80076e6 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80076b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80076bc:	2b7f      	cmp	r3, #127	; 0x7f
 80076be:	d10a      	bne.n	80076d6 <xQueueReceiveFromISR+0xee>
        __asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	61bb      	str	r3, [r7, #24]
    }
 80076d2:	bf00      	nop
 80076d4:	e7fe      	b.n	80076d4 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80076d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076da:	3301      	adds	r3, #1
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	b25a      	sxtb	r2, r3
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80076e6:	2301      	movs	r3, #1
 80076e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076ea:	e001      	b.n	80076f0 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f2:	617b      	str	r3, [r7, #20]
        __asm volatile
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f383 8811 	msr	BASEPRI, r3
    }
 80076fa:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80076fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3740      	adds	r7, #64	; 0x40
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	60bb      	str	r3, [r7, #8]
    }
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800772a:	f001 ff0d 	bl	8009548 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8007734:	f001 ff38 	bl	80095a8 <vPortExitCritical>

    return uxReturn;
 8007738:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b086      	sub	sp, #24
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800774e:	2300      	movs	r3, #0
 8007750:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007756:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10d      	bne.n	800777c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d14d      	bne.n	8007804 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	4618      	mov	r0, r3
 800776e:	f000 feeb 	bl	8008548 <xTaskPriorityDisinherit>
 8007772:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	609a      	str	r2, [r3, #8]
 800777a:	e043      	b.n	8007804 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d119      	bne.n	80077b6 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6858      	ldr	r0, [r3, #4]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	461a      	mov	r2, r3
 800778c:	68b9      	ldr	r1, [r7, #8]
 800778e:	f002 fa25 	bl	8009bdc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	441a      	add	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d32b      	bcc.n	8007804 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	605a      	str	r2, [r3, #4]
 80077b4:	e026      	b.n	8007804 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	68d8      	ldr	r0, [r3, #12]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	461a      	mov	r2, r3
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	f002 fa0b 	bl	8009bdc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	425b      	negs	r3, r3
 80077d0:	441a      	add	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d207      	bcs.n	80077f2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	425b      	negs	r3, r3
 80077ec:	441a      	add	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d105      	bne.n	8007804 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3b01      	subs	r3, #1
 8007802:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800780c:	697b      	ldr	r3, [r7, #20]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b082      	sub	sp, #8
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d018      	beq.n	800785a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007830:	441a      	add	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68da      	ldr	r2, [r3, #12]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	429a      	cmp	r2, r3
 8007840:	d303      	bcc.n	800784a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68d9      	ldr	r1, [r3, #12]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	461a      	mov	r2, r3
 8007854:	6838      	ldr	r0, [r7, #0]
 8007856:	f002 f9c1 	bl	8009bdc <memcpy>
    }
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800786a:	f001 fe6d 	bl	8009548 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007874:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007876:	e011      	b.n	800789c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d012      	beq.n	80078a6 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3324      	adds	r3, #36	; 0x24
 8007884:	4618      	mov	r0, r3
 8007886:	f000 fca5 	bl	80081d4 <xTaskRemoveFromEventList>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8007890:	f000 fd7e 	bl	8008390 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	3b01      	subs	r3, #1
 8007898:	b2db      	uxtb	r3, r3
 800789a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800789c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	dce9      	bgt.n	8007878 <prvUnlockQueue+0x16>
 80078a4:	e000      	b.n	80078a8 <prvUnlockQueue+0x46>
                        break;
 80078a6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	22ff      	movs	r2, #255	; 0xff
 80078ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80078b0:	f001 fe7a 	bl	80095a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80078b4:	f001 fe48 	bl	8009548 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078be:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80078c0:	e011      	b.n	80078e6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d012      	beq.n	80078f0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3310      	adds	r3, #16
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fc80 	bl	80081d4 <xTaskRemoveFromEventList>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80078da:	f000 fd59 	bl	8008390 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80078e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dce9      	bgt.n	80078c2 <prvUnlockQueue+0x60>
 80078ee:	e000      	b.n	80078f2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80078f0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	22ff      	movs	r2, #255	; 0xff
 80078f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80078fa:	f001 fe55 	bl	80095a8 <vPortExitCritical>
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800790e:	f001 fe1b 	bl	8009548 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007916:	2b00      	cmp	r3, #0
 8007918:	d102      	bne.n	8007920 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800791a:	2301      	movs	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]
 800791e:	e001      	b.n	8007924 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8007920:	2300      	movs	r3, #0
 8007922:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007924:	f001 fe40 	bl	80095a8 <vPortExitCritical>

    return xReturn;
 8007928:	68fb      	ldr	r3, [r7, #12]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800793a:	f001 fe05 	bl	8009548 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007946:	429a      	cmp	r2, r3
 8007948:	d102      	bne.n	8007950 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800794a:	2301      	movs	r3, #1
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e001      	b.n	8007954 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007954:	f001 fe28 	bl	80095a8 <vPortExitCritical>

    return xReturn;
 8007958:	68fb      	ldr	r3, [r7, #12]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8007962:	b480      	push	{r7}
 8007964:	b087      	sub	sp, #28
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	60fb      	str	r3, [r7, #12]
    }
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007992:	429a      	cmp	r2, r3
 8007994:	d102      	bne.n	800799c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8007996:	2301      	movs	r3, #1
 8007998:	617b      	str	r3, [r7, #20]
 800799a:	e001      	b.n	80079a0 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80079a0:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80079a2:	4618      	mov	r0, r3
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
	...

080079b0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	e014      	b.n	80079ea <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80079c0:	4a0f      	ldr	r2, [pc, #60]	; (8007a00 <vQueueAddToRegistry+0x50>)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10b      	bne.n	80079e4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80079cc:	490c      	ldr	r1, [pc, #48]	; (8007a00 <vQueueAddToRegistry+0x50>)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80079d6:	4a0a      	ldr	r2, [pc, #40]	; (8007a00 <vQueueAddToRegistry+0x50>)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	4413      	add	r3, r2
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80079e2:	e006      	b.n	80079f2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3301      	adds	r3, #1
 80079e8:	60fb      	str	r3, [r7, #12]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b07      	cmp	r3, #7
 80079ee:	d9e7      	bls.n	80079c0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	20000200 	.word	0x20000200

08007a04 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007a14:	f001 fd98 	bl	8009548 <vPortEnterCritical>
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a1e:	b25b      	sxtb	r3, r3
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d103      	bne.n	8007a2e <vQueueWaitForMessageRestricted+0x2a>
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a34:	b25b      	sxtb	r3, r3
 8007a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3a:	d103      	bne.n	8007a44 <vQueueWaitForMessageRestricted+0x40>
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a44:	f001 fdb0 	bl	80095a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d106      	bne.n	8007a5e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	3324      	adds	r3, #36	; 0x24
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	68b9      	ldr	r1, [r7, #8]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fb8f 	bl	800817c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8007a5e:	6978      	ldr	r0, [r7, #20]
 8007a60:	f7ff feff 	bl	8007862 <prvUnlockQueue>
    }
 8007a64:	bf00      	nop
 8007a66:	3718      	adds	r7, #24
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08c      	sub	sp, #48	; 0x30
 8007a70:	af04      	add	r7, sp, #16
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f001 fe84 	bl	800978c <pvPortMalloc>
 8007a84:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00e      	beq.n	8007aaa <xTaskCreate+0x3e>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a8c:	2058      	movs	r0, #88	; 0x58
 8007a8e:	f001 fe7d 	bl	800978c <pvPortMalloc>
 8007a92:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <xTaskCreate+0x36>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8007aa0:	e005      	b.n	8007aae <xTaskCreate+0x42>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8007aa2:	6978      	ldr	r0, [r7, #20]
 8007aa4:	f001 ff52 	bl	800994c <vPortFree>
 8007aa8:	e001      	b.n	8007aae <xTaskCreate+0x42>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d013      	beq.n	8007adc <xTaskCreate+0x70>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9303      	str	r3, [sp, #12]
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	9302      	str	r3, [sp, #8]
 8007abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	68b9      	ldr	r1, [r7, #8]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 f80e 	bl	8007aec <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007ad0:	69f8      	ldr	r0, [r7, #28]
 8007ad2:	f000 f8a1 	bl	8007c18 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	61bb      	str	r3, [r7, #24]
 8007ada:	e002      	b.n	8007ae2 <xTaskCreate+0x76>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007adc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
    }
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3720      	adds	r7, #32
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	461a      	mov	r2, r3
 8007b04:	21a5      	movs	r1, #165	; 0xa5
 8007b06:	f002 f877 	bl	8009bf8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b14:	3b01      	subs	r3, #1
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	f023 0307 	bic.w	r3, r3, #7
 8007b22:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <prvInitialiseNewTask+0x58>
        __asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	617b      	str	r3, [r7, #20]
    }
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d01f      	beq.n	8007b8a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61fb      	str	r3, [r7, #28]
 8007b4e:	e012      	b.n	8007b76 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	7819      	ldrb	r1, [r3, #0]
 8007b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	3334      	adds	r3, #52	; 0x34
 8007b60:	460a      	mov	r2, r1
 8007b62:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d006      	beq.n	8007b7e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	3301      	adds	r3, #1
 8007b74:	61fb      	str	r3, [r7, #28]
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	2b09      	cmp	r3, #9
 8007b7a:	d9e9      	bls.n	8007b50 <prvInitialiseNewTask+0x64>
 8007b7c:	e000      	b.n	8007b80 <prvInitialiseNewTask+0x94>
            {
                break;
 8007b7e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b88:	e003      	b.n	8007b92 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d901      	bls.n	8007b9c <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b98:	2304      	movs	r3, #4
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba6:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007baa:	2200      	movs	r2, #0
 8007bac:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff f912 	bl	8006ddc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	3318      	adds	r3, #24
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff f90d 	bl	8006ddc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	f1c3 0205 	rsb	r2, r3, #5
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd6:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	3350      	adds	r3, #80	; 0x50
 8007bdc:	2204      	movs	r2, #4
 8007bde:	2100      	movs	r1, #0
 8007be0:	4618      	mov	r0, r3
 8007be2:	f002 f809 	bl	8009bf8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	3354      	adds	r3, #84	; 0x54
 8007bea:	2201      	movs	r2, #1
 8007bec:	2100      	movs	r1, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f002 f802 	bl	8009bf8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	68f9      	ldr	r1, [r7, #12]
 8007bf8:	69b8      	ldr	r0, [r7, #24]
 8007bfa:	f001 fb75 	bl	80092e8 <pxPortInitialiseStack>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c0e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007c10:	bf00      	nop
 8007c12:	3720      	adds	r7, #32
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007c20:	f001 fc92 	bl	8009548 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007c24:	4b2c      	ldr	r3, [pc, #176]	; (8007cd8 <prvAddNewTaskToReadyList+0xc0>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	4a2b      	ldr	r2, [pc, #172]	; (8007cd8 <prvAddNewTaskToReadyList+0xc0>)
 8007c2c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007c2e:	4b2b      	ldr	r3, [pc, #172]	; (8007cdc <prvAddNewTaskToReadyList+0xc4>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007c36:	4a29      	ldr	r2, [pc, #164]	; (8007cdc <prvAddNewTaskToReadyList+0xc4>)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c3c:	4b26      	ldr	r3, [pc, #152]	; (8007cd8 <prvAddNewTaskToReadyList+0xc0>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d110      	bne.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007c44:	f000 fbc8 	bl	80083d8 <prvInitialiseTaskLists>
 8007c48:	e00d      	b.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007c4a:	4b25      	ldr	r3, [pc, #148]	; (8007ce0 <prvAddNewTaskToReadyList+0xc8>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c52:	4b22      	ldr	r3, [pc, #136]	; (8007cdc <prvAddNewTaskToReadyList+0xc4>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d802      	bhi.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007c60:	4a1e      	ldr	r2, [pc, #120]	; (8007cdc <prvAddNewTaskToReadyList+0xc4>)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007c66:	4b1f      	ldr	r3, [pc, #124]	; (8007ce4 <prvAddNewTaskToReadyList+0xcc>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ce4 <prvAddNewTaskToReadyList+0xcc>)
 8007c6e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c70:	4b1c      	ldr	r3, [pc, #112]	; (8007ce4 <prvAddNewTaskToReadyList+0xcc>)
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	409a      	lsls	r2, r3
 8007c80:	4b19      	ldr	r3, [pc, #100]	; (8007ce8 <prvAddNewTaskToReadyList+0xd0>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	4a18      	ldr	r2, [pc, #96]	; (8007ce8 <prvAddNewTaskToReadyList+0xd0>)
 8007c88:	6013      	str	r3, [r2, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4a15      	ldr	r2, [pc, #84]	; (8007cec <prvAddNewTaskToReadyList+0xd4>)
 8007c98:	441a      	add	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	f7ff f8a8 	bl	8006df6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007ca6:	f001 fc7f 	bl	80095a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007caa:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <prvAddNewTaskToReadyList+0xc8>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00e      	beq.n	8007cd0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cb2:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <prvAddNewTaskToReadyList+0xc4>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d207      	bcs.n	8007cd0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <prvAddNewTaskToReadyList+0xd8>)
 8007cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	20000318 	.word	0x20000318
 8007cdc:	20000240 	.word	0x20000240
 8007ce0:	20000324 	.word	0x20000324
 8007ce4:	20000334 	.word	0x20000334
 8007ce8:	20000320 	.word	0x20000320
 8007cec:	20000244 	.word	0x20000244
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8007cfa:	4b20      	ldr	r3, [pc, #128]	; (8007d7c <vTaskStartScheduler+0x88>)
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	2300      	movs	r3, #0
 8007d04:	2282      	movs	r2, #130	; 0x82
 8007d06:	491e      	ldr	r1, [pc, #120]	; (8007d80 <vTaskStartScheduler+0x8c>)
 8007d08:	481e      	ldr	r0, [pc, #120]	; (8007d84 <vTaskStartScheduler+0x90>)
 8007d0a:	f7ff feaf 	bl	8007a6c <xTaskCreate>
 8007d0e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d102      	bne.n	8007d1c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8007d16:	f000 ff59 	bl	8008bcc <xTimerCreateTimerTask>
 8007d1a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d116      	bne.n	8007d50 <vTaskStartScheduler+0x5c>
        __asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	60bb      	str	r3, [r7, #8]
    }
 8007d34:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <vTaskStartScheduler+0x94>)
 8007d38:	f04f 32ff 	mov.w	r2, #4294967295
 8007d3c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <vTaskStartScheduler+0x98>)
 8007d40:	2201      	movs	r2, #1
 8007d42:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d44:	4b12      	ldr	r3, [pc, #72]	; (8007d90 <vTaskStartScheduler+0x9c>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8007d4a:	f001 fb5b 	bl	8009404 <xPortStartScheduler>
 8007d4e:	e00e      	b.n	8007d6e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d10a      	bne.n	8007d6e <vTaskStartScheduler+0x7a>
        __asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	607b      	str	r3, [r7, #4]
    }
 8007d6a:	bf00      	nop
 8007d6c:	e7fe      	b.n	8007d6c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007d6e:	4b09      	ldr	r3, [pc, #36]	; (8007d94 <vTaskStartScheduler+0xa0>)
 8007d70:	681b      	ldr	r3, [r3, #0]
}
 8007d72:	bf00      	nop
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	2000033c 	.word	0x2000033c
 8007d80:	0800a85c 	.word	0x0800a85c
 8007d84:	080083a9 	.word	0x080083a9
 8007d88:	20000338 	.word	0x20000338
 8007d8c:	20000324 	.word	0x20000324
 8007d90:	2000031c 	.word	0x2000031c
 8007d94:	2000001c 	.word	0x2000001c

08007d98 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007d9c:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <vTaskSuspendAll+0x18>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3301      	adds	r3, #1
 8007da2:	4a03      	ldr	r2, [pc, #12]	; (8007db0 <vTaskSuspendAll+0x18>)
 8007da4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007da6:	bf00      	nop
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	20000340 	.word	0x20000340

08007db4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8007dc2:	4b41      	ldr	r3, [pc, #260]	; (8007ec8 <xTaskResumeAll+0x114>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <xTaskResumeAll+0x2c>
        __asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	603b      	str	r3, [r7, #0]
    }
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007de0:	f001 fbb2 	bl	8009548 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007de4:	4b38      	ldr	r3, [pc, #224]	; (8007ec8 <xTaskResumeAll+0x114>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	4a37      	ldr	r2, [pc, #220]	; (8007ec8 <xTaskResumeAll+0x114>)
 8007dec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dee:	4b36      	ldr	r3, [pc, #216]	; (8007ec8 <xTaskResumeAll+0x114>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d161      	bne.n	8007eba <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007df6:	4b35      	ldr	r3, [pc, #212]	; (8007ecc <xTaskResumeAll+0x118>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d05d      	beq.n	8007eba <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dfe:	e02e      	b.n	8007e5e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e00:	4b33      	ldr	r3, [pc, #204]	; (8007ed0 <xTaskResumeAll+0x11c>)
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3318      	adds	r3, #24
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff f84f 	bl	8006eb0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3304      	adds	r3, #4
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff f84a 	bl	8006eb0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	2201      	movs	r2, #1
 8007e22:	409a      	lsls	r2, r3
 8007e24:	4b2b      	ldr	r3, [pc, #172]	; (8007ed4 <xTaskResumeAll+0x120>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	4a2a      	ldr	r2, [pc, #168]	; (8007ed4 <xTaskResumeAll+0x120>)
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e32:	4613      	mov	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4a27      	ldr	r2, [pc, #156]	; (8007ed8 <xTaskResumeAll+0x124>)
 8007e3c:	441a      	add	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3304      	adds	r3, #4
 8007e42:	4619      	mov	r1, r3
 8007e44:	4610      	mov	r0, r2
 8007e46:	f7fe ffd6 	bl	8006df6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4e:	4b23      	ldr	r3, [pc, #140]	; (8007edc <xTaskResumeAll+0x128>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d302      	bcc.n	8007e5e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8007e58:	4b21      	ldr	r3, [pc, #132]	; (8007ee0 <xTaskResumeAll+0x12c>)
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e5e:	4b1c      	ldr	r3, [pc, #112]	; (8007ed0 <xTaskResumeAll+0x11c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1cc      	bne.n	8007e00 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007e6c:	f000 fb32 	bl	80084d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e70:	4b1c      	ldr	r3, [pc, #112]	; (8007ee4 <xTaskResumeAll+0x130>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d010      	beq.n	8007e9e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007e7c:	f000 f846 	bl	8007f0c <xTaskIncrementTick>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8007e86:	4b16      	ldr	r3, [pc, #88]	; (8007ee0 <xTaskResumeAll+0x12c>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1f1      	bne.n	8007e7c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8007e98:	4b12      	ldr	r3, [pc, #72]	; (8007ee4 <xTaskResumeAll+0x130>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007e9e:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <xTaskResumeAll+0x12c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d009      	beq.n	8007eba <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <xTaskResumeAll+0x134>)
 8007eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007eba:	f001 fb75 	bl	80095a8 <vPortExitCritical>

    return xAlreadyYielded;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	20000340 	.word	0x20000340
 8007ecc:	20000318 	.word	0x20000318
 8007ed0:	200002d8 	.word	0x200002d8
 8007ed4:	20000320 	.word	0x20000320
 8007ed8:	20000244 	.word	0x20000244
 8007edc:	20000240 	.word	0x20000240
 8007ee0:	2000032c 	.word	0x2000032c
 8007ee4:	20000328 	.word	0x20000328
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <xTaskGetTickCount+0x1c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007ef8:	687b      	ldr	r3, [r7, #4]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	2000031c 	.word	0x2000031c

08007f0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007f12:	2300      	movs	r3, #0
 8007f14:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f16:	4b4e      	ldr	r3, [pc, #312]	; (8008050 <xTaskIncrementTick+0x144>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f040 808e 	bne.w	800803c <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f20:	4b4c      	ldr	r3, [pc, #304]	; (8008054 <xTaskIncrementTick+0x148>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3301      	adds	r3, #1
 8007f26:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007f28:	4a4a      	ldr	r2, [pc, #296]	; (8008054 <xTaskIncrementTick+0x148>)
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d120      	bne.n	8007f76 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8007f34:	4b48      	ldr	r3, [pc, #288]	; (8008058 <xTaskIncrementTick+0x14c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <xTaskIncrementTick+0x48>
        __asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	603b      	str	r3, [r7, #0]
    }
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <xTaskIncrementTick+0x46>
 8007f54:	4b40      	ldr	r3, [pc, #256]	; (8008058 <xTaskIncrementTick+0x14c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	4b40      	ldr	r3, [pc, #256]	; (800805c <xTaskIncrementTick+0x150>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a3e      	ldr	r2, [pc, #248]	; (8008058 <xTaskIncrementTick+0x14c>)
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	4a3e      	ldr	r2, [pc, #248]	; (800805c <xTaskIncrementTick+0x150>)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	4b3d      	ldr	r3, [pc, #244]	; (8008060 <xTaskIncrementTick+0x154>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	4a3c      	ldr	r2, [pc, #240]	; (8008060 <xTaskIncrementTick+0x154>)
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	f000 faaf 	bl	80084d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007f76:	4b3b      	ldr	r3, [pc, #236]	; (8008064 <xTaskIncrementTick+0x158>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d348      	bcc.n	8008012 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f80:	4b35      	ldr	r3, [pc, #212]	; (8008058 <xTaskIncrementTick+0x14c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d104      	bne.n	8007f94 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f8a:	4b36      	ldr	r3, [pc, #216]	; (8008064 <xTaskIncrementTick+0x158>)
 8007f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f90:	601a      	str	r2, [r3, #0]
                    break;
 8007f92:	e03e      	b.n	8008012 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f94:	4b30      	ldr	r3, [pc, #192]	; (8008058 <xTaskIncrementTick+0x14c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d203      	bcs.n	8007fb4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007fac:	4a2d      	ldr	r2, [pc, #180]	; (8008064 <xTaskIncrementTick+0x158>)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007fb2:	e02e      	b.n	8008012 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fe ff79 	bl	8006eb0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d004      	beq.n	8007fd0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	3318      	adds	r3, #24
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe ff70 	bl	8006eb0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	409a      	lsls	r2, r3
 8007fd8:	4b23      	ldr	r3, [pc, #140]	; (8008068 <xTaskIncrementTick+0x15c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	4a22      	ldr	r2, [pc, #136]	; (8008068 <xTaskIncrementTick+0x15c>)
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4a1f      	ldr	r2, [pc, #124]	; (800806c <xTaskIncrementTick+0x160>)
 8007ff0:	441a      	add	r2, r3
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	f7fe fefc 	bl	8006df6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008002:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <xTaskIncrementTick+0x164>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	429a      	cmp	r2, r3
 800800a:	d3b9      	bcc.n	8007f80 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800800c:	2301      	movs	r3, #1
 800800e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008010:	e7b6      	b.n	8007f80 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008012:	4b17      	ldr	r3, [pc, #92]	; (8008070 <xTaskIncrementTick+0x164>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008018:	4914      	ldr	r1, [pc, #80]	; (800806c <xTaskIncrementTick+0x160>)
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d901      	bls.n	800802e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800802a:	2301      	movs	r3, #1
 800802c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800802e:	4b11      	ldr	r3, [pc, #68]	; (8008074 <xTaskIncrementTick+0x168>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8008036:	2301      	movs	r3, #1
 8008038:	617b      	str	r3, [r7, #20]
 800803a:	e004      	b.n	8008046 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800803c:	4b0e      	ldr	r3, [pc, #56]	; (8008078 <xTaskIncrementTick+0x16c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3301      	adds	r3, #1
 8008042:	4a0d      	ldr	r2, [pc, #52]	; (8008078 <xTaskIncrementTick+0x16c>)
 8008044:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8008046:	697b      	ldr	r3, [r7, #20]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	20000340 	.word	0x20000340
 8008054:	2000031c 	.word	0x2000031c
 8008058:	200002d0 	.word	0x200002d0
 800805c:	200002d4 	.word	0x200002d4
 8008060:	20000330 	.word	0x20000330
 8008064:	20000338 	.word	0x20000338
 8008068:	20000320 	.word	0x20000320
 800806c:	20000244 	.word	0x20000244
 8008070:	20000240 	.word	0x20000240
 8008074:	2000032c 	.word	0x2000032c
 8008078:	20000328 	.word	0x20000328

0800807c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008082:	4b27      	ldr	r3, [pc, #156]	; (8008120 <vTaskSwitchContext+0xa4>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800808a:	4b26      	ldr	r3, [pc, #152]	; (8008124 <vTaskSwitchContext+0xa8>)
 800808c:	2201      	movs	r2, #1
 800808e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8008090:	e03f      	b.n	8008112 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8008092:	4b24      	ldr	r3, [pc, #144]	; (8008124 <vTaskSwitchContext+0xa8>)
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008098:	4b23      	ldr	r3, [pc, #140]	; (8008128 <vTaskSwitchContext+0xac>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	fab3 f383 	clz	r3, r3
 80080a4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80080a6:	7afb      	ldrb	r3, [r7, #11]
 80080a8:	f1c3 031f 	rsb	r3, r3, #31
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	491f      	ldr	r1, [pc, #124]	; (800812c <vTaskSwitchContext+0xb0>)
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	440b      	add	r3, r1
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	607b      	str	r3, [r7, #4]
    }
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <vTaskSwitchContext+0x5a>
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4613      	mov	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4a12      	ldr	r2, [pc, #72]	; (800812c <vTaskSwitchContext+0xb0>)
 80080e4:	4413      	add	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	605a      	str	r2, [r3, #4]
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	3308      	adds	r3, #8
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d104      	bne.n	8008108 <vTaskSwitchContext+0x8c>
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	605a      	str	r2, [r3, #4]
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	4a08      	ldr	r2, [pc, #32]	; (8008130 <vTaskSwitchContext+0xb4>)
 8008110:	6013      	str	r3, [r2, #0]
}
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	20000340 	.word	0x20000340
 8008124:	2000032c 	.word	0x2000032c
 8008128:	20000320 	.word	0x20000320
 800812c:	20000244 	.word	0x20000244
 8008130:	20000240 	.word	0x20000240

08008134 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10a      	bne.n	800815a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	60fb      	str	r3, [r7, #12]
    }
 8008156:	bf00      	nop
 8008158:	e7fe      	b.n	8008158 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800815a:	4b07      	ldr	r3, [pc, #28]	; (8008178 <vTaskPlaceOnEventList+0x44>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3318      	adds	r3, #24
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fe fe6b 	bl	8006e3e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008168:	2101      	movs	r1, #1
 800816a:	6838      	ldr	r0, [r7, #0]
 800816c:	f000 fcc8 	bl	8008b00 <prvAddCurrentTaskToDelayedList>
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000240 	.word	0x20000240

0800817c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	617b      	str	r3, [r7, #20]
    }
 80081a0:	bf00      	nop
 80081a2:	e7fe      	b.n	80081a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081a4:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3318      	adds	r3, #24
 80081aa:	4619      	mov	r1, r3
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f7fe fe22 	bl	8006df6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80081b8:	f04f 33ff 	mov.w	r3, #4294967295
 80081bc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	68b8      	ldr	r0, [r7, #8]
 80081c2:	f000 fc9d 	bl	8008b00 <prvAddCurrentTaskToDelayedList>
    }
 80081c6:	bf00      	nop
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000240 	.word	0x20000240

080081d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	60fb      	str	r3, [r7, #12]
    }
 80081fc:	bf00      	nop
 80081fe:	e7fe      	b.n	80081fe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3318      	adds	r3, #24
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe fe53 	bl	8006eb0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800820a:	4b1d      	ldr	r3, [pc, #116]	; (8008280 <xTaskRemoveFromEventList+0xac>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d11c      	bne.n	800824c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	3304      	adds	r3, #4
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fe4a 	bl	8006eb0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	2201      	movs	r2, #1
 8008222:	409a      	lsls	r2, r3
 8008224:	4b17      	ldr	r3, [pc, #92]	; (8008284 <xTaskRemoveFromEventList+0xb0>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4313      	orrs	r3, r2
 800822a:	4a16      	ldr	r2, [pc, #88]	; (8008284 <xTaskRemoveFromEventList+0xb0>)
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008232:	4613      	mov	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4a13      	ldr	r2, [pc, #76]	; (8008288 <xTaskRemoveFromEventList+0xb4>)
 800823c:	441a      	add	r2, r3
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	3304      	adds	r3, #4
 8008242:	4619      	mov	r1, r3
 8008244:	4610      	mov	r0, r2
 8008246:	f7fe fdd6 	bl	8006df6 <vListInsertEnd>
 800824a:	e005      	b.n	8008258 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	3318      	adds	r3, #24
 8008250:	4619      	mov	r1, r3
 8008252:	480e      	ldr	r0, [pc, #56]	; (800828c <xTaskRemoveFromEventList+0xb8>)
 8008254:	f7fe fdcf 	bl	8006df6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <xTaskRemoveFromEventList+0xbc>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	429a      	cmp	r2, r3
 8008264:	d905      	bls.n	8008272 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008266:	2301      	movs	r3, #1
 8008268:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800826a:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <xTaskRemoveFromEventList+0xc0>)
 800826c:	2201      	movs	r2, #1
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	e001      	b.n	8008276 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8008276:	697b      	ldr	r3, [r7, #20]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000340 	.word	0x20000340
 8008284:	20000320 	.word	0x20000320
 8008288:	20000244 	.word	0x20000244
 800828c:	200002d8 	.word	0x200002d8
 8008290:	20000240 	.word	0x20000240
 8008294:	2000032c 	.word	0x2000032c

08008298 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082a0:	4b06      	ldr	r3, [pc, #24]	; (80082bc <vTaskInternalSetTimeOutState+0x24>)
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80082a8:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <vTaskInternalSetTimeOutState+0x28>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	605a      	str	r2, [r3, #4]
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	20000330 	.word	0x20000330
 80082c0:	2000031c 	.word	0x2000031c

080082c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	613b      	str	r3, [r7, #16]
    }
 80082e6:	bf00      	nop
 80082e8:	e7fe      	b.n	80082e8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60fb      	str	r3, [r7, #12]
    }
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8008306:	f001 f91f 	bl	8009548 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800830a:	4b1f      	ldr	r3, [pc, #124]	; (8008388 <xTaskCheckForTimeOut+0xc4>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d102      	bne.n	800832a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008324:	2300      	movs	r3, #0
 8008326:	61fb      	str	r3, [r7, #28]
 8008328:	e026      	b.n	8008378 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	4b17      	ldr	r3, [pc, #92]	; (800838c <xTaskCheckForTimeOut+0xc8>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d00a      	beq.n	800834c <xTaskCheckForTimeOut+0x88>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	429a      	cmp	r2, r3
 800833e:	d305      	bcc.n	800834c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	e015      	b.n	8008378 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	429a      	cmp	r2, r3
 8008354:	d20b      	bcs.n	800836e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	1ad2      	subs	r2, r2, r3
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff ff98 	bl	8008298 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008368:	2300      	movs	r3, #0
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	e004      	b.n	8008378 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2200      	movs	r2, #0
 8008372:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008374:	2301      	movs	r3, #1
 8008376:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8008378:	f001 f916 	bl	80095a8 <vPortExitCritical>

    return xReturn;
 800837c:	69fb      	ldr	r3, [r7, #28]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3720      	adds	r7, #32
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	2000031c 	.word	0x2000031c
 800838c:	20000330 	.word	0x20000330

08008390 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008390:	b480      	push	{r7}
 8008392:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008394:	4b03      	ldr	r3, [pc, #12]	; (80083a4 <vTaskMissedYield+0x14>)
 8008396:	2201      	movs	r2, #1
 8008398:	601a      	str	r2, [r3, #0]
}
 800839a:	bf00      	nop
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	2000032c 	.word	0x2000032c

080083a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80083b0:	f000 f852 	bl	8008458 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083b4:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <prvIdleTask+0x28>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d9f9      	bls.n	80083b0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80083bc:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <prvIdleTask+0x2c>)
 80083be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80083cc:	e7f0      	b.n	80083b0 <prvIdleTask+0x8>
 80083ce:	bf00      	nop
 80083d0:	20000244 	.word	0x20000244
 80083d4:	e000ed04 	.word	0xe000ed04

080083d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083de:	2300      	movs	r3, #0
 80083e0:	607b      	str	r3, [r7, #4]
 80083e2:	e00c      	b.n	80083fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4a12      	ldr	r2, [pc, #72]	; (8008438 <prvInitialiseTaskLists+0x60>)
 80083f0:	4413      	add	r3, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fcd2 	bl	8006d9c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3301      	adds	r3, #1
 80083fc:	607b      	str	r3, [r7, #4]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b04      	cmp	r3, #4
 8008402:	d9ef      	bls.n	80083e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8008404:	480d      	ldr	r0, [pc, #52]	; (800843c <prvInitialiseTaskLists+0x64>)
 8008406:	f7fe fcc9 	bl	8006d9c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800840a:	480d      	ldr	r0, [pc, #52]	; (8008440 <prvInitialiseTaskLists+0x68>)
 800840c:	f7fe fcc6 	bl	8006d9c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008410:	480c      	ldr	r0, [pc, #48]	; (8008444 <prvInitialiseTaskLists+0x6c>)
 8008412:	f7fe fcc3 	bl	8006d9c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8008416:	480c      	ldr	r0, [pc, #48]	; (8008448 <prvInitialiseTaskLists+0x70>)
 8008418:	f7fe fcc0 	bl	8006d9c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800841c:	480b      	ldr	r0, [pc, #44]	; (800844c <prvInitialiseTaskLists+0x74>)
 800841e:	f7fe fcbd 	bl	8006d9c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8008422:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <prvInitialiseTaskLists+0x78>)
 8008424:	4a05      	ldr	r2, [pc, #20]	; (800843c <prvInitialiseTaskLists+0x64>)
 8008426:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008428:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <prvInitialiseTaskLists+0x7c>)
 800842a:	4a05      	ldr	r2, [pc, #20]	; (8008440 <prvInitialiseTaskLists+0x68>)
 800842c:	601a      	str	r2, [r3, #0]
}
 800842e:	bf00      	nop
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000244 	.word	0x20000244
 800843c:	200002a8 	.word	0x200002a8
 8008440:	200002bc 	.word	0x200002bc
 8008444:	200002d8 	.word	0x200002d8
 8008448:	200002ec 	.word	0x200002ec
 800844c:	20000304 	.word	0x20000304
 8008450:	200002d0 	.word	0x200002d0
 8008454:	200002d4 	.word	0x200002d4

08008458 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800845e:	e019      	b.n	8008494 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8008460:	f001 f872 	bl	8009548 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008464:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <prvCheckTasksWaitingTermination+0x50>)
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3304      	adds	r3, #4
 8008470:	4618      	mov	r0, r3
 8008472:	f7fe fd1d 	bl	8006eb0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8008476:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <prvCheckTasksWaitingTermination+0x54>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3b01      	subs	r3, #1
 800847c:	4a0b      	ldr	r2, [pc, #44]	; (80084ac <prvCheckTasksWaitingTermination+0x54>)
 800847e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8008480:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <prvCheckTasksWaitingTermination+0x58>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3b01      	subs	r3, #1
 8008486:	4a0a      	ldr	r2, [pc, #40]	; (80084b0 <prvCheckTasksWaitingTermination+0x58>)
 8008488:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800848a:	f001 f88d 	bl	80095a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f810 	bl	80084b4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008494:	4b06      	ldr	r3, [pc, #24]	; (80084b0 <prvCheckTasksWaitingTermination+0x58>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e1      	bne.n	8008460 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800849c:	bf00      	nop
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	200002ec 	.word	0x200002ec
 80084ac:	20000318 	.word	0x20000318
 80084b0:	20000300 	.word	0x20000300

080084b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 fa43 	bl	800994c <vPortFree>
                vPortFree( pxTCB );
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 fa40 	bl	800994c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084d8:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <prvResetNextTaskUnblockTime+0x30>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d104      	bne.n	80084ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80084e2:	4b09      	ldr	r3, [pc, #36]	; (8008508 <prvResetNextTaskUnblockTime+0x34>)
 80084e4:	f04f 32ff 	mov.w	r2, #4294967295
 80084e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80084ea:	e005      	b.n	80084f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084ec:	4b05      	ldr	r3, [pc, #20]	; (8008504 <prvResetNextTaskUnblockTime+0x30>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a04      	ldr	r2, [pc, #16]	; (8008508 <prvResetNextTaskUnblockTime+0x34>)
 80084f6:	6013      	str	r3, [r2, #0]
}
 80084f8:	bf00      	nop
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	200002d0 	.word	0x200002d0
 8008508:	20000338 	.word	0x20000338

0800850c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8008512:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <xTaskGetSchedulerState+0x34>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d102      	bne.n	8008520 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800851a:	2301      	movs	r3, #1
 800851c:	607b      	str	r3, [r7, #4]
 800851e:	e008      	b.n	8008532 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008520:	4b08      	ldr	r3, [pc, #32]	; (8008544 <xTaskGetSchedulerState+0x38>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008528:	2302      	movs	r3, #2
 800852a:	607b      	str	r3, [r7, #4]
 800852c:	e001      	b.n	8008532 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800852e:	2300      	movs	r3, #0
 8008530:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8008532:	687b      	ldr	r3, [r7, #4]
    }
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	20000324 	.word	0x20000324
 8008544:	20000340 	.word	0x20000340

08008548 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8008554:	2300      	movs	r3, #0
 8008556:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d063      	beq.n	8008626 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800855e:	4b34      	ldr	r3, [pc, #208]	; (8008630 <xTaskPriorityDisinherit+0xe8>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	429a      	cmp	r2, r3
 8008566:	d00a      	beq.n	800857e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	60fb      	str	r3, [r7, #12]
    }
 800857a:	bf00      	nop
 800857c:	e7fe      	b.n	800857c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10a      	bne.n	800859c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	60bb      	str	r3, [r7, #8]
    }
 8008598:	bf00      	nop
 800859a:	e7fe      	b.n	800859a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085a0:	1e5a      	subs	r2, r3, #1
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d039      	beq.n	8008626 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d135      	bne.n	8008626 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	3304      	adds	r3, #4
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fe fc76 	bl	8006eb0 <uxListRemove>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10a      	bne.n	80085e0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	2201      	movs	r2, #1
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	43da      	mvns	r2, r3
 80085d6:	4b17      	ldr	r3, [pc, #92]	; (8008634 <xTaskPriorityDisinherit+0xec>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4013      	ands	r3, r2
 80085dc:	4a15      	ldr	r2, [pc, #84]	; (8008634 <xTaskPriorityDisinherit+0xec>)
 80085de:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	f1c3 0205 	rsb	r2, r3, #5
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	2201      	movs	r2, #1
 80085fa:	409a      	lsls	r2, r3
 80085fc:	4b0d      	ldr	r3, [pc, #52]	; (8008634 <xTaskPriorityDisinherit+0xec>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4313      	orrs	r3, r2
 8008602:	4a0c      	ldr	r2, [pc, #48]	; (8008634 <xTaskPriorityDisinherit+0xec>)
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4a09      	ldr	r2, [pc, #36]	; (8008638 <xTaskPriorityDisinherit+0xf0>)
 8008614:	441a      	add	r2, r3
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	3304      	adds	r3, #4
 800861a:	4619      	mov	r1, r3
 800861c:	4610      	mov	r0, r2
 800861e:	f7fe fbea 	bl	8006df6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8008622:	2301      	movs	r3, #1
 8008624:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008626:	697b      	ldr	r3, [r7, #20]
    }
 8008628:	4618      	mov	r0, r3
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	20000240 	.word	0x20000240
 8008634:	20000320 	.word	0x20000320
 8008638:	20000244 	.word	0x20000244

0800863c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	613b      	str	r3, [r7, #16]
    }
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8008666:	f000 ff6f 	bl	8009548 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800866a:	4b32      	ldr	r3, [pc, #200]	; (8008734 <xTaskGenericNotifyWait+0xf8>)
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	4413      	add	r3, r2
 8008672:	3354      	adds	r3, #84	; 0x54
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b02      	cmp	r3, #2
 800867a:	d022      	beq.n	80086c2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800867c:	4b2d      	ldr	r3, [pc, #180]	; (8008734 <xTaskGenericNotifyWait+0xf8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	3214      	adds	r2, #20
 8008684:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	43d2      	mvns	r2, r2
 800868c:	4011      	ands	r1, r2
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	3214      	adds	r2, #20
 8008692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8008696:	4b27      	ldr	r3, [pc, #156]	; (8008734 <xTaskGenericNotifyWait+0xf8>)
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	4413      	add	r3, r2
 800869e:	3354      	adds	r3, #84	; 0x54
 80086a0:	2201      	movs	r2, #1
 80086a2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00b      	beq.n	80086c2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086aa:	2101      	movs	r1, #1
 80086ac:	6a38      	ldr	r0, [r7, #32]
 80086ae:	f000 fa27 	bl	8008b00 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80086b2:	4b21      	ldr	r3, [pc, #132]	; (8008738 <xTaskGenericNotifyWait+0xfc>)
 80086b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80086c2:	f000 ff71 	bl	80095a8 <vPortExitCritical>

        taskENTER_CRITICAL();
 80086c6:	f000 ff3f 	bl	8009548 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d007      	beq.n	80086e0 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80086d0:	4b18      	ldr	r3, [pc, #96]	; (8008734 <xTaskGenericNotifyWait+0xf8>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	3214      	adds	r2, #20
 80086d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80086e0:	4b14      	ldr	r3, [pc, #80]	; (8008734 <xTaskGenericNotifyWait+0xf8>)
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4413      	add	r3, r2
 80086e8:	3354      	adds	r3, #84	; 0x54
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d002      	beq.n	80086f8 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80086f2:	2300      	movs	r3, #0
 80086f4:	617b      	str	r3, [r7, #20]
 80086f6:	e00e      	b.n	8008716 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80086f8:	4b0e      	ldr	r3, [pc, #56]	; (8008734 <xTaskGenericNotifyWait+0xf8>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	3214      	adds	r2, #20
 8008700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	43d2      	mvns	r2, r2
 8008708:	4011      	ands	r1, r2
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	3214      	adds	r2, #20
 800870e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8008712:	2301      	movs	r3, #1
 8008714:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8008716:	4b07      	ldr	r3, [pc, #28]	; (8008734 <xTaskGenericNotifyWait+0xf8>)
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	4413      	add	r3, r2
 800871e:	3354      	adds	r3, #84	; 0x54
 8008720:	2200      	movs	r2, #0
 8008722:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8008724:	f000 ff40 	bl	80095a8 <vPortExitCritical>

        return xReturn;
 8008728:	697b      	ldr	r3, [r7, #20]
    }
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20000240 	.word	0x20000240
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800873c:	b580      	push	{r7, lr}
 800873e:	b08c      	sub	sp, #48	; 0x30
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800874a:	2301      	movs	r3, #1
 800874c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00a      	beq.n	800876a <xTaskGenericNotify+0x2e>
        __asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	623b      	str	r3, [r7, #32]
    }
 8008766:	bf00      	nop
 8008768:	e7fe      	b.n	8008768 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10a      	bne.n	8008786 <xTaskGenericNotify+0x4a>
        __asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	61fb      	str	r3, [r7, #28]
    }
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800878a:	f000 fedd 	bl	8009548 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	2b00      	cmp	r3, #0
 8008792:	d006      	beq.n	80087a2 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	3214      	adds	r2, #20
 800879a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80087a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4413      	add	r3, r2
 80087a8:	3354      	adds	r3, #84	; 0x54
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80087b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	4413      	add	r3, r2
 80087b6:	3354      	adds	r3, #84	; 0x54
 80087b8:	2202      	movs	r2, #2
 80087ba:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	2b04      	cmp	r3, #4
 80087c0:	d83b      	bhi.n	800883a <xTaskGenericNotify+0xfe>
 80087c2:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <xTaskGenericNotify+0x8c>)
 80087c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c8:	08008859 	.word	0x08008859
 80087cc:	080087dd 	.word	0x080087dd
 80087d0:	080087f9 	.word	0x080087f9
 80087d4:	08008811 	.word	0x08008811
 80087d8:	0800881f 	.word	0x0800881f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	3214      	adds	r2, #20
 80087e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	ea42 0103 	orr.w	r1, r2, r3
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	3214      	adds	r2, #20
 80087f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80087f6:	e032      	b.n	800885e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	3214      	adds	r2, #20
 80087fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008802:	1c59      	adds	r1, r3, #1
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	3214      	adds	r2, #20
 800880a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800880e:	e026      	b.n	800885e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	3214      	adds	r2, #20
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800881c:	e01f      	b.n	800885e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800881e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008822:	2b02      	cmp	r3, #2
 8008824:	d006      	beq.n	8008834 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	3214      	adds	r2, #20
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8008832:	e014      	b.n	800885e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8008834:	2300      	movs	r3, #0
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8008838:	e011      	b.n	800885e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800883a:	4b2b      	ldr	r3, [pc, #172]	; (80088e8 <xTaskGenericNotify+0x1ac>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00c      	beq.n	800885c <xTaskGenericNotify+0x120>
        __asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	61bb      	str	r3, [r7, #24]
    }
 8008854:	bf00      	nop
 8008856:	e7fe      	b.n	8008856 <xTaskGenericNotify+0x11a>
                    break;
 8008858:	bf00      	nop
 800885a:	e000      	b.n	800885e <xTaskGenericNotify+0x122>

                    break;
 800885c:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800885e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008862:	2b01      	cmp	r3, #1
 8008864:	d139      	bne.n	80088da <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	3304      	adds	r3, #4
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fb20 	bl	8006eb0 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	2201      	movs	r2, #1
 8008876:	409a      	lsls	r2, r3
 8008878:	4b1c      	ldr	r3, [pc, #112]	; (80088ec <xTaskGenericNotify+0x1b0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4313      	orrs	r3, r2
 800887e:	4a1b      	ldr	r2, [pc, #108]	; (80088ec <xTaskGenericNotify+0x1b0>)
 8008880:	6013      	str	r3, [r2, #0]
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4a18      	ldr	r2, [pc, #96]	; (80088f0 <xTaskGenericNotify+0x1b4>)
 8008890:	441a      	add	r2, r3
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	3304      	adds	r3, #4
 8008896:	4619      	mov	r1, r3
 8008898:	4610      	mov	r0, r2
 800889a:	f7fe faac 	bl	8006df6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <xTaskGenericNotify+0x180>
        __asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	617b      	str	r3, [r7, #20]
    }
 80088b8:	bf00      	nop
 80088ba:	e7fe      	b.n	80088ba <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c0:	4b0c      	ldr	r3, [pc, #48]	; (80088f4 <xTaskGenericNotify+0x1b8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d907      	bls.n	80088da <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80088ca:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <xTaskGenericNotify+0x1bc>)
 80088cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80088da:	f000 fe65 	bl	80095a8 <vPortExitCritical>

        return xReturn;
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80088e0:	4618      	mov	r0, r3
 80088e2:	3730      	adds	r7, #48	; 0x30
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	2000031c 	.word	0x2000031c
 80088ec:	20000320 	.word	0x20000320
 80088f0:	20000244 	.word	0x20000244
 80088f4:	20000240 	.word	0x20000240
 80088f8:	e000ed04 	.word	0xe000ed04

080088fc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b090      	sub	sp, #64	; 0x40
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
 8008908:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800890a:	2301      	movs	r3, #1
 800890c:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10a      	bne.n	800892a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8008926:	bf00      	nop
 8008928:	e7fe      	b.n	8008928 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00a      	beq.n	8008946 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008942:	bf00      	nop
 8008944:	e7fe      	b.n	8008944 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008946:	f000 fee1 	bl	800970c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800894e:	f3ef 8211 	mrs	r2, BASEPRI
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	627a      	str	r2, [r7, #36]	; 0x24
 8008964:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008968:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800896a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800896c:	2b00      	cmp	r3, #0
 800896e:	d006      	beq.n	800897e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8008970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	3214      	adds	r2, #20
 8008976:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800897a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800897c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800897e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	4413      	add	r3, r2
 8008984:	3354      	adds	r3, #84	; 0x54
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800898c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	4413      	add	r3, r2
 8008992:	3354      	adds	r3, #84	; 0x54
 8008994:	2202      	movs	r2, #2
 8008996:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8008998:	78fb      	ldrb	r3, [r7, #3]
 800899a:	2b04      	cmp	r3, #4
 800899c:	d83b      	bhi.n	8008a16 <xTaskGenericNotifyFromISR+0x11a>
 800899e:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <xTaskGenericNotifyFromISR+0xa8>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	08008a35 	.word	0x08008a35
 80089a8:	080089b9 	.word	0x080089b9
 80089ac:	080089d5 	.word	0x080089d5
 80089b0:	080089ed 	.word	0x080089ed
 80089b4:	080089fb 	.word	0x080089fb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80089b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	3214      	adds	r2, #20
 80089be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	ea42 0103 	orr.w	r1, r2, r3
 80089c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	3214      	adds	r2, #20
 80089ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80089d2:	e032      	b.n	8008a3a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80089d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	3214      	adds	r2, #20
 80089da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089de:	1c59      	adds	r1, r3, #1
 80089e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	3214      	adds	r2, #20
 80089e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80089ea:	e026      	b.n	8008a3a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	3214      	adds	r2, #20
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80089f8:	e01f      	b.n	8008a3a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80089fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d006      	beq.n	8008a10 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	3214      	adds	r2, #20
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8008a0e:	e014      	b.n	8008a3a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8008a14:	e011      	b.n	8008a3a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8008a16:	4b33      	ldr	r3, [pc, #204]	; (8008ae4 <xTaskGenericNotifyFromISR+0x1e8>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00c      	beq.n	8008a38 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	61fb      	str	r3, [r7, #28]
    }
 8008a30:	bf00      	nop
 8008a32:	e7fe      	b.n	8008a32 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8008a34:	bf00      	nop
 8008a36:	e000      	b.n	8008a3a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8008a38:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008a3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d145      	bne.n	8008ace <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	61bb      	str	r3, [r7, #24]
    }
 8008a5c:	bf00      	nop
 8008a5e:	e7fe      	b.n	8008a5e <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a60:	4b21      	ldr	r3, [pc, #132]	; (8008ae8 <xTaskGenericNotifyFromISR+0x1ec>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d11c      	bne.n	8008aa2 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fe fa1f 	bl	8006eb0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	2201      	movs	r2, #1
 8008a78:	409a      	lsls	r2, r3
 8008a7a:	4b1c      	ldr	r3, [pc, #112]	; (8008aec <xTaskGenericNotifyFromISR+0x1f0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	4a1a      	ldr	r2, [pc, #104]	; (8008aec <xTaskGenericNotifyFromISR+0x1f0>)
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4a17      	ldr	r2, [pc, #92]	; (8008af0 <xTaskGenericNotifyFromISR+0x1f4>)
 8008a92:	441a      	add	r2, r3
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	3304      	adds	r3, #4
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	f7fe f9ab 	bl	8006df6 <vListInsertEnd>
 8008aa0:	e005      	b.n	8008aae <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa4:	3318      	adds	r3, #24
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	4812      	ldr	r0, [pc, #72]	; (8008af4 <xTaskGenericNotifyFromISR+0x1f8>)
 8008aaa:	f7fe f9a4 	bl	8006df6 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab2:	4b11      	ldr	r3, [pc, #68]	; (8008af8 <xTaskGenericNotifyFromISR+0x1fc>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d908      	bls.n	8008ace <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8008abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8008ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8008ac8:	4b0c      	ldr	r3, [pc, #48]	; (8008afc <xTaskGenericNotifyFromISR+0x200>)
 8008aca:	2201      	movs	r2, #1
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad0:	617b      	str	r3, [r7, #20]
        __asm volatile
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f383 8811 	msr	BASEPRI, r3
    }
 8008ad8:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8008ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8008adc:	4618      	mov	r0, r3
 8008ade:	3740      	adds	r7, #64	; 0x40
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	2000031c 	.word	0x2000031c
 8008ae8:	20000340 	.word	0x20000340
 8008aec:	20000320 	.word	0x20000320
 8008af0:	20000244 	.word	0x20000244
 8008af4:	200002d8 	.word	0x200002d8
 8008af8:	20000240 	.word	0x20000240
 8008afc:	2000032c 	.word	0x2000032c

08008b00 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8008b0a:	4b29      	ldr	r3, [pc, #164]	; (8008bb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b10:	4b28      	ldr	r3, [pc, #160]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3304      	adds	r3, #4
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fe f9ca 	bl	8006eb0 <uxListRemove>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10b      	bne.n	8008b3a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008b22:	4b24      	ldr	r3, [pc, #144]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	2201      	movs	r2, #1
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	43da      	mvns	r2, r3
 8008b30:	4b21      	ldr	r3, [pc, #132]	; (8008bb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4013      	ands	r3, r2
 8008b36:	4a20      	ldr	r2, [pc, #128]	; (8008bb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b38:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b40:	d10a      	bne.n	8008b58 <prvAddCurrentTaskToDelayedList+0x58>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d007      	beq.n	8008b58 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b48:	4b1a      	ldr	r3, [pc, #104]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	4619      	mov	r1, r3
 8008b50:	481a      	ldr	r0, [pc, #104]	; (8008bbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008b52:	f7fe f950 	bl	8006df6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8008b56:	e026      	b.n	8008ba6 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b60:	4b14      	ldr	r3, [pc, #80]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d209      	bcs.n	8008b84 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b70:	4b13      	ldr	r3, [pc, #76]	; (8008bc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	f7fe f95e 	bl	8006e3e <vListInsert>
}
 8008b82:	e010      	b.n	8008ba6 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b84:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4610      	mov	r0, r2
 8008b92:	f7fe f954 	bl	8006e3e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8008b96:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d202      	bcs.n	8008ba6 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8008ba0:	4a09      	ldr	r2, [pc, #36]	; (8008bc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	6013      	str	r3, [r2, #0]
}
 8008ba6:	bf00      	nop
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	2000031c 	.word	0x2000031c
 8008bb4:	20000240 	.word	0x20000240
 8008bb8:	20000320 	.word	0x20000320
 8008bbc:	20000304 	.word	0x20000304
 8008bc0:	200002d4 	.word	0x200002d4
 8008bc4:	200002d0 	.word	0x200002d0
 8008bc8:	20000338 	.word	0x20000338

08008bcc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8008bd6:	f000 fb31 	bl	800923c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8008bda:	4b11      	ldr	r3, [pc, #68]	; (8008c20 <xTimerCreateTimerTask+0x54>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00b      	beq.n	8008bfa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8008be2:	4b10      	ldr	r3, [pc, #64]	; (8008c24 <xTimerCreateTimerTask+0x58>)
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	2302      	movs	r3, #2
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	2300      	movs	r3, #0
 8008bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008bf0:	490d      	ldr	r1, [pc, #52]	; (8008c28 <xTimerCreateTimerTask+0x5c>)
 8008bf2:	480e      	ldr	r0, [pc, #56]	; (8008c2c <xTimerCreateTimerTask+0x60>)
 8008bf4:	f7fe ff3a 	bl	8007a6c <xTaskCreate>
 8008bf8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	603b      	str	r3, [r7, #0]
    }
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8008c16:	687b      	ldr	r3, [r7, #4]
    }
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20000374 	.word	0x20000374
 8008c24:	20000378 	.word	0x20000378
 8008c28:	0800a864 	.word	0x0800a864
 8008c2c:	08008e1d 	.word	0x08008e1d

08008c30 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b088      	sub	sp, #32
 8008c34:	af02      	add	r7, sp, #8
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008c3e:	202c      	movs	r0, #44	; 0x2c
 8008c40:	f000 fda4 	bl	800978c <pvPortMalloc>
 8008c44:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00d      	beq.n	8008c68 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	68b9      	ldr	r1, [r7, #8]
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f000 f805 	bl	8008c72 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8008c68:	697b      	ldr	r3, [r7, #20]
        }
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b086      	sub	sp, #24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	607a      	str	r2, [r7, #4]
 8008c7e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	617b      	str	r3, [r7, #20]
    }
 8008c98:	bf00      	nop
 8008c9a:	e7fe      	b.n	8008c9a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01e      	beq.n	8008ce0 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8008ca2:	f000 facb 	bl	800923c <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	6a3a      	ldr	r2, [r7, #32]
 8008cbc:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe f88a 	bl	8006ddc <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d008      	beq.n	8008ce0 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cd4:	f043 0304 	orr.w	r3, r3, #4
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8008ce0:	bf00      	nop
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08a      	sub	sp, #40	; 0x28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10a      	bne.n	8008d16 <xTimerGenericCommand+0x2e>
        __asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	623b      	str	r3, [r7, #32]
    }
 8008d12:	bf00      	nop
 8008d14:	e7fe      	b.n	8008d14 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8008d16:	4b1a      	ldr	r3, [pc, #104]	; (8008d80 <xTimerGenericCommand+0x98>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d02a      	beq.n	8008d74 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b05      	cmp	r3, #5
 8008d2e:	dc18      	bgt.n	8008d62 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d30:	f7ff fbec 	bl	800850c <xTaskGetSchedulerState>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d109      	bne.n	8008d4e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d3a:	4b11      	ldr	r3, [pc, #68]	; (8008d80 <xTimerGenericCommand+0x98>)
 8008d3c:	6818      	ldr	r0, [r3, #0]
 8008d3e:	f107 0114 	add.w	r1, r7, #20
 8008d42:	2300      	movs	r3, #0
 8008d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d46:	f7fe f9c7 	bl	80070d8 <xQueueGenericSend>
 8008d4a:	6278      	str	r0, [r7, #36]	; 0x24
 8008d4c:	e012      	b.n	8008d74 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d4e:	4b0c      	ldr	r3, [pc, #48]	; (8008d80 <xTimerGenericCommand+0x98>)
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	f107 0114 	add.w	r1, r7, #20
 8008d56:	2300      	movs	r3, #0
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f7fe f9bd 	bl	80070d8 <xQueueGenericSend>
 8008d5e:	6278      	str	r0, [r7, #36]	; 0x24
 8008d60:	e008      	b.n	8008d74 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d62:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <xTimerGenericCommand+0x98>)
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	f107 0114 	add.w	r1, r7, #20
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	f7fe fab1 	bl	80072d4 <xQueueGenericSendFromISR>
 8008d72:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8008d76:	4618      	mov	r0, r3
 8008d78:	3728      	adds	r7, #40	; 0x28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000374 	.word	0x20000374

08008d84 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b088      	sub	sp, #32
 8008d88:	af02      	add	r7, sp, #8
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d8e:	4b22      	ldr	r3, [pc, #136]	; (8008e18 <prvProcessExpiredTimer+0x94>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fe f887 	bl	8006eb0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d022      	beq.n	8008df6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	699a      	ldr	r2, [r3, #24]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	18d1      	adds	r1, r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	6978      	ldr	r0, [r7, #20]
 8008dbe:	f000 f8d1 	bl	8008f64 <prvInsertTimerInActiveList>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d01f      	beq.n	8008e08 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dc8:	2300      	movs	r3, #0
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	6978      	ldr	r0, [r7, #20]
 8008dd4:	f7ff ff88 	bl	8008ce8 <xTimerGenericCommand>
 8008dd8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d113      	bne.n	8008e08 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	60fb      	str	r3, [r7, #12]
    }
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dfc:	f023 0301 	bic.w	r3, r3, #1
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	6978      	ldr	r0, [r7, #20]
 8008e0e:	4798      	blx	r3
    }
 8008e10:	bf00      	nop
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	2000036c 	.word	0x2000036c

08008e1c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e24:	f107 0308 	add.w	r3, r7, #8
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 f857 	bl	8008edc <prvGetNextExpireTime>
 8008e2e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	4619      	mov	r1, r3
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 f803 	bl	8008e40 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008e3a:	f000 f8d5 	bl	8008fe8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e3e:	e7f1      	b.n	8008e24 <prvTimerTask+0x8>

08008e40 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008e4a:	f7fe ffa5 	bl	8007d98 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e4e:	f107 0308 	add.w	r3, r7, #8
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 f866 	bl	8008f24 <prvSampleTimeNow>
 8008e58:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d130      	bne.n	8008ec2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10a      	bne.n	8008e7c <prvProcessTimerOrBlockTask+0x3c>
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d806      	bhi.n	8008e7c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8008e6e:	f7fe ffa1 	bl	8007db4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e72:	68f9      	ldr	r1, [r7, #12]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7ff ff85 	bl	8008d84 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8008e7a:	e024      	b.n	8008ec6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d008      	beq.n	8008e94 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e82:	4b13      	ldr	r3, [pc, #76]	; (8008ed0 <prvProcessTimerOrBlockTask+0x90>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <prvProcessTimerOrBlockTask+0x50>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e000      	b.n	8008e92 <prvProcessTimerOrBlockTask+0x52>
 8008e90:	2300      	movs	r3, #0
 8008e92:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e94:	4b0f      	ldr	r3, [pc, #60]	; (8008ed4 <prvProcessTimerOrBlockTask+0x94>)
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	f7fe fdaf 	bl	8007a04 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8008ea6:	f7fe ff85 	bl	8007db4 <xTaskResumeAll>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8008eb0:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <prvProcessTimerOrBlockTask+0x98>)
 8008eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	f3bf 8f6f 	isb	sy
    }
 8008ec0:	e001      	b.n	8008ec6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8008ec2:	f7fe ff77 	bl	8007db4 <xTaskResumeAll>
    }
 8008ec6:	bf00      	nop
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20000370 	.word	0x20000370
 8008ed4:	20000374 	.word	0x20000374
 8008ed8:	e000ed04 	.word	0xe000ed04

08008edc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ee4:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <prvGetNextExpireTime+0x44>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <prvGetNextExpireTime+0x16>
 8008eee:	2201      	movs	r2, #1
 8008ef0:	e000      	b.n	8008ef4 <prvGetNextExpireTime+0x18>
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d105      	bne.n	8008f0c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f00:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <prvGetNextExpireTime+0x44>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	60fb      	str	r3, [r7, #12]
 8008f0a:	e001      	b.n	8008f10 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008f10:	68fb      	ldr	r3, [r7, #12]
    }
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	2000036c 	.word	0x2000036c

08008f24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008f2c:	f7fe ffde 	bl	8007eec <xTaskGetTickCount>
 8008f30:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008f32:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <prvSampleTimeNow+0x3c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d205      	bcs.n	8008f48 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008f3c:	f000 f91a 	bl	8009174 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	e002      	b.n	8008f4e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008f4e:	4a04      	ldr	r2, [pc, #16]	; (8008f60 <prvSampleTimeNow+0x3c>)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008f54:	68fb      	ldr	r3, [r7, #12]
    }
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	2000037c 	.word	0x2000037c

08008f64 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8008f72:	2300      	movs	r3, #0
 8008f74:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d812      	bhi.n	8008fb0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	1ad2      	subs	r2, r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d302      	bcc.n	8008f9e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	e01b      	b.n	8008fd6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f9e:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <prvInsertTimerInActiveList+0x7c>)
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4610      	mov	r0, r2
 8008faa:	f7fd ff48 	bl	8006e3e <vListInsert>
 8008fae:	e012      	b.n	8008fd6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d206      	bcs.n	8008fc6 <prvInsertTimerInActiveList+0x62>
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d302      	bcc.n	8008fc6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	617b      	str	r3, [r7, #20]
 8008fc4:	e007      	b.n	8008fd6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fc6:	4b07      	ldr	r3, [pc, #28]	; (8008fe4 <prvInsertTimerInActiveList+0x80>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f7fd ff34 	bl	8006e3e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8008fd6:	697b      	ldr	r3, [r7, #20]
    }
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	20000370 	.word	0x20000370
 8008fe4:	2000036c 	.word	0x2000036c

08008fe8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08c      	sub	sp, #48	; 0x30
 8008fec:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fee:	e0ae      	b.n	800914e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f2c0 80aa 	blt.w	800914c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d004      	beq.n	800900e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	3304      	adds	r3, #4
 8009008:	4618      	mov	r0, r3
 800900a:	f7fd ff51 	bl	8006eb0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800900e:	1d3b      	adds	r3, r7, #4
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff ff87 	bl	8008f24 <prvSampleTimeNow>
 8009016:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b09      	cmp	r3, #9
 800901c:	f200 8097 	bhi.w	800914e <prvProcessReceivedCommands+0x166>
 8009020:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <prvProcessReceivedCommands+0x40>)
 8009022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009026:	bf00      	nop
 8009028:	08009051 	.word	0x08009051
 800902c:	08009051 	.word	0x08009051
 8009030:	08009051 	.word	0x08009051
 8009034:	080090c5 	.word	0x080090c5
 8009038:	080090d9 	.word	0x080090d9
 800903c:	08009123 	.word	0x08009123
 8009040:	08009051 	.word	0x08009051
 8009044:	08009051 	.word	0x08009051
 8009048:	080090c5 	.word	0x080090c5
 800904c:	080090d9 	.word	0x080090d9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009056:	f043 0301 	orr.w	r3, r3, #1
 800905a:	b2da      	uxtb	r2, r3
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	18d1      	adds	r1, r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a3a      	ldr	r2, [r7, #32]
 800906e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009070:	f7ff ff78 	bl	8008f64 <prvInsertTimerInActiveList>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d069      	beq.n	800914e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009080:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d05e      	beq.n	800914e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	441a      	add	r2, r3
 8009098:	2300      	movs	r3, #0
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	2300      	movs	r3, #0
 800909e:	2100      	movs	r1, #0
 80090a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090a2:	f7ff fe21 	bl	8008ce8 <xTimerGenericCommand>
 80090a6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d14f      	bne.n	800914e <prvProcessReceivedCommands+0x166>
        __asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	61bb      	str	r3, [r7, #24]
    }
 80090c0:	bf00      	nop
 80090c2:	e7fe      	b.n	80090c2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090ca:	f023 0301 	bic.w	r3, r3, #1
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80090d6:	e03a      	b.n	800914e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090de:	f043 0301 	orr.w	r3, r3, #1
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <prvProcessReceivedCommands+0x126>
        __asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	617b      	str	r3, [r7, #20]
    }
 800910a:	bf00      	nop
 800910c:	e7fe      	b.n	800910c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	699a      	ldr	r2, [r3, #24]
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	18d1      	adds	r1, r2, r3
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	6a3a      	ldr	r2, [r7, #32]
 800911a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800911c:	f7ff ff22 	bl	8008f64 <prvInsertTimerInActiveList>
                        break;
 8009120:	e015      	b.n	800914e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009128:	f003 0302 	and.w	r3, r3, #2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d103      	bne.n	8009138 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8009130:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009132:	f000 fc0b 	bl	800994c <vPortFree>
 8009136:	e00a      	b.n	800914e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800913e:	f023 0301 	bic.w	r3, r3, #1
 8009142:	b2da      	uxtb	r2, r3
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800914a:	e000      	b.n	800914e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800914c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800914e:	4b08      	ldr	r3, [pc, #32]	; (8009170 <prvProcessReceivedCommands+0x188>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f107 0108 	add.w	r1, r7, #8
 8009156:	2200      	movs	r2, #0
 8009158:	4618      	mov	r0, r3
 800915a:	f7fe f965 	bl	8007428 <xQueueReceive>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	f47f af45 	bne.w	8008ff0 <prvProcessReceivedCommands+0x8>
        }
    }
 8009166:	bf00      	nop
 8009168:	bf00      	nop
 800916a:	3728      	adds	r7, #40	; 0x28
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20000374 	.word	0x20000374

08009174 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800917a:	e048      	b.n	800920e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800917c:	4b2d      	ldr	r3, [pc, #180]	; (8009234 <prvSwitchTimerLists+0xc0>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009186:	4b2b      	ldr	r3, [pc, #172]	; (8009234 <prvSwitchTimerLists+0xc0>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3304      	adds	r3, #4
 8009194:	4618      	mov	r0, r3
 8009196:	f7fd fe8b 	bl	8006eb0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d02e      	beq.n	800920e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	4413      	add	r3, r2
 80091b8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d90e      	bls.n	80091e0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091ce:	4b19      	ldr	r3, [pc, #100]	; (8009234 <prvSwitchTimerLists+0xc0>)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3304      	adds	r3, #4
 80091d6:	4619      	mov	r1, r3
 80091d8:	4610      	mov	r0, r2
 80091da:	f7fd fe30 	bl	8006e3e <vListInsert>
 80091de:	e016      	b.n	800920e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091e0:	2300      	movs	r3, #0
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	2300      	movs	r3, #0
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	2100      	movs	r1, #0
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f7ff fd7c 	bl	8008ce8 <xTimerGenericCommand>
 80091f0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <prvSwitchTimerLists+0x9a>
        __asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	603b      	str	r3, [r7, #0]
    }
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800920e:	4b09      	ldr	r3, [pc, #36]	; (8009234 <prvSwitchTimerLists+0xc0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1b1      	bne.n	800917c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8009218:	4b06      	ldr	r3, [pc, #24]	; (8009234 <prvSwitchTimerLists+0xc0>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800921e:	4b06      	ldr	r3, [pc, #24]	; (8009238 <prvSwitchTimerLists+0xc4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a04      	ldr	r2, [pc, #16]	; (8009234 <prvSwitchTimerLists+0xc0>)
 8009224:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8009226:	4a04      	ldr	r2, [pc, #16]	; (8009238 <prvSwitchTimerLists+0xc4>)
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	6013      	str	r3, [r2, #0]
    }
 800922c:	bf00      	nop
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	2000036c 	.word	0x2000036c
 8009238:	20000370 	.word	0x20000370

0800923c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8009240:	f000 f982 	bl	8009548 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8009244:	4b12      	ldr	r3, [pc, #72]	; (8009290 <prvCheckForValidListAndQueue+0x54>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d11d      	bne.n	8009288 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800924c:	4811      	ldr	r0, [pc, #68]	; (8009294 <prvCheckForValidListAndQueue+0x58>)
 800924e:	f7fd fda5 	bl	8006d9c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8009252:	4811      	ldr	r0, [pc, #68]	; (8009298 <prvCheckForValidListAndQueue+0x5c>)
 8009254:	f7fd fda2 	bl	8006d9c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8009258:	4b10      	ldr	r3, [pc, #64]	; (800929c <prvCheckForValidListAndQueue+0x60>)
 800925a:	4a0e      	ldr	r2, [pc, #56]	; (8009294 <prvCheckForValidListAndQueue+0x58>)
 800925c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800925e:	4b10      	ldr	r3, [pc, #64]	; (80092a0 <prvCheckForValidListAndQueue+0x64>)
 8009260:	4a0d      	ldr	r2, [pc, #52]	; (8009298 <prvCheckForValidListAndQueue+0x5c>)
 8009262:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009264:	2200      	movs	r2, #0
 8009266:	210c      	movs	r1, #12
 8009268:	200a      	movs	r0, #10
 800926a:	f7fd feb3 	bl	8006fd4 <xQueueGenericCreate>
 800926e:	4603      	mov	r3, r0
 8009270:	4a07      	ldr	r2, [pc, #28]	; (8009290 <prvCheckForValidListAndQueue+0x54>)
 8009272:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8009274:	4b06      	ldr	r3, [pc, #24]	; (8009290 <prvCheckForValidListAndQueue+0x54>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d005      	beq.n	8009288 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800927c:	4b04      	ldr	r3, [pc, #16]	; (8009290 <prvCheckForValidListAndQueue+0x54>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4908      	ldr	r1, [pc, #32]	; (80092a4 <prvCheckForValidListAndQueue+0x68>)
 8009282:	4618      	mov	r0, r3
 8009284:	f7fe fb94 	bl	80079b0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009288:	f000 f98e 	bl	80095a8 <vPortExitCritical>
    }
 800928c:	bf00      	nop
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20000374 	.word	0x20000374
 8009294:	20000344 	.word	0x20000344
 8009298:	20000358 	.word	0x20000358
 800929c:	2000036c 	.word	0x2000036c
 80092a0:	20000370 	.word	0x20000370
 80092a4:	0800a86c 	.word	0x0800a86c

080092a8 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10a      	bne.n	80092d0 <pvTimerGetTimerID+0x28>
        __asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	60fb      	str	r3, [r7, #12]
    }
 80092cc:	bf00      	nop
 80092ce:	e7fe      	b.n	80092ce <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80092d0:	f000 f93a 	bl	8009548 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80092da:	f000 f965 	bl	80095a8 <vPortExitCritical>

        return pvReturn;
 80092de:	693b      	ldr	r3, [r7, #16]
    }
 80092e0:	4618      	mov	r0, r3
 80092e2:	3718      	adds	r7, #24
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3b04      	subs	r3, #4
 80092f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009300:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3b04      	subs	r3, #4
 8009306:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f023 0201 	bic.w	r2, r3, #1
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3b04      	subs	r3, #4
 8009316:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8009318:	4a0c      	ldr	r2, [pc, #48]	; (800934c <pxPortInitialiseStack+0x64>)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3b14      	subs	r3, #20
 8009322:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3b04      	subs	r3, #4
 800932e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f06f 0202 	mvn.w	r2, #2
 8009336:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	3b20      	subs	r3, #32
 800933c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800933e:	68fb      	ldr	r3, [r7, #12]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	08009351 	.word	0x08009351

08009350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800935a:	4b12      	ldr	r3, [pc, #72]	; (80093a4 <prvTaskExitError+0x54>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009362:	d00a      	beq.n	800937a <prvTaskExitError+0x2a>
        __asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	60fb      	str	r3, [r7, #12]
    }
 8009376:	bf00      	nop
 8009378:	e7fe      	b.n	8009378 <prvTaskExitError+0x28>
        __asm volatile
 800937a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	60bb      	str	r3, [r7, #8]
    }
 800938c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800938e:	bf00      	nop
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0fc      	beq.n	8009390 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8009396:	bf00      	nop
 8009398:	bf00      	nop
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	20000020 	.word	0x20000020
	...

080093b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80093b0:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <pxCurrentTCBConst2>)
 80093b2:	6819      	ldr	r1, [r3, #0]
 80093b4:	6808      	ldr	r0, [r1, #0]
 80093b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ba:	f380 8809 	msr	PSP, r0
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f04f 0000 	mov.w	r0, #0
 80093c6:	f380 8811 	msr	BASEPRI, r0
 80093ca:	4770      	bx	lr
 80093cc:	f3af 8000 	nop.w

080093d0 <pxCurrentTCBConst2>:
 80093d0:	20000240 	.word	0x20000240
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop

080093d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80093d8:	4808      	ldr	r0, [pc, #32]	; (80093fc <prvPortStartFirstTask+0x24>)
 80093da:	6800      	ldr	r0, [r0, #0]
 80093dc:	6800      	ldr	r0, [r0, #0]
 80093de:	f380 8808 	msr	MSP, r0
 80093e2:	f04f 0000 	mov.w	r0, #0
 80093e6:	f380 8814 	msr	CONTROL, r0
 80093ea:	b662      	cpsie	i
 80093ec:	b661      	cpsie	f
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	df00      	svc	0
 80093f8:	bf00      	nop
 80093fa:	0000      	.short	0x0000
 80093fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009400:	bf00      	nop
 8009402:	bf00      	nop

08009404 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800940a:	4b46      	ldr	r3, [pc, #280]	; (8009524 <xPortStartScheduler+0x120>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a46      	ldr	r2, [pc, #280]	; (8009528 <xPortStartScheduler+0x124>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d10a      	bne.n	800942a <xPortStartScheduler+0x26>
        __asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	613b      	str	r3, [r7, #16]
    }
 8009426:	bf00      	nop
 8009428:	e7fe      	b.n	8009428 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800942a:	4b3e      	ldr	r3, [pc, #248]	; (8009524 <xPortStartScheduler+0x120>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a3f      	ldr	r2, [pc, #252]	; (800952c <xPortStartScheduler+0x128>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d10a      	bne.n	800944a <xPortStartScheduler+0x46>
        __asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	60fb      	str	r3, [r7, #12]
    }
 8009446:	bf00      	nop
 8009448:	e7fe      	b.n	8009448 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800944a:	4b39      	ldr	r3, [pc, #228]	; (8009530 <xPortStartScheduler+0x12c>)
 800944c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	b2db      	uxtb	r3, r3
 8009454:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	22ff      	movs	r2, #255	; 0xff
 800945a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	b2db      	uxtb	r3, r3
 8009462:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009464:	78fb      	ldrb	r3, [r7, #3]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800946c:	b2da      	uxtb	r2, r3
 800946e:	4b31      	ldr	r3, [pc, #196]	; (8009534 <xPortStartScheduler+0x130>)
 8009470:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009472:	4b31      	ldr	r3, [pc, #196]	; (8009538 <xPortStartScheduler+0x134>)
 8009474:	2207      	movs	r2, #7
 8009476:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009478:	e009      	b.n	800948e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800947a:	4b2f      	ldr	r3, [pc, #188]	; (8009538 <xPortStartScheduler+0x134>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3b01      	subs	r3, #1
 8009480:	4a2d      	ldr	r2, [pc, #180]	; (8009538 <xPortStartScheduler+0x134>)
 8009482:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	005b      	lsls	r3, r3, #1
 800948a:	b2db      	uxtb	r3, r3
 800948c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800948e:	78fb      	ldrb	r3, [r7, #3]
 8009490:	b2db      	uxtb	r3, r3
 8009492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009496:	2b80      	cmp	r3, #128	; 0x80
 8009498:	d0ef      	beq.n	800947a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800949a:	4b27      	ldr	r3, [pc, #156]	; (8009538 <xPortStartScheduler+0x134>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f1c3 0307 	rsb	r3, r3, #7
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	d00a      	beq.n	80094bc <xPortStartScheduler+0xb8>
        __asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	60bb      	str	r3, [r7, #8]
    }
 80094b8:	bf00      	nop
 80094ba:	e7fe      	b.n	80094ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094bc:	4b1e      	ldr	r3, [pc, #120]	; (8009538 <xPortStartScheduler+0x134>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	021b      	lsls	r3, r3, #8
 80094c2:	4a1d      	ldr	r2, [pc, #116]	; (8009538 <xPortStartScheduler+0x134>)
 80094c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094c6:	4b1c      	ldr	r3, [pc, #112]	; (8009538 <xPortStartScheduler+0x134>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094ce:	4a1a      	ldr	r2, [pc, #104]	; (8009538 <xPortStartScheduler+0x134>)
 80094d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80094da:	4b18      	ldr	r3, [pc, #96]	; (800953c <xPortStartScheduler+0x138>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a17      	ldr	r2, [pc, #92]	; (800953c <xPortStartScheduler+0x138>)
 80094e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80094e6:	4b15      	ldr	r3, [pc, #84]	; (800953c <xPortStartScheduler+0x138>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a14      	ldr	r2, [pc, #80]	; (800953c <xPortStartScheduler+0x138>)
 80094ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80094f2:	f000 f8db 	bl	80096ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80094f6:	4b12      	ldr	r3, [pc, #72]	; (8009540 <xPortStartScheduler+0x13c>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80094fc:	f000 f8fa 	bl	80096f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009500:	4b10      	ldr	r3, [pc, #64]	; (8009544 <xPortStartScheduler+0x140>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a0f      	ldr	r2, [pc, #60]	; (8009544 <xPortStartScheduler+0x140>)
 8009506:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800950a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800950c:	f7ff ff64 	bl	80093d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009510:	f7fe fdb4 	bl	800807c <vTaskSwitchContext>
    prvTaskExitError();
 8009514:	f7ff ff1c 	bl	8009350 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	e000ed00 	.word	0xe000ed00
 8009528:	410fc271 	.word	0x410fc271
 800952c:	410fc270 	.word	0x410fc270
 8009530:	e000e400 	.word	0xe000e400
 8009534:	20000380 	.word	0x20000380
 8009538:	20000384 	.word	0x20000384
 800953c:	e000ed20 	.word	0xe000ed20
 8009540:	20000020 	.word	0x20000020
 8009544:	e000ef34 	.word	0xe000ef34

08009548 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
        __asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	607b      	str	r3, [r7, #4]
    }
 8009560:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009562:	4b0f      	ldr	r3, [pc, #60]	; (80095a0 <vPortEnterCritical+0x58>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3301      	adds	r3, #1
 8009568:	4a0d      	ldr	r2, [pc, #52]	; (80095a0 <vPortEnterCritical+0x58>)
 800956a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800956c:	4b0c      	ldr	r3, [pc, #48]	; (80095a0 <vPortEnterCritical+0x58>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d10f      	bne.n	8009594 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009574:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <vPortEnterCritical+0x5c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00a      	beq.n	8009594 <vPortEnterCritical+0x4c>
        __asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	603b      	str	r3, [r7, #0]
    }
 8009590:	bf00      	nop
 8009592:	e7fe      	b.n	8009592 <vPortEnterCritical+0x4a>
    }
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	20000020 	.word	0x20000020
 80095a4:	e000ed04 	.word	0xe000ed04

080095a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80095ae:	4b12      	ldr	r3, [pc, #72]	; (80095f8 <vPortExitCritical+0x50>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10a      	bne.n	80095cc <vPortExitCritical+0x24>
        __asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	607b      	str	r3, [r7, #4]
    }
 80095c8:	bf00      	nop
 80095ca:	e7fe      	b.n	80095ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80095cc:	4b0a      	ldr	r3, [pc, #40]	; (80095f8 <vPortExitCritical+0x50>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	4a09      	ldr	r2, [pc, #36]	; (80095f8 <vPortExitCritical+0x50>)
 80095d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80095d6:	4b08      	ldr	r3, [pc, #32]	; (80095f8 <vPortExitCritical+0x50>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d105      	bne.n	80095ea <vPortExitCritical+0x42>
 80095de:	2300      	movs	r3, #0
 80095e0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	f383 8811 	msr	BASEPRI, r3
    }
 80095e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80095ea:	bf00      	nop
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	20000020 	.word	0x20000020
 80095fc:	00000000 	.word	0x00000000

08009600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009600:	f3ef 8009 	mrs	r0, PSP
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	4b15      	ldr	r3, [pc, #84]	; (8009660 <pxCurrentTCBConst>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	f01e 0f10 	tst.w	lr, #16
 8009610:	bf08      	it	eq
 8009612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961a:	6010      	str	r0, [r2, #0]
 800961c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009624:	f380 8811 	msr	BASEPRI, r0
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f7fe fd24 	bl	800807c <vTaskSwitchContext>
 8009634:	f04f 0000 	mov.w	r0, #0
 8009638:	f380 8811 	msr	BASEPRI, r0
 800963c:	bc09      	pop	{r0, r3}
 800963e:	6819      	ldr	r1, [r3, #0]
 8009640:	6808      	ldr	r0, [r1, #0]
 8009642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009646:	f01e 0f10 	tst.w	lr, #16
 800964a:	bf08      	it	eq
 800964c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009650:	f380 8809 	msr	PSP, r0
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	f3af 8000 	nop.w

08009660 <pxCurrentTCBConst>:
 8009660:	20000240 	.word	0x20000240
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop

08009668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
        __asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	607b      	str	r3, [r7, #4]
    }
 8009680:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009682:	f7fe fc43 	bl	8007f0c <xTaskIncrementTick>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d003      	beq.n	8009694 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800968c:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <SysTick_Handler+0x40>)
 800968e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	2300      	movs	r3, #0
 8009696:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	f383 8811 	msr	BASEPRI, r3
    }
 800969e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80096a0:	bf00      	nop
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	e000ed04 	.word	0xe000ed04

080096ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80096ac:	b480      	push	{r7}
 80096ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096b0:	4b0b      	ldr	r3, [pc, #44]	; (80096e0 <vPortSetupTimerInterrupt+0x34>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096b6:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <vPortSetupTimerInterrupt+0x38>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <vPortSetupTimerInterrupt+0x3c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a0a      	ldr	r2, [pc, #40]	; (80096ec <vPortSetupTimerInterrupt+0x40>)
 80096c2:	fba2 2303 	umull	r2, r3, r2, r3
 80096c6:	099b      	lsrs	r3, r3, #6
 80096c8:	4a09      	ldr	r2, [pc, #36]	; (80096f0 <vPortSetupTimerInterrupt+0x44>)
 80096ca:	3b01      	subs	r3, #1
 80096cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096ce:	4b04      	ldr	r3, [pc, #16]	; (80096e0 <vPortSetupTimerInterrupt+0x34>)
 80096d0:	2207      	movs	r2, #7
 80096d2:	601a      	str	r2, [r3, #0]
}
 80096d4:	bf00      	nop
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	e000e010 	.word	0xe000e010
 80096e4:	e000e018 	.word	0xe000e018
 80096e8:	2000000c 	.word	0x2000000c
 80096ec:	10624dd3 	.word	0x10624dd3
 80096f0:	e000e014 	.word	0xe000e014

080096f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80096f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009704 <vPortEnableVFP+0x10>
 80096f8:	6801      	ldr	r1, [r0, #0]
 80096fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80096fe:	6001      	str	r1, [r0, #0]
 8009700:	4770      	bx	lr
 8009702:	0000      	.short	0x0000
 8009704:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009708:	bf00      	nop
 800970a:	bf00      	nop

0800970c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009712:	f3ef 8305 	mrs	r3, IPSR
 8009716:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b0f      	cmp	r3, #15
 800971c:	d914      	bls.n	8009748 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800971e:	4a17      	ldr	r2, [pc, #92]	; (800977c <vPortValidateInterruptPriority+0x70>)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4413      	add	r3, r2
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009728:	4b15      	ldr	r3, [pc, #84]	; (8009780 <vPortValidateInterruptPriority+0x74>)
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	7afa      	ldrb	r2, [r7, #11]
 800972e:	429a      	cmp	r2, r3
 8009730:	d20a      	bcs.n	8009748 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	607b      	str	r3, [r7, #4]
    }
 8009744:	bf00      	nop
 8009746:	e7fe      	b.n	8009746 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009748:	4b0e      	ldr	r3, [pc, #56]	; (8009784 <vPortValidateInterruptPriority+0x78>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009750:	4b0d      	ldr	r3, [pc, #52]	; (8009788 <vPortValidateInterruptPriority+0x7c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	429a      	cmp	r2, r3
 8009756:	d90a      	bls.n	800976e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	603b      	str	r3, [r7, #0]
    }
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <vPortValidateInterruptPriority+0x60>
    }
 800976e:	bf00      	nop
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	e000e3f0 	.word	0xe000e3f0
 8009780:	20000380 	.word	0x20000380
 8009784:	e000ed0c 	.word	0xe000ed0c
 8009788:	20000384 	.word	0x20000384

0800978c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08a      	sub	sp, #40	; 0x28
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8009794:	2300      	movs	r3, #0
 8009796:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8009798:	f7fe fafe 	bl	8007d98 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800979c:	4b65      	ldr	r3, [pc, #404]	; (8009934 <pvPortMalloc+0x1a8>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80097a4:	f000 f934 	bl	8009a10 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097a8:	4b63      	ldr	r3, [pc, #396]	; (8009938 <pvPortMalloc+0x1ac>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4013      	ands	r3, r2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f040 80a7 	bne.w	8009904 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d02d      	beq.n	8009818 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80097bc:	2208      	movs	r2, #8
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d227      	bcs.n	8009818 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80097c8:	2208      	movs	r2, #8
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d021      	beq.n	800981e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f023 0307 	bic.w	r3, r3, #7
 80097e0:	3308      	adds	r3, #8
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d214      	bcs.n	8009812 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f023 0307 	bic.w	r3, r3, #7
 80097ee:	3308      	adds	r3, #8
 80097f0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f003 0307 	and.w	r3, r3, #7
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d010      	beq.n	800981e <pvPortMalloc+0x92>
        __asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	617b      	str	r3, [r7, #20]
    }
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009816:	e002      	b.n	800981e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	607b      	str	r3, [r7, #4]
 800981c:	e000      	b.n	8009820 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800981e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d06e      	beq.n	8009904 <pvPortMalloc+0x178>
 8009826:	4b45      	ldr	r3, [pc, #276]	; (800993c <pvPortMalloc+0x1b0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	429a      	cmp	r2, r3
 800982e:	d869      	bhi.n	8009904 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009830:	4b43      	ldr	r3, [pc, #268]	; (8009940 <pvPortMalloc+0x1b4>)
 8009832:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8009834:	4b42      	ldr	r3, [pc, #264]	; (8009940 <pvPortMalloc+0x1b4>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800983a:	e004      	b.n	8009846 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	429a      	cmp	r2, r3
 800984e:	d903      	bls.n	8009858 <pvPortMalloc+0xcc>
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1f1      	bne.n	800983c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8009858:	4b36      	ldr	r3, [pc, #216]	; (8009934 <pvPortMalloc+0x1a8>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985e:	429a      	cmp	r2, r3
 8009860:	d050      	beq.n	8009904 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2208      	movs	r2, #8
 8009868:	4413      	add	r3, r2
 800986a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	1ad2      	subs	r2, r2, r3
 800987c:	2308      	movs	r3, #8
 800987e:	005b      	lsls	r3, r3, #1
 8009880:	429a      	cmp	r2, r3
 8009882:	d91f      	bls.n	80098c4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4413      	add	r3, r2
 800988a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00a      	beq.n	80098ac <pvPortMalloc+0x120>
        __asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	613b      	str	r3, [r7, #16]
    }
 80098a8:	bf00      	nop
 80098aa:	e7fe      	b.n	80098aa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	1ad2      	subs	r2, r2, r3
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098be:	69b8      	ldr	r0, [r7, #24]
 80098c0:	f000 f908 	bl	8009ad4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098c4:	4b1d      	ldr	r3, [pc, #116]	; (800993c <pvPortMalloc+0x1b0>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	4a1b      	ldr	r2, [pc, #108]	; (800993c <pvPortMalloc+0x1b0>)
 80098d0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098d2:	4b1a      	ldr	r3, [pc, #104]	; (800993c <pvPortMalloc+0x1b0>)
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	4b1b      	ldr	r3, [pc, #108]	; (8009944 <pvPortMalloc+0x1b8>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d203      	bcs.n	80098e6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098de:	4b17      	ldr	r3, [pc, #92]	; (800993c <pvPortMalloc+0x1b0>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a18      	ldr	r2, [pc, #96]	; (8009944 <pvPortMalloc+0x1b8>)
 80098e4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	685a      	ldr	r2, [r3, #4]
 80098ea:	4b13      	ldr	r3, [pc, #76]	; (8009938 <pvPortMalloc+0x1ac>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	431a      	orrs	r2, r3
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	2200      	movs	r2, #0
 80098f8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80098fa:	4b13      	ldr	r3, [pc, #76]	; (8009948 <pvPortMalloc+0x1bc>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3301      	adds	r3, #1
 8009900:	4a11      	ldr	r2, [pc, #68]	; (8009948 <pvPortMalloc+0x1bc>)
 8009902:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009904:	f7fe fa56 	bl	8007db4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	f003 0307 	and.w	r3, r3, #7
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00a      	beq.n	8009928 <pvPortMalloc+0x19c>
        __asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	60fb      	str	r3, [r7, #12]
    }
 8009924:	bf00      	nop
 8009926:	e7fe      	b.n	8009926 <pvPortMalloc+0x19a>
    return pvReturn;
 8009928:	69fb      	ldr	r3, [r7, #28]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3728      	adds	r7, #40	; 0x28
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20012f90 	.word	0x20012f90
 8009938:	20012fa4 	.word	0x20012fa4
 800993c:	20012f94 	.word	0x20012f94
 8009940:	20012f88 	.word	0x20012f88
 8009944:	20012f98 	.word	0x20012f98
 8009948:	20012f9c 	.word	0x20012f9c

0800994c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d04d      	beq.n	80099fa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800995e:	2308      	movs	r3, #8
 8009960:	425b      	negs	r3, r3
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	4413      	add	r3, r2
 8009966:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	4b24      	ldr	r3, [pc, #144]	; (8009a04 <vPortFree+0xb8>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4013      	ands	r3, r2
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10a      	bne.n	8009990 <vPortFree+0x44>
        __asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	60fb      	str	r3, [r7, #12]
    }
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00a      	beq.n	80099ae <vPortFree+0x62>
        __asm volatile
 8009998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	60bb      	str	r3, [r7, #8]
    }
 80099aa:	bf00      	nop
 80099ac:	e7fe      	b.n	80099ac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	4b14      	ldr	r3, [pc, #80]	; (8009a04 <vPortFree+0xb8>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4013      	ands	r3, r2
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d01e      	beq.n	80099fa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d11a      	bne.n	80099fa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	4b0e      	ldr	r3, [pc, #56]	; (8009a04 <vPortFree+0xb8>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	43db      	mvns	r3, r3
 80099ce:	401a      	ands	r2, r3
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80099d4:	f7fe f9e0 	bl	8007d98 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <vPortFree+0xbc>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4413      	add	r3, r2
 80099e2:	4a09      	ldr	r2, [pc, #36]	; (8009a08 <vPortFree+0xbc>)
 80099e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099e6:	6938      	ldr	r0, [r7, #16]
 80099e8:	f000 f874 	bl	8009ad4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80099ec:	4b07      	ldr	r3, [pc, #28]	; (8009a0c <vPortFree+0xc0>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3301      	adds	r3, #1
 80099f2:	4a06      	ldr	r2, [pc, #24]	; (8009a0c <vPortFree+0xc0>)
 80099f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80099f6:	f7fe f9dd 	bl	8007db4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80099fa:	bf00      	nop
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20012fa4 	.word	0x20012fa4
 8009a08:	20012f94 	.word	0x20012f94
 8009a0c:	20012fa0 	.word	0x20012fa0

08009a10 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8009a1a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8009a1c:	4b27      	ldr	r3, [pc, #156]	; (8009abc <prvHeapInit+0xac>)
 8009a1e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f003 0307 	and.w	r3, r3, #7
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00c      	beq.n	8009a44 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3307      	adds	r3, #7
 8009a2e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f023 0307 	bic.w	r3, r3, #7
 8009a36:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	4a1f      	ldr	r2, [pc, #124]	; (8009abc <prvHeapInit+0xac>)
 8009a40:	4413      	add	r3, r2
 8009a42:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a48:	4a1d      	ldr	r2, [pc, #116]	; (8009ac0 <prvHeapInit+0xb0>)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8009a4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ac0 <prvHeapInit+0xb0>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	4413      	add	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8009a5c:	2208      	movs	r2, #8
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	1a9b      	subs	r3, r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f023 0307 	bic.w	r3, r3, #7
 8009a6a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4a15      	ldr	r2, [pc, #84]	; (8009ac4 <prvHeapInit+0xb4>)
 8009a70:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009a72:	4b14      	ldr	r3, [pc, #80]	; (8009ac4 <prvHeapInit+0xb4>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2200      	movs	r2, #0
 8009a78:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8009a7a:	4b12      	ldr	r3, [pc, #72]	; (8009ac4 <prvHeapInit+0xb4>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	1ad2      	subs	r2, r2, r3
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a90:	4b0c      	ldr	r3, [pc, #48]	; (8009ac4 <prvHeapInit+0xb4>)
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	4a0a      	ldr	r2, [pc, #40]	; (8009ac8 <prvHeapInit+0xb8>)
 8009a9e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	4a09      	ldr	r2, [pc, #36]	; (8009acc <prvHeapInit+0xbc>)
 8009aa6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009aa8:	4b09      	ldr	r3, [pc, #36]	; (8009ad0 <prvHeapInit+0xc0>)
 8009aaa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009aae:	601a      	str	r2, [r3, #0]
}
 8009ab0:	bf00      	nop
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	20000388 	.word	0x20000388
 8009ac0:	20012f88 	.word	0x20012f88
 8009ac4:	20012f90 	.word	0x20012f90
 8009ac8:	20012f98 	.word	0x20012f98
 8009acc:	20012f94 	.word	0x20012f94
 8009ad0:	20012fa4 	.word	0x20012fa4

08009ad4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009adc:	4b28      	ldr	r3, [pc, #160]	; (8009b80 <prvInsertBlockIntoFreeList+0xac>)
 8009ade:	60fb      	str	r3, [r7, #12]
 8009ae0:	e002      	b.n	8009ae8 <prvInsertBlockIntoFreeList+0x14>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	60fb      	str	r3, [r7, #12]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d8f7      	bhi.n	8009ae2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	4413      	add	r3, r2
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d108      	bne.n	8009b16 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	441a      	add	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	441a      	add	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d118      	bne.n	8009b5c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	4b15      	ldr	r3, [pc, #84]	; (8009b84 <prvInsertBlockIntoFreeList+0xb0>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d00d      	beq.n	8009b52 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	441a      	add	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	e008      	b.n	8009b64 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b52:	4b0c      	ldr	r3, [pc, #48]	; (8009b84 <prvInsertBlockIntoFreeList+0xb0>)
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	e003      	b.n	8009b64 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d002      	beq.n	8009b72 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009b72:	bf00      	nop
 8009b74:	3714      	adds	r7, #20
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	20012f88 	.word	0x20012f88
 8009b84:	20012f90 	.word	0x20012f90

08009b88 <__errno>:
 8009b88:	4b01      	ldr	r3, [pc, #4]	; (8009b90 <__errno+0x8>)
 8009b8a:	6818      	ldr	r0, [r3, #0]
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20000024 	.word	0x20000024

08009b94 <__libc_init_array>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	4d0d      	ldr	r5, [pc, #52]	; (8009bcc <__libc_init_array+0x38>)
 8009b98:	4c0d      	ldr	r4, [pc, #52]	; (8009bd0 <__libc_init_array+0x3c>)
 8009b9a:	1b64      	subs	r4, r4, r5
 8009b9c:	10a4      	asrs	r4, r4, #2
 8009b9e:	2600      	movs	r6, #0
 8009ba0:	42a6      	cmp	r6, r4
 8009ba2:	d109      	bne.n	8009bb8 <__libc_init_array+0x24>
 8009ba4:	4d0b      	ldr	r5, [pc, #44]	; (8009bd4 <__libc_init_array+0x40>)
 8009ba6:	4c0c      	ldr	r4, [pc, #48]	; (8009bd8 <__libc_init_array+0x44>)
 8009ba8:	f000 fc8e 	bl	800a4c8 <_init>
 8009bac:	1b64      	subs	r4, r4, r5
 8009bae:	10a4      	asrs	r4, r4, #2
 8009bb0:	2600      	movs	r6, #0
 8009bb2:	42a6      	cmp	r6, r4
 8009bb4:	d105      	bne.n	8009bc2 <__libc_init_array+0x2e>
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}
 8009bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bbc:	4798      	blx	r3
 8009bbe:	3601      	adds	r6, #1
 8009bc0:	e7ee      	b.n	8009ba0 <__libc_init_array+0xc>
 8009bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc6:	4798      	blx	r3
 8009bc8:	3601      	adds	r6, #1
 8009bca:	e7f2      	b.n	8009bb2 <__libc_init_array+0x1e>
 8009bcc:	0800a8c8 	.word	0x0800a8c8
 8009bd0:	0800a8c8 	.word	0x0800a8c8
 8009bd4:	0800a8c8 	.word	0x0800a8c8
 8009bd8:	0800a8cc 	.word	0x0800a8cc

08009bdc <memcpy>:
 8009bdc:	440a      	add	r2, r1
 8009bde:	4291      	cmp	r1, r2
 8009be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009be4:	d100      	bne.n	8009be8 <memcpy+0xc>
 8009be6:	4770      	bx	lr
 8009be8:	b510      	push	{r4, lr}
 8009bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bf2:	4291      	cmp	r1, r2
 8009bf4:	d1f9      	bne.n	8009bea <memcpy+0xe>
 8009bf6:	bd10      	pop	{r4, pc}

08009bf8 <memset>:
 8009bf8:	4402      	add	r2, r0
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d100      	bne.n	8009c02 <memset+0xa>
 8009c00:	4770      	bx	lr
 8009c02:	f803 1b01 	strb.w	r1, [r3], #1
 8009c06:	e7f9      	b.n	8009bfc <memset+0x4>

08009c08 <siprintf>:
 8009c08:	b40e      	push	{r1, r2, r3}
 8009c0a:	b500      	push	{lr}
 8009c0c:	b09c      	sub	sp, #112	; 0x70
 8009c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c10:	9002      	str	r0, [sp, #8]
 8009c12:	9006      	str	r0, [sp, #24]
 8009c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c18:	4809      	ldr	r0, [pc, #36]	; (8009c40 <siprintf+0x38>)
 8009c1a:	9107      	str	r1, [sp, #28]
 8009c1c:	9104      	str	r1, [sp, #16]
 8009c1e:	4909      	ldr	r1, [pc, #36]	; (8009c44 <siprintf+0x3c>)
 8009c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c24:	9105      	str	r1, [sp, #20]
 8009c26:	6800      	ldr	r0, [r0, #0]
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	a902      	add	r1, sp, #8
 8009c2c:	f000 f868 	bl	8009d00 <_svfiprintf_r>
 8009c30:	9b02      	ldr	r3, [sp, #8]
 8009c32:	2200      	movs	r2, #0
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	b01c      	add	sp, #112	; 0x70
 8009c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c3c:	b003      	add	sp, #12
 8009c3e:	4770      	bx	lr
 8009c40:	20000024 	.word	0x20000024
 8009c44:	ffff0208 	.word	0xffff0208

08009c48 <__ssputs_r>:
 8009c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c4c:	688e      	ldr	r6, [r1, #8]
 8009c4e:	429e      	cmp	r6, r3
 8009c50:	4682      	mov	sl, r0
 8009c52:	460c      	mov	r4, r1
 8009c54:	4690      	mov	r8, r2
 8009c56:	461f      	mov	r7, r3
 8009c58:	d838      	bhi.n	8009ccc <__ssputs_r+0x84>
 8009c5a:	898a      	ldrh	r2, [r1, #12]
 8009c5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c60:	d032      	beq.n	8009cc8 <__ssputs_r+0x80>
 8009c62:	6825      	ldr	r5, [r4, #0]
 8009c64:	6909      	ldr	r1, [r1, #16]
 8009c66:	eba5 0901 	sub.w	r9, r5, r1
 8009c6a:	6965      	ldr	r5, [r4, #20]
 8009c6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c74:	3301      	adds	r3, #1
 8009c76:	444b      	add	r3, r9
 8009c78:	106d      	asrs	r5, r5, #1
 8009c7a:	429d      	cmp	r5, r3
 8009c7c:	bf38      	it	cc
 8009c7e:	461d      	movcc	r5, r3
 8009c80:	0553      	lsls	r3, r2, #21
 8009c82:	d531      	bpl.n	8009ce8 <__ssputs_r+0xa0>
 8009c84:	4629      	mov	r1, r5
 8009c86:	f000 fb55 	bl	800a334 <_malloc_r>
 8009c8a:	4606      	mov	r6, r0
 8009c8c:	b950      	cbnz	r0, 8009ca4 <__ssputs_r+0x5c>
 8009c8e:	230c      	movs	r3, #12
 8009c90:	f8ca 3000 	str.w	r3, [sl]
 8009c94:	89a3      	ldrh	r3, [r4, #12]
 8009c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca4:	6921      	ldr	r1, [r4, #16]
 8009ca6:	464a      	mov	r2, r9
 8009ca8:	f7ff ff98 	bl	8009bdc <memcpy>
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb6:	81a3      	strh	r3, [r4, #12]
 8009cb8:	6126      	str	r6, [r4, #16]
 8009cba:	6165      	str	r5, [r4, #20]
 8009cbc:	444e      	add	r6, r9
 8009cbe:	eba5 0509 	sub.w	r5, r5, r9
 8009cc2:	6026      	str	r6, [r4, #0]
 8009cc4:	60a5      	str	r5, [r4, #8]
 8009cc6:	463e      	mov	r6, r7
 8009cc8:	42be      	cmp	r6, r7
 8009cca:	d900      	bls.n	8009cce <__ssputs_r+0x86>
 8009ccc:	463e      	mov	r6, r7
 8009cce:	6820      	ldr	r0, [r4, #0]
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	4641      	mov	r1, r8
 8009cd4:	f000 faa8 	bl	800a228 <memmove>
 8009cd8:	68a3      	ldr	r3, [r4, #8]
 8009cda:	1b9b      	subs	r3, r3, r6
 8009cdc:	60a3      	str	r3, [r4, #8]
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	4433      	add	r3, r6
 8009ce2:	6023      	str	r3, [r4, #0]
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	e7db      	b.n	8009ca0 <__ssputs_r+0x58>
 8009ce8:	462a      	mov	r2, r5
 8009cea:	f000 fb97 	bl	800a41c <_realloc_r>
 8009cee:	4606      	mov	r6, r0
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d1e1      	bne.n	8009cb8 <__ssputs_r+0x70>
 8009cf4:	6921      	ldr	r1, [r4, #16]
 8009cf6:	4650      	mov	r0, sl
 8009cf8:	f000 fab0 	bl	800a25c <_free_r>
 8009cfc:	e7c7      	b.n	8009c8e <__ssputs_r+0x46>
	...

08009d00 <_svfiprintf_r>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	4698      	mov	r8, r3
 8009d06:	898b      	ldrh	r3, [r1, #12]
 8009d08:	061b      	lsls	r3, r3, #24
 8009d0a:	b09d      	sub	sp, #116	; 0x74
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	460d      	mov	r5, r1
 8009d10:	4614      	mov	r4, r2
 8009d12:	d50e      	bpl.n	8009d32 <_svfiprintf_r+0x32>
 8009d14:	690b      	ldr	r3, [r1, #16]
 8009d16:	b963      	cbnz	r3, 8009d32 <_svfiprintf_r+0x32>
 8009d18:	2140      	movs	r1, #64	; 0x40
 8009d1a:	f000 fb0b 	bl	800a334 <_malloc_r>
 8009d1e:	6028      	str	r0, [r5, #0]
 8009d20:	6128      	str	r0, [r5, #16]
 8009d22:	b920      	cbnz	r0, 8009d2e <_svfiprintf_r+0x2e>
 8009d24:	230c      	movs	r3, #12
 8009d26:	603b      	str	r3, [r7, #0]
 8009d28:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2c:	e0d1      	b.n	8009ed2 <_svfiprintf_r+0x1d2>
 8009d2e:	2340      	movs	r3, #64	; 0x40
 8009d30:	616b      	str	r3, [r5, #20]
 8009d32:	2300      	movs	r3, #0
 8009d34:	9309      	str	r3, [sp, #36]	; 0x24
 8009d36:	2320      	movs	r3, #32
 8009d38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d40:	2330      	movs	r3, #48	; 0x30
 8009d42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009eec <_svfiprintf_r+0x1ec>
 8009d46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d4a:	f04f 0901 	mov.w	r9, #1
 8009d4e:	4623      	mov	r3, r4
 8009d50:	469a      	mov	sl, r3
 8009d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d56:	b10a      	cbz	r2, 8009d5c <_svfiprintf_r+0x5c>
 8009d58:	2a25      	cmp	r2, #37	; 0x25
 8009d5a:	d1f9      	bne.n	8009d50 <_svfiprintf_r+0x50>
 8009d5c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d60:	d00b      	beq.n	8009d7a <_svfiprintf_r+0x7a>
 8009d62:	465b      	mov	r3, fp
 8009d64:	4622      	mov	r2, r4
 8009d66:	4629      	mov	r1, r5
 8009d68:	4638      	mov	r0, r7
 8009d6a:	f7ff ff6d 	bl	8009c48 <__ssputs_r>
 8009d6e:	3001      	adds	r0, #1
 8009d70:	f000 80aa 	beq.w	8009ec8 <_svfiprintf_r+0x1c8>
 8009d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d76:	445a      	add	r2, fp
 8009d78:	9209      	str	r2, [sp, #36]	; 0x24
 8009d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f000 80a2 	beq.w	8009ec8 <_svfiprintf_r+0x1c8>
 8009d84:	2300      	movs	r3, #0
 8009d86:	f04f 32ff 	mov.w	r2, #4294967295
 8009d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d8e:	f10a 0a01 	add.w	sl, sl, #1
 8009d92:	9304      	str	r3, [sp, #16]
 8009d94:	9307      	str	r3, [sp, #28]
 8009d96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d9a:	931a      	str	r3, [sp, #104]	; 0x68
 8009d9c:	4654      	mov	r4, sl
 8009d9e:	2205      	movs	r2, #5
 8009da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da4:	4851      	ldr	r0, [pc, #324]	; (8009eec <_svfiprintf_r+0x1ec>)
 8009da6:	f7f6 fa4b 	bl	8000240 <memchr>
 8009daa:	9a04      	ldr	r2, [sp, #16]
 8009dac:	b9d8      	cbnz	r0, 8009de6 <_svfiprintf_r+0xe6>
 8009dae:	06d0      	lsls	r0, r2, #27
 8009db0:	bf44      	itt	mi
 8009db2:	2320      	movmi	r3, #32
 8009db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009db8:	0711      	lsls	r1, r2, #28
 8009dba:	bf44      	itt	mi
 8009dbc:	232b      	movmi	r3, #43	; 0x2b
 8009dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8009dc8:	d015      	beq.n	8009df6 <_svfiprintf_r+0xf6>
 8009dca:	9a07      	ldr	r2, [sp, #28]
 8009dcc:	4654      	mov	r4, sl
 8009dce:	2000      	movs	r0, #0
 8009dd0:	f04f 0c0a 	mov.w	ip, #10
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dda:	3b30      	subs	r3, #48	; 0x30
 8009ddc:	2b09      	cmp	r3, #9
 8009dde:	d94e      	bls.n	8009e7e <_svfiprintf_r+0x17e>
 8009de0:	b1b0      	cbz	r0, 8009e10 <_svfiprintf_r+0x110>
 8009de2:	9207      	str	r2, [sp, #28]
 8009de4:	e014      	b.n	8009e10 <_svfiprintf_r+0x110>
 8009de6:	eba0 0308 	sub.w	r3, r0, r8
 8009dea:	fa09 f303 	lsl.w	r3, r9, r3
 8009dee:	4313      	orrs	r3, r2
 8009df0:	9304      	str	r3, [sp, #16]
 8009df2:	46a2      	mov	sl, r4
 8009df4:	e7d2      	b.n	8009d9c <_svfiprintf_r+0x9c>
 8009df6:	9b03      	ldr	r3, [sp, #12]
 8009df8:	1d19      	adds	r1, r3, #4
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	9103      	str	r1, [sp, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	bfbb      	ittet	lt
 8009e02:	425b      	neglt	r3, r3
 8009e04:	f042 0202 	orrlt.w	r2, r2, #2
 8009e08:	9307      	strge	r3, [sp, #28]
 8009e0a:	9307      	strlt	r3, [sp, #28]
 8009e0c:	bfb8      	it	lt
 8009e0e:	9204      	strlt	r2, [sp, #16]
 8009e10:	7823      	ldrb	r3, [r4, #0]
 8009e12:	2b2e      	cmp	r3, #46	; 0x2e
 8009e14:	d10c      	bne.n	8009e30 <_svfiprintf_r+0x130>
 8009e16:	7863      	ldrb	r3, [r4, #1]
 8009e18:	2b2a      	cmp	r3, #42	; 0x2a
 8009e1a:	d135      	bne.n	8009e88 <_svfiprintf_r+0x188>
 8009e1c:	9b03      	ldr	r3, [sp, #12]
 8009e1e:	1d1a      	adds	r2, r3, #4
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	9203      	str	r2, [sp, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	bfb8      	it	lt
 8009e28:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e2c:	3402      	adds	r4, #2
 8009e2e:	9305      	str	r3, [sp, #20]
 8009e30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009efc <_svfiprintf_r+0x1fc>
 8009e34:	7821      	ldrb	r1, [r4, #0]
 8009e36:	2203      	movs	r2, #3
 8009e38:	4650      	mov	r0, sl
 8009e3a:	f7f6 fa01 	bl	8000240 <memchr>
 8009e3e:	b140      	cbz	r0, 8009e52 <_svfiprintf_r+0x152>
 8009e40:	2340      	movs	r3, #64	; 0x40
 8009e42:	eba0 000a 	sub.w	r0, r0, sl
 8009e46:	fa03 f000 	lsl.w	r0, r3, r0
 8009e4a:	9b04      	ldr	r3, [sp, #16]
 8009e4c:	4303      	orrs	r3, r0
 8009e4e:	3401      	adds	r4, #1
 8009e50:	9304      	str	r3, [sp, #16]
 8009e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e56:	4826      	ldr	r0, [pc, #152]	; (8009ef0 <_svfiprintf_r+0x1f0>)
 8009e58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e5c:	2206      	movs	r2, #6
 8009e5e:	f7f6 f9ef 	bl	8000240 <memchr>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d038      	beq.n	8009ed8 <_svfiprintf_r+0x1d8>
 8009e66:	4b23      	ldr	r3, [pc, #140]	; (8009ef4 <_svfiprintf_r+0x1f4>)
 8009e68:	bb1b      	cbnz	r3, 8009eb2 <_svfiprintf_r+0x1b2>
 8009e6a:	9b03      	ldr	r3, [sp, #12]
 8009e6c:	3307      	adds	r3, #7
 8009e6e:	f023 0307 	bic.w	r3, r3, #7
 8009e72:	3308      	adds	r3, #8
 8009e74:	9303      	str	r3, [sp, #12]
 8009e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e78:	4433      	add	r3, r6
 8009e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e7c:	e767      	b.n	8009d4e <_svfiprintf_r+0x4e>
 8009e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e82:	460c      	mov	r4, r1
 8009e84:	2001      	movs	r0, #1
 8009e86:	e7a5      	b.n	8009dd4 <_svfiprintf_r+0xd4>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	3401      	adds	r4, #1
 8009e8c:	9305      	str	r3, [sp, #20]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	f04f 0c0a 	mov.w	ip, #10
 8009e94:	4620      	mov	r0, r4
 8009e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e9a:	3a30      	subs	r2, #48	; 0x30
 8009e9c:	2a09      	cmp	r2, #9
 8009e9e:	d903      	bls.n	8009ea8 <_svfiprintf_r+0x1a8>
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d0c5      	beq.n	8009e30 <_svfiprintf_r+0x130>
 8009ea4:	9105      	str	r1, [sp, #20]
 8009ea6:	e7c3      	b.n	8009e30 <_svfiprintf_r+0x130>
 8009ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eac:	4604      	mov	r4, r0
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e7f0      	b.n	8009e94 <_svfiprintf_r+0x194>
 8009eb2:	ab03      	add	r3, sp, #12
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	462a      	mov	r2, r5
 8009eb8:	4b0f      	ldr	r3, [pc, #60]	; (8009ef8 <_svfiprintf_r+0x1f8>)
 8009eba:	a904      	add	r1, sp, #16
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	f3af 8000 	nop.w
 8009ec2:	1c42      	adds	r2, r0, #1
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	d1d6      	bne.n	8009e76 <_svfiprintf_r+0x176>
 8009ec8:	89ab      	ldrh	r3, [r5, #12]
 8009eca:	065b      	lsls	r3, r3, #25
 8009ecc:	f53f af2c 	bmi.w	8009d28 <_svfiprintf_r+0x28>
 8009ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ed2:	b01d      	add	sp, #116	; 0x74
 8009ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed8:	ab03      	add	r3, sp, #12
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	462a      	mov	r2, r5
 8009ede:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <_svfiprintf_r+0x1f8>)
 8009ee0:	a904      	add	r1, sp, #16
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	f000 f87a 	bl	8009fdc <_printf_i>
 8009ee8:	e7eb      	b.n	8009ec2 <_svfiprintf_r+0x1c2>
 8009eea:	bf00      	nop
 8009eec:	0800a88c 	.word	0x0800a88c
 8009ef0:	0800a896 	.word	0x0800a896
 8009ef4:	00000000 	.word	0x00000000
 8009ef8:	08009c49 	.word	0x08009c49
 8009efc:	0800a892 	.word	0x0800a892

08009f00 <_printf_common>:
 8009f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f04:	4616      	mov	r6, r2
 8009f06:	4699      	mov	r9, r3
 8009f08:	688a      	ldr	r2, [r1, #8]
 8009f0a:	690b      	ldr	r3, [r1, #16]
 8009f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f10:	4293      	cmp	r3, r2
 8009f12:	bfb8      	it	lt
 8009f14:	4613      	movlt	r3, r2
 8009f16:	6033      	str	r3, [r6, #0]
 8009f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	460c      	mov	r4, r1
 8009f20:	b10a      	cbz	r2, 8009f26 <_printf_common+0x26>
 8009f22:	3301      	adds	r3, #1
 8009f24:	6033      	str	r3, [r6, #0]
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	0699      	lsls	r1, r3, #26
 8009f2a:	bf42      	ittt	mi
 8009f2c:	6833      	ldrmi	r3, [r6, #0]
 8009f2e:	3302      	addmi	r3, #2
 8009f30:	6033      	strmi	r3, [r6, #0]
 8009f32:	6825      	ldr	r5, [r4, #0]
 8009f34:	f015 0506 	ands.w	r5, r5, #6
 8009f38:	d106      	bne.n	8009f48 <_printf_common+0x48>
 8009f3a:	f104 0a19 	add.w	sl, r4, #25
 8009f3e:	68e3      	ldr	r3, [r4, #12]
 8009f40:	6832      	ldr	r2, [r6, #0]
 8009f42:	1a9b      	subs	r3, r3, r2
 8009f44:	42ab      	cmp	r3, r5
 8009f46:	dc26      	bgt.n	8009f96 <_printf_common+0x96>
 8009f48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f4c:	1e13      	subs	r3, r2, #0
 8009f4e:	6822      	ldr	r2, [r4, #0]
 8009f50:	bf18      	it	ne
 8009f52:	2301      	movne	r3, #1
 8009f54:	0692      	lsls	r2, r2, #26
 8009f56:	d42b      	bmi.n	8009fb0 <_printf_common+0xb0>
 8009f58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	4638      	mov	r0, r7
 8009f60:	47c0      	blx	r8
 8009f62:	3001      	adds	r0, #1
 8009f64:	d01e      	beq.n	8009fa4 <_printf_common+0xa4>
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	68e5      	ldr	r5, [r4, #12]
 8009f6a:	6832      	ldr	r2, [r6, #0]
 8009f6c:	f003 0306 	and.w	r3, r3, #6
 8009f70:	2b04      	cmp	r3, #4
 8009f72:	bf08      	it	eq
 8009f74:	1aad      	subeq	r5, r5, r2
 8009f76:	68a3      	ldr	r3, [r4, #8]
 8009f78:	6922      	ldr	r2, [r4, #16]
 8009f7a:	bf0c      	ite	eq
 8009f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f80:	2500      	movne	r5, #0
 8009f82:	4293      	cmp	r3, r2
 8009f84:	bfc4      	itt	gt
 8009f86:	1a9b      	subgt	r3, r3, r2
 8009f88:	18ed      	addgt	r5, r5, r3
 8009f8a:	2600      	movs	r6, #0
 8009f8c:	341a      	adds	r4, #26
 8009f8e:	42b5      	cmp	r5, r6
 8009f90:	d11a      	bne.n	8009fc8 <_printf_common+0xc8>
 8009f92:	2000      	movs	r0, #0
 8009f94:	e008      	b.n	8009fa8 <_printf_common+0xa8>
 8009f96:	2301      	movs	r3, #1
 8009f98:	4652      	mov	r2, sl
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	47c0      	blx	r8
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	d103      	bne.n	8009fac <_printf_common+0xac>
 8009fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fac:	3501      	adds	r5, #1
 8009fae:	e7c6      	b.n	8009f3e <_printf_common+0x3e>
 8009fb0:	18e1      	adds	r1, r4, r3
 8009fb2:	1c5a      	adds	r2, r3, #1
 8009fb4:	2030      	movs	r0, #48	; 0x30
 8009fb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fba:	4422      	add	r2, r4
 8009fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fc4:	3302      	adds	r3, #2
 8009fc6:	e7c7      	b.n	8009f58 <_printf_common+0x58>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	4622      	mov	r2, r4
 8009fcc:	4649      	mov	r1, r9
 8009fce:	4638      	mov	r0, r7
 8009fd0:	47c0      	blx	r8
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d0e6      	beq.n	8009fa4 <_printf_common+0xa4>
 8009fd6:	3601      	adds	r6, #1
 8009fd8:	e7d9      	b.n	8009f8e <_printf_common+0x8e>
	...

08009fdc <_printf_i>:
 8009fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe0:	7e0f      	ldrb	r7, [r1, #24]
 8009fe2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fe4:	2f78      	cmp	r7, #120	; 0x78
 8009fe6:	4691      	mov	r9, r2
 8009fe8:	4680      	mov	r8, r0
 8009fea:	460c      	mov	r4, r1
 8009fec:	469a      	mov	sl, r3
 8009fee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ff2:	d807      	bhi.n	800a004 <_printf_i+0x28>
 8009ff4:	2f62      	cmp	r7, #98	; 0x62
 8009ff6:	d80a      	bhi.n	800a00e <_printf_i+0x32>
 8009ff8:	2f00      	cmp	r7, #0
 8009ffa:	f000 80d8 	beq.w	800a1ae <_printf_i+0x1d2>
 8009ffe:	2f58      	cmp	r7, #88	; 0x58
 800a000:	f000 80a3 	beq.w	800a14a <_printf_i+0x16e>
 800a004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a00c:	e03a      	b.n	800a084 <_printf_i+0xa8>
 800a00e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a012:	2b15      	cmp	r3, #21
 800a014:	d8f6      	bhi.n	800a004 <_printf_i+0x28>
 800a016:	a101      	add	r1, pc, #4	; (adr r1, 800a01c <_printf_i+0x40>)
 800a018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a01c:	0800a075 	.word	0x0800a075
 800a020:	0800a089 	.word	0x0800a089
 800a024:	0800a005 	.word	0x0800a005
 800a028:	0800a005 	.word	0x0800a005
 800a02c:	0800a005 	.word	0x0800a005
 800a030:	0800a005 	.word	0x0800a005
 800a034:	0800a089 	.word	0x0800a089
 800a038:	0800a005 	.word	0x0800a005
 800a03c:	0800a005 	.word	0x0800a005
 800a040:	0800a005 	.word	0x0800a005
 800a044:	0800a005 	.word	0x0800a005
 800a048:	0800a195 	.word	0x0800a195
 800a04c:	0800a0b9 	.word	0x0800a0b9
 800a050:	0800a177 	.word	0x0800a177
 800a054:	0800a005 	.word	0x0800a005
 800a058:	0800a005 	.word	0x0800a005
 800a05c:	0800a1b7 	.word	0x0800a1b7
 800a060:	0800a005 	.word	0x0800a005
 800a064:	0800a0b9 	.word	0x0800a0b9
 800a068:	0800a005 	.word	0x0800a005
 800a06c:	0800a005 	.word	0x0800a005
 800a070:	0800a17f 	.word	0x0800a17f
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	1d1a      	adds	r2, r3, #4
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	602a      	str	r2, [r5, #0]
 800a07c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a084:	2301      	movs	r3, #1
 800a086:	e0a3      	b.n	800a1d0 <_printf_i+0x1f4>
 800a088:	6820      	ldr	r0, [r4, #0]
 800a08a:	6829      	ldr	r1, [r5, #0]
 800a08c:	0606      	lsls	r6, r0, #24
 800a08e:	f101 0304 	add.w	r3, r1, #4
 800a092:	d50a      	bpl.n	800a0aa <_printf_i+0xce>
 800a094:	680e      	ldr	r6, [r1, #0]
 800a096:	602b      	str	r3, [r5, #0]
 800a098:	2e00      	cmp	r6, #0
 800a09a:	da03      	bge.n	800a0a4 <_printf_i+0xc8>
 800a09c:	232d      	movs	r3, #45	; 0x2d
 800a09e:	4276      	negs	r6, r6
 800a0a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0a4:	485e      	ldr	r0, [pc, #376]	; (800a220 <_printf_i+0x244>)
 800a0a6:	230a      	movs	r3, #10
 800a0a8:	e019      	b.n	800a0de <_printf_i+0x102>
 800a0aa:	680e      	ldr	r6, [r1, #0]
 800a0ac:	602b      	str	r3, [r5, #0]
 800a0ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0b2:	bf18      	it	ne
 800a0b4:	b236      	sxthne	r6, r6
 800a0b6:	e7ef      	b.n	800a098 <_printf_i+0xbc>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	6820      	ldr	r0, [r4, #0]
 800a0bc:	1d19      	adds	r1, r3, #4
 800a0be:	6029      	str	r1, [r5, #0]
 800a0c0:	0601      	lsls	r1, r0, #24
 800a0c2:	d501      	bpl.n	800a0c8 <_printf_i+0xec>
 800a0c4:	681e      	ldr	r6, [r3, #0]
 800a0c6:	e002      	b.n	800a0ce <_printf_i+0xf2>
 800a0c8:	0646      	lsls	r6, r0, #25
 800a0ca:	d5fb      	bpl.n	800a0c4 <_printf_i+0xe8>
 800a0cc:	881e      	ldrh	r6, [r3, #0]
 800a0ce:	4854      	ldr	r0, [pc, #336]	; (800a220 <_printf_i+0x244>)
 800a0d0:	2f6f      	cmp	r7, #111	; 0x6f
 800a0d2:	bf0c      	ite	eq
 800a0d4:	2308      	moveq	r3, #8
 800a0d6:	230a      	movne	r3, #10
 800a0d8:	2100      	movs	r1, #0
 800a0da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0de:	6865      	ldr	r5, [r4, #4]
 800a0e0:	60a5      	str	r5, [r4, #8]
 800a0e2:	2d00      	cmp	r5, #0
 800a0e4:	bfa2      	ittt	ge
 800a0e6:	6821      	ldrge	r1, [r4, #0]
 800a0e8:	f021 0104 	bicge.w	r1, r1, #4
 800a0ec:	6021      	strge	r1, [r4, #0]
 800a0ee:	b90e      	cbnz	r6, 800a0f4 <_printf_i+0x118>
 800a0f0:	2d00      	cmp	r5, #0
 800a0f2:	d04d      	beq.n	800a190 <_printf_i+0x1b4>
 800a0f4:	4615      	mov	r5, r2
 800a0f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0fa:	fb03 6711 	mls	r7, r3, r1, r6
 800a0fe:	5dc7      	ldrb	r7, [r0, r7]
 800a100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a104:	4637      	mov	r7, r6
 800a106:	42bb      	cmp	r3, r7
 800a108:	460e      	mov	r6, r1
 800a10a:	d9f4      	bls.n	800a0f6 <_printf_i+0x11a>
 800a10c:	2b08      	cmp	r3, #8
 800a10e:	d10b      	bne.n	800a128 <_printf_i+0x14c>
 800a110:	6823      	ldr	r3, [r4, #0]
 800a112:	07de      	lsls	r6, r3, #31
 800a114:	d508      	bpl.n	800a128 <_printf_i+0x14c>
 800a116:	6923      	ldr	r3, [r4, #16]
 800a118:	6861      	ldr	r1, [r4, #4]
 800a11a:	4299      	cmp	r1, r3
 800a11c:	bfde      	ittt	le
 800a11e:	2330      	movle	r3, #48	; 0x30
 800a120:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a124:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a128:	1b52      	subs	r2, r2, r5
 800a12a:	6122      	str	r2, [r4, #16]
 800a12c:	f8cd a000 	str.w	sl, [sp]
 800a130:	464b      	mov	r3, r9
 800a132:	aa03      	add	r2, sp, #12
 800a134:	4621      	mov	r1, r4
 800a136:	4640      	mov	r0, r8
 800a138:	f7ff fee2 	bl	8009f00 <_printf_common>
 800a13c:	3001      	adds	r0, #1
 800a13e:	d14c      	bne.n	800a1da <_printf_i+0x1fe>
 800a140:	f04f 30ff 	mov.w	r0, #4294967295
 800a144:	b004      	add	sp, #16
 800a146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a14a:	4835      	ldr	r0, [pc, #212]	; (800a220 <_printf_i+0x244>)
 800a14c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a150:	6829      	ldr	r1, [r5, #0]
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	f851 6b04 	ldr.w	r6, [r1], #4
 800a158:	6029      	str	r1, [r5, #0]
 800a15a:	061d      	lsls	r5, r3, #24
 800a15c:	d514      	bpl.n	800a188 <_printf_i+0x1ac>
 800a15e:	07df      	lsls	r7, r3, #31
 800a160:	bf44      	itt	mi
 800a162:	f043 0320 	orrmi.w	r3, r3, #32
 800a166:	6023      	strmi	r3, [r4, #0]
 800a168:	b91e      	cbnz	r6, 800a172 <_printf_i+0x196>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	f023 0320 	bic.w	r3, r3, #32
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	2310      	movs	r3, #16
 800a174:	e7b0      	b.n	800a0d8 <_printf_i+0xfc>
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	f043 0320 	orr.w	r3, r3, #32
 800a17c:	6023      	str	r3, [r4, #0]
 800a17e:	2378      	movs	r3, #120	; 0x78
 800a180:	4828      	ldr	r0, [pc, #160]	; (800a224 <_printf_i+0x248>)
 800a182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a186:	e7e3      	b.n	800a150 <_printf_i+0x174>
 800a188:	0659      	lsls	r1, r3, #25
 800a18a:	bf48      	it	mi
 800a18c:	b2b6      	uxthmi	r6, r6
 800a18e:	e7e6      	b.n	800a15e <_printf_i+0x182>
 800a190:	4615      	mov	r5, r2
 800a192:	e7bb      	b.n	800a10c <_printf_i+0x130>
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	6826      	ldr	r6, [r4, #0]
 800a198:	6961      	ldr	r1, [r4, #20]
 800a19a:	1d18      	adds	r0, r3, #4
 800a19c:	6028      	str	r0, [r5, #0]
 800a19e:	0635      	lsls	r5, r6, #24
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	d501      	bpl.n	800a1a8 <_printf_i+0x1cc>
 800a1a4:	6019      	str	r1, [r3, #0]
 800a1a6:	e002      	b.n	800a1ae <_printf_i+0x1d2>
 800a1a8:	0670      	lsls	r0, r6, #25
 800a1aa:	d5fb      	bpl.n	800a1a4 <_printf_i+0x1c8>
 800a1ac:	8019      	strh	r1, [r3, #0]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	6123      	str	r3, [r4, #16]
 800a1b2:	4615      	mov	r5, r2
 800a1b4:	e7ba      	b.n	800a12c <_printf_i+0x150>
 800a1b6:	682b      	ldr	r3, [r5, #0]
 800a1b8:	1d1a      	adds	r2, r3, #4
 800a1ba:	602a      	str	r2, [r5, #0]
 800a1bc:	681d      	ldr	r5, [r3, #0]
 800a1be:	6862      	ldr	r2, [r4, #4]
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f7f6 f83c 	bl	8000240 <memchr>
 800a1c8:	b108      	cbz	r0, 800a1ce <_printf_i+0x1f2>
 800a1ca:	1b40      	subs	r0, r0, r5
 800a1cc:	6060      	str	r0, [r4, #4]
 800a1ce:	6863      	ldr	r3, [r4, #4]
 800a1d0:	6123      	str	r3, [r4, #16]
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1d8:	e7a8      	b.n	800a12c <_printf_i+0x150>
 800a1da:	6923      	ldr	r3, [r4, #16]
 800a1dc:	462a      	mov	r2, r5
 800a1de:	4649      	mov	r1, r9
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	47d0      	blx	sl
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d0ab      	beq.n	800a140 <_printf_i+0x164>
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	079b      	lsls	r3, r3, #30
 800a1ec:	d413      	bmi.n	800a216 <_printf_i+0x23a>
 800a1ee:	68e0      	ldr	r0, [r4, #12]
 800a1f0:	9b03      	ldr	r3, [sp, #12]
 800a1f2:	4298      	cmp	r0, r3
 800a1f4:	bfb8      	it	lt
 800a1f6:	4618      	movlt	r0, r3
 800a1f8:	e7a4      	b.n	800a144 <_printf_i+0x168>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	4632      	mov	r2, r6
 800a1fe:	4649      	mov	r1, r9
 800a200:	4640      	mov	r0, r8
 800a202:	47d0      	blx	sl
 800a204:	3001      	adds	r0, #1
 800a206:	d09b      	beq.n	800a140 <_printf_i+0x164>
 800a208:	3501      	adds	r5, #1
 800a20a:	68e3      	ldr	r3, [r4, #12]
 800a20c:	9903      	ldr	r1, [sp, #12]
 800a20e:	1a5b      	subs	r3, r3, r1
 800a210:	42ab      	cmp	r3, r5
 800a212:	dcf2      	bgt.n	800a1fa <_printf_i+0x21e>
 800a214:	e7eb      	b.n	800a1ee <_printf_i+0x212>
 800a216:	2500      	movs	r5, #0
 800a218:	f104 0619 	add.w	r6, r4, #25
 800a21c:	e7f5      	b.n	800a20a <_printf_i+0x22e>
 800a21e:	bf00      	nop
 800a220:	0800a89d 	.word	0x0800a89d
 800a224:	0800a8ae 	.word	0x0800a8ae

0800a228 <memmove>:
 800a228:	4288      	cmp	r0, r1
 800a22a:	b510      	push	{r4, lr}
 800a22c:	eb01 0402 	add.w	r4, r1, r2
 800a230:	d902      	bls.n	800a238 <memmove+0x10>
 800a232:	4284      	cmp	r4, r0
 800a234:	4623      	mov	r3, r4
 800a236:	d807      	bhi.n	800a248 <memmove+0x20>
 800a238:	1e43      	subs	r3, r0, #1
 800a23a:	42a1      	cmp	r1, r4
 800a23c:	d008      	beq.n	800a250 <memmove+0x28>
 800a23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a246:	e7f8      	b.n	800a23a <memmove+0x12>
 800a248:	4402      	add	r2, r0
 800a24a:	4601      	mov	r1, r0
 800a24c:	428a      	cmp	r2, r1
 800a24e:	d100      	bne.n	800a252 <memmove+0x2a>
 800a250:	bd10      	pop	{r4, pc}
 800a252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a25a:	e7f7      	b.n	800a24c <memmove+0x24>

0800a25c <_free_r>:
 800a25c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a25e:	2900      	cmp	r1, #0
 800a260:	d044      	beq.n	800a2ec <_free_r+0x90>
 800a262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a266:	9001      	str	r0, [sp, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f1a1 0404 	sub.w	r4, r1, #4
 800a26e:	bfb8      	it	lt
 800a270:	18e4      	addlt	r4, r4, r3
 800a272:	f000 f913 	bl	800a49c <__malloc_lock>
 800a276:	4a1e      	ldr	r2, [pc, #120]	; (800a2f0 <_free_r+0x94>)
 800a278:	9801      	ldr	r0, [sp, #4]
 800a27a:	6813      	ldr	r3, [r2, #0]
 800a27c:	b933      	cbnz	r3, 800a28c <_free_r+0x30>
 800a27e:	6063      	str	r3, [r4, #4]
 800a280:	6014      	str	r4, [r2, #0]
 800a282:	b003      	add	sp, #12
 800a284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a288:	f000 b90e 	b.w	800a4a8 <__malloc_unlock>
 800a28c:	42a3      	cmp	r3, r4
 800a28e:	d908      	bls.n	800a2a2 <_free_r+0x46>
 800a290:	6825      	ldr	r5, [r4, #0]
 800a292:	1961      	adds	r1, r4, r5
 800a294:	428b      	cmp	r3, r1
 800a296:	bf01      	itttt	eq
 800a298:	6819      	ldreq	r1, [r3, #0]
 800a29a:	685b      	ldreq	r3, [r3, #4]
 800a29c:	1949      	addeq	r1, r1, r5
 800a29e:	6021      	streq	r1, [r4, #0]
 800a2a0:	e7ed      	b.n	800a27e <_free_r+0x22>
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	b10b      	cbz	r3, 800a2ac <_free_r+0x50>
 800a2a8:	42a3      	cmp	r3, r4
 800a2aa:	d9fa      	bls.n	800a2a2 <_free_r+0x46>
 800a2ac:	6811      	ldr	r1, [r2, #0]
 800a2ae:	1855      	adds	r5, r2, r1
 800a2b0:	42a5      	cmp	r5, r4
 800a2b2:	d10b      	bne.n	800a2cc <_free_r+0x70>
 800a2b4:	6824      	ldr	r4, [r4, #0]
 800a2b6:	4421      	add	r1, r4
 800a2b8:	1854      	adds	r4, r2, r1
 800a2ba:	42a3      	cmp	r3, r4
 800a2bc:	6011      	str	r1, [r2, #0]
 800a2be:	d1e0      	bne.n	800a282 <_free_r+0x26>
 800a2c0:	681c      	ldr	r4, [r3, #0]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	6053      	str	r3, [r2, #4]
 800a2c6:	4421      	add	r1, r4
 800a2c8:	6011      	str	r1, [r2, #0]
 800a2ca:	e7da      	b.n	800a282 <_free_r+0x26>
 800a2cc:	d902      	bls.n	800a2d4 <_free_r+0x78>
 800a2ce:	230c      	movs	r3, #12
 800a2d0:	6003      	str	r3, [r0, #0]
 800a2d2:	e7d6      	b.n	800a282 <_free_r+0x26>
 800a2d4:	6825      	ldr	r5, [r4, #0]
 800a2d6:	1961      	adds	r1, r4, r5
 800a2d8:	428b      	cmp	r3, r1
 800a2da:	bf04      	itt	eq
 800a2dc:	6819      	ldreq	r1, [r3, #0]
 800a2de:	685b      	ldreq	r3, [r3, #4]
 800a2e0:	6063      	str	r3, [r4, #4]
 800a2e2:	bf04      	itt	eq
 800a2e4:	1949      	addeq	r1, r1, r5
 800a2e6:	6021      	streq	r1, [r4, #0]
 800a2e8:	6054      	str	r4, [r2, #4]
 800a2ea:	e7ca      	b.n	800a282 <_free_r+0x26>
 800a2ec:	b003      	add	sp, #12
 800a2ee:	bd30      	pop	{r4, r5, pc}
 800a2f0:	20012fa8 	.word	0x20012fa8

0800a2f4 <sbrk_aligned>:
 800a2f4:	b570      	push	{r4, r5, r6, lr}
 800a2f6:	4e0e      	ldr	r6, [pc, #56]	; (800a330 <sbrk_aligned+0x3c>)
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	6831      	ldr	r1, [r6, #0]
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	b911      	cbnz	r1, 800a306 <sbrk_aligned+0x12>
 800a300:	f000 f8bc 	bl	800a47c <_sbrk_r>
 800a304:	6030      	str	r0, [r6, #0]
 800a306:	4621      	mov	r1, r4
 800a308:	4628      	mov	r0, r5
 800a30a:	f000 f8b7 	bl	800a47c <_sbrk_r>
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	d00a      	beq.n	800a328 <sbrk_aligned+0x34>
 800a312:	1cc4      	adds	r4, r0, #3
 800a314:	f024 0403 	bic.w	r4, r4, #3
 800a318:	42a0      	cmp	r0, r4
 800a31a:	d007      	beq.n	800a32c <sbrk_aligned+0x38>
 800a31c:	1a21      	subs	r1, r4, r0
 800a31e:	4628      	mov	r0, r5
 800a320:	f000 f8ac 	bl	800a47c <_sbrk_r>
 800a324:	3001      	adds	r0, #1
 800a326:	d101      	bne.n	800a32c <sbrk_aligned+0x38>
 800a328:	f04f 34ff 	mov.w	r4, #4294967295
 800a32c:	4620      	mov	r0, r4
 800a32e:	bd70      	pop	{r4, r5, r6, pc}
 800a330:	20012fac 	.word	0x20012fac

0800a334 <_malloc_r>:
 800a334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a338:	1ccd      	adds	r5, r1, #3
 800a33a:	f025 0503 	bic.w	r5, r5, #3
 800a33e:	3508      	adds	r5, #8
 800a340:	2d0c      	cmp	r5, #12
 800a342:	bf38      	it	cc
 800a344:	250c      	movcc	r5, #12
 800a346:	2d00      	cmp	r5, #0
 800a348:	4607      	mov	r7, r0
 800a34a:	db01      	blt.n	800a350 <_malloc_r+0x1c>
 800a34c:	42a9      	cmp	r1, r5
 800a34e:	d905      	bls.n	800a35c <_malloc_r+0x28>
 800a350:	230c      	movs	r3, #12
 800a352:	603b      	str	r3, [r7, #0]
 800a354:	2600      	movs	r6, #0
 800a356:	4630      	mov	r0, r6
 800a358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a35c:	4e2e      	ldr	r6, [pc, #184]	; (800a418 <_malloc_r+0xe4>)
 800a35e:	f000 f89d 	bl	800a49c <__malloc_lock>
 800a362:	6833      	ldr	r3, [r6, #0]
 800a364:	461c      	mov	r4, r3
 800a366:	bb34      	cbnz	r4, 800a3b6 <_malloc_r+0x82>
 800a368:	4629      	mov	r1, r5
 800a36a:	4638      	mov	r0, r7
 800a36c:	f7ff ffc2 	bl	800a2f4 <sbrk_aligned>
 800a370:	1c43      	adds	r3, r0, #1
 800a372:	4604      	mov	r4, r0
 800a374:	d14d      	bne.n	800a412 <_malloc_r+0xde>
 800a376:	6834      	ldr	r4, [r6, #0]
 800a378:	4626      	mov	r6, r4
 800a37a:	2e00      	cmp	r6, #0
 800a37c:	d140      	bne.n	800a400 <_malloc_r+0xcc>
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	4631      	mov	r1, r6
 800a382:	4638      	mov	r0, r7
 800a384:	eb04 0803 	add.w	r8, r4, r3
 800a388:	f000 f878 	bl	800a47c <_sbrk_r>
 800a38c:	4580      	cmp	r8, r0
 800a38e:	d13a      	bne.n	800a406 <_malloc_r+0xd2>
 800a390:	6821      	ldr	r1, [r4, #0]
 800a392:	3503      	adds	r5, #3
 800a394:	1a6d      	subs	r5, r5, r1
 800a396:	f025 0503 	bic.w	r5, r5, #3
 800a39a:	3508      	adds	r5, #8
 800a39c:	2d0c      	cmp	r5, #12
 800a39e:	bf38      	it	cc
 800a3a0:	250c      	movcc	r5, #12
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	4638      	mov	r0, r7
 800a3a6:	f7ff ffa5 	bl	800a2f4 <sbrk_aligned>
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	d02b      	beq.n	800a406 <_malloc_r+0xd2>
 800a3ae:	6823      	ldr	r3, [r4, #0]
 800a3b0:	442b      	add	r3, r5
 800a3b2:	6023      	str	r3, [r4, #0]
 800a3b4:	e00e      	b.n	800a3d4 <_malloc_r+0xa0>
 800a3b6:	6822      	ldr	r2, [r4, #0]
 800a3b8:	1b52      	subs	r2, r2, r5
 800a3ba:	d41e      	bmi.n	800a3fa <_malloc_r+0xc6>
 800a3bc:	2a0b      	cmp	r2, #11
 800a3be:	d916      	bls.n	800a3ee <_malloc_r+0xba>
 800a3c0:	1961      	adds	r1, r4, r5
 800a3c2:	42a3      	cmp	r3, r4
 800a3c4:	6025      	str	r5, [r4, #0]
 800a3c6:	bf18      	it	ne
 800a3c8:	6059      	strne	r1, [r3, #4]
 800a3ca:	6863      	ldr	r3, [r4, #4]
 800a3cc:	bf08      	it	eq
 800a3ce:	6031      	streq	r1, [r6, #0]
 800a3d0:	5162      	str	r2, [r4, r5]
 800a3d2:	604b      	str	r3, [r1, #4]
 800a3d4:	4638      	mov	r0, r7
 800a3d6:	f104 060b 	add.w	r6, r4, #11
 800a3da:	f000 f865 	bl	800a4a8 <__malloc_unlock>
 800a3de:	f026 0607 	bic.w	r6, r6, #7
 800a3e2:	1d23      	adds	r3, r4, #4
 800a3e4:	1af2      	subs	r2, r6, r3
 800a3e6:	d0b6      	beq.n	800a356 <_malloc_r+0x22>
 800a3e8:	1b9b      	subs	r3, r3, r6
 800a3ea:	50a3      	str	r3, [r4, r2]
 800a3ec:	e7b3      	b.n	800a356 <_malloc_r+0x22>
 800a3ee:	6862      	ldr	r2, [r4, #4]
 800a3f0:	42a3      	cmp	r3, r4
 800a3f2:	bf0c      	ite	eq
 800a3f4:	6032      	streq	r2, [r6, #0]
 800a3f6:	605a      	strne	r2, [r3, #4]
 800a3f8:	e7ec      	b.n	800a3d4 <_malloc_r+0xa0>
 800a3fa:	4623      	mov	r3, r4
 800a3fc:	6864      	ldr	r4, [r4, #4]
 800a3fe:	e7b2      	b.n	800a366 <_malloc_r+0x32>
 800a400:	4634      	mov	r4, r6
 800a402:	6876      	ldr	r6, [r6, #4]
 800a404:	e7b9      	b.n	800a37a <_malloc_r+0x46>
 800a406:	230c      	movs	r3, #12
 800a408:	603b      	str	r3, [r7, #0]
 800a40a:	4638      	mov	r0, r7
 800a40c:	f000 f84c 	bl	800a4a8 <__malloc_unlock>
 800a410:	e7a1      	b.n	800a356 <_malloc_r+0x22>
 800a412:	6025      	str	r5, [r4, #0]
 800a414:	e7de      	b.n	800a3d4 <_malloc_r+0xa0>
 800a416:	bf00      	nop
 800a418:	20012fa8 	.word	0x20012fa8

0800a41c <_realloc_r>:
 800a41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a420:	4680      	mov	r8, r0
 800a422:	4614      	mov	r4, r2
 800a424:	460e      	mov	r6, r1
 800a426:	b921      	cbnz	r1, 800a432 <_realloc_r+0x16>
 800a428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a42c:	4611      	mov	r1, r2
 800a42e:	f7ff bf81 	b.w	800a334 <_malloc_r>
 800a432:	b92a      	cbnz	r2, 800a440 <_realloc_r+0x24>
 800a434:	f7ff ff12 	bl	800a25c <_free_r>
 800a438:	4625      	mov	r5, r4
 800a43a:	4628      	mov	r0, r5
 800a43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a440:	f000 f838 	bl	800a4b4 <_malloc_usable_size_r>
 800a444:	4284      	cmp	r4, r0
 800a446:	4607      	mov	r7, r0
 800a448:	d802      	bhi.n	800a450 <_realloc_r+0x34>
 800a44a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a44e:	d812      	bhi.n	800a476 <_realloc_r+0x5a>
 800a450:	4621      	mov	r1, r4
 800a452:	4640      	mov	r0, r8
 800a454:	f7ff ff6e 	bl	800a334 <_malloc_r>
 800a458:	4605      	mov	r5, r0
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d0ed      	beq.n	800a43a <_realloc_r+0x1e>
 800a45e:	42bc      	cmp	r4, r7
 800a460:	4622      	mov	r2, r4
 800a462:	4631      	mov	r1, r6
 800a464:	bf28      	it	cs
 800a466:	463a      	movcs	r2, r7
 800a468:	f7ff fbb8 	bl	8009bdc <memcpy>
 800a46c:	4631      	mov	r1, r6
 800a46e:	4640      	mov	r0, r8
 800a470:	f7ff fef4 	bl	800a25c <_free_r>
 800a474:	e7e1      	b.n	800a43a <_realloc_r+0x1e>
 800a476:	4635      	mov	r5, r6
 800a478:	e7df      	b.n	800a43a <_realloc_r+0x1e>
	...

0800a47c <_sbrk_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d06      	ldr	r5, [pc, #24]	; (800a498 <_sbrk_r+0x1c>)
 800a480:	2300      	movs	r3, #0
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	602b      	str	r3, [r5, #0]
 800a488:	f7f6 ff4e 	bl	8001328 <_sbrk>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_sbrk_r+0x1a>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_sbrk_r+0x1a>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	20012fb0 	.word	0x20012fb0

0800a49c <__malloc_lock>:
 800a49c:	4801      	ldr	r0, [pc, #4]	; (800a4a4 <__malloc_lock+0x8>)
 800a49e:	f000 b811 	b.w	800a4c4 <__retarget_lock_acquire_recursive>
 800a4a2:	bf00      	nop
 800a4a4:	20012fb4 	.word	0x20012fb4

0800a4a8 <__malloc_unlock>:
 800a4a8:	4801      	ldr	r0, [pc, #4]	; (800a4b0 <__malloc_unlock+0x8>)
 800a4aa:	f000 b80c 	b.w	800a4c6 <__retarget_lock_release_recursive>
 800a4ae:	bf00      	nop
 800a4b0:	20012fb4 	.word	0x20012fb4

0800a4b4 <_malloc_usable_size_r>:
 800a4b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b8:	1f18      	subs	r0, r3, #4
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	bfbc      	itt	lt
 800a4be:	580b      	ldrlt	r3, [r1, r0]
 800a4c0:	18c0      	addlt	r0, r0, r3
 800a4c2:	4770      	bx	lr

0800a4c4 <__retarget_lock_acquire_recursive>:
 800a4c4:	4770      	bx	lr

0800a4c6 <__retarget_lock_release_recursive>:
 800a4c6:	4770      	bx	lr

0800a4c8 <_init>:
 800a4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ca:	bf00      	nop
 800a4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ce:	bc08      	pop	{r3}
 800a4d0:	469e      	mov	lr, r3
 800a4d2:	4770      	bx	lr

0800a4d4 <_fini>:
 800a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d6:	bf00      	nop
 800a4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4da:	bc08      	pop	{r3}
 800a4dc:	469e      	mov	lr, r3
 800a4de:	4770      	bx	lr
