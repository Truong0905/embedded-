
LED_RTC_part2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080086a4  080086a4  000186a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008854  08008854  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800885c  0800885c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08008864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ed8  20000020  08008884  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ef8  08008884  00022ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001895c  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003671  00000000  00000000  000389ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0003c020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243a4  00000000  00000000  0003ea00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001acf1  00000000  00000000  00062da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db221  00000000  00000000  0007da95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158cb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005abc  00000000  00000000  00158d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000020 	.word	0x20000020
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800868c 	.word	0x0800868c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000024 	.word	0x20000024
 800020c:	0800868c 	.word	0x0800868c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b974 	b.w	8000534 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	4604      	mov	r4, r0
 800026c:	468e      	mov	lr, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d14d      	bne.n	800030e <__udivmoddi4+0xaa>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d969      	bls.n	800034c <__udivmoddi4+0xe8>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b152      	cbz	r2, 8000294 <__udivmoddi4+0x30>
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	f1c2 0120 	rsb	r1, r2, #32
 8000286:	fa20 f101 	lsr.w	r1, r0, r1
 800028a:	fa0c fc02 	lsl.w	ip, ip, r2
 800028e:	ea41 0e03 	orr.w	lr, r1, r3
 8000292:	4094      	lsls	r4, r2
 8000294:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000298:	0c21      	lsrs	r1, r4, #16
 800029a:	fbbe f6f8 	udiv	r6, lr, r8
 800029e:	fa1f f78c 	uxth.w	r7, ip
 80002a2:	fb08 e316 	mls	r3, r8, r6, lr
 80002a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002aa:	fb06 f107 	mul.w	r1, r6, r7
 80002ae:	4299      	cmp	r1, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x64>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 811f 	bcs.w	80004fc <__udivmoddi4+0x298>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 811c 	bls.w	80004fc <__udivmoddi4+0x298>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x92>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 810a 	bcs.w	8000500 <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8107 	bls.w	8000500 <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	1be4      	subs	r4, r4, r7
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa4>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xc2>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80ef 	beq.w	80004f6 <__udivmoddi4+0x292>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x160>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd4>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80f9 	bhi.w	800052a <__udivmoddi4+0x2c6>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	469e      	mov	lr, r3
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa4>
 8000346:	e9c5 4e00 	strd	r4, lr, [r5]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa4>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xec>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 8092 	bne.w	800047e <__udivmoddi4+0x21a>
 800035a:	eba1 010c 	sub.w	r1, r1, ip
 800035e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000362:	fa1f fe8c 	uxth.w	lr, ip
 8000366:	2601      	movs	r6, #1
 8000368:	0c20      	lsrs	r0, r4, #16
 800036a:	fbb1 f3f7 	udiv	r3, r1, r7
 800036e:	fb07 1113 	mls	r1, r7, r3, r1
 8000372:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000376:	fb0e f003 	mul.w	r0, lr, r3
 800037a:	4288      	cmp	r0, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x12c>
 800037e:	eb1c 0101 	adds.w	r1, ip, r1
 8000382:	f103 38ff 	add.w	r8, r3, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x12a>
 8000388:	4288      	cmp	r0, r1
 800038a:	f200 80cb 	bhi.w	8000524 <__udivmoddi4+0x2c0>
 800038e:	4643      	mov	r3, r8
 8000390:	1a09      	subs	r1, r1, r0
 8000392:	b2a4      	uxth	r4, r4
 8000394:	fbb1 f0f7 	udiv	r0, r1, r7
 8000398:	fb07 1110 	mls	r1, r7, r0, r1
 800039c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a0:	fb0e fe00 	mul.w	lr, lr, r0
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	d908      	bls.n	80003ba <__udivmoddi4+0x156>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b0:	d202      	bcs.n	80003b8 <__udivmoddi4+0x154>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f200 80bb 	bhi.w	800052e <__udivmoddi4+0x2ca>
 80003b8:	4608      	mov	r0, r1
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c2:	e79c      	b.n	80002fe <__udivmoddi4+0x9a>
 80003c4:	f1c6 0720 	rsb	r7, r6, #32
 80003c8:	40b3      	lsls	r3, r6
 80003ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f407 	lsr.w	r4, r0, r7
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	431c      	orrs	r4, r3
 80003dc:	40f9      	lsrs	r1, r7
 80003de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e2:	fa00 f306 	lsl.w	r3, r0, r6
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	0c20      	lsrs	r0, r4, #16
 80003ec:	fa1f fe8c 	uxth.w	lr, ip
 80003f0:	fb09 1118 	mls	r1, r9, r8, r1
 80003f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f8:	fb08 f00e 	mul.w	r0, r8, lr
 80003fc:	4288      	cmp	r0, r1
 80003fe:	fa02 f206 	lsl.w	r2, r2, r6
 8000402:	d90b      	bls.n	800041c <__udivmoddi4+0x1b8>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f108 3aff 	add.w	sl, r8, #4294967295
 800040c:	f080 8088 	bcs.w	8000520 <__udivmoddi4+0x2bc>
 8000410:	4288      	cmp	r0, r1
 8000412:	f240 8085 	bls.w	8000520 <__udivmoddi4+0x2bc>
 8000416:	f1a8 0802 	sub.w	r8, r8, #2
 800041a:	4461      	add	r1, ip
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f9 	udiv	r0, r1, r9
 8000424:	fb09 1110 	mls	r1, r9, r0, r1
 8000428:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000430:	458e      	cmp	lr, r1
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x1e2>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f100 34ff 	add.w	r4, r0, #4294967295
 800043c:	d26c      	bcs.n	8000518 <__udivmoddi4+0x2b4>
 800043e:	458e      	cmp	lr, r1
 8000440:	d96a      	bls.n	8000518 <__udivmoddi4+0x2b4>
 8000442:	3802      	subs	r0, #2
 8000444:	4461      	add	r1, ip
 8000446:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044a:	fba0 9402 	umull	r9, r4, r0, r2
 800044e:	eba1 010e 	sub.w	r1, r1, lr
 8000452:	42a1      	cmp	r1, r4
 8000454:	46c8      	mov	r8, r9
 8000456:	46a6      	mov	lr, r4
 8000458:	d356      	bcc.n	8000508 <__udivmoddi4+0x2a4>
 800045a:	d053      	beq.n	8000504 <__udivmoddi4+0x2a0>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x212>
 800045e:	ebb3 0208 	subs.w	r2, r3, r8
 8000462:	eb61 010e 	sbc.w	r1, r1, lr
 8000466:	fa01 f707 	lsl.w	r7, r1, r7
 800046a:	fa22 f306 	lsr.w	r3, r2, r6
 800046e:	40f1      	lsrs	r1, r6
 8000470:	431f      	orrs	r7, r3
 8000472:	e9c5 7100 	strd	r7, r1, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1c2 0320 	rsb	r3, r2, #32
 8000482:	40d8      	lsrs	r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa21 f303 	lsr.w	r3, r1, r3
 800048c:	4091      	lsls	r1, r2
 800048e:	4301      	orrs	r1, r0
 8000490:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000494:	fa1f fe8c 	uxth.w	lr, ip
 8000498:	fbb3 f0f7 	udiv	r0, r3, r7
 800049c:	fb07 3610 	mls	r6, r7, r0, r3
 80004a0:	0c0b      	lsrs	r3, r1, #16
 80004a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a6:	fb00 f60e 	mul.w	r6, r0, lr
 80004aa:	429e      	cmp	r6, r3
 80004ac:	fa04 f402 	lsl.w	r4, r4, r2
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x260>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ba:	d22f      	bcs.n	800051c <__udivmoddi4+0x2b8>
 80004bc:	429e      	cmp	r6, r3
 80004be:	d92d      	bls.n	800051c <__udivmoddi4+0x2b8>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1b9b      	subs	r3, r3, r6
 80004c6:	b289      	uxth	r1, r1
 80004c8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004cc:	fb07 3316 	mls	r3, r7, r6, r3
 80004d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d4:	fb06 f30e 	mul.w	r3, r6, lr
 80004d8:	428b      	cmp	r3, r1
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x28a>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e4:	d216      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d914      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004ea:	3e02      	subs	r6, #2
 80004ec:	4461      	add	r1, ip
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f4:	e738      	b.n	8000368 <__udivmoddi4+0x104>
 80004f6:	462e      	mov	r6, r5
 80004f8:	4628      	mov	r0, r5
 80004fa:	e705      	b.n	8000308 <__udivmoddi4+0xa4>
 80004fc:	4606      	mov	r6, r0
 80004fe:	e6e3      	b.n	80002c8 <__udivmoddi4+0x64>
 8000500:	4618      	mov	r0, r3
 8000502:	e6f8      	b.n	80002f6 <__udivmoddi4+0x92>
 8000504:	454b      	cmp	r3, r9
 8000506:	d2a9      	bcs.n	800045c <__udivmoddi4+0x1f8>
 8000508:	ebb9 0802 	subs.w	r8, r9, r2
 800050c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000510:	3801      	subs	r0, #1
 8000512:	e7a3      	b.n	800045c <__udivmoddi4+0x1f8>
 8000514:	4646      	mov	r6, r8
 8000516:	e7ea      	b.n	80004ee <__udivmoddi4+0x28a>
 8000518:	4620      	mov	r0, r4
 800051a:	e794      	b.n	8000446 <__udivmoddi4+0x1e2>
 800051c:	4640      	mov	r0, r8
 800051e:	e7d1      	b.n	80004c4 <__udivmoddi4+0x260>
 8000520:	46d0      	mov	r8, sl
 8000522:	e77b      	b.n	800041c <__udivmoddi4+0x1b8>
 8000524:	3b02      	subs	r3, #2
 8000526:	4461      	add	r1, ip
 8000528:	e732      	b.n	8000390 <__udivmoddi4+0x12c>
 800052a:	4630      	mov	r0, r6
 800052c:	e709      	b.n	8000342 <__udivmoddi4+0xde>
 800052e:	4464      	add	r4, ip
 8000530:	3802      	subs	r0, #2
 8000532:	e742      	b.n	80003ba <__udivmoddi4+0x156>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <led_effect_stop>:

#include "main.h"


void led_effect_stop (void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af02      	add	r7, sp, #8
	for ( int i ; i< 4 ; i++)
 800053e:	e00e      	b.n	800055e <led_effect_stop+0x26>
	{
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <led_effect_stop+0x38>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2300      	movs	r3, #0
 8000550:	2200      	movs	r2, #0
 8000552:	2103      	movs	r1, #3
 8000554:	f007 f90e 	bl	8007774 <xTimerGenericCommand>
	for ( int i ; i< 4 ; i++)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3301      	adds	r3, #1
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b03      	cmp	r3, #3
 8000562:	dded      	ble.n	8000540 <led_effect_stop+0x8>
	}
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200000f0 	.word	0x200000f0

08000574 <led_effect>:

void led_effect ( int n)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 800057c:	f7ff ffdc 	bl	8000538 <led_effect_stop>
	xTimerStart (handle_led_timer[n-1], portMAX_DELAY);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3b01      	subs	r3, #1
 8000584:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <led_effect+0x34>)
 8000586:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800058a:	f006 f9f5 	bl	8006978 <xTaskGetTickCount>
 800058e:	4602      	mov	r2, r0
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	2101      	movs	r1, #1
 800059a:	4620      	mov	r0, r4
 800059c:	f007 f8ea 	bl	8007774 <xTimerGenericCommand>
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd90      	pop	{r4, r7, pc}
 80005a8:	200000f0 	.word	0x200000f0

080005ac <turn_off_all_leds>:

void turn_off_all_leds (void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LED1, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b6:	480b      	ldr	r0, [pc, #44]	; (80005e4 <turn_off_all_leds+0x38>)
 80005b8:	f001 fa82 	bl	8001ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED2, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <turn_off_all_leds+0x38>)
 80005c4:	f001 fa7c 	bl	8001ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED3, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <turn_off_all_leds+0x38>)
 80005d0:	f001 fa76 	bl	8001ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2104      	movs	r1, #4
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <turn_off_all_leds+0x3c>)
 80005da:	f001 fa71 	bl	8001ac0 <HAL_GPIO_WritePin>

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020800 	.word	0x40020800
 80005e8:	40020c00 	.word	0x40020c00

080005ec <turn_on_all_leds>:


void turn_on_all_leds (void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LED1, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <turn_on_all_leds+0x38>)
 80005f8:	f001 fa62 	bl	8001ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED2, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000602:	4808      	ldr	r0, [pc, #32]	; (8000624 <turn_on_all_leds+0x38>)
 8000604:	f001 fa5c 	bl	8001ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED3, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <turn_on_all_leds+0x38>)
 8000610:	f001 fa56 	bl	8001ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2104      	movs	r1, #4
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <turn_on_all_leds+0x3c>)
 800061a:	f001 fa51 	bl	8001ac0 <HAL_GPIO_WritePin>

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40020800 	.word	0x40020800
 8000628:	40020c00 	.word	0x40020c00

0800062c <turn_on_even_leds>:

void turn_on_even_leds(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LED1, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <turn_on_even_leds+0x38>)
 8000638:	f001 fa42 	bl	8001ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED2, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <turn_on_even_leds+0x38>)
 8000644:	f001 fa3c 	bl	8001ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED3, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <turn_on_even_leds+0x38>)
 8000650:	f001 fa36 	bl	8001ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2104      	movs	r1, #4
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <turn_on_even_leds+0x3c>)
 800065a:	f001 fa31 	bl	8001ac0 <HAL_GPIO_WritePin>

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020800 	.word	0x40020800
 8000668:	40020c00 	.word	0x40020c00

0800066c <turn_on_odd_leds>:
void turn_on_odd_leds(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LED1, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <turn_on_odd_leds+0x38>)
 8000678:	f001 fa22 	bl	8001ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED2, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000682:	4808      	ldr	r0, [pc, #32]	; (80006a4 <turn_on_odd_leds+0x38>)
 8000684:	f001 fa1c 	bl	8001ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED3, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <turn_on_odd_leds+0x38>)
 8000690:	f001 fa16 	bl	8001ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2104      	movs	r1, #4
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <turn_on_odd_leds+0x3c>)
 800069a:	f001 fa11 	bl	8001ac0 <HAL_GPIO_WritePin>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020c00 	.word	0x40020c00

080006ac <Led_Control>:

void Led_Control (int value)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	if (value == 1)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d11d      	bne.n	80006f6 <Led_Control+0x4a>
	{
		for (int i = 0 ; i< 4 ; i++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	e016      	b.n	80006ee <Led_Control+0x42>
		{
			if ( i< 3)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	dc0b      	bgt.n	80006de <Led_Control+0x32>
			{
				HAL_GPIO_WritePin(GPIOC,(LED1<<i),GPIO_PIN_SET) ;
 80006c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	2201      	movs	r2, #1
 80006d4:	4619      	mov	r1, r3
 80006d6:	4818      	ldr	r0, [pc, #96]	; (8000738 <Led_Control+0x8c>)
 80006d8:	f001 f9f2 	bl	8001ac0 <HAL_GPIO_WritePin>
 80006dc:	e004      	b.n	80006e8 <Led_Control+0x3c>
			}
			else
				HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2104      	movs	r1, #4
 80006e2:	4816      	ldr	r0, [pc, #88]	; (800073c <Led_Control+0x90>)
 80006e4:	f001 f9ec 	bl	8001ac0 <HAL_GPIO_WritePin>
		for (int i = 0 ; i< 4 ; i++)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3301      	adds	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2b03      	cmp	r3, #3
 80006f2:	dde5      	ble.n	80006c0 <Led_Control+0x14>
			}
			else
				HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
		}
	}
}
 80006f4:	e01c      	b.n	8000730 <Led_Control+0x84>
		for (int i = 3 ; i >=0 ; i--)
 80006f6:	2303      	movs	r3, #3
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	e016      	b.n	800072a <Led_Control+0x7e>
			if ( i > 0)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	dd0b      	ble.n	800071a <Led_Control+0x6e>
				HAL_GPIO_WritePin(GPIOC,(LED3>>i),GPIO_PIN_SET) ;
 8000702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	fa42 f303 	asr.w	r3, r2, r3
 800070c:	b29b      	uxth	r3, r3
 800070e:	2201      	movs	r2, #1
 8000710:	4619      	mov	r1, r3
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <Led_Control+0x8c>)
 8000714:	f001 f9d4 	bl	8001ac0 <HAL_GPIO_WritePin>
 8000718:	e004      	b.n	8000724 <Led_Control+0x78>
				HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2104      	movs	r1, #4
 800071e:	4807      	ldr	r0, [pc, #28]	; (800073c <Led_Control+0x90>)
 8000720:	f001 f9ce 	bl	8001ac0 <HAL_GPIO_WritePin>
		for (int i = 3 ; i >=0 ; i--)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	3b01      	subs	r3, #1
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	2b00      	cmp	r3, #0
 800072e:	dae5      	bge.n	80006fc <Led_Control+0x50>
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40020800 	.word	0x40020800
 800073c:	40020c00 	.word	0x40020c00

08000740 <led_effect1>:

void led_effect1(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	static int flag = 1 ;
	(flag ^=1) ? turn_off_all_leds() : turn_on_all_leds() ;
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <led_effect1+0x28>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <led_effect1+0x28>)
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <led_effect1+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d002      	beq.n	800075e <led_effect1+0x1e>
 8000758:	f7ff ff28 	bl	80005ac <turn_off_all_leds>
}
 800075c:	e001      	b.n	8000762 <led_effect1+0x22>
	(flag ^=1) ? turn_off_all_leds() : turn_on_all_leds() ;
 800075e:	f7ff ff45 	bl	80005ec <turn_on_all_leds>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000000 	.word	0x20000000

0800076c <led_effect2>:

void led_effect2(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	static int flag = 1 ;
	(flag ^=1) ? turn_on_even_leds() : turn_on_odd_leds() ;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <led_effect2+0x28>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <led_effect2+0x28>)
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <led_effect2+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <led_effect2+0x1e>
 8000784:	f7ff ff52 	bl	800062c <turn_on_even_leds>

}
 8000788:	e001      	b.n	800078e <led_effect2+0x22>
	(flag ^=1) ? turn_on_even_leds() : turn_on_odd_leds() ;
 800078a:	f7ff ff6f 	bl	800066c <turn_on_odd_leds>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000004 	.word	0x20000004

08000798 <led_effect3>:
void led_effect3(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	Led_Control(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ff85 	bl	80006ac <Led_Control>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <led_effect4>:
void led_effect4(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
	Led_Control(0);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff ff7e 	bl	80006ac <Led_Control>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fe29 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f8e1 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f000 f9a9 	bl	8000b18 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007c6:	f000 f94f 	bl	8000a68 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80007ca:	f000 f97b 	bl	8000ac4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(menu_task, "menu_task", 250,NULL, 3, &handle_menu_task) ;
 80007ce:	4b5a      	ldr	r3, [pc, #360]	; (8000938 <main+0x184>)
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	2303      	movs	r3, #3
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2300      	movs	r3, #0
 80007d8:	22fa      	movs	r2, #250	; 0xfa
 80007da:	4958      	ldr	r1, [pc, #352]	; (800093c <main+0x188>)
 80007dc:	4858      	ldr	r0, [pc, #352]	; (8000940 <main+0x18c>)
 80007de:	f005 fe8b 	bl	80064f8 <xTaskCreate>
 80007e2:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS) ;
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d00a      	beq.n	8000800 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80007ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ee:	f383 8811 	msr	BASEPRI, r3
 80007f2:	f3bf 8f6f 	isb	sy
 80007f6:	f3bf 8f4f 	dsb	sy
 80007fa:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007fc:	bf00      	nop
 80007fe:	e7fe      	b.n	80007fe <main+0x4a>

  status = xTaskCreate(cmd_hanlder_task, "cmd_task", 250, NULL,2, &hanlde_cmd_task) ;
 8000800:	4b50      	ldr	r3, [pc, #320]	; (8000944 <main+0x190>)
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	2302      	movs	r3, #2
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2300      	movs	r3, #0
 800080a:	22fa      	movs	r2, #250	; 0xfa
 800080c:	494e      	ldr	r1, [pc, #312]	; (8000948 <main+0x194>)
 800080e:	484f      	ldr	r0, [pc, #316]	; (800094c <main+0x198>)
 8000810:	f005 fe72 	bl	80064f8 <xTaskCreate>
 8000814:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS) ;
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d00a      	beq.n	8000832 <main+0x7e>
        __asm volatile
 800081c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000820:	f383 8811 	msr	BASEPRI, r3
 8000824:	f3bf 8f6f 	isb	sy
 8000828:	f3bf 8f4f 	dsb	sy
 800082c:	613b      	str	r3, [r7, #16]
    }
 800082e:	bf00      	nop
 8000830:	e7fe      	b.n	8000830 <main+0x7c>

  status = xTaskCreate(printf_task, "printf_task", 250, NULL, 2, &handle_printf_task) ;
 8000832:	4b47      	ldr	r3, [pc, #284]	; (8000950 <main+0x19c>)
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	2302      	movs	r3, #2
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2300      	movs	r3, #0
 800083c:	22fa      	movs	r2, #250	; 0xfa
 800083e:	4945      	ldr	r1, [pc, #276]	; (8000954 <main+0x1a0>)
 8000840:	4845      	ldr	r0, [pc, #276]	; (8000958 <main+0x1a4>)
 8000842:	f005 fe59 	bl	80064f8 <xTaskCreate>
 8000846:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS) ;
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d00a      	beq.n	8000864 <main+0xb0>
        __asm volatile
 800084e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000852:	f383 8811 	msr	BASEPRI, r3
 8000856:	f3bf 8f6f 	isb	sy
 800085a:	f3bf 8f4f 	dsb	sy
 800085e:	60fb      	str	r3, [r7, #12]
    }
 8000860:	bf00      	nop
 8000862:	e7fe      	b.n	8000862 <main+0xae>

  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task) ;
 8000864:	4b3d      	ldr	r3, [pc, #244]	; (800095c <main+0x1a8>)
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	2302      	movs	r3, #2
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2300      	movs	r3, #0
 800086e:	22fa      	movs	r2, #250	; 0xfa
 8000870:	493b      	ldr	r1, [pc, #236]	; (8000960 <main+0x1ac>)
 8000872:	483c      	ldr	r0, [pc, #240]	; (8000964 <main+0x1b0>)
 8000874:	f005 fe40 	bl	80064f8 <xTaskCreate>
 8000878:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS) ;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d00a      	beq.n	8000896 <main+0xe2>
        __asm volatile
 8000880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000884:	f383 8811 	msr	BASEPRI, r3
 8000888:	f3bf 8f6f 	isb	sy
 800088c:	f3bf 8f4f 	dsb	sy
 8000890:	60bb      	str	r3, [r7, #8]
    }
 8000892:	bf00      	nop
 8000894:	e7fe      	b.n	8000894 <main+0xe0>

//  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task) ;
//  configASSERT(status == pdPASS) ;

  q_data = xQueueCreate(10,sizeof(char)) ;
 8000896:	2200      	movs	r2, #0
 8000898:	2101      	movs	r1, #1
 800089a:	200a      	movs	r0, #10
 800089c:	f005 f8e0 	bl	8005a60 <xQueueGenericCreate>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a31      	ldr	r2, [pc, #196]	; (8000968 <main+0x1b4>)
 80008a4:	6013      	str	r3, [r2, #0]
  configASSERT(q_data != NULL) ;
 80008a6:	4b30      	ldr	r3, [pc, #192]	; (8000968 <main+0x1b4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10a      	bne.n	80008c4 <main+0x110>
        __asm volatile
 80008ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b2:	f383 8811 	msr	BASEPRI, r3
 80008b6:	f3bf 8f6f 	isb	sy
 80008ba:	f3bf 8f4f 	dsb	sy
 80008be:	607b      	str	r3, [r7, #4]
    }
 80008c0:	bf00      	nop
 80008c2:	e7fe      	b.n	80008c2 <main+0x10e>

  // we enqueue a pointer to the string or pointer to the message into this queue
  q_printf = xQueueCreate(10,sizeof(size_t)) ;
 80008c4:	2200      	movs	r2, #0
 80008c6:	2104      	movs	r1, #4
 80008c8:	200a      	movs	r0, #10
 80008ca:	f005 f8c9 	bl	8005a60 <xQueueGenericCreate>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4a26      	ldr	r2, [pc, #152]	; (800096c <main+0x1b8>)
 80008d2:	6013      	str	r3, [r2, #0]
   configASSERT(q_printf != NULL) ;
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <main+0x1b8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10a      	bne.n	80008f2 <main+0x13e>
        __asm volatile
 80008dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	603b      	str	r3, [r7, #0]
    }
 80008ee:	bf00      	nop
 80008f0:	e7fe      	b.n	80008f0 <main+0x13c>

   // creat software timers for LED effects.

   for (int i = 0 ; i< 4 ; i ++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
 80008f6:	e013      	b.n	8000920 <main+0x16c>
   {
	   handle_led_timer[i] =  xTimerCreate("led_timer", pdMS_TO_TICKS(500),pdTRUE,(void *)(i+1),led_effect_callback) ;
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	3301      	adds	r3, #1
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <main+0x1bc>)
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	4613      	mov	r3, r2
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800090a:	481a      	ldr	r0, [pc, #104]	; (8000974 <main+0x1c0>)
 800090c:	f006 fed6 	bl	80076bc <xTimerCreate>
 8000910:	4602      	mov	r2, r0
 8000912:	4919      	ldr	r1, [pc, #100]	; (8000978 <main+0x1c4>)
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for (int i = 0 ; i< 4 ; i ++)
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3301      	adds	r3, #1
 800091e:	61fb      	str	r3, [r7, #28]
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	2b03      	cmp	r3, #3
 8000924:	dde8      	ble.n	80008f8 <main+0x144>
   }

   HAL_UART_Receive_IT(&huart2,(uint8_t *)&user_data,1);
 8000926:	2201      	movs	r2, #1
 8000928:	4914      	ldr	r1, [pc, #80]	; (800097c <main+0x1c8>)
 800092a:	4815      	ldr	r0, [pc, #84]	; (8000980 <main+0x1cc>)
 800092c:	f003 ffe3 	bl	80048f6 <HAL_UART_Receive_IT>

  // start the FreeRTOS scheduler
  vTaskStartScheduler();
 8000930:	f005 ff26 	bl	8006780 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000934:	e7fe      	b.n	8000934 <main+0x180>
 8000936:	bf00      	nop
 8000938:	200000d4 	.word	0x200000d4
 800093c:	080086a4 	.word	0x080086a4
 8000940:	08001049 	.word	0x08001049
 8000944:	200000d8 	.word	0x200000d8
 8000948:	080086b0 	.word	0x080086b0
 800094c:	080012a1 	.word	0x080012a1
 8000950:	200000dc 	.word	0x200000dc
 8000954:	080086bc 	.word	0x080086bc
 8000958:	08001131 	.word	0x08001131
 800095c:	200000e0 	.word	0x200000e0
 8000960:	080086c8 	.word	0x080086c8
 8000964:	08001171 	.word	0x08001171
 8000968:	200000e8 	.word	0x200000e8
 800096c:	200000ec 	.word	0x200000ec
 8000970:	08000c65 	.word	0x08000c65
 8000974:	080086d4 	.word	0x080086d4
 8000978:	200000f0 	.word	0x200000f0
 800097c:	20000101 	.word	0x20000101
 8000980:	20000090 	.word	0x20000090

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	; 0x50
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	2234      	movs	r2, #52	; 0x34
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f007 fe72 	bl	800867c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <SystemClock_Config+0xdc>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	4a2b      	ldr	r2, [pc, #172]	; (8000a60 <SystemClock_Config+0xdc>)
 80009b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b6:	6413      	str	r3, [r2, #64]	; 0x40
 80009b8:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <SystemClock_Config+0xdc>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c4:	2300      	movs	r3, #0
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <SystemClock_Config+0xe0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a25      	ldr	r2, [pc, #148]	; (8000a64 <SystemClock_Config+0xe0>)
 80009ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <SystemClock_Config+0xe0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e8:	2310      	movs	r3, #16
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009f4:	2308      	movs	r3, #8
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009f8:	23b4      	movs	r3, #180	; 0xb4
 80009fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f003 f947 	bl	8003ca0 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a18:	f000 f9a8 	bl	8000d6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a1c:	f002 fd74 	bl	8003508 <HAL_PWREx_EnableOverDrive>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a26:	f000 f9a1 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a40:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	2105      	movs	r1, #5
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 fdad 	bl	80035a8 <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a54:	f000 f98a 	bl	8000d6c <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3750      	adds	r7, #80	; 0x50
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a6e:	4a13      	ldr	r2, [pc, #76]	; (8000abc <MX_I2C1_Init+0x54>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a74:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_I2C1_Init+0x58>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000aa6:	f001 f825 	bl	8001af4 <HAL_I2C_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ab0:	f000 f95c 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000003c 	.word	0x2000003c
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	000186a0 	.word	0x000186a0

08000ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <MX_USART2_UART_Init+0x50>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000afc:	f003 fe1c 	bl	8004738 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b06:	f000 f931 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000090 	.word	0x20000090
 8000b14:	40004400 	.word	0x40004400

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b48      	ldr	r3, [pc, #288]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a47      	ldr	r2, [pc, #284]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b45      	ldr	r3, [pc, #276]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a40      	ldr	r2, [pc, #256]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b3e      	ldr	r3, [pc, #248]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b3a      	ldr	r3, [pc, #232]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a39      	ldr	r2, [pc, #228]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a32      	ldr	r2, [pc, #200]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a2b      	ldr	r2, [pc, #172]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <MX_GPIO_Init+0x13c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	4826      	ldr	r0, [pc, #152]	; (8000c58 <MX_GPIO_Init+0x140>)
 8000bc0:	f000 ff7e 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000bca:	4824      	ldr	r0, [pc, #144]	; (8000c5c <MX_GPIO_Init+0x144>)
 8000bcc:	f000 ff78 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	4822      	ldr	r0, [pc, #136]	; (8000c60 <MX_GPIO_Init+0x148>)
 8000bd6:	f000 ff73 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	481a      	ldr	r0, [pc, #104]	; (8000c5c <MX_GPIO_Init+0x144>)
 8000bf2:	f000 fdd1 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf6:	2320      	movs	r3, #32
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4812      	ldr	r0, [pc, #72]	; (8000c58 <MX_GPIO_Init+0x140>)
 8000c0e:	f000 fdc3 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480c      	ldr	r0, [pc, #48]	; (8000c5c <MX_GPIO_Init+0x144>)
 8000c2c:	f000 fdb4 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c30:	2304      	movs	r3, #4
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_GPIO_Init+0x148>)
 8000c48:	f000 fda6 	bl	8001798 <HAL_GPIO_Init>

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020800 	.word	0x40020800
 8000c60:	40020c00 	.word	0x40020c00

08000c64 <led_effect_callback>:

/* USER CODE BEGIN 4 */
void led_effect_callback (TimerHandle_t xTimer)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	int id ;
	id = (uint32_t)pvTimerGetTimerID(xTimer) ;
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f007 f861 	bl	8007d34 <pvTimerGetTimerID>
 8000c72:	4603      	mov	r3, r0
 8000c74:	60fb      	str	r3, [r7, #12]
	switch(id)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d816      	bhi.n	8000cac <led_effect_callback+0x48>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <led_effect_callback+0x20>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000c95 	.word	0x08000c95
 8000c88:	08000c9b 	.word	0x08000c9b
 8000c8c:	08000ca1 	.word	0x08000ca1
 8000c90:	08000ca7 	.word	0x08000ca7
	{
	case 1:
		led_effect1();
 8000c94:	f7ff fd54 	bl	8000740 <led_effect1>
		break ;
 8000c98:	e008      	b.n	8000cac <led_effect_callback+0x48>
	case 2:
		led_effect2();
 8000c9a:	f7ff fd67 	bl	800076c <led_effect2>
		break ;
 8000c9e:	e005      	b.n	8000cac <led_effect_callback+0x48>
	case 3:
		led_effect3();
 8000ca0:	f7ff fd7a 	bl	8000798 <led_effect3>
		break ;
 8000ca4:	e002      	b.n	8000cac <led_effect_callback+0x48>
	case 4:
		led_effect4();
 8000ca6:	f7ff fd7e 	bl	80007a6 <led_effect4>
		break ;
 8000caa:	bf00      	nop


	}

}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	6078      	str	r0, [r7, #4]
	uint8_t dummy ;

	if( !xQueueIsQueueFullFromISR(q_data))
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_UART_RxCpltCallback+0x84>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f005 fb94 	bl	80063ee <xQueueIsQueueFullFromISR>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d107      	bne.n	8000cdc <HAL_UART_RxCpltCallback+0x28>
	{
		/*Queue is not full */
		/*TODO: Enqueue data byte */
		xQueueSendFromISR(q_data,(void *)&user_data,NULL);
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <HAL_UART_RxCpltCallback+0x84>)
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4919      	ldr	r1, [pc, #100]	; (8000d3c <HAL_UART_RxCpltCallback+0x88>)
 8000cd6:	f005 f843 	bl	8005d60 <xQueueGenericSendFromISR>
 8000cda:	e013      	b.n	8000d04 <HAL_UART_RxCpltCallback+0x50>


	}else{
		/*Queue is full */

		if(user_data == '\n')
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_UART_RxCpltCallback+0x88>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b0a      	cmp	r3, #10
 8000ce4:	d10e      	bne.n	8000d04 <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */
			/*TODO: make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void *)&dummy,NULL);
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_UART_RxCpltCallback+0x84>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f107 010f 	add.w	r1, r7, #15
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f005 f9bf 	bl	8006074 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void *)&user_data,NULL);
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_UART_RxCpltCallback+0x84>)
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	490f      	ldr	r1, [pc, #60]	; (8000d3c <HAL_UART_RxCpltCallback+0x88>)
 8000d00:	f005 f82e 	bl	8005d60 <xQueueGenericSendFromISR>
		}
	}


	/*TODO: send notification to command handling task if user_data = '\n' */
	if(user_data == '\n')
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_UART_RxCpltCallback+0x88>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b0a      	cmp	r3, #10
 8000d0c:	d10a      	bne.n	8000d24 <HAL_UART_RxCpltCallback+0x70>
	{
		xTaskNotifyFromISR(hanlde_cmd_task,0,eNoAction , NULL);
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_UART_RxCpltCallback+0x8c>)
 8000d10:	6818      	ldr	r0, [r3, #0]
 8000d12:	2300      	movs	r3, #0
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	2300      	movs	r3, #0
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f006 fb32 	bl	8007388 <xTaskGenericNotifyFromISR>
	}

	/* TODO: Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2,(uint8_t *)&user_data,1);
 8000d24:	2201      	movs	r2, #1
 8000d26:	4905      	ldr	r1, [pc, #20]	; (8000d3c <HAL_UART_RxCpltCallback+0x88>)
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <HAL_UART_RxCpltCallback+0x90>)
 8000d2a:	f003 fde4 	bl	80048f6 <HAL_UART_Receive_IT>

}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000e8 	.word	0x200000e8
 8000d3c:	20000101 	.word	0x20000101
 8000d40:	200000d8 	.word	0x200000d8
 8000d44:	20000090 	.word	0x20000090

08000d48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d101      	bne.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d5a:	f000 fb7b 	bl	8001454 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40001000 	.word	0x40001000

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <HAL_I2C_MspInit+0x94>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d133      	bne.n	8000e52 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_I2C_MspInit+0x98>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <HAL_I2C_MspInit+0x98>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_I2C_MspInit+0x98>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e06:	23c0      	movs	r3, #192	; 0xc0
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0a:	2312      	movs	r3, #18
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e16:	2304      	movs	r3, #4
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4810      	ldr	r0, [pc, #64]	; (8000e64 <HAL_I2C_MspInit+0x9c>)
 8000e22:	f000 fcb9 	bl	8001798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_I2C_MspInit+0x98>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <HAL_I2C_MspInit+0x98>)
 8000e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_I2C_MspInit+0x98>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2106      	movs	r1, #6
 8000e46:	201f      	movs	r0, #31
 8000e48:	f000 fbdc 	bl	8001604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e4c:	201f      	movs	r0, #31
 8000e4e:	f000 fbf5 	bl	800163c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020400 	.word	0x40020400

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a1d      	ldr	r2, [pc, #116]	; (8000efc <HAL_UART_MspInit+0x94>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d133      	bne.n	8000ef2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_UART_MspInit+0x98>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <HAL_UART_MspInit+0x98>)
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_UART_MspInit+0x98>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_UART_MspInit+0x98>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <HAL_UART_MspInit+0x98>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_UART_MspInit+0x98>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ec2:	230c      	movs	r3, #12
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <HAL_UART_MspInit+0x9c>)
 8000ede:	f000 fc5b 	bl	8001798 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2106      	movs	r1, #6
 8000ee6:	2026      	movs	r0, #38	; 0x26
 8000ee8:	f000 fb8c 	bl	8001604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eec:	2026      	movs	r0, #38	; 0x26
 8000eee:	f000 fba5 	bl	800163c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40004400 	.word	0x40004400
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	2036      	movs	r0, #54	; 0x36
 8000f1e:	f000 fb71 	bl	8001604 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f22:	2036      	movs	r0, #54	; 0x36
 8000f24:	f000 fb8a 	bl	800163c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <HAL_InitTick+0xa4>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	4a1e      	ldr	r2, [pc, #120]	; (8000fac <HAL_InitTick+0xa4>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	6413      	str	r3, [r2, #64]	; 0x40
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_InitTick+0xa4>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	f003 0310 	and.w	r3, r3, #16
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f44:	f107 0210 	add.w	r2, r7, #16
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fc44 	bl	80037dc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f54:	f002 fc1a 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f60:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <HAL_InitTick+0xa8>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	0c9b      	lsrs	r3, r3, #18
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_InitTick+0xac>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <HAL_InitTick+0xb0>)
 8000f70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <HAL_InitTick+0xac>)
 8000f74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <HAL_InitTick+0xac>)
 8000f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_InitTick+0xac>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_InitTick+0xac>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <HAL_InitTick+0xac>)
 8000f8e:	f003 f925 	bl	80041dc <HAL_TIM_Base_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d104      	bne.n	8000fa2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <HAL_InitTick+0xac>)
 8000f9a:	f003 f979 	bl	8004290 <HAL_TIM_Base_Start_IT>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3730      	adds	r7, #48	; 0x30
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	431bde83 	.word	0x431bde83
 8000fb4:	20000104 	.word	0x20000104
 8000fb8:	40001000 	.word	0x40001000

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <MemManage_Handler+0x4>

08000fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <I2C1_EV_IRQHandler+0x10>)
 8000fee:	f000 fec5 	bl	8001d7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000003c 	.word	0x2000003c

08000ffc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <USART2_IRQHandler+0x10>)
 8001002:	f003 fca9 	bl	8004958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000090 	.word	0x20000090

08001010 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM6_DAC_IRQHandler+0x10>)
 8001016:	f003 f9ab 	bl	8004370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000104 	.word	0x20000104

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <menu_task>:


const char *msg_inv = "///// Invalid option ???? ///// \n" ;

void menu_task ( void *param)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr ;
	const char *msg_menu = "====================\n"
 8001050:	4b31      	ldr	r3, [pc, #196]	; (8001118 <menu_task+0xd0>)
 8001052:	60bb      	str	r3, [r7, #8]
	command_t *cmd ;
	int option ;

	while(1)
	{
		xQueueSend(q_printf,&msg_menu,portMAX_DELAY) ;
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <menu_task+0xd4>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	f107 0108 	add.w	r1, r7, #8
 800105c:	2300      	movs	r3, #0
 800105e:	f04f 32ff 	mov.w	r2, #4294967295
 8001062:	f004 fd7f 	bl	8005b64 <xQueueGenericSend>

		// Wait for menu command
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY) ;
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	f04f 32ff 	mov.w	r2, #4294967295
 800106e:	9200      	str	r2, [sp, #0]
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	2000      	movs	r0, #0
 8001076:	f006 f827 	bl	80070c8 <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr ;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	617b      	str	r3, [r7, #20]

		if (cmd->len == 1)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d133      	bne.n	80010ee <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48  ;  //  just convert ASCII to number by subtracting 48
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	3b30      	subs	r3, #48	; 0x30
 800108c:	613b      	str	r3, [r7, #16]

			switch (option)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d035      	beq.n	8001100 <menu_task+0xb8>
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	2b02      	cmp	r3, #2
 8001098:	dc20      	bgt.n	80010dc <menu_task+0x94>
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <menu_task+0x60>
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d00d      	beq.n	80010c2 <menu_task+0x7a>
 80010a6:	e019      	b.n	80010dc <menu_task+0x94>
			{
			case 0:
					curr_state  = sLedEffect ;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <menu_task+0xd8>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task,0,eNoAction);
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <menu_task+0xdc>)
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	2300      	movs	r3, #0
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2300      	movs	r3, #0
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	f006 f884 	bl	80071c8 <xTaskGenericNotify>
					break;
 80010c0:	e01f      	b.n	8001102 <menu_task+0xba>
			case 1:
				curr_state  = sRTCMenu ;
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <menu_task+0xd8>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task,0,eNoAction);
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <menu_task+0xe0>)
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2300      	movs	r3, #0
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	f006 f877 	bl	80071c8 <xTaskGenericNotify>
					break;
 80010da:	e012      	b.n	8001102 <menu_task+0xba>
			case 2:  // Implement exit
					break;
			default:
				xQueueSend(q_printf,&msg_inv,portMAX_DELAY) ;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <menu_task+0xd4>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295
 80010e6:	4911      	ldr	r1, [pc, #68]	; (800112c <menu_task+0xe4>)
 80010e8:	f004 fd3c 	bl	8005b64 <xQueueGenericSend>
					continue;
 80010ec:	e012      	b.n	8001114 <menu_task+0xcc>
			}
		}
		else
		{
			//invalid entry.
			xQueueSend(q_printf,&msg_inv,portMAX_DELAY) ;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <menu_task+0xd4>)
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <menu_task+0xe4>)
 80010fa:	f004 fd33 	bl	8005b64 <xQueueGenericSend>
			continue ;
 80010fe:	e009      	b.n	8001114 <menu_task+0xcc>
					break;
 8001100:	bf00      	nop
		}


		// wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2300      	movs	r3, #0
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2000      	movs	r0, #0
 8001110:	f005 ffda 	bl	80070c8 <xTaskGenericNotifyWait>
		xQueueSend(q_printf,&msg_menu,portMAX_DELAY) ;
 8001114:	e79e      	b.n	8001054 <menu_task+0xc>
 8001116:	bf00      	nop
 8001118:	08008704 	.word	0x08008704
 800111c:	200000ec 	.word	0x200000ec
 8001120:	20000100 	.word	0x20000100
 8001124:	200000e0 	.word	0x200000e0
 8001128:	200000e4 	.word	0x200000e4
 800112c:	2000000c 	.word	0x2000000c

08001130 <printf_task>:
	} // while super loop.
}


void printf_task ( void *param)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	uint32_t *msg ;
	while(1)
	{
		xQueueReceive(q_printf,&msg, portMAX_DELAY);
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <printf_task+0x38>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f107 010c 	add.w	r1, r7, #12
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	4618      	mov	r0, r3
 8001146:	f004 feb5 	bl	8005eb4 <xQueueReceive>
		 HAL_UART_Transmit(&huart2 , (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 800114a:	68fc      	ldr	r4, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f868 	bl	8000224 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29a      	uxth	r2, r3
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	4621      	mov	r1, r4
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <printf_task+0x3c>)
 8001160:	f003 fb37 	bl	80047d2 <HAL_UART_Transmit>
		xQueueReceive(q_printf,&msg, portMAX_DELAY);
 8001164:	e7e8      	b.n	8001138 <printf_task+0x8>
 8001166:	bf00      	nop
 8001168:	200000ec 	.word	0x200000ec
 800116c:	20000090 	.word	0x20000090

08001170 <led_task>:

	}
}
void led_task ( void *param)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af02      	add	r7, sp, #8
 8001176:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 8001178:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <led_task+0x104>)
 800117a:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*TODO: Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	2000      	movs	r0, #0
 800118a:	f005 ff9d 	bl	80070c8 <xTaskGenericNotifyWait>
		/*TODO: Print LED menu */
		xQueueSend(q_data,&msg_led,portMAX_DELAY);
 800118e:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <led_task+0x108>)
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	f107 010c 	add.w	r1, r7, #12
 8001196:	2300      	movs	r3, #0
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	f004 fce2 	bl	8005b64 <xQueueGenericSend>
		/*TODO: wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY) ;
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	9200      	str	r2, [sp, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2000      	movs	r0, #0
 80011b0:	f005 ff8a 	bl	80070c8 <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr ;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d843      	bhi.n	8001248 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	492e      	ldr	r1, [pc, #184]	; (800127c <led_task+0x10c>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f823 	bl	8000210 <strcmp>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <led_task+0x66>
				led_effect_stop();
 80011d0:	f7ff f9b2 	bl	8000538 <led_effect_stop>
 80011d4:	e040      	b.n	8001258 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	4929      	ldr	r1, [pc, #164]	; (8001280 <led_task+0x110>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f818 	bl	8000210 <strcmp>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d103      	bne.n	80011ee <led_task+0x7e>
				led_effect(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f7ff f9c4 	bl	8000574 <led_effect>
 80011ec:	e034      	b.n	8001258 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	4924      	ldr	r1, [pc, #144]	; (8001284 <led_task+0x114>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f80c 	bl	8000210 <strcmp>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d103      	bne.n	8001206 <led_task+0x96>
				led_effect(2);
 80011fe:	2002      	movs	r0, #2
 8001200:	f7ff f9b8 	bl	8000574 <led_effect>
 8001204:	e028      	b.n	8001258 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	491f      	ldr	r1, [pc, #124]	; (8001288 <led_task+0x118>)
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f800 	bl	8000210 <strcmp>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d103      	bne.n	800121e <led_task+0xae>
				led_effect(3);
 8001216:	2003      	movs	r0, #3
 8001218:	f7ff f9ac 	bl	8000574 <led_effect>
 800121c:	e01c      	b.n	8001258 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	491a      	ldr	r1, [pc, #104]	; (800128c <led_task+0x11c>)
 8001222:	4618      	mov	r0, r3
 8001224:	f7fe fff4 	bl	8000210 <strcmp>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d103      	bne.n	8001236 <led_task+0xc6>
				led_effect(4);
 800122e:	2004      	movs	r0, #4
 8001230:	f7ff f9a0 	bl	8000574 <led_effect>
 8001234:	e010      	b.n	8001258 <led_task+0xe8>
			else
				/*TODO: print invalid message */
				xQueueSend(q_printf,&msg_inv,portMAX_DELAY) ;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <led_task+0x120>)
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	2300      	movs	r3, #0
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	4914      	ldr	r1, [pc, #80]	; (8001294 <led_task+0x124>)
 8001242:	f004 fc8f 	bl	8005b64 <xQueueGenericSend>
 8001246:	e007      	b.n	8001258 <led_task+0xe8>
		}else
			/*TODO: print invalid message */
			xQueueSend(q_printf,&msg_inv,portMAX_DELAY) ;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <led_task+0x120>)
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	2300      	movs	r3, #0
 800124e:	f04f 32ff 	mov.w	r2, #4294967295
 8001252:	4910      	ldr	r1, [pc, #64]	; (8001294 <led_task+0x124>)
 8001254:	f004 fc86 	bl	8005b64 <xQueueGenericSend>
		/*TODO : update state variable */
		curr_state = sMainMenu;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <led_task+0x128>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]

		/*TODO : Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <led_task+0x12c>)
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	2300      	movs	r3, #0
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2300      	movs	r3, #0
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	f005 ffac 	bl	80071c8 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001270:	e784      	b.n	800117c <led_task+0xc>
 8001272:	bf00      	nop
 8001274:	08008794 	.word	0x08008794
 8001278:	200000e8 	.word	0x200000e8
 800127c:	0800880c 	.word	0x0800880c
 8001280:	08008814 	.word	0x08008814
 8001284:	08008818 	.word	0x08008818
 8001288:	0800881c 	.word	0x0800881c
 800128c:	08008820 	.word	0x08008820
 8001290:	200000ec 	.word	0x200000ec
 8001294:	2000000c 	.word	0x2000000c
 8001298:	20000100 	.word	0x20000100
 800129c:	200000d4 	.word	0x200000d4

080012a0 <cmd_hanlder_task>:
//
//	}
//}

void cmd_hanlder_task ( void *param)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	6078      	str	r0, [r7, #4]
	BaseType_t ret ;
	command_t cmd ;
	while(1)
	{
			/* Implement notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2300      	movs	r3, #0
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	2000      	movs	r0, #0
 80012b6:	f005 ff07 	bl	80070c8 <xTaskGenericNotifyWait>
 80012ba:	61f8      	str	r0, [r7, #28]

		if (ret == pdTRUE)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d1f2      	bne.n	80012a8 <cmd_hanlder_task+0x8>
		{
			/* process the user data ( command) stored  in input data  queue */
			process_command(&cmd) ;
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f802 	bl	80012d0 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80012cc:	e7ec      	b.n	80012a8 <cmd_hanlder_task+0x8>
	...

080012d0 <process_command>:
	}
}


void process_command ( command_t *cmd)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	6078      	str	r0, [r7, #4]
	extract_cmmand(cmd);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f835 	bl	8001348 <extract_cmmand>

	switch (curr_state )
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <process_command+0x68>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b05      	cmp	r3, #5
 80012e4:	dc24      	bgt.n	8001330 <process_command+0x60>
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	da18      	bge.n	800131c <process_command+0x4c>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <process_command+0x24>
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d00a      	beq.n	8001308 <process_command+0x38>


	}


}
 80012f2:	e01d      	b.n	8001330 <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd ,eSetValueWithOverwrite) ;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <process_command+0x6c>)
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2303      	movs	r3, #3
 8001300:	2100      	movs	r1, #0
 8001302:	f005 ff61 	bl	80071c8 <xTaskGenericNotify>
			break ;
 8001306:	e013      	b.n	8001330 <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd ,eSetValueWithOverwrite) ;
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <process_command+0x70>)
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	2300      	movs	r3, #0
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2303      	movs	r3, #3
 8001314:	2100      	movs	r1, #0
 8001316:	f005 ff57 	bl	80071c8 <xTaskGenericNotify>
			break ;
 800131a:	e009      	b.n	8001330 <process_command+0x60>
		xTaskNotify(handle_rtc_task,(uint32_t)cmd ,eSetValueWithOverwrite) ;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <process_command+0x74>)
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	2300      	movs	r3, #0
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2303      	movs	r3, #3
 8001328:	2100      	movs	r1, #0
 800132a:	f005 ff4d 	bl	80071c8 <xTaskGenericNotify>
		break ;
 800132e:	bf00      	nop
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000100 	.word	0x20000100
 800133c:	200000d4 	.word	0x200000d4
 8001340:	200000e0 	.word	0x200000e0
 8001344:	200000e4 	.word	0x200000e4

08001348 <extract_cmmand>:


int extract_cmmand ( command_t *cmd )
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	uint8_t item ;
	BaseType_t status ;
	status = uxQueueMessagesWaiting(q_data);
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <extract_cmmand+0x70>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f004 ff1c 	bl	8006192 <uxQueueMessagesWaiting>
 800135a:	4603      	mov	r3, r0
 800135c:	613b      	str	r3, [r7, #16]
	if (!status) return  -1 ;
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <extract_cmmand+0x22>
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	e022      	b.n	80013b0 <extract_cmmand+0x68>

	uint8_t i = 0 ;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
	do
	{
		status = xQueueReceive(q_data, &item, 0) ;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <extract_cmmand+0x70>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f107 010f 	add.w	r1, r7, #15
 8001376:	2200      	movs	r2, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fd9b 	bl	8005eb4 <xQueueReceive>
 800137e:	6138      	str	r0, [r7, #16]
		if (status == pdTRUE) cmd->payload[i++] = item ;
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d106      	bne.n	8001394 <extract_cmmand+0x4c>
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	1c5a      	adds	r2, r3, #1
 800138a:	75fa      	strb	r2, [r7, #23]
 800138c:	461a      	mov	r2, r3
 800138e:	7bf9      	ldrb	r1, [r7, #15]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	5499      	strb	r1, [r3, r2]

	}
	while (item !='\n');
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b0a      	cmp	r3, #10
 8001398:	d1e9      	bne.n	800136e <extract_cmmand+0x26>
	cmd->payload[i-1] = '\0';
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	3b01      	subs	r3, #1
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	2100      	movs	r1, #0
 80013a2:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1 ;
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	461a      	mov	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60da      	str	r2, [r3, #12]

	return 0 ;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200000e8 	.word	0x200000e8

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d8:	4c0b      	ldr	r4, [pc, #44]	; (8001408 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013e6:	f7ff fe1d 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f007 f915 	bl	8008618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff f9e1 	bl	80007b4 <main>
  bx  lr    
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001400:	08008864 	.word	0x08008864
  ldr r2, =_sbss
 8001404:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001408:	20012ef8 	.word	0x20012ef8

0800140c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_Init+0x40>)
 800141a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_Init+0x40>)
 8001426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_Init+0x40>)
 8001432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f8d8 	bl	80015ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff fd62 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fc98 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000014 	.word	0x20000014
 8001478:	2000014c 	.word	0x2000014c

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000014c 	.word	0x2000014c

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	; (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff4c 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001616:	f7ff ff61 	bl	80014dc <__NVIC_GetPriorityGrouping>
 800161a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	6978      	ldr	r0, [r7, #20]
 8001622:	f7ff ffb1 	bl	8001588 <NVIC_EncodePriority>
 8001626:	4602      	mov	r2, r0
 8001628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff80 	bl	8001534 <__NVIC_SetPriority>
}
 8001634:	bf00      	nop
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff54 	bl	80014f8 <__NVIC_EnableIRQ>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001666:	f7ff ff09 	bl	800147c <HAL_GetTick>
 800166a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d008      	beq.n	800168a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e052      	b.n	8001730 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0216 	bic.w	r2, r2, #22
 8001698:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d103      	bne.n	80016ba <HAL_DMA_Abort+0x62>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0208 	bic.w	r2, r2, #8
 80016c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016da:	e013      	b.n	8001704 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016dc:	f7ff fece 	bl	800147c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d90c      	bls.n	8001704 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2220      	movs	r2, #32
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2203      	movs	r2, #3
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e015      	b.n	8001730 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1e4      	bne.n	80016dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	223f      	movs	r2, #63	; 0x3f
 8001718:	409a      	lsls	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d004      	beq.n	8001756 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00c      	b.n	8001770 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2205      	movs	r2, #5
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800178a:	b2db      	uxtb	r3, r3
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e165      	b.n	8001a80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8154 	bne.w	8001a7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d005      	beq.n	80017ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d130      	bne.n	800184c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 0201 	and.w	r2, r3, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b03      	cmp	r3, #3
 8001856:	d017      	beq.n	8001888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d123      	bne.n	80018dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	69b9      	ldr	r1, [r7, #24]
 80018d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0203 	and.w	r2, r3, #3
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80ae 	beq.w	8001a7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b5d      	ldr	r3, [pc, #372]	; (8001a98 <HAL_GPIO_Init+0x300>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a5c      	ldr	r2, [pc, #368]	; (8001a98 <HAL_GPIO_Init+0x300>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b5a      	ldr	r3, [pc, #360]	; (8001a98 <HAL_GPIO_Init+0x300>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800193a:	4a58      	ldr	r2, [pc, #352]	; (8001a9c <HAL_GPIO_Init+0x304>)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3302      	adds	r3, #2
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4f      	ldr	r2, [pc, #316]	; (8001aa0 <HAL_GPIO_Init+0x308>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d025      	beq.n	80019b2 <HAL_GPIO_Init+0x21a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4e      	ldr	r2, [pc, #312]	; (8001aa4 <HAL_GPIO_Init+0x30c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d01f      	beq.n	80019ae <HAL_GPIO_Init+0x216>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4d      	ldr	r2, [pc, #308]	; (8001aa8 <HAL_GPIO_Init+0x310>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d019      	beq.n	80019aa <HAL_GPIO_Init+0x212>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <HAL_GPIO_Init+0x314>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_GPIO_Init+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4b      	ldr	r2, [pc, #300]	; (8001ab0 <HAL_GPIO_Init+0x318>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00d      	beq.n	80019a2 <HAL_GPIO_Init+0x20a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <HAL_GPIO_Init+0x31c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d007      	beq.n	800199e <HAL_GPIO_Init+0x206>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <HAL_GPIO_Init+0x320>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_GPIO_Init+0x202>
 8001996:	2306      	movs	r3, #6
 8001998:	e00c      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 800199a:	2307      	movs	r3, #7
 800199c:	e00a      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 800199e:	2305      	movs	r3, #5
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 80019a2:	2304      	movs	r3, #4
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 80019b2:	2300      	movs	r3, #0
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f002 0203 	and.w	r2, r2, #3
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c4:	4935      	ldr	r1, [pc, #212]	; (8001a9c <HAL_GPIO_Init+0x304>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d2:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <HAL_GPIO_Init+0x324>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f6:	4a31      	ldr	r2, [pc, #196]	; (8001abc <HAL_GPIO_Init+0x324>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019fc:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <HAL_GPIO_Init+0x324>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a20:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_GPIO_Init+0x324>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a26:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_GPIO_Init+0x324>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <HAL_GPIO_Init+0x324>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_GPIO_Init+0x324>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a74:	4a11      	ldr	r2, [pc, #68]	; (8001abc <HAL_GPIO_Init+0x324>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	f67f ae96 	bls.w	80017b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40021400 	.word	0x40021400
 8001ab8:	40021800 	.word	0x40021800
 8001abc:	40013c00 	.word	0x40013c00

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001adc:	e003      	b.n	8001ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	041a      	lsls	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	619a      	str	r2, [r3, #24]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e12b      	b.n	8001d5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff f954 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2224      	movs	r2, #36	; 0x24
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b58:	f001 fe18 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8001b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4a81      	ldr	r2, [pc, #516]	; (8001d68 <HAL_I2C_Init+0x274>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d807      	bhi.n	8001b78 <HAL_I2C_Init+0x84>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4a80      	ldr	r2, [pc, #512]	; (8001d6c <HAL_I2C_Init+0x278>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	bf94      	ite	ls
 8001b70:	2301      	movls	r3, #1
 8001b72:	2300      	movhi	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	e006      	b.n	8001b86 <HAL_I2C_Init+0x92>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a7d      	ldr	r2, [pc, #500]	; (8001d70 <HAL_I2C_Init+0x27c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	bf94      	ite	ls
 8001b80:	2301      	movls	r3, #1
 8001b82:	2300      	movhi	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0e7      	b.n	8001d5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4a78      	ldr	r2, [pc, #480]	; (8001d74 <HAL_I2C_Init+0x280>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0c9b      	lsrs	r3, r3, #18
 8001b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a6a      	ldr	r2, [pc, #424]	; (8001d68 <HAL_I2C_Init+0x274>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d802      	bhi.n	8001bc8 <HAL_I2C_Init+0xd4>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	e009      	b.n	8001bdc <HAL_I2C_Init+0xe8>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	4a69      	ldr	r2, [pc, #420]	; (8001d78 <HAL_I2C_Init+0x284>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	3301      	adds	r3, #1
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	495c      	ldr	r1, [pc, #368]	; (8001d68 <HAL_I2C_Init+0x274>)
 8001bf8:	428b      	cmp	r3, r1
 8001bfa:	d819      	bhi.n	8001c30 <HAL_I2C_Init+0x13c>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1e59      	subs	r1, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c0a:	1c59      	adds	r1, r3, #1
 8001c0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c10:	400b      	ands	r3, r1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00a      	beq.n	8001c2c <HAL_I2C_Init+0x138>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1e59      	subs	r1, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2a:	e051      	b.n	8001cd0 <HAL_I2C_Init+0x1dc>
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	e04f      	b.n	8001cd0 <HAL_I2C_Init+0x1dc>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d111      	bne.n	8001c5c <HAL_I2C_Init+0x168>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1e58      	subs	r0, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	440b      	add	r3, r1
 8001c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	e012      	b.n	8001c82 <HAL_I2C_Init+0x18e>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e58      	subs	r0, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	0099      	lsls	r1, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Init+0x196>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e022      	b.n	8001cd0 <HAL_I2C_Init+0x1dc>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10e      	bne.n	8001cb0 <HAL_I2C_Init+0x1bc>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1e58      	subs	r0, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6859      	ldr	r1, [r3, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	440b      	add	r3, r1
 8001ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cae:	e00f      	b.n	8001cd0 <HAL_I2C_Init+0x1dc>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1e58      	subs	r0, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	0099      	lsls	r1, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	6809      	ldr	r1, [r1, #0]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6911      	ldr	r1, [r2, #16]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68d2      	ldr	r2, [r2, #12]
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	000186a0 	.word	0x000186a0
 8001d6c:	001e847f 	.word	0x001e847f
 8001d70:	003d08ff 	.word	0x003d08ff
 8001d74:	431bde83 	.word	0x431bde83
 8001d78:	10624dd3 	.word	0x10624dd3

08001d7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d003      	beq.n	8001db4 <HAL_I2C_EV_IRQHandler+0x38>
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	2b40      	cmp	r3, #64	; 0x40
 8001db0:	f040 80c1 	bne.w	8001f36 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10d      	bne.n	8001dea <HAL_I2C_EV_IRQHandler+0x6e>
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001dd4:	d003      	beq.n	8001dde <HAL_I2C_EV_IRQHandler+0x62>
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001ddc:	d101      	bne.n	8001de2 <HAL_I2C_EV_IRQHandler+0x66>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_I2C_EV_IRQHandler+0x68>
 8001de2:	2300      	movs	r3, #0
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	f000 8132 	beq.w	800204e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00c      	beq.n	8001e0e <HAL_I2C_EV_IRQHandler+0x92>
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	0a5b      	lsrs	r3, r3, #9
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f001 fb65 	bl	80034d0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fcdc 	bl	80027c4 <I2C_Master_SB>
 8001e0c:	e092      	b.n	8001f34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d009      	beq.n	8001e2e <HAL_I2C_EV_IRQHandler+0xb2>
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	0a5b      	lsrs	r3, r3, #9
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fd52 	bl	80028d0 <I2C_Master_ADD10>
 8001e2c:	e082      	b.n	8001f34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_I2C_EV_IRQHandler+0xd2>
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	0a5b      	lsrs	r3, r3, #9
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fd6c 	bl	8002924 <I2C_Master_ADDR>
 8001e4c:	e072      	b.n	8001f34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d03b      	beq.n	8001ed2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e68:	f000 80f3 	beq.w	8002052 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	09db      	lsrs	r3, r3, #7
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00f      	beq.n	8001e98 <HAL_I2C_EV_IRQHandler+0x11c>
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	0a9b      	lsrs	r3, r3, #10
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d009      	beq.n	8001e98 <HAL_I2C_EV_IRQHandler+0x11c>
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d103      	bne.n	8001e98 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f94c 	bl	800212e <I2C_MasterTransmit_TXE>
 8001e96:	e04d      	b.n	8001f34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80d6 	beq.w	8002052 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	0a5b      	lsrs	r3, r3, #9
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80cf 	beq.w	8002052 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	2b21      	cmp	r3, #33	; 0x21
 8001eb8:	d103      	bne.n	8001ec2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f9d3 	bl	8002266 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ec0:	e0c7      	b.n	8002052 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	f040 80c4 	bne.w	8002052 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fa41 	bl	8002352 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ed0:	e0bf      	b.n	8002052 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ee0:	f000 80b7 	beq.w	8002052 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	099b      	lsrs	r3, r3, #6
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00f      	beq.n	8001f10 <HAL_I2C_EV_IRQHandler+0x194>
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	0a9b      	lsrs	r3, r3, #10
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <HAL_I2C_EV_IRQHandler+0x194>
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d103      	bne.n	8001f10 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fab6 	bl	800247a <I2C_MasterReceive_RXNE>
 8001f0e:	e011      	b.n	8001f34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 809a 	beq.w	8002052 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	0a5b      	lsrs	r3, r3, #9
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8093 	beq.w	8002052 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fb5f 	bl	80025f0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f32:	e08e      	b.n	8002052 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f34:	e08d      	b.n	8002052 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	e007      	b.n	8001f58 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	085b      	lsrs	r3, r3, #1
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d012      	beq.n	8001f8a <HAL_I2C_EV_IRQHandler+0x20e>
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	0a5b      	lsrs	r3, r3, #9
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00c      	beq.n	8001f8a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f80:	69b9      	ldr	r1, [r7, #24]
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 ff1d 	bl	8002dc2 <I2C_Slave_ADDR>
 8001f88:	e066      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <HAL_I2C_EV_IRQHandler+0x22e>
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	0a5b      	lsrs	r3, r3, #9
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 ff58 	bl	8002e58 <I2C_Slave_STOPF>
 8001fa8:	e056      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	2b21      	cmp	r3, #33	; 0x21
 8001fae:	d002      	beq.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x23a>
 8001fb0:	7bbb      	ldrb	r3, [r7, #14]
 8001fb2:	2b29      	cmp	r3, #41	; 0x29
 8001fb4:	d125      	bne.n	8002002 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	09db      	lsrs	r3, r3, #7
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00f      	beq.n	8001fe2 <HAL_I2C_EV_IRQHandler+0x266>
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	0a9b      	lsrs	r3, r3, #10
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <HAL_I2C_EV_IRQHandler+0x266>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fe33 	bl	8002c46 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fe0:	e039      	b.n	8002056 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d033      	beq.n	8002056 <HAL_I2C_EV_IRQHandler+0x2da>
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	0a5b      	lsrs	r3, r3, #9
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d02d      	beq.n	8002056 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fe60 	bl	8002cc0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002000:	e029      	b.n	8002056 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00f      	beq.n	800202e <HAL_I2C_EV_IRQHandler+0x2b2>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	0a9b      	lsrs	r3, r3, #10
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_I2C_EV_IRQHandler+0x2b2>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d103      	bne.n	800202e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fe6b 	bl	8002d02 <I2C_SlaveReceive_RXNE>
 800202c:	e014      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00e      	beq.n	8002058 <HAL_I2C_EV_IRQHandler+0x2dc>
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	0a5b      	lsrs	r3, r3, #9
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fe99 	bl	8002d7e <I2C_SlaveReceive_BTF>
 800204c:	e004      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800204e:	bf00      	nop
 8002050:	e002      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002052:	bf00      	nop
 8002054:	e000      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002056:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70fb      	strb	r3, [r7, #3]
 80020ba:	4613      	mov	r3, r2
 80020bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002144:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d150      	bne.n	80021f6 <I2C_MasterTransmit_TXE+0xc8>
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2b21      	cmp	r3, #33	; 0x21
 8002158:	d14d      	bne.n	80021f6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d01d      	beq.n	800219c <I2C_MasterTransmit_TXE+0x6e>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b20      	cmp	r3, #32
 8002164:	d01a      	beq.n	800219c <I2C_MasterTransmit_TXE+0x6e>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800216c:	d016      	beq.n	800219c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800217c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2211      	movs	r2, #17
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff62 	bl	800205e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800219a:	e060      	b.n	800225e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021aa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ba:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d107      	bne.n	80021e6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ff7d 	bl	80020de <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021e4:	e03b      	b.n	800225e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff35 	bl	800205e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021f4:	e033      	b.n	800225e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	2b21      	cmp	r3, #33	; 0x21
 80021fa:	d005      	beq.n	8002208 <I2C_MasterTransmit_TXE+0xda>
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	2b40      	cmp	r3, #64	; 0x40
 8002200:	d12d      	bne.n	800225e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2b22      	cmp	r3, #34	; 0x22
 8002206:	d12a      	bne.n	800225e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d108      	bne.n	8002224 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002220:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002222:	e01c      	b.n	800225e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b40      	cmp	r3, #64	; 0x40
 800222e:	d103      	bne.n	8002238 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f88e 	bl	8002352 <I2C_MemoryTransmit_TXE_BTF>
}
 8002236:	e012      	b.n	800225e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800225c:	e7ff      	b.n	800225e <I2C_MasterTransmit_TXE+0x130>
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b21      	cmp	r3, #33	; 0x21
 800227e:	d164      	bne.n	800234a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d012      	beq.n	80022b0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80022ae:	e04c      	b.n	800234a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d01d      	beq.n	80022f2 <I2C_MasterTransmit_BTF+0x8c>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d01a      	beq.n	80022f2 <I2C_MasterTransmit_BTF+0x8c>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022c2:	d016      	beq.n	80022f2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022d2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2211      	movs	r2, #17
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff feb7 	bl	800205e <HAL_I2C_MasterTxCpltCallback>
}
 80022f0:	e02b      	b.n	800234a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002300:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002310:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d107      	bne.n	800233c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff fed2 	bl	80020de <HAL_I2C_MemTxCpltCallback>
}
 800233a:	e006      	b.n	800234a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fe8a 	bl	800205e <HAL_I2C_MasterTxCpltCallback>
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002360:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11d      	bne.n	80023a6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	2b01      	cmp	r3, #1
 8002370:	d10b      	bne.n	800238a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	b2da      	uxtb	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002382:	1c9a      	adds	r2, r3, #2
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002388:	e073      	b.n	8002472 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238e:	b29b      	uxth	r3, r3
 8002390:	121b      	asrs	r3, r3, #8
 8002392:	b2da      	uxtb	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023a4:	e065      	b.n	8002472 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d10b      	bne.n	80023c6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023c4:	e055      	b.n	8002472 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d151      	bne.n	8002472 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	2b22      	cmp	r3, #34	; 0x22
 80023d2:	d10d      	bne.n	80023f0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023ee:	e040      	b.n	8002472 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d015      	beq.n	8002426 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	2b21      	cmp	r3, #33	; 0x21
 80023fe:	d112      	bne.n	8002426 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002424:	e025      	b.n	8002472 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d120      	bne.n	8002472 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	2b21      	cmp	r3, #33	; 0x21
 8002434:	d11d      	bne.n	8002472 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002444:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002454:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff fe36 	bl	80020de <HAL_I2C_MemTxCpltCallback>
}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b22      	cmp	r3, #34	; 0x22
 800248c:	f040 80ac 	bne.w	80025e8 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d921      	bls.n	80024e2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	f040 808c 	bne.w	80025e8 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024de:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80024e0:	e082      	b.n	80025e8 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d075      	beq.n	80025d6 <I2C_MasterReceive_RXNE+0x15c>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d002      	beq.n	80024f6 <I2C_MasterReceive_RXNE+0x7c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d16f      	bne.n	80025d6 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 ffb8 	bl	800346c <I2C_WaitOnSTOPRequestThroughIT>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d142      	bne.n	8002588 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002510:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002520:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	d10a      	bne.n	8002572 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff fdc1 	bl	80020f2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002570:	e03a      	b.n	80025e8 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2212      	movs	r2, #18
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff fd76 	bl	8002072 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002586:	e02f      	b.n	80025e8 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002596:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fd99 	bl	8002106 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025d4:	e008      	b.n	80025e8 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e4:	605a      	str	r2, [r3, #4]
}
 80025e6:	e7ff      	b.n	80025e8 <I2C_MasterReceive_RXNE+0x16e>
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b04      	cmp	r3, #4
 8002606:	d11b      	bne.n	8002640 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002616:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800263e:	e0bd      	b.n	80027bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b03      	cmp	r3, #3
 8002648:	d129      	bne.n	800269e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002658:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b04      	cmp	r3, #4
 800265e:	d00a      	beq.n	8002676 <I2C_MasterReceive_BTF+0x86>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d007      	beq.n	8002676 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002674:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800269c:	e08e      	b.n	80027bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d176      	bne.n	8002796 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d002      	beq.n	80026b4 <I2C_MasterReceive_BTF+0xc4>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b10      	cmp	r3, #16
 80026b2:	d108      	bne.n	80026c6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e019      	b.n	80026fa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d002      	beq.n	80026d2 <I2C_MasterReceive_BTF+0xe2>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d108      	bne.n	80026e4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e00a      	b.n	80026fa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b10      	cmp	r3, #16
 80026e8:	d007      	beq.n	80026fa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002754:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b40      	cmp	r3, #64	; 0x40
 8002768:	d10a      	bne.n	8002780 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff fcba 	bl	80020f2 <HAL_I2C_MemRxCpltCallback>
}
 800277e:	e01d      	b.n	80027bc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2212      	movs	r2, #18
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff fc6f 	bl	8002072 <HAL_I2C_MasterRxCpltCallback>
}
 8002794:	e012      	b.n	80027bc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d117      	bne.n	8002808 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d109      	bne.n	80027f4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027f0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80027f2:	e067      	b.n	80028c4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	611a      	str	r2, [r3, #16]
}
 8002806:	e05d      	b.n	80028c4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002810:	d133      	bne.n	800287a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b21      	cmp	r3, #33	; 0x21
 800281c:	d109      	bne.n	8002832 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800282e:	611a      	str	r2, [r3, #16]
 8002830:	e008      	b.n	8002844 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <I2C_Master_SB+0x92>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d108      	bne.n	8002868 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	2b00      	cmp	r3, #0
 800285c:	d032      	beq.n	80028c4 <I2C_Master_SB+0x100>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	2b00      	cmp	r3, #0
 8002866:	d02d      	beq.n	80028c4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002876:	605a      	str	r2, [r3, #4]
}
 8002878:	e024      	b.n	80028c4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10e      	bne.n	80028a0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	b29b      	uxth	r3, r3
 8002888:	11db      	asrs	r3, r3, #7
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f003 0306 	and.w	r3, r3, #6
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f063 030f 	orn	r3, r3, #15
 8002896:	b2da      	uxtb	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	611a      	str	r2, [r3, #16]
}
 800289e:	e011      	b.n	80028c4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d10d      	bne.n	80028c4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	11db      	asrs	r3, r3, #7
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f003 0306 	and.w	r3, r3, #6
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f063 030e 	orn	r3, r3, #14
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	611a      	str	r2, [r3, #16]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <I2C_Master_ADD10+0x26>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <I2C_Master_ADD10+0x48>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002916:	605a      	str	r2, [r3, #4]
  }
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002924:	b480      	push	{r7}
 8002926:	b091      	sub	sp, #68	; 0x44
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002932:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b22      	cmp	r3, #34	; 0x22
 800294c:	f040 8169 	bne.w	8002c22 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10f      	bne.n	8002978 <I2C_Master_ADDR+0x54>
 8002958:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800295c:	2b40      	cmp	r3, #64	; 0x40
 800295e:	d10b      	bne.n	8002978 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002960:	2300      	movs	r3, #0
 8002962:	633b      	str	r3, [r7, #48]	; 0x30
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	633b      	str	r3, [r7, #48]	; 0x30
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	e160      	b.n	8002c3a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297c:	2b00      	cmp	r3, #0
 800297e:	d11d      	bne.n	80029bc <I2C_Master_ADDR+0x98>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002988:	d118      	bne.n	80029bc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298a:	2300      	movs	r3, #0
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ae:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	651a      	str	r2, [r3, #80]	; 0x50
 80029ba:	e13e      	b.n	8002c3a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d113      	bne.n	80029ee <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c6:	2300      	movs	r3, #0
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e115      	b.n	8002c1a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	f040 808a 	bne.w	8002b0e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a00:	d137      	bne.n	8002a72 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a10:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a20:	d113      	bne.n	8002a4a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a30:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	e0e7      	b.n	8002c1a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	623b      	str	r3, [r7, #32]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e0d3      	b.n	8002c1a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d02e      	beq.n	8002ad6 <I2C_Master_ADDR+0x1b2>
 8002a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d02b      	beq.n	8002ad6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a80:	2b12      	cmp	r3, #18
 8002a82:	d102      	bne.n	8002a8a <I2C_Master_ADDR+0x166>
 8002a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d125      	bne.n	8002ad6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d00e      	beq.n	8002aae <I2C_Master_ADDR+0x18a>
 8002a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d00b      	beq.n	8002aae <I2C_Master_ADDR+0x18a>
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d008      	beq.n	8002aae <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e007      	b.n	8002abe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002abc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	e0a1      	b.n	8002c1a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e085      	b.n	8002c1a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d14d      	bne.n	8002bb4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d016      	beq.n	8002b4c <I2C_Master_ADDR+0x228>
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d013      	beq.n	8002b4c <I2C_Master_ADDR+0x228>
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d010      	beq.n	8002b4c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b38:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e007      	b.n	8002b5c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b5a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b6a:	d117      	bne.n	8002b9c <I2C_Master_ADDR+0x278>
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b72:	d00b      	beq.n	8002b8c <I2C_Master_ADDR+0x268>
 8002b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d008      	beq.n	8002b8c <I2C_Master_ADDR+0x268>
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d005      	beq.n	8002b8c <I2C_Master_ADDR+0x268>
 8002b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b82:	2b10      	cmp	r3, #16
 8002b84:	d002      	beq.n	8002b8c <I2C_Master_ADDR+0x268>
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d107      	bne.n	8002b9c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b9a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	e032      	b.n	8002c1a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bc2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd2:	d117      	bne.n	8002c04 <I2C_Master_ADDR+0x2e0>
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bda:	d00b      	beq.n	8002bf4 <I2C_Master_ADDR+0x2d0>
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d008      	beq.n	8002bf4 <I2C_Master_ADDR+0x2d0>
 8002be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d005      	beq.n	8002bf4 <I2C_Master_ADDR+0x2d0>
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d002      	beq.n	8002bf4 <I2C_Master_ADDR+0x2d0>
 8002bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d107      	bne.n	8002c04 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c02:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002c20:	e00b      	b.n	8002c3a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	e7ff      	b.n	8002c3a <I2C_Master_ADDR+0x316>
 8002c3a:	bf00      	nop
 8002c3c:	3744      	adds	r7, #68	; 0x44
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c54:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d02b      	beq.n	8002cb8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d114      	bne.n	8002cb8 <I2C_SlaveTransmit_TXE+0x72>
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	2b29      	cmp	r3, #41	; 0x29
 8002c92:	d111      	bne.n	8002cb8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2221      	movs	r2, #33	; 0x21
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2228      	movs	r2, #40	; 0x28
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff f9e7 	bl	8002086 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d011      	beq.n	8002cf6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	781a      	ldrb	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d02c      	beq.n	8002d76 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d114      	bne.n	8002d76 <I2C_SlaveReceive_RXNE+0x74>
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d50:	d111      	bne.n	8002d76 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d60:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2222      	movs	r2, #34	; 0x22
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2228      	movs	r2, #40	; 0x28
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff f992 	bl	800209a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d012      	beq.n	8002db6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ddc:	2b28      	cmp	r3, #40	; 0x28
 8002dde:	d127      	bne.n	8002e30 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dee:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	09db      	lsrs	r3, r3, #7
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d103      	bne.n	8002e14 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	81bb      	strh	r3, [r7, #12]
 8002e12:	e002      	b.n	8002e1a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002e22:	89ba      	ldrh	r2, [r7, #12]
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff f940 	bl	80020ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e2e:	e00e      	b.n	8002e4e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e66:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e76:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb4:	d172      	bne.n	8002f9c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	2b22      	cmp	r3, #34	; 0x22
 8002eba:	d002      	beq.n	8002ec2 <I2C_Slave_STOPF+0x6a>
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8002ec0:	d135      	bne.n	8002f2e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f043 0204 	orr.w	r2, r3, #4
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fc3e 	bl	800177c <HAL_DMA_GetState>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d049      	beq.n	8002f9a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	4a69      	ldr	r2, [pc, #420]	; (80030b0 <I2C_Slave_STOPF+0x258>)
 8002f0c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fc10 	bl	8001738 <HAL_DMA_Abort_IT>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d03d      	beq.n	8002f9a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f2c:	e035      	b.n	8002f9a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f043 0204 	orr.w	r2, r3, #4
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fc08 	bl	800177c <HAL_DMA_GetState>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d014      	beq.n	8002f9c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	4a4e      	ldr	r2, [pc, #312]	; (80030b0 <I2C_Slave_STOPF+0x258>)
 8002f78:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe fbda 	bl	8001738 <HAL_DMA_Abort_IT>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f94:	4610      	mov	r0, r2
 8002f96:	4798      	blx	r3
 8002f98:	e000      	b.n	8002f9c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f9a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d03e      	beq.n	8003024 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d112      	bne.n	8002fda <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d112      	bne.n	800300e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f043 0204 	orr.w	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f843 	bl	80030b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003032:	e039      	b.n	80030a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b2a      	cmp	r3, #42	; 0x2a
 8003038:	d109      	bne.n	800304e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2228      	movs	r2, #40	; 0x28
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff f826 	bl	800209a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b28      	cmp	r3, #40	; 0x28
 8003058:	d111      	bne.n	800307e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <I2C_Slave_STOPF+0x25c>)
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff f827 	bl	80020ca <HAL_I2C_ListenCpltCallback>
}
 800307c:	e014      	b.n	80030a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	2b22      	cmp	r3, #34	; 0x22
 8003084:	d002      	beq.n	800308c <I2C_Slave_STOPF+0x234>
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	2b22      	cmp	r3, #34	; 0x22
 800308a:	d10d      	bne.n	80030a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe fff9 	bl	800209a <HAL_I2C_SlaveRxCpltCallback>
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	0800331d 	.word	0x0800331d
 80030b4:	ffff0000 	.word	0xffff0000

080030b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030d0:	7bbb      	ldrb	r3, [r7, #14]
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d002      	beq.n	80030dc <I2C_ITError+0x24>
 80030d6:	7bbb      	ldrb	r3, [r7, #14]
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d10a      	bne.n	80030f2 <I2C_ITError+0x3a>
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b22      	cmp	r3, #34	; 0x22
 80030e0:	d107      	bne.n	80030f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030f8:	2b28      	cmp	r3, #40	; 0x28
 80030fa:	d107      	bne.n	800310c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2228      	movs	r2, #40	; 0x28
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800310a:	e015      	b.n	8003138 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800311a:	d00a      	beq.n	8003132 <I2C_ITError+0x7a>
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b60      	cmp	r3, #96	; 0x60
 8003120:	d007      	beq.n	8003132 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003146:	d162      	bne.n	800320e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003156:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d020      	beq.n	80031a8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	4a6a      	ldr	r2, [pc, #424]	; (8003314 <I2C_ITError+0x25c>)
 800316c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fae0 	bl	8001738 <HAL_DMA_Abort_IT>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8089 	beq.w	8003292 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031a2:	4610      	mov	r0, r2
 80031a4:	4798      	blx	r3
 80031a6:	e074      	b.n	8003292 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	4a59      	ldr	r2, [pc, #356]	; (8003314 <I2C_ITError+0x25c>)
 80031ae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fe fabf 	bl	8001738 <HAL_DMA_Abort_IT>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d068      	beq.n	8003292 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d10b      	bne.n	80031e6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003208:	4610      	mov	r0, r2
 800320a:	4798      	blx	r3
 800320c:	e041      	b.n	8003292 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b60      	cmp	r3, #96	; 0x60
 8003218:	d125      	bne.n	8003266 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d10b      	bne.n	800324e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fe ff5b 	bl	800211a <HAL_I2C_AbortCpltCallback>
 8003264:	e015      	b.n	8003292 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d10b      	bne.n	800328c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fe ff3a 	bl	8002106 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10e      	bne.n	80032c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d104      	bne.n	80032c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032ce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d113      	bne.n	800330c <I2C_ITError+0x254>
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2b28      	cmp	r3, #40	; 0x28
 80032e8:	d110      	bne.n	800330c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <I2C_ITError+0x260>)
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fe fedf 	bl	80020ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	0800331d 	.word	0x0800331d
 8003318:	ffff0000 	.word	0xffff0000

0800331c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003334:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003336:	4b4b      	ldr	r3, [pc, #300]	; (8003464 <I2C_DMAAbort+0x148>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	08db      	lsrs	r3, r3, #3
 800333c:	4a4a      	ldr	r2, [pc, #296]	; (8003468 <I2C_DMAAbort+0x14c>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0a1a      	lsrs	r2, r3, #8
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00da      	lsls	r2, r3, #3
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003362:	e00a      	b.n	800337a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3b01      	subs	r3, #1
 8003368:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003378:	d0ea      	beq.n	8003350 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003386:	2200      	movs	r2, #0
 8003388:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	2200      	movs	r2, #0
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2200      	movs	r2, #0
 80033ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033bc:	2200      	movs	r2, #0
 80033be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	2200      	movs	r2, #0
 80033ce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b60      	cmp	r3, #96	; 0x60
 80033ea:	d10e      	bne.n	800340a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003402:	6978      	ldr	r0, [r7, #20]
 8003404:	f7fe fe89 	bl	800211a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003408:	e027      	b.n	800345a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003410:	2b28      	cmp	r3, #40	; 0x28
 8003412:	d117      	bne.n	8003444 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003432:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2200      	movs	r2, #0
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2228      	movs	r2, #40	; 0x28
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003442:	e007      	b.n	8003454 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003454:	6978      	ldr	r0, [r7, #20]
 8003456:	f7fe fe56 	bl	8002106 <HAL_I2C_ErrorCallback>
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000008 	.word	0x20000008
 8003468:	14f8b589 	.word	0x14f8b589

0800346c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003478:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	08db      	lsrs	r3, r3, #3
 800347e:	4a13      	ldr	r2, [pc, #76]	; (80034cc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	0a1a      	lsrs	r2, r3, #8
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3b01      	subs	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d107      	bne.n	80034aa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f043 0220 	orr.w	r2, r3, #32
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e008      	b.n	80034bc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b8:	d0e9      	beq.n	800348e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	20000008 	.word	0x20000008
 80034cc:	14f8b589 	.word	0x14f8b589

080034d0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80034e0:	d103      	bne.n	80034ea <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80034e8:	e007      	b.n	80034fa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80034f2:	d102      	bne.n	80034fa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2208      	movs	r2, #8
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_PWREx_EnableOverDrive+0x90>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <HAL_PWREx_EnableOverDrive+0x90>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <HAL_PWREx_EnableOverDrive+0x90>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_PWREx_EnableOverDrive+0x94>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003534:	f7fd ffa2 	bl	800147c <HAL_GetTick>
 8003538:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800353a:	e009      	b.n	8003550 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800353c:	f7fd ff9e 	bl	800147c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800354a:	d901      	bls.n	8003550 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e01f      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003550:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d1ee      	bne.n	800353c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003564:	f7fd ff8a 	bl	800147c <HAL_GetTick>
 8003568:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800356a:	e009      	b.n	8003580 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800356c:	f7fd ff86 	bl	800147c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800357a:	d901      	bls.n	8003580 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e007      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800358c:	d1ee      	bne.n	800356c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	420e0040 	.word	0x420e0040
 80035a0:	40007000 	.word	0x40007000
 80035a4:	420e0044 	.word	0x420e0044

080035a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0cc      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035bc:	4b68      	ldr	r3, [pc, #416]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d90c      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b65      	ldr	r3, [pc, #404]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b8      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003614:	4b53      	ldr	r3, [pc, #332]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a52      	ldr	r2, [pc, #328]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	494d      	ldr	r1, [pc, #308]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d044      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d119      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d003      	beq.n	8003666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	2b03      	cmp	r3, #3
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e06f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e067      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003686:	4b37      	ldr	r3, [pc, #220]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f023 0203 	bic.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4934      	ldr	r1, [pc, #208]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003698:	f7fd fef0 	bl	800147c <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a0:	f7fd feec 	bl	800147c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e04f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 020c 	and.w	r2, r3, #12
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d1eb      	bne.n	80036a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c8:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d20c      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e032      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4916      	ldr	r1, [pc, #88]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	490e      	ldr	r1, [pc, #56]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800372e:	f000 f887 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 8003732:	4602      	mov	r2, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	490a      	ldr	r1, [pc, #40]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	5ccb      	ldrb	r3, [r1, r3]
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd fbda 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00
 8003764:	40023800 	.word	0x40023800
 8003768:	0800883c 	.word	0x0800883c
 800376c:	20000008 	.word	0x20000008
 8003770:	20000010 	.word	0x20000010

08003774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCC_GetHCLKFreq+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000008 	.word	0x20000008

0800378c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003790:	f7ff fff0 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0a9b      	lsrs	r3, r3, #10
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	0800884c 	.word	0x0800884c

080037b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037b8:	f7ff ffdc 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0b5b      	lsrs	r3, r3, #13
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4903      	ldr	r1, [pc, #12]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	0800884c 	.word	0x0800884c

080037dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	220f      	movs	r2, #15
 80037ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0203 	and.w	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <HAL_RCC_GetClockConfig+0x60>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 020f 	and.w	r2, r3, #15
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	601a      	str	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	40023c00 	.word	0x40023c00

08003840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003844:	b0ae      	sub	sp, #184	; 0xb8
 8003846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003866:	4bcb      	ldr	r3, [pc, #812]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b0c      	cmp	r3, #12
 8003870:	f200 8206 	bhi.w	8003c80 <HAL_RCC_GetSysClockFreq+0x440>
 8003874:	a201      	add	r2, pc, #4	; (adr r2, 800387c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	080038b1 	.word	0x080038b1
 8003880:	08003c81 	.word	0x08003c81
 8003884:	08003c81 	.word	0x08003c81
 8003888:	08003c81 	.word	0x08003c81
 800388c:	080038b9 	.word	0x080038b9
 8003890:	08003c81 	.word	0x08003c81
 8003894:	08003c81 	.word	0x08003c81
 8003898:	08003c81 	.word	0x08003c81
 800389c:	080038c1 	.word	0x080038c1
 80038a0:	08003c81 	.word	0x08003c81
 80038a4:	08003c81 	.word	0x08003c81
 80038a8:	08003c81 	.word	0x08003c81
 80038ac:	08003ab1 	.word	0x08003ab1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038b0:	4bb9      	ldr	r3, [pc, #740]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x358>)
 80038b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80038b6:	e1e7      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038b8:	4bb8      	ldr	r3, [pc, #736]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x35c>)
 80038ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038be:	e1e3      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c0:	4bb4      	ldr	r3, [pc, #720]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038cc:	4bb1      	ldr	r3, [pc, #708]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d071      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d8:	4bae      	ldr	r3, [pc, #696]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80038e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038fe:	4622      	mov	r2, r4
 8003900:	462b      	mov	r3, r5
 8003902:	f04f 0000 	mov.w	r0, #0
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	0159      	lsls	r1, r3, #5
 800390c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003910:	0150      	lsls	r0, r2, #5
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4621      	mov	r1, r4
 8003918:	1a51      	subs	r1, r2, r1
 800391a:	6439      	str	r1, [r7, #64]	; 0x40
 800391c:	4629      	mov	r1, r5
 800391e:	eb63 0301 	sbc.w	r3, r3, r1
 8003922:	647b      	str	r3, [r7, #68]	; 0x44
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003930:	4649      	mov	r1, r9
 8003932:	018b      	lsls	r3, r1, #6
 8003934:	4641      	mov	r1, r8
 8003936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800393a:	4641      	mov	r1, r8
 800393c:	018a      	lsls	r2, r1, #6
 800393e:	4641      	mov	r1, r8
 8003940:	1a51      	subs	r1, r2, r1
 8003942:	63b9      	str	r1, [r7, #56]	; 0x38
 8003944:	4649      	mov	r1, r9
 8003946:	eb63 0301 	sbc.w	r3, r3, r1
 800394a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003958:	4649      	mov	r1, r9
 800395a:	00cb      	lsls	r3, r1, #3
 800395c:	4641      	mov	r1, r8
 800395e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003962:	4641      	mov	r1, r8
 8003964:	00ca      	lsls	r2, r1, #3
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	4603      	mov	r3, r0
 800396c:	4622      	mov	r2, r4
 800396e:	189b      	adds	r3, r3, r2
 8003970:	633b      	str	r3, [r7, #48]	; 0x30
 8003972:	462b      	mov	r3, r5
 8003974:	460a      	mov	r2, r1
 8003976:	eb42 0303 	adc.w	r3, r2, r3
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003988:	4629      	mov	r1, r5
 800398a:	024b      	lsls	r3, r1, #9
 800398c:	4621      	mov	r1, r4
 800398e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003992:	4621      	mov	r1, r4
 8003994:	024a      	lsls	r2, r1, #9
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80039ac:	f7fc fc42 	bl	8000234 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4613      	mov	r3, r2
 80039b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039ba:	e067      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039bc:	4b75      	ldr	r3, [pc, #468]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	099b      	lsrs	r3, r3, #6
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80039cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039d6:	2300      	movs	r3, #0
 80039d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80039de:	4622      	mov	r2, r4
 80039e0:	462b      	mov	r3, r5
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	0159      	lsls	r1, r3, #5
 80039ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f0:	0150      	lsls	r0, r2, #5
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4621      	mov	r1, r4
 80039f8:	1a51      	subs	r1, r2, r1
 80039fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80039fc:	4629      	mov	r1, r5
 80039fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003a10:	4649      	mov	r1, r9
 8003a12:	018b      	lsls	r3, r1, #6
 8003a14:	4641      	mov	r1, r8
 8003a16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	018a      	lsls	r2, r1, #6
 8003a1e:	4641      	mov	r1, r8
 8003a20:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a24:	4649      	mov	r1, r9
 8003a26:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a3e:	4692      	mov	sl, r2
 8003a40:	469b      	mov	fp, r3
 8003a42:	4623      	mov	r3, r4
 8003a44:	eb1a 0303 	adds.w	r3, sl, r3
 8003a48:	623b      	str	r3, [r7, #32]
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003a5e:	4629      	mov	r1, r5
 8003a60:	028b      	lsls	r3, r1, #10
 8003a62:	4621      	mov	r1, r4
 8003a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a68:	4621      	mov	r1, r4
 8003a6a:	028a      	lsls	r2, r1, #10
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a74:	2200      	movs	r2, #0
 8003a76:	673b      	str	r3, [r7, #112]	; 0x70
 8003a78:	677a      	str	r2, [r7, #116]	; 0x74
 8003a7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003a7e:	f7fc fbd9 	bl	8000234 <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4613      	mov	r3, r2
 8003a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a8c:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	0c1b      	lsrs	r3, r3, #16
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	3301      	adds	r3, #1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003a9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003aa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003aae:	e0eb      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab0:	4b38      	ldr	r3, [pc, #224]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003abc:	4b35      	ldr	r3, [pc, #212]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d06b      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac8:	4b32      	ldr	r3, [pc, #200]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	2200      	movs	r2, #0
 8003ad0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ad2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ada:	663b      	str	r3, [r7, #96]	; 0x60
 8003adc:	2300      	movs	r3, #0
 8003ade:	667b      	str	r3, [r7, #100]	; 0x64
 8003ae0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ae4:	4622      	mov	r2, r4
 8003ae6:	462b      	mov	r3, r5
 8003ae8:	f04f 0000 	mov.w	r0, #0
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	0159      	lsls	r1, r3, #5
 8003af2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af6:	0150      	lsls	r0, r2, #5
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4621      	mov	r1, r4
 8003afe:	1a51      	subs	r1, r2, r1
 8003b00:	61b9      	str	r1, [r7, #24]
 8003b02:	4629      	mov	r1, r5
 8003b04:	eb63 0301 	sbc.w	r3, r3, r1
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b16:	4659      	mov	r1, fp
 8003b18:	018b      	lsls	r3, r1, #6
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b20:	4651      	mov	r1, sl
 8003b22:	018a      	lsls	r2, r1, #6
 8003b24:	4651      	mov	r1, sl
 8003b26:	ebb2 0801 	subs.w	r8, r2, r1
 8003b2a:	4659      	mov	r1, fp
 8003b2c:	eb63 0901 	sbc.w	r9, r3, r1
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b44:	4690      	mov	r8, r2
 8003b46:	4699      	mov	r9, r3
 8003b48:	4623      	mov	r3, r4
 8003b4a:	eb18 0303 	adds.w	r3, r8, r3
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	462b      	mov	r3, r5
 8003b52:	eb49 0303 	adc.w	r3, r9, r3
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003b64:	4629      	mov	r1, r5
 8003b66:	024b      	lsls	r3, r1, #9
 8003b68:	4621      	mov	r1, r4
 8003b6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b6e:	4621      	mov	r1, r4
 8003b70:	024a      	lsls	r2, r1, #9
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b84:	f7fc fb56 	bl	8000234 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b92:	e065      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x420>
 8003b94:	40023800 	.word	0x40023800
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba0:	4b3d      	ldr	r3, [pc, #244]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	4611      	mov	r1, r2
 8003bac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bb0:	653b      	str	r3, [r7, #80]	; 0x50
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8003bb6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003bba:	4642      	mov	r2, r8
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	f04f 0000 	mov.w	r0, #0
 8003bc2:	f04f 0100 	mov.w	r1, #0
 8003bc6:	0159      	lsls	r1, r3, #5
 8003bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bcc:	0150      	lsls	r0, r2, #5
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4641      	mov	r1, r8
 8003bd4:	1a51      	subs	r1, r2, r1
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	4649      	mov	r1, r9
 8003bda:	eb63 0301 	sbc.w	r3, r3, r1
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003bec:	4659      	mov	r1, fp
 8003bee:	018b      	lsls	r3, r1, #6
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	018a      	lsls	r2, r1, #6
 8003bfa:	4651      	mov	r1, sl
 8003bfc:	1a54      	subs	r4, r2, r1
 8003bfe:	4659      	mov	r1, fp
 8003c00:	eb63 0501 	sbc.w	r5, r3, r1
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	00eb      	lsls	r3, r5, #3
 8003c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c12:	00e2      	lsls	r2, r4, #3
 8003c14:	4614      	mov	r4, r2
 8003c16:	461d      	mov	r5, r3
 8003c18:	4643      	mov	r3, r8
 8003c1a:	18e3      	adds	r3, r4, r3
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	464b      	mov	r3, r9
 8003c20:	eb45 0303 	adc.w	r3, r5, r3
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c32:	4629      	mov	r1, r5
 8003c34:	028b      	lsls	r3, r1, #10
 8003c36:	4621      	mov	r1, r4
 8003c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	028a      	lsls	r2, r1, #10
 8003c40:	4610      	mov	r0, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c48:	2200      	movs	r2, #0
 8003c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c4c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c52:	f7fc faef 	bl	8000234 <__aeabi_uldivmod>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	0f1b      	lsrs	r3, r3, #28
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003c6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c7e:	e003      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	37b8      	adds	r7, #184	; 0xb8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	00f42400 	.word	0x00f42400

08003ca0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e28d      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 8083 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cc0:	4b94      	ldr	r3, [pc, #592]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d019      	beq.n	8003d00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ccc:	4b91      	ldr	r3, [pc, #580]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d106      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cd8:	4b8e      	ldr	r3, [pc, #568]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce4:	d00c      	beq.n	8003d00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ce6:	4b8b      	ldr	r3, [pc, #556]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d112      	bne.n	8003d18 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf2:	4b88      	ldr	r3, [pc, #544]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cfe:	d10b      	bne.n	8003d18 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	4b84      	ldr	r3, [pc, #528]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d05b      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x124>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d157      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e25a      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d20:	d106      	bne.n	8003d30 <HAL_RCC_OscConfig+0x90>
 8003d22:	4b7c      	ldr	r3, [pc, #496]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a7b      	ldr	r2, [pc, #492]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e01d      	b.n	8003d6c <HAL_RCC_OscConfig+0xcc>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0xb4>
 8003d3a:	4b76      	ldr	r3, [pc, #472]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a75      	ldr	r2, [pc, #468]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b73      	ldr	r3, [pc, #460]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a72      	ldr	r2, [pc, #456]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e00b      	b.n	8003d6c <HAL_RCC_OscConfig+0xcc>
 8003d54:	4b6f      	ldr	r3, [pc, #444]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a6e      	ldr	r2, [pc, #440]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	4b6c      	ldr	r3, [pc, #432]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6b      	ldr	r2, [pc, #428]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d013      	beq.n	8003d9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fd fb82 	bl	800147c <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fd fb7e 	bl	800147c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	; 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e21f      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b61      	ldr	r3, [pc, #388]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0xdc>
 8003d9a:	e014      	b.n	8003dc6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fd fb6e 	bl	800147c <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fd fb6a 	bl	800147c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e20b      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db6:	4b57      	ldr	r3, [pc, #348]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x104>
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d06f      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dd2:	4b50      	ldr	r3, [pc, #320]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d017      	beq.n	8003e0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dde:	4b4d      	ldr	r3, [pc, #308]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d105      	bne.n	8003df6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dea:	4b4a      	ldr	r3, [pc, #296]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df6:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d11c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e02:	4b44      	ldr	r3, [pc, #272]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d116      	bne.n	8003e3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0e:	4b41      	ldr	r3, [pc, #260]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_RCC_OscConfig+0x186>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e1d3      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e26:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4937      	ldr	r1, [pc, #220]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3a:	e03a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e44:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <HAL_RCC_OscConfig+0x278>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fd fb17 	bl	800147c <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e52:	f7fd fb13 	bl	800147c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e1b4      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e70:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4925      	ldr	r1, [pc, #148]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]
 8003e84:	e015      	b.n	8003eb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e86:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <HAL_RCC_OscConfig+0x278>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fd faf6 	bl	800147c <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e94:	f7fd faf2 	bl	800147c <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e193      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d036      	beq.n	8003f2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <HAL_RCC_OscConfig+0x27c>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fd fad6 	bl	800147c <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed4:	f7fd fad2 	bl	800147c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e173      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x234>
 8003ef2:	e01b      	b.n	8003f2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efa:	f7fd fabf 	bl	800147c <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	e00e      	b.n	8003f20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f02:	f7fd fabb 	bl	800147c <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d907      	bls.n	8003f20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e15c      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
 8003f14:	40023800 	.word	0x40023800
 8003f18:	42470000 	.word	0x42470000
 8003f1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f20:	4b8a      	ldr	r3, [pc, #552]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ea      	bne.n	8003f02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8097 	beq.w	8004068 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3e:	4b83      	ldr	r3, [pc, #524]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10f      	bne.n	8003f6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	4b7f      	ldr	r3, [pc, #508]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	4a7e      	ldr	r2, [pc, #504]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5a:	4b7c      	ldr	r3, [pc, #496]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6a:	4b79      	ldr	r3, [pc, #484]	; (8004150 <HAL_RCC_OscConfig+0x4b0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d118      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f76:	4b76      	ldr	r3, [pc, #472]	; (8004150 <HAL_RCC_OscConfig+0x4b0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a75      	ldr	r2, [pc, #468]	; (8004150 <HAL_RCC_OscConfig+0x4b0>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f82:	f7fd fa7b 	bl	800147c <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8a:	f7fd fa77 	bl	800147c <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e118      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	4b6c      	ldr	r3, [pc, #432]	; (8004150 <HAL_RCC_OscConfig+0x4b0>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x31e>
 8003fb0:	4b66      	ldr	r3, [pc, #408]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a65      	ldr	r2, [pc, #404]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbc:	e01c      	b.n	8003ff8 <HAL_RCC_OscConfig+0x358>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x340>
 8003fc6:	4b61      	ldr	r3, [pc, #388]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a60      	ldr	r2, [pc, #384]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd2:	4b5e      	ldr	r3, [pc, #376]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	4a5d      	ldr	r2, [pc, #372]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x358>
 8003fe0:	4b5a      	ldr	r3, [pc, #360]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	4a59      	ldr	r2, [pc, #356]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	6713      	str	r3, [r2, #112]	; 0x70
 8003fec:	4b57      	ldr	r3, [pc, #348]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	4a56      	ldr	r2, [pc, #344]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003ff2:	f023 0304 	bic.w	r3, r3, #4
 8003ff6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d015      	beq.n	800402c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7fd fa3c 	bl	800147c <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004006:	e00a      	b.n	800401e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004008:	f7fd fa38 	bl	800147c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	; 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0d7      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401e:	4b4b      	ldr	r3, [pc, #300]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0ee      	beq.n	8004008 <HAL_RCC_OscConfig+0x368>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fd fa26 	bl	800147c <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004034:	f7fd fa22 	bl	800147c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e0c1      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404a:	4b40      	ldr	r3, [pc, #256]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1ee      	bne.n	8004034 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004056:	7dfb      	ldrb	r3, [r7, #23]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405c:	4b3b      	ldr	r3, [pc, #236]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	4a3a      	ldr	r2, [pc, #232]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8004062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004066:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80ad 	beq.w	80041cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004072:	4b36      	ldr	r3, [pc, #216]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b08      	cmp	r3, #8
 800407c:	d060      	beq.n	8004140 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d145      	bne.n	8004112 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	4b33      	ldr	r3, [pc, #204]	; (8004154 <HAL_RCC_OscConfig+0x4b4>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fd f9f6 	bl	800147c <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fd f9f2 	bl	800147c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e093      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b29      	ldr	r3, [pc, #164]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	3b01      	subs	r3, #1
 80040cc:	041b      	lsls	r3, r3, #16
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	071b      	lsls	r3, r3, #28
 80040de:	491b      	ldr	r1, [pc, #108]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCC_OscConfig+0x4b4>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fd f9c7 	bl	800147c <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fd f9c3 	bl	800147c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e064      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x452>
 8004110:	e05c      	b.n	80041cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <HAL_RCC_OscConfig+0x4b4>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fd f9b0 	bl	800147c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004120:	f7fd f9ac 	bl	800147c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e04d      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x480>
 800413e:	e045      	b.n	80041cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e040      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
 800414c:	40023800 	.word	0x40023800
 8004150:	40007000 	.word	0x40007000
 8004154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004158:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <HAL_RCC_OscConfig+0x538>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d030      	beq.n	80041c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d129      	bne.n	80041c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d122      	bne.n	80041c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004188:	4013      	ands	r3, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800418e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004190:	4293      	cmp	r3, r2
 8004192:	d119      	bne.n	80041c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	3b01      	subs	r3, #1
 80041a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d10f      	bne.n	80041c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800

080041dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e041      	b.n	8004272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f839 	bl	800427a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f000 f9d8 	bl	80045d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d001      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e04e      	b.n	8004346 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a23      	ldr	r2, [pc, #140]	; (8004354 <HAL_TIM_Base_Start_IT+0xc4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d022      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d2:	d01d      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1f      	ldr	r2, [pc, #124]	; (8004358 <HAL_TIM_Base_Start_IT+0xc8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1e      	ldr	r2, [pc, #120]	; (800435c <HAL_TIM_Base_Start_IT+0xcc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1c      	ldr	r2, [pc, #112]	; (8004360 <HAL_TIM_Base_Start_IT+0xd0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <HAL_TIM_Base_Start_IT+0xd4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a19      	ldr	r2, [pc, #100]	; (8004368 <HAL_TIM_Base_Start_IT+0xd8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a18      	ldr	r2, [pc, #96]	; (800436c <HAL_TIM_Base_Start_IT+0xdc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d111      	bne.n	8004334 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b06      	cmp	r3, #6
 8004320:	d010      	beq.n	8004344 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	e007      	b.n	8004344 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40010000 	.word	0x40010000
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800
 8004360:	40000c00 	.word	0x40000c00
 8004364:	40010400 	.word	0x40010400
 8004368:	40014000 	.word	0x40014000
 800436c:	40001800 	.word	0x40001800

08004370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d122      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d11b      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0202 	mvn.w	r2, #2
 800439c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f8ee 	bl	8004594 <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f8e0 	bl	8004580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f8f1 	bl	80045a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d122      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d11b      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0204 	mvn.w	r2, #4
 80043f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f8c4 	bl	8004594 <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f8b6 	bl	8004580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f8c7 	bl	80045a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b08      	cmp	r3, #8
 800442c:	d122      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d11b      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0208 	mvn.w	r2, #8
 8004444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2204      	movs	r2, #4
 800444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f89a 	bl	8004594 <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f88c 	bl	8004580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f89d 	bl	80045a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b10      	cmp	r3, #16
 8004480:	d122      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b10      	cmp	r3, #16
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0210 	mvn.w	r2, #16
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2208      	movs	r2, #8
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f870 	bl	8004594 <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f862 	bl	8004580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f873 	bl	80045a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0201 	mvn.w	r2, #1
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fc fc2a 	bl	8000d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f902 	bl	8004724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f838 	bl	80045bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b20      	cmp	r3, #32
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b20      	cmp	r3, #32
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0220 	mvn.w	r2, #32
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f8cc 	bl	8004710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a40      	ldr	r2, [pc, #256]	; (80046e4 <TIM_Base_SetConfig+0x114>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d013      	beq.n	8004610 <TIM_Base_SetConfig+0x40>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ee:	d00f      	beq.n	8004610 <TIM_Base_SetConfig+0x40>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a3d      	ldr	r2, [pc, #244]	; (80046e8 <TIM_Base_SetConfig+0x118>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00b      	beq.n	8004610 <TIM_Base_SetConfig+0x40>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a3c      	ldr	r2, [pc, #240]	; (80046ec <TIM_Base_SetConfig+0x11c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d007      	beq.n	8004610 <TIM_Base_SetConfig+0x40>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a3b      	ldr	r2, [pc, #236]	; (80046f0 <TIM_Base_SetConfig+0x120>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_Base_SetConfig+0x40>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a3a      	ldr	r2, [pc, #232]	; (80046f4 <TIM_Base_SetConfig+0x124>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d108      	bne.n	8004622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2f      	ldr	r2, [pc, #188]	; (80046e4 <TIM_Base_SetConfig+0x114>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d02b      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004630:	d027      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a2c      	ldr	r2, [pc, #176]	; (80046e8 <TIM_Base_SetConfig+0x118>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d023      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a2b      	ldr	r2, [pc, #172]	; (80046ec <TIM_Base_SetConfig+0x11c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01f      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a2a      	ldr	r2, [pc, #168]	; (80046f0 <TIM_Base_SetConfig+0x120>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01b      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a29      	ldr	r2, [pc, #164]	; (80046f4 <TIM_Base_SetConfig+0x124>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d017      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a28      	ldr	r2, [pc, #160]	; (80046f8 <TIM_Base_SetConfig+0x128>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a27      	ldr	r2, [pc, #156]	; (80046fc <TIM_Base_SetConfig+0x12c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00f      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a26      	ldr	r2, [pc, #152]	; (8004700 <TIM_Base_SetConfig+0x130>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00b      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a25      	ldr	r2, [pc, #148]	; (8004704 <TIM_Base_SetConfig+0x134>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a24      	ldr	r2, [pc, #144]	; (8004708 <TIM_Base_SetConfig+0x138>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a23      	ldr	r2, [pc, #140]	; (800470c <TIM_Base_SetConfig+0x13c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d108      	bne.n	8004694 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <TIM_Base_SetConfig+0x114>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0xf8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a0c      	ldr	r2, [pc, #48]	; (80046f4 <TIM_Base_SetConfig+0x124>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d103      	bne.n	80046d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	615a      	str	r2, [r3, #20]
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40010400 	.word	0x40010400
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40014400 	.word	0x40014400
 8004700:	40014800 	.word	0x40014800
 8004704:	40001800 	.word	0x40001800
 8004708:	40001c00 	.word	0x40001c00
 800470c:	40002000 	.word	0x40002000

08004710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e03f      	b.n	80047ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fc fb82 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2224      	movs	r2, #36	; 0x24
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800477a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fddf 	bl	8005340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b08a      	sub	sp, #40	; 0x28
 80047d6:	af02      	add	r7, sp, #8
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	603b      	str	r3, [r7, #0]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d17c      	bne.n	80048ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_UART_Transmit+0x2c>
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e075      	b.n	80048ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_UART_Transmit+0x3e>
 800480c:	2302      	movs	r3, #2
 800480e:	e06e      	b.n	80048ee <HAL_UART_Transmit+0x11c>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2221      	movs	r2, #33	; 0x21
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004826:	f7fc fe29 	bl	800147c <HAL_GetTick>
 800482a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	88fa      	ldrh	r2, [r7, #6]
 8004830:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	88fa      	ldrh	r2, [r7, #6]
 8004836:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004840:	d108      	bne.n	8004854 <HAL_UART_Transmit+0x82>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d104      	bne.n	8004854 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	e003      	b.n	800485c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004858:	2300      	movs	r3, #0
 800485a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004864:	e02a      	b.n	80048bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2200      	movs	r2, #0
 800486e:	2180      	movs	r1, #128	; 0x80
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fb1f 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e036      	b.n	80048ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10b      	bne.n	800489e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004894:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	3302      	adds	r3, #2
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	e007      	b.n	80048ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	3301      	adds	r3, #1
 80048ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1cf      	bne.n	8004866 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2200      	movs	r2, #0
 80048ce:	2140      	movs	r1, #64	; 0x40
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 faef 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e006      	b.n	80048ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	e000      	b.n	80048ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
  }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3720      	adds	r7, #32
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	4613      	mov	r3, r2
 8004902:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b20      	cmp	r3, #32
 800490e:	d11d      	bne.n	800494c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_UART_Receive_IT+0x26>
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e016      	b.n	800494e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_UART_Receive_IT+0x38>
 800492a:	2302      	movs	r3, #2
 800492c:	e00f      	b.n	800494e <HAL_UART_Receive_IT+0x58>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	461a      	mov	r2, r3
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fb24 	bl	8004f90 <UART_Start_Receive_IT>
 8004948:	4603      	mov	r3, r0
 800494a:	e000      	b.n	800494e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b0ba      	sub	sp, #232	; 0xe8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800497e:	2300      	movs	r3, #0
 8004980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004984:	2300      	movs	r3, #0
 8004986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800498a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10f      	bne.n	80049be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800499e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <HAL_UART_IRQHandler+0x66>
 80049aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fc07 	bl	80051ca <UART_Receive_IT>
      return;
 80049bc:	e256      	b.n	8004e6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80de 	beq.w	8004b84 <HAL_UART_IRQHandler+0x22c>
 80049c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80d1 	beq.w	8004b84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_UART_IRQHandler+0xae>
 80049ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0201 	orr.w	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00b      	beq.n	8004a2a <HAL_UART_IRQHandler+0xd2>
 8004a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f043 0202 	orr.w	r2, r3, #2
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <HAL_UART_IRQHandler+0xf6>
 8004a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f043 0204 	orr.w	r2, r3, #4
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d011      	beq.n	8004a7e <HAL_UART_IRQHandler+0x126>
 8004a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d105      	bne.n	8004a72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f043 0208 	orr.w	r2, r3, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 81ed 	beq.w	8004e62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x14e>
 8004a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fb92 	bl	80051ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab0:	2b40      	cmp	r3, #64	; 0x40
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x17a>
 8004aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d04f      	beq.n	8004b72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa9a 	bl	800500c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d141      	bne.n	8004b6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3314      	adds	r3, #20
 8004aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3314      	adds	r3, #20
 8004b0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1d9      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d013      	beq.n	8004b62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	4a7d      	ldr	r2, [pc, #500]	; (8004d34 <HAL_UART_IRQHandler+0x3dc>)
 8004b40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fc fdf6 	bl	8001738 <HAL_DMA_Abort_IT>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d016      	beq.n	8004b80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b60:	e00e      	b.n	8004b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f990 	bl	8004e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	e00a      	b.n	8004b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f98c 	bl	8004e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e006      	b.n	8004b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f988 	bl	8004e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b7e:	e170      	b.n	8004e62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	bf00      	nop
    return;
 8004b82:	e16e      	b.n	8004e62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	f040 814a 	bne.w	8004e22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 8143 	beq.w	8004e22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 813c 	beq.w	8004e22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	f040 80b4 	bne.w	8004d38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8140 	beq.w	8004e66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	f080 8139 	bcs.w	8004e66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c06:	f000 8088 	beq.w	8004d1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1d9      	bne.n	8004c0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3314      	adds	r3, #20
 8004c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e1      	bne.n	8004c56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3314      	adds	r3, #20
 8004c98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3314      	adds	r3, #20
 8004cb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e3      	bne.n	8004c92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cea:	f023 0310 	bic.w	r3, r3, #16
 8004cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004cfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e3      	bne.n	8004cd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fc fc9f 	bl	8001658 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f8b6 	bl	8004e9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d30:	e099      	b.n	8004e66 <HAL_UART_IRQHandler+0x50e>
 8004d32:	bf00      	nop
 8004d34:	080050d3 	.word	0x080050d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 808b 	beq.w	8004e6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8086 	beq.w	8004e6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d82:	647a      	str	r2, [r7, #68]	; 0x44
 8004d84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e3      	bne.n	8004d5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3314      	adds	r3, #20
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	623b      	str	r3, [r7, #32]
   return(result);
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3314      	adds	r3, #20
 8004db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dba:	633a      	str	r2, [r7, #48]	; 0x30
 8004dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e3      	bne.n	8004d96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0310 	bic.w	r3, r3, #16
 8004df2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e00:	61fa      	str	r2, [r7, #28]
 8004e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	69b9      	ldr	r1, [r7, #24]
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e3      	bne.n	8004ddc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f83e 	bl	8004e9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e20:	e023      	b.n	8004e6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <HAL_UART_IRQHandler+0x4ea>
 8004e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f95d 	bl	80050fa <UART_Transmit_IT>
    return;
 8004e40:	e014      	b.n	8004e6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00e      	beq.n	8004e6c <HAL_UART_IRQHandler+0x514>
 8004e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d008      	beq.n	8004e6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f99d 	bl	800519a <UART_EndTransmit_IT>
    return;
 8004e60:	e004      	b.n	8004e6c <HAL_UART_IRQHandler+0x514>
    return;
 8004e62:	bf00      	nop
 8004e64:	e002      	b.n	8004e6c <HAL_UART_IRQHandler+0x514>
      return;
 8004e66:	bf00      	nop
 8004e68:	e000      	b.n	8004e6c <HAL_UART_IRQHandler+0x514>
      return;
 8004e6a:	bf00      	nop
  }
}
 8004e6c:	37e8      	adds	r7, #232	; 0xe8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop

08004e74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b090      	sub	sp, #64	; 0x40
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec4:	e050      	b.n	8004f68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d04c      	beq.n	8004f68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ed4:	f7fc fad2 	bl	800147c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d241      	bcs.n	8004f68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	e853 3f00 	ldrex	r3, [r3]
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	330c      	adds	r3, #12
 8004f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f04:	637a      	str	r2, [r7, #52]	; 0x34
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e5      	bne.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	613b      	str	r3, [r7, #16]
   return(result);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f023 0301 	bic.w	r3, r3, #1
 8004f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3314      	adds	r3, #20
 8004f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f38:	623a      	str	r2, [r7, #32]
 8004f3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	69f9      	ldr	r1, [r7, #28]
 8004f3e:	6a3a      	ldr	r2, [r7, #32]
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e5      	bne.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e00f      	b.n	8004f88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4013      	ands	r3, r2
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	bf0c      	ite	eq
 8004f78:	2301      	moveq	r3, #1
 8004f7a:	2300      	movne	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d09f      	beq.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3740      	adds	r7, #64	; 0x40
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	88fa      	ldrh	r2, [r7, #6]
 8004fa8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	88fa      	ldrh	r2, [r7, #6]
 8004fae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2222      	movs	r2, #34	; 0x22
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fdc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695a      	ldr	r2, [r3, #20]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0201 	orr.w	r2, r2, #1
 8004fec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0220 	orr.w	r2, r2, #32
 8004ffc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b095      	sub	sp, #84	; 0x54
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800502a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	330c      	adds	r3, #12
 8005032:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005034:	643a      	str	r2, [r7, #64]	; 0x40
 8005036:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800503a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e5      	bne.n	8005014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3314      	adds	r3, #20
 800504e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	61fb      	str	r3, [r7, #28]
   return(result);
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3314      	adds	r3, #20
 8005066:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005068:	62fa      	str	r2, [r7, #44]	; 0x2c
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800506e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e5      	bne.n	8005048 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	2b01      	cmp	r3, #1
 8005082:	d119      	bne.n	80050b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	60bb      	str	r3, [r7, #8]
   return(result);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f023 0310 	bic.w	r3, r3, #16
 800509a:	647b      	str	r3, [r7, #68]	; 0x44
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a4:	61ba      	str	r2, [r7, #24]
 80050a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6979      	ldr	r1, [r7, #20]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	613b      	str	r3, [r7, #16]
   return(result);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e5      	bne.n	8005084 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050c6:	bf00      	nop
 80050c8:	3754      	adds	r7, #84	; 0x54
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff fecb 	bl	8004e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b21      	cmp	r3, #33	; 0x21
 800510c:	d13e      	bne.n	800518c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	d114      	bne.n	8005142 <UART_Transmit_IT+0x48>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d110      	bne.n	8005142 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005134:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	1c9a      	adds	r2, r3, #2
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	621a      	str	r2, [r3, #32]
 8005140:	e008      	b.n	8005154 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	1c59      	adds	r1, r3, #1
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6211      	str	r1, [r2, #32]
 800514c:	781a      	ldrb	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29b      	uxth	r3, r3
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	4619      	mov	r1, r3
 8005162:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10f      	bne.n	8005188 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005176:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005186:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	e000      	b.n	800518e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800518c:	2302      	movs	r3, #2
  }
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fe5a 	bl	8004e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b08c      	sub	sp, #48	; 0x30
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b22      	cmp	r3, #34	; 0x22
 80051dc:	f040 80ab 	bne.w	8005336 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e8:	d117      	bne.n	800521a <UART_Receive_IT+0x50>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d113      	bne.n	800521a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005208:	b29a      	uxth	r2, r3
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	1c9a      	adds	r2, r3, #2
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	629a      	str	r2, [r3, #40]	; 0x28
 8005218:	e026      	b.n	8005268 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522c:	d007      	beq.n	800523e <UART_Receive_IT+0x74>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <UART_Receive_IT+0x82>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	b2da      	uxtb	r2, r3
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	e008      	b.n	800525e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005258:	b2da      	uxtb	r2, r3
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29b      	uxth	r3, r3
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	4619      	mov	r1, r3
 8005276:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005278:	2b00      	cmp	r3, #0
 800527a:	d15a      	bne.n	8005332 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0220 	bic.w	r2, r2, #32
 800528a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800529a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0201 	bic.w	r2, r2, #1
 80052aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d135      	bne.n	8005328 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	613b      	str	r3, [r7, #16]
   return(result);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f023 0310 	bic.w	r3, r3, #16
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e2:	623a      	str	r2, [r7, #32]
 80052e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	69f9      	ldr	r1, [r7, #28]
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e5      	bne.n	80052c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b10      	cmp	r3, #16
 8005302:	d10a      	bne.n	800531a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800531e:	4619      	mov	r1, r3
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff fdbb 	bl	8004e9c <HAL_UARTEx_RxEventCallback>
 8005326:	e002      	b.n	800532e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7fb fcc3 	bl	8000cb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e002      	b.n	8005338 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e000      	b.n	8005338 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005336:	2302      	movs	r3, #2
  }
}
 8005338:	4618      	mov	r0, r3
 800533a:	3730      	adds	r7, #48	; 0x30
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005344:	b0c0      	sub	sp, #256	; 0x100
 8005346:	af00      	add	r7, sp, #0
 8005348:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	68d9      	ldr	r1, [r3, #12]
 800535e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	ea40 0301 	orr.w	r3, r0, r1
 8005368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	431a      	orrs	r2, r3
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	431a      	orrs	r2, r3
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005398:	f021 010c 	bic.w	r1, r1, #12
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053a6:	430b      	orrs	r3, r1
 80053a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ba:	6999      	ldr	r1, [r3, #24]
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	ea40 0301 	orr.w	r3, r0, r1
 80053c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b8f      	ldr	r3, [pc, #572]	; (800560c <UART_SetConfig+0x2cc>)
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d005      	beq.n	80053e0 <UART_SetConfig+0xa0>
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b8d      	ldr	r3, [pc, #564]	; (8005610 <UART_SetConfig+0x2d0>)
 80053dc:	429a      	cmp	r2, r3
 80053de:	d104      	bne.n	80053ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053e0:	f7fe f9e8 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 80053e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053e8:	e003      	b.n	80053f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053ea:	f7fe f9cf 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 80053ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053fc:	f040 810c 	bne.w	8005618 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005404:	2200      	movs	r2, #0
 8005406:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800540a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800540e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005412:	4622      	mov	r2, r4
 8005414:	462b      	mov	r3, r5
 8005416:	1891      	adds	r1, r2, r2
 8005418:	65b9      	str	r1, [r7, #88]	; 0x58
 800541a:	415b      	adcs	r3, r3
 800541c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800541e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005422:	4621      	mov	r1, r4
 8005424:	eb12 0801 	adds.w	r8, r2, r1
 8005428:	4629      	mov	r1, r5
 800542a:	eb43 0901 	adc.w	r9, r3, r1
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800543a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800543e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005442:	4690      	mov	r8, r2
 8005444:	4699      	mov	r9, r3
 8005446:	4623      	mov	r3, r4
 8005448:	eb18 0303 	adds.w	r3, r8, r3
 800544c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005450:	462b      	mov	r3, r5
 8005452:	eb49 0303 	adc.w	r3, r9, r3
 8005456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005466:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800546a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800546e:	460b      	mov	r3, r1
 8005470:	18db      	adds	r3, r3, r3
 8005472:	653b      	str	r3, [r7, #80]	; 0x50
 8005474:	4613      	mov	r3, r2
 8005476:	eb42 0303 	adc.w	r3, r2, r3
 800547a:	657b      	str	r3, [r7, #84]	; 0x54
 800547c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005480:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005484:	f7fa fed6 	bl	8000234 <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4b61      	ldr	r3, [pc, #388]	; (8005614 <UART_SetConfig+0x2d4>)
 800548e:	fba3 2302 	umull	r2, r3, r3, r2
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	011c      	lsls	r4, r3, #4
 8005496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800549a:	2200      	movs	r2, #0
 800549c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054a8:	4642      	mov	r2, r8
 80054aa:	464b      	mov	r3, r9
 80054ac:	1891      	adds	r1, r2, r2
 80054ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80054b0:	415b      	adcs	r3, r3
 80054b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054b8:	4641      	mov	r1, r8
 80054ba:	eb12 0a01 	adds.w	sl, r2, r1
 80054be:	4649      	mov	r1, r9
 80054c0:	eb43 0b01 	adc.w	fp, r3, r1
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054d8:	4692      	mov	sl, r2
 80054da:	469b      	mov	fp, r3
 80054dc:	4643      	mov	r3, r8
 80054de:	eb1a 0303 	adds.w	r3, sl, r3
 80054e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054e6:	464b      	mov	r3, r9
 80054e8:	eb4b 0303 	adc.w	r3, fp, r3
 80054ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005500:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005504:	460b      	mov	r3, r1
 8005506:	18db      	adds	r3, r3, r3
 8005508:	643b      	str	r3, [r7, #64]	; 0x40
 800550a:	4613      	mov	r3, r2
 800550c:	eb42 0303 	adc.w	r3, r2, r3
 8005510:	647b      	str	r3, [r7, #68]	; 0x44
 8005512:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800551a:	f7fa fe8b 	bl	8000234 <__aeabi_uldivmod>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4611      	mov	r1, r2
 8005524:	4b3b      	ldr	r3, [pc, #236]	; (8005614 <UART_SetConfig+0x2d4>)
 8005526:	fba3 2301 	umull	r2, r3, r3, r1
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	2264      	movs	r2, #100	; 0x64
 800552e:	fb02 f303 	mul.w	r3, r2, r3
 8005532:	1acb      	subs	r3, r1, r3
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800553a:	4b36      	ldr	r3, [pc, #216]	; (8005614 <UART_SetConfig+0x2d4>)
 800553c:	fba3 2302 	umull	r2, r3, r3, r2
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005548:	441c      	add	r4, r3
 800554a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800554e:	2200      	movs	r2, #0
 8005550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005554:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005558:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800555c:	4642      	mov	r2, r8
 800555e:	464b      	mov	r3, r9
 8005560:	1891      	adds	r1, r2, r2
 8005562:	63b9      	str	r1, [r7, #56]	; 0x38
 8005564:	415b      	adcs	r3, r3
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800556c:	4641      	mov	r1, r8
 800556e:	1851      	adds	r1, r2, r1
 8005570:	6339      	str	r1, [r7, #48]	; 0x30
 8005572:	4649      	mov	r1, r9
 8005574:	414b      	adcs	r3, r1
 8005576:	637b      	str	r3, [r7, #52]	; 0x34
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005584:	4659      	mov	r1, fp
 8005586:	00cb      	lsls	r3, r1, #3
 8005588:	4651      	mov	r1, sl
 800558a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800558e:	4651      	mov	r1, sl
 8005590:	00ca      	lsls	r2, r1, #3
 8005592:	4610      	mov	r0, r2
 8005594:	4619      	mov	r1, r3
 8005596:	4603      	mov	r3, r0
 8005598:	4642      	mov	r2, r8
 800559a:	189b      	adds	r3, r3, r2
 800559c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055a0:	464b      	mov	r3, r9
 80055a2:	460a      	mov	r2, r1
 80055a4:	eb42 0303 	adc.w	r3, r2, r3
 80055a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055c0:	460b      	mov	r3, r1
 80055c2:	18db      	adds	r3, r3, r3
 80055c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c6:	4613      	mov	r3, r2
 80055c8:	eb42 0303 	adc.w	r3, r2, r3
 80055cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055d6:	f7fa fe2d 	bl	8000234 <__aeabi_uldivmod>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <UART_SetConfig+0x2d4>)
 80055e0:	fba3 1302 	umull	r1, r3, r3, r2
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	2164      	movs	r1, #100	; 0x64
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	3332      	adds	r3, #50	; 0x32
 80055f2:	4a08      	ldr	r2, [pc, #32]	; (8005614 <UART_SetConfig+0x2d4>)
 80055f4:	fba2 2303 	umull	r2, r3, r2, r3
 80055f8:	095b      	lsrs	r3, r3, #5
 80055fa:	f003 0207 	and.w	r2, r3, #7
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4422      	add	r2, r4
 8005606:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005608:	e105      	b.n	8005816 <UART_SetConfig+0x4d6>
 800560a:	bf00      	nop
 800560c:	40011000 	.word	0x40011000
 8005610:	40011400 	.word	0x40011400
 8005614:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800561c:	2200      	movs	r2, #0
 800561e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005622:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005626:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800562a:	4642      	mov	r2, r8
 800562c:	464b      	mov	r3, r9
 800562e:	1891      	adds	r1, r2, r2
 8005630:	6239      	str	r1, [r7, #32]
 8005632:	415b      	adcs	r3, r3
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
 8005636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800563a:	4641      	mov	r1, r8
 800563c:	1854      	adds	r4, r2, r1
 800563e:	4649      	mov	r1, r9
 8005640:	eb43 0501 	adc.w	r5, r3, r1
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	00eb      	lsls	r3, r5, #3
 800564e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005652:	00e2      	lsls	r2, r4, #3
 8005654:	4614      	mov	r4, r2
 8005656:	461d      	mov	r5, r3
 8005658:	4643      	mov	r3, r8
 800565a:	18e3      	adds	r3, r4, r3
 800565c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005660:	464b      	mov	r3, r9
 8005662:	eb45 0303 	adc.w	r3, r5, r3
 8005666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005676:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005686:	4629      	mov	r1, r5
 8005688:	008b      	lsls	r3, r1, #2
 800568a:	4621      	mov	r1, r4
 800568c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005690:	4621      	mov	r1, r4
 8005692:	008a      	lsls	r2, r1, #2
 8005694:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005698:	f7fa fdcc 	bl	8000234 <__aeabi_uldivmod>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4b60      	ldr	r3, [pc, #384]	; (8005824 <UART_SetConfig+0x4e4>)
 80056a2:	fba3 2302 	umull	r2, r3, r3, r2
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	011c      	lsls	r4, r3, #4
 80056aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056bc:	4642      	mov	r2, r8
 80056be:	464b      	mov	r3, r9
 80056c0:	1891      	adds	r1, r2, r2
 80056c2:	61b9      	str	r1, [r7, #24]
 80056c4:	415b      	adcs	r3, r3
 80056c6:	61fb      	str	r3, [r7, #28]
 80056c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056cc:	4641      	mov	r1, r8
 80056ce:	1851      	adds	r1, r2, r1
 80056d0:	6139      	str	r1, [r7, #16]
 80056d2:	4649      	mov	r1, r9
 80056d4:	414b      	adcs	r3, r1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056e4:	4659      	mov	r1, fp
 80056e6:	00cb      	lsls	r3, r1, #3
 80056e8:	4651      	mov	r1, sl
 80056ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ee:	4651      	mov	r1, sl
 80056f0:	00ca      	lsls	r2, r1, #3
 80056f2:	4610      	mov	r0, r2
 80056f4:	4619      	mov	r1, r3
 80056f6:	4603      	mov	r3, r0
 80056f8:	4642      	mov	r2, r8
 80056fa:	189b      	adds	r3, r3, r2
 80056fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005700:	464b      	mov	r3, r9
 8005702:	460a      	mov	r2, r1
 8005704:	eb42 0303 	adc.w	r3, r2, r3
 8005708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	67bb      	str	r3, [r7, #120]	; 0x78
 8005716:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005724:	4649      	mov	r1, r9
 8005726:	008b      	lsls	r3, r1, #2
 8005728:	4641      	mov	r1, r8
 800572a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800572e:	4641      	mov	r1, r8
 8005730:	008a      	lsls	r2, r1, #2
 8005732:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005736:	f7fa fd7d 	bl	8000234 <__aeabi_uldivmod>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4b39      	ldr	r3, [pc, #228]	; (8005824 <UART_SetConfig+0x4e4>)
 8005740:	fba3 1302 	umull	r1, r3, r3, r2
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	2164      	movs	r1, #100	; 0x64
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	3332      	adds	r3, #50	; 0x32
 8005752:	4a34      	ldr	r2, [pc, #208]	; (8005824 <UART_SetConfig+0x4e4>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800575e:	441c      	add	r4, r3
 8005760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005764:	2200      	movs	r2, #0
 8005766:	673b      	str	r3, [r7, #112]	; 0x70
 8005768:	677a      	str	r2, [r7, #116]	; 0x74
 800576a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800576e:	4642      	mov	r2, r8
 8005770:	464b      	mov	r3, r9
 8005772:	1891      	adds	r1, r2, r2
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	415b      	adcs	r3, r3
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800577e:	4641      	mov	r1, r8
 8005780:	1851      	adds	r1, r2, r1
 8005782:	6039      	str	r1, [r7, #0]
 8005784:	4649      	mov	r1, r9
 8005786:	414b      	adcs	r3, r1
 8005788:	607b      	str	r3, [r7, #4]
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005796:	4659      	mov	r1, fp
 8005798:	00cb      	lsls	r3, r1, #3
 800579a:	4651      	mov	r1, sl
 800579c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057a0:	4651      	mov	r1, sl
 80057a2:	00ca      	lsls	r2, r1, #3
 80057a4:	4610      	mov	r0, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	4603      	mov	r3, r0
 80057aa:	4642      	mov	r2, r8
 80057ac:	189b      	adds	r3, r3, r2
 80057ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80057b0:	464b      	mov	r3, r9
 80057b2:	460a      	mov	r2, r1
 80057b4:	eb42 0303 	adc.w	r3, r2, r3
 80057b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	663b      	str	r3, [r7, #96]	; 0x60
 80057c4:	667a      	str	r2, [r7, #100]	; 0x64
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057d2:	4649      	mov	r1, r9
 80057d4:	008b      	lsls	r3, r1, #2
 80057d6:	4641      	mov	r1, r8
 80057d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057dc:	4641      	mov	r1, r8
 80057de:	008a      	lsls	r2, r1, #2
 80057e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057e4:	f7fa fd26 	bl	8000234 <__aeabi_uldivmod>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <UART_SetConfig+0x4e4>)
 80057ee:	fba3 1302 	umull	r1, r3, r3, r2
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	2164      	movs	r1, #100	; 0x64
 80057f6:	fb01 f303 	mul.w	r3, r1, r3
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	3332      	adds	r3, #50	; 0x32
 8005800:	4a08      	ldr	r2, [pc, #32]	; (8005824 <UART_SetConfig+0x4e4>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	f003 020f 	and.w	r2, r3, #15
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4422      	add	r2, r4
 8005814:	609a      	str	r2, [r3, #8]
}
 8005816:	bf00      	nop
 8005818:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800581c:	46bd      	mov	sp, r7
 800581e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005822:	bf00      	nop
 8005824:	51eb851f 	.word	0x51eb851f

08005828 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f103 0208 	add.w	r2, r3, #8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f04f 32ff 	mov.w	r2, #4294967295
 8005840:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f103 0208 	add.w	r2, r3, #8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f103 0208 	add.w	r2, r3, #8
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	601a      	str	r2, [r3, #0]
}
 80058be:	bf00      	nop
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d103      	bne.n	80058ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	e00c      	b.n	8005904 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3308      	adds	r3, #8
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e002      	b.n	80058f8 <vListInsert+0x2e>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	429a      	cmp	r2, r3
 8005902:	d2f6      	bcs.n	80058f2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	601a      	str	r2, [r3, #0]
}
 8005930:	bf00      	nop
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6892      	ldr	r2, [r2, #8]
 8005952:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6852      	ldr	r2, [r2, #4]
 800595c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	429a      	cmp	r2, r3
 8005966:	d103      	bne.n	8005970 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	1e5a      	subs	r2, r3, #1
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <xQueueGenericReset+0x2a>
        __asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	60bb      	str	r3, [r7, #8]
    }
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80059ba:	f002 fb0d 	bl	8007fd8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c6:	68f9      	ldr	r1, [r7, #12]
 80059c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059ca:	fb01 f303 	mul.w	r3, r1, r3
 80059ce:	441a      	add	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ea:	3b01      	subs	r3, #1
 80059ec:	68f9      	ldr	r1, [r7, #12]
 80059ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	441a      	add	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	22ff      	movs	r2, #255	; 0xff
 80059fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	22ff      	movs	r2, #255	; 0xff
 8005a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d114      	bne.n	8005a3a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01a      	beq.n	8005a4e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3310      	adds	r3, #16
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f001 f91f 	bl	8006c60 <xTaskRemoveFromEventList>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d012      	beq.n	8005a4e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <xQueueGenericReset+0xcc>)
 8005a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	e009      	b.n	8005a4e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3310      	adds	r3, #16
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fef2 	bl	8005828 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3324      	adds	r3, #36	; 0x24
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff feed 	bl	8005828 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005a4e:	f002 faf3 	bl	8008038 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8005a52:	2301      	movs	r3, #1
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	e000ed04 	.word	0xe000ed04

08005a60 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08c      	sub	sp, #48	; 0x30
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <xQueueGenericCreate+0x2a>
        __asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	61bb      	str	r3, [r7, #24]
    }
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	fb02 f303 	mul.w	r3, r2, r3
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d006      	beq.n	8005aa8 <xQueueGenericCreate+0x48>
 8005a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d101      	bne.n	8005aac <xQueueGenericCreate+0x4c>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <xQueueGenericCreate+0x4e>
 8005aac:	2300      	movs	r3, #0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <xQueueGenericCreate+0x68>
        __asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	617b      	str	r3, [r7, #20]
    }
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005ace:	d90a      	bls.n	8005ae6 <xQueueGenericCreate+0x86>
        __asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	613b      	str	r3, [r7, #16]
    }
 8005ae2:	bf00      	nop
 8005ae4:	e7fe      	b.n	8005ae4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	3350      	adds	r3, #80	; 0x50
 8005aea:	4618      	mov	r0, r3
 8005aec:	f002 fb96 	bl	800821c <pvPortMalloc>
 8005af0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00d      	beq.n	8005b14 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	3350      	adds	r3, #80	; 0x50
 8005b00:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b02:	79fa      	ldrb	r2, [r7, #7]
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 f805 	bl	8005b1e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005b14:	6a3b      	ldr	r3, [r7, #32]
    }
 8005b16:	4618      	mov	r0, r3
 8005b18:	3728      	adds	r7, #40	; 0x28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	e002      	b.n	8005b40 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	69b8      	ldr	r0, [r7, #24]
 8005b50:	f7ff ff1e 	bl	8005990 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08e      	sub	sp, #56	; 0x38
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b72:	2300      	movs	r3, #0
 8005b74:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <xQueueGenericSend+0x32>
        __asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d103      	bne.n	8005ba4 <xQueueGenericSend+0x40>
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <xQueueGenericSend+0x44>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <xQueueGenericSend+0x46>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <xQueueGenericSend+0x60>
        __asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d103      	bne.n	8005bd2 <xQueueGenericSend+0x6e>
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <xQueueGenericSend+0x72>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <xQueueGenericSend+0x74>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <xQueueGenericSend+0x8e>
        __asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	623b      	str	r3, [r7, #32]
    }
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bf2:	f001 f9d1 	bl	8006f98 <xTaskGetSchedulerState>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d102      	bne.n	8005c02 <xQueueGenericSend+0x9e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <xQueueGenericSend+0xa2>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <xQueueGenericSend+0xa4>
 8005c06:	2300      	movs	r3, #0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <xQueueGenericSend+0xbe>
        __asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	61fb      	str	r3, [r7, #28]
    }
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005c22:	f002 f9d9 	bl	8007fd8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d302      	bcc.n	8005c38 <xQueueGenericSend+0xd4>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d129      	bne.n	8005c8c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c3e:	f000 fac6 	bl	80061ce <prvCopyDataToQueue>
 8005c42:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d010      	beq.n	8005c6e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	3324      	adds	r3, #36	; 0x24
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 f805 	bl	8006c60 <xTaskRemoveFromEventList>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d013      	beq.n	8005c84 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005c5c:	4b3f      	ldr	r3, [pc, #252]	; (8005d5c <xQueueGenericSend+0x1f8>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	e00a      	b.n	8005c84 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005c74:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <xQueueGenericSend+0x1f8>)
 8005c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005c84:	f002 f9d8 	bl	8008038 <vPortExitCritical>
                return pdPASS;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e063      	b.n	8005d54 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005c92:	f002 f9d1 	bl	8008038 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e05c      	b.n	8005d54 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d106      	bne.n	8005cae <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005ca0:	f107 0314 	add.w	r3, r7, #20
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 f83d 	bl	8006d24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005caa:	2301      	movs	r3, #1
 8005cac:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005cae:	f002 f9c3 	bl	8008038 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005cb2:	f000 fdb7 	bl	8006824 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005cb6:	f002 f98f 	bl	8007fd8 <vPortEnterCritical>
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cc0:	b25b      	sxtb	r3, r3
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d103      	bne.n	8005cd0 <xQueueGenericSend+0x16c>
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cd6:	b25b      	sxtb	r3, r3
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d103      	bne.n	8005ce6 <xQueueGenericSend+0x182>
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce6:	f002 f9a7 	bl	8008038 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cea:	1d3a      	adds	r2, r7, #4
 8005cec:	f107 0314 	add.w	r3, r7, #20
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 f82c 	bl	8006d50 <xTaskCheckForTimeOut>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d124      	bne.n	8005d48 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d00:	f000 fb5d 	bl	80063be <prvIsQueueFull>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d018      	beq.n	8005d3c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	3310      	adds	r3, #16
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	4611      	mov	r1, r2
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 ff54 	bl	8006bc0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d1a:	f000 fae8 	bl	80062ee <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005d1e:	f000 fd8f 	bl	8006840 <xTaskResumeAll>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f47f af7c 	bne.w	8005c22 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <xQueueGenericSend+0x1f8>)
 8005d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	e772      	b.n	8005c22 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d3e:	f000 fad6 	bl	80062ee <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005d42:	f000 fd7d 	bl	8006840 <xTaskResumeAll>
 8005d46:	e76c      	b.n	8005c22 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d4a:	f000 fad0 	bl	80062ee <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005d4e:	f000 fd77 	bl	8006840 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005d52:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3738      	adds	r7, #56	; 0x38
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	e000ed04 	.word	0xe000ed04

08005d60 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b090      	sub	sp, #64	; 0x40
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <xQueueGenericSendFromISR+0x3c>
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <xQueueGenericSendFromISR+0x40>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <xQueueGenericSendFromISR+0x42>
 8005da0:	2300      	movs	r3, #0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005db8:	bf00      	nop
 8005dba:	e7fe      	b.n	8005dba <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d103      	bne.n	8005dca <xQueueGenericSendFromISR+0x6a>
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <xQueueGenericSendFromISR+0x6e>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <xQueueGenericSendFromISR+0x70>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	623b      	str	r3, [r7, #32]
    }
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dea:	f002 f9d7 	bl	800819c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005dee:	f3ef 8211 	mrs	r2, BASEPRI
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	61fa      	str	r2, [r7, #28]
 8005e04:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005e06:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e08:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d302      	bcc.n	8005e1c <xQueueGenericSendFromISR+0xbc>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d13e      	bne.n	8005e9a <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e32:	f000 f9cc 	bl	80061ce <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005e36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3e:	d112      	bne.n	8005e66 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d025      	beq.n	8005e94 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	3324      	adds	r3, #36	; 0x24
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 ff07 	bl	8006c60 <xTaskRemoveFromEventList>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01d      	beq.n	8005e94 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01a      	beq.n	8005e94 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	e016      	b.n	8005e94 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005e66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e6c:	d10a      	bne.n	8005e84 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	617b      	str	r3, [r7, #20]
    }
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e88:	3301      	adds	r3, #1
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	b25a      	sxtb	r2, r3
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005e94:	2301      	movs	r3, #1
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005e98:	e001      	b.n	8005e9e <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005ea8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3740      	adds	r7, #64	; 0x40
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08c      	sub	sp, #48	; 0x30
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <xQueueReceive+0x30>
        __asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	623b      	str	r3, [r7, #32]
    }
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d103      	bne.n	8005ef2 <xQueueReceive+0x3e>
 8005eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <xQueueReceive+0x42>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <xQueueReceive+0x44>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <xQueueReceive+0x5e>
        __asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	61fb      	str	r3, [r7, #28]
    }
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f12:	f001 f841 	bl	8006f98 <xTaskGetSchedulerState>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <xQueueReceive+0x6e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <xQueueReceive+0x72>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <xQueueReceive+0x74>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <xQueueReceive+0x8e>
        __asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	61bb      	str	r3, [r7, #24]
    }
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005f42:	f002 f849 	bl	8007fd8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d01f      	beq.n	8005f92 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f56:	f000 f9a4 	bl	80062a2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	1e5a      	subs	r2, r3, #1
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00f      	beq.n	8005f8a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	3310      	adds	r3, #16
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fe76 	bl	8006c60 <xTaskRemoveFromEventList>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005f7a:	4b3d      	ldr	r3, [pc, #244]	; (8006070 <xQueueReceive+0x1bc>)
 8005f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005f8a:	f002 f855 	bl	8008038 <vPortExitCritical>
                return pdPASS;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e069      	b.n	8006066 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d103      	bne.n	8005fa0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005f98:	f002 f84e 	bl	8008038 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e062      	b.n	8006066 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005fa6:	f107 0310 	add.w	r3, r7, #16
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 feba 	bl	8006d24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005fb4:	f002 f840 	bl	8008038 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005fb8:	f000 fc34 	bl	8006824 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005fbc:	f002 f80c 	bl	8007fd8 <vPortEnterCritical>
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fc6:	b25b      	sxtb	r3, r3
 8005fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fcc:	d103      	bne.n	8005fd6 <xQueueReceive+0x122>
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fdc:	b25b      	sxtb	r3, r3
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d103      	bne.n	8005fec <xQueueReceive+0x138>
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fec:	f002 f824 	bl	8008038 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ff0:	1d3a      	adds	r2, r7, #4
 8005ff2:	f107 0310 	add.w	r3, r7, #16
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fea9 	bl	8006d50 <xTaskCheckForTimeOut>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d123      	bne.n	800604c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006006:	f000 f9c4 	bl	8006392 <prvIsQueueEmpty>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d017      	beq.n	8006040 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006012:	3324      	adds	r3, #36	; 0x24
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	4611      	mov	r1, r2
 8006018:	4618      	mov	r0, r3
 800601a:	f000 fdd1 	bl	8006bc0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800601e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006020:	f000 f965 	bl	80062ee <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006024:	f000 fc0c 	bl	8006840 <xTaskResumeAll>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d189      	bne.n	8005f42 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800602e:	4b10      	ldr	r3, [pc, #64]	; (8006070 <xQueueReceive+0x1bc>)
 8006030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	e780      	b.n	8005f42 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006042:	f000 f954 	bl	80062ee <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006046:	f000 fbfb 	bl	8006840 <xTaskResumeAll>
 800604a:	e77a      	b.n	8005f42 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800604c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800604e:	f000 f94e 	bl	80062ee <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006052:	f000 fbf5 	bl	8006840 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006058:	f000 f99b 	bl	8006392 <prvIsQueueEmpty>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	f43f af6f 	beq.w	8005f42 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006064:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006066:	4618      	mov	r0, r3
 8006068:	3730      	adds	r7, #48	; 0x30
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b090      	sub	sp, #64	; 0x40
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800609c:	bf00      	nop
 800609e:	e7fe      	b.n	800609e <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d103      	bne.n	80060ae <xQueueReceiveFromISR+0x3a>
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <xQueueReceiveFromISR+0x3e>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <xQueueReceiveFromISR+0x40>
 80060b2:	2300      	movs	r3, #0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80060ca:	bf00      	nop
 80060cc:	e7fe      	b.n	80060cc <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060ce:	f002 f865 	bl	800819c <vPortValidateInterruptPriority>
        __asm volatile
 80060d2:	f3ef 8211 	mrs	r2, BASEPRI
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	623a      	str	r2, [r7, #32]
 80060e8:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80060ea:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060ec:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d03e      	beq.n	8006178 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006108:	f000 f8cb 	bl	80062a2 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	1e5a      	subs	r2, r3, #1
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8006114:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d112      	bne.n	8006144 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d025      	beq.n	8006172 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	3310      	adds	r3, #16
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fd98 	bl	8006c60 <xTaskRemoveFromEventList>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01d      	beq.n	8006172 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01a      	beq.n	8006172 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	e016      	b.n	8006172 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8006144:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006148:	2b7f      	cmp	r3, #127	; 0x7f
 800614a:	d10a      	bne.n	8006162 <xQueueReceiveFromISR+0xee>
        __asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	61bb      	str	r3, [r7, #24]
    }
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006166:	3301      	adds	r3, #1
 8006168:	b2db      	uxtb	r3, r3
 800616a:	b25a      	sxtb	r2, r3
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8006172:	2301      	movs	r3, #1
 8006174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006176:	e001      	b.n	800617c <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8006178:	2300      	movs	r3, #0
 800617a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800617c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617e:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f383 8811 	msr	BASEPRI, r3
    }
 8006186:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800618a:	4618      	mov	r0, r3
 800618c:	3740      	adds	r7, #64	; 0x40
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	60bb      	str	r3, [r7, #8]
    }
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80061b6:	f001 ff0f 	bl	8007fd8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80061c0:	f001 ff3a 	bl	8008038 <vPortExitCritical>

    return uxReturn;
 80061c4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10d      	bne.n	8006208 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d14d      	bne.n	8006290 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 feeb 	bl	8006fd4 <xTaskPriorityDisinherit>
 80061fe:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	609a      	str	r2, [r3, #8]
 8006206:	e043      	b.n	8006290 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d119      	bne.n	8006242 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6858      	ldr	r0, [r3, #4]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	461a      	mov	r2, r3
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	f002 fa21 	bl	8008660 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	441a      	add	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	429a      	cmp	r2, r3
 8006236:	d32b      	bcc.n	8006290 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	605a      	str	r2, [r3, #4]
 8006240:	e026      	b.n	8006290 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	68d8      	ldr	r0, [r3, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	461a      	mov	r2, r3
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	f002 fa07 	bl	8008660 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	425b      	negs	r3, r3
 800625c:	441a      	add	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d207      	bcs.n	800627e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	425b      	negs	r3, r3
 8006278:	441a      	add	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d105      	bne.n	8006290 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	3b01      	subs	r3, #1
 800628e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8006298:	697b      	ldr	r3, [r7, #20]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d018      	beq.n	80062e6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	441a      	add	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d303      	bcc.n	80062d6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68d9      	ldr	r1, [r3, #12]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	461a      	mov	r2, r3
 80062e0:	6838      	ldr	r0, [r7, #0]
 80062e2:	f002 f9bd 	bl	8008660 <memcpy>
    }
}
 80062e6:	bf00      	nop
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80062f6:	f001 fe6f 	bl	8007fd8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006300:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006302:	e011      	b.n	8006328 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	2b00      	cmp	r3, #0
 800630a:	d012      	beq.n	8006332 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3324      	adds	r3, #36	; 0x24
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fca5 	bl	8006c60 <xTaskRemoveFromEventList>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800631c:	f000 fd7e 	bl	8006e1c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	3b01      	subs	r3, #1
 8006324:	b2db      	uxtb	r3, r3
 8006326:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800632c:	2b00      	cmp	r3, #0
 800632e:	dce9      	bgt.n	8006304 <prvUnlockQueue+0x16>
 8006330:	e000      	b.n	8006334 <prvUnlockQueue+0x46>
                        break;
 8006332:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	22ff      	movs	r2, #255	; 0xff
 8006338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800633c:	f001 fe7c 	bl	8008038 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006340:	f001 fe4a 	bl	8007fd8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800634a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800634c:	e011      	b.n	8006372 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d012      	beq.n	800637c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3310      	adds	r3, #16
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fc80 	bl	8006c60 <xTaskRemoveFromEventList>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006366:	f000 fd59 	bl	8006e1c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	3b01      	subs	r3, #1
 800636e:	b2db      	uxtb	r3, r3
 8006370:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006376:	2b00      	cmp	r3, #0
 8006378:	dce9      	bgt.n	800634e <prvUnlockQueue+0x60>
 800637a:	e000      	b.n	800637e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800637c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	22ff      	movs	r2, #255	; 0xff
 8006382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006386:	f001 fe57 	bl	8008038 <vPortExitCritical>
}
 800638a:	bf00      	nop
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800639a:	f001 fe1d 	bl	8007fd8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d102      	bne.n	80063ac <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80063a6:	2301      	movs	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	e001      	b.n	80063b0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80063b0:	f001 fe42 	bl	8008038 <vPortExitCritical>

    return xReturn;
 80063b4:	68fb      	ldr	r3, [r7, #12]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80063c6:	f001 fe07 	bl	8007fd8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d102      	bne.n	80063dc <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80063d6:	2301      	movs	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e001      	b.n	80063e0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80063dc:	2300      	movs	r3, #0
 80063de:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80063e0:	f001 fe2a 	bl	8008038 <vPortExitCritical>

    return xReturn;
 80063e4:	68fb      	ldr	r3, [r7, #12]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80063ee:	b480      	push	{r7}
 80063f0:	b087      	sub	sp, #28
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10a      	bne.n	8006416 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	60fb      	str	r3, [r7, #12]
    }
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641e:	429a      	cmp	r2, r3
 8006420:	d102      	bne.n	8006428 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8006422:	2301      	movs	r3, #1
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	e001      	b.n	800642c <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800642c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800642e:	4618      	mov	r0, r3
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	e014      	b.n	8006476 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800644c:	4a0f      	ldr	r2, [pc, #60]	; (800648c <vQueueAddToRegistry+0x50>)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10b      	bne.n	8006470 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006458:	490c      	ldr	r1, [pc, #48]	; (800648c <vQueueAddToRegistry+0x50>)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8006462:	4a0a      	ldr	r2, [pc, #40]	; (800648c <vQueueAddToRegistry+0x50>)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	4413      	add	r3, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800646e:	e006      	b.n	800647e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3301      	adds	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b07      	cmp	r3, #7
 800647a:	d9e7      	bls.n	800644c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	20000150 	.word	0x20000150

08006490 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80064a0:	f001 fd9a 	bl	8007fd8 <vPortEnterCritical>
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064aa:	b25b      	sxtb	r3, r3
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d103      	bne.n	80064ba <vQueueWaitForMessageRestricted+0x2a>
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064c0:	b25b      	sxtb	r3, r3
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c6:	d103      	bne.n	80064d0 <vQueueWaitForMessageRestricted+0x40>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064d0:	f001 fdb2 	bl	8008038 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d106      	bne.n	80064ea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	3324      	adds	r3, #36	; 0x24
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	68b9      	ldr	r1, [r7, #8]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fb8f 	bl	8006c08 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80064ea:	6978      	ldr	r0, [r7, #20]
 80064ec:	f7ff feff 	bl	80062ee <prvUnlockQueue>
    }
 80064f0:	bf00      	nop
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08c      	sub	sp, #48	; 0x30
 80064fc:	af04      	add	r7, sp, #16
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4618      	mov	r0, r3
 800650c:	f001 fe86 	bl	800821c <pvPortMalloc>
 8006510:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00e      	beq.n	8006536 <xTaskCreate+0x3e>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006518:	2058      	movs	r0, #88	; 0x58
 800651a:	f001 fe7f 	bl	800821c <pvPortMalloc>
 800651e:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <xTaskCreate+0x36>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
 800652c:	e005      	b.n	800653a <xTaskCreate+0x42>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800652e:	6978      	ldr	r0, [r7, #20]
 8006530:	f001 ff54 	bl	80083dc <vPortFree>
 8006534:	e001      	b.n	800653a <xTaskCreate+0x42>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d013      	beq.n	8006568 <xTaskCreate+0x70>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006540:	2300      	movs	r3, #0
 8006542:	9303      	str	r3, [sp, #12]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	9302      	str	r3, [sp, #8]
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654a:	9301      	str	r3, [sp, #4]
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	68b9      	ldr	r1, [r7, #8]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 f80e 	bl	8006578 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800655c:	69f8      	ldr	r0, [r7, #28]
 800655e:	f000 f8a1 	bl	80066a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006562:	2301      	movs	r3, #1
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	e002      	b.n	800656e <xTaskCreate+0x76>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006568:	f04f 33ff 	mov.w	r3, #4294967295
 800656c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800656e:	69bb      	ldr	r3, [r7, #24]
    }
 8006570:	4618      	mov	r0, r3
 8006572:	3720      	adds	r7, #32
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	461a      	mov	r2, r3
 8006590:	21a5      	movs	r1, #165	; 0xa5
 8006592:	f002 f873 	bl	800867c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065a0:	3b01      	subs	r3, #1
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	f023 0307 	bic.w	r3, r3, #7
 80065ae:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <prvInitialiseNewTask+0x58>
        __asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	617b      	str	r3, [r7, #20]
    }
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01f      	beq.n	8006616 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	e012      	b.n	8006602 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	7819      	ldrb	r1, [r3, #0]
 80065e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4413      	add	r3, r2
 80065ea:	3334      	adds	r3, #52	; 0x34
 80065ec:	460a      	mov	r2, r1
 80065ee:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d006      	beq.n	800660a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	3301      	adds	r3, #1
 8006600:	61fb      	str	r3, [r7, #28]
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	2b09      	cmp	r3, #9
 8006606:	d9e9      	bls.n	80065dc <prvInitialiseNewTask+0x64>
 8006608:	e000      	b.n	800660c <prvInitialiseNewTask+0x94>
            {
                break;
 800660a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006614:	e003      	b.n	800661e <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	2b04      	cmp	r3, #4
 8006622:	d901      	bls.n	8006628 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006624:	2304      	movs	r3, #4
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800662c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006632:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	2200      	movs	r2, #0
 8006638:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	3304      	adds	r3, #4
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff f912 	bl	8005868 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	3318      	adds	r3, #24
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff f90d 	bl	8005868 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006652:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	f1c3 0205 	rsb	r2, r3, #5
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006662:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	3350      	adds	r3, #80	; 0x50
 8006668:	2204      	movs	r2, #4
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f002 f805 	bl	800867c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	3354      	adds	r3, #84	; 0x54
 8006676:	2201      	movs	r2, #1
 8006678:	2100      	movs	r1, #0
 800667a:	4618      	mov	r0, r3
 800667c:	f001 fffe 	bl	800867c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	69b8      	ldr	r0, [r7, #24]
 8006686:	f001 fb75 	bl	8007d74 <pxPortInitialiseStack>
 800668a:	4602      	mov	r2, r0
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800669c:	bf00      	nop
 800669e:	3720      	adds	r7, #32
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80066ac:	f001 fc94 	bl	8007fd8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80066b0:	4b2c      	ldr	r3, [pc, #176]	; (8006764 <prvAddNewTaskToReadyList+0xc0>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	4a2b      	ldr	r2, [pc, #172]	; (8006764 <prvAddNewTaskToReadyList+0xc0>)
 80066b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80066ba:	4b2b      	ldr	r3, [pc, #172]	; (8006768 <prvAddNewTaskToReadyList+0xc4>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80066c2:	4a29      	ldr	r2, [pc, #164]	; (8006768 <prvAddNewTaskToReadyList+0xc4>)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066c8:	4b26      	ldr	r3, [pc, #152]	; (8006764 <prvAddNewTaskToReadyList+0xc0>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d110      	bne.n	80066f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80066d0:	f000 fbc8 	bl	8006e64 <prvInitialiseTaskLists>
 80066d4:	e00d      	b.n	80066f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80066d6:	4b25      	ldr	r3, [pc, #148]	; (800676c <prvAddNewTaskToReadyList+0xc8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066de:	4b22      	ldr	r3, [pc, #136]	; (8006768 <prvAddNewTaskToReadyList+0xc4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d802      	bhi.n	80066f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80066ec:	4a1e      	ldr	r2, [pc, #120]	; (8006768 <prvAddNewTaskToReadyList+0xc4>)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80066f2:	4b1f      	ldr	r3, [pc, #124]	; (8006770 <prvAddNewTaskToReadyList+0xcc>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3301      	adds	r3, #1
 80066f8:	4a1d      	ldr	r2, [pc, #116]	; (8006770 <prvAddNewTaskToReadyList+0xcc>)
 80066fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066fc:	4b1c      	ldr	r3, [pc, #112]	; (8006770 <prvAddNewTaskToReadyList+0xcc>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	2201      	movs	r2, #1
 800670a:	409a      	lsls	r2, r3
 800670c:	4b19      	ldr	r3, [pc, #100]	; (8006774 <prvAddNewTaskToReadyList+0xd0>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4313      	orrs	r3, r2
 8006712:	4a18      	ldr	r2, [pc, #96]	; (8006774 <prvAddNewTaskToReadyList+0xd0>)
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4a15      	ldr	r2, [pc, #84]	; (8006778 <prvAddNewTaskToReadyList+0xd4>)
 8006724:	441a      	add	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3304      	adds	r3, #4
 800672a:	4619      	mov	r1, r3
 800672c:	4610      	mov	r0, r2
 800672e:	f7ff f8a8 	bl	8005882 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006732:	f001 fc81 	bl	8008038 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006736:	4b0d      	ldr	r3, [pc, #52]	; (800676c <prvAddNewTaskToReadyList+0xc8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00e      	beq.n	800675c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800673e:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <prvAddNewTaskToReadyList+0xc4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	429a      	cmp	r2, r3
 800674a:	d207      	bcs.n	800675c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <prvAddNewTaskToReadyList+0xd8>)
 800674e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	20000268 	.word	0x20000268
 8006768:	20000190 	.word	0x20000190
 800676c:	20000274 	.word	0x20000274
 8006770:	20000284 	.word	0x20000284
 8006774:	20000270 	.word	0x20000270
 8006778:	20000194 	.word	0x20000194
 800677c:	e000ed04 	.word	0xe000ed04

08006780 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8006786:	4b20      	ldr	r3, [pc, #128]	; (8006808 <vTaskStartScheduler+0x88>)
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	2300      	movs	r3, #0
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	2300      	movs	r3, #0
 8006790:	2282      	movs	r2, #130	; 0x82
 8006792:	491e      	ldr	r1, [pc, #120]	; (800680c <vTaskStartScheduler+0x8c>)
 8006794:	481e      	ldr	r0, [pc, #120]	; (8006810 <vTaskStartScheduler+0x90>)
 8006796:	f7ff feaf 	bl	80064f8 <xTaskCreate>
 800679a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d102      	bne.n	80067a8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80067a2:	f000 ff59 	bl	8007658 <xTimerCreateTimerTask>
 80067a6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d116      	bne.n	80067dc <vTaskStartScheduler+0x5c>
        __asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	60bb      	str	r3, [r7, #8]
    }
 80067c0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80067c2:	4b14      	ldr	r3, [pc, #80]	; (8006814 <vTaskStartScheduler+0x94>)
 80067c4:	f04f 32ff 	mov.w	r2, #4294967295
 80067c8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80067ca:	4b13      	ldr	r3, [pc, #76]	; (8006818 <vTaskStartScheduler+0x98>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067d0:	4b12      	ldr	r3, [pc, #72]	; (800681c <vTaskStartScheduler+0x9c>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80067d6:	f001 fb5d 	bl	8007e94 <xPortStartScheduler>
 80067da:	e00e      	b.n	80067fa <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e2:	d10a      	bne.n	80067fa <vTaskStartScheduler+0x7a>
        __asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	607b      	str	r3, [r7, #4]
    }
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80067fa:	4b09      	ldr	r3, [pc, #36]	; (8006820 <vTaskStartScheduler+0xa0>)
 80067fc:	681b      	ldr	r3, [r3, #0]
}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	2000028c 	.word	0x2000028c
 800680c:	08008824 	.word	0x08008824
 8006810:	08006e35 	.word	0x08006e35
 8006814:	20000288 	.word	0x20000288
 8006818:	20000274 	.word	0x20000274
 800681c:	2000026c 	.word	0x2000026c
 8006820:	20000018 	.word	0x20000018

08006824 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006828:	4b04      	ldr	r3, [pc, #16]	; (800683c <vTaskSuspendAll+0x18>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3301      	adds	r3, #1
 800682e:	4a03      	ldr	r2, [pc, #12]	; (800683c <vTaskSuspendAll+0x18>)
 8006830:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006832:	bf00      	nop
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	20000290 	.word	0x20000290

08006840 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800684a:	2300      	movs	r3, #0
 800684c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800684e:	4b41      	ldr	r3, [pc, #260]	; (8006954 <xTaskResumeAll+0x114>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <xTaskResumeAll+0x2c>
        __asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	603b      	str	r3, [r7, #0]
    }
 8006868:	bf00      	nop
 800686a:	e7fe      	b.n	800686a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800686c:	f001 fbb4 	bl	8007fd8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006870:	4b38      	ldr	r3, [pc, #224]	; (8006954 <xTaskResumeAll+0x114>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3b01      	subs	r3, #1
 8006876:	4a37      	ldr	r2, [pc, #220]	; (8006954 <xTaskResumeAll+0x114>)
 8006878:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800687a:	4b36      	ldr	r3, [pc, #216]	; (8006954 <xTaskResumeAll+0x114>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d161      	bne.n	8006946 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006882:	4b35      	ldr	r3, [pc, #212]	; (8006958 <xTaskResumeAll+0x118>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d05d      	beq.n	8006946 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800688a:	e02e      	b.n	80068ea <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800688c:	4b33      	ldr	r3, [pc, #204]	; (800695c <xTaskResumeAll+0x11c>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3318      	adds	r3, #24
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff f84f 	bl	800593c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff f84a 	bl	800593c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	2201      	movs	r2, #1
 80068ae:	409a      	lsls	r2, r3
 80068b0:	4b2b      	ldr	r3, [pc, #172]	; (8006960 <xTaskResumeAll+0x120>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	4a2a      	ldr	r2, [pc, #168]	; (8006960 <xTaskResumeAll+0x120>)
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4a27      	ldr	r2, [pc, #156]	; (8006964 <xTaskResumeAll+0x124>)
 80068c8:	441a      	add	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3304      	adds	r3, #4
 80068ce:	4619      	mov	r1, r3
 80068d0:	4610      	mov	r0, r2
 80068d2:	f7fe ffd6 	bl	8005882 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068da:	4b23      	ldr	r3, [pc, #140]	; (8006968 <xTaskResumeAll+0x128>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d302      	bcc.n	80068ea <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80068e4:	4b21      	ldr	r3, [pc, #132]	; (800696c <xTaskResumeAll+0x12c>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068ea:	4b1c      	ldr	r3, [pc, #112]	; (800695c <xTaskResumeAll+0x11c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1cc      	bne.n	800688c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80068f8:	f000 fb32 	bl	8006f60 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068fc:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <xTaskResumeAll+0x130>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d010      	beq.n	800692a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006908:	f000 f846 	bl	8006998 <xTaskIncrementTick>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8006912:	4b16      	ldr	r3, [pc, #88]	; (800696c <xTaskResumeAll+0x12c>)
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3b01      	subs	r3, #1
 800691c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1f1      	bne.n	8006908 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8006924:	4b12      	ldr	r3, [pc, #72]	; (8006970 <xTaskResumeAll+0x130>)
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800692a:	4b10      	ldr	r3, [pc, #64]	; (800696c <xTaskResumeAll+0x12c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006932:	2301      	movs	r3, #1
 8006934:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006936:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <xTaskResumeAll+0x134>)
 8006938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006946:	f001 fb77 	bl	8008038 <vPortExitCritical>

    return xAlreadyYielded;
 800694a:	68bb      	ldr	r3, [r7, #8]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000290 	.word	0x20000290
 8006958:	20000268 	.word	0x20000268
 800695c:	20000228 	.word	0x20000228
 8006960:	20000270 	.word	0x20000270
 8006964:	20000194 	.word	0x20000194
 8006968:	20000190 	.word	0x20000190
 800696c:	2000027c 	.word	0x2000027c
 8006970:	20000278 	.word	0x20000278
 8006974:	e000ed04 	.word	0xe000ed04

08006978 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <xTaskGetTickCount+0x1c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006984:	687b      	ldr	r3, [r7, #4]
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	2000026c 	.word	0x2000026c

08006998 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a2:	4b4e      	ldr	r3, [pc, #312]	; (8006adc <xTaskIncrementTick+0x144>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 808e 	bne.w	8006ac8 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069ac:	4b4c      	ldr	r3, [pc, #304]	; (8006ae0 <xTaskIncrementTick+0x148>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3301      	adds	r3, #1
 80069b2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80069b4:	4a4a      	ldr	r2, [pc, #296]	; (8006ae0 <xTaskIncrementTick+0x148>)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d120      	bne.n	8006a02 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80069c0:	4b48      	ldr	r3, [pc, #288]	; (8006ae4 <xTaskIncrementTick+0x14c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <xTaskIncrementTick+0x48>
        __asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	603b      	str	r3, [r7, #0]
    }
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <xTaskIncrementTick+0x46>
 80069e0:	4b40      	ldr	r3, [pc, #256]	; (8006ae4 <xTaskIncrementTick+0x14c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	4b40      	ldr	r3, [pc, #256]	; (8006ae8 <xTaskIncrementTick+0x150>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a3e      	ldr	r2, [pc, #248]	; (8006ae4 <xTaskIncrementTick+0x14c>)
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	4a3e      	ldr	r2, [pc, #248]	; (8006ae8 <xTaskIncrementTick+0x150>)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	4b3d      	ldr	r3, [pc, #244]	; (8006aec <xTaskIncrementTick+0x154>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3301      	adds	r3, #1
 80069fa:	4a3c      	ldr	r2, [pc, #240]	; (8006aec <xTaskIncrementTick+0x154>)
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	f000 faaf 	bl	8006f60 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006a02:	4b3b      	ldr	r3, [pc, #236]	; (8006af0 <xTaskIncrementTick+0x158>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d348      	bcc.n	8006a9e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a0c:	4b35      	ldr	r3, [pc, #212]	; (8006ae4 <xTaskIncrementTick+0x14c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d104      	bne.n	8006a20 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a16:	4b36      	ldr	r3, [pc, #216]	; (8006af0 <xTaskIncrementTick+0x158>)
 8006a18:	f04f 32ff 	mov.w	r2, #4294967295
 8006a1c:	601a      	str	r2, [r3, #0]
                    break;
 8006a1e:	e03e      	b.n	8006a9e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a20:	4b30      	ldr	r3, [pc, #192]	; (8006ae4 <xTaskIncrementTick+0x14c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d203      	bcs.n	8006a40 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006a38:	4a2d      	ldr	r2, [pc, #180]	; (8006af0 <xTaskIncrementTick+0x158>)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a3e:	e02e      	b.n	8006a9e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe ff79 	bl	800593c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d004      	beq.n	8006a5c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	3318      	adds	r3, #24
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fe ff70 	bl	800593c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	2201      	movs	r2, #1
 8006a62:	409a      	lsls	r2, r3
 8006a64:	4b23      	ldr	r3, [pc, #140]	; (8006af4 <xTaskIncrementTick+0x15c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	4a22      	ldr	r2, [pc, #136]	; (8006af4 <xTaskIncrementTick+0x15c>)
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4a1f      	ldr	r2, [pc, #124]	; (8006af8 <xTaskIncrementTick+0x160>)
 8006a7c:	441a      	add	r2, r3
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f7fe fefc 	bl	8005882 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8e:	4b1b      	ldr	r3, [pc, #108]	; (8006afc <xTaskIncrementTick+0x164>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d3b9      	bcc.n	8006a0c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a9c:	e7b6      	b.n	8006a0c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a9e:	4b17      	ldr	r3, [pc, #92]	; (8006afc <xTaskIncrementTick+0x164>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa4:	4914      	ldr	r1, [pc, #80]	; (8006af8 <xTaskIncrementTick+0x160>)
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d901      	bls.n	8006aba <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006aba:	4b11      	ldr	r3, [pc, #68]	; (8006b00 <xTaskIncrementTick+0x168>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	e004      	b.n	8006ad2 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006ac8:	4b0e      	ldr	r3, [pc, #56]	; (8006b04 <xTaskIncrementTick+0x16c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	4a0d      	ldr	r2, [pc, #52]	; (8006b04 <xTaskIncrementTick+0x16c>)
 8006ad0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006ad2:	697b      	ldr	r3, [r7, #20]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000290 	.word	0x20000290
 8006ae0:	2000026c 	.word	0x2000026c
 8006ae4:	20000220 	.word	0x20000220
 8006ae8:	20000224 	.word	0x20000224
 8006aec:	20000280 	.word	0x20000280
 8006af0:	20000288 	.word	0x20000288
 8006af4:	20000270 	.word	0x20000270
 8006af8:	20000194 	.word	0x20000194
 8006afc:	20000190 	.word	0x20000190
 8006b00:	2000027c 	.word	0x2000027c
 8006b04:	20000278 	.word	0x20000278

08006b08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b0e:	4b27      	ldr	r3, [pc, #156]	; (8006bac <vTaskSwitchContext+0xa4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006b16:	4b26      	ldr	r3, [pc, #152]	; (8006bb0 <vTaskSwitchContext+0xa8>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006b1c:	e03f      	b.n	8006b9e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8006b1e:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <vTaskSwitchContext+0xa8>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b24:	4b23      	ldr	r3, [pc, #140]	; (8006bb4 <vTaskSwitchContext+0xac>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	fab3 f383 	clz	r3, r3
 8006b30:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006b32:	7afb      	ldrb	r3, [r7, #11]
 8006b34:	f1c3 031f 	rsb	r3, r3, #31
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	491f      	ldr	r1, [pc, #124]	; (8006bb8 <vTaskSwitchContext+0xb0>)
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10a      	bne.n	8006b64 <vTaskSwitchContext+0x5c>
        __asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
    }
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <vTaskSwitchContext+0x5a>
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4a12      	ldr	r2, [pc, #72]	; (8006bb8 <vTaskSwitchContext+0xb0>)
 8006b70:	4413      	add	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	605a      	str	r2, [r3, #4]
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	3308      	adds	r3, #8
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d104      	bne.n	8006b94 <vTaskSwitchContext+0x8c>
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	605a      	str	r2, [r3, #4]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	4a08      	ldr	r2, [pc, #32]	; (8006bbc <vTaskSwitchContext+0xb4>)
 8006b9c:	6013      	str	r3, [r2, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	20000290 	.word	0x20000290
 8006bb0:	2000027c 	.word	0x2000027c
 8006bb4:	20000270 	.word	0x20000270
 8006bb8:	20000194 	.word	0x20000194
 8006bbc:	20000190 	.word	0x20000190

08006bc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	60fb      	str	r3, [r7, #12]
    }
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006be6:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <vTaskPlaceOnEventList+0x44>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3318      	adds	r3, #24
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fe fe6b 	bl	80058ca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	6838      	ldr	r0, [r7, #0]
 8006bf8:	f000 fcc8 	bl	800758c <prvAddCurrentTaskToDelayedList>
}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20000190 	.word	0x20000190

08006c08 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10a      	bne.n	8006c30 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	617b      	str	r3, [r7, #20]
    }
 8006c2c:	bf00      	nop
 8006c2e:	e7fe      	b.n	8006c2e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c30:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <vTaskPlaceOnEventListRestricted+0x54>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3318      	adds	r3, #24
 8006c36:	4619      	mov	r1, r3
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7fe fe22 	bl	8005882 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8006c44:	f04f 33ff 	mov.w	r3, #4294967295
 8006c48:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	68b8      	ldr	r0, [r7, #8]
 8006c4e:	f000 fc9d 	bl	800758c <prvAddCurrentTaskToDelayedList>
    }
 8006c52:	bf00      	nop
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000190 	.word	0x20000190

08006c60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	60fb      	str	r3, [r7, #12]
    }
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	3318      	adds	r3, #24
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fe fe53 	bl	800593c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c96:	4b1d      	ldr	r3, [pc, #116]	; (8006d0c <xTaskRemoveFromEventList+0xac>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d11c      	bne.n	8006cd8 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fe fe4a 	bl	800593c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	2201      	movs	r2, #1
 8006cae:	409a      	lsls	r2, r3
 8006cb0:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <xTaskRemoveFromEventList+0xb0>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	4a16      	ldr	r2, [pc, #88]	; (8006d10 <xTaskRemoveFromEventList+0xb0>)
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4a13      	ldr	r2, [pc, #76]	; (8006d14 <xTaskRemoveFromEventList+0xb4>)
 8006cc8:	441a      	add	r2, r3
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	f7fe fdd6 	bl	8005882 <vListInsertEnd>
 8006cd6:	e005      	b.n	8006ce4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	3318      	adds	r3, #24
 8006cdc:	4619      	mov	r1, r3
 8006cde:	480e      	ldr	r0, [pc, #56]	; (8006d18 <xTaskRemoveFromEventList+0xb8>)
 8006ce0:	f7fe fdcf 	bl	8005882 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce8:	4b0c      	ldr	r3, [pc, #48]	; (8006d1c <xTaskRemoveFromEventList+0xbc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d905      	bls.n	8006cfe <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006cf6:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <xTaskRemoveFromEventList+0xc0>)
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	e001      	b.n	8006d02 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006d02:	697b      	ldr	r3, [r7, #20]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20000290 	.word	0x20000290
 8006d10:	20000270 	.word	0x20000270
 8006d14:	20000194 	.word	0x20000194
 8006d18:	20000228 	.word	0x20000228
 8006d1c:	20000190 	.word	0x20000190
 8006d20:	2000027c 	.word	0x2000027c

08006d24 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d2c:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <vTaskInternalSetTimeOutState+0x24>)
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <vTaskInternalSetTimeOutState+0x28>)
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	605a      	str	r2, [r3, #4]
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	20000280 	.word	0x20000280
 8006d4c:	2000026c 	.word	0x2000026c

08006d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10a      	bne.n	8006d76 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	613b      	str	r3, [r7, #16]
    }
 8006d72:	bf00      	nop
 8006d74:	e7fe      	b.n	8006d74 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	60fb      	str	r3, [r7, #12]
    }
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006d92:	f001 f921 	bl	8007fd8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006d96:	4b1f      	ldr	r3, [pc, #124]	; (8006e14 <xTaskCheckForTimeOut+0xc4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d102      	bne.n	8006db6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	61fb      	str	r3, [r7, #28]
 8006db4:	e026      	b.n	8006e04 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	4b17      	ldr	r3, [pc, #92]	; (8006e18 <xTaskCheckForTimeOut+0xc8>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d00a      	beq.n	8006dd8 <xTaskCheckForTimeOut+0x88>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d305      	bcc.n	8006dd8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	e015      	b.n	8006e04 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d20b      	bcs.n	8006dfa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	1ad2      	subs	r2, r2, r3
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff ff98 	bl	8006d24 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61fb      	str	r3, [r7, #28]
 8006df8:	e004      	b.n	8006e04 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006e00:	2301      	movs	r3, #1
 8006e02:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006e04:	f001 f918 	bl	8008038 <vPortExitCritical>

    return xReturn;
 8006e08:	69fb      	ldr	r3, [r7, #28]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3720      	adds	r7, #32
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	2000026c 	.word	0x2000026c
 8006e18:	20000280 	.word	0x20000280

08006e1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006e20:	4b03      	ldr	r3, [pc, #12]	; (8006e30 <vTaskMissedYield+0x14>)
 8006e22:	2201      	movs	r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
}
 8006e26:	bf00      	nop
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	2000027c 	.word	0x2000027c

08006e34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006e3c:	f000 f852 	bl	8006ee4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e40:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <prvIdleTask+0x28>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d9f9      	bls.n	8006e3c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006e48:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <prvIdleTask+0x2c>)
 8006e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006e58:	e7f0      	b.n	8006e3c <prvIdleTask+0x8>
 8006e5a:	bf00      	nop
 8006e5c:	20000194 	.word	0x20000194
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	607b      	str	r3, [r7, #4]
 8006e6e:	e00c      	b.n	8006e8a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4a12      	ldr	r2, [pc, #72]	; (8006ec4 <prvInitialiseTaskLists+0x60>)
 8006e7c:	4413      	add	r3, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fcd2 	bl	8005828 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3301      	adds	r3, #1
 8006e88:	607b      	str	r3, [r7, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d9ef      	bls.n	8006e70 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006e90:	480d      	ldr	r0, [pc, #52]	; (8006ec8 <prvInitialiseTaskLists+0x64>)
 8006e92:	f7fe fcc9 	bl	8005828 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006e96:	480d      	ldr	r0, [pc, #52]	; (8006ecc <prvInitialiseTaskLists+0x68>)
 8006e98:	f7fe fcc6 	bl	8005828 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006e9c:	480c      	ldr	r0, [pc, #48]	; (8006ed0 <prvInitialiseTaskLists+0x6c>)
 8006e9e:	f7fe fcc3 	bl	8005828 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006ea2:	480c      	ldr	r0, [pc, #48]	; (8006ed4 <prvInitialiseTaskLists+0x70>)
 8006ea4:	f7fe fcc0 	bl	8005828 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006ea8:	480b      	ldr	r0, [pc, #44]	; (8006ed8 <prvInitialiseTaskLists+0x74>)
 8006eaa:	f7fe fcbd 	bl	8005828 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006eae:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <prvInitialiseTaskLists+0x78>)
 8006eb0:	4a05      	ldr	r2, [pc, #20]	; (8006ec8 <prvInitialiseTaskLists+0x64>)
 8006eb2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006eb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <prvInitialiseTaskLists+0x7c>)
 8006eb6:	4a05      	ldr	r2, [pc, #20]	; (8006ecc <prvInitialiseTaskLists+0x68>)
 8006eb8:	601a      	str	r2, [r3, #0]
}
 8006eba:	bf00      	nop
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000194 	.word	0x20000194
 8006ec8:	200001f8 	.word	0x200001f8
 8006ecc:	2000020c 	.word	0x2000020c
 8006ed0:	20000228 	.word	0x20000228
 8006ed4:	2000023c 	.word	0x2000023c
 8006ed8:	20000254 	.word	0x20000254
 8006edc:	20000220 	.word	0x20000220
 8006ee0:	20000224 	.word	0x20000224

08006ee4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eea:	e019      	b.n	8006f20 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006eec:	f001 f874 	bl	8007fd8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef0:	4b10      	ldr	r3, [pc, #64]	; (8006f34 <prvCheckTasksWaitingTermination+0x50>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe fd1d 	bl	800593c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006f02:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <prvCheckTasksWaitingTermination+0x54>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	4a0b      	ldr	r2, [pc, #44]	; (8006f38 <prvCheckTasksWaitingTermination+0x54>)
 8006f0a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006f0c:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <prvCheckTasksWaitingTermination+0x58>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	4a0a      	ldr	r2, [pc, #40]	; (8006f3c <prvCheckTasksWaitingTermination+0x58>)
 8006f14:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006f16:	f001 f88f 	bl	8008038 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f810 	bl	8006f40 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f20:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <prvCheckTasksWaitingTermination+0x58>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e1      	bne.n	8006eec <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	2000023c 	.word	0x2000023c
 8006f38:	20000268 	.word	0x20000268
 8006f3c:	20000250 	.word	0x20000250

08006f40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 fa45 	bl	80083dc <vPortFree>
                vPortFree( pxTCB );
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 fa42 	bl	80083dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f64:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <prvResetNextTaskUnblockTime+0x30>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006f6e:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <prvResetNextTaskUnblockTime+0x34>)
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295
 8006f74:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006f76:	e005      	b.n	8006f84 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f78:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <prvResetNextTaskUnblockTime+0x30>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a04      	ldr	r2, [pc, #16]	; (8006f94 <prvResetNextTaskUnblockTime+0x34>)
 8006f82:	6013      	str	r3, [r2, #0]
}
 8006f84:	bf00      	nop
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	20000220 	.word	0x20000220
 8006f94:	20000288 	.word	0x20000288

08006f98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006f9e:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <xTaskGetSchedulerState+0x34>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d102      	bne.n	8006fac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	e008      	b.n	8006fbe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fac:	4b08      	ldr	r3, [pc, #32]	; (8006fd0 <xTaskGetSchedulerState+0x38>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	607b      	str	r3, [r7, #4]
 8006fb8:	e001      	b.n	8006fbe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006fbe:	687b      	ldr	r3, [r7, #4]
    }
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	20000274 	.word	0x20000274
 8006fd0:	20000290 	.word	0x20000290

08006fd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d063      	beq.n	80070b2 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006fea:	4b34      	ldr	r3, [pc, #208]	; (80070bc <xTaskPriorityDisinherit+0xe8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d00a      	beq.n	800700a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	60fb      	str	r3, [r7, #12]
    }
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	60bb      	str	r3, [r7, #8]
    }
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702c:	1e5a      	subs	r2, r3, #1
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800703a:	429a      	cmp	r2, r3
 800703c:	d039      	beq.n	80070b2 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d135      	bne.n	80070b2 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	3304      	adds	r3, #4
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe fc76 	bl	800593c <uxListRemove>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10a      	bne.n	800706c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	2201      	movs	r2, #1
 800705c:	fa02 f303 	lsl.w	r3, r2, r3
 8007060:	43da      	mvns	r2, r3
 8007062:	4b17      	ldr	r3, [pc, #92]	; (80070c0 <xTaskPriorityDisinherit+0xec>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4013      	ands	r3, r2
 8007068:	4a15      	ldr	r2, [pc, #84]	; (80070c0 <xTaskPriorityDisinherit+0xec>)
 800706a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	f1c3 0205 	rsb	r2, r3, #5
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	2201      	movs	r2, #1
 8007086:	409a      	lsls	r2, r3
 8007088:	4b0d      	ldr	r3, [pc, #52]	; (80070c0 <xTaskPriorityDisinherit+0xec>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4313      	orrs	r3, r2
 800708e:	4a0c      	ldr	r2, [pc, #48]	; (80070c0 <xTaskPriorityDisinherit+0xec>)
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4a09      	ldr	r2, [pc, #36]	; (80070c4 <xTaskPriorityDisinherit+0xf0>)
 80070a0:	441a      	add	r2, r3
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7fe fbea 	bl	8005882 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80070ae:	2301      	movs	r3, #1
 80070b0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80070b2:	697b      	ldr	r3, [r7, #20]
    }
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20000190 	.word	0x20000190
 80070c0:	20000270 	.word	0x20000270
 80070c4:	20000194 	.word	0x20000194

080070c8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	613b      	str	r3, [r7, #16]
    }
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80070f2:	f000 ff71 	bl	8007fd8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80070f6:	4b32      	ldr	r3, [pc, #200]	; (80071c0 <xTaskGenericNotifyWait+0xf8>)
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	3354      	adds	r3, #84	; 0x54
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d022      	beq.n	800714e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8007108:	4b2d      	ldr	r3, [pc, #180]	; (80071c0 <xTaskGenericNotifyWait+0xf8>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	3214      	adds	r2, #20
 8007110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	43d2      	mvns	r2, r2
 8007118:	4011      	ands	r1, r2
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	3214      	adds	r2, #20
 800711e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8007122:	4b27      	ldr	r3, [pc, #156]	; (80071c0 <xTaskGenericNotifyWait+0xf8>)
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4413      	add	r3, r2
 800712a:	3354      	adds	r3, #84	; 0x54
 800712c:	2201      	movs	r2, #1
 800712e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00b      	beq.n	800714e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007136:	2101      	movs	r1, #1
 8007138:	6a38      	ldr	r0, [r7, #32]
 800713a:	f000 fa27 	bl	800758c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800713e:	4b21      	ldr	r3, [pc, #132]	; (80071c4 <xTaskGenericNotifyWait+0xfc>)
 8007140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800714e:	f000 ff73 	bl	8008038 <vPortExitCritical>

        taskENTER_CRITICAL();
 8007152:	f000 ff41 	bl	8007fd8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d007      	beq.n	800716c <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800715c:	4b18      	ldr	r3, [pc, #96]	; (80071c0 <xTaskGenericNotifyWait+0xf8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	3214      	adds	r2, #20
 8007164:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800716c:	4b14      	ldr	r3, [pc, #80]	; (80071c0 <xTaskGenericNotifyWait+0xf8>)
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	3354      	adds	r3, #84	; 0x54
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d002      	beq.n	8007184 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800717e:	2300      	movs	r3, #0
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	e00e      	b.n	80071a2 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8007184:	4b0e      	ldr	r3, [pc, #56]	; (80071c0 <xTaskGenericNotifyWait+0xf8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	3214      	adds	r2, #20
 800718c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	43d2      	mvns	r2, r2
 8007194:	4011      	ands	r1, r2
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	3214      	adds	r2, #20
 800719a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800719e:	2301      	movs	r3, #1
 80071a0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80071a2:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <xTaskGenericNotifyWait+0xf8>)
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4413      	add	r3, r2
 80071aa:	3354      	adds	r3, #84	; 0x54
 80071ac:	2200      	movs	r2, #0
 80071ae:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80071b0:	f000 ff42 	bl	8008038 <vPortExitCritical>

        return xReturn;
 80071b4:	697b      	ldr	r3, [r7, #20]
    }
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20000190 	.word	0x20000190
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08c      	sub	sp, #48	; 0x30
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80071d6:	2301      	movs	r3, #1
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00a      	beq.n	80071f6 <xTaskGenericNotify+0x2e>
        __asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	623b      	str	r3, [r7, #32]
    }
 80071f2:	bf00      	nop
 80071f4:	e7fe      	b.n	80071f4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <xTaskGenericNotify+0x4a>
        __asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	61fb      	str	r3, [r7, #28]
    }
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8007216:	f000 fedf 	bl	8007fd8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	2b00      	cmp	r3, #0
 800721e:	d006      	beq.n	800722e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	3214      	adds	r2, #20
 8007226:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800722e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	4413      	add	r3, r2
 8007234:	3354      	adds	r3, #84	; 0x54
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800723c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4413      	add	r3, r2
 8007242:	3354      	adds	r3, #84	; 0x54
 8007244:	2202      	movs	r2, #2
 8007246:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	2b04      	cmp	r3, #4
 800724c:	d83b      	bhi.n	80072c6 <xTaskGenericNotify+0xfe>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <xTaskGenericNotify+0x8c>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	080072e5 	.word	0x080072e5
 8007258:	08007269 	.word	0x08007269
 800725c:	08007285 	.word	0x08007285
 8007260:	0800729d 	.word	0x0800729d
 8007264:	080072ab 	.word	0x080072ab
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	3214      	adds	r2, #20
 800726e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	ea42 0103 	orr.w	r1, r2, r3
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	3214      	adds	r2, #20
 800727e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007282:	e032      	b.n	80072ea <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	3214      	adds	r2, #20
 800728a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728e:	1c59      	adds	r1, r3, #1
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	3214      	adds	r2, #20
 8007296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800729a:	e026      	b.n	80072ea <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	3214      	adds	r2, #20
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80072a8:	e01f      	b.n	80072ea <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80072aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d006      	beq.n	80072c0 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	3214      	adds	r2, #20
 80072b8:	6879      	ldr	r1, [r7, #4]
 80072ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80072be:	e014      	b.n	80072ea <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80072c0:	2300      	movs	r3, #0
 80072c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80072c4:	e011      	b.n	80072ea <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80072c6:	4b2b      	ldr	r3, [pc, #172]	; (8007374 <xTaskGenericNotify+0x1ac>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00c      	beq.n	80072e8 <xTaskGenericNotify+0x120>
        __asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	61bb      	str	r3, [r7, #24]
    }
 80072e0:	bf00      	nop
 80072e2:	e7fe      	b.n	80072e2 <xTaskGenericNotify+0x11a>
                    break;
 80072e4:	bf00      	nop
 80072e6:	e000      	b.n	80072ea <xTaskGenericNotify+0x122>

                    break;
 80072e8:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80072ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d139      	bne.n	8007366 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	3304      	adds	r3, #4
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe fb20 	bl	800593c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	2201      	movs	r2, #1
 8007302:	409a      	lsls	r2, r3
 8007304:	4b1c      	ldr	r3, [pc, #112]	; (8007378 <xTaskGenericNotify+0x1b0>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4313      	orrs	r3, r2
 800730a:	4a1b      	ldr	r2, [pc, #108]	; (8007378 <xTaskGenericNotify+0x1b0>)
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4a18      	ldr	r2, [pc, #96]	; (800737c <xTaskGenericNotify+0x1b4>)
 800731c:	441a      	add	r2, r3
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	3304      	adds	r3, #4
 8007322:	4619      	mov	r1, r3
 8007324:	4610      	mov	r0, r2
 8007326:	f7fe faac 	bl	8005882 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <xTaskGenericNotify+0x180>
        __asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	617b      	str	r3, [r7, #20]
    }
 8007344:	bf00      	nop
 8007346:	e7fe      	b.n	8007346 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734c:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <xTaskGenericNotify+0x1b8>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	429a      	cmp	r2, r3
 8007354:	d907      	bls.n	8007366 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8007356:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <xTaskGenericNotify+0x1bc>)
 8007358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007366:	f000 fe67 	bl	8008038 <vPortExitCritical>

        return xReturn;
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800736c:	4618      	mov	r0, r3
 800736e:	3730      	adds	r7, #48	; 0x30
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	2000026c 	.word	0x2000026c
 8007378:	20000270 	.word	0x20000270
 800737c:	20000194 	.word	0x20000194
 8007380:	20000190 	.word	0x20000190
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8007388:	b580      	push	{r7, lr}
 800738a:	b090      	sub	sp, #64	; 0x40
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8007396:	2301      	movs	r3, #1
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073d2:	f000 fee3 	bl	800819c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80073da:	f3ef 8211 	mrs	r2, BASEPRI
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	627a      	str	r2, [r7, #36]	; 0x24
 80073f0:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073f4:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80073f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d006      	beq.n	800740a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	3214      	adds	r2, #20
 8007402:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007408:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800740a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4413      	add	r3, r2
 8007410:	3354      	adds	r3, #84	; 0x54
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	4413      	add	r3, r2
 800741e:	3354      	adds	r3, #84	; 0x54
 8007420:	2202      	movs	r2, #2
 8007422:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	2b04      	cmp	r3, #4
 8007428:	d83b      	bhi.n	80074a2 <xTaskGenericNotifyFromISR+0x11a>
 800742a:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <xTaskGenericNotifyFromISR+0xa8>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	080074c1 	.word	0x080074c1
 8007434:	08007445 	.word	0x08007445
 8007438:	08007461 	.word	0x08007461
 800743c:	08007479 	.word	0x08007479
 8007440:	08007487 	.word	0x08007487
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	3214      	adds	r2, #20
 800744a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	ea42 0103 	orr.w	r1, r2, r3
 8007454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	3214      	adds	r2, #20
 800745a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800745e:	e032      	b.n	80074c6 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	3214      	adds	r2, #20
 8007466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746a:	1c59      	adds	r1, r3, #1
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	3214      	adds	r2, #20
 8007472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007476:	e026      	b.n	80074c6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	3214      	adds	r2, #20
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007484:	e01f      	b.n	80074c6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800748a:	2b02      	cmp	r3, #2
 800748c:	d006      	beq.n	800749c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	3214      	adds	r2, #20
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800749a:	e014      	b.n	80074c6 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800749c:	2300      	movs	r3, #0
 800749e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80074a0:	e011      	b.n	80074c6 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80074a2:	4b33      	ldr	r3, [pc, #204]	; (8007570 <xTaskGenericNotifyFromISR+0x1e8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00c      	beq.n	80074c4 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	61fb      	str	r3, [r7, #28]
    }
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <xTaskGenericNotifyFromISR+0x136>
                    break;
 80074c0:	bf00      	nop
 80074c2:	e000      	b.n	80074c6 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80074c4:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80074c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d145      	bne.n	800755a <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	61bb      	str	r3, [r7, #24]
    }
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ec:	4b21      	ldr	r3, [pc, #132]	; (8007574 <xTaskGenericNotifyFromISR+0x1ec>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d11c      	bne.n	800752e <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	3304      	adds	r3, #4
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe fa1f 	bl	800593c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80074fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	2201      	movs	r2, #1
 8007504:	409a      	lsls	r2, r3
 8007506:	4b1c      	ldr	r3, [pc, #112]	; (8007578 <xTaskGenericNotifyFromISR+0x1f0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4313      	orrs	r3, r2
 800750c:	4a1a      	ldr	r2, [pc, #104]	; (8007578 <xTaskGenericNotifyFromISR+0x1f0>)
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4a17      	ldr	r2, [pc, #92]	; (800757c <xTaskGenericNotifyFromISR+0x1f4>)
 800751e:	441a      	add	r2, r3
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	3304      	adds	r3, #4
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f7fe f9ab 	bl	8005882 <vListInsertEnd>
 800752c:	e005      	b.n	800753a <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	3318      	adds	r3, #24
 8007532:	4619      	mov	r1, r3
 8007534:	4812      	ldr	r0, [pc, #72]	; (8007580 <xTaskGenericNotifyFromISR+0x1f8>)
 8007536:	f7fe f9a4 	bl	8005882 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800753a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753e:	4b11      	ldr	r3, [pc, #68]	; (8007584 <xTaskGenericNotifyFromISR+0x1fc>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	429a      	cmp	r2, r3
 8007546:	d908      	bls.n	800755a <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8007548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800754e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007550:	2201      	movs	r2, #1
 8007552:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007554:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <xTaskGenericNotifyFromISR+0x200>)
 8007556:	2201      	movs	r2, #1
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755c:	617b      	str	r3, [r7, #20]
        __asm volatile
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f383 8811 	msr	BASEPRI, r3
    }
 8007564:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8007566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8007568:	4618      	mov	r0, r3
 800756a:	3740      	adds	r7, #64	; 0x40
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	2000026c 	.word	0x2000026c
 8007574:	20000290 	.word	0x20000290
 8007578:	20000270 	.word	0x20000270
 800757c:	20000194 	.word	0x20000194
 8007580:	20000228 	.word	0x20000228
 8007584:	20000190 	.word	0x20000190
 8007588:	2000027c 	.word	0x2000027c

0800758c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007596:	4b29      	ldr	r3, [pc, #164]	; (800763c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800759c:	4b28      	ldr	r3, [pc, #160]	; (8007640 <prvAddCurrentTaskToDelayedList+0xb4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3304      	adds	r3, #4
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe f9ca 	bl	800593c <uxListRemove>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80075ae:	4b24      	ldr	r3, [pc, #144]	; (8007640 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	2201      	movs	r2, #1
 80075b6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ba:	43da      	mvns	r2, r3
 80075bc:	4b21      	ldr	r3, [pc, #132]	; (8007644 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4013      	ands	r3, r2
 80075c2:	4a20      	ldr	r2, [pc, #128]	; (8007644 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075c4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075cc:	d10a      	bne.n	80075e4 <prvAddCurrentTaskToDelayedList+0x58>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d007      	beq.n	80075e4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075d4:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3304      	adds	r3, #4
 80075da:	4619      	mov	r1, r3
 80075dc:	481a      	ldr	r0, [pc, #104]	; (8007648 <prvAddCurrentTaskToDelayedList+0xbc>)
 80075de:	f7fe f950 	bl	8005882 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80075e2:	e026      	b.n	8007632 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4413      	add	r3, r2
 80075ea:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075ec:	4b14      	ldr	r3, [pc, #80]	; (8007640 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d209      	bcs.n	8007610 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075fc:	4b13      	ldr	r3, [pc, #76]	; (800764c <prvAddCurrentTaskToDelayedList+0xc0>)
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3304      	adds	r3, #4
 8007606:	4619      	mov	r1, r3
 8007608:	4610      	mov	r0, r2
 800760a:	f7fe f95e 	bl	80058ca <vListInsert>
}
 800760e:	e010      	b.n	8007632 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007610:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3304      	adds	r3, #4
 800761a:	4619      	mov	r1, r3
 800761c:	4610      	mov	r0, r2
 800761e:	f7fe f954 	bl	80058ca <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8007622:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	429a      	cmp	r2, r3
 800762a:	d202      	bcs.n	8007632 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800762c:	4a09      	ldr	r2, [pc, #36]	; (8007654 <prvAddCurrentTaskToDelayedList+0xc8>)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	6013      	str	r3, [r2, #0]
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	2000026c 	.word	0x2000026c
 8007640:	20000190 	.word	0x20000190
 8007644:	20000270 	.word	0x20000270
 8007648:	20000254 	.word	0x20000254
 800764c:	20000224 	.word	0x20000224
 8007650:	20000220 	.word	0x20000220
 8007654:	20000288 	.word	0x20000288

08007658 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800765e:	2300      	movs	r3, #0
 8007660:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007662:	f000 fb31 	bl	8007cc8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007666:	4b11      	ldr	r3, [pc, #68]	; (80076ac <xTimerCreateTimerTask+0x54>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800766e:	4b10      	ldr	r3, [pc, #64]	; (80076b0 <xTimerCreateTimerTask+0x58>)
 8007670:	9301      	str	r3, [sp, #4]
 8007672:	2302      	movs	r3, #2
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	2300      	movs	r3, #0
 8007678:	f44f 7282 	mov.w	r2, #260	; 0x104
 800767c:	490d      	ldr	r1, [pc, #52]	; (80076b4 <xTimerCreateTimerTask+0x5c>)
 800767e:	480e      	ldr	r0, [pc, #56]	; (80076b8 <xTimerCreateTimerTask+0x60>)
 8007680:	f7fe ff3a 	bl	80064f8 <xTaskCreate>
 8007684:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	603b      	str	r3, [r7, #0]
    }
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80076a2:	687b      	ldr	r3, [r7, #4]
    }
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	200002c4 	.word	0x200002c4
 80076b0:	200002c8 	.word	0x200002c8
 80076b4:	0800882c 	.word	0x0800882c
 80076b8:	080078a9 	.word	0x080078a9

080076bc <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80076ca:	202c      	movs	r0, #44	; 0x2c
 80076cc:	f000 fda6 	bl	800821c <pvPortMalloc>
 80076d0:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00d      	beq.n	80076f4 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	9301      	str	r3, [sp, #4]
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 f805 	bl	80076fe <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80076f4:	697b      	ldr	r3, [r7, #20]
        }
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80076fe:	b580      	push	{r7, lr}
 8007700:	b086      	sub	sp, #24
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	617b      	str	r3, [r7, #20]
    }
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	2b00      	cmp	r3, #0
 800772c:	d01e      	beq.n	800776c <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800772e:	f000 facb 	bl	8007cc8 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	6a3a      	ldr	r2, [r7, #32]
 8007748:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	3304      	adds	r3, #4
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe f88a 	bl	8005868 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d008      	beq.n	800776c <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007760:	f043 0304 	orr.w	r3, r3, #4
 8007764:	b2da      	uxtb	r2, r3
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800776c:	bf00      	nop
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007774:	b580      	push	{r7, lr}
 8007776:	b08a      	sub	sp, #40	; 0x28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007782:	2300      	movs	r3, #0
 8007784:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <xTimerGenericCommand+0x2e>
        __asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	623b      	str	r3, [r7, #32]
    }
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80077a2:	4b1a      	ldr	r3, [pc, #104]	; (800780c <xTimerGenericCommand+0x98>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d02a      	beq.n	8007800 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b05      	cmp	r3, #5
 80077ba:	dc18      	bgt.n	80077ee <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077bc:	f7ff fbec 	bl	8006f98 <xTaskGetSchedulerState>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d109      	bne.n	80077da <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077c6:	4b11      	ldr	r3, [pc, #68]	; (800780c <xTimerGenericCommand+0x98>)
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	f107 0114 	add.w	r1, r7, #20
 80077ce:	2300      	movs	r3, #0
 80077d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d2:	f7fe f9c7 	bl	8005b64 <xQueueGenericSend>
 80077d6:	6278      	str	r0, [r7, #36]	; 0x24
 80077d8:	e012      	b.n	8007800 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077da:	4b0c      	ldr	r3, [pc, #48]	; (800780c <xTimerGenericCommand+0x98>)
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	f107 0114 	add.w	r1, r7, #20
 80077e2:	2300      	movs	r3, #0
 80077e4:	2200      	movs	r2, #0
 80077e6:	f7fe f9bd 	bl	8005b64 <xQueueGenericSend>
 80077ea:	6278      	str	r0, [r7, #36]	; 0x24
 80077ec:	e008      	b.n	8007800 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077ee:	4b07      	ldr	r3, [pc, #28]	; (800780c <xTimerGenericCommand+0x98>)
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	f107 0114 	add.w	r1, r7, #20
 80077f6:	2300      	movs	r3, #0
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	f7fe fab1 	bl	8005d60 <xQueueGenericSendFromISR>
 80077fe:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007802:	4618      	mov	r0, r3
 8007804:	3728      	adds	r7, #40	; 0x28
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	200002c4 	.word	0x200002c4

08007810 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007810:	b580      	push	{r7, lr}
 8007812:	b088      	sub	sp, #32
 8007814:	af02      	add	r7, sp, #8
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800781a:	4b22      	ldr	r3, [pc, #136]	; (80078a4 <prvProcessExpiredTimer+0x94>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	3304      	adds	r3, #4
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe f887 	bl	800593c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d022      	beq.n	8007882 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	699a      	ldr	r2, [r3, #24]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	18d1      	adds	r1, r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	6978      	ldr	r0, [r7, #20]
 800784a:	f000 f8d1 	bl	80079f0 <prvInsertTimerInActiveList>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d01f      	beq.n	8007894 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007854:	2300      	movs	r3, #0
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	2300      	movs	r3, #0
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	2100      	movs	r1, #0
 800785e:	6978      	ldr	r0, [r7, #20]
 8007860:	f7ff ff88 	bl	8007774 <xTimerGenericCommand>
 8007864:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d113      	bne.n	8007894 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	60fb      	str	r3, [r7, #12]
    }
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	b2da      	uxtb	r2, r3
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	6978      	ldr	r0, [r7, #20]
 800789a:	4798      	blx	r3
    }
 800789c:	bf00      	nop
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	200002bc 	.word	0x200002bc

080078a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078b0:	f107 0308 	add.w	r3, r7, #8
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 f857 	bl	8007968 <prvGetNextExpireTime>
 80078ba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4619      	mov	r1, r3
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f803 	bl	80078cc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80078c6:	f000 f8d5 	bl	8007a74 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078ca:	e7f1      	b.n	80078b0 <prvTimerTask+0x8>

080078cc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80078d6:	f7fe ffa5 	bl	8006824 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078da:	f107 0308 	add.w	r3, r7, #8
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 f866 	bl	80079b0 <prvSampleTimeNow>
 80078e4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d130      	bne.n	800794e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10a      	bne.n	8007908 <prvProcessTimerOrBlockTask+0x3c>
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d806      	bhi.n	8007908 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80078fa:	f7fe ffa1 	bl	8006840 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078fe:	68f9      	ldr	r1, [r7, #12]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff ff85 	bl	8007810 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007906:	e024      	b.n	8007952 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d008      	beq.n	8007920 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800790e:	4b13      	ldr	r3, [pc, #76]	; (800795c <prvProcessTimerOrBlockTask+0x90>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <prvProcessTimerOrBlockTask+0x50>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <prvProcessTimerOrBlockTask+0x52>
 800791c:	2300      	movs	r3, #0
 800791e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007920:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <prvProcessTimerOrBlockTask+0x94>)
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	4619      	mov	r1, r3
 800792e:	f7fe fdaf 	bl	8006490 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007932:	f7fe ff85 	bl	8006840 <xTaskResumeAll>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10a      	bne.n	8007952 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800793c:	4b09      	ldr	r3, [pc, #36]	; (8007964 <prvProcessTimerOrBlockTask+0x98>)
 800793e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	f3bf 8f6f 	isb	sy
    }
 800794c:	e001      	b.n	8007952 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800794e:	f7fe ff77 	bl	8006840 <xTaskResumeAll>
    }
 8007952:	bf00      	nop
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	200002c0 	.word	0x200002c0
 8007960:	200002c4 	.word	0x200002c4
 8007964:	e000ed04 	.word	0xe000ed04

08007968 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007970:	4b0e      	ldr	r3, [pc, #56]	; (80079ac <prvGetNextExpireTime+0x44>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <prvGetNextExpireTime+0x16>
 800797a:	2201      	movs	r2, #1
 800797c:	e000      	b.n	8007980 <prvGetNextExpireTime+0x18>
 800797e:	2200      	movs	r2, #0
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d105      	bne.n	8007998 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800798c:	4b07      	ldr	r3, [pc, #28]	; (80079ac <prvGetNextExpireTime+0x44>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	e001      	b.n	800799c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800799c:	68fb      	ldr	r3, [r7, #12]
    }
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	200002bc 	.word	0x200002bc

080079b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80079b8:	f7fe ffde 	bl	8006978 <xTaskGetTickCount>
 80079bc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80079be:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <prvSampleTimeNow+0x3c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d205      	bcs.n	80079d4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80079c8:	f000 f91a 	bl	8007c00 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	e002      	b.n	80079da <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80079da:	4a04      	ldr	r2, [pc, #16]	; (80079ec <prvSampleTimeNow+0x3c>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80079e0:	68fb      	ldr	r3, [r7, #12]
    }
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	200002cc 	.word	0x200002cc

080079f0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
 80079fc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80079fe:	2300      	movs	r3, #0
 8007a00:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d812      	bhi.n	8007a3c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	1ad2      	subs	r2, r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d302      	bcc.n	8007a2a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007a24:	2301      	movs	r3, #1
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	e01b      	b.n	8007a62 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a2a:	4b10      	ldr	r3, [pc, #64]	; (8007a6c <prvInsertTimerInActiveList+0x7c>)
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3304      	adds	r3, #4
 8007a32:	4619      	mov	r1, r3
 8007a34:	4610      	mov	r0, r2
 8007a36:	f7fd ff48 	bl	80058ca <vListInsert>
 8007a3a:	e012      	b.n	8007a62 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d206      	bcs.n	8007a52 <prvInsertTimerInActiveList+0x62>
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d302      	bcc.n	8007a52 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	e007      	b.n	8007a62 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a52:	4b07      	ldr	r3, [pc, #28]	; (8007a70 <prvInsertTimerInActiveList+0x80>)
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	f7fd ff34 	bl	80058ca <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007a62:	697b      	ldr	r3, [r7, #20]
    }
 8007a64:	4618      	mov	r0, r3
 8007a66:	3718      	adds	r7, #24
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	200002c0 	.word	0x200002c0
 8007a70:	200002bc 	.word	0x200002bc

08007a74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08c      	sub	sp, #48	; 0x30
 8007a78:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a7a:	e0ae      	b.n	8007bda <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f2c0 80aa 	blt.w	8007bd8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d004      	beq.n	8007a9a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	3304      	adds	r3, #4
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fd ff51 	bl	800593c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a9a:	1d3b      	adds	r3, r7, #4
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff ff87 	bl	80079b0 <prvSampleTimeNow>
 8007aa2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b09      	cmp	r3, #9
 8007aa8:	f200 8097 	bhi.w	8007bda <prvProcessReceivedCommands+0x166>
 8007aac:	a201      	add	r2, pc, #4	; (adr r2, 8007ab4 <prvProcessReceivedCommands+0x40>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007add 	.word	0x08007add
 8007ab8:	08007add 	.word	0x08007add
 8007abc:	08007add 	.word	0x08007add
 8007ac0:	08007b51 	.word	0x08007b51
 8007ac4:	08007b65 	.word	0x08007b65
 8007ac8:	08007baf 	.word	0x08007baf
 8007acc:	08007add 	.word	0x08007add
 8007ad0:	08007add 	.word	0x08007add
 8007ad4:	08007b51 	.word	0x08007b51
 8007ad8:	08007b65 	.word	0x08007b65
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ae2:	f043 0301 	orr.w	r3, r3, #1
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	18d1      	adds	r1, r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6a3a      	ldr	r2, [r7, #32]
 8007afa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007afc:	f7ff ff78 	bl	80079f0 <prvInsertTimerInActiveList>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d069      	beq.n	8007bda <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b0c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d05e      	beq.n	8007bda <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	441a      	add	r2, r3
 8007b24:	2300      	movs	r3, #0
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b2e:	f7ff fe21 	bl	8007774 <xTimerGenericCommand>
 8007b32:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d14f      	bne.n	8007bda <prvProcessReceivedCommands+0x166>
        __asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	61bb      	str	r3, [r7, #24]
    }
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b56:	f023 0301 	bic.w	r3, r3, #1
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007b62:	e03a      	b.n	8007bda <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b6a:	f043 0301 	orr.w	r3, r3, #1
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	617b      	str	r3, [r7, #20]
    }
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	699a      	ldr	r2, [r3, #24]
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	18d1      	adds	r1, r2, r3
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	6a3a      	ldr	r2, [r7, #32]
 8007ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ba8:	f7ff ff22 	bl	80079f0 <prvInsertTimerInActiveList>
                        break;
 8007bac:	e015      	b.n	8007bda <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d103      	bne.n	8007bc4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007bbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bbe:	f000 fc0d 	bl	80083dc <vPortFree>
 8007bc2:	e00a      	b.n	8007bda <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bca:	f023 0301 	bic.w	r3, r3, #1
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007bd6:	e000      	b.n	8007bda <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007bd8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bda:	4b08      	ldr	r3, [pc, #32]	; (8007bfc <prvProcessReceivedCommands+0x188>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f107 0108 	add.w	r1, r7, #8
 8007be2:	2200      	movs	r2, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fe f965 	bl	8005eb4 <xQueueReceive>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f47f af45 	bne.w	8007a7c <prvProcessReceivedCommands+0x8>
        }
    }
 8007bf2:	bf00      	nop
 8007bf4:	bf00      	nop
 8007bf6:	3728      	adds	r7, #40	; 0x28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	200002c4 	.word	0x200002c4

08007c00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c06:	e048      	b.n	8007c9a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c08:	4b2d      	ldr	r3, [pc, #180]	; (8007cc0 <prvSwitchTimerLists+0xc0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c12:	4b2b      	ldr	r3, [pc, #172]	; (8007cc0 <prvSwitchTimerLists+0xc0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fd fe8b 	bl	800593c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d02e      	beq.n	8007c9a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	4413      	add	r3, r2
 8007c44:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d90e      	bls.n	8007c6c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c5a:	4b19      	ldr	r3, [pc, #100]	; (8007cc0 <prvSwitchTimerLists+0xc0>)
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3304      	adds	r3, #4
 8007c62:	4619      	mov	r1, r3
 8007c64:	4610      	mov	r0, r2
 8007c66:	f7fd fe30 	bl	80058ca <vListInsert>
 8007c6a:	e016      	b.n	8007c9a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	2300      	movs	r3, #0
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	2100      	movs	r1, #0
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fd7c 	bl	8007774 <xTimerGenericCommand>
 8007c7c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	603b      	str	r3, [r7, #0]
    }
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c9a:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <prvSwitchTimerLists+0xc0>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1b1      	bne.n	8007c08 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007ca4:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <prvSwitchTimerLists+0xc0>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007caa:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <prvSwitchTimerLists+0xc4>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a04      	ldr	r2, [pc, #16]	; (8007cc0 <prvSwitchTimerLists+0xc0>)
 8007cb0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007cb2:	4a04      	ldr	r2, [pc, #16]	; (8007cc4 <prvSwitchTimerLists+0xc4>)
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	6013      	str	r3, [r2, #0]
    }
 8007cb8:	bf00      	nop
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	200002bc 	.word	0x200002bc
 8007cc4:	200002c0 	.word	0x200002c0

08007cc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007ccc:	f000 f984 	bl	8007fd8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007cd0:	4b12      	ldr	r3, [pc, #72]	; (8007d1c <prvCheckForValidListAndQueue+0x54>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d11d      	bne.n	8007d14 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007cd8:	4811      	ldr	r0, [pc, #68]	; (8007d20 <prvCheckForValidListAndQueue+0x58>)
 8007cda:	f7fd fda5 	bl	8005828 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007cde:	4811      	ldr	r0, [pc, #68]	; (8007d24 <prvCheckForValidListAndQueue+0x5c>)
 8007ce0:	f7fd fda2 	bl	8005828 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007ce4:	4b10      	ldr	r3, [pc, #64]	; (8007d28 <prvCheckForValidListAndQueue+0x60>)
 8007ce6:	4a0e      	ldr	r2, [pc, #56]	; (8007d20 <prvCheckForValidListAndQueue+0x58>)
 8007ce8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007cea:	4b10      	ldr	r3, [pc, #64]	; (8007d2c <prvCheckForValidListAndQueue+0x64>)
 8007cec:	4a0d      	ldr	r2, [pc, #52]	; (8007d24 <prvCheckForValidListAndQueue+0x5c>)
 8007cee:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	210c      	movs	r1, #12
 8007cf4:	200a      	movs	r0, #10
 8007cf6:	f7fd feb3 	bl	8005a60 <xQueueGenericCreate>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4a07      	ldr	r2, [pc, #28]	; (8007d1c <prvCheckForValidListAndQueue+0x54>)
 8007cfe:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007d00:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <prvCheckForValidListAndQueue+0x54>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d005      	beq.n	8007d14 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d08:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <prvCheckForValidListAndQueue+0x54>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4908      	ldr	r1, [pc, #32]	; (8007d30 <prvCheckForValidListAndQueue+0x68>)
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe fb94 	bl	800643c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007d14:	f000 f990 	bl	8008038 <vPortExitCritical>
    }
 8007d18:	bf00      	nop
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	200002c4 	.word	0x200002c4
 8007d20:	20000294 	.word	0x20000294
 8007d24:	200002a8 	.word	0x200002a8
 8007d28:	200002bc 	.word	0x200002bc
 8007d2c:	200002c0 	.word	0x200002c0
 8007d30:	08008834 	.word	0x08008834

08007d34 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10a      	bne.n	8007d5c <pvTimerGetTimerID+0x28>
        __asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	60fb      	str	r3, [r7, #12]
    }
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8007d5c:	f000 f93c 	bl	8007fd8 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007d66:	f000 f967 	bl	8008038 <vPortExitCritical>

        return pvReturn;
 8007d6a:	693b      	ldr	r3, [r7, #16]
    }
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3b04      	subs	r3, #4
 8007d84:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3b04      	subs	r3, #4
 8007d92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f023 0201 	bic.w	r2, r3, #1
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3b04      	subs	r3, #4
 8007da2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007da4:	4a0c      	ldr	r2, [pc, #48]	; (8007dd8 <pxPortInitialiseStack+0x64>)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3b14      	subs	r3, #20
 8007dae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3b04      	subs	r3, #4
 8007dba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f06f 0202 	mvn.w	r2, #2
 8007dc2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3b20      	subs	r3, #32
 8007dc8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007dca:	68fb      	ldr	r3, [r7, #12]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	08007ddd 	.word	0x08007ddd

08007ddc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007de6:	4b12      	ldr	r3, [pc, #72]	; (8007e30 <prvTaskExitError+0x54>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dee:	d00a      	beq.n	8007e06 <prvTaskExitError+0x2a>
        __asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	60fb      	str	r3, [r7, #12]
    }
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <prvTaskExitError+0x28>
        __asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	60bb      	str	r3, [r7, #8]
    }
 8007e18:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007e1a:	bf00      	nop
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0fc      	beq.n	8007e1c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007e22:	bf00      	nop
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	2000001c 	.word	0x2000001c
	...

08007e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007e40:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <pxCurrentTCBConst2>)
 8007e42:	6819      	ldr	r1, [r3, #0]
 8007e44:	6808      	ldr	r0, [r1, #0]
 8007e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4a:	f380 8809 	msr	PSP, r0
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f380 8811 	msr	BASEPRI, r0
 8007e5a:	4770      	bx	lr
 8007e5c:	f3af 8000 	nop.w

08007e60 <pxCurrentTCBConst2>:
 8007e60:	20000190 	.word	0x20000190
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop

08007e68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007e68:	4808      	ldr	r0, [pc, #32]	; (8007e8c <prvPortStartFirstTask+0x24>)
 8007e6a:	6800      	ldr	r0, [r0, #0]
 8007e6c:	6800      	ldr	r0, [r0, #0]
 8007e6e:	f380 8808 	msr	MSP, r0
 8007e72:	f04f 0000 	mov.w	r0, #0
 8007e76:	f380 8814 	msr	CONTROL, r0
 8007e7a:	b662      	cpsie	i
 8007e7c:	b661      	cpsie	f
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	df00      	svc	0
 8007e88:	bf00      	nop
 8007e8a:	0000      	.short	0x0000
 8007e8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007e90:	bf00      	nop
 8007e92:	bf00      	nop

08007e94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e9a:	4b46      	ldr	r3, [pc, #280]	; (8007fb4 <xPortStartScheduler+0x120>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a46      	ldr	r2, [pc, #280]	; (8007fb8 <xPortStartScheduler+0x124>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d10a      	bne.n	8007eba <xPortStartScheduler+0x26>
        __asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	613b      	str	r3, [r7, #16]
    }
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007eba:	4b3e      	ldr	r3, [pc, #248]	; (8007fb4 <xPortStartScheduler+0x120>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a3f      	ldr	r2, [pc, #252]	; (8007fbc <xPortStartScheduler+0x128>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d10a      	bne.n	8007eda <xPortStartScheduler+0x46>
        __asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	60fb      	str	r3, [r7, #12]
    }
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007eda:	4b39      	ldr	r3, [pc, #228]	; (8007fc0 <xPortStartScheduler+0x12c>)
 8007edc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	22ff      	movs	r2, #255	; 0xff
 8007eea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	4b31      	ldr	r3, [pc, #196]	; (8007fc4 <xPortStartScheduler+0x130>)
 8007f00:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f02:	4b31      	ldr	r3, [pc, #196]	; (8007fc8 <xPortStartScheduler+0x134>)
 8007f04:	2207      	movs	r2, #7
 8007f06:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f08:	e009      	b.n	8007f1e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8007f0a:	4b2f      	ldr	r3, [pc, #188]	; (8007fc8 <xPortStartScheduler+0x134>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	4a2d      	ldr	r2, [pc, #180]	; (8007fc8 <xPortStartScheduler+0x134>)
 8007f12:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f26:	2b80      	cmp	r3, #128	; 0x80
 8007f28:	d0ef      	beq.n	8007f0a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f2a:	4b27      	ldr	r3, [pc, #156]	; (8007fc8 <xPortStartScheduler+0x134>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f1c3 0307 	rsb	r3, r3, #7
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d00a      	beq.n	8007f4c <xPortStartScheduler+0xb8>
        __asm volatile
 8007f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	60bb      	str	r3, [r7, #8]
    }
 8007f48:	bf00      	nop
 8007f4a:	e7fe      	b.n	8007f4a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f4c:	4b1e      	ldr	r3, [pc, #120]	; (8007fc8 <xPortStartScheduler+0x134>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	4a1d      	ldr	r2, [pc, #116]	; (8007fc8 <xPortStartScheduler+0x134>)
 8007f54:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f56:	4b1c      	ldr	r3, [pc, #112]	; (8007fc8 <xPortStartScheduler+0x134>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f5e:	4a1a      	ldr	r2, [pc, #104]	; (8007fc8 <xPortStartScheduler+0x134>)
 8007f60:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007f6a:	4b18      	ldr	r3, [pc, #96]	; (8007fcc <xPortStartScheduler+0x138>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a17      	ldr	r2, [pc, #92]	; (8007fcc <xPortStartScheduler+0x138>)
 8007f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007f76:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <xPortStartScheduler+0x138>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a14      	ldr	r2, [pc, #80]	; (8007fcc <xPortStartScheduler+0x138>)
 8007f7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007f82:	f000 f8db 	bl	800813c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007f86:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <xPortStartScheduler+0x13c>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007f8c:	f000 f8fa 	bl	8008184 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f90:	4b10      	ldr	r3, [pc, #64]	; (8007fd4 <xPortStartScheduler+0x140>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a0f      	ldr	r2, [pc, #60]	; (8007fd4 <xPortStartScheduler+0x140>)
 8007f96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007f9c:	f7ff ff64 	bl	8007e68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007fa0:	f7fe fdb2 	bl	8006b08 <vTaskSwitchContext>
    prvTaskExitError();
 8007fa4:	f7ff ff1a 	bl	8007ddc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	e000ed00 	.word	0xe000ed00
 8007fb8:	410fc271 	.word	0x410fc271
 8007fbc:	410fc270 	.word	0x410fc270
 8007fc0:	e000e400 	.word	0xe000e400
 8007fc4:	200002d0 	.word	0x200002d0
 8007fc8:	200002d4 	.word	0x200002d4
 8007fcc:	e000ed20 	.word	0xe000ed20
 8007fd0:	2000001c 	.word	0x2000001c
 8007fd4:	e000ef34 	.word	0xe000ef34

08007fd8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
        __asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	607b      	str	r3, [r7, #4]
    }
 8007ff0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007ff2:	4b0f      	ldr	r3, [pc, #60]	; (8008030 <vPortEnterCritical+0x58>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	4a0d      	ldr	r2, [pc, #52]	; (8008030 <vPortEnterCritical+0x58>)
 8007ffa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007ffc:	4b0c      	ldr	r3, [pc, #48]	; (8008030 <vPortEnterCritical+0x58>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d10f      	bne.n	8008024 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008004:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <vPortEnterCritical+0x5c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <vPortEnterCritical+0x4c>
        __asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	603b      	str	r3, [r7, #0]
    }
 8008020:	bf00      	nop
 8008022:	e7fe      	b.n	8008022 <vPortEnterCritical+0x4a>
    }
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	2000001c 	.word	0x2000001c
 8008034:	e000ed04 	.word	0xe000ed04

08008038 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800803e:	4b12      	ldr	r3, [pc, #72]	; (8008088 <vPortExitCritical+0x50>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <vPortExitCritical+0x24>
        __asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	607b      	str	r3, [r7, #4]
    }
 8008058:	bf00      	nop
 800805a:	e7fe      	b.n	800805a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <vPortExitCritical+0x50>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3b01      	subs	r3, #1
 8008062:	4a09      	ldr	r2, [pc, #36]	; (8008088 <vPortExitCritical+0x50>)
 8008064:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008066:	4b08      	ldr	r3, [pc, #32]	; (8008088 <vPortExitCritical+0x50>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d105      	bne.n	800807a <vPortExitCritical+0x42>
 800806e:	2300      	movs	r3, #0
 8008070:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	f383 8811 	msr	BASEPRI, r3
    }
 8008078:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	2000001c 	.word	0x2000001c
 800808c:	00000000 	.word	0x00000000

08008090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008090:	f3ef 8009 	mrs	r0, PSP
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	4b15      	ldr	r3, [pc, #84]	; (80080f0 <pxCurrentTCBConst>)
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	f01e 0f10 	tst.w	lr, #16
 80080a0:	bf08      	it	eq
 80080a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080aa:	6010      	str	r0, [r2, #0]
 80080ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80080b4:	f380 8811 	msr	BASEPRI, r0
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f7fe fd22 	bl	8006b08 <vTaskSwitchContext>
 80080c4:	f04f 0000 	mov.w	r0, #0
 80080c8:	f380 8811 	msr	BASEPRI, r0
 80080cc:	bc09      	pop	{r0, r3}
 80080ce:	6819      	ldr	r1, [r3, #0]
 80080d0:	6808      	ldr	r0, [r1, #0]
 80080d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d6:	f01e 0f10 	tst.w	lr, #16
 80080da:	bf08      	it	eq
 80080dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080e0:	f380 8809 	msr	PSP, r0
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	f3af 8000 	nop.w

080080f0 <pxCurrentTCBConst>:
 80080f0:	20000190 	.word	0x20000190
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop

080080f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
        __asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	607b      	str	r3, [r7, #4]
    }
 8008110:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008112:	f7fe fc41 	bl	8006998 <xTaskIncrementTick>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d003      	beq.n	8008124 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800811c:	4b06      	ldr	r3, [pc, #24]	; (8008138 <SysTick_Handler+0x40>)
 800811e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	2300      	movs	r3, #0
 8008126:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	f383 8811 	msr	BASEPRI, r3
    }
 800812e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	e000ed04 	.word	0xe000ed04

0800813c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008140:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <vPortSetupTimerInterrupt+0x34>)
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008146:	4b0b      	ldr	r3, [pc, #44]	; (8008174 <vPortSetupTimerInterrupt+0x38>)
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800814c:	4b0a      	ldr	r3, [pc, #40]	; (8008178 <vPortSetupTimerInterrupt+0x3c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a0a      	ldr	r2, [pc, #40]	; (800817c <vPortSetupTimerInterrupt+0x40>)
 8008152:	fba2 2303 	umull	r2, r3, r2, r3
 8008156:	099b      	lsrs	r3, r3, #6
 8008158:	4a09      	ldr	r2, [pc, #36]	; (8008180 <vPortSetupTimerInterrupt+0x44>)
 800815a:	3b01      	subs	r3, #1
 800815c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800815e:	4b04      	ldr	r3, [pc, #16]	; (8008170 <vPortSetupTimerInterrupt+0x34>)
 8008160:	2207      	movs	r2, #7
 8008162:	601a      	str	r2, [r3, #0]
}
 8008164:	bf00      	nop
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	e000e010 	.word	0xe000e010
 8008174:	e000e018 	.word	0xe000e018
 8008178:	20000008 	.word	0x20000008
 800817c:	10624dd3 	.word	0x10624dd3
 8008180:	e000e014 	.word	0xe000e014

08008184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008194 <vPortEnableVFP+0x10>
 8008188:	6801      	ldr	r1, [r0, #0]
 800818a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800818e:	6001      	str	r1, [r0, #0]
 8008190:	4770      	bx	lr
 8008192:	0000      	.short	0x0000
 8008194:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008198:	bf00      	nop
 800819a:	bf00      	nop

0800819c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80081a2:	f3ef 8305 	mrs	r3, IPSR
 80081a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b0f      	cmp	r3, #15
 80081ac:	d914      	bls.n	80081d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ae:	4a17      	ldr	r2, [pc, #92]	; (800820c <vPortValidateInterruptPriority+0x70>)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4413      	add	r3, r2
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081b8:	4b15      	ldr	r3, [pc, #84]	; (8008210 <vPortValidateInterruptPriority+0x74>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	7afa      	ldrb	r2, [r7, #11]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d20a      	bcs.n	80081d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	607b      	str	r3, [r7, #4]
    }
 80081d4:	bf00      	nop
 80081d6:	e7fe      	b.n	80081d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081d8:	4b0e      	ldr	r3, [pc, #56]	; (8008214 <vPortValidateInterruptPriority+0x78>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081e0:	4b0d      	ldr	r3, [pc, #52]	; (8008218 <vPortValidateInterruptPriority+0x7c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d90a      	bls.n	80081fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	603b      	str	r3, [r7, #0]
    }
 80081fa:	bf00      	nop
 80081fc:	e7fe      	b.n	80081fc <vPortValidateInterruptPriority+0x60>
    }
 80081fe:	bf00      	nop
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	e000e3f0 	.word	0xe000e3f0
 8008210:	200002d0 	.word	0x200002d0
 8008214:	e000ed0c 	.word	0xe000ed0c
 8008218:	200002d4 	.word	0x200002d4

0800821c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08a      	sub	sp, #40	; 0x28
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008224:	2300      	movs	r3, #0
 8008226:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8008228:	f7fe fafc 	bl	8006824 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800822c:	4b65      	ldr	r3, [pc, #404]	; (80083c4 <pvPortMalloc+0x1a8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008234:	f000 f934 	bl	80084a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008238:	4b63      	ldr	r3, [pc, #396]	; (80083c8 <pvPortMalloc+0x1ac>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4013      	ands	r3, r2
 8008240:	2b00      	cmp	r3, #0
 8008242:	f040 80a7 	bne.w	8008394 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d02d      	beq.n	80082a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800824c:	2208      	movs	r2, #8
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	429a      	cmp	r2, r3
 8008256:	d227      	bcs.n	80082a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8008258:	2208      	movs	r2, #8
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4413      	add	r3, r2
 800825e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f003 0307 	and.w	r3, r3, #7
 8008266:	2b00      	cmp	r3, #0
 8008268:	d021      	beq.n	80082ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f023 0307 	bic.w	r3, r3, #7
 8008270:	3308      	adds	r3, #8
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	429a      	cmp	r2, r3
 8008276:	d214      	bcs.n	80082a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f023 0307 	bic.w	r3, r3, #7
 800827e:	3308      	adds	r3, #8
 8008280:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f003 0307 	and.w	r3, r3, #7
 8008288:	2b00      	cmp	r3, #0
 800828a:	d010      	beq.n	80082ae <pvPortMalloc+0x92>
        __asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	617b      	str	r3, [r7, #20]
    }
 800829e:	bf00      	nop
 80082a0:	e7fe      	b.n	80082a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082a6:	e002      	b.n	80082ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	607b      	str	r3, [r7, #4]
 80082ac:	e000      	b.n	80082b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d06e      	beq.n	8008394 <pvPortMalloc+0x178>
 80082b6:	4b45      	ldr	r3, [pc, #276]	; (80083cc <pvPortMalloc+0x1b0>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d869      	bhi.n	8008394 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80082c0:	4b43      	ldr	r3, [pc, #268]	; (80083d0 <pvPortMalloc+0x1b4>)
 80082c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80082c4:	4b42      	ldr	r3, [pc, #264]	; (80083d0 <pvPortMalloc+0x1b4>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ca:	e004      	b.n	80082d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d903      	bls.n	80082e8 <pvPortMalloc+0xcc>
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1f1      	bne.n	80082cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80082e8:	4b36      	ldr	r3, [pc, #216]	; (80083c4 <pvPortMalloc+0x1a8>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d050      	beq.n	8008394 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2208      	movs	r2, #8
 80082f8:	4413      	add	r3, r2
 80082fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	1ad2      	subs	r2, r2, r3
 800830c:	2308      	movs	r3, #8
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	429a      	cmp	r2, r3
 8008312:	d91f      	bls.n	8008354 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4413      	add	r3, r2
 800831a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	f003 0307 	and.w	r3, r3, #7
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00a      	beq.n	800833c <pvPortMalloc+0x120>
        __asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	613b      	str	r3, [r7, #16]
    }
 8008338:	bf00      	nop
 800833a:	e7fe      	b.n	800833a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800834e:	69b8      	ldr	r0, [r7, #24]
 8008350:	f000 f908 	bl	8008564 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008354:	4b1d      	ldr	r3, [pc, #116]	; (80083cc <pvPortMalloc+0x1b0>)
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	4a1b      	ldr	r2, [pc, #108]	; (80083cc <pvPortMalloc+0x1b0>)
 8008360:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008362:	4b1a      	ldr	r3, [pc, #104]	; (80083cc <pvPortMalloc+0x1b0>)
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4b1b      	ldr	r3, [pc, #108]	; (80083d4 <pvPortMalloc+0x1b8>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d203      	bcs.n	8008376 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800836e:	4b17      	ldr	r3, [pc, #92]	; (80083cc <pvPortMalloc+0x1b0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a18      	ldr	r2, [pc, #96]	; (80083d4 <pvPortMalloc+0x1b8>)
 8008374:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <pvPortMalloc+0x1ac>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	431a      	orrs	r2, r3
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800838a:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <pvPortMalloc+0x1bc>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3301      	adds	r3, #1
 8008390:	4a11      	ldr	r2, [pc, #68]	; (80083d8 <pvPortMalloc+0x1bc>)
 8008392:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008394:	f7fe fa54 	bl	8006840 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <pvPortMalloc+0x19c>
        __asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	60fb      	str	r3, [r7, #12]
    }
 80083b4:	bf00      	nop
 80083b6:	e7fe      	b.n	80083b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80083b8:	69fb      	ldr	r3, [r7, #28]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3728      	adds	r7, #40	; 0x28
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20012ee0 	.word	0x20012ee0
 80083c8:	20012ef4 	.word	0x20012ef4
 80083cc:	20012ee4 	.word	0x20012ee4
 80083d0:	20012ed8 	.word	0x20012ed8
 80083d4:	20012ee8 	.word	0x20012ee8
 80083d8:	20012eec 	.word	0x20012eec

080083dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d04d      	beq.n	800848a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80083ee:	2308      	movs	r3, #8
 80083f0:	425b      	negs	r3, r3
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	4413      	add	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	4b24      	ldr	r3, [pc, #144]	; (8008494 <vPortFree+0xb8>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4013      	ands	r3, r2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10a      	bne.n	8008420 <vPortFree+0x44>
        __asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	60fb      	str	r3, [r7, #12]
    }
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00a      	beq.n	800843e <vPortFree+0x62>
        __asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	60bb      	str	r3, [r7, #8]
    }
 800843a:	bf00      	nop
 800843c:	e7fe      	b.n	800843c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	4b14      	ldr	r3, [pc, #80]	; (8008494 <vPortFree+0xb8>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4013      	ands	r3, r2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01e      	beq.n	800848a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d11a      	bne.n	800848a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	4b0e      	ldr	r3, [pc, #56]	; (8008494 <vPortFree+0xb8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	43db      	mvns	r3, r3
 800845e:	401a      	ands	r2, r3
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008464:	f7fe f9de 	bl	8006824 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <vPortFree+0xbc>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4413      	add	r3, r2
 8008472:	4a09      	ldr	r2, [pc, #36]	; (8008498 <vPortFree+0xbc>)
 8008474:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008476:	6938      	ldr	r0, [r7, #16]
 8008478:	f000 f874 	bl	8008564 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800847c:	4b07      	ldr	r3, [pc, #28]	; (800849c <vPortFree+0xc0>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3301      	adds	r3, #1
 8008482:	4a06      	ldr	r2, [pc, #24]	; (800849c <vPortFree+0xc0>)
 8008484:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008486:	f7fe f9db 	bl	8006840 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800848a:	bf00      	nop
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20012ef4 	.word	0x20012ef4
 8008498:	20012ee4 	.word	0x20012ee4
 800849c:	20012ef0 	.word	0x20012ef0

080084a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80084aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80084ac:	4b27      	ldr	r3, [pc, #156]	; (800854c <prvHeapInit+0xac>)
 80084ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00c      	beq.n	80084d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3307      	adds	r3, #7
 80084be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0307 	bic.w	r3, r3, #7
 80084c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	4a1f      	ldr	r2, [pc, #124]	; (800854c <prvHeapInit+0xac>)
 80084d0:	4413      	add	r3, r2
 80084d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084d8:	4a1d      	ldr	r2, [pc, #116]	; (8008550 <prvHeapInit+0xb0>)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80084de:	4b1c      	ldr	r3, [pc, #112]	; (8008550 <prvHeapInit+0xb0>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	4413      	add	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80084ec:	2208      	movs	r2, #8
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	1a9b      	subs	r3, r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0307 	bic.w	r3, r3, #7
 80084fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4a15      	ldr	r2, [pc, #84]	; (8008554 <prvHeapInit+0xb4>)
 8008500:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008502:	4b14      	ldr	r3, [pc, #80]	; (8008554 <prvHeapInit+0xb4>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2200      	movs	r2, #0
 8008508:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800850a:	4b12      	ldr	r3, [pc, #72]	; (8008554 <prvHeapInit+0xb4>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	1ad2      	subs	r2, r2, r3
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008520:	4b0c      	ldr	r3, [pc, #48]	; (8008554 <prvHeapInit+0xb4>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	4a0a      	ldr	r2, [pc, #40]	; (8008558 <prvHeapInit+0xb8>)
 800852e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	4a09      	ldr	r2, [pc, #36]	; (800855c <prvHeapInit+0xbc>)
 8008536:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008538:	4b09      	ldr	r3, [pc, #36]	; (8008560 <prvHeapInit+0xc0>)
 800853a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800853e:	601a      	str	r2, [r3, #0]
}
 8008540:	bf00      	nop
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	200002d8 	.word	0x200002d8
 8008550:	20012ed8 	.word	0x20012ed8
 8008554:	20012ee0 	.word	0x20012ee0
 8008558:	20012ee8 	.word	0x20012ee8
 800855c:	20012ee4 	.word	0x20012ee4
 8008560:	20012ef4 	.word	0x20012ef4

08008564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800856c:	4b28      	ldr	r3, [pc, #160]	; (8008610 <prvInsertBlockIntoFreeList+0xac>)
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e002      	b.n	8008578 <prvInsertBlockIntoFreeList+0x14>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	429a      	cmp	r2, r3
 8008580:	d8f7      	bhi.n	8008572 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	4413      	add	r3, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d108      	bne.n	80085a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	441a      	add	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	441a      	add	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d118      	bne.n	80085ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b15      	ldr	r3, [pc, #84]	; (8008614 <prvInsertBlockIntoFreeList+0xb0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d00d      	beq.n	80085e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	441a      	add	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	e008      	b.n	80085f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085e2:	4b0c      	ldr	r3, [pc, #48]	; (8008614 <prvInsertBlockIntoFreeList+0xb0>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e003      	b.n	80085f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d002      	beq.n	8008602 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	20012ed8 	.word	0x20012ed8
 8008614:	20012ee0 	.word	0x20012ee0

08008618 <__libc_init_array>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	4d0d      	ldr	r5, [pc, #52]	; (8008650 <__libc_init_array+0x38>)
 800861c:	4c0d      	ldr	r4, [pc, #52]	; (8008654 <__libc_init_array+0x3c>)
 800861e:	1b64      	subs	r4, r4, r5
 8008620:	10a4      	asrs	r4, r4, #2
 8008622:	2600      	movs	r6, #0
 8008624:	42a6      	cmp	r6, r4
 8008626:	d109      	bne.n	800863c <__libc_init_array+0x24>
 8008628:	4d0b      	ldr	r5, [pc, #44]	; (8008658 <__libc_init_array+0x40>)
 800862a:	4c0c      	ldr	r4, [pc, #48]	; (800865c <__libc_init_array+0x44>)
 800862c:	f000 f82e 	bl	800868c <_init>
 8008630:	1b64      	subs	r4, r4, r5
 8008632:	10a4      	asrs	r4, r4, #2
 8008634:	2600      	movs	r6, #0
 8008636:	42a6      	cmp	r6, r4
 8008638:	d105      	bne.n	8008646 <__libc_init_array+0x2e>
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008640:	4798      	blx	r3
 8008642:	3601      	adds	r6, #1
 8008644:	e7ee      	b.n	8008624 <__libc_init_array+0xc>
 8008646:	f855 3b04 	ldr.w	r3, [r5], #4
 800864a:	4798      	blx	r3
 800864c:	3601      	adds	r6, #1
 800864e:	e7f2      	b.n	8008636 <__libc_init_array+0x1e>
 8008650:	0800885c 	.word	0x0800885c
 8008654:	0800885c 	.word	0x0800885c
 8008658:	0800885c 	.word	0x0800885c
 800865c:	08008860 	.word	0x08008860

08008660 <memcpy>:
 8008660:	440a      	add	r2, r1
 8008662:	4291      	cmp	r1, r2
 8008664:	f100 33ff 	add.w	r3, r0, #4294967295
 8008668:	d100      	bne.n	800866c <memcpy+0xc>
 800866a:	4770      	bx	lr
 800866c:	b510      	push	{r4, lr}
 800866e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008676:	4291      	cmp	r1, r2
 8008678:	d1f9      	bne.n	800866e <memcpy+0xe>
 800867a:	bd10      	pop	{r4, pc}

0800867c <memset>:
 800867c:	4402      	add	r2, r0
 800867e:	4603      	mov	r3, r0
 8008680:	4293      	cmp	r3, r2
 8008682:	d100      	bne.n	8008686 <memset+0xa>
 8008684:	4770      	bx	lr
 8008686:	f803 1b01 	strb.w	r1, [r3], #1
 800868a:	e7f9      	b.n	8008680 <memset+0x4>

0800868c <_init>:
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868e:	bf00      	nop
 8008690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008692:	bc08      	pop	{r3}
 8008694:	469e      	mov	lr, r3
 8008696:	4770      	bx	lr

08008698 <_fini>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	bf00      	nop
 800869c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869e:	bc08      	pop	{r3}
 80086a0:	469e      	mov	lr, r3
 80086a2:	4770      	bx	lr
