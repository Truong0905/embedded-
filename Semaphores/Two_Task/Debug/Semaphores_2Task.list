
Semaphores_2Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000716c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800733c  0800733c  0001733c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007540  08007540  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007548  08007548  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800754c  0800754c  0001754c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013428  20000078  080075c8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200134a0  080075c8  000234a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c8f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f6  00000000  00000000  00035d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00039130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003a528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c20  00000000  00000000  0003b768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017312  00000000  00000000  00061388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df0cb  00000000  00000000  0007869a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157765  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c24  00000000  00000000  001577b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007324 	.word	0x08007324

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08007324 	.word	0x08007324

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ec4 	.word	0x20012ec4
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b974 	b.w	8000650 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468e      	mov	lr, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d14d      	bne.n	800042a <__udivmoddi4+0xaa>
 800038e:	428a      	cmp	r2, r1
 8000390:	4694      	mov	ip, r2
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0xe8>
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	b152      	cbz	r2, 80003b0 <__udivmoddi4+0x30>
 800039a:	fa01 f302 	lsl.w	r3, r1, r2
 800039e:	f1c2 0120 	rsb	r1, r2, #32
 80003a2:	fa20 f101 	lsr.w	r1, r0, r1
 80003a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003aa:	ea41 0e03 	orr.w	lr, r1, r3
 80003ae:	4094      	lsls	r4, r2
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	0c21      	lsrs	r1, r4, #16
 80003b6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ba:	fa1f f78c 	uxth.w	r7, ip
 80003be:	fb08 e316 	mls	r3, r8, r6, lr
 80003c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003c6:	fb06 f107 	mul.w	r1, r6, r7
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003d6:	f080 811f 	bcs.w	8000618 <__udivmoddi4+0x298>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 811c 	bls.w	8000618 <__udivmoddi4+0x298>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x92>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	f080 810a 	bcs.w	800061c <__udivmoddi4+0x29c>
 8000408:	42a7      	cmp	r7, r4
 800040a:	f240 8107 	bls.w	800061c <__udivmoddi4+0x29c>
 800040e:	4464      	add	r4, ip
 8000410:	3802      	subs	r0, #2
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	2600      	movs	r6, #0
 800041a:	b11d      	cbz	r5, 8000424 <__udivmoddi4+0xa4>
 800041c:	40d4      	lsrs	r4, r2
 800041e:	2300      	movs	r3, #0
 8000420:	e9c5 4300 	strd	r4, r3, [r5]
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0xc2>
 800042e:	2d00      	cmp	r5, #0
 8000430:	f000 80ef 	beq.w	8000612 <__udivmoddi4+0x292>
 8000434:	2600      	movs	r6, #0
 8000436:	e9c5 0100 	strd	r0, r1, [r5]
 800043a:	4630      	mov	r0, r6
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	fab3 f683 	clz	r6, r3
 8000446:	2e00      	cmp	r6, #0
 8000448:	d14a      	bne.n	80004e0 <__udivmoddi4+0x160>
 800044a:	428b      	cmp	r3, r1
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xd4>
 800044e:	4282      	cmp	r2, r0
 8000450:	f200 80f9 	bhi.w	8000646 <__udivmoddi4+0x2c6>
 8000454:	1a84      	subs	r4, r0, r2
 8000456:	eb61 0303 	sbc.w	r3, r1, r3
 800045a:	2001      	movs	r0, #1
 800045c:	469e      	mov	lr, r3
 800045e:	2d00      	cmp	r5, #0
 8000460:	d0e0      	beq.n	8000424 <__udivmoddi4+0xa4>
 8000462:	e9c5 4e00 	strd	r4, lr, [r5]
 8000466:	e7dd      	b.n	8000424 <__udivmoddi4+0xa4>
 8000468:	b902      	cbnz	r2, 800046c <__udivmoddi4+0xec>
 800046a:	deff      	udf	#255	; 0xff
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	f040 8092 	bne.w	800059a <__udivmoddi4+0x21a>
 8000476:	eba1 010c 	sub.w	r1, r1, ip
 800047a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	2601      	movs	r6, #1
 8000484:	0c20      	lsrs	r0, r4, #16
 8000486:	fbb1 f3f7 	udiv	r3, r1, r7
 800048a:	fb07 1113 	mls	r1, r7, r3, r1
 800048e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000492:	fb0e f003 	mul.w	r0, lr, r3
 8000496:	4288      	cmp	r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x12c>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x12a>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f200 80cb 	bhi.w	8000640 <__udivmoddi4+0x2c0>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1a09      	subs	r1, r1, r0
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b4:	fb07 1110 	mls	r1, r7, r0, r1
 80004b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004bc:	fb0e fe00 	mul.w	lr, lr, r0
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x156>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004cc:	d202      	bcs.n	80004d4 <__udivmoddi4+0x154>
 80004ce:	45a6      	cmp	lr, r4
 80004d0:	f200 80bb 	bhi.w	800064a <__udivmoddi4+0x2ca>
 80004d4:	4608      	mov	r0, r1
 80004d6:	eba4 040e 	sub.w	r4, r4, lr
 80004da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x9a>
 80004e0:	f1c6 0720 	rsb	r7, r6, #32
 80004e4:	40b3      	lsls	r3, r6
 80004e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ee:	fa20 f407 	lsr.w	r4, r0, r7
 80004f2:	fa01 f306 	lsl.w	r3, r1, r6
 80004f6:	431c      	orrs	r4, r3
 80004f8:	40f9      	lsrs	r1, r7
 80004fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000502:	fbb1 f8f9 	udiv	r8, r1, r9
 8000506:	0c20      	lsrs	r0, r4, #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fb09 1118 	mls	r1, r9, r8, r1
 8000510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000514:	fb08 f00e 	mul.w	r0, r8, lr
 8000518:	4288      	cmp	r0, r1
 800051a:	fa02 f206 	lsl.w	r2, r2, r6
 800051e:	d90b      	bls.n	8000538 <__udivmoddi4+0x1b8>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f108 3aff 	add.w	sl, r8, #4294967295
 8000528:	f080 8088 	bcs.w	800063c <__udivmoddi4+0x2bc>
 800052c:	4288      	cmp	r0, r1
 800052e:	f240 8085 	bls.w	800063c <__udivmoddi4+0x2bc>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	1a09      	subs	r1, r1, r0
 800053a:	b2a4      	uxth	r4, r4
 800053c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000540:	fb09 1110 	mls	r1, r9, r0, r1
 8000544:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	458e      	cmp	lr, r1
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x1e2>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f100 34ff 	add.w	r4, r0, #4294967295
 8000558:	d26c      	bcs.n	8000634 <__udivmoddi4+0x2b4>
 800055a:	458e      	cmp	lr, r1
 800055c:	d96a      	bls.n	8000634 <__udivmoddi4+0x2b4>
 800055e:	3802      	subs	r0, #2
 8000560:	4461      	add	r1, ip
 8000562:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000566:	fba0 9402 	umull	r9, r4, r0, r2
 800056a:	eba1 010e 	sub.w	r1, r1, lr
 800056e:	42a1      	cmp	r1, r4
 8000570:	46c8      	mov	r8, r9
 8000572:	46a6      	mov	lr, r4
 8000574:	d356      	bcc.n	8000624 <__udivmoddi4+0x2a4>
 8000576:	d053      	beq.n	8000620 <__udivmoddi4+0x2a0>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x212>
 800057a:	ebb3 0208 	subs.w	r2, r3, r8
 800057e:	eb61 010e 	sbc.w	r1, r1, lr
 8000582:	fa01 f707 	lsl.w	r7, r1, r7
 8000586:	fa22 f306 	lsr.w	r3, r2, r6
 800058a:	40f1      	lsrs	r1, r6
 800058c:	431f      	orrs	r7, r3
 800058e:	e9c5 7100 	strd	r7, r1, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	40d8      	lsrs	r0, r3
 80005a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
 80005a8:	4091      	lsls	r1, r2
 80005aa:	4301      	orrs	r1, r0
 80005ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005b8:	fb07 3610 	mls	r6, r7, r0, r3
 80005bc:	0c0b      	lsrs	r3, r1, #16
 80005be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005c2:	fb00 f60e 	mul.w	r6, r0, lr
 80005c6:	429e      	cmp	r6, r3
 80005c8:	fa04 f402 	lsl.w	r4, r4, r2
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x260>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005d6:	d22f      	bcs.n	8000638 <__udivmoddi4+0x2b8>
 80005d8:	429e      	cmp	r6, r3
 80005da:	d92d      	bls.n	8000638 <__udivmoddi4+0x2b8>
 80005dc:	3802      	subs	r0, #2
 80005de:	4463      	add	r3, ip
 80005e0:	1b9b      	subs	r3, r3, r6
 80005e2:	b289      	uxth	r1, r1
 80005e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005e8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb06 f30e 	mul.w	r3, r6, lr
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x28a>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000600:	d216      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 8000602:	428b      	cmp	r3, r1
 8000604:	d914      	bls.n	8000630 <__udivmoddi4+0x2b0>
 8000606:	3e02      	subs	r6, #2
 8000608:	4461      	add	r1, ip
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000610:	e738      	b.n	8000484 <__udivmoddi4+0x104>
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e705      	b.n	8000424 <__udivmoddi4+0xa4>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e3      	b.n	80003e4 <__udivmoddi4+0x64>
 800061c:	4618      	mov	r0, r3
 800061e:	e6f8      	b.n	8000412 <__udivmoddi4+0x92>
 8000620:	454b      	cmp	r3, r9
 8000622:	d2a9      	bcs.n	8000578 <__udivmoddi4+0x1f8>
 8000624:	ebb9 0802 	subs.w	r8, r9, r2
 8000628:	eb64 0e0c 	sbc.w	lr, r4, ip
 800062c:	3801      	subs	r0, #1
 800062e:	e7a3      	b.n	8000578 <__udivmoddi4+0x1f8>
 8000630:	4646      	mov	r6, r8
 8000632:	e7ea      	b.n	800060a <__udivmoddi4+0x28a>
 8000634:	4620      	mov	r0, r4
 8000636:	e794      	b.n	8000562 <__udivmoddi4+0x1e2>
 8000638:	4640      	mov	r0, r8
 800063a:	e7d1      	b.n	80005e0 <__udivmoddi4+0x260>
 800063c:	46d0      	mov	r8, sl
 800063e:	e77b      	b.n	8000538 <__udivmoddi4+0x1b8>
 8000640:	3b02      	subs	r3, #2
 8000642:	4461      	add	r1, ip
 8000644:	e732      	b.n	80004ac <__udivmoddi4+0x12c>
 8000646:	4630      	mov	r0, r6
 8000648:	e709      	b.n	800045e <__udivmoddi4+0xde>
 800064a:	4464      	add	r4, ip
 800064c:	3802      	subs	r0, #2
 800064e:	e742      	b.n	80004d6 <__udivmoddi4+0x156>

08000650 <__aeabi_idiv0>:
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fb3b 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f84b 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f8bb 	bl	80007dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  vSemaphoreCreateBinary(xWork) ;
 8000666:	2203      	movs	r2, #3
 8000668:	2100      	movs	r1, #0
 800066a:	2001      	movs	r0, #1
 800066c:	f002 f824 	bl	80026b8 <xQueueGenericCreate>
 8000670:	4603      	mov	r3, r0
 8000672:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <main+0x8c>)
 8000674:	6013      	str	r3, [r2, #0]
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <main+0x8c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <main+0x38>
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <main+0x8c>)
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	f002 f89e 	bl	80027c8 <xQueueGenericSend>

  xWorkQueue = xQueueCreate(1,sizeof(unsigned int )) ;
 800068c:	2200      	movs	r2, #0
 800068e:	2104      	movs	r1, #4
 8000690:	2001      	movs	r0, #1
 8000692:	f002 f811 	bl	80026b8 <xQueueGenericCreate>
 8000696:	4603      	mov	r3, r0
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <main+0x90>)
 800069a:	6013      	str	r3, [r2, #0]

  if (xWork != NULL && xWorkQueue != NULL )
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <main+0x8c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d01b      	beq.n	80006dc <main+0x88>
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <main+0x90>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d017      	beq.n	80006dc <main+0x88>
  {
	  xTaskCreate(vManagerTask, "Manager task", 500, NULL, 3, NULL);
 80006ac:	2300      	movs	r3, #0
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	2303      	movs	r3, #3
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2300      	movs	r3, #0
 80006b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006ba:	490b      	ldr	r1, [pc, #44]	; (80006e8 <main+0x94>)
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <main+0x98>)
 80006be:	f002 fcd5 	bl	800306c <xTaskCreate>

	  xTaskCreate(vEmployeeTask, "Employee task", 500, NULL, 1, NULL);
 80006c2:	2300      	movs	r3, #0
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2300      	movs	r3, #0
 80006cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006d0:	4907      	ldr	r1, [pc, #28]	; (80006f0 <main+0x9c>)
 80006d2:	4808      	ldr	r0, [pc, #32]	; (80006f4 <main+0xa0>)
 80006d4:	f002 fcca 	bl	800306c <xTaskCreate>

	  vTaskStartScheduler() ;
 80006d8:	f002 fe62 	bl	80033a0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <main+0x88>
 80006de:	bf00      	nop
 80006e0:	20000094 	.word	0x20000094
 80006e4:	20000098 	.word	0x20000098
 80006e8:	0800733c 	.word	0x0800733c
 80006ec:	080008d9 	.word	0x080008d9
 80006f0:	0800734c 	.word	0x0800734c
 80006f4:	08000959 	.word	0x08000959

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	; 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 fdde 	bl	80062c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <SystemClock_Config+0xdc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a2b      	ldr	r2, [pc, #172]	; (80007d4 <SystemClock_Config+0xdc>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <SystemClock_Config+0xdc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <SystemClock_Config+0xe0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <SystemClock_Config+0xe0>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SystemClock_Config+0xe0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2310      	movs	r3, #16
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000768:	2308      	movs	r3, #8
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800076c:	23b4      	movs	r3, #180	; 0xb4
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4618      	mov	r0, r3
 8000782:	f001 f931 	bl	80019e8 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800078c:	f000 f914 	bl	80009b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000790:	f000 fd72 	bl	8001278 <HAL_PWREx_EnableOverDrive>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800079a:	f000 f90d 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2105      	movs	r1, #5
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fdab 	bl	8001318 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007c8:	f000 f8f6 	bl	80009b8 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3750      	adds	r7, #80	; 0x50
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b35      	ldr	r3, [pc, #212]	; (80008cc <MX_GPIO_Init+0xf0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a34      	ldr	r2, [pc, #208]	; (80008cc <MX_GPIO_Init+0xf0>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a26      	ldr	r2, [pc, #152]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_GPIO_Init+0xf0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_GPIO_Init+0xf0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	481a      	ldr	r0, [pc, #104]	; (80008d0 <MX_GPIO_Init+0xf4>)
 8000868:	f000 fcec 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000872:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <MX_GPIO_Init+0xf8>)
 8000884:	f000 fb4a 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000888:	230c      	movs	r3, #12
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000898:	2307      	movs	r3, #7
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	480b      	ldr	r0, [pc, #44]	; (80008d0 <MX_GPIO_Init+0xf4>)
 80008a4:	f000 fb3a 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a8:	2320      	movs	r3, #32
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_GPIO_Init+0xf4>)
 80008c0:	f000 fb2c 	bl	8000f1c <HAL_GPIO_Init>

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020800 	.word	0x40020800

080008d8 <vManagerTask>:

/* USER CODE BEGIN 4 */

static void vManagerTask(void *Param)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	unsigned int xWorkTicketId ;
	BaseType_t Status ;

	xSemaphoreGive(xWork);
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <vManagerTask+0x5c>)
 80008e2:	6818      	ldr	r0, [r3, #0]
 80008e4:	2300      	movs	r3, #0
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	f001 ff6d 	bl	80027c8 <xQueueGenericSend>

	while(1)
	{
		xWorkTicketId = (rand() & 0x1FF) ;
 80008ee:	f005 fcf3 	bl	80062d8 <rand>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80008f8:	60bb      	str	r3, [r7, #8]

		Status = xQueueSend(xWorkQueue,&xWorkTicketId,portMAX_DELAY);
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <vManagerTask+0x60>)
 80008fc:	6818      	ldr	r0, [r3, #0]
 80008fe:	f107 0108 	add.w	r1, r7, #8
 8000902:	2300      	movs	r3, #0
 8000904:	f04f 32ff 	mov.w	r2, #4294967295
 8000908:	f001 ff5e 	bl	80027c8 <xQueueGenericSend>
 800090c:	60f8      	str	r0, [r7, #12]
		if (Status != pdPASS)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d1ec      	bne.n	80008ee <vManagerTask+0x16>
		{
			;
		}
		else
		{
			xSemaphoreGive(xWork);
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <vManagerTask+0x5c>)
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	2300      	movs	r3, #0
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	f001 ff53 	bl	80027c8 <xQueueGenericSend>
			taskYIELD() ;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <vManagerTask+0x64>)
 8000924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	f3bf 8f6f 	isb	sy
		xWorkTicketId = (rand() & 0x1FF) ;
 8000932:	e7dc      	b.n	80008ee <vManagerTask+0x16>
 8000934:	20000094 	.word	0x20000094
 8000938:	20000098 	.word	0x20000098
 800093c:	e000ed04 	.word	0xe000ed04

08000940 <EmployeeDoWork>:
		}
	}
}

void EmployeeDoWork (unsigned int XWorkTicketId)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	vTaskDelay(XWorkTicketId) ;
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f002 fcf1 	bl	8003330 <vTaskDelay>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <vEmployeeTask>:

static void vEmployeeTask(void *Param)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	unsigned int XWorkTicketId ;
	BaseType_t Status ;
	while(1)
	{
		xSemaphoreTake(xWork,0);
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <vEmployeeTask+0x38>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f002 f934 	bl	8002bd4 <xQueueSemaphoreTake>

		Status = xQueueReceive(xWork, &XWorkTicketId, 0) ;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <vEmployeeTask+0x38>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f107 0108 	add.w	r1, r7, #8
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 f834 	bl	80029e4 <xQueueReceive>
 800097c:	60f8      	str	r0, [r7, #12]

		if (Status == pdPASS)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d1ed      	bne.n	8000960 <vEmployeeTask+0x8>
		{
			EmployeeDoWork(XWorkTicketId) ;
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ffda 	bl	8000940 <EmployeeDoWork>
		xSemaphoreTake(xWork,0);
 800098c:	e7e8      	b.n	8000960 <vEmployeeTask+0x8>
 800098e:	bf00      	nop
 8000990:	20000094 	.word	0x20000094

08000994 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009a6:	f000 f9b7 	bl	8000d18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40001000 	.word	0x40001000

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  vInitPrioGroupValue();
 8000a02:	f003 fc11 	bl	8004228 <vInitPrioGroupValue>
  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	2036      	movs	r0, #54	; 0x36
 8000a2a:	f000 fa4d 	bl	8000ec8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a2e:	2036      	movs	r0, #54	; 0x36
 8000a30:	f000 fa66 	bl	8000f00 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <HAL_InitTick+0xa4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <HAL_InitTick+0xa4>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_InitTick+0xa4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f003 0310 	and.w	r3, r3, #16
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a50:	f107 0210 	add.w	r2, r7, #16
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fd62 	bl	8001524 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a60:	f000 fd4c 	bl	80014fc <HAL_RCC_GetPCLK1Freq>
 8000a64:	4603      	mov	r3, r0
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6c:	4a13      	ldr	r2, [pc, #76]	; (8000abc <HAL_InitTick+0xa8>)
 8000a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a72:	0c9b      	lsrs	r3, r3, #18
 8000a74:	3b01      	subs	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <HAL_InitTick+0xb0>)
 8000a7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a84:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a9a:	f001 fa43 	bl	8001f24 <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d104      	bne.n	8000aae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000aa4:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <HAL_InitTick+0xac>)
 8000aa6:	f001 fa97 	bl	8001fd8 <HAL_TIM_Base_Start_IT>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3730      	adds	r7, #48	; 0x30
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	431bde83 	.word	0x431bde83
 8000ac0:	2000009c 	.word	0x2000009c
 8000ac4:	40001000 	.word	0x40001000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <TIM6_DAC_IRQHandler+0x10>)
 8000afa:	f001 fadd 	bl	80020b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000009c 	.word	0x2000009c

08000b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
	return 1;
 8000b0c:	2301      	movs	r3, #1
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <_kill>:

int _kill(int pid, int sig)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b22:	f005 fb89 	bl	8006238 <__errno>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2216      	movs	r2, #22
 8000b2a:	601a      	str	r2, [r3, #0]
	return -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_exit>:

void _exit (int status)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ffe7 	bl	8000b18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b4a:	e7fe      	b.n	8000b4a <_exit+0x12>

08000b4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	e00a      	b.n	8000b74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b5e:	f3af 8000 	nop.w
 8000b62:	4601      	mov	r1, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	b2ca      	uxtb	r2, r1
 8000b6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf0      	blt.n	8000b5e <_read+0x12>
	}

return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bae:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_isatty>:

int _isatty(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f005 fb0a 	bl	8006238 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20020000 	.word	0x20020000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	200000e4 	.word	0x200000e4
 8000c58:	200134a0 	.word	0x200134a0

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffd7 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f005 fac9 	bl	8006244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fccf 	bl	8000654 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cc4:	08007550 	.word	0x08007550
  ldr r2, =_sbss
 8000cc8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ccc:	200134a0 	.word	0x200134a0

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f8d8 	bl	8000eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fe86 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe5c 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	200000e8 	.word	0x200000e8

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200000e8 	.word	0x200000e8

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff4c 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eda:	f7ff ff61 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000ede:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	6978      	ldr	r0, [r7, #20]
 8000ee6:	f7ff ffb1 	bl	8000e4c <NVIC_EncodePriority>
 8000eea:	4602      	mov	r2, r0
 8000eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff80 	bl	8000df8 <__NVIC_SetPriority>
}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff54 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e165      	b.n	8001204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 8154 	bne.w	80011fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80ae 	beq.w	80011fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b5d      	ldr	r3, [pc, #372]	; (800121c <HAL_GPIO_Init+0x300>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a5c      	ldr	r2, [pc, #368]	; (800121c <HAL_GPIO_Init+0x300>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b5a      	ldr	r3, [pc, #360]	; (800121c <HAL_GPIO_Init+0x300>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a58      	ldr	r2, [pc, #352]	; (8001220 <HAL_GPIO_Init+0x304>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <HAL_GPIO_Init+0x308>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d025      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d01f      	beq.n	8001132 <HAL_GPIO_Init+0x216>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	; (800122c <HAL_GPIO_Init+0x310>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d019      	beq.n	800112e <HAL_GPIO_Init+0x212>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	; (8001230 <HAL_GPIO_Init+0x314>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0x20e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x318>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x20a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4a      	ldr	r2, [pc, #296]	; (8001238 <HAL_GPIO_Init+0x31c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x206>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a49      	ldr	r2, [pc, #292]	; (800123c <HAL_GPIO_Init+0x320>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x202>
 800111a:	2306      	movs	r3, #6
 800111c:	e00c      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 800111e:	2307      	movs	r3, #7
 8001120:	e00a      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 8001122:	2305      	movs	r3, #5
 8001124:	e008      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 8001126:	2304      	movs	r3, #4
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 800112a:	2303      	movs	r3, #3
 800112c:	e004      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 800112e:	2302      	movs	r3, #2
 8001130:	e002      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 8001136:	2300      	movs	r3, #0
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	f002 0203 	and.w	r2, r2, #3
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	4093      	lsls	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001148:	4935      	ldr	r1, [pc, #212]	; (8001220 <HAL_GPIO_Init+0x304>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_GPIO_Init+0x324>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117a:	4a31      	ldr	r2, [pc, #196]	; (8001240 <HAL_GPIO_Init+0x324>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_GPIO_Init+0x324>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_GPIO_Init+0x324>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011aa:	4b25      	ldr	r3, [pc, #148]	; (8001240 <HAL_GPIO_Init+0x324>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ce:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <HAL_GPIO_Init+0x324>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_GPIO_Init+0x324>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f8:	4a11      	ldr	r2, [pc, #68]	; (8001240 <HAL_GPIO_Init+0x324>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f67f ae96 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40013800 	.word	0x40013800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40021000 	.word	0x40021000
 8001238:	40021400 	.word	0x40021400
 800123c:	40021800 	.word	0x40021800
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	619a      	str	r2, [r3, #24]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <HAL_PWREx_EnableOverDrive+0x90>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <HAL_PWREx_EnableOverDrive+0x90>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_PWREx_EnableOverDrive+0x90>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_PWREx_EnableOverDrive+0x94>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a4:	f7ff fd4c 	bl	8000d40 <HAL_GetTick>
 80012a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012aa:	e009      	b.n	80012c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012ac:	f7ff fd48 	bl	8000d40 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ba:	d901      	bls.n	80012c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e01f      	b.n	8001300 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_PWREx_EnableOverDrive+0x98>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012cc:	d1ee      	bne.n	80012ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d4:	f7ff fd34 	bl	8000d40 <HAL_GetTick>
 80012d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012da:	e009      	b.n	80012f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012dc:	f7ff fd30 	bl	8000d40 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ea:	d901      	bls.n	80012f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e007      	b.n	8001300 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <HAL_PWREx_EnableOverDrive+0x98>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012fc:	d1ee      	bne.n	80012dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	420e0040 	.word	0x420e0040
 8001310:	40007000 	.word	0x40007000
 8001314:	420e0044 	.word	0x420e0044

08001318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e0cc      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800132c:	4b68      	ldr	r3, [pc, #416]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d90c      	bls.n	8001354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133a:	4b65      	ldr	r3, [pc, #404]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0b8      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d005      	beq.n	8001378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800136c:	4b59      	ldr	r3, [pc, #356]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	4a58      	ldr	r2, [pc, #352]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001384:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800138e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001390:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	494d      	ldr	r1, [pc, #308]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d044      	beq.n	8001438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d119      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e07f      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d003      	beq.n	80013d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d107      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d6:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e06f      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e067      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f6:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f023 0203 	bic.w	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	4934      	ldr	r1, [pc, #208]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001404:	4313      	orrs	r3, r2
 8001406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001408:	f7ff fc9a 	bl	8000d40 <HAL_GetTick>
 800140c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140e:	e00a      	b.n	8001426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001410:	f7ff fc96 	bl	8000d40 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f241 3288 	movw	r2, #5000	; 0x1388
 800141e:	4293      	cmp	r3, r2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e04f      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 020c 	and.w	r2, r3, #12
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	429a      	cmp	r2, r3
 8001436:	d1eb      	bne.n	8001410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d20c      	bcs.n	8001460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e032      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4916      	ldr	r1, [pc, #88]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	4313      	orrs	r3, r2
 800147c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d009      	beq.n	800149e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	490e      	ldr	r1, [pc, #56]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	4313      	orrs	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800149e:	f000 f873 	bl	8001588 <HAL_RCC_GetSysClockFreq>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	490a      	ldr	r1, [pc, #40]	; (80014d8 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	5ccb      	ldrb	r3, [r1, r3]
 80014b2:	fa22 f303 	lsr.w	r3, r2, r3
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_RCC_ClockConfig+0x1c8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff faa8 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023c00 	.word	0x40023c00
 80014d4:	40023800 	.word	0x40023800
 80014d8:	080073d4 	.word	0x080073d4
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000004 	.word	0x20000004

080014e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000

080014fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001500:	f7ff fff0 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001504:	4602      	mov	r2, r0
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	0a9b      	lsrs	r3, r3, #10
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	4903      	ldr	r1, [pc, #12]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001512:	5ccb      	ldrb	r3, [r1, r3]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	080073e4 	.word	0x080073e4

08001524 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	220f      	movs	r2, #15
 8001532:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_RCC_GetClockConfig+0x5c>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0203 	and.w	r2, r3, #3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_RCC_GetClockConfig+0x5c>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_RCC_GetClockConfig+0x5c>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_RCC_GetClockConfig+0x5c>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <HAL_RCC_GetClockConfig+0x60>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 020f 	and.w	r2, r3, #15
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	601a      	str	r2, [r3, #0]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40023c00 	.word	0x40023c00

08001588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800158c:	b0ae      	sub	sp, #184	; 0xb8
 800158e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ae:	4bcb      	ldr	r3, [pc, #812]	; (80018dc <HAL_RCC_GetSysClockFreq+0x354>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b0c      	cmp	r3, #12
 80015b8:	f200 8206 	bhi.w	80019c8 <HAL_RCC_GetSysClockFreq+0x440>
 80015bc:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080015f9 	.word	0x080015f9
 80015c8:	080019c9 	.word	0x080019c9
 80015cc:	080019c9 	.word	0x080019c9
 80015d0:	080019c9 	.word	0x080019c9
 80015d4:	08001601 	.word	0x08001601
 80015d8:	080019c9 	.word	0x080019c9
 80015dc:	080019c9 	.word	0x080019c9
 80015e0:	080019c9 	.word	0x080019c9
 80015e4:	08001609 	.word	0x08001609
 80015e8:	080019c9 	.word	0x080019c9
 80015ec:	080019c9 	.word	0x080019c9
 80015f0:	080019c9 	.word	0x080019c9
 80015f4:	080017f9 	.word	0x080017f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015f8:	4bb9      	ldr	r3, [pc, #740]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80015fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80015fe:	e1e7      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001600:	4bb8      	ldr	r3, [pc, #736]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001606:	e1e3      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001608:	4bb4      	ldr	r3, [pc, #720]	; (80018dc <HAL_RCC_GetSysClockFreq+0x354>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001614:	4bb1      	ldr	r3, [pc, #708]	; (80018dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d071      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001620:	4bae      	ldr	r3, [pc, #696]	; (80018dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	099b      	lsrs	r3, r3, #6
 8001626:	2200      	movs	r2, #0
 8001628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800162c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001638:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001642:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001646:	4622      	mov	r2, r4
 8001648:	462b      	mov	r3, r5
 800164a:	f04f 0000 	mov.w	r0, #0
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	0159      	lsls	r1, r3, #5
 8001654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001658:	0150      	lsls	r0, r2, #5
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4621      	mov	r1, r4
 8001660:	1a51      	subs	r1, r2, r1
 8001662:	6439      	str	r1, [r7, #64]	; 0x40
 8001664:	4629      	mov	r1, r5
 8001666:	eb63 0301 	sbc.w	r3, r3, r1
 800166a:	647b      	str	r3, [r7, #68]	; 0x44
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001678:	4649      	mov	r1, r9
 800167a:	018b      	lsls	r3, r1, #6
 800167c:	4641      	mov	r1, r8
 800167e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001682:	4641      	mov	r1, r8
 8001684:	018a      	lsls	r2, r1, #6
 8001686:	4641      	mov	r1, r8
 8001688:	1a51      	subs	r1, r2, r1
 800168a:	63b9      	str	r1, [r7, #56]	; 0x38
 800168c:	4649      	mov	r1, r9
 800168e:	eb63 0301 	sbc.w	r3, r3, r1
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016a0:	4649      	mov	r1, r9
 80016a2:	00cb      	lsls	r3, r1, #3
 80016a4:	4641      	mov	r1, r8
 80016a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016aa:	4641      	mov	r1, r8
 80016ac:	00ca      	lsls	r2, r1, #3
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	4603      	mov	r3, r0
 80016b4:	4622      	mov	r2, r4
 80016b6:	189b      	adds	r3, r3, r2
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
 80016ba:	462b      	mov	r3, r5
 80016bc:	460a      	mov	r2, r1
 80016be:	eb42 0303 	adc.w	r3, r2, r3
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016d0:	4629      	mov	r1, r5
 80016d2:	024b      	lsls	r3, r1, #9
 80016d4:	4621      	mov	r1, r4
 80016d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016da:	4621      	mov	r1, r4
 80016dc:	024a      	lsls	r2, r1, #9
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016e6:	2200      	movs	r2, #0
 80016e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80016f4:	f7fe fe2c 	bl	8000350 <__aeabi_uldivmod>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4613      	mov	r3, r2
 80016fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001702:	e067      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001704:	4b75      	ldr	r3, [pc, #468]	; (80018dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	099b      	lsrs	r3, r3, #6
 800170a:	2200      	movs	r2, #0
 800170c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001710:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001714:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800171c:	67bb      	str	r3, [r7, #120]	; 0x78
 800171e:	2300      	movs	r3, #0
 8001720:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001722:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001726:	4622      	mov	r2, r4
 8001728:	462b      	mov	r3, r5
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	0159      	lsls	r1, r3, #5
 8001734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001738:	0150      	lsls	r0, r2, #5
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4621      	mov	r1, r4
 8001740:	1a51      	subs	r1, r2, r1
 8001742:	62b9      	str	r1, [r7, #40]	; 0x28
 8001744:	4629      	mov	r1, r5
 8001746:	eb63 0301 	sbc.w	r3, r3, r1
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001758:	4649      	mov	r1, r9
 800175a:	018b      	lsls	r3, r1, #6
 800175c:	4641      	mov	r1, r8
 800175e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001762:	4641      	mov	r1, r8
 8001764:	018a      	lsls	r2, r1, #6
 8001766:	4641      	mov	r1, r8
 8001768:	ebb2 0a01 	subs.w	sl, r2, r1
 800176c:	4649      	mov	r1, r9
 800176e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800177e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001782:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001786:	4692      	mov	sl, r2
 8001788:	469b      	mov	fp, r3
 800178a:	4623      	mov	r3, r4
 800178c:	eb1a 0303 	adds.w	r3, sl, r3
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	462b      	mov	r3, r5
 8001794:	eb4b 0303 	adc.w	r3, fp, r3
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017a6:	4629      	mov	r1, r5
 80017a8:	028b      	lsls	r3, r1, #10
 80017aa:	4621      	mov	r1, r4
 80017ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017b0:	4621      	mov	r1, r4
 80017b2:	028a      	lsls	r2, r1, #10
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017bc:	2200      	movs	r2, #0
 80017be:	673b      	str	r3, [r7, #112]	; 0x70
 80017c0:	677a      	str	r2, [r7, #116]	; 0x74
 80017c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017c6:	f7fe fdc3 	bl	8000350 <__aeabi_uldivmod>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4613      	mov	r3, r2
 80017d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017d4:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_RCC_GetSysClockFreq+0x354>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	3301      	adds	r3, #1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80017e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017f6:	e0eb      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f8:	4b38      	ldr	r3, [pc, #224]	; (80018dc <HAL_RCC_GetSysClockFreq+0x354>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001804:	4b35      	ldr	r3, [pc, #212]	; (80018dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d06b      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	099b      	lsrs	r3, r3, #6
 8001816:	2200      	movs	r2, #0
 8001818:	66bb      	str	r3, [r7, #104]	; 0x68
 800181a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800181c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800181e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001822:	663b      	str	r3, [r7, #96]	; 0x60
 8001824:	2300      	movs	r3, #0
 8001826:	667b      	str	r3, [r7, #100]	; 0x64
 8001828:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800182c:	4622      	mov	r2, r4
 800182e:	462b      	mov	r3, r5
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	f04f 0100 	mov.w	r1, #0
 8001838:	0159      	lsls	r1, r3, #5
 800183a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183e:	0150      	lsls	r0, r2, #5
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4621      	mov	r1, r4
 8001846:	1a51      	subs	r1, r2, r1
 8001848:	61b9      	str	r1, [r7, #24]
 800184a:	4629      	mov	r1, r5
 800184c:	eb63 0301 	sbc.w	r3, r3, r1
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800185e:	4659      	mov	r1, fp
 8001860:	018b      	lsls	r3, r1, #6
 8001862:	4651      	mov	r1, sl
 8001864:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001868:	4651      	mov	r1, sl
 800186a:	018a      	lsls	r2, r1, #6
 800186c:	4651      	mov	r1, sl
 800186e:	ebb2 0801 	subs.w	r8, r2, r1
 8001872:	4659      	mov	r1, fp
 8001874:	eb63 0901 	sbc.w	r9, r3, r1
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001884:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001888:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800188c:	4690      	mov	r8, r2
 800188e:	4699      	mov	r9, r3
 8001890:	4623      	mov	r3, r4
 8001892:	eb18 0303 	adds.w	r3, r8, r3
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	462b      	mov	r3, r5
 800189a:	eb49 0303 	adc.w	r3, r9, r3
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018ac:	4629      	mov	r1, r5
 80018ae:	024b      	lsls	r3, r1, #9
 80018b0:	4621      	mov	r1, r4
 80018b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018b6:	4621      	mov	r1, r4
 80018b8:	024a      	lsls	r2, r1, #9
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018c2:	2200      	movs	r2, #0
 80018c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80018c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80018c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018cc:	f7fe fd40 	bl	8000350 <__aeabi_uldivmod>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4613      	mov	r3, r2
 80018d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018da:	e065      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x420>
 80018dc:	40023800 	.word	0x40023800
 80018e0:	00f42400 	.word	0x00f42400
 80018e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e8:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	2200      	movs	r2, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	4611      	mov	r1, r2
 80018f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018f8:	653b      	str	r3, [r7, #80]	; 0x50
 80018fa:	2300      	movs	r3, #0
 80018fc:	657b      	str	r3, [r7, #84]	; 0x54
 80018fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001902:	4642      	mov	r2, r8
 8001904:	464b      	mov	r3, r9
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	0159      	lsls	r1, r3, #5
 8001910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001914:	0150      	lsls	r0, r2, #5
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4641      	mov	r1, r8
 800191c:	1a51      	subs	r1, r2, r1
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	4649      	mov	r1, r9
 8001922:	eb63 0301 	sbc.w	r3, r3, r1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001934:	4659      	mov	r1, fp
 8001936:	018b      	lsls	r3, r1, #6
 8001938:	4651      	mov	r1, sl
 800193a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193e:	4651      	mov	r1, sl
 8001940:	018a      	lsls	r2, r1, #6
 8001942:	4651      	mov	r1, sl
 8001944:	1a54      	subs	r4, r2, r1
 8001946:	4659      	mov	r1, fp
 8001948:	eb63 0501 	sbc.w	r5, r3, r1
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	00eb      	lsls	r3, r5, #3
 8001956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800195a:	00e2      	lsls	r2, r4, #3
 800195c:	4614      	mov	r4, r2
 800195e:	461d      	mov	r5, r3
 8001960:	4643      	mov	r3, r8
 8001962:	18e3      	adds	r3, r4, r3
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	464b      	mov	r3, r9
 8001968:	eb45 0303 	adc.w	r3, r5, r3
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800197a:	4629      	mov	r1, r5
 800197c:	028b      	lsls	r3, r1, #10
 800197e:	4621      	mov	r1, r4
 8001980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001984:	4621      	mov	r1, r4
 8001986:	028a      	lsls	r2, r1, #10
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001990:	2200      	movs	r2, #0
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48
 8001994:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001996:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800199a:	f7fe fcd9 	bl	8000350 <__aeabi_uldivmod>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4613      	mov	r3, r2
 80019a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	0f1b      	lsrs	r3, r3, #28
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80019b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019c6:	e003      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	37b8      	adds	r7, #184	; 0xb8
 80019d8:	46bd      	mov	sp, r7
 80019da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	00f42400 	.word	0x00f42400

080019e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e28d      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8083 	beq.w	8001b0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a08:	4b94      	ldr	r3, [pc, #592]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d019      	beq.n	8001a48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a14:	4b91      	ldr	r3, [pc, #580]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a20:	4b8e      	ldr	r3, [pc, #568]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a2c:	d00c      	beq.n	8001a48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2e:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	d112      	bne.n	8001a60 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3a:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a46:	d10b      	bne.n	8001a60 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a48:	4b84      	ldr	r3, [pc, #528]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d05b      	beq.n	8001b0c <HAL_RCC_OscConfig+0x124>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d157      	bne.n	8001b0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e25a      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a68:	d106      	bne.n	8001a78 <HAL_RCC_OscConfig+0x90>
 8001a6a:	4b7c      	ldr	r3, [pc, #496]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7b      	ldr	r2, [pc, #492]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e01d      	b.n	8001ab4 <HAL_RCC_OscConfig+0xcc>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0xb4>
 8001a82:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a75      	ldr	r2, [pc, #468]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a72      	ldr	r2, [pc, #456]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0xcc>
 8001a9c:	4b6f      	ldr	r3, [pc, #444]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a6e      	ldr	r2, [pc, #440]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b6c      	ldr	r3, [pc, #432]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6b      	ldr	r2, [pc, #428]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff f940 	bl	8000d40 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff f93c 	bl	8000d40 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e21f      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b61      	ldr	r3, [pc, #388]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xdc>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f92c 	bl	8000d40 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff f928 	bl	8000d40 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e20b      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x104>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d06f      	beq.n	8001bfa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b1a:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d017      	beq.n	8001b56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b26:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d105      	bne.n	8001b3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b32:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d11c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b4a:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d116      	bne.n	8001b84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <HAL_RCC_OscConfig+0x186>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e1d3      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4937      	ldr	r1, [pc, #220]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b82:	e03a      	b.n	8001bfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d020      	beq.n	8001bce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b8c:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_RCC_OscConfig+0x278>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff f8d5 	bl	8000d40 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff f8d1 	bl	8000d40 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e1b4      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4925      	ldr	r1, [pc, #148]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
 8001bcc:	e015      	b.n	8001bfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_RCC_OscConfig+0x278>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f8b4 	bl	8000d40 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bdc:	f7ff f8b0 	bl	8000d40 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e193      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d036      	beq.n	8001c74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d016      	beq.n	8001c3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_RCC_OscConfig+0x27c>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff f894 	bl	8000d40 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7ff f890 	bl	8000d40 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e173      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x234>
 8001c3a:	e01b      	b.n	8001c74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_OscConfig+0x27c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c42:	f7ff f87d 	bl	8000d40 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	e00e      	b.n	8001c68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4a:	f7ff f879 	bl	8000d40 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d907      	bls.n	8001c68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e15c      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	42470000 	.word	0x42470000
 8001c64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	4b8a      	ldr	r3, [pc, #552]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1ea      	bne.n	8001c4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8097 	beq.w	8001db0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c86:	4b83      	ldr	r3, [pc, #524]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b7f      	ldr	r3, [pc, #508]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a7e      	ldr	r2, [pc, #504]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b7c      	ldr	r3, [pc, #496]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b79      	ldr	r3, [pc, #484]	; (8001e98 <HAL_RCC_OscConfig+0x4b0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d118      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cbe:	4b76      	ldr	r3, [pc, #472]	; (8001e98 <HAL_RCC_OscConfig+0x4b0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a75      	ldr	r2, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x4b0>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cca:	f7ff f839 	bl	8000d40 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd2:	f7ff f835 	bl	8000d40 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e118      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	4b6c      	ldr	r3, [pc, #432]	; (8001e98 <HAL_RCC_OscConfig+0x4b0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCC_OscConfig+0x31e>
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6713      	str	r3, [r2, #112]	; 0x70
 8001d04:	e01c      	b.n	8001d40 <HAL_RCC_OscConfig+0x358>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x340>
 8001d0e:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d12:	4a60      	ldr	r2, [pc, #384]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1a:	4b5e      	ldr	r3, [pc, #376]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a5d      	ldr	r2, [pc, #372]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0x358>
 8001d28:	4b5a      	ldr	r3, [pc, #360]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a59      	ldr	r2, [pc, #356]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
 8001d34:	4b57      	ldr	r3, [pc, #348]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	4a56      	ldr	r2, [pc, #344]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d3a:	f023 0304 	bic.w	r3, r3, #4
 8001d3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d015      	beq.n	8001d74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7fe fffa 	bl	8000d40 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d50:	f7fe fff6 	bl	8000d40 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e0d7      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d66:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0ee      	beq.n	8001d50 <HAL_RCC_OscConfig+0x368>
 8001d72:	e014      	b.n	8001d9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7fe ffe4 	bl	8000d40 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7c:	f7fe ffe0 	bl	8000d40 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0c1      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d92:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ee      	bne.n	8001d7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	4a3a      	ldr	r2, [pc, #232]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80ad 	beq.w	8001f14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dba:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d060      	beq.n	8001e88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d145      	bne.n	8001e5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dce:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <HAL_RCC_OscConfig+0x4b4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7fe ffb4 	bl	8000d40 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7fe ffb0 	bl	8000d40 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e093      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	3b01      	subs	r3, #1
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	061b      	lsls	r3, r3, #24
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	071b      	lsls	r3, r3, #28
 8001e26:	491b      	ldr	r1, [pc, #108]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_RCC_OscConfig+0x4b4>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e32:	f7fe ff85 	bl	8000d40 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7fe ff81 	bl	8000d40 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e064      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x452>
 8001e58:	e05c      	b.n	8001f14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_RCC_OscConfig+0x4b4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe ff6e 	bl	8000d40 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e68:	f7fe ff6a 	bl	8000d40 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e04d      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x480>
 8001e86:	e045      	b.n	8001f14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e040      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <HAL_RCC_OscConfig+0x538>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d030      	beq.n	8001f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d129      	bne.n	8001f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d122      	bne.n	8001f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ed6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d119      	bne.n	8001f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d10f      	bne.n	8001f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e041      	b.n	8001fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f839 	bl	8001fc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f000 f9d8 	bl	8002318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d001      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e04e      	b.n	800208e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a23      	ldr	r2, [pc, #140]	; (800209c <HAL_TIM_Base_Start_IT+0xc4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d022      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d01d      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d018      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00e      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <HAL_TIM_Base_Start_IT+0xd4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d009      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d111      	bne.n	800207c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b06      	cmp	r3, #6
 8002068:	d010      	beq.n	800208c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207a:	e007      	b.n	800208c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800
 80020a8:	40000c00 	.word	0x40000c00
 80020ac:	40010400 	.word	0x40010400
 80020b0:	40014000 	.word	0x40014000
 80020b4:	40001800 	.word	0x40001800

080020b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d122      	bne.n	8002114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d11b      	bne.n	8002114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0202 	mvn.w	r2, #2
 80020e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8ee 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8e0 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f8f1 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b04      	cmp	r3, #4
 8002120:	d122      	bne.n	8002168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b04      	cmp	r3, #4
 800212e:	d11b      	bne.n	8002168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0204 	mvn.w	r2, #4
 8002138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8c4 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f8b6 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f8c7 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b08      	cmp	r3, #8
 8002174:	d122      	bne.n	80021bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b08      	cmp	r3, #8
 8002182:	d11b      	bne.n	80021bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0208 	mvn.w	r2, #8
 800218c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2204      	movs	r2, #4
 8002192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f89a 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 80021a8:	e005      	b.n	80021b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f88c 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f89d 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d122      	bne.n	8002210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d11b      	bne.n	8002210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0210 	mvn.w	r2, #16
 80021e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2208      	movs	r2, #8
 80021e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f870 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 80021fc:	e005      	b.n	800220a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f862 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f873 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10e      	bne.n	800223c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d107      	bne.n	800223c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0201 	mvn.w	r2, #1
 8002234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fbac 	bl	8000994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	2b80      	cmp	r3, #128	; 0x80
 8002248:	d10e      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d107      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f902 	bl	800246c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002272:	2b40      	cmp	r3, #64	; 0x40
 8002274:	d10e      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002280:	2b40      	cmp	r3, #64	; 0x40
 8002282:	d107      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f838 	bl	8002304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d10e      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d107      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0220 	mvn.w	r2, #32
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8cc 	bl	8002458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a40      	ldr	r2, [pc, #256]	; (800242c <TIM_Base_SetConfig+0x114>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d00f      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a3d      	ldr	r2, [pc, #244]	; (8002430 <TIM_Base_SetConfig+0x118>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00b      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a3c      	ldr	r2, [pc, #240]	; (8002434 <TIM_Base_SetConfig+0x11c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <TIM_Base_SetConfig+0x120>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3a      	ldr	r2, [pc, #232]	; (800243c <TIM_Base_SetConfig+0x124>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d108      	bne.n	800236a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a2f      	ldr	r2, [pc, #188]	; (800242c <TIM_Base_SetConfig+0x114>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d02b      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002378:	d027      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a2c      	ldr	r2, [pc, #176]	; (8002430 <TIM_Base_SetConfig+0x118>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d023      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a2b      	ldr	r2, [pc, #172]	; (8002434 <TIM_Base_SetConfig+0x11c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01f      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <TIM_Base_SetConfig+0x120>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01b      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a29      	ldr	r2, [pc, #164]	; (800243c <TIM_Base_SetConfig+0x124>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d017      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a28      	ldr	r2, [pc, #160]	; (8002440 <TIM_Base_SetConfig+0x128>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a27      	ldr	r2, [pc, #156]	; (8002444 <TIM_Base_SetConfig+0x12c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00f      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a26      	ldr	r2, [pc, #152]	; (8002448 <TIM_Base_SetConfig+0x130>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00b      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a25      	ldr	r2, [pc, #148]	; (800244c <TIM_Base_SetConfig+0x134>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d007      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a24      	ldr	r2, [pc, #144]	; (8002450 <TIM_Base_SetConfig+0x138>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d003      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a23      	ldr	r2, [pc, #140]	; (8002454 <TIM_Base_SetConfig+0x13c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d108      	bne.n	80023dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <TIM_Base_SetConfig+0x114>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <TIM_Base_SetConfig+0xf8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0c      	ldr	r2, [pc, #48]	; (800243c <TIM_Base_SetConfig+0x124>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d103      	bne.n	8002418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	615a      	str	r2, [r3, #20]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40010000 	.word	0x40010000
 8002430:	40000400 	.word	0x40000400
 8002434:	40000800 	.word	0x40000800
 8002438:	40000c00 	.word	0x40000c00
 800243c:	40010400 	.word	0x40010400
 8002440:	40014000 	.word	0x40014000
 8002444:	40014400 	.word	0x40014400
 8002448:	40014800 	.word	0x40014800
 800244c:	40001800 	.word	0x40001800
 8002450:	40001c00 	.word	0x40001c00
 8002454:	40002000 	.word	0x40002000

08002458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f103 0208 	add.w	r2, r3, #8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f103 0208 	add.w	r2, r3, #8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f103 0208 	add.w	r2, r3, #8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024da:	b480      	push	{r7}
 80024dc:	b085      	sub	sp, #20
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	601a      	str	r2, [r3, #0]
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d103      	bne.n	8002542 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e00c      	b.n	800255c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3308      	adds	r3, #8
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	e002      	b.n	8002550 <vListInsert+0x2e>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	429a      	cmp	r2, r3
 800255a:	d2f6      	bcs.n	800254a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	601a      	str	r2, [r3, #0]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6852      	ldr	r2, [r2, #4]
 80025b4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d103      	bne.n	80025c8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1e5a      	subs	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800260e:	bf00      	nop
 8002610:	e7fe      	b.n	8002610 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002612:	f001 fe87 	bl	8004324 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	68f9      	ldr	r1, [r7, #12]
 8002620:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	441a      	add	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	3b01      	subs	r3, #1
 8002644:	68f9      	ldr	r1, [r7, #12]
 8002646:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	441a      	add	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	22ff      	movs	r2, #255	; 0xff
 800265e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d114      	bne.n	8002692 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01a      	beq.n	80026a6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3310      	adds	r3, #16
 8002674:	4618      	mov	r0, r3
 8002676:	f001 f8e7 	bl	8003848 <xTaskRemoveFromEventList>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d012      	beq.n	80026a6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <xQueueGenericReset+0xcc>)
 8002682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	e009      	b.n	80026a6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3310      	adds	r3, #16
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fef2 	bl	8002480 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3324      	adds	r3, #36	; 0x24
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff feed 	bl	8002480 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80026a6:	f001 fe6d 	bl	8004384 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	e000ed04 	.word	0xe000ed04

080026b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08c      	sub	sp, #48	; 0x30
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	4613      	mov	r3, r2
 80026c4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	61bb      	str	r3, [r7, #24]
    }
 80026de:	bf00      	nop
 80026e0:	e7fe      	b.n	80026e0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d006      	beq.n	8002700 <xQueueGenericCreate+0x48>
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d101      	bne.n	8002704 <xQueueGenericCreate+0x4c>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <xQueueGenericCreate+0x4e>
 8002704:	2300      	movs	r3, #0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <xQueueGenericCreate+0x68>
        __asm volatile
 800270a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270e:	f383 8811 	msr	BASEPRI, r3
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	617b      	str	r3, [r7, #20]
    }
 800271c:	bf00      	nop
 800271e:	e7fe      	b.n	800271e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002726:	d90a      	bls.n	800273e <xQueueGenericCreate+0x86>
        __asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	613b      	str	r3, [r7, #16]
    }
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	3350      	adds	r3, #80	; 0x50
 8002742:	4618      	mov	r0, r3
 8002744:	f001 feda 	bl	80044fc <pvPortMalloc>
 8002748:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00d      	beq.n	800276c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	3350      	adds	r3, #80	; 0x50
 8002758:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800275a:	79fa      	ldrb	r2, [r7, #7]
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f805 	bl	8002776 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800276c:	6a3b      	ldr	r3, [r7, #32]
    }
 800276e:	4618      	mov	r0, r3
 8002770:	3728      	adds	r7, #40	; 0x28
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e002      	b.n	8002798 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027a4:	2101      	movs	r1, #1
 80027a6:	69b8      	ldr	r0, [r7, #24]
 80027a8:	f7ff ff1e 	bl	80025e8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	68f9      	ldr	r1, [r7, #12]
 80027ba:	2073      	movs	r0, #115	; 0x73
 80027bc:	f002 fe78 	bl	80054b0 <SEGGER_SYSVIEW_RecordU32x3>
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08e      	sub	sp, #56	; 0x38
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <xQueueGenericSend+0x32>
        __asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	623b      	str	r3, [r7, #32]
    }
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d103      	bne.n	8002808 <xQueueGenericSend+0x40>
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <xQueueGenericSend+0x44>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <xQueueGenericSend+0x46>
 800280c:	2300      	movs	r3, #0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <xQueueGenericSend+0x60>
        __asm volatile
 8002812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002816:	f383 8811 	msr	BASEPRI, r3
 800281a:	f3bf 8f6f 	isb	sy
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	61fb      	str	r3, [r7, #28]
    }
 8002824:	bf00      	nop
 8002826:	e7fe      	b.n	8002826 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d103      	bne.n	8002836 <xQueueGenericSend+0x6e>
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <xQueueGenericSend+0x72>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <xQueueGenericSend+0x74>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <xQueueGenericSend+0x8e>
        __asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	61bb      	str	r3, [r7, #24]
    }
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002856:	f001 fd65 	bl	8004324 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <xQueueGenericSend+0xa4>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d136      	bne.n	80028da <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	4618      	mov	r0, r3
 8002870:	f003 fb88 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	460b      	mov	r3, r1
 800287e:	4601      	mov	r1, r0
 8002880:	205a      	movs	r0, #90	; 0x5a
 8002882:	f002 fe8b 	bl	800559c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800288c:	f000 fade 	bl	8002e4c <prvCopyDataToQueue>
 8002890:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	2b00      	cmp	r3, #0
 8002898:	d010      	beq.n	80028bc <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	3324      	adds	r3, #36	; 0x24
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 ffd2 	bl	8003848 <xTaskRemoveFromEventList>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d013      	beq.n	80028d2 <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80028aa:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <xQueueGenericSend+0x218>)
 80028ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	e00a      	b.n	80028d2 <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80028c2:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <xQueueGenericSend+0x218>)
 80028c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80028d2:	f001 fd57 	bl	8004384 <vPortExitCritical>
                return pdPASS;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e07d      	b.n	80029d6 <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d110      	bne.n	8002902 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028e0:	f001 fd50 	bl	8004384 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 fb4c 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	460b      	mov	r3, r1
 80028f6:	4601      	mov	r1, r0
 80028f8:	205a      	movs	r0, #90	; 0x5a
 80028fa:	f002 fe4f 	bl	800559c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	e069      	b.n	80029d6 <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	4618      	mov	r0, r3
 800290e:	f001 f801 	bl	8003914 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002912:	2301      	movs	r3, #1
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002916:	f001 fd35 	bl	8004384 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800291a:	f000 fd9d 	bl	8003458 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800291e:	f001 fd01 	bl	8004324 <vPortEnterCritical>
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002928:	b25b      	sxtb	r3, r3
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292e:	d103      	bne.n	8002938 <xQueueGenericSend+0x170>
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800293e:	b25b      	sxtb	r3, r3
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d103      	bne.n	800294e <xQueueGenericSend+0x186>
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800294e:	f001 fd19 	bl	8004384 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002952:	1d3a      	adds	r2, r7, #4
 8002954:	f107 0310 	add.w	r3, r7, #16
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fff0 	bl	8003940 <xTaskCheckForTimeOut>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d124      	bne.n	80029b0 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002968:	f000 fb68 	bl	800303c <prvIsQueueFull>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d018      	beq.n	80029a4 <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	3310      	adds	r3, #16
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f000 ff40 	bl	8003800 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002982:	f000 faf3 	bl	8002f6c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002986:	f000 fd75 	bl	8003474 <xTaskResumeAll>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	f47f af62 	bne.w	8002856 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <xQueueGenericSend+0x218>)
 8002994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	e758      	b.n	8002856 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80029a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029a6:	f000 fae1 	bl	8002f6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029aa:	f000 fd63 	bl	8003474 <xTaskResumeAll>
 80029ae:	e752      	b.n	8002856 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80029b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b2:	f000 fadb 	bl	8002f6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029b6:	f000 fd5d 	bl	8003474 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 fae1 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	460b      	mov	r3, r1
 80029cc:	4601      	mov	r1, r0
 80029ce:	205a      	movs	r0, #90	; 0x5a
 80029d0:	f002 fde4 	bl	800559c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80029d4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3730      	adds	r7, #48	; 0x30
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000ed04 	.word	0xe000ed04

080029e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b08f      	sub	sp, #60	; 0x3c
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <xQueueReceive+0x30>
        __asm volatile
 80029fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a02:	f383 8811 	msr	BASEPRI, r3
 8002a06:	f3bf 8f6f 	isb	sy
 8002a0a:	f3bf 8f4f 	dsb	sy
 8002a0e:	623b      	str	r3, [r7, #32]
    }
 8002a10:	bf00      	nop
 8002a12:	e7fe      	b.n	8002a12 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <xQueueReceive+0x3e>
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <xQueueReceive+0x42>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <xQueueReceive+0x44>
 8002a26:	2300      	movs	r3, #0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <xQueueReceive+0x5e>
        __asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	61fb      	str	r3, [r7, #28]
    }
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a42:	f001 fc6f 	bl	8004324 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d02f      	beq.n	8002ab2 <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a56:	f000 fa63 	bl	8002f20 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 fa91 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002a62:	4604      	mov	r4, r0
 8002a64:	2000      	movs	r0, #0
 8002a66:	f003 fa8d 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2101      	movs	r1, #1
 8002a70:	9100      	str	r1, [sp, #0]
 8002a72:	4621      	mov	r1, r4
 8002a74:	205c      	movs	r0, #92	; 0x5c
 8002a76:	f002 fd91 	bl	800559c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	1e5a      	subs	r2, r3, #1
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00f      	beq.n	8002aaa <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	3310      	adds	r3, #16
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 feda 	bl	8003848 <xTaskRemoveFromEventList>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <xQueueReceive+0xc6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a9a:	4b4d      	ldr	r3, [pc, #308]	; (8002bd0 <xQueueReceive+0x1ec>)
 8002a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002aaa:	f001 fc6b 	bl	8004384 <vPortExitCritical>
                return pdPASS;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e08a      	b.n	8002bc8 <xQueueReceive+0x1e4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d113      	bne.n	8002ae0 <xQueueReceive+0xfc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ab8:	f001 fc64 	bl	8004384 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 fa60 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f003 fa5c 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	9100      	str	r1, [sp, #0]
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	205c      	movs	r0, #92	; 0x5c
 8002ad8:	f002 fd60 	bl	800559c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002adc:	2300      	movs	r3, #0
 8002ade:	e073      	b.n	8002bc8 <xQueueReceive+0x1e4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <xQueueReceive+0x110>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ae6:	f107 0314 	add.w	r3, r7, #20
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 ff12 	bl	8003914 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002af4:	f001 fc46 	bl	8004384 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002af8:	f000 fcae 	bl	8003458 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002afc:	f001 fc12 	bl	8004324 <vPortEnterCritical>
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d103      	bne.n	8002b16 <xQueueReceive+0x132>
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b1c:	b25b      	sxtb	r3, r3
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b22:	d103      	bne.n	8002b2c <xQueueReceive+0x148>
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b2c:	f001 fc2a 	bl	8004384 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b30:	1d3a      	adds	r2, r7, #4
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 ff01 	bl	8003940 <xTaskCheckForTimeOut>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d124      	bne.n	8002b8e <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b46:	f000 fa63 	bl	8003010 <prvIsQueueEmpty>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d018      	beq.n	8002b82 <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	3324      	adds	r3, #36	; 0x24
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fe51 	bl	8003800 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b60:	f000 fa04 	bl	8002f6c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b64:	f000 fc86 	bl	8003474 <xTaskResumeAll>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f47f af69 	bne.w	8002a42 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <xQueueReceive+0x1ec>)
 8002b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	e75f      	b.n	8002a42 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b84:	f000 f9f2 	bl	8002f6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b88:	f000 fc74 	bl	8003474 <xTaskResumeAll>
 8002b8c:	e759      	b.n	8002a42 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b90:	f000 f9ec 	bl	8002f6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b94:	f000 fc6e 	bl	8003474 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b9a:	f000 fa39 	bl	8003010 <prvIsQueueEmpty>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f43f af4e 	beq.w	8002a42 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 f9eb 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002bae:	4604      	mov	r4, r0
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f003 f9e7 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2101      	movs	r1, #1
 8002bbc:	9100      	str	r1, [sp, #0]
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	205c      	movs	r0, #92	; 0x5c
 8002bc2:	f002 fceb 	bl	800559c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002bc6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3734      	adds	r7, #52	; 0x34
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd90      	pop	{r4, r7, pc}
 8002bd0:	e000ed04 	.word	0xe000ed04

08002bd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b08f      	sub	sp, #60	; 0x3c
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	61bb      	str	r3, [r7, #24]
    }
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	617b      	str	r3, [r7, #20]
    }
 8002c20:	bf00      	nop
 8002c22:	e7fe      	b.n	8002c22 <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c24:	f001 fb7e 	bl	8004324 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d034      	beq.n	8002c9e <xQueueSemaphoreTake+0xca>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 f9a4 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f003 f9a0 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002c44:	4602      	mov	r2, r0
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	9100      	str	r1, [sp, #0]
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	205c      	movs	r0, #92	; 0x5c
 8002c50:	f002 fca4 	bl	800559c <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	1e5a      	subs	r2, r3, #1
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <xQueueSemaphoreTake+0x9a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002c64:	f001 f922 	bl	8003eac <pvTaskIncrementMutexHeldCount>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00f      	beq.n	8002c96 <xQueueSemaphoreTake+0xc2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	3310      	adds	r3, #16
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fde4 	bl	8003848 <xTaskRemoveFromEventList>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <xQueueSemaphoreTake+0xc2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c86:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <xQueueSemaphoreTake+0x244>)
 8002c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c96:	f001 fb75 	bl	8004384 <vPortExitCritical>
                return pdPASS;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0b7      	b.n	8002e0e <xQueueSemaphoreTake+0x23a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d121      	bne.n	8002ce8 <xQueueSemaphoreTake+0x114>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <xQueueSemaphoreTake+0xec>
        __asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	613b      	str	r3, [r7, #16]
    }
 8002cbc:	bf00      	nop
 8002cbe:	e7fe      	b.n	8002cbe <xQueueSemaphoreTake+0xea>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002cc0:	f001 fb60 	bl	8004384 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f003 f95c 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002ccc:	4604      	mov	r4, r0
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f003 f958 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	9100      	str	r1, [sp, #0]
 8002cdc:	4621      	mov	r1, r4
 8002cde:	205c      	movs	r0, #92	; 0x5c
 8002ce0:	f002 fc5c 	bl	800559c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	e092      	b.n	8002e0e <xQueueSemaphoreTake+0x23a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <xQueueSemaphoreTake+0x128>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fe0e 	bl	8003914 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002cfc:	f001 fb42 	bl	8004384 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002d00:	f000 fbaa 	bl	8003458 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002d04:	f001 fb0e 	bl	8004324 <vPortEnterCritical>
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d0e:	b25b      	sxtb	r3, r3
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d103      	bne.n	8002d1e <xQueueSemaphoreTake+0x14a>
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2a:	d103      	bne.n	8002d34 <xQueueSemaphoreTake+0x160>
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d34:	f001 fb26 	bl	8004384 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d38:	463a      	mov	r2, r7
 8002d3a:	f107 0308 	add.w	r3, r7, #8
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fdfd 	bl	8003940 <xTaskCheckForTimeOut>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d132      	bne.n	8002db2 <xQueueSemaphoreTake+0x1de>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d4e:	f000 f95f 	bl	8003010 <prvIsQueueEmpty>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d026      	beq.n	8002da6 <xQueueSemaphoreTake+0x1d2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <xQueueSemaphoreTake+0x1a0>
                        {
                            taskENTER_CRITICAL();
 8002d60:	f001 fae0 	bl	8004324 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 ff0d 	bl	8003b88 <xTaskPriorityInherit>
 8002d6e:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 8002d70:	f001 fb08 	bl	8004384 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	3324      	adds	r3, #36	; 0x24
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fd3f 	bl	8003800 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d84:	f000 f8f2 	bl	8002f6c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d88:	f000 fb74 	bl	8003474 <xTaskResumeAll>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f47f af48 	bne.w	8002c24 <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <xQueueSemaphoreTake+0x244>)
 8002d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	e73e      	b.n	8002c24 <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002da6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002da8:	f000 f8e0 	bl	8002f6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002dac:	f000 fb62 	bl	8003474 <xTaskResumeAll>
 8002db0:	e738      	b.n	8002c24 <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002db4:	f000 f8da 	bl	8002f6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002db8:	f000 fb5c 	bl	8003474 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dbe:	f000 f927 	bl	8003010 <prvIsQueueEmpty>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f43f af2d 	beq.w	8002c24 <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <xQueueSemaphoreTake+0x218>
                        {
                            taskENTER_CRITICAL();
 8002dd0:	f001 faa8 	bl	8004324 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dd6:	f000 f821 	bl	8002e1c <prvGetDisinheritPriorityAfterTimeout>
 8002dda:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	69f9      	ldr	r1, [r7, #28]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 ffca 	bl	8003d7c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8002de8:	f001 facc 	bl	8004384 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 f8c8 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002df4:	4604      	mov	r4, r0
 8002df6:	2000      	movs	r0, #0
 8002df8:	f003 f8c4 	bl	8005f84 <SEGGER_SYSVIEW_ShrinkId>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2101      	movs	r1, #1
 8002e02:	9100      	str	r1, [sp, #0]
 8002e04:	4621      	mov	r1, r4
 8002e06:	205c      	movs	r0, #92	; 0x5c
 8002e08:	f002 fbc8 	bl	800559c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002e0c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3734      	adds	r7, #52	; 0x34
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd90      	pop	{r4, r7, pc}
 8002e16:	bf00      	nop
 8002e18:	e000ed04 	.word	0xe000ed04

08002e1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d006      	beq.n	8002e3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f1c3 0305 	rsb	r3, r3, #5
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	e001      	b.n	8002e3e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    }
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d14d      	bne.n	8002f0e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 ff00 	bl	8003c7c <xTaskPriorityDisinherit>
 8002e7c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	e043      	b.n	8002f0e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d119      	bne.n	8002ec0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6858      	ldr	r0, [r3, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	461a      	mov	r2, r3
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	f003 fa08 	bl	80062ac <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	441a      	add	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d32b      	bcc.n	8002f0e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	e026      	b.n	8002f0e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68d8      	ldr	r0, [r3, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	f003 f9ee 	bl	80062ac <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	425b      	negs	r3, r3
 8002eda:	441a      	add	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d207      	bcs.n	8002efc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	425b      	negs	r3, r3
 8002ef6:	441a      	add	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d105      	bne.n	8002f0e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002f16:	697b      	ldr	r3, [r7, #20]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d018      	beq.n	8002f64 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	441a      	add	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d303      	bcc.n	8002f54 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68d9      	ldr	r1, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6838      	ldr	r0, [r7, #0]
 8002f60:	f003 f9a4 	bl	80062ac <memcpy>
    }
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002f74:	f001 f9d6 	bl	8004324 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f7e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f80:	e011      	b.n	8002fa6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d012      	beq.n	8002fb0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3324      	adds	r3, #36	; 0x24
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fc5a 	bl	8003848 <xTaskRemoveFromEventList>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002f9a:	f000 fd37 	bl	8003a0c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	dce9      	bgt.n	8002f82 <prvUnlockQueue+0x16>
 8002fae:	e000      	b.n	8002fb2 <prvUnlockQueue+0x46>
                        break;
 8002fb0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	22ff      	movs	r2, #255	; 0xff
 8002fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002fba:	f001 f9e3 	bl	8004384 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002fbe:	f001 f9b1 	bl	8004324 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fc8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fca:	e011      	b.n	8002ff0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d012      	beq.n	8002ffa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3310      	adds	r3, #16
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fc35 	bl	8003848 <xTaskRemoveFromEventList>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002fe4:	f000 fd12 	bl	8003a0c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002fe8:	7bbb      	ldrb	r3, [r7, #14]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	dce9      	bgt.n	8002fcc <prvUnlockQueue+0x60>
 8002ff8:	e000      	b.n	8002ffc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ffa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	22ff      	movs	r2, #255	; 0xff
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003004:	f001 f9be 	bl	8004384 <vPortExitCritical>
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003018:	f001 f984 	bl	8004324 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003024:	2301      	movs	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e001      	b.n	800302e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800302e:	f001 f9a9 	bl	8004384 <vPortExitCritical>

    return xReturn;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003044:	f001 f96e 	bl	8004324 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	429a      	cmp	r2, r3
 8003052:	d102      	bne.n	800305a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003054:	2301      	movs	r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	e001      	b.n	800305e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800305e:	f001 f991 	bl	8004384 <vPortExitCritical>

    return xReturn;
 8003062:	68fb      	ldr	r3, [r7, #12]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800306c:	b580      	push	{r7, lr}
 800306e:	b08c      	sub	sp, #48	; 0x30
 8003070:	af04      	add	r7, sp, #16
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4618      	mov	r0, r3
 8003080:	f001 fa3c 	bl	80044fc <pvPortMalloc>
 8003084:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00e      	beq.n	80030aa <xTaskCreate+0x3e>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800308c:	2058      	movs	r0, #88	; 0x58
 800308e:	f001 fa35 	bl	80044fc <pvPortMalloc>
 8003092:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <xTaskCreate+0x36>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
 80030a0:	e005      	b.n	80030ae <xTaskCreate+0x42>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f001 fb0a 	bl	80046bc <vPortFree>
 80030a8:	e001      	b.n	80030ae <xTaskCreate+0x42>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d013      	beq.n	80030dc <xTaskCreate+0x70>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030b4:	2300      	movs	r3, #0
 80030b6:	9303      	str	r3, [sp, #12]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	9302      	str	r3, [sp, #8]
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f80e 	bl	80030ec <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80030d0:	69f8      	ldr	r0, [r7, #28]
 80030d2:	f000 f8a1 	bl	8003218 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80030d6:	2301      	movs	r3, #1
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	e002      	b.n	80030e2 <xTaskCreate+0x76>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030dc:	f04f 33ff 	mov.w	r3, #4294967295
 80030e0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80030e2:	69bb      	ldr	r3, [r7, #24]
    }
 80030e4:	4618      	mov	r0, r3
 80030e6:	3720      	adds	r7, #32
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	461a      	mov	r2, r3
 8003104:	21a5      	movs	r1, #165	; 0xa5
 8003106:	f003 f8df 	bl	80062c8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003114:	3b01      	subs	r3, #1
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f023 0307 	bic.w	r3, r3, #7
 8003122:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <prvInitialiseNewTask+0x58>
        __asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	617b      	str	r3, [r7, #20]
    }
 8003140:	bf00      	nop
 8003142:	e7fe      	b.n	8003142 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01f      	beq.n	800318a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	e012      	b.n	8003176 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	7819      	ldrb	r1, [r3, #0]
 8003158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	4413      	add	r3, r2
 800315e:	3334      	adds	r3, #52	; 0x34
 8003160:	460a      	mov	r2, r1
 8003162:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	3301      	adds	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2b09      	cmp	r3, #9
 800317a:	d9e9      	bls.n	8003150 <prvInitialiseNewTask+0x64>
 800317c:	e000      	b.n	8003180 <prvInitialiseNewTask+0x94>
            {
                break;
 800317e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003188:	e003      	b.n	8003192 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	2b04      	cmp	r3, #4
 8003196:	d901      	bls.n	800319c <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003198:	2304      	movs	r3, #4
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031a6:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	2200      	movs	r2, #0
 80031ac:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	3304      	adds	r3, #4
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff f984 	bl	80024c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	3318      	adds	r3, #24
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff f97f 	bl	80024c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	f1c3 0205 	rsb	r2, r3, #5
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	3350      	adds	r3, #80	; 0x50
 80031dc:	2204      	movs	r2, #4
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 f871 	bl	80062c8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	3354      	adds	r3, #84	; 0x54
 80031ea:	2201      	movs	r2, #1
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 f86a 	bl	80062c8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	68f9      	ldr	r1, [r7, #12]
 80031f8:	69b8      	ldr	r0, [r7, #24]
 80031fa:	f000 fee3 	bl	8003fc4 <pxPortInitialiseStack>
 80031fe:	4602      	mov	r2, r0
 8003200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003202:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003210:	bf00      	nop
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003218:	b5b0      	push	{r4, r5, r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af02      	add	r7, sp, #8
 800321e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003220:	f001 f880 	bl	8004324 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003224:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <prvAddNewTaskToReadyList+0xfc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3301      	adds	r3, #1
 800322a:	4a3a      	ldr	r2, [pc, #232]	; (8003314 <prvAddNewTaskToReadyList+0xfc>)
 800322c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800322e:	4b3a      	ldr	r3, [pc, #232]	; (8003318 <prvAddNewTaskToReadyList+0x100>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003236:	4a38      	ldr	r2, [pc, #224]	; (8003318 <prvAddNewTaskToReadyList+0x100>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800323c:	4b35      	ldr	r3, [pc, #212]	; (8003314 <prvAddNewTaskToReadyList+0xfc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d110      	bne.n	8003266 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003244:	f000 fc06 	bl	8003a54 <prvInitialiseTaskLists>
 8003248:	e00d      	b.n	8003266 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800324a:	4b34      	ldr	r3, [pc, #208]	; (800331c <prvAddNewTaskToReadyList+0x104>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003252:	4b31      	ldr	r3, [pc, #196]	; (8003318 <prvAddNewTaskToReadyList+0x100>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	429a      	cmp	r2, r3
 800325e:	d802      	bhi.n	8003266 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003260:	4a2d      	ldr	r2, [pc, #180]	; (8003318 <prvAddNewTaskToReadyList+0x100>)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003266:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <prvAddNewTaskToReadyList+0x108>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3301      	adds	r3, #1
 800326c:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <prvAddNewTaskToReadyList+0x108>)
 800326e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <prvAddNewTaskToReadyList+0x108>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <prvAddNewTaskToReadyList+0x94>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4618      	mov	r0, r3
 8003282:	f002 fd59 	bl	8005d38 <SEGGER_SYSVIEW_OnTaskCreate>
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	461d      	mov	r5, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461c      	mov	r4, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	1ae3      	subs	r3, r4, r3
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	462b      	mov	r3, r5
 80032a8:	f001 fb26 	bl	80048f8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f002 fdc6 	bl	8005e40 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	2201      	movs	r2, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <prvAddNewTaskToReadyList+0x10c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	4a18      	ldr	r2, [pc, #96]	; (8003324 <prvAddNewTaskToReadyList+0x10c>)
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4a15      	ldr	r2, [pc, #84]	; (8003328 <prvAddNewTaskToReadyList+0x110>)
 80032d4:	441a      	add	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3304      	adds	r3, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f7ff f8fc 	bl	80024da <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80032e2:	f001 f84f 	bl	8004384 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <prvAddNewTaskToReadyList+0x104>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00e      	beq.n	800330c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <prvAddNewTaskToReadyList+0x100>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d207      	bcs.n	800330c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <prvAddNewTaskToReadyList+0x114>)
 80032fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bdb0      	pop	{r4, r5, r7, pc}
 8003314:	200001c4 	.word	0x200001c4
 8003318:	200000ec 	.word	0x200000ec
 800331c:	200001d0 	.word	0x200001d0
 8003320:	200001e0 	.word	0x200001e0
 8003324:	200001cc 	.word	0x200001cc
 8003328:	200000f0 	.word	0x200000f0
 800332c:	e000ed04 	.word	0xe000ed04

08003330 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d01b      	beq.n	800337a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003342:	4b15      	ldr	r3, [pc, #84]	; (8003398 <vTaskDelay+0x68>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <vTaskDelay+0x30>
        __asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	60bb      	str	r3, [r7, #8]
    }
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003360:	f000 f87a 	bl	8003458 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	2023      	movs	r0, #35	; 0x23
 8003368:	f002 f80c 	bl	8005384 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800336c:	2100      	movs	r1, #0
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fdb0 	bl	8003ed4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003374:	f000 f87e 	bl	8003474 <xTaskResumeAll>
 8003378:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d107      	bne.n	8003390 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <vTaskDelay+0x6c>)
 8003382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200001ec 	.word	0x200001ec
 800339c:	e000ed04 	.word	0xe000ed04

080033a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <vTaskStartScheduler+0x98>)
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	2300      	movs	r3, #0
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2300      	movs	r3, #0
 80033b0:	2282      	movs	r2, #130	; 0x82
 80033b2:	4922      	ldr	r1, [pc, #136]	; (800343c <vTaskStartScheduler+0x9c>)
 80033b4:	4822      	ldr	r0, [pc, #136]	; (8003440 <vTaskStartScheduler+0xa0>)
 80033b6:	f7ff fe59 	bl	800306c <xTaskCreate>
 80033ba:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d124      	bne.n	800340c <vTaskStartScheduler+0x6c>
        __asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	60bb      	str	r3, [r7, #8]
    }
 80033d4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <vTaskStartScheduler+0xa4>)
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80033de:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <vTaskStartScheduler+0xa8>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <vTaskStartScheduler+0xac>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80033ea:	4b19      	ldr	r3, [pc, #100]	; (8003450 <vTaskStartScheduler+0xb0>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b12      	ldr	r3, [pc, #72]	; (8003438 <vTaskStartScheduler+0x98>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d102      	bne.n	80033fc <vTaskStartScheduler+0x5c>
 80033f6:	f002 fc83 	bl	8005d00 <SEGGER_SYSVIEW_OnIdle>
 80033fa:	e004      	b.n	8003406 <vTaskStartScheduler+0x66>
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <vTaskStartScheduler+0xb0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f002 fcdb 	bl	8005dbc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003406:	f000 fe6d 	bl	80040e4 <xPortStartScheduler>
 800340a:	e00e      	b.n	800342a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d10a      	bne.n	800342a <vTaskStartScheduler+0x8a>
        __asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	607b      	str	r3, [r7, #4]
    }
 8003426:	bf00      	nop
 8003428:	e7fe      	b.n	8003428 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <vTaskStartScheduler+0xb4>)
 800342c:	681b      	ldr	r3, [r3, #0]
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200001e8 	.word	0x200001e8
 800343c:	0800735c 	.word	0x0800735c
 8003440:	08003a25 	.word	0x08003a25
 8003444:	200001e4 	.word	0x200001e4
 8003448:	200001d0 	.word	0x200001d0
 800344c:	200001c8 	.word	0x200001c8
 8003450:	200000ec 	.word	0x200000ec
 8003454:	2000000c 	.word	0x2000000c

08003458 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <vTaskSuspendAll+0x18>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	4a03      	ldr	r2, [pc, #12]	; (8003470 <vTaskSuspendAll+0x18>)
 8003464:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	200001ec 	.word	0x200001ec

08003474 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003482:	4b43      	ldr	r3, [pc, #268]	; (8003590 <xTaskResumeAll+0x11c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <xTaskResumeAll+0x2c>
        __asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	603b      	str	r3, [r7, #0]
    }
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80034a0:	f000 ff40 	bl	8004324 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80034a4:	4b3a      	ldr	r3, [pc, #232]	; (8003590 <xTaskResumeAll+0x11c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <xTaskResumeAll+0x11c>)
 80034ac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ae:	4b38      	ldr	r3, [pc, #224]	; (8003590 <xTaskResumeAll+0x11c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d165      	bne.n	8003582 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034b6:	4b37      	ldr	r3, [pc, #220]	; (8003594 <xTaskResumeAll+0x120>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d061      	beq.n	8003582 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034be:	e032      	b.n	8003526 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c0:	4b35      	ldr	r3, [pc, #212]	; (8003598 <xTaskResumeAll+0x124>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3318      	adds	r3, #24
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f861 	bl	8002594 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f85c 	bl	8002594 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4618      	mov	r0, r3
 80034e0:	f002 fcae 	bl	8005e40 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	2201      	movs	r2, #1
 80034ea:	409a      	lsls	r2, r3
 80034ec:	4b2b      	ldr	r3, [pc, #172]	; (800359c <xTaskResumeAll+0x128>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	4a2a      	ldr	r2, [pc, #168]	; (800359c <xTaskResumeAll+0x128>)
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4a27      	ldr	r2, [pc, #156]	; (80035a0 <xTaskResumeAll+0x12c>)
 8003504:	441a      	add	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	3304      	adds	r3, #4
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f7fe ffe4 	bl	80024da <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003516:	4b23      	ldr	r3, [pc, #140]	; (80035a4 <xTaskResumeAll+0x130>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	429a      	cmp	r2, r3
 800351e:	d302      	bcc.n	8003526 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003520:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <xTaskResumeAll+0x134>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003526:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <xTaskResumeAll+0x124>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1c8      	bne.n	80034c0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003534:	f000 fb0c 	bl	8003b50 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003538:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <xTaskResumeAll+0x138>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d010      	beq.n	8003566 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003544:	f000 f836 	bl	80035b4 <xTaskIncrementTick>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <xTaskResumeAll+0x134>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f1      	bne.n	8003544 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003560:	4b12      	ldr	r3, [pc, #72]	; (80035ac <xTaskResumeAll+0x138>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <xTaskResumeAll+0x134>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800356e:	2301      	movs	r3, #1
 8003570:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003572:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <xTaskResumeAll+0x13c>)
 8003574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003582:	f000 feff 	bl	8004384 <vPortExitCritical>

    return xAlreadyYielded;
 8003586:	68bb      	ldr	r3, [r7, #8]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200001ec 	.word	0x200001ec
 8003594:	200001c4 	.word	0x200001c4
 8003598:	20000184 	.word	0x20000184
 800359c:	200001cc 	.word	0x200001cc
 80035a0:	200000f0 	.word	0x200000f0
 80035a4:	200000ec 	.word	0x200000ec
 80035a8:	200001d8 	.word	0x200001d8
 80035ac:	200001d4 	.word	0x200001d4
 80035b0:	e000ed04 	.word	0xe000ed04

080035b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035be:	4b50      	ldr	r3, [pc, #320]	; (8003700 <xTaskIncrementTick+0x14c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 8092 	bne.w	80036ec <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035c8:	4b4e      	ldr	r3, [pc, #312]	; (8003704 <xTaskIncrementTick+0x150>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80035d0:	4a4c      	ldr	r2, [pc, #304]	; (8003704 <xTaskIncrementTick+0x150>)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d120      	bne.n	800361e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80035dc:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <xTaskIncrementTick+0x154>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <xTaskIncrementTick+0x48>
        __asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	603b      	str	r3, [r7, #0]
    }
 80035f8:	bf00      	nop
 80035fa:	e7fe      	b.n	80035fa <xTaskIncrementTick+0x46>
 80035fc:	4b42      	ldr	r3, [pc, #264]	; (8003708 <xTaskIncrementTick+0x154>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	4b42      	ldr	r3, [pc, #264]	; (800370c <xTaskIncrementTick+0x158>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a40      	ldr	r2, [pc, #256]	; (8003708 <xTaskIncrementTick+0x154>)
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4a40      	ldr	r2, [pc, #256]	; (800370c <xTaskIncrementTick+0x158>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <xTaskIncrementTick+0x15c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	4a3e      	ldr	r2, [pc, #248]	; (8003710 <xTaskIncrementTick+0x15c>)
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	f000 fa99 	bl	8003b50 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800361e:	4b3d      	ldr	r3, [pc, #244]	; (8003714 <xTaskIncrementTick+0x160>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	429a      	cmp	r2, r3
 8003626:	d34c      	bcc.n	80036c2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003628:	4b37      	ldr	r3, [pc, #220]	; (8003708 <xTaskIncrementTick+0x154>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003632:	4b38      	ldr	r3, [pc, #224]	; (8003714 <xTaskIncrementTick+0x160>)
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	601a      	str	r2, [r3, #0]
                    break;
 800363a:	e042      	b.n	80036c2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800363c:	4b32      	ldr	r3, [pc, #200]	; (8003708 <xTaskIncrementTick+0x154>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	d203      	bcs.n	800365c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003654:	4a2f      	ldr	r2, [pc, #188]	; (8003714 <xTaskIncrementTick+0x160>)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800365a:	e032      	b.n	80036c2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	3304      	adds	r3, #4
 8003660:	4618      	mov	r0, r3
 8003662:	f7fe ff97 	bl	8002594 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	2b00      	cmp	r3, #0
 800366c:	d004      	beq.n	8003678 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3318      	adds	r3, #24
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe ff8e 	bl	8002594 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4618      	mov	r0, r3
 800367c:	f002 fbe0 	bl	8005e40 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	2201      	movs	r2, #1
 8003686:	409a      	lsls	r2, r3
 8003688:	4b23      	ldr	r3, [pc, #140]	; (8003718 <xTaskIncrementTick+0x164>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4313      	orrs	r3, r2
 800368e:	4a22      	ldr	r2, [pc, #136]	; (8003718 <xTaskIncrementTick+0x164>)
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4a1f      	ldr	r2, [pc, #124]	; (800371c <xTaskIncrementTick+0x168>)
 80036a0:	441a      	add	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	3304      	adds	r3, #4
 80036a6:	4619      	mov	r1, r3
 80036a8:	4610      	mov	r0, r2
 80036aa:	f7fe ff16 	bl	80024da <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b2:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <xTaskIncrementTick+0x16c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d3b5      	bcc.n	8003628 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80036bc:	2301      	movs	r3, #1
 80036be:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036c0:	e7b2      	b.n	8003628 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <xTaskIncrementTick+0x16c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	4914      	ldr	r1, [pc, #80]	; (800371c <xTaskIncrementTick+0x168>)
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d901      	bls.n	80036de <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80036da:	2301      	movs	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <xTaskIncrementTick+0x170>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80036e6:	2301      	movs	r3, #1
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e004      	b.n	80036f6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <xTaskIncrementTick+0x174>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3301      	adds	r3, #1
 80036f2:	4a0d      	ldr	r2, [pc, #52]	; (8003728 <xTaskIncrementTick+0x174>)
 80036f4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80036f6:	697b      	ldr	r3, [r7, #20]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	200001ec 	.word	0x200001ec
 8003704:	200001c8 	.word	0x200001c8
 8003708:	2000017c 	.word	0x2000017c
 800370c:	20000180 	.word	0x20000180
 8003710:	200001dc 	.word	0x200001dc
 8003714:	200001e4 	.word	0x200001e4
 8003718:	200001cc 	.word	0x200001cc
 800371c:	200000f0 	.word	0x200000f0
 8003720:	200000ec 	.word	0x200000ec
 8003724:	200001d8 	.word	0x200001d8
 8003728:	200001d4 	.word	0x200001d4

0800372c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003732:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <vTaskSwitchContext+0xbc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800373a:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <vTaskSwitchContext+0xc0>)
 800373c:	2201      	movs	r2, #1
 800373e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003740:	e04d      	b.n	80037de <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003742:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <vTaskSwitchContext+0xc0>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003748:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <vTaskSwitchContext+0xc4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003756:	7afb      	ldrb	r3, [r7, #11]
 8003758:	f1c3 031f 	rsb	r3, r3, #31
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	4925      	ldr	r1, [pc, #148]	; (80037f4 <vTaskSwitchContext+0xc8>)
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	607b      	str	r3, [r7, #4]
    }
 8003784:	bf00      	nop
 8003786:	e7fe      	b.n	8003786 <vTaskSwitchContext+0x5a>
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <vTaskSwitchContext+0xc8>)
 8003794:	4413      	add	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	3308      	adds	r3, #8
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d104      	bne.n	80037b8 <vTaskSwitchContext+0x8c>
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <vTaskSwitchContext+0xcc>)
 80037c0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <vTaskSwitchContext+0xcc>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <vTaskSwitchContext+0xd0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d102      	bne.n	80037d4 <vTaskSwitchContext+0xa8>
 80037ce:	f002 fa97 	bl	8005d00 <SEGGER_SYSVIEW_OnIdle>
}
 80037d2:	e004      	b.n	80037de <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <vTaskSwitchContext+0xcc>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f002 faef 	bl	8005dbc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200001ec 	.word	0x200001ec
 80037ec:	200001d8 	.word	0x200001d8
 80037f0:	200001cc 	.word	0x200001cc
 80037f4:	200000f0 	.word	0x200000f0
 80037f8:	200000ec 	.word	0x200000ec
 80037fc:	200001e8 	.word	0x200001e8

08003800 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	60fb      	str	r3, [r7, #12]
    }
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <vTaskPlaceOnEventList+0x44>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3318      	adds	r3, #24
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe fe77 	bl	8002522 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003834:	2101      	movs	r1, #1
 8003836:	6838      	ldr	r0, [r7, #0]
 8003838:	f000 fb4c 	bl	8003ed4 <prvAddCurrentTaskToDelayedList>
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	200000ec 	.word	0x200000ec

08003848 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	60fb      	str	r3, [r7, #12]
    }
 8003870:	bf00      	nop
 8003872:	e7fe      	b.n	8003872 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	3318      	adds	r3, #24
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fe8b 	bl	8002594 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800387e:	4b1f      	ldr	r3, [pc, #124]	; (80038fc <xTaskRemoveFromEventList+0xb4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d120      	bne.n	80038c8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	3304      	adds	r3, #4
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fe82 	bl	8002594 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4618      	mov	r0, r3
 8003894:	f002 fad4 	bl	8005e40 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	2201      	movs	r2, #1
 800389e:	409a      	lsls	r2, r3
 80038a0:	4b17      	ldr	r3, [pc, #92]	; (8003900 <xTaskRemoveFromEventList+0xb8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	4a16      	ldr	r2, [pc, #88]	; (8003900 <xTaskRemoveFromEventList+0xb8>)
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <xTaskRemoveFromEventList+0xbc>)
 80038b8:	441a      	add	r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3304      	adds	r3, #4
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f7fe fe0a 	bl	80024da <vListInsertEnd>
 80038c6:	e005      	b.n	80038d4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	3318      	adds	r3, #24
 80038cc:	4619      	mov	r1, r3
 80038ce:	480e      	ldr	r0, [pc, #56]	; (8003908 <xTaskRemoveFromEventList+0xc0>)
 80038d0:	f7fe fe03 	bl	80024da <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <xTaskRemoveFromEventList+0xc4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	429a      	cmp	r2, r3
 80038e0:	d905      	bls.n	80038ee <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80038e2:	2301      	movs	r3, #1
 80038e4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <xTaskRemoveFromEventList+0xc8>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	e001      	b.n	80038f2 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80038f2:	697b      	ldr	r3, [r7, #20]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200001ec 	.word	0x200001ec
 8003900:	200001cc 	.word	0x200001cc
 8003904:	200000f0 	.word	0x200000f0
 8003908:	20000184 	.word	0x20000184
 800390c:	200000ec 	.word	0x200000ec
 8003910:	200001d8 	.word	0x200001d8

08003914 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <vTaskInternalSetTimeOutState+0x24>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <vTaskInternalSetTimeOutState+0x28>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	605a      	str	r2, [r3, #4]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	200001dc 	.word	0x200001dc
 800393c:	200001c8 	.word	0x200001c8

08003940 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	613b      	str	r3, [r7, #16]
    }
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	60fb      	str	r3, [r7, #12]
    }
 800397e:	bf00      	nop
 8003980:	e7fe      	b.n	8003980 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003982:	f000 fccf 	bl	8004324 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003986:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <xTaskCheckForTimeOut+0xc4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d102      	bne.n	80039a6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	e026      	b.n	80039f4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <xTaskCheckForTimeOut+0xc8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d00a      	beq.n	80039c8 <xTaskCheckForTimeOut+0x88>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d305      	bcc.n	80039c8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80039bc:	2301      	movs	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e015      	b.n	80039f4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d20b      	bcs.n	80039ea <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	1ad2      	subs	r2, r2, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ff98 	bl	8003914 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	e004      	b.n	80039f4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80039f4:	f000 fcc6 	bl	8004384 <vPortExitCritical>

    return xReturn;
 80039f8:	69fb      	ldr	r3, [r7, #28]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200001c8 	.word	0x200001c8
 8003a08:	200001dc 	.word	0x200001dc

08003a0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <vTaskMissedYield+0x14>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	200001d8 	.word	0x200001d8

08003a24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a2c:	f000 f852 	bl	8003ad4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <prvIdleTask+0x28>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d9f9      	bls.n	8003a2c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <prvIdleTask+0x2c>)
 8003a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a48:	e7f0      	b.n	8003a2c <prvIdleTask+0x8>
 8003a4a:	bf00      	nop
 8003a4c:	200000f0 	.word	0x200000f0
 8003a50:	e000ed04 	.word	0xe000ed04

08003a54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	e00c      	b.n	8003a7a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <prvInitialiseTaskLists+0x60>)
 8003a6c:	4413      	add	r3, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fd06 	bl	8002480 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3301      	adds	r3, #1
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d9ef      	bls.n	8003a60 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a80:	480d      	ldr	r0, [pc, #52]	; (8003ab8 <prvInitialiseTaskLists+0x64>)
 8003a82:	f7fe fcfd 	bl	8002480 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a86:	480d      	ldr	r0, [pc, #52]	; (8003abc <prvInitialiseTaskLists+0x68>)
 8003a88:	f7fe fcfa 	bl	8002480 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a8c:	480c      	ldr	r0, [pc, #48]	; (8003ac0 <prvInitialiseTaskLists+0x6c>)
 8003a8e:	f7fe fcf7 	bl	8002480 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003a92:	480c      	ldr	r0, [pc, #48]	; (8003ac4 <prvInitialiseTaskLists+0x70>)
 8003a94:	f7fe fcf4 	bl	8002480 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a98:	480b      	ldr	r0, [pc, #44]	; (8003ac8 <prvInitialiseTaskLists+0x74>)
 8003a9a:	f7fe fcf1 	bl	8002480 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <prvInitialiseTaskLists+0x78>)
 8003aa0:	4a05      	ldr	r2, [pc, #20]	; (8003ab8 <prvInitialiseTaskLists+0x64>)
 8003aa2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <prvInitialiseTaskLists+0x7c>)
 8003aa6:	4a05      	ldr	r2, [pc, #20]	; (8003abc <prvInitialiseTaskLists+0x68>)
 8003aa8:	601a      	str	r2, [r3, #0]
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	200000f0 	.word	0x200000f0
 8003ab8:	20000154 	.word	0x20000154
 8003abc:	20000168 	.word	0x20000168
 8003ac0:	20000184 	.word	0x20000184
 8003ac4:	20000198 	.word	0x20000198
 8003ac8:	200001b0 	.word	0x200001b0
 8003acc:	2000017c 	.word	0x2000017c
 8003ad0:	20000180 	.word	0x20000180

08003ad4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ada:	e019      	b.n	8003b10 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003adc:	f000 fc22 	bl	8004324 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <prvCheckTasksWaitingTermination+0x50>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fd51 	bl	8002594 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003af2:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <prvCheckTasksWaitingTermination+0x54>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	4a0b      	ldr	r2, [pc, #44]	; (8003b28 <prvCheckTasksWaitingTermination+0x54>)
 8003afa:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <prvCheckTasksWaitingTermination+0x58>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <prvCheckTasksWaitingTermination+0x58>)
 8003b04:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003b06:	f000 fc3d 	bl	8004384 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f810 	bl	8003b30 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <prvCheckTasksWaitingTermination+0x58>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e1      	bne.n	8003adc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000198 	.word	0x20000198
 8003b28:	200001c4 	.word	0x200001c4
 8003b2c:	200001ac 	.word	0x200001ac

08003b30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fdbd 	bl	80046bc <vPortFree>
                vPortFree( pxTCB );
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fdba 	bl	80046bc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <prvResetNextTaskUnblockTime+0x30>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d104      	bne.n	8003b68 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <prvResetNextTaskUnblockTime+0x34>)
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295
 8003b64:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b66:	e005      	b.n	8003b74 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <prvResetNextTaskUnblockTime+0x30>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <prvResetNextTaskUnblockTime+0x34>)
 8003b72:	6013      	str	r3, [r2, #0]
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	2000017c 	.word	0x2000017c
 8003b84:	200001e4 	.word	0x200001e4

08003b88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d063      	beq.n	8003c66 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba2:	4b33      	ldr	r3, [pc, #204]	; (8003c70 <xTaskPriorityInherit+0xe8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d253      	bcs.n	8003c54 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	db06      	blt.n	8003bc2 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bb4:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <xTaskPriorityInherit+0xe8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	f1c3 0205 	rsb	r2, r3, #5
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6959      	ldr	r1, [r3, #20]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4a28      	ldr	r2, [pc, #160]	; (8003c74 <xTaskPriorityInherit+0xec>)
 8003bd4:	4413      	add	r3, r2
 8003bd6:	4299      	cmp	r1, r3
 8003bd8:	d12f      	bne.n	8003c3a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fcd8 	bl	8002594 <uxListRemove>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	2201      	movs	r2, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43da      	mvns	r2, r3
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <xTaskPriorityInherit+0xf0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <xTaskPriorityInherit+0xf0>)
 8003bfe:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <xTaskPriorityInherit+0xe8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	2201      	movs	r2, #1
 8003c10:	409a      	lsls	r2, r3
 8003c12:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <xTaskPriorityInherit+0xf0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	4a17      	ldr	r2, [pc, #92]	; (8003c78 <xTaskPriorityInherit+0xf0>)
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <xTaskPriorityInherit+0xec>)
 8003c2a:	441a      	add	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f7fe fc51 	bl	80024da <vListInsertEnd>
 8003c38:	e004      	b.n	8003c44 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <xTaskPriorityInherit+0xe8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4619      	mov	r1, r3
 8003c48:	2049      	movs	r0, #73	; 0x49
 8003c4a:	f001 fb9b 	bl	8005384 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	e008      	b.n	8003c66 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <xTaskPriorityInherit+0xe8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d201      	bcs.n	8003c66 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003c62:	2301      	movs	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c66:	68fb      	ldr	r3, [r7, #12]
    }
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	200000ec 	.word	0x200000ec
 8003c74:	200000f0 	.word	0x200000f0
 8003c78:	200001cc 	.word	0x200001cc

08003c7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d068      	beq.n	8003d64 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003c92:	4b37      	ldr	r3, [pc, #220]	; (8003d70 <xTaskPriorityDisinherit+0xf4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d00a      	beq.n	8003cb2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60fb      	str	r3, [r7, #12]
    }
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	60bb      	str	r3, [r7, #8]
    }
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd4:	1e5a      	subs	r2, r3, #1
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d03e      	beq.n	8003d64 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d13a      	bne.n	8003d64 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fc4e 	bl	8002594 <uxListRemove>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	2201      	movs	r2, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43da      	mvns	r2, r3
 8003d0a:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <xTaskPriorityDisinherit+0xf8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <xTaskPriorityDisinherit+0xf8>)
 8003d12:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4619      	mov	r1, r3
 8003d18:	204a      	movs	r0, #74	; 0x4a
 8003d1a:	f001 fb33 	bl	8005384 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	f1c3 0205 	rsb	r2, r3, #5
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	2201      	movs	r2, #1
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <xTaskPriorityDisinherit+0xf8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	4a0c      	ldr	r2, [pc, #48]	; (8003d74 <xTaskPriorityDisinherit+0xf8>)
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <xTaskPriorityDisinherit+0xfc>)
 8003d52:	441a      	add	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f7fe fbbd 	bl	80024da <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d64:	697b      	ldr	r3, [r7, #20]
    }
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200000ec 	.word	0x200000ec
 8003d74:	200001cc 	.word	0x200001cc
 8003d78:	200000f0 	.word	0x200000f0

08003d7c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8081 	beq.w	8003e98 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	60fb      	str	r3, [r7, #12]
    }
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d902      	bls.n	8003dc4 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	e002      	b.n	8003dca <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc8:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d061      	beq.n	8003e98 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d15c      	bne.n	8003e98 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8003dde:	4b30      	ldr	r3, [pc, #192]	; (8003ea0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d10a      	bne.n	8003dfe <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	60bb      	str	r3, [r7, #8]
    }
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4619      	mov	r1, r3
 8003e02:	204a      	movs	r0, #74	; 0x4a
 8003e04:	f001 fabe 	bl	8005384 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	db04      	blt.n	8003e26 <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f1c3 0205 	rsb	r2, r3, #5
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	6959      	ldr	r1, [r3, #20]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8003e36:	4413      	add	r3, r2
 8003e38:	4299      	cmp	r1, r3
 8003e3a:	d12d      	bne.n	8003e98 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fba7 	bl	8002594 <uxListRemove>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	2201      	movs	r2, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43da      	mvns	r2, r3
 8003e58:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003e60:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f001 ffeb 	bl	8005e40 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	2201      	movs	r2, #1
 8003e70:	409a      	lsls	r2, r3
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	4a0b      	ldr	r2, [pc, #44]	; (8003ea8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4a06      	ldr	r2, [pc, #24]	; (8003ea4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8003e8a:	441a      	add	r2, r3
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f7fe fb21 	bl	80024da <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003e98:	bf00      	nop
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	200000ec 	.word	0x200000ec
 8003ea4:	200000f0 	.word	0x200000f0
 8003ea8:	200001cc 	.word	0x200001cc

08003eac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8003eb0:	4b07      	ldr	r3, [pc, #28]	; (8003ed0 <pvTaskIncrementMutexHeldCount+0x24>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <pvTaskIncrementMutexHeldCount+0x24>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ebe:	3201      	adds	r2, #1
 8003ec0:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8003ec2:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <pvTaskIncrementMutexHeldCount+0x24>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
    }
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	200000ec 	.word	0x200000ec

08003ed4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003ede:	4b32      	ldr	r3, [pc, #200]	; (8003fa8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ee4:	4b31      	ldr	r3, [pc, #196]	; (8003fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe fb52 	bl	8002594 <uxListRemove>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10b      	bne.n	8003f0e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ef6:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	2201      	movs	r2, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43da      	mvns	r2, r3
 8003f04:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003f0c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d110      	bne.n	8003f38 <prvAddCurrentTaskToDelayedList+0x64>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	211b      	movs	r1, #27
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 ffce 	bl	8005ec4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f28:	4b20      	ldr	r3, [pc, #128]	; (8003fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4820      	ldr	r0, [pc, #128]	; (8003fb4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003f32:	f7fe fad2 	bl	80024da <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003f36:	e032      	b.n	8003f9e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f40:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d20f      	bcs.n	8003f70 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003f50:	4b16      	ldr	r3, [pc, #88]	; (8003fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2104      	movs	r1, #4
 8003f56:	4618      	mov	r0, r3
 8003f58:	f001 ffb4 	bl	8005ec4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f5c:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b12      	ldr	r3, [pc, #72]	; (8003fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f7fe fada 	bl	8002522 <vListInsert>
}
 8003f6e:	e016      	b.n	8003f9e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003f70:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2104      	movs	r1, #4
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 ffa4 	bl	8005ec4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	4610      	mov	r0, r2
 8003f8a:	f7fe faca 	bl	8002522 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003f8e:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d202      	bcs.n	8003f9e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003f98:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6013      	str	r3, [r2, #0]
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200001c8 	.word	0x200001c8
 8003fac:	200000ec 	.word	0x200000ec
 8003fb0:	200001cc 	.word	0x200001cc
 8003fb4:	200001b0 	.word	0x200001b0
 8003fb8:	20000180 	.word	0x20000180
 8003fbc:	2000017c 	.word	0x2000017c
 8003fc0:	200001e4 	.word	0x200001e4

08003fc4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3b04      	subs	r3, #4
 8003fd4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fdc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3b04      	subs	r3, #4
 8003fe2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f023 0201 	bic.w	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3b04      	subs	r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ff4:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <pxPortInitialiseStack+0x64>)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3b14      	subs	r3, #20
 8003ffe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3b04      	subs	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f06f 0202 	mvn.w	r2, #2
 8004012:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3b20      	subs	r3, #32
 8004018:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800401a:	68fb      	ldr	r3, [r7, #12]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	0800402d 	.word	0x0800402d

0800402c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <prvTaskExitError+0x54>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403e:	d00a      	beq.n	8004056 <prvTaskExitError+0x2a>
        __asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
    }
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <prvTaskExitError+0x28>
        __asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	60bb      	str	r3, [r7, #8]
    }
 8004068:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800406a:	bf00      	nop
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0fc      	beq.n	800406c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	20000010 	.word	0x20000010
	...

08004090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <pxCurrentTCBConst2>)
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	6808      	ldr	r0, [r1, #0]
 8004096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409a:	f380 8809 	msr	PSP, r0
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8811 	msr	BASEPRI, r0
 80040aa:	4770      	bx	lr
 80040ac:	f3af 8000 	nop.w

080040b0 <pxCurrentTCBConst2>:
 80040b0:	200000ec 	.word	0x200000ec
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80040b8:	4808      	ldr	r0, [pc, #32]	; (80040dc <prvPortStartFirstTask+0x24>)
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	f380 8808 	msr	MSP, r0
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f380 8814 	msr	CONTROL, r0
 80040ca:	b662      	cpsie	i
 80040cc:	b661      	cpsie	f
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	df00      	svc	0
 80040d8:	bf00      	nop
 80040da:	0000      	.short	0x0000
 80040dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop

080040e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040ea:	4b46      	ldr	r3, [pc, #280]	; (8004204 <xPortStartScheduler+0x120>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a46      	ldr	r2, [pc, #280]	; (8004208 <xPortStartScheduler+0x124>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d10a      	bne.n	800410a <xPortStartScheduler+0x26>
        __asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	613b      	str	r3, [r7, #16]
    }
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800410a:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <xPortStartScheduler+0x120>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a3f      	ldr	r2, [pc, #252]	; (800420c <xPortStartScheduler+0x128>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d10a      	bne.n	800412a <xPortStartScheduler+0x46>
        __asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	60fb      	str	r3, [r7, #12]
    }
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800412a:	4b39      	ldr	r3, [pc, #228]	; (8004210 <xPortStartScheduler+0x12c>)
 800412c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	22ff      	movs	r2, #255	; 0xff
 800413a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <xPortStartScheduler+0x130>)
 8004150:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <xPortStartScheduler+0x134>)
 8004154:	2207      	movs	r2, #7
 8004156:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004158:	e009      	b.n	800416e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800415a:	4b2f      	ldr	r3, [pc, #188]	; (8004218 <xPortStartScheduler+0x134>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3b01      	subs	r3, #1
 8004160:	4a2d      	ldr	r2, [pc, #180]	; (8004218 <xPortStartScheduler+0x134>)
 8004162:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b80      	cmp	r3, #128	; 0x80
 8004178:	d0ef      	beq.n	800415a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800417a:	4b27      	ldr	r3, [pc, #156]	; (8004218 <xPortStartScheduler+0x134>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1c3 0307 	rsb	r3, r3, #7
 8004182:	2b04      	cmp	r3, #4
 8004184:	d00a      	beq.n	800419c <xPortStartScheduler+0xb8>
        __asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60bb      	str	r3, [r7, #8]
    }
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800419c:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <xPortStartScheduler+0x134>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <xPortStartScheduler+0x134>)
 80041a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041a6:	4b1c      	ldr	r3, [pc, #112]	; (8004218 <xPortStartScheduler+0x134>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ae:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <xPortStartScheduler+0x134>)
 80041b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041ba:	4b18      	ldr	r3, [pc, #96]	; (800421c <xPortStartScheduler+0x138>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <xPortStartScheduler+0x138>)
 80041c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <xPortStartScheduler+0x138>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a14      	ldr	r2, [pc, #80]	; (800421c <xPortStartScheduler+0x138>)
 80041cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80041d2:	f000 f963 	bl	800449c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <xPortStartScheduler+0x13c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80041dc:	f000 f982 	bl	80044e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041e0:	4b10      	ldr	r3, [pc, #64]	; (8004224 <xPortStartScheduler+0x140>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0f      	ldr	r2, [pc, #60]	; (8004224 <xPortStartScheduler+0x140>)
 80041e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80041ec:	f7ff ff64 	bl	80040b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80041f0:	f7ff fa9c 	bl	800372c <vTaskSwitchContext>
    prvTaskExitError();
 80041f4:	f7ff ff1a 	bl	800402c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	e000ed00 	.word	0xe000ed00
 8004208:	410fc271 	.word	0x410fc271
 800420c:	410fc270 	.word	0x410fc270
 8004210:	e000e400 	.word	0xe000e400
 8004214:	200001f0 	.word	0x200001f0
 8004218:	200001f4 	.word	0x200001f4
 800421c:	e000ed20 	.word	0xe000ed20
 8004220:	20000010 	.word	0x20000010
 8004224:	e000ef34 	.word	0xe000ef34

08004228 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800422e:	4b37      	ldr	r3, [pc, #220]	; (800430c <vInitPrioGroupValue+0xe4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a37      	ldr	r2, [pc, #220]	; (8004310 <vInitPrioGroupValue+0xe8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d10a      	bne.n	800424e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	613b      	str	r3, [r7, #16]
    }
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800424e:	4b2f      	ldr	r3, [pc, #188]	; (800430c <vInitPrioGroupValue+0xe4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a30      	ldr	r2, [pc, #192]	; (8004314 <vInitPrioGroupValue+0xec>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d10a      	bne.n	800426e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	60fb      	str	r3, [r7, #12]
    }
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800426e:	4b2a      	ldr	r3, [pc, #168]	; (8004318 <vInitPrioGroupValue+0xf0>)
 8004270:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	22ff      	movs	r2, #255	; 0xff
 800427e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4b22      	ldr	r3, [pc, #136]	; (800431c <vInitPrioGroupValue+0xf4>)
 8004294:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004296:	4b22      	ldr	r3, [pc, #136]	; (8004320 <vInitPrioGroupValue+0xf8>)
 8004298:	2207      	movs	r2, #7
 800429a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800429c:	e009      	b.n	80042b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800429e:	4b20      	ldr	r3, [pc, #128]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b80      	cmp	r3, #128	; 0x80
 80042bc:	d0ef      	beq.n	800429e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042be:	4b18      	ldr	r3, [pc, #96]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f1c3 0307 	rsb	r3, r3, #7
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d00a      	beq.n	80042e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60bb      	str	r3, [r7, #8]
    }
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042e0:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	4a0e      	ldr	r2, [pc, #56]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042f2:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	e000ed00 	.word	0xe000ed00
 8004310:	410fc271 	.word	0x410fc271
 8004314:	410fc270 	.word	0x410fc270
 8004318:	e000e400 	.word	0xe000e400
 800431c:	200001f0 	.word	0x200001f0
 8004320:	200001f4 	.word	0x200001f4

08004324 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
        __asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	607b      	str	r3, [r7, #4]
    }
 800433c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <vPortEnterCritical+0x58>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	4a0d      	ldr	r2, [pc, #52]	; (800437c <vPortEnterCritical+0x58>)
 8004346:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <vPortEnterCritical+0x58>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d10f      	bne.n	8004370 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <vPortEnterCritical+0x5c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <vPortEnterCritical+0x4c>
        __asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	603b      	str	r3, [r7, #0]
    }
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <vPortEnterCritical+0x4a>
    }
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	20000010 	.word	0x20000010
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <vPortExitCritical+0x50>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <vPortExitCritical+0x24>
        __asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	607b      	str	r3, [r7, #4]
    }
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <vPortExitCritical+0x50>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	4a09      	ldr	r2, [pc, #36]	; (80043d4 <vPortExitCritical+0x50>)
 80043b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <vPortExitCritical+0x50>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <vPortExitCritical+0x42>
 80043ba:	2300      	movs	r3, #0
 80043bc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80043c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000010 	.word	0x20000010
	...

080043e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80043e0:	f3ef 8009 	mrs	r0, PSP
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <pxCurrentTCBConst>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	f01e 0f10 	tst.w	lr, #16
 80043f0:	bf08      	it	eq
 80043f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fa:	6010      	str	r0, [r2, #0]
 80043fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004404:	f380 8811 	msr	BASEPRI, r0
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f7ff f98c 	bl	800372c <vTaskSwitchContext>
 8004414:	f04f 0000 	mov.w	r0, #0
 8004418:	f380 8811 	msr	BASEPRI, r0
 800441c:	bc09      	pop	{r0, r3}
 800441e:	6819      	ldr	r1, [r3, #0]
 8004420:	6808      	ldr	r0, [r1, #0]
 8004422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004426:	f01e 0f10 	tst.w	lr, #16
 800442a:	bf08      	it	eq
 800442c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004430:	f380 8809 	msr	PSP, r0
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	f3af 8000 	nop.w

08004440 <pxCurrentTCBConst>:
 8004440:	200000ec 	.word	0x200000ec
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop

08004448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
        __asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
    }
 8004460:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004462:	f001 fbd3 	bl	8005c0c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004466:	f7ff f8a5 	bl	80035b4 <xTaskIncrementTick>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004470:	f001 fc2a 	bl	8005cc8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <SysTick_Handler+0x50>)
 8004476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e001      	b.n	8004482 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800447e:	f001 fc07 	bl	8005c90 <SEGGER_SYSVIEW_RecordExitISR>
 8004482:	2300      	movs	r3, #0
 8004484:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f383 8811 	msr	BASEPRI, r3
    }
 800448c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <vPortSetupTimerInterrupt+0x34>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <vPortSetupTimerInterrupt+0x38>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <vPortSetupTimerInterrupt+0x3c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <vPortSetupTimerInterrupt+0x40>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <vPortSetupTimerInterrupt+0x44>)
 80044ba:	3b01      	subs	r3, #1
 80044bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <vPortSetupTimerInterrupt+0x34>)
 80044c0:	2207      	movs	r2, #7
 80044c2:	601a      	str	r2, [r3, #0]
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	e000e010 	.word	0xe000e010
 80044d4:	e000e018 	.word	0xe000e018
 80044d8:	20000000 	.word	0x20000000
 80044dc:	10624dd3 	.word	0x10624dd3
 80044e0:	e000e014 	.word	0xe000e014

080044e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80044e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044f4 <vPortEnableVFP+0x10>
 80044e8:	6801      	ldr	r1, [r0, #0]
 80044ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044ee:	6001      	str	r1, [r0, #0]
 80044f0:	4770      	bx	lr
 80044f2:	0000      	.short	0x0000
 80044f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop

080044fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	; 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004508:	f7fe ffa6 	bl	8003458 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800450c:	4b65      	ldr	r3, [pc, #404]	; (80046a4 <pvPortMalloc+0x1a8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004514:	f000 f934 	bl	8004780 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004518:	4b63      	ldr	r3, [pc, #396]	; (80046a8 <pvPortMalloc+0x1ac>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	f040 80a7 	bne.w	8004674 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02d      	beq.n	8004588 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800452c:	2208      	movs	r2, #8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d227      	bcs.n	8004588 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004538:	2208      	movs	r2, #8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4413      	add	r3, r2
 800453e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	2b00      	cmp	r3, #0
 8004548:	d021      	beq.n	800458e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f023 0307 	bic.w	r3, r3, #7
 8004550:	3308      	adds	r3, #8
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	429a      	cmp	r2, r3
 8004556:	d214      	bcs.n	8004582 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f023 0307 	bic.w	r3, r3, #7
 800455e:	3308      	adds	r3, #8
 8004560:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	2b00      	cmp	r3, #0
 800456a:	d010      	beq.n	800458e <pvPortMalloc+0x92>
        __asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	617b      	str	r3, [r7, #20]
    }
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004586:	e002      	b.n	800458e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	e000      	b.n	8004590 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800458e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d06e      	beq.n	8004674 <pvPortMalloc+0x178>
 8004596:	4b45      	ldr	r3, [pc, #276]	; (80046ac <pvPortMalloc+0x1b0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	d869      	bhi.n	8004674 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80045a0:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <pvPortMalloc+0x1b4>)
 80045a2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80045a4:	4b42      	ldr	r3, [pc, #264]	; (80046b0 <pvPortMalloc+0x1b4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045aa:	e004      	b.n	80045b6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d903      	bls.n	80045c8 <pvPortMalloc+0xcc>
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f1      	bne.n	80045ac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80045c8:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <pvPortMalloc+0x1a8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d050      	beq.n	8004674 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2208      	movs	r2, #8
 80045d8:	4413      	add	r3, r2
 80045da:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	1ad2      	subs	r2, r2, r3
 80045ec:	2308      	movs	r3, #8
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d91f      	bls.n	8004634 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <pvPortMalloc+0x120>
        __asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	613b      	str	r3, [r7, #16]
    }
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800462e:	69b8      	ldr	r0, [r7, #24]
 8004630:	f000 f908 	bl	8004844 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004634:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <pvPortMalloc+0x1b0>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <pvPortMalloc+0x1b0>)
 8004640:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004642:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <pvPortMalloc+0x1b0>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <pvPortMalloc+0x1b8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d203      	bcs.n	8004656 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800464e:	4b17      	ldr	r3, [pc, #92]	; (80046ac <pvPortMalloc+0x1b0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <pvPortMalloc+0x1b8>)
 8004654:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <pvPortMalloc+0x1ac>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	431a      	orrs	r2, r3
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <pvPortMalloc+0x1bc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	4a11      	ldr	r2, [pc, #68]	; (80046b8 <pvPortMalloc+0x1bc>)
 8004672:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004674:	f7fe fefe 	bl	8003474 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <pvPortMalloc+0x19c>
        __asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	60fb      	str	r3, [r7, #12]
    }
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <pvPortMalloc+0x19a>
    return pvReturn;
 8004698:	69fb      	ldr	r3, [r7, #28]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3728      	adds	r7, #40	; 0x28
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20012e00 	.word	0x20012e00
 80046a8:	20012e14 	.word	0x20012e14
 80046ac:	20012e04 	.word	0x20012e04
 80046b0:	20012df8 	.word	0x20012df8
 80046b4:	20012e08 	.word	0x20012e08
 80046b8:	20012e0c 	.word	0x20012e0c

080046bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d04d      	beq.n	800476a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80046ce:	2308      	movs	r3, #8
 80046d0:	425b      	negs	r3, r3
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4413      	add	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	4b24      	ldr	r3, [pc, #144]	; (8004774 <vPortFree+0xb8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10a      	bne.n	8004700 <vPortFree+0x44>
        __asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	60fb      	str	r3, [r7, #12]
    }
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <vPortFree+0x62>
        __asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	60bb      	str	r3, [r7, #8]
    }
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	4b14      	ldr	r3, [pc, #80]	; (8004774 <vPortFree+0xb8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01e      	beq.n	800476a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11a      	bne.n	800476a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <vPortFree+0xb8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	43db      	mvns	r3, r3
 800473e:	401a      	ands	r2, r3
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004744:	f7fe fe88 	bl	8003458 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <vPortFree+0xbc>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4413      	add	r3, r2
 8004752:	4a09      	ldr	r2, [pc, #36]	; (8004778 <vPortFree+0xbc>)
 8004754:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004756:	6938      	ldr	r0, [r7, #16]
 8004758:	f000 f874 	bl	8004844 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800475c:	4b07      	ldr	r3, [pc, #28]	; (800477c <vPortFree+0xc0>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	4a06      	ldr	r2, [pc, #24]	; (800477c <vPortFree+0xc0>)
 8004764:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004766:	f7fe fe85 	bl	8003474 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800476a:	bf00      	nop
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20012e14 	.word	0x20012e14
 8004778:	20012e04 	.word	0x20012e04
 800477c:	20012e10 	.word	0x20012e10

08004780 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004786:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800478a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800478c:	4b27      	ldr	r3, [pc, #156]	; (800482c <prvHeapInit+0xac>)
 800478e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00c      	beq.n	80047b4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3307      	adds	r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0307 	bic.w	r3, r3, #7
 80047a6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	4a1f      	ldr	r2, [pc, #124]	; (800482c <prvHeapInit+0xac>)
 80047b0:	4413      	add	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047b8:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <prvHeapInit+0xb0>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80047be:	4b1c      	ldr	r3, [pc, #112]	; (8004830 <prvHeapInit+0xb0>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	4413      	add	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80047cc:	2208      	movs	r2, #8
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0307 	bic.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a15      	ldr	r2, [pc, #84]	; (8004834 <prvHeapInit+0xb4>)
 80047e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80047e2:	4b14      	ldr	r3, [pc, #80]	; (8004834 <prvHeapInit+0xb4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2200      	movs	r2, #0
 80047e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <prvHeapInit+0xb4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	1ad2      	subs	r2, r2, r3
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <prvHeapInit+0xb4>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <prvHeapInit+0xb8>)
 800480e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a09      	ldr	r2, [pc, #36]	; (800483c <prvHeapInit+0xbc>)
 8004816:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <prvHeapInit+0xc0>)
 800481a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800481e:	601a      	str	r2, [r3, #0]
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	200001f8 	.word	0x200001f8
 8004830:	20012df8 	.word	0x20012df8
 8004834:	20012e00 	.word	0x20012e00
 8004838:	20012e08 	.word	0x20012e08
 800483c:	20012e04 	.word	0x20012e04
 8004840:	20012e14 	.word	0x20012e14

08004844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800484c:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <prvInsertBlockIntoFreeList+0xac>)
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e002      	b.n	8004858 <prvInsertBlockIntoFreeList+0x14>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d8f7      	bhi.n	8004852 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	4413      	add	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	d108      	bne.n	8004886 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	441a      	add	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	441a      	add	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d118      	bne.n	80048cc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <prvInsertBlockIntoFreeList+0xb0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d00d      	beq.n	80048c2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	441a      	add	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	e008      	b.n	80048d4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <prvInsertBlockIntoFreeList+0xb0>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e003      	b.n	80048d4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d002      	beq.n	80048e2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20012df8 	.word	0x20012df8
 80048f4:	20012e00 	.word	0x20012e00

080048f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004906:	2205      	movs	r2, #5
 8004908:	492b      	ldr	r1, [pc, #172]	; (80049b8 <SYSVIEW_AddTask+0xc0>)
 800490a:	68b8      	ldr	r0, [r7, #8]
 800490c:	f001 fcbe 	bl	800628c <memcmp>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d04b      	beq.n	80049ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004916:	4b29      	ldr	r3, [pc, #164]	; (80049bc <SYSVIEW_AddTask+0xc4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b07      	cmp	r3, #7
 800491c:	d903      	bls.n	8004926 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800491e:	4828      	ldr	r0, [pc, #160]	; (80049c0 <SYSVIEW_AddTask+0xc8>)
 8004920:	f001 fc1c 	bl	800615c <SEGGER_SYSVIEW_Warn>
    return;
 8004924:	e044      	b.n	80049b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004926:	4b25      	ldr	r3, [pc, #148]	; (80049bc <SYSVIEW_AddTask+0xc4>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4926      	ldr	r1, [pc, #152]	; (80049c4 <SYSVIEW_AddTask+0xcc>)
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800493a:	4b20      	ldr	r3, [pc, #128]	; (80049bc <SYSVIEW_AddTask+0xc4>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4921      	ldr	r1, [pc, #132]	; (80049c4 <SYSVIEW_AddTask+0xcc>)
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	3304      	adds	r3, #4
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004950:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <SYSVIEW_AddTask+0xc4>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	491b      	ldr	r1, [pc, #108]	; (80049c4 <SYSVIEW_AddTask+0xcc>)
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	3308      	adds	r3, #8
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004966:	4b15      	ldr	r3, [pc, #84]	; (80049bc <SYSVIEW_AddTask+0xc4>)
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4916      	ldr	r1, [pc, #88]	; (80049c4 <SYSVIEW_AddTask+0xcc>)
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	330c      	adds	r3, #12
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <SYSVIEW_AddTask+0xc4>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4910      	ldr	r1, [pc, #64]	; (80049c4 <SYSVIEW_AddTask+0xcc>)
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	3310      	adds	r3, #16
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004992:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <SYSVIEW_AddTask+0xc4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3301      	adds	r3, #1
 8004998:	4a08      	ldr	r2, [pc, #32]	; (80049bc <SYSVIEW_AddTask+0xc4>)
 800499a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f80e 	bl	80049c8 <SYSVIEW_SendTaskInfo>
 80049ac:	e000      	b.n	80049b0 <SYSVIEW_AddTask+0xb8>
    return;
 80049ae:	bf00      	nop

}
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	08007364 	.word	0x08007364
 80049bc:	20012eb8 	.word	0x20012eb8
 80049c0:	0800736c 	.word	0x0800736c
 80049c4:	20012e18 	.word	0x20012e18

080049c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	; 0x28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80049d6:	f107 0314 	add.w	r3, r7, #20
 80049da:	2214      	movs	r2, #20
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f001 fc72 	bl	80062c8 <memset>
  TaskInfo.TaskID     = TaskID;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80049f8:	f107 0314 	add.w	r3, r7, #20
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 ffdb 	bl	80059b8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004a02:	bf00      	nop
 8004a04:	3728      	adds	r7, #40	; 0x28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004a12:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <USART2_IRQHandler+0x80>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d011      	beq.n	8004a46 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004a22:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <USART2_IRQHandler+0x84>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 030b 	and.w	r3, r3, #11
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d108      	bne.n	8004a46 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004a34:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <USART2_IRQHandler+0x88>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004a3c:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <USART2_IRQHandler+0x88>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	79fa      	ldrb	r2, [r7, #7]
 8004a42:	4610      	mov	r0, r2
 8004a44:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01a      	beq.n	8004a86 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <USART2_IRQHandler+0x8c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d015      	beq.n	8004a84 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004a58:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <USART2_IRQHandler+0x8c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	1dfa      	adds	r2, r7, #7
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4798      	blx	r3
 8004a62:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <USART2_IRQHandler+0x90>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <USART2_IRQHandler+0x90>)
 8004a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e006      	b.n	8004a86 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <USART2_IRQHandler+0x80>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004a7c:	79fa      	ldrb	r2, [r7, #7]
 8004a7e:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <USART2_IRQHandler+0x84>)
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e000      	b.n	8004a86 <USART2_IRQHandler+0x7a>
      return;
 8004a84:	bf00      	nop
    }
  }
}
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40004400 	.word	0x40004400
 8004a90:	40004404 	.word	0x40004404
 8004a94:	20012ebc 	.word	0x20012ebc
 8004a98:	20012ec0 	.word	0x20012ec0
 8004a9c:	4000440c 	.word	0x4000440c

08004aa0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a04      	ldr	r2, [pc, #16]	; (8004abc <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aae:	6013      	str	r3, [r2, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	4000440c 	.word	0x4000440c

08004ac0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004ac6:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <_DoInit+0x98>)
 8004ac8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2203      	movs	r2, #3
 8004ace:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <_DoInit+0x9c>)
 8004ada:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a20      	ldr	r2, [pc, #128]	; (8004b60 <_DoInit+0xa0>)
 8004ae0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ae8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a17      	ldr	r2, [pc, #92]	; (8004b5c <_DoInit+0x9c>)
 8004b00:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a17      	ldr	r2, [pc, #92]	; (8004b64 <_DoInit+0xa4>)
 8004b06:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2210      	movs	r2, #16
 8004b0c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3307      	adds	r3, #7
 8004b24:	4a10      	ldr	r2, [pc, #64]	; (8004b68 <_DoInit+0xa8>)
 8004b26:	6810      	ldr	r0, [r2, #0]
 8004b28:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b2a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <_DoInit+0xac>)
 8004b32:	6810      	ldr	r0, [r2, #0]
 8004b34:	6018      	str	r0, [r3, #0]
 8004b36:	8891      	ldrh	r1, [r2, #4]
 8004b38:	7992      	ldrb	r2, [r2, #6]
 8004b3a:	8099      	strh	r1, [r3, #4]
 8004b3c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b3e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b48:	f3bf 8f5f 	dmb	sy
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	20012ec4 	.word	0x20012ec4
 8004b5c:	080073bc 	.word	0x080073bc
 8004b60:	20012f6c 	.word	0x20012f6c
 8004b64:	2001336c 	.word	0x2001336c
 8004b68:	080073c8 	.word	0x080073c8
 8004b6c:	080073cc 	.word	0x080073cc

08004b70 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d905      	bls.n	8004ba0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9e:	e007      	b.n	8004bb0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	69b9      	ldr	r1, [r7, #24]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	1acb      	subs	r3, r1, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	3b01      	subs	r3, #1
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	bf28      	it	cs
 8004bbe:	4613      	movcs	r3, r2
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	bf28      	it	cs
 8004bca:	4613      	movcs	r3, r2
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	6978      	ldr	r0, [r7, #20]
 8004bde:	f001 fb65 	bl	80062ac <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004be2:	6a3a      	ldr	r2, [r7, #32]
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	4413      	add	r3, r2
 8004be8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	4413      	add	r3, r2
 8004bf0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	4413      	add	r3, r2
 8004c00:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d101      	bne.n	8004c10 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c10:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1b2      	bne.n	8004b86 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004c20:	6a3b      	ldr	r3, [r7, #32]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3728      	adds	r7, #40	; 0x28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b088      	sub	sp, #32
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d911      	bls.n	8004c72 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	6938      	ldr	r0, [r7, #16]
 8004c5e:	f001 fb25 	bl	80062ac <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c62:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004c66:	69fa      	ldr	r2, [r7, #28]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	441a      	add	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004c70:	e01f      	b.n	8004cb2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	6938      	ldr	r0, [r7, #16]
 8004c86:	f001 fb11 	bl	80062ac <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	6938      	ldr	r0, [r7, #16]
 8004ca4:	f001 fb02 	bl	80062ac <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ca8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	60da      	str	r2, [r3, #12]
}
 8004cb2:	bf00      	nop
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004cba:	b480      	push	{r7}
 8004cbc:	b087      	sub	sp, #28
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d808      	bhi.n	8004ce8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad2      	subs	r2, r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	e004      	b.n	8004cf2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004cf2:	697b      	ldr	r3, [r7, #20]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08c      	sub	sp, #48	; 0x30
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004d0c:	4b3e      	ldr	r3, [pc, #248]	; (8004e08 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d0e:	623b      	str	r3, [r7, #32]
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <SEGGER_RTT_ReadNoLock+0x1e>
 8004d1a:	f7ff fed1 	bl	8004ac0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4613      	mov	r3, r2
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	4413      	add	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	3360      	adds	r3, #96	; 0x60
 8004d2a:	4a37      	ldr	r2, [pc, #220]	; (8004e08 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d2c:	4413      	add	r3, r2
 8004d2e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d40:	2300      	movs	r3, #0
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d92b      	bls.n	8004da4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	bf28      	it	cs
 8004d5e:	4613      	movcs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	4413      	add	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	6939      	ldr	r1, [r7, #16]
 8004d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d72:	f001 fa9b 	bl	80062ac <memcpy>
    NumBytesRead += NumBytesRem;
 8004d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	4413      	add	r3, r2
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	4413      	add	r3, r2
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d101      	bne.n	8004da4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004da0:	2300      	movs	r3, #0
 8004da2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4293      	cmp	r3, r2
 8004db2:	bf28      	it	cs
 8004db4:	4613      	movcs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d019      	beq.n	8004df2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	4413      	add	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	6939      	ldr	r1, [r7, #16]
 8004dcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dce:	f001 fa6d 	bl	80062ac <memcpy>
    NumBytesRead += NumBytesRem;
 8004dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	4413      	add	r3, r2
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	4413      	add	r3, r2
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dfc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3730      	adds	r7, #48	; 0x30
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20012ec4 	.word	0x20012ec4

08004e0c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	4613      	mov	r3, r2
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	4413      	add	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004e2a:	4413      	add	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d029      	beq.n	8004e8a <SEGGER_RTT_WriteNoLock+0x7e>
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d82e      	bhi.n	8004e98 <SEGGER_RTT_WriteNoLock+0x8c>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <SEGGER_RTT_WriteNoLock+0x38>
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d013      	beq.n	8004e6a <SEGGER_RTT_WriteNoLock+0x5e>
 8004e42:	e029      	b.n	8004e98 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004e44:	6978      	ldr	r0, [r7, #20]
 8004e46:	f7ff ff38 	bl	8004cba <_GetAvailWriteSpace>
 8004e4a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d202      	bcs.n	8004e5a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004e58:	e021      	b.n	8004e9e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	69b9      	ldr	r1, [r7, #24]
 8004e62:	6978      	ldr	r0, [r7, #20]
 8004e64:	f7ff fee1 	bl	8004c2a <_WriteNoCheck>
    break;
 8004e68:	e019      	b.n	8004e9e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004e6a:	6978      	ldr	r0, [r7, #20]
 8004e6c:	f7ff ff25 	bl	8004cba <_GetAvailWriteSpace>
 8004e70:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4293      	cmp	r3, r2
 8004e78:	bf28      	it	cs
 8004e7a:	4613      	movcs	r3, r2
 8004e7c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	69b9      	ldr	r1, [r7, #24]
 8004e82:	6978      	ldr	r0, [r7, #20]
 8004e84:	f7ff fed1 	bl	8004c2a <_WriteNoCheck>
    break;
 8004e88:	e009      	b.n	8004e9e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	69b9      	ldr	r1, [r7, #24]
 8004e8e:	6978      	ldr	r0, [r7, #20]
 8004e90:	f7ff fe6e 	bl	8004b70 <_WriteBlocking>
 8004e94:	61f8      	str	r0, [r7, #28]
    break;
 8004e96:	e002      	b.n	8004e9e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61fb      	str	r3, [r7, #28]
    break;
 8004e9c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004e9e:	69fb      	ldr	r3, [r7, #28]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3720      	adds	r7, #32
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20012ec4 	.word	0x20012ec4

08004eac <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004eb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <SEGGER_RTT_Write+0x48>)
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <SEGGER_RTT_Write+0x1e>
 8004ec6:	f7ff fdfb 	bl	8004ac0 <_DoInit>
  SEGGER_RTT_LOCK();
 8004eca:	f3ef 8311 	mrs	r3, BASEPRI
 8004ece:	f04f 0120 	mov.w	r1, #32
 8004ed2:	f381 8811 	msr	BASEPRI, r1
 8004ed6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff ff95 	bl	8004e0c <SEGGER_RTT_WriteNoLock>
 8004ee2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004eea:	697b      	ldr	r3, [r7, #20]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20012ec4 	.word	0x20012ec4

08004ef8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004f08:	e002      	b.n	8004f10 <_EncodeStr+0x18>
    Len++;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4413      	add	r3, r2
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f6      	bne.n	8004f0a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d901      	bls.n	8004f28 <_EncodeStr+0x30>
    Len = Limit;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2bfe      	cmp	r3, #254	; 0xfe
 8004f2c:	d806      	bhi.n	8004f3c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	60fa      	str	r2, [r7, #12]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	e011      	b.n	8004f60 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	60fa      	str	r2, [r7, #12]
 8004f42:	22ff      	movs	r2, #255	; 0xff
 8004f44:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	60fa      	str	r2, [r7, #12]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	0a19      	lsrs	r1, r3, #8
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	60fa      	str	r2, [r7, #12]
 8004f5c:	b2ca      	uxtb	r2, r1
 8004f5e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004f64:	e00a      	b.n	8004f7c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	1c53      	adds	r3, r2, #1
 8004f6a:	60bb      	str	r3, [r7, #8]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1c59      	adds	r1, r3, #1
 8004f70:	60f9      	str	r1, [r7, #12]
 8004f72:	7812      	ldrb	r2, [r2, #0]
 8004f74:	701a      	strb	r2, [r3, #0]
    n++;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d3f0      	bcc.n	8004f66 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004f84:	68fb      	ldr	r3, [r7, #12]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3304      	adds	r3, #4
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004fb2:	4b36      	ldr	r3, [pc, #216]	; (800508c <_HandleIncomingPacket+0xe0>)
 8004fb4:	7e1b      	ldrb	r3, [r3, #24]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	1cfb      	adds	r3, r7, #3
 8004fba:	2201      	movs	r2, #1
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f7ff fe9f 	bl	8004d00 <SEGGER_RTT_ReadNoLock>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dd54      	ble.n	8005076 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	2b80      	cmp	r3, #128	; 0x80
 8004fd0:	d032      	beq.n	8005038 <_HandleIncomingPacket+0x8c>
 8004fd2:	2b80      	cmp	r3, #128	; 0x80
 8004fd4:	dc42      	bgt.n	800505c <_HandleIncomingPacket+0xb0>
 8004fd6:	2b07      	cmp	r3, #7
 8004fd8:	dc16      	bgt.n	8005008 <_HandleIncomingPacket+0x5c>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	dd3e      	ble.n	800505c <_HandleIncomingPacket+0xb0>
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	2b06      	cmp	r3, #6
 8004fe2:	d83b      	bhi.n	800505c <_HandleIncomingPacket+0xb0>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <_HandleIncomingPacket+0x40>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	0800500f 	.word	0x0800500f
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	0800501b 	.word	0x0800501b
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005027 	.word	0x08005027
 8005000:	0800502d 	.word	0x0800502d
 8005004:	08005033 	.word	0x08005033
 8005008:	2b7f      	cmp	r3, #127	; 0x7f
 800500a:	d036      	beq.n	800507a <_HandleIncomingPacket+0xce>
 800500c:	e026      	b.n	800505c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800500e:	f000 fb57 	bl	80056c0 <SEGGER_SYSVIEW_Start>
      break;
 8005012:	e037      	b.n	8005084 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005014:	f000 fc10 	bl	8005838 <SEGGER_SYSVIEW_Stop>
      break;
 8005018:	e034      	b.n	8005084 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800501a:	f000 fdc5 	bl	8005ba8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800501e:	e031      	b.n	8005084 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005020:	f000 fdae 	bl	8005b80 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005024:	e02e      	b.n	8005084 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005026:	f000 fc2d 	bl	8005884 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800502a:	e02b      	b.n	8005084 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800502c:	f001 f858 	bl	80060e0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005030:	e028      	b.n	8005084 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005032:	f001 f837 	bl	80060a4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005036:	e025      	b.n	8005084 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005038:	4b14      	ldr	r3, [pc, #80]	; (800508c <_HandleIncomingPacket+0xe0>)
 800503a:	7e1b      	ldrb	r3, [r3, #24]
 800503c:	4618      	mov	r0, r3
 800503e:	1cfb      	adds	r3, r7, #3
 8005040:	2201      	movs	r2, #1
 8005042:	4619      	mov	r1, r3
 8005044:	f7ff fe5c 	bl	8004d00 <SEGGER_RTT_ReadNoLock>
 8005048:	4603      	mov	r3, r0
 800504a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	dd15      	ble.n	800507e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	4618      	mov	r0, r3
 8005056:	f000 ffa5 	bl	8005fa4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800505a:	e010      	b.n	800507e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800505c:	78fb      	ldrb	r3, [r7, #3]
 800505e:	b25b      	sxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	da0e      	bge.n	8005082 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005064:	4b09      	ldr	r3, [pc, #36]	; (800508c <_HandleIncomingPacket+0xe0>)
 8005066:	7e1b      	ldrb	r3, [r3, #24]
 8005068:	4618      	mov	r0, r3
 800506a:	1cfb      	adds	r3, r7, #3
 800506c:	2201      	movs	r2, #1
 800506e:	4619      	mov	r1, r3
 8005070:	f7ff fe46 	bl	8004d00 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005074:	e005      	b.n	8005082 <_HandleIncomingPacket+0xd6>
    }
  }
 8005076:	bf00      	nop
 8005078:	e004      	b.n	8005084 <_HandleIncomingPacket+0xd8>
      break;
 800507a:	bf00      	nop
 800507c:	e002      	b.n	8005084 <_HandleIncomingPacket+0xd8>
      break;
 800507e:	bf00      	nop
 8005080:	e000      	b.n	8005084 <_HandleIncomingPacket+0xd8>
      break;
 8005082:	bf00      	nop
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	2001337c 	.word	0x2001337c

08005090 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005090:	b580      	push	{r7, lr}
 8005092:	b08c      	sub	sp, #48	; 0x30
 8005094:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005096:	2301      	movs	r3, #1
 8005098:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800509a:	1d3b      	adds	r3, r7, #4
 800509c:	3301      	adds	r3, #1
 800509e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a4:	4b32      	ldr	r3, [pc, #200]	; (8005170 <_TrySendOverflowPacket+0xe0>)
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050aa:	e00b      	b.n	80050c4 <_TrySendOverflowPacket+0x34>
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	1c59      	adds	r1, r3, #1
 80050b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	09db      	lsrs	r3, r3, #7
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	2b7f      	cmp	r3, #127	; 0x7f
 80050c8:	d8f0      	bhi.n	80050ac <_TrySendOverflowPacket+0x1c>
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80050da:	4b26      	ldr	r3, [pc, #152]	; (8005174 <_TrySendOverflowPacket+0xe4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80050e0:	4b23      	ldr	r3, [pc, #140]	; (8005170 <_TrySendOverflowPacket+0xe0>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	623b      	str	r3, [r7, #32]
 80050f2:	e00b      	b.n	800510c <_TrySendOverflowPacket+0x7c>
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	1c59      	adds	r1, r3, #1
 80050fc:	6279      	str	r1, [r7, #36]	; 0x24
 80050fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	09db      	lsrs	r3, r3, #7
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	2b7f      	cmp	r3, #127	; 0x7f
 8005110:	d8f0      	bhi.n	80050f4 <_TrySendOverflowPacket+0x64>
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	627a      	str	r2, [r7, #36]	; 0x24
 8005118:	6a3a      	ldr	r2, [r7, #32]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005122:	4b13      	ldr	r3, [pc, #76]	; (8005170 <_TrySendOverflowPacket+0xe0>)
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	4618      	mov	r0, r3
 8005128:	1d3b      	adds	r3, r7, #4
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	461a      	mov	r2, r3
 8005130:	1d3b      	adds	r3, r7, #4
 8005132:	4619      	mov	r1, r3
 8005134:	f7fb f86c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005138:	4603      	mov	r3, r0
 800513a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800513c:	f7ff fcb0 	bl	8004aa0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005146:	4a0a      	ldr	r2, [pc, #40]	; (8005170 <_TrySendOverflowPacket+0xe0>)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800514c:	4b08      	ldr	r3, [pc, #32]	; (8005170 <_TrySendOverflowPacket+0xe0>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	3b01      	subs	r3, #1
 8005152:	b2da      	uxtb	r2, r3
 8005154:	4b06      	ldr	r3, [pc, #24]	; (8005170 <_TrySendOverflowPacket+0xe0>)
 8005156:	701a      	strb	r2, [r3, #0]
 8005158:	e004      	b.n	8005164 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <_TrySendOverflowPacket+0xe0>)
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	3301      	adds	r3, #1
 8005160:	4a03      	ldr	r2, [pc, #12]	; (8005170 <_TrySendOverflowPacket+0xe0>)
 8005162:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005164:	693b      	ldr	r3, [r7, #16]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3730      	adds	r7, #48	; 0x30
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	2001337c 	.word	0x2001337c
 8005174:	e0001004 	.word	0xe0001004

08005178 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005184:	4b6d      	ldr	r3, [pc, #436]	; (800533c <_SendPacket+0x1c4>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d010      	beq.n	80051ae <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800518c:	4b6b      	ldr	r3, [pc, #428]	; (800533c <_SendPacket+0x1c4>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 80a5 	beq.w	80052e0 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005196:	4b69      	ldr	r3, [pc, #420]	; (800533c <_SendPacket+0x1c4>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d109      	bne.n	80051b2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800519e:	f7ff ff77 	bl	8005090 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80051a2:	4b66      	ldr	r3, [pc, #408]	; (800533c <_SendPacket+0x1c4>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	f040 809c 	bne.w	80052e4 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80051ac:	e001      	b.n	80051b2 <_SendPacket+0x3a>
    goto Send;
 80051ae:	bf00      	nop
 80051b0:	e000      	b.n	80051b4 <_SendPacket+0x3c>
Send:
 80051b2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b1f      	cmp	r3, #31
 80051b8:	d809      	bhi.n	80051ce <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80051ba:	4b60      	ldr	r3, [pc, #384]	; (800533c <_SendPacket+0x1c4>)
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f040 808d 	bne.w	80052e8 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b17      	cmp	r3, #23
 80051d2:	d807      	bhi.n	80051e4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	e03d      	b.n	8005260 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	2b7f      	cmp	r3, #127	; 0x7f
 80051f0:	d912      	bls.n	8005218 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	09da      	lsrs	r2, r3, #7
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	3a01      	subs	r2, #1
 800520a:	60fa      	str	r2, [r7, #12]
 800520c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	e006      	b.n	8005226 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3b01      	subs	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b7f      	cmp	r3, #127	; 0x7f
 800522a:	d912      	bls.n	8005252 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	09da      	lsrs	r2, r3, #7
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3b01      	subs	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	3a01      	subs	r2, #1
 8005244:	60fa      	str	r2, [r7, #12]
 8005246:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800524a:	b2da      	uxtb	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	e006      	b.n	8005260 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3b01      	subs	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	b2da      	uxtb	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005260:	4b37      	ldr	r3, [pc, #220]	; (8005340 <_SendPacket+0x1c8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005266:	4b35      	ldr	r3, [pc, #212]	; (800533c <_SendPacket+0x1c4>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	623b      	str	r3, [r7, #32]
 8005278:	e00b      	b.n	8005292 <_SendPacket+0x11a>
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	b2da      	uxtb	r2, r3
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	1c59      	adds	r1, r3, #1
 8005282:	6279      	str	r1, [r7, #36]	; 0x24
 8005284:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	09db      	lsrs	r3, r3, #7
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	2b7f      	cmp	r3, #127	; 0x7f
 8005296:	d8f0      	bhi.n	800527a <_SendPacket+0x102>
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	627a      	str	r2, [r7, #36]	; 0x24
 800529e:	6a3a      	ldr	r2, [r7, #32]
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	701a      	strb	r2, [r3, #0]
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80052a8:	4b24      	ldr	r3, [pc, #144]	; (800533c <_SendPacket+0x1c4>)
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	4618      	mov	r0, r3
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	f7fa ffaa 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80052bc:	4603      	mov	r3, r0
 80052be:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80052c0:	f7ff fbee 	bl	8004aa0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80052ca:	4a1c      	ldr	r2, [pc, #112]	; (800533c <_SendPacket+0x1c4>)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	60d3      	str	r3, [r2, #12]
 80052d0:	e00b      	b.n	80052ea <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80052d2:	4b1a      	ldr	r3, [pc, #104]	; (800533c <_SendPacket+0x1c4>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	3301      	adds	r3, #1
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	4b18      	ldr	r3, [pc, #96]	; (800533c <_SendPacket+0x1c4>)
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	e004      	b.n	80052ea <_SendPacket+0x172>
    goto SendDone;
 80052e0:	bf00      	nop
 80052e2:	e002      	b.n	80052ea <_SendPacket+0x172>
      goto SendDone;
 80052e4:	bf00      	nop
 80052e6:	e000      	b.n	80052ea <_SendPacket+0x172>
      goto SendDone;
 80052e8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80052ea:	4b14      	ldr	r3, [pc, #80]	; (800533c <_SendPacket+0x1c4>)
 80052ec:	7e1b      	ldrb	r3, [r3, #24]
 80052ee:	4619      	mov	r1, r3
 80052f0:	4a14      	ldr	r2, [pc, #80]	; (8005344 <_SendPacket+0x1cc>)
 80052f2:	460b      	mov	r3, r1
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	440b      	add	r3, r1
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	4413      	add	r3, r2
 80052fc:	336c      	adds	r3, #108	; 0x6c
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	4b0e      	ldr	r3, [pc, #56]	; (800533c <_SendPacket+0x1c4>)
 8005302:	7e1b      	ldrb	r3, [r3, #24]
 8005304:	4618      	mov	r0, r3
 8005306:	490f      	ldr	r1, [pc, #60]	; (8005344 <_SendPacket+0x1cc>)
 8005308:	4603      	mov	r3, r0
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	4403      	add	r3, r0
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	440b      	add	r3, r1
 8005312:	3370      	adds	r3, #112	; 0x70
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d00b      	beq.n	8005332 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800531a:	4b08      	ldr	r3, [pc, #32]	; (800533c <_SendPacket+0x1c4>)
 800531c:	789b      	ldrb	r3, [r3, #2]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d107      	bne.n	8005332 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <_SendPacket+0x1c4>)
 8005324:	2201      	movs	r2, #1
 8005326:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005328:	f7ff fe40 	bl	8004fac <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800532c:	4b03      	ldr	r3, [pc, #12]	; (800533c <_SendPacket+0x1c4>)
 800532e:	2200      	movs	r2, #0
 8005330:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005332:	bf00      	nop
 8005334:	3728      	adds	r7, #40	; 0x28
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	2001337c 	.word	0x2001337c
 8005340:	e0001004 	.word	0xe0001004
 8005344:	20012ec4 	.word	0x20012ec4

08005348 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005350:	f3ef 8311 	mrs	r3, BASEPRI
 8005354:	f04f 0120 	mov.w	r1, #32
 8005358:	f381 8811 	msr	BASEPRI, r1
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	4808      	ldr	r0, [pc, #32]	; (8005380 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005360:	f7ff fe17 	bl	8004f92 <_PreparePacket>
 8005364:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	68b8      	ldr	r0, [r7, #8]
 800536c:	f7ff ff04 	bl	8005178 <_SendPacket>
  RECORD_END();
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f383 8811 	msr	BASEPRI, r3
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	200133ac 	.word	0x200133ac

08005384 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800538e:	f3ef 8311 	mrs	r3, BASEPRI
 8005392:	f04f 0120 	mov.w	r1, #32
 8005396:	f381 8811 	msr	BASEPRI, r1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	4816      	ldr	r0, [pc, #88]	; (80053f8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800539e:	f7ff fdf8 	bl	8004f92 <_PreparePacket>
 80053a2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	e00b      	b.n	80053ca <SEGGER_SYSVIEW_RecordU32+0x46>
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	1c59      	adds	r1, r3, #1
 80053ba:	61f9      	str	r1, [r7, #28]
 80053bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	09db      	lsrs	r3, r3, #7
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b7f      	cmp	r3, #127	; 0x7f
 80053ce:	d8f0      	bhi.n	80053b2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	61fa      	str	r2, [r7, #28]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	6938      	ldr	r0, [r7, #16]
 80053e6:	f7ff fec7 	bl	8005178 <_SendPacket>
  RECORD_END();
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f383 8811 	msr	BASEPRI, r3
}
 80053f0:	bf00      	nop
 80053f2:	3720      	adds	r7, #32
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	200133ac 	.word	0x200133ac

080053fc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08c      	sub	sp, #48	; 0x30
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005408:	f3ef 8311 	mrs	r3, BASEPRI
 800540c:	f04f 0120 	mov.w	r1, #32
 8005410:	f381 8811 	msr	BASEPRI, r1
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	4825      	ldr	r0, [pc, #148]	; (80054ac <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005418:	f7ff fdbb 	bl	8004f92 <_PreparePacket>
 800541c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
 800542a:	e00b      	b.n	8005444 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	b2da      	uxtb	r2, r3
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005436:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	09db      	lsrs	r3, r3, #7
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	2b7f      	cmp	r3, #127	; 0x7f
 8005448:	d8f0      	bhi.n	800542c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	623b      	str	r3, [r7, #32]
 8005462:	e00b      	b.n	800547c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	1c59      	adds	r1, r3, #1
 800546c:	6279      	str	r1, [r7, #36]	; 0x24
 800546e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	09db      	lsrs	r3, r3, #7
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	2b7f      	cmp	r3, #127	; 0x7f
 8005480:	d8f0      	bhi.n	8005464 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	627a      	str	r2, [r7, #36]	; 0x24
 8005488:	6a3a      	ldr	r2, [r7, #32]
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	6979      	ldr	r1, [r7, #20]
 8005496:	69b8      	ldr	r0, [r7, #24]
 8005498:	f7ff fe6e 	bl	8005178 <_SendPacket>
  RECORD_END();
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f383 8811 	msr	BASEPRI, r3
}
 80054a2:	bf00      	nop
 80054a4:	3730      	adds	r7, #48	; 0x30
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	200133ac 	.word	0x200133ac

080054b0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08e      	sub	sp, #56	; 0x38
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80054be:	f3ef 8311 	mrs	r3, BASEPRI
 80054c2:	f04f 0120 	mov.w	r1, #32
 80054c6:	f381 8811 	msr	BASEPRI, r1
 80054ca:	61fb      	str	r3, [r7, #28]
 80054cc:	4832      	ldr	r0, [pc, #200]	; (8005598 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80054ce:	f7ff fd60 	bl	8004f92 <_PreparePacket>
 80054d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	633b      	str	r3, [r7, #48]	; 0x30
 80054e0:	e00b      	b.n	80054fa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	1c59      	adds	r1, r3, #1
 80054ea:	6379      	str	r1, [r7, #52]	; 0x34
 80054ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	09db      	lsrs	r3, r3, #7
 80054f8:	633b      	str	r3, [r7, #48]	; 0x30
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	2b7f      	cmp	r3, #127	; 0x7f
 80054fe:	d8f0      	bhi.n	80054e2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	637a      	str	r2, [r7, #52]	; 0x34
 8005506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28
 8005518:	e00b      	b.n	8005532 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	b2da      	uxtb	r2, r3
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	1c59      	adds	r1, r3, #1
 8005522:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005524:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	09db      	lsrs	r3, r3, #7
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	2b7f      	cmp	r3, #127	; 0x7f
 8005536:	d8f0      	bhi.n	800551a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800553e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	701a      	strb	r2, [r3, #0]
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	623b      	str	r3, [r7, #32]
 8005550:	e00b      	b.n	800556a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	b2da      	uxtb	r2, r3
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	1c59      	adds	r1, r3, #1
 800555a:	6279      	str	r1, [r7, #36]	; 0x24
 800555c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	09db      	lsrs	r3, r3, #7
 8005568:	623b      	str	r3, [r7, #32]
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	2b7f      	cmp	r3, #127	; 0x7f
 800556e:	d8f0      	bhi.n	8005552 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	627a      	str	r2, [r7, #36]	; 0x24
 8005576:	6a3a      	ldr	r2, [r7, #32]
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	6979      	ldr	r1, [r7, #20]
 8005584:	69b8      	ldr	r0, [r7, #24]
 8005586:	f7ff fdf7 	bl	8005178 <_SendPacket>
  RECORD_END();
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f383 8811 	msr	BASEPRI, r3
}
 8005590:	bf00      	nop
 8005592:	3738      	adds	r7, #56	; 0x38
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	200133ac 	.word	0x200133ac

0800559c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b090      	sub	sp, #64	; 0x40
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80055aa:	f3ef 8311 	mrs	r3, BASEPRI
 80055ae:	f04f 0120 	mov.w	r1, #32
 80055b2:	f381 8811 	msr	BASEPRI, r1
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	4840      	ldr	r0, [pc, #256]	; (80056bc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80055ba:	f7ff fcea 	bl	8004f92 <_PreparePacket>
 80055be:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80055cc:	e00b      	b.n	80055e6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d4:	1c59      	adds	r1, r3, #1
 80055d6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80055d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	09db      	lsrs	r3, r3, #7
 80055e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	2b7f      	cmp	r3, #127	; 0x7f
 80055ea:	d8f0      	bhi.n	80055ce <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80055ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	633b      	str	r3, [r7, #48]	; 0x30
 8005604:	e00b      	b.n	800561e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	b2da      	uxtb	r2, r3
 800560a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560c:	1c59      	adds	r1, r3, #1
 800560e:	6379      	str	r1, [r7, #52]	; 0x34
 8005610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	09db      	lsrs	r3, r3, #7
 800561c:	633b      	str	r3, [r7, #48]	; 0x30
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	2b7f      	cmp	r3, #127	; 0x7f
 8005622:	d8f0      	bhi.n	8005606 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	637a      	str	r2, [r7, #52]	; 0x34
 800562a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	62bb      	str	r3, [r7, #40]	; 0x28
 800563c:	e00b      	b.n	8005656 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	09db      	lsrs	r3, r3, #7
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	2b7f      	cmp	r3, #127	; 0x7f
 800565a:	d8f0      	bhi.n	800563e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
 8005670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005672:	623b      	str	r3, [r7, #32]
 8005674:	e00b      	b.n	800568e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	1c59      	adds	r1, r3, #1
 800567e:	6279      	str	r1, [r7, #36]	; 0x24
 8005680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	09db      	lsrs	r3, r3, #7
 800568c:	623b      	str	r3, [r7, #32]
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	2b7f      	cmp	r3, #127	; 0x7f
 8005692:	d8f0      	bhi.n	8005676 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	627a      	str	r2, [r7, #36]	; 0x24
 800569a:	6a3a      	ldr	r2, [r7, #32]
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	69b8      	ldr	r0, [r7, #24]
 80056aa:	f7ff fd65 	bl	8005178 <_SendPacket>
  RECORD_END();
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f383 8811 	msr	BASEPRI, r3
}
 80056b4:	bf00      	nop
 80056b6:	3740      	adds	r7, #64	; 0x40
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	200133ac 	.word	0x200133ac

080056c0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08c      	sub	sp, #48	; 0x30
 80056c4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80056c6:	4b59      	ldr	r3, [pc, #356]	; (800582c <SEGGER_SYSVIEW_Start+0x16c>)
 80056c8:	2201      	movs	r2, #1
 80056ca:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80056cc:	f3ef 8311 	mrs	r3, BASEPRI
 80056d0:	f04f 0120 	mov.w	r1, #32
 80056d4:	f381 8811 	msr	BASEPRI, r1
 80056d8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80056da:	4b54      	ldr	r3, [pc, #336]	; (800582c <SEGGER_SYSVIEW_Start+0x16c>)
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	220a      	movs	r2, #10
 80056e0:	4953      	ldr	r1, [pc, #332]	; (8005830 <SEGGER_SYSVIEW_Start+0x170>)
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fa fd94 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80056ee:	f7ff f9d7 	bl	8004aa0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80056f2:	200a      	movs	r0, #10
 80056f4:	f7ff fe28 	bl	8005348 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80056f8:	f3ef 8311 	mrs	r3, BASEPRI
 80056fc:	f04f 0120 	mov.w	r1, #32
 8005700:	f381 8811 	msr	BASEPRI, r1
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	484b      	ldr	r0, [pc, #300]	; (8005834 <SEGGER_SYSVIEW_Start+0x174>)
 8005708:	f7ff fc43 	bl	8004f92 <_PreparePacket>
 800570c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005716:	4b45      	ldr	r3, [pc, #276]	; (800582c <SEGGER_SYSVIEW_Start+0x16c>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28
 800571c:	e00b      	b.n	8005736 <SEGGER_SYSVIEW_Start+0x76>
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	b2da      	uxtb	r2, r3
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	1c59      	adds	r1, r3, #1
 8005726:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800572c:	b2d2      	uxtb	r2, r2
 800572e:	701a      	strb	r2, [r3, #0]
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	09db      	lsrs	r3, r3, #7
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	2b7f      	cmp	r3, #127	; 0x7f
 800573a:	d8f0      	bhi.n	800571e <SEGGER_SYSVIEW_Start+0x5e>
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	701a      	strb	r2, [r3, #0]
 8005748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
 8005750:	4b36      	ldr	r3, [pc, #216]	; (800582c <SEGGER_SYSVIEW_Start+0x16c>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	623b      	str	r3, [r7, #32]
 8005756:	e00b      	b.n	8005770 <SEGGER_SYSVIEW_Start+0xb0>
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	b2da      	uxtb	r2, r3
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	1c59      	adds	r1, r3, #1
 8005760:	6279      	str	r1, [r7, #36]	; 0x24
 8005762:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	09db      	lsrs	r3, r3, #7
 800576e:	623b      	str	r3, [r7, #32]
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	2b7f      	cmp	r3, #127	; 0x7f
 8005774:	d8f0      	bhi.n	8005758 <SEGGER_SYSVIEW_Start+0x98>
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	627a      	str	r2, [r7, #36]	; 0x24
 800577c:	6a3a      	ldr	r2, [r7, #32]
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	4b28      	ldr	r3, [pc, #160]	; (800582c <SEGGER_SYSVIEW_Start+0x16c>)
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	61bb      	str	r3, [r7, #24]
 8005790:	e00b      	b.n	80057aa <SEGGER_SYSVIEW_Start+0xea>
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	1c59      	adds	r1, r3, #1
 800579a:	61f9      	str	r1, [r7, #28]
 800579c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	09db      	lsrs	r3, r3, #7
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b7f      	cmp	r3, #127	; 0x7f
 80057ae:	d8f0      	bhi.n	8005792 <SEGGER_SYSVIEW_Start+0xd2>
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	61fa      	str	r2, [r7, #28]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	e00b      	b.n	80057e2 <SEGGER_SYSVIEW_Start+0x122>
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	1c59      	adds	r1, r3, #1
 80057d2:	6179      	str	r1, [r7, #20]
 80057d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	09db      	lsrs	r3, r3, #7
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b7f      	cmp	r3, #127	; 0x7f
 80057e6:	d8f0      	bhi.n	80057ca <SEGGER_SYSVIEW_Start+0x10a>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	617a      	str	r2, [r7, #20]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80057f8:	2218      	movs	r2, #24
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff fcbb 	bl	8005178 <_SendPacket>
      RECORD_END();
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005808:	4b08      	ldr	r3, [pc, #32]	; (800582c <SEGGER_SYSVIEW_Start+0x16c>)
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005810:	4b06      	ldr	r3, [pc, #24]	; (800582c <SEGGER_SYSVIEW_Start+0x16c>)
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005816:	f000 f9c7 	bl	8005ba8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800581a:	f000 f9b1 	bl	8005b80 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800581e:	f000 fc5f 	bl	80060e0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005822:	bf00      	nop
 8005824:	3730      	adds	r7, #48	; 0x30
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	2001337c 	.word	0x2001337c
 8005830:	080073ec 	.word	0x080073ec
 8005834:	200133ac 	.word	0x200133ac

08005838 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800583e:	f3ef 8311 	mrs	r3, BASEPRI
 8005842:	f04f 0120 	mov.w	r1, #32
 8005846:	f381 8811 	msr	BASEPRI, r1
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	480b      	ldr	r0, [pc, #44]	; (800587c <SEGGER_SYSVIEW_Stop+0x44>)
 800584e:	f7ff fba0 	bl	8004f92 <_PreparePacket>
 8005852:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <SEGGER_SYSVIEW_Stop+0x48>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d007      	beq.n	800586c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800585c:	220b      	movs	r2, #11
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6838      	ldr	r0, [r7, #0]
 8005862:	f7ff fc89 	bl	8005178 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <SEGGER_SYSVIEW_Stop+0x48>)
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f383 8811 	msr	BASEPRI, r3
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	200133ac 	.word	0x200133ac
 8005880:	2001337c 	.word	0x2001337c

08005884 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005884:	b580      	push	{r7, lr}
 8005886:	b08c      	sub	sp, #48	; 0x30
 8005888:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800588a:	f3ef 8311 	mrs	r3, BASEPRI
 800588e:	f04f 0120 	mov.w	r1, #32
 8005892:	f381 8811 	msr	BASEPRI, r1
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	4845      	ldr	r0, [pc, #276]	; (80059b0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800589a:	f7ff fb7a 	bl	8004f92 <_PreparePacket>
 800589e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058a8:	4b42      	ldr	r3, [pc, #264]	; (80059b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ae:	e00b      	b.n	80058c8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	1c59      	adds	r1, r3, #1
 80058b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c4:	09db      	lsrs	r3, r3, #7
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	2b7f      	cmp	r3, #127	; 0x7f
 80058cc:	d8f0      	bhi.n	80058b0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
 80058e2:	4b34      	ldr	r3, [pc, #208]	; (80059b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	623b      	str	r3, [r7, #32]
 80058e8:	e00b      	b.n	8005902 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	1c59      	adds	r1, r3, #1
 80058f2:	6279      	str	r1, [r7, #36]	; 0x24
 80058f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	09db      	lsrs	r3, r3, #7
 8005900:	623b      	str	r3, [r7, #32]
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2b7f      	cmp	r3, #127	; 0x7f
 8005906:	d8f0      	bhi.n	80058ea <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	627a      	str	r2, [r7, #36]	; 0x24
 800590e:	6a3a      	ldr	r2, [r7, #32]
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	e00b      	b.n	800593c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	b2da      	uxtb	r2, r3
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	1c59      	adds	r1, r3, #1
 800592c:	61f9      	str	r1, [r7, #28]
 800592e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	09db      	lsrs	r3, r3, #7
 800593a:	61bb      	str	r3, [r7, #24]
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b7f      	cmp	r3, #127	; 0x7f
 8005940:	d8f0      	bhi.n	8005924 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	61fa      	str	r2, [r7, #28]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	2300      	movs	r3, #0
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	e00b      	b.n	8005974 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	b2da      	uxtb	r2, r3
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	1c59      	adds	r1, r3, #1
 8005964:	6179      	str	r1, [r7, #20]
 8005966:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	09db      	lsrs	r3, r3, #7
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b7f      	cmp	r3, #127	; 0x7f
 8005978:	d8f0      	bhi.n	800595c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	617a      	str	r2, [r7, #20]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800598a:	2218      	movs	r2, #24
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	68b8      	ldr	r0, [r7, #8]
 8005990:	f7ff fbf2 	bl	8005178 <_SendPacket>
  RECORD_END();
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80059a2:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	4798      	blx	r3
  }
}
 80059a8:	bf00      	nop
 80059aa:	3730      	adds	r7, #48	; 0x30
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	200133ac 	.word	0x200133ac
 80059b4:	2001337c 	.word	0x2001337c

080059b8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b092      	sub	sp, #72	; 0x48
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80059c0:	f3ef 8311 	mrs	r3, BASEPRI
 80059c4:	f04f 0120 	mov.w	r1, #32
 80059c8:	f381 8811 	msr	BASEPRI, r1
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	486a      	ldr	r0, [pc, #424]	; (8005b78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80059d0:	f7ff fadf 	bl	8004f92 <_PreparePacket>
 80059d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	647b      	str	r3, [r7, #68]	; 0x44
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b66      	ldr	r3, [pc, #408]	; (8005b7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	643b      	str	r3, [r7, #64]	; 0x40
 80059ea:	e00b      	b.n	8005a04 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80059ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f2:	1c59      	adds	r1, r3, #1
 80059f4:	6479      	str	r1, [r7, #68]	; 0x44
 80059f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a00:	09db      	lsrs	r3, r3, #7
 8005a02:	643b      	str	r3, [r7, #64]	; 0x40
 8005a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a06:	2b7f      	cmp	r3, #127	; 0x7f
 8005a08:	d8f0      	bhi.n	80059ec <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	647a      	str	r2, [r7, #68]	; 0x44
 8005a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a24:	e00b      	b.n	8005a3e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2c:	1c59      	adds	r1, r3, #1
 8005a2e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005a30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	09db      	lsrs	r3, r3, #7
 8005a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	2b7f      	cmp	r3, #127	; 0x7f
 8005a42:	d8f0      	bhi.n	8005a26 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a52:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f7ff fa4b 	bl	8004ef8 <_EncodeStr>
 8005a62:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005a64:	2209      	movs	r2, #9
 8005a66:	68f9      	ldr	r1, [r7, #12]
 8005a68:	6938      	ldr	r0, [r7, #16]
 8005a6a:	f7ff fb85 	bl	8005178 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b40      	ldr	r3, [pc, #256]	; (8005b7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	633b      	str	r3, [r7, #48]	; 0x30
 8005a82:	e00b      	b.n	8005a9c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8a:	1c59      	adds	r1, r3, #1
 8005a8c:	6379      	str	r1, [r7, #52]	; 0x34
 8005a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	09db      	lsrs	r3, r3, #7
 8005a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa0:	d8f0      	bhi.n	8005a84 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	637a      	str	r2, [r7, #52]	; 0x34
 8005aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005abc:	e00b      	b.n	8005ad6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	1c59      	adds	r1, r3, #1
 8005ac6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ac8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	09db      	lsrs	r3, r3, #7
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8005ada:	d8f0      	bhi.n	8005abe <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	623b      	str	r3, [r7, #32]
 8005af6:	e00b      	b.n	8005b10 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	6279      	str	r1, [r7, #36]	; 0x24
 8005b02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	09db      	lsrs	r3, r3, #7
 8005b0e:	623b      	str	r3, [r7, #32]
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	2b7f      	cmp	r3, #127	; 0x7f
 8005b14:	d8f0      	bhi.n	8005af8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	627a      	str	r2, [r7, #36]	; 0x24
 8005b1c:	6a3a      	ldr	r2, [r7, #32]
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e00b      	b.n	8005b48 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	1c59      	adds	r1, r3, #1
 8005b38:	61f9      	str	r1, [r7, #28]
 8005b3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	09db      	lsrs	r3, r3, #7
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b4c:	d8f0      	bhi.n	8005b30 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	61fa      	str	r2, [r7, #28]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005b5e:	2215      	movs	r2, #21
 8005b60:	68f9      	ldr	r1, [r7, #12]
 8005b62:	6938      	ldr	r0, [r7, #16]
 8005b64:	f7ff fb08 	bl	8005178 <_SendPacket>
  RECORD_END();
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f383 8811 	msr	BASEPRI, r3
}
 8005b6e:	bf00      	nop
 8005b70:	3748      	adds	r7, #72	; 0x48
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	200133ac 	.word	0x200133ac
 8005b7c:	2001337c 	.word	0x2001337c

08005b80 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005b84:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005b96:	4b03      	ldr	r3, [pc, #12]	; (8005ba4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4798      	blx	r3
  }
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	2001337c 	.word	0x2001337c

08005ba8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005ba8:	b590      	push	{r4, r7, lr}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005bae:	4b15      	ldr	r3, [pc, #84]	; (8005c04 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01a      	beq.n	8005bec <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005bb6:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d015      	beq.n	8005bec <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005bc0:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4798      	blx	r3
 8005bc8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005bcc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005bce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	000a      	movs	r2, r1
 8005bdc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005bde:	4613      	mov	r3, r2
 8005be0:	461a      	mov	r2, r3
 8005be2:	4621      	mov	r1, r4
 8005be4:	200d      	movs	r0, #13
 8005be6:	f7ff fc09 	bl	80053fc <SEGGER_SYSVIEW_RecordU32x2>
 8005bea:	e006      	b.n	8005bfa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	200c      	movs	r0, #12
 8005bf4:	f7ff fbc6 	bl	8005384 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd90      	pop	{r4, r7, pc}
 8005c02:	bf00      	nop
 8005c04:	2001337c 	.word	0x2001337c
 8005c08:	e0001004 	.word	0xe0001004

08005c0c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c12:	f3ef 8311 	mrs	r3, BASEPRI
 8005c16:	f04f 0120 	mov.w	r1, #32
 8005c1a:	f381 8811 	msr	BASEPRI, r1
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	4819      	ldr	r0, [pc, #100]	; (8005c88 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005c22:	f7ff f9b6 	bl	8004f92 <_PreparePacket>
 8005c26:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005c2c:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c34:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	e00b      	b.n	8005c58 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	1c59      	adds	r1, r3, #1
 8005c48:	6179      	str	r1, [r7, #20]
 8005c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	09db      	lsrs	r3, r3, #7
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c5c:	d8f0      	bhi.n	8005c40 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	617a      	str	r2, [r7, #20]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005c6e:	2202      	movs	r2, #2
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	68b8      	ldr	r0, [r7, #8]
 8005c74:	f7ff fa80 	bl	8005178 <_SendPacket>
  RECORD_END();
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f383 8811 	msr	BASEPRI, r3
}
 8005c7e:	bf00      	nop
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	200133ac 	.word	0x200133ac
 8005c8c:	e000ed04 	.word	0xe000ed04

08005c90 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c96:	f3ef 8311 	mrs	r3, BASEPRI
 8005c9a:	f04f 0120 	mov.w	r1, #32
 8005c9e:	f381 8811 	msr	BASEPRI, r1
 8005ca2:	607b      	str	r3, [r7, #4]
 8005ca4:	4807      	ldr	r0, [pc, #28]	; (8005cc4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005ca6:	f7ff f974 	bl	8004f92 <_PreparePacket>
 8005caa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005cac:	2203      	movs	r2, #3
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6838      	ldr	r0, [r7, #0]
 8005cb2:	f7ff fa61 	bl	8005178 <_SendPacket>
  RECORD_END();
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f383 8811 	msr	BASEPRI, r3
}
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	200133ac 	.word	0x200133ac

08005cc8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005cce:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd2:	f04f 0120 	mov.w	r1, #32
 8005cd6:	f381 8811 	msr	BASEPRI, r1
 8005cda:	607b      	str	r3, [r7, #4]
 8005cdc:	4807      	ldr	r0, [pc, #28]	; (8005cfc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005cde:	f7ff f958 	bl	8004f92 <_PreparePacket>
 8005ce2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005ce4:	2212      	movs	r2, #18
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6838      	ldr	r0, [r7, #0]
 8005cea:	f7ff fa45 	bl	8005178 <_SendPacket>
  RECORD_END();
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f383 8811 	msr	BASEPRI, r3
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	200133ac 	.word	0x200133ac

08005d00 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d06:	f3ef 8311 	mrs	r3, BASEPRI
 8005d0a:	f04f 0120 	mov.w	r1, #32
 8005d0e:	f381 8811 	msr	BASEPRI, r1
 8005d12:	607b      	str	r3, [r7, #4]
 8005d14:	4807      	ldr	r0, [pc, #28]	; (8005d34 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005d16:	f7ff f93c 	bl	8004f92 <_PreparePacket>
 8005d1a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005d1c:	2211      	movs	r2, #17
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6838      	ldr	r0, [r7, #0]
 8005d22:	f7ff fa29 	bl	8005178 <_SendPacket>
  RECORD_END();
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f383 8811 	msr	BASEPRI, r3
}
 8005d2c:	bf00      	nop
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	200133ac 	.word	0x200133ac

08005d38 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d40:	f3ef 8311 	mrs	r3, BASEPRI
 8005d44:	f04f 0120 	mov.w	r1, #32
 8005d48:	f381 8811 	msr	BASEPRI, r1
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	4819      	ldr	r0, [pc, #100]	; (8005db4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005d50:	f7ff f91f 	bl	8004f92 <_PreparePacket>
 8005d54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005d5a:	4b17      	ldr	r3, [pc, #92]	; (8005db8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	e00b      	b.n	8005d86 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	1c59      	adds	r1, r3, #1
 8005d76:	61f9      	str	r1, [r7, #28]
 8005d78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	09db      	lsrs	r3, r3, #7
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b7f      	cmp	r3, #127	; 0x7f
 8005d8a:	d8f0      	bhi.n	8005d6e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	61fa      	str	r2, [r7, #28]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	6938      	ldr	r0, [r7, #16]
 8005da2:	f7ff f9e9 	bl	8005178 <_SendPacket>
  RECORD_END();
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f383 8811 	msr	BASEPRI, r3
}
 8005dac:	bf00      	nop
 8005dae:	3720      	adds	r7, #32
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	200133ac 	.word	0x200133ac
 8005db8:	2001337c 	.word	0x2001337c

08005dbc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc8:	f04f 0120 	mov.w	r1, #32
 8005dcc:	f381 8811 	msr	BASEPRI, r1
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	4819      	ldr	r0, [pc, #100]	; (8005e38 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005dd4:	f7ff f8dd 	bl	8004f92 <_PreparePacket>
 8005dd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005dde:	4b17      	ldr	r3, [pc, #92]	; (8005e3c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e00b      	b.n	8005e0a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	1c59      	adds	r1, r3, #1
 8005dfa:	61f9      	str	r1, [r7, #28]
 8005dfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	09db      	lsrs	r3, r3, #7
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e0e:	d8f0      	bhi.n	8005df2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	61fa      	str	r2, [r7, #28]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005e20:	2204      	movs	r2, #4
 8005e22:	68f9      	ldr	r1, [r7, #12]
 8005e24:	6938      	ldr	r0, [r7, #16]
 8005e26:	f7ff f9a7 	bl	8005178 <_SendPacket>
  RECORD_END();
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f383 8811 	msr	BASEPRI, r3
}
 8005e30:	bf00      	nop
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	200133ac 	.word	0x200133ac
 8005e3c:	2001337c 	.word	0x2001337c

08005e40 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e48:	f3ef 8311 	mrs	r3, BASEPRI
 8005e4c:	f04f 0120 	mov.w	r1, #32
 8005e50:	f381 8811 	msr	BASEPRI, r1
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	4819      	ldr	r0, [pc, #100]	; (8005ebc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005e58:	f7ff f89b 	bl	8004f92 <_PreparePacket>
 8005e5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e62:	4b17      	ldr	r3, [pc, #92]	; (8005ec0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	61fb      	str	r3, [r7, #28]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	61bb      	str	r3, [r7, #24]
 8005e74:	e00b      	b.n	8005e8e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	1c59      	adds	r1, r3, #1
 8005e7e:	61f9      	str	r1, [r7, #28]
 8005e80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e84:	b2d2      	uxtb	r2, r2
 8005e86:	701a      	strb	r2, [r3, #0]
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	09db      	lsrs	r3, r3, #7
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	2b7f      	cmp	r3, #127	; 0x7f
 8005e92:	d8f0      	bhi.n	8005e76 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	61fa      	str	r2, [r7, #28]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005ea4:	2206      	movs	r2, #6
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	6938      	ldr	r0, [r7, #16]
 8005eaa:	f7ff f965 	bl	8005178 <_SendPacket>
  RECORD_END();
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f383 8811 	msr	BASEPRI, r3
}
 8005eb4:	bf00      	nop
 8005eb6:	3720      	adds	r7, #32
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	200133ac 	.word	0x200133ac
 8005ec0:	2001337c 	.word	0x2001337c

08005ec4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08a      	sub	sp, #40	; 0x28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ece:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed2:	f04f 0120 	mov.w	r1, #32
 8005ed6:	f381 8811 	msr	BASEPRI, r1
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	4827      	ldr	r0, [pc, #156]	; (8005f7c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005ede:	f7ff f858 	bl	8004f92 <_PreparePacket>
 8005ee2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ee8:	4b25      	ldr	r3, [pc, #148]	; (8005f80 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	623b      	str	r3, [r7, #32]
 8005efa:	e00b      	b.n	8005f14 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	1c59      	adds	r1, r3, #1
 8005f04:	6279      	str	r1, [r7, #36]	; 0x24
 8005f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	09db      	lsrs	r3, r3, #7
 8005f12:	623b      	str	r3, [r7, #32]
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	2b7f      	cmp	r3, #127	; 0x7f
 8005f18:	d8f0      	bhi.n	8005efc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	627a      	str	r2, [r7, #36]	; 0x24
 8005f20:	6a3a      	ldr	r2, [r7, #32]
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	e00b      	b.n	8005f4c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	1c59      	adds	r1, r3, #1
 8005f3c:	61f9      	str	r1, [r7, #28]
 8005f3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	09db      	lsrs	r3, r3, #7
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f50:	d8f0      	bhi.n	8005f34 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	61fa      	str	r2, [r7, #28]
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005f62:	2207      	movs	r2, #7
 8005f64:	68f9      	ldr	r1, [r7, #12]
 8005f66:	6938      	ldr	r0, [r7, #16]
 8005f68:	f7ff f906 	bl	8005178 <_SendPacket>
  RECORD_END();
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f383 8811 	msr	BASEPRI, r3
}
 8005f72:	bf00      	nop
 8005f74:	3728      	adds	r7, #40	; 0x28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	200133ac 	.word	0x200133ac
 8005f80:	2001337c 	.word	0x2001337c

08005f84 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005f8c:	4b04      	ldr	r3, [pc, #16]	; (8005fa0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	1ad3      	subs	r3, r2, r3
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	2001337c 	.word	0x2001337c

08005fa4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	; 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005fae:	4b3b      	ldr	r3, [pc, #236]	; (800609c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d06d      	beq.n	8006092 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005fb6:	4b39      	ldr	r3, [pc, #228]	; (800609c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc0:	e008      	b.n	8005fd4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d3f2      	bcc.n	8005fc2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005fdc:	e000      	b.n	8005fe0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005fde:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d055      	beq.n	8006092 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fea:	f04f 0120 	mov.w	r1, #32
 8005fee:	f381 8811 	msr	BASEPRI, r1
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	482a      	ldr	r0, [pc, #168]	; (80060a0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005ff6:	f7fe ffcc 	bl	8004f92 <_PreparePacket>
 8005ffa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	623b      	str	r3, [r7, #32]
 8006008:	e00b      	b.n	8006022 <SEGGER_SYSVIEW_SendModule+0x7e>
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	b2da      	uxtb	r2, r3
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	1c59      	adds	r1, r3, #1
 8006012:	6279      	str	r1, [r7, #36]	; 0x24
 8006014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	09db      	lsrs	r3, r3, #7
 8006020:	623b      	str	r3, [r7, #32]
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	2b7f      	cmp	r3, #127	; 0x7f
 8006026:	d8f0      	bhi.n	800600a <SEGGER_SYSVIEW_SendModule+0x66>
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	627a      	str	r2, [r7, #36]	; 0x24
 800602e:	6a3a      	ldr	r2, [r7, #32]
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	61fb      	str	r3, [r7, #28]
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	e00b      	b.n	800605c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	b2da      	uxtb	r2, r3
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	1c59      	adds	r1, r3, #1
 800604c:	61f9      	str	r1, [r7, #28]
 800604e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	09db      	lsrs	r3, r3, #7
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b7f      	cmp	r3, #127	; 0x7f
 8006060:	d8f0      	bhi.n	8006044 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	61fa      	str	r2, [r7, #28]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2280      	movs	r2, #128	; 0x80
 8006078:	4619      	mov	r1, r3
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f7fe ff3c 	bl	8004ef8 <_EncodeStr>
 8006080:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006082:	2216      	movs	r2, #22
 8006084:	68f9      	ldr	r1, [r7, #12]
 8006086:	6938      	ldr	r0, [r7, #16]
 8006088:	f7ff f876 	bl	8005178 <_SendPacket>
      RECORD_END();
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006092:	bf00      	nop
 8006094:	3730      	adds	r7, #48	; 0x30
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200133a4 	.word	0x200133a4
 80060a0:	200133ac 	.word	0x200133ac

080060a4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00f      	beq.n	80060d2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80060b2:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f2      	bne.n	80060b8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80060d2:	bf00      	nop
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	200133a4 	.word	0x200133a4

080060e0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80060e6:	f3ef 8311 	mrs	r3, BASEPRI
 80060ea:	f04f 0120 	mov.w	r1, #32
 80060ee:	f381 8811 	msr	BASEPRI, r1
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	4817      	ldr	r0, [pc, #92]	; (8006154 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80060f6:	f7fe ff4c 	bl	8004f92 <_PreparePacket>
 80060fa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	4b14      	ldr	r3, [pc, #80]	; (8006158 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	e00b      	b.n	8006124 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	b2da      	uxtb	r2, r3
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	1c59      	adds	r1, r3, #1
 8006114:	6179      	str	r1, [r7, #20]
 8006116:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	09db      	lsrs	r3, r3, #7
 8006122:	613b      	str	r3, [r7, #16]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b7f      	cmp	r3, #127	; 0x7f
 8006128:	d8f0      	bhi.n	800610c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	617a      	str	r2, [r7, #20]
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800613a:	221b      	movs	r2, #27
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	68b8      	ldr	r0, [r7, #8]
 8006140:	f7ff f81a 	bl	8005178 <_SendPacket>
  RECORD_END();
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f383 8811 	msr	BASEPRI, r3
}
 800614a:	bf00      	nop
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	200133ac 	.word	0x200133ac
 8006158:	200133a8 	.word	0x200133a8

0800615c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b08a      	sub	sp, #40	; 0x28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006164:	f3ef 8311 	mrs	r3, BASEPRI
 8006168:	f04f 0120 	mov.w	r1, #32
 800616c:	f381 8811 	msr	BASEPRI, r1
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	4827      	ldr	r0, [pc, #156]	; (8006210 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006174:	f7fe ff0d 	bl	8004f92 <_PreparePacket>
 8006178:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800617a:	2280      	movs	r2, #128	; 0x80
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	6938      	ldr	r0, [r7, #16]
 8006180:	f7fe feba 	bl	8004ef8 <_EncodeStr>
 8006184:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
 800618a:	2301      	movs	r3, #1
 800618c:	623b      	str	r3, [r7, #32]
 800618e:	e00b      	b.n	80061a8 <SEGGER_SYSVIEW_Warn+0x4c>
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	b2da      	uxtb	r2, r3
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	1c59      	adds	r1, r3, #1
 8006198:	6279      	str	r1, [r7, #36]	; 0x24
 800619a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	09db      	lsrs	r3, r3, #7
 80061a6:	623b      	str	r3, [r7, #32]
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	2b7f      	cmp	r3, #127	; 0x7f
 80061ac:	d8f0      	bhi.n	8006190 <SEGGER_SYSVIEW_Warn+0x34>
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	627a      	str	r2, [r7, #36]	; 0x24
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	61fb      	str	r3, [r7, #28]
 80061c2:	2300      	movs	r3, #0
 80061c4:	61bb      	str	r3, [r7, #24]
 80061c6:	e00b      	b.n	80061e0 <SEGGER_SYSVIEW_Warn+0x84>
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	1c59      	adds	r1, r3, #1
 80061d0:	61f9      	str	r1, [r7, #28]
 80061d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	09db      	lsrs	r3, r3, #7
 80061de:	61bb      	str	r3, [r7, #24]
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b7f      	cmp	r3, #127	; 0x7f
 80061e4:	d8f0      	bhi.n	80061c8 <SEGGER_SYSVIEW_Warn+0x6c>
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	61fa      	str	r2, [r7, #28]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80061f6:	221a      	movs	r2, #26
 80061f8:	68f9      	ldr	r1, [r7, #12]
 80061fa:	6938      	ldr	r0, [r7, #16]
 80061fc:	f7fe ffbc 	bl	8005178 <_SendPacket>
  RECORD_END();
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f383 8811 	msr	BASEPRI, r3
}
 8006206:	bf00      	nop
 8006208:	3728      	adds	r7, #40	; 0x28
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	200133ac 	.word	0x200133ac

08006214 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	2000      	movs	r0, #0
 8006228:	f7fe fe40 	bl	8004eac <SEGGER_RTT_Write>
  return len;
 800622c:	683b      	ldr	r3, [r7, #0]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <__errno>:
 8006238:	4b01      	ldr	r3, [pc, #4]	; (8006240 <__errno+0x8>)
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20000014 	.word	0x20000014

08006244 <__libc_init_array>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	4d0d      	ldr	r5, [pc, #52]	; (800627c <__libc_init_array+0x38>)
 8006248:	4c0d      	ldr	r4, [pc, #52]	; (8006280 <__libc_init_array+0x3c>)
 800624a:	1b64      	subs	r4, r4, r5
 800624c:	10a4      	asrs	r4, r4, #2
 800624e:	2600      	movs	r6, #0
 8006250:	42a6      	cmp	r6, r4
 8006252:	d109      	bne.n	8006268 <__libc_init_array+0x24>
 8006254:	4d0b      	ldr	r5, [pc, #44]	; (8006284 <__libc_init_array+0x40>)
 8006256:	4c0c      	ldr	r4, [pc, #48]	; (8006288 <__libc_init_array+0x44>)
 8006258:	f001 f864 	bl	8007324 <_init>
 800625c:	1b64      	subs	r4, r4, r5
 800625e:	10a4      	asrs	r4, r4, #2
 8006260:	2600      	movs	r6, #0
 8006262:	42a6      	cmp	r6, r4
 8006264:	d105      	bne.n	8006272 <__libc_init_array+0x2e>
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	f855 3b04 	ldr.w	r3, [r5], #4
 800626c:	4798      	blx	r3
 800626e:	3601      	adds	r6, #1
 8006270:	e7ee      	b.n	8006250 <__libc_init_array+0xc>
 8006272:	f855 3b04 	ldr.w	r3, [r5], #4
 8006276:	4798      	blx	r3
 8006278:	3601      	adds	r6, #1
 800627a:	e7f2      	b.n	8006262 <__libc_init_array+0x1e>
 800627c:	08007548 	.word	0x08007548
 8006280:	08007548 	.word	0x08007548
 8006284:	08007548 	.word	0x08007548
 8006288:	0800754c 	.word	0x0800754c

0800628c <memcmp>:
 800628c:	b510      	push	{r4, lr}
 800628e:	3901      	subs	r1, #1
 8006290:	4402      	add	r2, r0
 8006292:	4290      	cmp	r0, r2
 8006294:	d101      	bne.n	800629a <memcmp+0xe>
 8006296:	2000      	movs	r0, #0
 8006298:	e005      	b.n	80062a6 <memcmp+0x1a>
 800629a:	7803      	ldrb	r3, [r0, #0]
 800629c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80062a0:	42a3      	cmp	r3, r4
 80062a2:	d001      	beq.n	80062a8 <memcmp+0x1c>
 80062a4:	1b18      	subs	r0, r3, r4
 80062a6:	bd10      	pop	{r4, pc}
 80062a8:	3001      	adds	r0, #1
 80062aa:	e7f2      	b.n	8006292 <memcmp+0x6>

080062ac <memcpy>:
 80062ac:	440a      	add	r2, r1
 80062ae:	4291      	cmp	r1, r2
 80062b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80062b4:	d100      	bne.n	80062b8 <memcpy+0xc>
 80062b6:	4770      	bx	lr
 80062b8:	b510      	push	{r4, lr}
 80062ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062c2:	4291      	cmp	r1, r2
 80062c4:	d1f9      	bne.n	80062ba <memcpy+0xe>
 80062c6:	bd10      	pop	{r4, pc}

080062c8 <memset>:
 80062c8:	4402      	add	r2, r0
 80062ca:	4603      	mov	r3, r0
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d100      	bne.n	80062d2 <memset+0xa>
 80062d0:	4770      	bx	lr
 80062d2:	f803 1b01 	strb.w	r1, [r3], #1
 80062d6:	e7f9      	b.n	80062cc <memset+0x4>

080062d8 <rand>:
 80062d8:	4b16      	ldr	r3, [pc, #88]	; (8006334 <rand+0x5c>)
 80062da:	b510      	push	{r4, lr}
 80062dc:	681c      	ldr	r4, [r3, #0]
 80062de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062e0:	b9b3      	cbnz	r3, 8006310 <rand+0x38>
 80062e2:	2018      	movs	r0, #24
 80062e4:	f000 f866 	bl	80063b4 <malloc>
 80062e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80062ea:	b928      	cbnz	r0, 80062f8 <rand+0x20>
 80062ec:	4602      	mov	r2, r0
 80062ee:	4b12      	ldr	r3, [pc, #72]	; (8006338 <rand+0x60>)
 80062f0:	4812      	ldr	r0, [pc, #72]	; (800633c <rand+0x64>)
 80062f2:	214e      	movs	r1, #78	; 0x4e
 80062f4:	f000 f82e 	bl	8006354 <__assert_func>
 80062f8:	4a11      	ldr	r2, [pc, #68]	; (8006340 <rand+0x68>)
 80062fa:	4b12      	ldr	r3, [pc, #72]	; (8006344 <rand+0x6c>)
 80062fc:	e9c0 2300 	strd	r2, r3, [r0]
 8006300:	4b11      	ldr	r3, [pc, #68]	; (8006348 <rand+0x70>)
 8006302:	6083      	str	r3, [r0, #8]
 8006304:	230b      	movs	r3, #11
 8006306:	8183      	strh	r3, [r0, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	2300      	movs	r3, #0
 800630c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006310:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006312:	4a0e      	ldr	r2, [pc, #56]	; (800634c <rand+0x74>)
 8006314:	6920      	ldr	r0, [r4, #16]
 8006316:	6963      	ldr	r3, [r4, #20]
 8006318:	490d      	ldr	r1, [pc, #52]	; (8006350 <rand+0x78>)
 800631a:	4342      	muls	r2, r0
 800631c:	fb01 2203 	mla	r2, r1, r3, r2
 8006320:	fba0 0101 	umull	r0, r1, r0, r1
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	eb42 0001 	adc.w	r0, r2, r1
 800632a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800632e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006332:	bd10      	pop	{r4, pc}
 8006334:	20000014 	.word	0x20000014
 8006338:	080073fc 	.word	0x080073fc
 800633c:	08007413 	.word	0x08007413
 8006340:	abcd330e 	.word	0xabcd330e
 8006344:	e66d1234 	.word	0xe66d1234
 8006348:	0005deec 	.word	0x0005deec
 800634c:	5851f42d 	.word	0x5851f42d
 8006350:	4c957f2d 	.word	0x4c957f2d

08006354 <__assert_func>:
 8006354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006356:	4614      	mov	r4, r2
 8006358:	461a      	mov	r2, r3
 800635a:	4b09      	ldr	r3, [pc, #36]	; (8006380 <__assert_func+0x2c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4605      	mov	r5, r0
 8006360:	68d8      	ldr	r0, [r3, #12]
 8006362:	b14c      	cbz	r4, 8006378 <__assert_func+0x24>
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <__assert_func+0x30>)
 8006366:	9100      	str	r1, [sp, #0]
 8006368:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800636c:	4906      	ldr	r1, [pc, #24]	; (8006388 <__assert_func+0x34>)
 800636e:	462b      	mov	r3, r5
 8006370:	f000 f80e 	bl	8006390 <fiprintf>
 8006374:	f000 fcc4 	bl	8006d00 <abort>
 8006378:	4b04      	ldr	r3, [pc, #16]	; (800638c <__assert_func+0x38>)
 800637a:	461c      	mov	r4, r3
 800637c:	e7f3      	b.n	8006366 <__assert_func+0x12>
 800637e:	bf00      	nop
 8006380:	20000014 	.word	0x20000014
 8006384:	0800746e 	.word	0x0800746e
 8006388:	0800747b 	.word	0x0800747b
 800638c:	080074a9 	.word	0x080074a9

08006390 <fiprintf>:
 8006390:	b40e      	push	{r1, r2, r3}
 8006392:	b503      	push	{r0, r1, lr}
 8006394:	4601      	mov	r1, r0
 8006396:	ab03      	add	r3, sp, #12
 8006398:	4805      	ldr	r0, [pc, #20]	; (80063b0 <fiprintf+0x20>)
 800639a:	f853 2b04 	ldr.w	r2, [r3], #4
 800639e:	6800      	ldr	r0, [r0, #0]
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	f000 f919 	bl	80065d8 <_vfiprintf_r>
 80063a6:	b002      	add	sp, #8
 80063a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063ac:	b003      	add	sp, #12
 80063ae:	4770      	bx	lr
 80063b0:	20000014 	.word	0x20000014

080063b4 <malloc>:
 80063b4:	4b02      	ldr	r3, [pc, #8]	; (80063c0 <malloc+0xc>)
 80063b6:	4601      	mov	r1, r0
 80063b8:	6818      	ldr	r0, [r3, #0]
 80063ba:	f000 b86f 	b.w	800649c <_malloc_r>
 80063be:	bf00      	nop
 80063c0:	20000014 	.word	0x20000014

080063c4 <_free_r>:
 80063c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063c6:	2900      	cmp	r1, #0
 80063c8:	d044      	beq.n	8006454 <_free_r+0x90>
 80063ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ce:	9001      	str	r0, [sp, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f1a1 0404 	sub.w	r4, r1, #4
 80063d6:	bfb8      	it	lt
 80063d8:	18e4      	addlt	r4, r4, r3
 80063da:	f000 feb9 	bl	8007150 <__malloc_lock>
 80063de:	4a1e      	ldr	r2, [pc, #120]	; (8006458 <_free_r+0x94>)
 80063e0:	9801      	ldr	r0, [sp, #4]
 80063e2:	6813      	ldr	r3, [r2, #0]
 80063e4:	b933      	cbnz	r3, 80063f4 <_free_r+0x30>
 80063e6:	6063      	str	r3, [r4, #4]
 80063e8:	6014      	str	r4, [r2, #0]
 80063ea:	b003      	add	sp, #12
 80063ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063f0:	f000 beb4 	b.w	800715c <__malloc_unlock>
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	d908      	bls.n	800640a <_free_r+0x46>
 80063f8:	6825      	ldr	r5, [r4, #0]
 80063fa:	1961      	adds	r1, r4, r5
 80063fc:	428b      	cmp	r3, r1
 80063fe:	bf01      	itttt	eq
 8006400:	6819      	ldreq	r1, [r3, #0]
 8006402:	685b      	ldreq	r3, [r3, #4]
 8006404:	1949      	addeq	r1, r1, r5
 8006406:	6021      	streq	r1, [r4, #0]
 8006408:	e7ed      	b.n	80063e6 <_free_r+0x22>
 800640a:	461a      	mov	r2, r3
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	b10b      	cbz	r3, 8006414 <_free_r+0x50>
 8006410:	42a3      	cmp	r3, r4
 8006412:	d9fa      	bls.n	800640a <_free_r+0x46>
 8006414:	6811      	ldr	r1, [r2, #0]
 8006416:	1855      	adds	r5, r2, r1
 8006418:	42a5      	cmp	r5, r4
 800641a:	d10b      	bne.n	8006434 <_free_r+0x70>
 800641c:	6824      	ldr	r4, [r4, #0]
 800641e:	4421      	add	r1, r4
 8006420:	1854      	adds	r4, r2, r1
 8006422:	42a3      	cmp	r3, r4
 8006424:	6011      	str	r1, [r2, #0]
 8006426:	d1e0      	bne.n	80063ea <_free_r+0x26>
 8006428:	681c      	ldr	r4, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	6053      	str	r3, [r2, #4]
 800642e:	4421      	add	r1, r4
 8006430:	6011      	str	r1, [r2, #0]
 8006432:	e7da      	b.n	80063ea <_free_r+0x26>
 8006434:	d902      	bls.n	800643c <_free_r+0x78>
 8006436:	230c      	movs	r3, #12
 8006438:	6003      	str	r3, [r0, #0]
 800643a:	e7d6      	b.n	80063ea <_free_r+0x26>
 800643c:	6825      	ldr	r5, [r4, #0]
 800643e:	1961      	adds	r1, r4, r5
 8006440:	428b      	cmp	r3, r1
 8006442:	bf04      	itt	eq
 8006444:	6819      	ldreq	r1, [r3, #0]
 8006446:	685b      	ldreq	r3, [r3, #4]
 8006448:	6063      	str	r3, [r4, #4]
 800644a:	bf04      	itt	eq
 800644c:	1949      	addeq	r1, r1, r5
 800644e:	6021      	streq	r1, [r4, #0]
 8006450:	6054      	str	r4, [r2, #4]
 8006452:	e7ca      	b.n	80063ea <_free_r+0x26>
 8006454:	b003      	add	sp, #12
 8006456:	bd30      	pop	{r4, r5, pc}
 8006458:	20013490 	.word	0x20013490

0800645c <sbrk_aligned>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	4e0e      	ldr	r6, [pc, #56]	; (8006498 <sbrk_aligned+0x3c>)
 8006460:	460c      	mov	r4, r1
 8006462:	6831      	ldr	r1, [r6, #0]
 8006464:	4605      	mov	r5, r0
 8006466:	b911      	cbnz	r1, 800646e <sbrk_aligned+0x12>
 8006468:	f000 fb7a 	bl	8006b60 <_sbrk_r>
 800646c:	6030      	str	r0, [r6, #0]
 800646e:	4621      	mov	r1, r4
 8006470:	4628      	mov	r0, r5
 8006472:	f000 fb75 	bl	8006b60 <_sbrk_r>
 8006476:	1c43      	adds	r3, r0, #1
 8006478:	d00a      	beq.n	8006490 <sbrk_aligned+0x34>
 800647a:	1cc4      	adds	r4, r0, #3
 800647c:	f024 0403 	bic.w	r4, r4, #3
 8006480:	42a0      	cmp	r0, r4
 8006482:	d007      	beq.n	8006494 <sbrk_aligned+0x38>
 8006484:	1a21      	subs	r1, r4, r0
 8006486:	4628      	mov	r0, r5
 8006488:	f000 fb6a 	bl	8006b60 <_sbrk_r>
 800648c:	3001      	adds	r0, #1
 800648e:	d101      	bne.n	8006494 <sbrk_aligned+0x38>
 8006490:	f04f 34ff 	mov.w	r4, #4294967295
 8006494:	4620      	mov	r0, r4
 8006496:	bd70      	pop	{r4, r5, r6, pc}
 8006498:	20013494 	.word	0x20013494

0800649c <_malloc_r>:
 800649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a0:	1ccd      	adds	r5, r1, #3
 80064a2:	f025 0503 	bic.w	r5, r5, #3
 80064a6:	3508      	adds	r5, #8
 80064a8:	2d0c      	cmp	r5, #12
 80064aa:	bf38      	it	cc
 80064ac:	250c      	movcc	r5, #12
 80064ae:	2d00      	cmp	r5, #0
 80064b0:	4607      	mov	r7, r0
 80064b2:	db01      	blt.n	80064b8 <_malloc_r+0x1c>
 80064b4:	42a9      	cmp	r1, r5
 80064b6:	d905      	bls.n	80064c4 <_malloc_r+0x28>
 80064b8:	230c      	movs	r3, #12
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	2600      	movs	r6, #0
 80064be:	4630      	mov	r0, r6
 80064c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c4:	4e2e      	ldr	r6, [pc, #184]	; (8006580 <_malloc_r+0xe4>)
 80064c6:	f000 fe43 	bl	8007150 <__malloc_lock>
 80064ca:	6833      	ldr	r3, [r6, #0]
 80064cc:	461c      	mov	r4, r3
 80064ce:	bb34      	cbnz	r4, 800651e <_malloc_r+0x82>
 80064d0:	4629      	mov	r1, r5
 80064d2:	4638      	mov	r0, r7
 80064d4:	f7ff ffc2 	bl	800645c <sbrk_aligned>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	4604      	mov	r4, r0
 80064dc:	d14d      	bne.n	800657a <_malloc_r+0xde>
 80064de:	6834      	ldr	r4, [r6, #0]
 80064e0:	4626      	mov	r6, r4
 80064e2:	2e00      	cmp	r6, #0
 80064e4:	d140      	bne.n	8006568 <_malloc_r+0xcc>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	4631      	mov	r1, r6
 80064ea:	4638      	mov	r0, r7
 80064ec:	eb04 0803 	add.w	r8, r4, r3
 80064f0:	f000 fb36 	bl	8006b60 <_sbrk_r>
 80064f4:	4580      	cmp	r8, r0
 80064f6:	d13a      	bne.n	800656e <_malloc_r+0xd2>
 80064f8:	6821      	ldr	r1, [r4, #0]
 80064fa:	3503      	adds	r5, #3
 80064fc:	1a6d      	subs	r5, r5, r1
 80064fe:	f025 0503 	bic.w	r5, r5, #3
 8006502:	3508      	adds	r5, #8
 8006504:	2d0c      	cmp	r5, #12
 8006506:	bf38      	it	cc
 8006508:	250c      	movcc	r5, #12
 800650a:	4629      	mov	r1, r5
 800650c:	4638      	mov	r0, r7
 800650e:	f7ff ffa5 	bl	800645c <sbrk_aligned>
 8006512:	3001      	adds	r0, #1
 8006514:	d02b      	beq.n	800656e <_malloc_r+0xd2>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	442b      	add	r3, r5
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	e00e      	b.n	800653c <_malloc_r+0xa0>
 800651e:	6822      	ldr	r2, [r4, #0]
 8006520:	1b52      	subs	r2, r2, r5
 8006522:	d41e      	bmi.n	8006562 <_malloc_r+0xc6>
 8006524:	2a0b      	cmp	r2, #11
 8006526:	d916      	bls.n	8006556 <_malloc_r+0xba>
 8006528:	1961      	adds	r1, r4, r5
 800652a:	42a3      	cmp	r3, r4
 800652c:	6025      	str	r5, [r4, #0]
 800652e:	bf18      	it	ne
 8006530:	6059      	strne	r1, [r3, #4]
 8006532:	6863      	ldr	r3, [r4, #4]
 8006534:	bf08      	it	eq
 8006536:	6031      	streq	r1, [r6, #0]
 8006538:	5162      	str	r2, [r4, r5]
 800653a:	604b      	str	r3, [r1, #4]
 800653c:	4638      	mov	r0, r7
 800653e:	f104 060b 	add.w	r6, r4, #11
 8006542:	f000 fe0b 	bl	800715c <__malloc_unlock>
 8006546:	f026 0607 	bic.w	r6, r6, #7
 800654a:	1d23      	adds	r3, r4, #4
 800654c:	1af2      	subs	r2, r6, r3
 800654e:	d0b6      	beq.n	80064be <_malloc_r+0x22>
 8006550:	1b9b      	subs	r3, r3, r6
 8006552:	50a3      	str	r3, [r4, r2]
 8006554:	e7b3      	b.n	80064be <_malloc_r+0x22>
 8006556:	6862      	ldr	r2, [r4, #4]
 8006558:	42a3      	cmp	r3, r4
 800655a:	bf0c      	ite	eq
 800655c:	6032      	streq	r2, [r6, #0]
 800655e:	605a      	strne	r2, [r3, #4]
 8006560:	e7ec      	b.n	800653c <_malloc_r+0xa0>
 8006562:	4623      	mov	r3, r4
 8006564:	6864      	ldr	r4, [r4, #4]
 8006566:	e7b2      	b.n	80064ce <_malloc_r+0x32>
 8006568:	4634      	mov	r4, r6
 800656a:	6876      	ldr	r6, [r6, #4]
 800656c:	e7b9      	b.n	80064e2 <_malloc_r+0x46>
 800656e:	230c      	movs	r3, #12
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	4638      	mov	r0, r7
 8006574:	f000 fdf2 	bl	800715c <__malloc_unlock>
 8006578:	e7a1      	b.n	80064be <_malloc_r+0x22>
 800657a:	6025      	str	r5, [r4, #0]
 800657c:	e7de      	b.n	800653c <_malloc_r+0xa0>
 800657e:	bf00      	nop
 8006580:	20013490 	.word	0x20013490

08006584 <__sfputc_r>:
 8006584:	6893      	ldr	r3, [r2, #8]
 8006586:	3b01      	subs	r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	b410      	push	{r4}
 800658c:	6093      	str	r3, [r2, #8]
 800658e:	da08      	bge.n	80065a2 <__sfputc_r+0x1e>
 8006590:	6994      	ldr	r4, [r2, #24]
 8006592:	42a3      	cmp	r3, r4
 8006594:	db01      	blt.n	800659a <__sfputc_r+0x16>
 8006596:	290a      	cmp	r1, #10
 8006598:	d103      	bne.n	80065a2 <__sfputc_r+0x1e>
 800659a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800659e:	f000 baef 	b.w	8006b80 <__swbuf_r>
 80065a2:	6813      	ldr	r3, [r2, #0]
 80065a4:	1c58      	adds	r0, r3, #1
 80065a6:	6010      	str	r0, [r2, #0]
 80065a8:	7019      	strb	r1, [r3, #0]
 80065aa:	4608      	mov	r0, r1
 80065ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <__sfputs_r>:
 80065b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b4:	4606      	mov	r6, r0
 80065b6:	460f      	mov	r7, r1
 80065b8:	4614      	mov	r4, r2
 80065ba:	18d5      	adds	r5, r2, r3
 80065bc:	42ac      	cmp	r4, r5
 80065be:	d101      	bne.n	80065c4 <__sfputs_r+0x12>
 80065c0:	2000      	movs	r0, #0
 80065c2:	e007      	b.n	80065d4 <__sfputs_r+0x22>
 80065c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c8:	463a      	mov	r2, r7
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7ff ffda 	bl	8006584 <__sfputc_r>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d1f3      	bne.n	80065bc <__sfputs_r+0xa>
 80065d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065d8 <_vfiprintf_r>:
 80065d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	460d      	mov	r5, r1
 80065de:	b09d      	sub	sp, #116	; 0x74
 80065e0:	4614      	mov	r4, r2
 80065e2:	4698      	mov	r8, r3
 80065e4:	4606      	mov	r6, r0
 80065e6:	b118      	cbz	r0, 80065f0 <_vfiprintf_r+0x18>
 80065e8:	6983      	ldr	r3, [r0, #24]
 80065ea:	b90b      	cbnz	r3, 80065f0 <_vfiprintf_r+0x18>
 80065ec:	f000 fcaa 	bl	8006f44 <__sinit>
 80065f0:	4b89      	ldr	r3, [pc, #548]	; (8006818 <_vfiprintf_r+0x240>)
 80065f2:	429d      	cmp	r5, r3
 80065f4:	d11b      	bne.n	800662e <_vfiprintf_r+0x56>
 80065f6:	6875      	ldr	r5, [r6, #4]
 80065f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065fa:	07d9      	lsls	r1, r3, #31
 80065fc:	d405      	bmi.n	800660a <_vfiprintf_r+0x32>
 80065fe:	89ab      	ldrh	r3, [r5, #12]
 8006600:	059a      	lsls	r2, r3, #22
 8006602:	d402      	bmi.n	800660a <_vfiprintf_r+0x32>
 8006604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006606:	f000 fd3b 	bl	8007080 <__retarget_lock_acquire_recursive>
 800660a:	89ab      	ldrh	r3, [r5, #12]
 800660c:	071b      	lsls	r3, r3, #28
 800660e:	d501      	bpl.n	8006614 <_vfiprintf_r+0x3c>
 8006610:	692b      	ldr	r3, [r5, #16]
 8006612:	b9eb      	cbnz	r3, 8006650 <_vfiprintf_r+0x78>
 8006614:	4629      	mov	r1, r5
 8006616:	4630      	mov	r0, r6
 8006618:	f000 fb04 	bl	8006c24 <__swsetup_r>
 800661c:	b1c0      	cbz	r0, 8006650 <_vfiprintf_r+0x78>
 800661e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006620:	07dc      	lsls	r4, r3, #31
 8006622:	d50e      	bpl.n	8006642 <_vfiprintf_r+0x6a>
 8006624:	f04f 30ff 	mov.w	r0, #4294967295
 8006628:	b01d      	add	sp, #116	; 0x74
 800662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662e:	4b7b      	ldr	r3, [pc, #492]	; (800681c <_vfiprintf_r+0x244>)
 8006630:	429d      	cmp	r5, r3
 8006632:	d101      	bne.n	8006638 <_vfiprintf_r+0x60>
 8006634:	68b5      	ldr	r5, [r6, #8]
 8006636:	e7df      	b.n	80065f8 <_vfiprintf_r+0x20>
 8006638:	4b79      	ldr	r3, [pc, #484]	; (8006820 <_vfiprintf_r+0x248>)
 800663a:	429d      	cmp	r5, r3
 800663c:	bf08      	it	eq
 800663e:	68f5      	ldreq	r5, [r6, #12]
 8006640:	e7da      	b.n	80065f8 <_vfiprintf_r+0x20>
 8006642:	89ab      	ldrh	r3, [r5, #12]
 8006644:	0598      	lsls	r0, r3, #22
 8006646:	d4ed      	bmi.n	8006624 <_vfiprintf_r+0x4c>
 8006648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800664a:	f000 fd1a 	bl	8007082 <__retarget_lock_release_recursive>
 800664e:	e7e9      	b.n	8006624 <_vfiprintf_r+0x4c>
 8006650:	2300      	movs	r3, #0
 8006652:	9309      	str	r3, [sp, #36]	; 0x24
 8006654:	2320      	movs	r3, #32
 8006656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800665a:	f8cd 800c 	str.w	r8, [sp, #12]
 800665e:	2330      	movs	r3, #48	; 0x30
 8006660:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006824 <_vfiprintf_r+0x24c>
 8006664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006668:	f04f 0901 	mov.w	r9, #1
 800666c:	4623      	mov	r3, r4
 800666e:	469a      	mov	sl, r3
 8006670:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006674:	b10a      	cbz	r2, 800667a <_vfiprintf_r+0xa2>
 8006676:	2a25      	cmp	r2, #37	; 0x25
 8006678:	d1f9      	bne.n	800666e <_vfiprintf_r+0x96>
 800667a:	ebba 0b04 	subs.w	fp, sl, r4
 800667e:	d00b      	beq.n	8006698 <_vfiprintf_r+0xc0>
 8006680:	465b      	mov	r3, fp
 8006682:	4622      	mov	r2, r4
 8006684:	4629      	mov	r1, r5
 8006686:	4630      	mov	r0, r6
 8006688:	f7ff ff93 	bl	80065b2 <__sfputs_r>
 800668c:	3001      	adds	r0, #1
 800668e:	f000 80aa 	beq.w	80067e6 <_vfiprintf_r+0x20e>
 8006692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006694:	445a      	add	r2, fp
 8006696:	9209      	str	r2, [sp, #36]	; 0x24
 8006698:	f89a 3000 	ldrb.w	r3, [sl]
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 80a2 	beq.w	80067e6 <_vfiprintf_r+0x20e>
 80066a2:	2300      	movs	r3, #0
 80066a4:	f04f 32ff 	mov.w	r2, #4294967295
 80066a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066ac:	f10a 0a01 	add.w	sl, sl, #1
 80066b0:	9304      	str	r3, [sp, #16]
 80066b2:	9307      	str	r3, [sp, #28]
 80066b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066b8:	931a      	str	r3, [sp, #104]	; 0x68
 80066ba:	4654      	mov	r4, sl
 80066bc:	2205      	movs	r2, #5
 80066be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c2:	4858      	ldr	r0, [pc, #352]	; (8006824 <_vfiprintf_r+0x24c>)
 80066c4:	f7f9 fdf4 	bl	80002b0 <memchr>
 80066c8:	9a04      	ldr	r2, [sp, #16]
 80066ca:	b9d8      	cbnz	r0, 8006704 <_vfiprintf_r+0x12c>
 80066cc:	06d1      	lsls	r1, r2, #27
 80066ce:	bf44      	itt	mi
 80066d0:	2320      	movmi	r3, #32
 80066d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066d6:	0713      	lsls	r3, r2, #28
 80066d8:	bf44      	itt	mi
 80066da:	232b      	movmi	r3, #43	; 0x2b
 80066dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066e0:	f89a 3000 	ldrb.w	r3, [sl]
 80066e4:	2b2a      	cmp	r3, #42	; 0x2a
 80066e6:	d015      	beq.n	8006714 <_vfiprintf_r+0x13c>
 80066e8:	9a07      	ldr	r2, [sp, #28]
 80066ea:	4654      	mov	r4, sl
 80066ec:	2000      	movs	r0, #0
 80066ee:	f04f 0c0a 	mov.w	ip, #10
 80066f2:	4621      	mov	r1, r4
 80066f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066f8:	3b30      	subs	r3, #48	; 0x30
 80066fa:	2b09      	cmp	r3, #9
 80066fc:	d94e      	bls.n	800679c <_vfiprintf_r+0x1c4>
 80066fe:	b1b0      	cbz	r0, 800672e <_vfiprintf_r+0x156>
 8006700:	9207      	str	r2, [sp, #28]
 8006702:	e014      	b.n	800672e <_vfiprintf_r+0x156>
 8006704:	eba0 0308 	sub.w	r3, r0, r8
 8006708:	fa09 f303 	lsl.w	r3, r9, r3
 800670c:	4313      	orrs	r3, r2
 800670e:	9304      	str	r3, [sp, #16]
 8006710:	46a2      	mov	sl, r4
 8006712:	e7d2      	b.n	80066ba <_vfiprintf_r+0xe2>
 8006714:	9b03      	ldr	r3, [sp, #12]
 8006716:	1d19      	adds	r1, r3, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	9103      	str	r1, [sp, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	bfbb      	ittet	lt
 8006720:	425b      	neglt	r3, r3
 8006722:	f042 0202 	orrlt.w	r2, r2, #2
 8006726:	9307      	strge	r3, [sp, #28]
 8006728:	9307      	strlt	r3, [sp, #28]
 800672a:	bfb8      	it	lt
 800672c:	9204      	strlt	r2, [sp, #16]
 800672e:	7823      	ldrb	r3, [r4, #0]
 8006730:	2b2e      	cmp	r3, #46	; 0x2e
 8006732:	d10c      	bne.n	800674e <_vfiprintf_r+0x176>
 8006734:	7863      	ldrb	r3, [r4, #1]
 8006736:	2b2a      	cmp	r3, #42	; 0x2a
 8006738:	d135      	bne.n	80067a6 <_vfiprintf_r+0x1ce>
 800673a:	9b03      	ldr	r3, [sp, #12]
 800673c:	1d1a      	adds	r2, r3, #4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	9203      	str	r2, [sp, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	bfb8      	it	lt
 8006746:	f04f 33ff 	movlt.w	r3, #4294967295
 800674a:	3402      	adds	r4, #2
 800674c:	9305      	str	r3, [sp, #20]
 800674e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006834 <_vfiprintf_r+0x25c>
 8006752:	7821      	ldrb	r1, [r4, #0]
 8006754:	2203      	movs	r2, #3
 8006756:	4650      	mov	r0, sl
 8006758:	f7f9 fdaa 	bl	80002b0 <memchr>
 800675c:	b140      	cbz	r0, 8006770 <_vfiprintf_r+0x198>
 800675e:	2340      	movs	r3, #64	; 0x40
 8006760:	eba0 000a 	sub.w	r0, r0, sl
 8006764:	fa03 f000 	lsl.w	r0, r3, r0
 8006768:	9b04      	ldr	r3, [sp, #16]
 800676a:	4303      	orrs	r3, r0
 800676c:	3401      	adds	r4, #1
 800676e:	9304      	str	r3, [sp, #16]
 8006770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006774:	482c      	ldr	r0, [pc, #176]	; (8006828 <_vfiprintf_r+0x250>)
 8006776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800677a:	2206      	movs	r2, #6
 800677c:	f7f9 fd98 	bl	80002b0 <memchr>
 8006780:	2800      	cmp	r0, #0
 8006782:	d03f      	beq.n	8006804 <_vfiprintf_r+0x22c>
 8006784:	4b29      	ldr	r3, [pc, #164]	; (800682c <_vfiprintf_r+0x254>)
 8006786:	bb1b      	cbnz	r3, 80067d0 <_vfiprintf_r+0x1f8>
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	3307      	adds	r3, #7
 800678c:	f023 0307 	bic.w	r3, r3, #7
 8006790:	3308      	adds	r3, #8
 8006792:	9303      	str	r3, [sp, #12]
 8006794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006796:	443b      	add	r3, r7
 8006798:	9309      	str	r3, [sp, #36]	; 0x24
 800679a:	e767      	b.n	800666c <_vfiprintf_r+0x94>
 800679c:	fb0c 3202 	mla	r2, ip, r2, r3
 80067a0:	460c      	mov	r4, r1
 80067a2:	2001      	movs	r0, #1
 80067a4:	e7a5      	b.n	80066f2 <_vfiprintf_r+0x11a>
 80067a6:	2300      	movs	r3, #0
 80067a8:	3401      	adds	r4, #1
 80067aa:	9305      	str	r3, [sp, #20]
 80067ac:	4619      	mov	r1, r3
 80067ae:	f04f 0c0a 	mov.w	ip, #10
 80067b2:	4620      	mov	r0, r4
 80067b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067b8:	3a30      	subs	r2, #48	; 0x30
 80067ba:	2a09      	cmp	r2, #9
 80067bc:	d903      	bls.n	80067c6 <_vfiprintf_r+0x1ee>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0c5      	beq.n	800674e <_vfiprintf_r+0x176>
 80067c2:	9105      	str	r1, [sp, #20]
 80067c4:	e7c3      	b.n	800674e <_vfiprintf_r+0x176>
 80067c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80067ca:	4604      	mov	r4, r0
 80067cc:	2301      	movs	r3, #1
 80067ce:	e7f0      	b.n	80067b2 <_vfiprintf_r+0x1da>
 80067d0:	ab03      	add	r3, sp, #12
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	462a      	mov	r2, r5
 80067d6:	4b16      	ldr	r3, [pc, #88]	; (8006830 <_vfiprintf_r+0x258>)
 80067d8:	a904      	add	r1, sp, #16
 80067da:	4630      	mov	r0, r6
 80067dc:	f3af 8000 	nop.w
 80067e0:	4607      	mov	r7, r0
 80067e2:	1c78      	adds	r0, r7, #1
 80067e4:	d1d6      	bne.n	8006794 <_vfiprintf_r+0x1bc>
 80067e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067e8:	07d9      	lsls	r1, r3, #31
 80067ea:	d405      	bmi.n	80067f8 <_vfiprintf_r+0x220>
 80067ec:	89ab      	ldrh	r3, [r5, #12]
 80067ee:	059a      	lsls	r2, r3, #22
 80067f0:	d402      	bmi.n	80067f8 <_vfiprintf_r+0x220>
 80067f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067f4:	f000 fc45 	bl	8007082 <__retarget_lock_release_recursive>
 80067f8:	89ab      	ldrh	r3, [r5, #12]
 80067fa:	065b      	lsls	r3, r3, #25
 80067fc:	f53f af12 	bmi.w	8006624 <_vfiprintf_r+0x4c>
 8006800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006802:	e711      	b.n	8006628 <_vfiprintf_r+0x50>
 8006804:	ab03      	add	r3, sp, #12
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	462a      	mov	r2, r5
 800680a:	4b09      	ldr	r3, [pc, #36]	; (8006830 <_vfiprintf_r+0x258>)
 800680c:	a904      	add	r1, sp, #16
 800680e:	4630      	mov	r0, r6
 8006810:	f000 f880 	bl	8006914 <_printf_i>
 8006814:	e7e4      	b.n	80067e0 <_vfiprintf_r+0x208>
 8006816:	bf00      	nop
 8006818:	08007500 	.word	0x08007500
 800681c:	08007520 	.word	0x08007520
 8006820:	080074e0 	.word	0x080074e0
 8006824:	080074aa 	.word	0x080074aa
 8006828:	080074b4 	.word	0x080074b4
 800682c:	00000000 	.word	0x00000000
 8006830:	080065b3 	.word	0x080065b3
 8006834:	080074b0 	.word	0x080074b0

08006838 <_printf_common>:
 8006838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800683c:	4616      	mov	r6, r2
 800683e:	4699      	mov	r9, r3
 8006840:	688a      	ldr	r2, [r1, #8]
 8006842:	690b      	ldr	r3, [r1, #16]
 8006844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006848:	4293      	cmp	r3, r2
 800684a:	bfb8      	it	lt
 800684c:	4613      	movlt	r3, r2
 800684e:	6033      	str	r3, [r6, #0]
 8006850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006854:	4607      	mov	r7, r0
 8006856:	460c      	mov	r4, r1
 8006858:	b10a      	cbz	r2, 800685e <_printf_common+0x26>
 800685a:	3301      	adds	r3, #1
 800685c:	6033      	str	r3, [r6, #0]
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	0699      	lsls	r1, r3, #26
 8006862:	bf42      	ittt	mi
 8006864:	6833      	ldrmi	r3, [r6, #0]
 8006866:	3302      	addmi	r3, #2
 8006868:	6033      	strmi	r3, [r6, #0]
 800686a:	6825      	ldr	r5, [r4, #0]
 800686c:	f015 0506 	ands.w	r5, r5, #6
 8006870:	d106      	bne.n	8006880 <_printf_common+0x48>
 8006872:	f104 0a19 	add.w	sl, r4, #25
 8006876:	68e3      	ldr	r3, [r4, #12]
 8006878:	6832      	ldr	r2, [r6, #0]
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	42ab      	cmp	r3, r5
 800687e:	dc26      	bgt.n	80068ce <_printf_common+0x96>
 8006880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006884:	1e13      	subs	r3, r2, #0
 8006886:	6822      	ldr	r2, [r4, #0]
 8006888:	bf18      	it	ne
 800688a:	2301      	movne	r3, #1
 800688c:	0692      	lsls	r2, r2, #26
 800688e:	d42b      	bmi.n	80068e8 <_printf_common+0xb0>
 8006890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006894:	4649      	mov	r1, r9
 8006896:	4638      	mov	r0, r7
 8006898:	47c0      	blx	r8
 800689a:	3001      	adds	r0, #1
 800689c:	d01e      	beq.n	80068dc <_printf_common+0xa4>
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	68e5      	ldr	r5, [r4, #12]
 80068a2:	6832      	ldr	r2, [r6, #0]
 80068a4:	f003 0306 	and.w	r3, r3, #6
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	bf08      	it	eq
 80068ac:	1aad      	subeq	r5, r5, r2
 80068ae:	68a3      	ldr	r3, [r4, #8]
 80068b0:	6922      	ldr	r2, [r4, #16]
 80068b2:	bf0c      	ite	eq
 80068b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068b8:	2500      	movne	r5, #0
 80068ba:	4293      	cmp	r3, r2
 80068bc:	bfc4      	itt	gt
 80068be:	1a9b      	subgt	r3, r3, r2
 80068c0:	18ed      	addgt	r5, r5, r3
 80068c2:	2600      	movs	r6, #0
 80068c4:	341a      	adds	r4, #26
 80068c6:	42b5      	cmp	r5, r6
 80068c8:	d11a      	bne.n	8006900 <_printf_common+0xc8>
 80068ca:	2000      	movs	r0, #0
 80068cc:	e008      	b.n	80068e0 <_printf_common+0xa8>
 80068ce:	2301      	movs	r3, #1
 80068d0:	4652      	mov	r2, sl
 80068d2:	4649      	mov	r1, r9
 80068d4:	4638      	mov	r0, r7
 80068d6:	47c0      	blx	r8
 80068d8:	3001      	adds	r0, #1
 80068da:	d103      	bne.n	80068e4 <_printf_common+0xac>
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e4:	3501      	adds	r5, #1
 80068e6:	e7c6      	b.n	8006876 <_printf_common+0x3e>
 80068e8:	18e1      	adds	r1, r4, r3
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	2030      	movs	r0, #48	; 0x30
 80068ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068f2:	4422      	add	r2, r4
 80068f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068fc:	3302      	adds	r3, #2
 80068fe:	e7c7      	b.n	8006890 <_printf_common+0x58>
 8006900:	2301      	movs	r3, #1
 8006902:	4622      	mov	r2, r4
 8006904:	4649      	mov	r1, r9
 8006906:	4638      	mov	r0, r7
 8006908:	47c0      	blx	r8
 800690a:	3001      	adds	r0, #1
 800690c:	d0e6      	beq.n	80068dc <_printf_common+0xa4>
 800690e:	3601      	adds	r6, #1
 8006910:	e7d9      	b.n	80068c6 <_printf_common+0x8e>
	...

08006914 <_printf_i>:
 8006914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006918:	7e0f      	ldrb	r7, [r1, #24]
 800691a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800691c:	2f78      	cmp	r7, #120	; 0x78
 800691e:	4691      	mov	r9, r2
 8006920:	4680      	mov	r8, r0
 8006922:	460c      	mov	r4, r1
 8006924:	469a      	mov	sl, r3
 8006926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800692a:	d807      	bhi.n	800693c <_printf_i+0x28>
 800692c:	2f62      	cmp	r7, #98	; 0x62
 800692e:	d80a      	bhi.n	8006946 <_printf_i+0x32>
 8006930:	2f00      	cmp	r7, #0
 8006932:	f000 80d8 	beq.w	8006ae6 <_printf_i+0x1d2>
 8006936:	2f58      	cmp	r7, #88	; 0x58
 8006938:	f000 80a3 	beq.w	8006a82 <_printf_i+0x16e>
 800693c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006944:	e03a      	b.n	80069bc <_printf_i+0xa8>
 8006946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800694a:	2b15      	cmp	r3, #21
 800694c:	d8f6      	bhi.n	800693c <_printf_i+0x28>
 800694e:	a101      	add	r1, pc, #4	; (adr r1, 8006954 <_printf_i+0x40>)
 8006950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006954:	080069ad 	.word	0x080069ad
 8006958:	080069c1 	.word	0x080069c1
 800695c:	0800693d 	.word	0x0800693d
 8006960:	0800693d 	.word	0x0800693d
 8006964:	0800693d 	.word	0x0800693d
 8006968:	0800693d 	.word	0x0800693d
 800696c:	080069c1 	.word	0x080069c1
 8006970:	0800693d 	.word	0x0800693d
 8006974:	0800693d 	.word	0x0800693d
 8006978:	0800693d 	.word	0x0800693d
 800697c:	0800693d 	.word	0x0800693d
 8006980:	08006acd 	.word	0x08006acd
 8006984:	080069f1 	.word	0x080069f1
 8006988:	08006aaf 	.word	0x08006aaf
 800698c:	0800693d 	.word	0x0800693d
 8006990:	0800693d 	.word	0x0800693d
 8006994:	08006aef 	.word	0x08006aef
 8006998:	0800693d 	.word	0x0800693d
 800699c:	080069f1 	.word	0x080069f1
 80069a0:	0800693d 	.word	0x0800693d
 80069a4:	0800693d 	.word	0x0800693d
 80069a8:	08006ab7 	.word	0x08006ab7
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	1d1a      	adds	r2, r3, #4
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	602a      	str	r2, [r5, #0]
 80069b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069bc:	2301      	movs	r3, #1
 80069be:	e0a3      	b.n	8006b08 <_printf_i+0x1f4>
 80069c0:	6820      	ldr	r0, [r4, #0]
 80069c2:	6829      	ldr	r1, [r5, #0]
 80069c4:	0606      	lsls	r6, r0, #24
 80069c6:	f101 0304 	add.w	r3, r1, #4
 80069ca:	d50a      	bpl.n	80069e2 <_printf_i+0xce>
 80069cc:	680e      	ldr	r6, [r1, #0]
 80069ce:	602b      	str	r3, [r5, #0]
 80069d0:	2e00      	cmp	r6, #0
 80069d2:	da03      	bge.n	80069dc <_printf_i+0xc8>
 80069d4:	232d      	movs	r3, #45	; 0x2d
 80069d6:	4276      	negs	r6, r6
 80069d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069dc:	485e      	ldr	r0, [pc, #376]	; (8006b58 <_printf_i+0x244>)
 80069de:	230a      	movs	r3, #10
 80069e0:	e019      	b.n	8006a16 <_printf_i+0x102>
 80069e2:	680e      	ldr	r6, [r1, #0]
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069ea:	bf18      	it	ne
 80069ec:	b236      	sxthne	r6, r6
 80069ee:	e7ef      	b.n	80069d0 <_printf_i+0xbc>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	6820      	ldr	r0, [r4, #0]
 80069f4:	1d19      	adds	r1, r3, #4
 80069f6:	6029      	str	r1, [r5, #0]
 80069f8:	0601      	lsls	r1, r0, #24
 80069fa:	d501      	bpl.n	8006a00 <_printf_i+0xec>
 80069fc:	681e      	ldr	r6, [r3, #0]
 80069fe:	e002      	b.n	8006a06 <_printf_i+0xf2>
 8006a00:	0646      	lsls	r6, r0, #25
 8006a02:	d5fb      	bpl.n	80069fc <_printf_i+0xe8>
 8006a04:	881e      	ldrh	r6, [r3, #0]
 8006a06:	4854      	ldr	r0, [pc, #336]	; (8006b58 <_printf_i+0x244>)
 8006a08:	2f6f      	cmp	r7, #111	; 0x6f
 8006a0a:	bf0c      	ite	eq
 8006a0c:	2308      	moveq	r3, #8
 8006a0e:	230a      	movne	r3, #10
 8006a10:	2100      	movs	r1, #0
 8006a12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a16:	6865      	ldr	r5, [r4, #4]
 8006a18:	60a5      	str	r5, [r4, #8]
 8006a1a:	2d00      	cmp	r5, #0
 8006a1c:	bfa2      	ittt	ge
 8006a1e:	6821      	ldrge	r1, [r4, #0]
 8006a20:	f021 0104 	bicge.w	r1, r1, #4
 8006a24:	6021      	strge	r1, [r4, #0]
 8006a26:	b90e      	cbnz	r6, 8006a2c <_printf_i+0x118>
 8006a28:	2d00      	cmp	r5, #0
 8006a2a:	d04d      	beq.n	8006ac8 <_printf_i+0x1b4>
 8006a2c:	4615      	mov	r5, r2
 8006a2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a32:	fb03 6711 	mls	r7, r3, r1, r6
 8006a36:	5dc7      	ldrb	r7, [r0, r7]
 8006a38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a3c:	4637      	mov	r7, r6
 8006a3e:	42bb      	cmp	r3, r7
 8006a40:	460e      	mov	r6, r1
 8006a42:	d9f4      	bls.n	8006a2e <_printf_i+0x11a>
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d10b      	bne.n	8006a60 <_printf_i+0x14c>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	07de      	lsls	r6, r3, #31
 8006a4c:	d508      	bpl.n	8006a60 <_printf_i+0x14c>
 8006a4e:	6923      	ldr	r3, [r4, #16]
 8006a50:	6861      	ldr	r1, [r4, #4]
 8006a52:	4299      	cmp	r1, r3
 8006a54:	bfde      	ittt	le
 8006a56:	2330      	movle	r3, #48	; 0x30
 8006a58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a60:	1b52      	subs	r2, r2, r5
 8006a62:	6122      	str	r2, [r4, #16]
 8006a64:	f8cd a000 	str.w	sl, [sp]
 8006a68:	464b      	mov	r3, r9
 8006a6a:	aa03      	add	r2, sp, #12
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4640      	mov	r0, r8
 8006a70:	f7ff fee2 	bl	8006838 <_printf_common>
 8006a74:	3001      	adds	r0, #1
 8006a76:	d14c      	bne.n	8006b12 <_printf_i+0x1fe>
 8006a78:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7c:	b004      	add	sp, #16
 8006a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a82:	4835      	ldr	r0, [pc, #212]	; (8006b58 <_printf_i+0x244>)
 8006a84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a88:	6829      	ldr	r1, [r5, #0]
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a90:	6029      	str	r1, [r5, #0]
 8006a92:	061d      	lsls	r5, r3, #24
 8006a94:	d514      	bpl.n	8006ac0 <_printf_i+0x1ac>
 8006a96:	07df      	lsls	r7, r3, #31
 8006a98:	bf44      	itt	mi
 8006a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a9e:	6023      	strmi	r3, [r4, #0]
 8006aa0:	b91e      	cbnz	r6, 8006aaa <_printf_i+0x196>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	f023 0320 	bic.w	r3, r3, #32
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	2310      	movs	r3, #16
 8006aac:	e7b0      	b.n	8006a10 <_printf_i+0xfc>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	f043 0320 	orr.w	r3, r3, #32
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	2378      	movs	r3, #120	; 0x78
 8006ab8:	4828      	ldr	r0, [pc, #160]	; (8006b5c <_printf_i+0x248>)
 8006aba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006abe:	e7e3      	b.n	8006a88 <_printf_i+0x174>
 8006ac0:	0659      	lsls	r1, r3, #25
 8006ac2:	bf48      	it	mi
 8006ac4:	b2b6      	uxthmi	r6, r6
 8006ac6:	e7e6      	b.n	8006a96 <_printf_i+0x182>
 8006ac8:	4615      	mov	r5, r2
 8006aca:	e7bb      	b.n	8006a44 <_printf_i+0x130>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	6826      	ldr	r6, [r4, #0]
 8006ad0:	6961      	ldr	r1, [r4, #20]
 8006ad2:	1d18      	adds	r0, r3, #4
 8006ad4:	6028      	str	r0, [r5, #0]
 8006ad6:	0635      	lsls	r5, r6, #24
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	d501      	bpl.n	8006ae0 <_printf_i+0x1cc>
 8006adc:	6019      	str	r1, [r3, #0]
 8006ade:	e002      	b.n	8006ae6 <_printf_i+0x1d2>
 8006ae0:	0670      	lsls	r0, r6, #25
 8006ae2:	d5fb      	bpl.n	8006adc <_printf_i+0x1c8>
 8006ae4:	8019      	strh	r1, [r3, #0]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	6123      	str	r3, [r4, #16]
 8006aea:	4615      	mov	r5, r2
 8006aec:	e7ba      	b.n	8006a64 <_printf_i+0x150>
 8006aee:	682b      	ldr	r3, [r5, #0]
 8006af0:	1d1a      	adds	r2, r3, #4
 8006af2:	602a      	str	r2, [r5, #0]
 8006af4:	681d      	ldr	r5, [r3, #0]
 8006af6:	6862      	ldr	r2, [r4, #4]
 8006af8:	2100      	movs	r1, #0
 8006afa:	4628      	mov	r0, r5
 8006afc:	f7f9 fbd8 	bl	80002b0 <memchr>
 8006b00:	b108      	cbz	r0, 8006b06 <_printf_i+0x1f2>
 8006b02:	1b40      	subs	r0, r0, r5
 8006b04:	6060      	str	r0, [r4, #4]
 8006b06:	6863      	ldr	r3, [r4, #4]
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b10:	e7a8      	b.n	8006a64 <_printf_i+0x150>
 8006b12:	6923      	ldr	r3, [r4, #16]
 8006b14:	462a      	mov	r2, r5
 8006b16:	4649      	mov	r1, r9
 8006b18:	4640      	mov	r0, r8
 8006b1a:	47d0      	blx	sl
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d0ab      	beq.n	8006a78 <_printf_i+0x164>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	079b      	lsls	r3, r3, #30
 8006b24:	d413      	bmi.n	8006b4e <_printf_i+0x23a>
 8006b26:	68e0      	ldr	r0, [r4, #12]
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	4298      	cmp	r0, r3
 8006b2c:	bfb8      	it	lt
 8006b2e:	4618      	movlt	r0, r3
 8006b30:	e7a4      	b.n	8006a7c <_printf_i+0x168>
 8006b32:	2301      	movs	r3, #1
 8006b34:	4632      	mov	r2, r6
 8006b36:	4649      	mov	r1, r9
 8006b38:	4640      	mov	r0, r8
 8006b3a:	47d0      	blx	sl
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d09b      	beq.n	8006a78 <_printf_i+0x164>
 8006b40:	3501      	adds	r5, #1
 8006b42:	68e3      	ldr	r3, [r4, #12]
 8006b44:	9903      	ldr	r1, [sp, #12]
 8006b46:	1a5b      	subs	r3, r3, r1
 8006b48:	42ab      	cmp	r3, r5
 8006b4a:	dcf2      	bgt.n	8006b32 <_printf_i+0x21e>
 8006b4c:	e7eb      	b.n	8006b26 <_printf_i+0x212>
 8006b4e:	2500      	movs	r5, #0
 8006b50:	f104 0619 	add.w	r6, r4, #25
 8006b54:	e7f5      	b.n	8006b42 <_printf_i+0x22e>
 8006b56:	bf00      	nop
 8006b58:	080074bb 	.word	0x080074bb
 8006b5c:	080074cc 	.word	0x080074cc

08006b60 <_sbrk_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d06      	ldr	r5, [pc, #24]	; (8006b7c <_sbrk_r+0x1c>)
 8006b64:	2300      	movs	r3, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	602b      	str	r3, [r5, #0]
 8006b6c:	f7fa f840 	bl	8000bf0 <_sbrk>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d102      	bne.n	8006b7a <_sbrk_r+0x1a>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b103      	cbz	r3, 8006b7a <_sbrk_r+0x1a>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	2001349c 	.word	0x2001349c

08006b80 <__swbuf_r>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	460e      	mov	r6, r1
 8006b84:	4614      	mov	r4, r2
 8006b86:	4605      	mov	r5, r0
 8006b88:	b118      	cbz	r0, 8006b92 <__swbuf_r+0x12>
 8006b8a:	6983      	ldr	r3, [r0, #24]
 8006b8c:	b90b      	cbnz	r3, 8006b92 <__swbuf_r+0x12>
 8006b8e:	f000 f9d9 	bl	8006f44 <__sinit>
 8006b92:	4b21      	ldr	r3, [pc, #132]	; (8006c18 <__swbuf_r+0x98>)
 8006b94:	429c      	cmp	r4, r3
 8006b96:	d12b      	bne.n	8006bf0 <__swbuf_r+0x70>
 8006b98:	686c      	ldr	r4, [r5, #4]
 8006b9a:	69a3      	ldr	r3, [r4, #24]
 8006b9c:	60a3      	str	r3, [r4, #8]
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	071a      	lsls	r2, r3, #28
 8006ba2:	d52f      	bpl.n	8006c04 <__swbuf_r+0x84>
 8006ba4:	6923      	ldr	r3, [r4, #16]
 8006ba6:	b36b      	cbz	r3, 8006c04 <__swbuf_r+0x84>
 8006ba8:	6923      	ldr	r3, [r4, #16]
 8006baa:	6820      	ldr	r0, [r4, #0]
 8006bac:	1ac0      	subs	r0, r0, r3
 8006bae:	6963      	ldr	r3, [r4, #20]
 8006bb0:	b2f6      	uxtb	r6, r6
 8006bb2:	4283      	cmp	r3, r0
 8006bb4:	4637      	mov	r7, r6
 8006bb6:	dc04      	bgt.n	8006bc2 <__swbuf_r+0x42>
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f000 f92e 	bl	8006e1c <_fflush_r>
 8006bc0:	bb30      	cbnz	r0, 8006c10 <__swbuf_r+0x90>
 8006bc2:	68a3      	ldr	r3, [r4, #8]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	60a3      	str	r3, [r4, #8]
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	6022      	str	r2, [r4, #0]
 8006bce:	701e      	strb	r6, [r3, #0]
 8006bd0:	6963      	ldr	r3, [r4, #20]
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	4283      	cmp	r3, r0
 8006bd6:	d004      	beq.n	8006be2 <__swbuf_r+0x62>
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	07db      	lsls	r3, r3, #31
 8006bdc:	d506      	bpl.n	8006bec <__swbuf_r+0x6c>
 8006bde:	2e0a      	cmp	r6, #10
 8006be0:	d104      	bne.n	8006bec <__swbuf_r+0x6c>
 8006be2:	4621      	mov	r1, r4
 8006be4:	4628      	mov	r0, r5
 8006be6:	f000 f919 	bl	8006e1c <_fflush_r>
 8006bea:	b988      	cbnz	r0, 8006c10 <__swbuf_r+0x90>
 8006bec:	4638      	mov	r0, r7
 8006bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <__swbuf_r+0x9c>)
 8006bf2:	429c      	cmp	r4, r3
 8006bf4:	d101      	bne.n	8006bfa <__swbuf_r+0x7a>
 8006bf6:	68ac      	ldr	r4, [r5, #8]
 8006bf8:	e7cf      	b.n	8006b9a <__swbuf_r+0x1a>
 8006bfa:	4b09      	ldr	r3, [pc, #36]	; (8006c20 <__swbuf_r+0xa0>)
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	bf08      	it	eq
 8006c00:	68ec      	ldreq	r4, [r5, #12]
 8006c02:	e7ca      	b.n	8006b9a <__swbuf_r+0x1a>
 8006c04:	4621      	mov	r1, r4
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 f80c 	bl	8006c24 <__swsetup_r>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d0cb      	beq.n	8006ba8 <__swbuf_r+0x28>
 8006c10:	f04f 37ff 	mov.w	r7, #4294967295
 8006c14:	e7ea      	b.n	8006bec <__swbuf_r+0x6c>
 8006c16:	bf00      	nop
 8006c18:	08007500 	.word	0x08007500
 8006c1c:	08007520 	.word	0x08007520
 8006c20:	080074e0 	.word	0x080074e0

08006c24 <__swsetup_r>:
 8006c24:	4b32      	ldr	r3, [pc, #200]	; (8006cf0 <__swsetup_r+0xcc>)
 8006c26:	b570      	push	{r4, r5, r6, lr}
 8006c28:	681d      	ldr	r5, [r3, #0]
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	b125      	cbz	r5, 8006c3a <__swsetup_r+0x16>
 8006c30:	69ab      	ldr	r3, [r5, #24]
 8006c32:	b913      	cbnz	r3, 8006c3a <__swsetup_r+0x16>
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 f985 	bl	8006f44 <__sinit>
 8006c3a:	4b2e      	ldr	r3, [pc, #184]	; (8006cf4 <__swsetup_r+0xd0>)
 8006c3c:	429c      	cmp	r4, r3
 8006c3e:	d10f      	bne.n	8006c60 <__swsetup_r+0x3c>
 8006c40:	686c      	ldr	r4, [r5, #4]
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c48:	0719      	lsls	r1, r3, #28
 8006c4a:	d42c      	bmi.n	8006ca6 <__swsetup_r+0x82>
 8006c4c:	06dd      	lsls	r5, r3, #27
 8006c4e:	d411      	bmi.n	8006c74 <__swsetup_r+0x50>
 8006c50:	2309      	movs	r3, #9
 8006c52:	6033      	str	r3, [r6, #0]
 8006c54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c58:	81a3      	strh	r3, [r4, #12]
 8006c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5e:	e03e      	b.n	8006cde <__swsetup_r+0xba>
 8006c60:	4b25      	ldr	r3, [pc, #148]	; (8006cf8 <__swsetup_r+0xd4>)
 8006c62:	429c      	cmp	r4, r3
 8006c64:	d101      	bne.n	8006c6a <__swsetup_r+0x46>
 8006c66:	68ac      	ldr	r4, [r5, #8]
 8006c68:	e7eb      	b.n	8006c42 <__swsetup_r+0x1e>
 8006c6a:	4b24      	ldr	r3, [pc, #144]	; (8006cfc <__swsetup_r+0xd8>)
 8006c6c:	429c      	cmp	r4, r3
 8006c6e:	bf08      	it	eq
 8006c70:	68ec      	ldreq	r4, [r5, #12]
 8006c72:	e7e6      	b.n	8006c42 <__swsetup_r+0x1e>
 8006c74:	0758      	lsls	r0, r3, #29
 8006c76:	d512      	bpl.n	8006c9e <__swsetup_r+0x7a>
 8006c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c7a:	b141      	cbz	r1, 8006c8e <__swsetup_r+0x6a>
 8006c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c80:	4299      	cmp	r1, r3
 8006c82:	d002      	beq.n	8006c8a <__swsetup_r+0x66>
 8006c84:	4630      	mov	r0, r6
 8006c86:	f7ff fb9d 	bl	80063c4 <_free_r>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c94:	81a3      	strh	r3, [r4, #12]
 8006c96:	2300      	movs	r3, #0
 8006c98:	6063      	str	r3, [r4, #4]
 8006c9a:	6923      	ldr	r3, [r4, #16]
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	89a3      	ldrh	r3, [r4, #12]
 8006ca0:	f043 0308 	orr.w	r3, r3, #8
 8006ca4:	81a3      	strh	r3, [r4, #12]
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	b94b      	cbnz	r3, 8006cbe <__swsetup_r+0x9a>
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb4:	d003      	beq.n	8006cbe <__swsetup_r+0x9a>
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f000 fa09 	bl	80070d0 <__smakebuf_r>
 8006cbe:	89a0      	ldrh	r0, [r4, #12]
 8006cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cc4:	f010 0301 	ands.w	r3, r0, #1
 8006cc8:	d00a      	beq.n	8006ce0 <__swsetup_r+0xbc>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60a3      	str	r3, [r4, #8]
 8006cce:	6963      	ldr	r3, [r4, #20]
 8006cd0:	425b      	negs	r3, r3
 8006cd2:	61a3      	str	r3, [r4, #24]
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	b943      	cbnz	r3, 8006cea <__swsetup_r+0xc6>
 8006cd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cdc:	d1ba      	bne.n	8006c54 <__swsetup_r+0x30>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	0781      	lsls	r1, r0, #30
 8006ce2:	bf58      	it	pl
 8006ce4:	6963      	ldrpl	r3, [r4, #20]
 8006ce6:	60a3      	str	r3, [r4, #8]
 8006ce8:	e7f4      	b.n	8006cd4 <__swsetup_r+0xb0>
 8006cea:	2000      	movs	r0, #0
 8006cec:	e7f7      	b.n	8006cde <__swsetup_r+0xba>
 8006cee:	bf00      	nop
 8006cf0:	20000014 	.word	0x20000014
 8006cf4:	08007500 	.word	0x08007500
 8006cf8:	08007520 	.word	0x08007520
 8006cfc:	080074e0 	.word	0x080074e0

08006d00 <abort>:
 8006d00:	b508      	push	{r3, lr}
 8006d02:	2006      	movs	r0, #6
 8006d04:	f000 fa58 	bl	80071b8 <raise>
 8006d08:	2001      	movs	r0, #1
 8006d0a:	f7f9 ff15 	bl	8000b38 <_exit>
	...

08006d10 <__sflush_r>:
 8006d10:	898a      	ldrh	r2, [r1, #12]
 8006d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d16:	4605      	mov	r5, r0
 8006d18:	0710      	lsls	r0, r2, #28
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	d458      	bmi.n	8006dd0 <__sflush_r+0xc0>
 8006d1e:	684b      	ldr	r3, [r1, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	dc05      	bgt.n	8006d30 <__sflush_r+0x20>
 8006d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dc02      	bgt.n	8006d30 <__sflush_r+0x20>
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d32:	2e00      	cmp	r6, #0
 8006d34:	d0f9      	beq.n	8006d2a <__sflush_r+0x1a>
 8006d36:	2300      	movs	r3, #0
 8006d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d3c:	682f      	ldr	r7, [r5, #0]
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	d032      	beq.n	8006da8 <__sflush_r+0x98>
 8006d42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	075a      	lsls	r2, r3, #29
 8006d48:	d505      	bpl.n	8006d56 <__sflush_r+0x46>
 8006d4a:	6863      	ldr	r3, [r4, #4]
 8006d4c:	1ac0      	subs	r0, r0, r3
 8006d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d50:	b10b      	cbz	r3, 8006d56 <__sflush_r+0x46>
 8006d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d54:	1ac0      	subs	r0, r0, r3
 8006d56:	2300      	movs	r3, #0
 8006d58:	4602      	mov	r2, r0
 8006d5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d5c:	6a21      	ldr	r1, [r4, #32]
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b0      	blx	r6
 8006d62:	1c43      	adds	r3, r0, #1
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	d106      	bne.n	8006d76 <__sflush_r+0x66>
 8006d68:	6829      	ldr	r1, [r5, #0]
 8006d6a:	291d      	cmp	r1, #29
 8006d6c:	d82c      	bhi.n	8006dc8 <__sflush_r+0xb8>
 8006d6e:	4a2a      	ldr	r2, [pc, #168]	; (8006e18 <__sflush_r+0x108>)
 8006d70:	40ca      	lsrs	r2, r1
 8006d72:	07d6      	lsls	r6, r2, #31
 8006d74:	d528      	bpl.n	8006dc8 <__sflush_r+0xb8>
 8006d76:	2200      	movs	r2, #0
 8006d78:	6062      	str	r2, [r4, #4]
 8006d7a:	04d9      	lsls	r1, r3, #19
 8006d7c:	6922      	ldr	r2, [r4, #16]
 8006d7e:	6022      	str	r2, [r4, #0]
 8006d80:	d504      	bpl.n	8006d8c <__sflush_r+0x7c>
 8006d82:	1c42      	adds	r2, r0, #1
 8006d84:	d101      	bne.n	8006d8a <__sflush_r+0x7a>
 8006d86:	682b      	ldr	r3, [r5, #0]
 8006d88:	b903      	cbnz	r3, 8006d8c <__sflush_r+0x7c>
 8006d8a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d8e:	602f      	str	r7, [r5, #0]
 8006d90:	2900      	cmp	r1, #0
 8006d92:	d0ca      	beq.n	8006d2a <__sflush_r+0x1a>
 8006d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d98:	4299      	cmp	r1, r3
 8006d9a:	d002      	beq.n	8006da2 <__sflush_r+0x92>
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f7ff fb11 	bl	80063c4 <_free_r>
 8006da2:	2000      	movs	r0, #0
 8006da4:	6360      	str	r0, [r4, #52]	; 0x34
 8006da6:	e7c1      	b.n	8006d2c <__sflush_r+0x1c>
 8006da8:	6a21      	ldr	r1, [r4, #32]
 8006daa:	2301      	movs	r3, #1
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b0      	blx	r6
 8006db0:	1c41      	adds	r1, r0, #1
 8006db2:	d1c7      	bne.n	8006d44 <__sflush_r+0x34>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0c4      	beq.n	8006d44 <__sflush_r+0x34>
 8006dba:	2b1d      	cmp	r3, #29
 8006dbc:	d001      	beq.n	8006dc2 <__sflush_r+0xb2>
 8006dbe:	2b16      	cmp	r3, #22
 8006dc0:	d101      	bne.n	8006dc6 <__sflush_r+0xb6>
 8006dc2:	602f      	str	r7, [r5, #0]
 8006dc4:	e7b1      	b.n	8006d2a <__sflush_r+0x1a>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dcc:	81a3      	strh	r3, [r4, #12]
 8006dce:	e7ad      	b.n	8006d2c <__sflush_r+0x1c>
 8006dd0:	690f      	ldr	r7, [r1, #16]
 8006dd2:	2f00      	cmp	r7, #0
 8006dd4:	d0a9      	beq.n	8006d2a <__sflush_r+0x1a>
 8006dd6:	0793      	lsls	r3, r2, #30
 8006dd8:	680e      	ldr	r6, [r1, #0]
 8006dda:	bf08      	it	eq
 8006ddc:	694b      	ldreq	r3, [r1, #20]
 8006dde:	600f      	str	r7, [r1, #0]
 8006de0:	bf18      	it	ne
 8006de2:	2300      	movne	r3, #0
 8006de4:	eba6 0807 	sub.w	r8, r6, r7
 8006de8:	608b      	str	r3, [r1, #8]
 8006dea:	f1b8 0f00 	cmp.w	r8, #0
 8006dee:	dd9c      	ble.n	8006d2a <__sflush_r+0x1a>
 8006df0:	6a21      	ldr	r1, [r4, #32]
 8006df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006df4:	4643      	mov	r3, r8
 8006df6:	463a      	mov	r2, r7
 8006df8:	4628      	mov	r0, r5
 8006dfa:	47b0      	blx	r6
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	dc06      	bgt.n	8006e0e <__sflush_r+0xfe>
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e06:	81a3      	strh	r3, [r4, #12]
 8006e08:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0c:	e78e      	b.n	8006d2c <__sflush_r+0x1c>
 8006e0e:	4407      	add	r7, r0
 8006e10:	eba8 0800 	sub.w	r8, r8, r0
 8006e14:	e7e9      	b.n	8006dea <__sflush_r+0xda>
 8006e16:	bf00      	nop
 8006e18:	20400001 	.word	0x20400001

08006e1c <_fflush_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	690b      	ldr	r3, [r1, #16]
 8006e20:	4605      	mov	r5, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	b913      	cbnz	r3, 8006e2c <_fflush_r+0x10>
 8006e26:	2500      	movs	r5, #0
 8006e28:	4628      	mov	r0, r5
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	b118      	cbz	r0, 8006e36 <_fflush_r+0x1a>
 8006e2e:	6983      	ldr	r3, [r0, #24]
 8006e30:	b90b      	cbnz	r3, 8006e36 <_fflush_r+0x1a>
 8006e32:	f000 f887 	bl	8006f44 <__sinit>
 8006e36:	4b14      	ldr	r3, [pc, #80]	; (8006e88 <_fflush_r+0x6c>)
 8006e38:	429c      	cmp	r4, r3
 8006e3a:	d11b      	bne.n	8006e74 <_fflush_r+0x58>
 8006e3c:	686c      	ldr	r4, [r5, #4]
 8006e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0ef      	beq.n	8006e26 <_fflush_r+0xa>
 8006e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e48:	07d0      	lsls	r0, r2, #31
 8006e4a:	d404      	bmi.n	8006e56 <_fflush_r+0x3a>
 8006e4c:	0599      	lsls	r1, r3, #22
 8006e4e:	d402      	bmi.n	8006e56 <_fflush_r+0x3a>
 8006e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e52:	f000 f915 	bl	8007080 <__retarget_lock_acquire_recursive>
 8006e56:	4628      	mov	r0, r5
 8006e58:	4621      	mov	r1, r4
 8006e5a:	f7ff ff59 	bl	8006d10 <__sflush_r>
 8006e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e60:	07da      	lsls	r2, r3, #31
 8006e62:	4605      	mov	r5, r0
 8006e64:	d4e0      	bmi.n	8006e28 <_fflush_r+0xc>
 8006e66:	89a3      	ldrh	r3, [r4, #12]
 8006e68:	059b      	lsls	r3, r3, #22
 8006e6a:	d4dd      	bmi.n	8006e28 <_fflush_r+0xc>
 8006e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e6e:	f000 f908 	bl	8007082 <__retarget_lock_release_recursive>
 8006e72:	e7d9      	b.n	8006e28 <_fflush_r+0xc>
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <_fflush_r+0x70>)
 8006e76:	429c      	cmp	r4, r3
 8006e78:	d101      	bne.n	8006e7e <_fflush_r+0x62>
 8006e7a:	68ac      	ldr	r4, [r5, #8]
 8006e7c:	e7df      	b.n	8006e3e <_fflush_r+0x22>
 8006e7e:	4b04      	ldr	r3, [pc, #16]	; (8006e90 <_fflush_r+0x74>)
 8006e80:	429c      	cmp	r4, r3
 8006e82:	bf08      	it	eq
 8006e84:	68ec      	ldreq	r4, [r5, #12]
 8006e86:	e7da      	b.n	8006e3e <_fflush_r+0x22>
 8006e88:	08007500 	.word	0x08007500
 8006e8c:	08007520 	.word	0x08007520
 8006e90:	080074e0 	.word	0x080074e0

08006e94 <std>:
 8006e94:	2300      	movs	r3, #0
 8006e96:	b510      	push	{r4, lr}
 8006e98:	4604      	mov	r4, r0
 8006e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ea2:	6083      	str	r3, [r0, #8]
 8006ea4:	8181      	strh	r1, [r0, #12]
 8006ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ea8:	81c2      	strh	r2, [r0, #14]
 8006eaa:	6183      	str	r3, [r0, #24]
 8006eac:	4619      	mov	r1, r3
 8006eae:	2208      	movs	r2, #8
 8006eb0:	305c      	adds	r0, #92	; 0x5c
 8006eb2:	f7ff fa09 	bl	80062c8 <memset>
 8006eb6:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <std+0x38>)
 8006eb8:	6263      	str	r3, [r4, #36]	; 0x24
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <std+0x3c>)
 8006ebc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ebe:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <std+0x40>)
 8006ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <std+0x44>)
 8006ec4:	6224      	str	r4, [r4, #32]
 8006ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	bf00      	nop
 8006ecc:	080071f1 	.word	0x080071f1
 8006ed0:	08007213 	.word	0x08007213
 8006ed4:	0800724b 	.word	0x0800724b
 8006ed8:	0800726f 	.word	0x0800726f

08006edc <_cleanup_r>:
 8006edc:	4901      	ldr	r1, [pc, #4]	; (8006ee4 <_cleanup_r+0x8>)
 8006ede:	f000 b8af 	b.w	8007040 <_fwalk_reent>
 8006ee2:	bf00      	nop
 8006ee4:	08006e1d 	.word	0x08006e1d

08006ee8 <__sfmoreglue>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	2268      	movs	r2, #104	; 0x68
 8006eec:	1e4d      	subs	r5, r1, #1
 8006eee:	4355      	muls	r5, r2
 8006ef0:	460e      	mov	r6, r1
 8006ef2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ef6:	f7ff fad1 	bl	800649c <_malloc_r>
 8006efa:	4604      	mov	r4, r0
 8006efc:	b140      	cbz	r0, 8006f10 <__sfmoreglue+0x28>
 8006efe:	2100      	movs	r1, #0
 8006f00:	e9c0 1600 	strd	r1, r6, [r0]
 8006f04:	300c      	adds	r0, #12
 8006f06:	60a0      	str	r0, [r4, #8]
 8006f08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f0c:	f7ff f9dc 	bl	80062c8 <memset>
 8006f10:	4620      	mov	r0, r4
 8006f12:	bd70      	pop	{r4, r5, r6, pc}

08006f14 <__sfp_lock_acquire>:
 8006f14:	4801      	ldr	r0, [pc, #4]	; (8006f1c <__sfp_lock_acquire+0x8>)
 8006f16:	f000 b8b3 	b.w	8007080 <__retarget_lock_acquire_recursive>
 8006f1a:	bf00      	nop
 8006f1c:	20013499 	.word	0x20013499

08006f20 <__sfp_lock_release>:
 8006f20:	4801      	ldr	r0, [pc, #4]	; (8006f28 <__sfp_lock_release+0x8>)
 8006f22:	f000 b8ae 	b.w	8007082 <__retarget_lock_release_recursive>
 8006f26:	bf00      	nop
 8006f28:	20013499 	.word	0x20013499

08006f2c <__sinit_lock_acquire>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__sinit_lock_acquire+0x8>)
 8006f2e:	f000 b8a7 	b.w	8007080 <__retarget_lock_acquire_recursive>
 8006f32:	bf00      	nop
 8006f34:	2001349a 	.word	0x2001349a

08006f38 <__sinit_lock_release>:
 8006f38:	4801      	ldr	r0, [pc, #4]	; (8006f40 <__sinit_lock_release+0x8>)
 8006f3a:	f000 b8a2 	b.w	8007082 <__retarget_lock_release_recursive>
 8006f3e:	bf00      	nop
 8006f40:	2001349a 	.word	0x2001349a

08006f44 <__sinit>:
 8006f44:	b510      	push	{r4, lr}
 8006f46:	4604      	mov	r4, r0
 8006f48:	f7ff fff0 	bl	8006f2c <__sinit_lock_acquire>
 8006f4c:	69a3      	ldr	r3, [r4, #24]
 8006f4e:	b11b      	cbz	r3, 8006f58 <__sinit+0x14>
 8006f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f54:	f7ff bff0 	b.w	8006f38 <__sinit_lock_release>
 8006f58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f5c:	6523      	str	r3, [r4, #80]	; 0x50
 8006f5e:	4b13      	ldr	r3, [pc, #76]	; (8006fac <__sinit+0x68>)
 8006f60:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <__sinit+0x6c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f66:	42a3      	cmp	r3, r4
 8006f68:	bf04      	itt	eq
 8006f6a:	2301      	moveq	r3, #1
 8006f6c:	61a3      	streq	r3, [r4, #24]
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 f820 	bl	8006fb4 <__sfp>
 8006f74:	6060      	str	r0, [r4, #4]
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 f81c 	bl	8006fb4 <__sfp>
 8006f7c:	60a0      	str	r0, [r4, #8]
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 f818 	bl	8006fb4 <__sfp>
 8006f84:	2200      	movs	r2, #0
 8006f86:	60e0      	str	r0, [r4, #12]
 8006f88:	2104      	movs	r1, #4
 8006f8a:	6860      	ldr	r0, [r4, #4]
 8006f8c:	f7ff ff82 	bl	8006e94 <std>
 8006f90:	68a0      	ldr	r0, [r4, #8]
 8006f92:	2201      	movs	r2, #1
 8006f94:	2109      	movs	r1, #9
 8006f96:	f7ff ff7d 	bl	8006e94 <std>
 8006f9a:	68e0      	ldr	r0, [r4, #12]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	2112      	movs	r1, #18
 8006fa0:	f7ff ff78 	bl	8006e94 <std>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	61a3      	str	r3, [r4, #24]
 8006fa8:	e7d2      	b.n	8006f50 <__sinit+0xc>
 8006faa:	bf00      	nop
 8006fac:	080073f8 	.word	0x080073f8
 8006fb0:	08006edd 	.word	0x08006edd

08006fb4 <__sfp>:
 8006fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb6:	4607      	mov	r7, r0
 8006fb8:	f7ff ffac 	bl	8006f14 <__sfp_lock_acquire>
 8006fbc:	4b1e      	ldr	r3, [pc, #120]	; (8007038 <__sfp+0x84>)
 8006fbe:	681e      	ldr	r6, [r3, #0]
 8006fc0:	69b3      	ldr	r3, [r6, #24]
 8006fc2:	b913      	cbnz	r3, 8006fca <__sfp+0x16>
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f7ff ffbd 	bl	8006f44 <__sinit>
 8006fca:	3648      	adds	r6, #72	; 0x48
 8006fcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	d503      	bpl.n	8006fdc <__sfp+0x28>
 8006fd4:	6833      	ldr	r3, [r6, #0]
 8006fd6:	b30b      	cbz	r3, 800701c <__sfp+0x68>
 8006fd8:	6836      	ldr	r6, [r6, #0]
 8006fda:	e7f7      	b.n	8006fcc <__sfp+0x18>
 8006fdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fe0:	b9d5      	cbnz	r5, 8007018 <__sfp+0x64>
 8006fe2:	4b16      	ldr	r3, [pc, #88]	; (800703c <__sfp+0x88>)
 8006fe4:	60e3      	str	r3, [r4, #12]
 8006fe6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fea:	6665      	str	r5, [r4, #100]	; 0x64
 8006fec:	f000 f847 	bl	800707e <__retarget_lock_init_recursive>
 8006ff0:	f7ff ff96 	bl	8006f20 <__sfp_lock_release>
 8006ff4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ff8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ffc:	6025      	str	r5, [r4, #0]
 8006ffe:	61a5      	str	r5, [r4, #24]
 8007000:	2208      	movs	r2, #8
 8007002:	4629      	mov	r1, r5
 8007004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007008:	f7ff f95e 	bl	80062c8 <memset>
 800700c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007014:	4620      	mov	r0, r4
 8007016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007018:	3468      	adds	r4, #104	; 0x68
 800701a:	e7d9      	b.n	8006fd0 <__sfp+0x1c>
 800701c:	2104      	movs	r1, #4
 800701e:	4638      	mov	r0, r7
 8007020:	f7ff ff62 	bl	8006ee8 <__sfmoreglue>
 8007024:	4604      	mov	r4, r0
 8007026:	6030      	str	r0, [r6, #0]
 8007028:	2800      	cmp	r0, #0
 800702a:	d1d5      	bne.n	8006fd8 <__sfp+0x24>
 800702c:	f7ff ff78 	bl	8006f20 <__sfp_lock_release>
 8007030:	230c      	movs	r3, #12
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	e7ee      	b.n	8007014 <__sfp+0x60>
 8007036:	bf00      	nop
 8007038:	080073f8 	.word	0x080073f8
 800703c:	ffff0001 	.word	0xffff0001

08007040 <_fwalk_reent>:
 8007040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007044:	4606      	mov	r6, r0
 8007046:	4688      	mov	r8, r1
 8007048:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800704c:	2700      	movs	r7, #0
 800704e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007052:	f1b9 0901 	subs.w	r9, r9, #1
 8007056:	d505      	bpl.n	8007064 <_fwalk_reent+0x24>
 8007058:	6824      	ldr	r4, [r4, #0]
 800705a:	2c00      	cmp	r4, #0
 800705c:	d1f7      	bne.n	800704e <_fwalk_reent+0xe>
 800705e:	4638      	mov	r0, r7
 8007060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007064:	89ab      	ldrh	r3, [r5, #12]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d907      	bls.n	800707a <_fwalk_reent+0x3a>
 800706a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800706e:	3301      	adds	r3, #1
 8007070:	d003      	beq.n	800707a <_fwalk_reent+0x3a>
 8007072:	4629      	mov	r1, r5
 8007074:	4630      	mov	r0, r6
 8007076:	47c0      	blx	r8
 8007078:	4307      	orrs	r7, r0
 800707a:	3568      	adds	r5, #104	; 0x68
 800707c:	e7e9      	b.n	8007052 <_fwalk_reent+0x12>

0800707e <__retarget_lock_init_recursive>:
 800707e:	4770      	bx	lr

08007080 <__retarget_lock_acquire_recursive>:
 8007080:	4770      	bx	lr

08007082 <__retarget_lock_release_recursive>:
 8007082:	4770      	bx	lr

08007084 <__swhatbuf_r>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	460e      	mov	r6, r1
 8007088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800708c:	2900      	cmp	r1, #0
 800708e:	b096      	sub	sp, #88	; 0x58
 8007090:	4614      	mov	r4, r2
 8007092:	461d      	mov	r5, r3
 8007094:	da08      	bge.n	80070a8 <__swhatbuf_r+0x24>
 8007096:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	602a      	str	r2, [r5, #0]
 800709e:	061a      	lsls	r2, r3, #24
 80070a0:	d410      	bmi.n	80070c4 <__swhatbuf_r+0x40>
 80070a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070a6:	e00e      	b.n	80070c6 <__swhatbuf_r+0x42>
 80070a8:	466a      	mov	r2, sp
 80070aa:	f000 f8f5 	bl	8007298 <_fstat_r>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	dbf1      	blt.n	8007096 <__swhatbuf_r+0x12>
 80070b2:	9a01      	ldr	r2, [sp, #4]
 80070b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070bc:	425a      	negs	r2, r3
 80070be:	415a      	adcs	r2, r3
 80070c0:	602a      	str	r2, [r5, #0]
 80070c2:	e7ee      	b.n	80070a2 <__swhatbuf_r+0x1e>
 80070c4:	2340      	movs	r3, #64	; 0x40
 80070c6:	2000      	movs	r0, #0
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	b016      	add	sp, #88	; 0x58
 80070cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080070d0 <__smakebuf_r>:
 80070d0:	898b      	ldrh	r3, [r1, #12]
 80070d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070d4:	079d      	lsls	r5, r3, #30
 80070d6:	4606      	mov	r6, r0
 80070d8:	460c      	mov	r4, r1
 80070da:	d507      	bpl.n	80070ec <__smakebuf_r+0x1c>
 80070dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	6123      	str	r3, [r4, #16]
 80070e4:	2301      	movs	r3, #1
 80070e6:	6163      	str	r3, [r4, #20]
 80070e8:	b002      	add	sp, #8
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
 80070ec:	ab01      	add	r3, sp, #4
 80070ee:	466a      	mov	r2, sp
 80070f0:	f7ff ffc8 	bl	8007084 <__swhatbuf_r>
 80070f4:	9900      	ldr	r1, [sp, #0]
 80070f6:	4605      	mov	r5, r0
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7ff f9cf 	bl	800649c <_malloc_r>
 80070fe:	b948      	cbnz	r0, 8007114 <__smakebuf_r+0x44>
 8007100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007104:	059a      	lsls	r2, r3, #22
 8007106:	d4ef      	bmi.n	80070e8 <__smakebuf_r+0x18>
 8007108:	f023 0303 	bic.w	r3, r3, #3
 800710c:	f043 0302 	orr.w	r3, r3, #2
 8007110:	81a3      	strh	r3, [r4, #12]
 8007112:	e7e3      	b.n	80070dc <__smakebuf_r+0xc>
 8007114:	4b0d      	ldr	r3, [pc, #52]	; (800714c <__smakebuf_r+0x7c>)
 8007116:	62b3      	str	r3, [r6, #40]	; 0x28
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	6020      	str	r0, [r4, #0]
 800711c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	9b00      	ldr	r3, [sp, #0]
 8007124:	6163      	str	r3, [r4, #20]
 8007126:	9b01      	ldr	r3, [sp, #4]
 8007128:	6120      	str	r0, [r4, #16]
 800712a:	b15b      	cbz	r3, 8007144 <__smakebuf_r+0x74>
 800712c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007130:	4630      	mov	r0, r6
 8007132:	f000 f8c3 	bl	80072bc <_isatty_r>
 8007136:	b128      	cbz	r0, 8007144 <__smakebuf_r+0x74>
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	f023 0303 	bic.w	r3, r3, #3
 800713e:	f043 0301 	orr.w	r3, r3, #1
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	89a0      	ldrh	r0, [r4, #12]
 8007146:	4305      	orrs	r5, r0
 8007148:	81a5      	strh	r5, [r4, #12]
 800714a:	e7cd      	b.n	80070e8 <__smakebuf_r+0x18>
 800714c:	08006edd 	.word	0x08006edd

08007150 <__malloc_lock>:
 8007150:	4801      	ldr	r0, [pc, #4]	; (8007158 <__malloc_lock+0x8>)
 8007152:	f7ff bf95 	b.w	8007080 <__retarget_lock_acquire_recursive>
 8007156:	bf00      	nop
 8007158:	20013498 	.word	0x20013498

0800715c <__malloc_unlock>:
 800715c:	4801      	ldr	r0, [pc, #4]	; (8007164 <__malloc_unlock+0x8>)
 800715e:	f7ff bf90 	b.w	8007082 <__retarget_lock_release_recursive>
 8007162:	bf00      	nop
 8007164:	20013498 	.word	0x20013498

08007168 <_raise_r>:
 8007168:	291f      	cmp	r1, #31
 800716a:	b538      	push	{r3, r4, r5, lr}
 800716c:	4604      	mov	r4, r0
 800716e:	460d      	mov	r5, r1
 8007170:	d904      	bls.n	800717c <_raise_r+0x14>
 8007172:	2316      	movs	r3, #22
 8007174:	6003      	str	r3, [r0, #0]
 8007176:	f04f 30ff 	mov.w	r0, #4294967295
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800717e:	b112      	cbz	r2, 8007186 <_raise_r+0x1e>
 8007180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007184:	b94b      	cbnz	r3, 800719a <_raise_r+0x32>
 8007186:	4620      	mov	r0, r4
 8007188:	f000 f830 	bl	80071ec <_getpid_r>
 800718c:	462a      	mov	r2, r5
 800718e:	4601      	mov	r1, r0
 8007190:	4620      	mov	r0, r4
 8007192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007196:	f000 b817 	b.w	80071c8 <_kill_r>
 800719a:	2b01      	cmp	r3, #1
 800719c:	d00a      	beq.n	80071b4 <_raise_r+0x4c>
 800719e:	1c59      	adds	r1, r3, #1
 80071a0:	d103      	bne.n	80071aa <_raise_r+0x42>
 80071a2:	2316      	movs	r3, #22
 80071a4:	6003      	str	r3, [r0, #0]
 80071a6:	2001      	movs	r0, #1
 80071a8:	e7e7      	b.n	800717a <_raise_r+0x12>
 80071aa:	2400      	movs	r4, #0
 80071ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071b0:	4628      	mov	r0, r5
 80071b2:	4798      	blx	r3
 80071b4:	2000      	movs	r0, #0
 80071b6:	e7e0      	b.n	800717a <_raise_r+0x12>

080071b8 <raise>:
 80071b8:	4b02      	ldr	r3, [pc, #8]	; (80071c4 <raise+0xc>)
 80071ba:	4601      	mov	r1, r0
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	f7ff bfd3 	b.w	8007168 <_raise_r>
 80071c2:	bf00      	nop
 80071c4:	20000014 	.word	0x20000014

080071c8 <_kill_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4d07      	ldr	r5, [pc, #28]	; (80071e8 <_kill_r+0x20>)
 80071cc:	2300      	movs	r3, #0
 80071ce:	4604      	mov	r4, r0
 80071d0:	4608      	mov	r0, r1
 80071d2:	4611      	mov	r1, r2
 80071d4:	602b      	str	r3, [r5, #0]
 80071d6:	f7f9 fc9f 	bl	8000b18 <_kill>
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	d102      	bne.n	80071e4 <_kill_r+0x1c>
 80071de:	682b      	ldr	r3, [r5, #0]
 80071e0:	b103      	cbz	r3, 80071e4 <_kill_r+0x1c>
 80071e2:	6023      	str	r3, [r4, #0]
 80071e4:	bd38      	pop	{r3, r4, r5, pc}
 80071e6:	bf00      	nop
 80071e8:	2001349c 	.word	0x2001349c

080071ec <_getpid_r>:
 80071ec:	f7f9 bc8c 	b.w	8000b08 <_getpid>

080071f0 <__sread>:
 80071f0:	b510      	push	{r4, lr}
 80071f2:	460c      	mov	r4, r1
 80071f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f8:	f000 f882 	bl	8007300 <_read_r>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	bfab      	itete	ge
 8007200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007202:	89a3      	ldrhlt	r3, [r4, #12]
 8007204:	181b      	addge	r3, r3, r0
 8007206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800720a:	bfac      	ite	ge
 800720c:	6563      	strge	r3, [r4, #84]	; 0x54
 800720e:	81a3      	strhlt	r3, [r4, #12]
 8007210:	bd10      	pop	{r4, pc}

08007212 <__swrite>:
 8007212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007216:	461f      	mov	r7, r3
 8007218:	898b      	ldrh	r3, [r1, #12]
 800721a:	05db      	lsls	r3, r3, #23
 800721c:	4605      	mov	r5, r0
 800721e:	460c      	mov	r4, r1
 8007220:	4616      	mov	r6, r2
 8007222:	d505      	bpl.n	8007230 <__swrite+0x1e>
 8007224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007228:	2302      	movs	r3, #2
 800722a:	2200      	movs	r2, #0
 800722c:	f000 f856 	bl	80072dc <_lseek_r>
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800723a:	81a3      	strh	r3, [r4, #12]
 800723c:	4632      	mov	r2, r6
 800723e:	463b      	mov	r3, r7
 8007240:	4628      	mov	r0, r5
 8007242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007246:	f7fe bfe5 	b.w	8006214 <_write_r>

0800724a <__sseek>:
 800724a:	b510      	push	{r4, lr}
 800724c:	460c      	mov	r4, r1
 800724e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007252:	f000 f843 	bl	80072dc <_lseek_r>
 8007256:	1c43      	adds	r3, r0, #1
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	bf15      	itete	ne
 800725c:	6560      	strne	r0, [r4, #84]	; 0x54
 800725e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007266:	81a3      	strheq	r3, [r4, #12]
 8007268:	bf18      	it	ne
 800726a:	81a3      	strhne	r3, [r4, #12]
 800726c:	bd10      	pop	{r4, pc}

0800726e <__sclose>:
 800726e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007272:	f000 b801 	b.w	8007278 <_close_r>
	...

08007278 <_close_r>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4d06      	ldr	r5, [pc, #24]	; (8007294 <_close_r+0x1c>)
 800727c:	2300      	movs	r3, #0
 800727e:	4604      	mov	r4, r0
 8007280:	4608      	mov	r0, r1
 8007282:	602b      	str	r3, [r5, #0]
 8007284:	f7f9 fc7f 	bl	8000b86 <_close>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_close_r+0x1a>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_close_r+0x1a>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	2001349c 	.word	0x2001349c

08007298 <_fstat_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d07      	ldr	r5, [pc, #28]	; (80072b8 <_fstat_r+0x20>)
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	4611      	mov	r1, r2
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	f7f9 fc7a 	bl	8000b9e <_fstat>
 80072aa:	1c43      	adds	r3, r0, #1
 80072ac:	d102      	bne.n	80072b4 <_fstat_r+0x1c>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	b103      	cbz	r3, 80072b4 <_fstat_r+0x1c>
 80072b2:	6023      	str	r3, [r4, #0]
 80072b4:	bd38      	pop	{r3, r4, r5, pc}
 80072b6:	bf00      	nop
 80072b8:	2001349c 	.word	0x2001349c

080072bc <_isatty_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d06      	ldr	r5, [pc, #24]	; (80072d8 <_isatty_r+0x1c>)
 80072c0:	2300      	movs	r3, #0
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	602b      	str	r3, [r5, #0]
 80072c8:	f7f9 fc79 	bl	8000bbe <_isatty>
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d102      	bne.n	80072d6 <_isatty_r+0x1a>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	b103      	cbz	r3, 80072d6 <_isatty_r+0x1a>
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	bd38      	pop	{r3, r4, r5, pc}
 80072d8:	2001349c 	.word	0x2001349c

080072dc <_lseek_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d07      	ldr	r5, [pc, #28]	; (80072fc <_lseek_r+0x20>)
 80072e0:	4604      	mov	r4, r0
 80072e2:	4608      	mov	r0, r1
 80072e4:	4611      	mov	r1, r2
 80072e6:	2200      	movs	r2, #0
 80072e8:	602a      	str	r2, [r5, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	f7f9 fc72 	bl	8000bd4 <_lseek>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	d102      	bne.n	80072fa <_lseek_r+0x1e>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	b103      	cbz	r3, 80072fa <_lseek_r+0x1e>
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	bd38      	pop	{r3, r4, r5, pc}
 80072fc:	2001349c 	.word	0x2001349c

08007300 <_read_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4d07      	ldr	r5, [pc, #28]	; (8007320 <_read_r+0x20>)
 8007304:	4604      	mov	r4, r0
 8007306:	4608      	mov	r0, r1
 8007308:	4611      	mov	r1, r2
 800730a:	2200      	movs	r2, #0
 800730c:	602a      	str	r2, [r5, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	f7f9 fc1c 	bl	8000b4c <_read>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	d102      	bne.n	800731e <_read_r+0x1e>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	b103      	cbz	r3, 800731e <_read_r+0x1e>
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	bd38      	pop	{r3, r4, r5, pc}
 8007320:	2001349c 	.word	0x2001349c

08007324 <_init>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	bf00      	nop
 8007328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732a:	bc08      	pop	{r3}
 800732c:	469e      	mov	lr, r3
 800732e:	4770      	bx	lr

08007330 <_fini>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	bf00      	nop
 8007334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007336:	bc08      	pop	{r3}
 8007338:	469e      	mov	lr, r3
 800733a:	4770      	bx	lr
