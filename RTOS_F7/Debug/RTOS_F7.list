
RTOS_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008038  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08008238  08008238  00018238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800851c  0800851c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008524  08008524  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008524  08008524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800852c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d0a8  20000078  080085a4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d120  080085a4  0002d120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a7c  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035cd  00000000  00000000  00036b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  0003a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf19  00000000  00000000  0003c968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bde  00000000  00000000  00068881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106a79  00000000  00000000  0008145f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00187ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f68  00000000  00000000  00187f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08008220 	.word	0x08008220

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08008220 	.word	0x08008220

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000bb3c 	.word	0x2000bb3c
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fb9a 	bl	8000dc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f855 	bl	800073c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <main+0x90>)
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	4a1f      	ldr	r2, [pc, #124]	; (8000714 <main+0x90>)
 8000698:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800069c:	60d3      	str	r3, [r2, #12]
  DWT->LAR = 0xC5ACCE55;
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <main+0x94>)
 80006a0:	4a1e      	ldr	r2, [pc, #120]	; (800071c <main+0x98>)
 80006a2:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <main+0x94>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <main+0x94>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a19      	ldr	r2, [pc, #100]	; (8000718 <main+0x94>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f8ae 	bl	8000818 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
//  DWT_CTRL |= (1<<0) ;

  SEGGER_SYSVIEW_Conf() ;
 80006bc:	f004 fa9c 	bl	8004bf8 <SEGGER_SYSVIEW_Conf>
 SEGGER_SYSVIEW_Start() ;
 80006c0:	f005 ff08 	bl	80064d4 <SEGGER_SYSVIEW_Start>


  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello LVT from task 1", 3, &task1_handle) ;
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	2303      	movs	r3, #3
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <main+0x9c>)
 80006d0:	22c8      	movs	r2, #200	; 0xc8
 80006d2:	4914      	ldr	r1, [pc, #80]	; (8000724 <main+0xa0>)
 80006d4:	4814      	ldr	r0, [pc, #80]	; (8000728 <main+0xa4>)
 80006d6:	f002 fc2b 	bl	8002f30 <xTaskCreate>
 80006da:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS) ; // nếu tạo không thành công vẽ rơi vào vòng lặp vô hạn => có lỗi
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d003      	beq.n	80006ea <main+0x66>
 80006e2:	4912      	ldr	r1, [pc, #72]	; (800072c <main+0xa8>)
 80006e4:	2067      	movs	r0, #103	; 0x67
 80006e6:	f000 f9ad 	bl	8000a44 <vAssertCalled>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello LVT from task 2", 2, &task2_handle) ;
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2302      	movs	r3, #2
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <main+0xac>)
 80006f4:	22c8      	movs	r2, #200	; 0xc8
 80006f6:	490f      	ldr	r1, [pc, #60]	; (8000734 <main+0xb0>)
 80006f8:	480f      	ldr	r0, [pc, #60]	; (8000738 <main+0xb4>)
 80006fa:	f002 fc19 	bl	8002f30 <xTaskCreate>
 80006fe:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS) ; // nếu tạo không thành công vẽ rơi vào vòng lặp vô hạn => có lỗi
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d003      	beq.n	800070e <main+0x8a>
 8000706:	4909      	ldr	r1, [pc, #36]	; (800072c <main+0xa8>)
 8000708:	206a      	movs	r0, #106	; 0x6a
 800070a:	f000 f99b 	bl	8000a44 <vAssertCalled>



  // start the FreeRTOS scheduler
  vTaskStartScheduler();
 800070e:	f002 fda3 	bl	8003258 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000712:	e7fe      	b.n	8000712 <main+0x8e>
 8000714:	e000edf0 	.word	0xe000edf0
 8000718:	e0001000 	.word	0xe0001000
 800071c:	c5acce55 	.word	0xc5acce55
 8000720:	08008238 	.word	0x08008238
 8000724:	08008250 	.word	0x08008250
 8000728:	08000a6d 	.word	0x08000a6d
 800072c:	08008258 	.word	0x08008258
 8000730:	0800826c 	.word	0x0800826c
 8000734:	08008284 	.word	0x08008284
 8000738:	08000aa1 	.word	0x08000aa1

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2234      	movs	r2, #52	; 0x34
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f006 fcfe 	bl	800714c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <SystemClock_Config+0xd4>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a2a      	ldr	r2, [pc, #168]	; (8000810 <SystemClock_Config+0xd4>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemClock_Config+0xd4>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <SystemClock_Config+0xd8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a25      	ldr	r2, [pc, #148]	; (8000814 <SystemClock_Config+0xd8>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <SystemClock_Config+0xd8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000798:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007a8:	23d8      	movs	r3, #216	; 0xd8
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fe25 	bl	800140c <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007c8:	f000 f996 	bl	8000af8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007cc:	f000 fdce 	bl	800136c <HAL_PWREx_EnableOverDrive>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007d6:	f000 f98f 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	2107      	movs	r1, #7
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 f8b5 	bl	8001968 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000804:	f000 f978 	bl	8000af8 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3750      	adds	r7, #80	; 0x50
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b7f      	ldr	r3, [pc, #508]	; (8000a2c <MX_GPIO_Init+0x214>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a7e      	ldr	r2, [pc, #504]	; (8000a2c <MX_GPIO_Init+0x214>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b7c      	ldr	r3, [pc, #496]	; (8000a2c <MX_GPIO_Init+0x214>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4b79      	ldr	r3, [pc, #484]	; (8000a2c <MX_GPIO_Init+0x214>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a78      	ldr	r2, [pc, #480]	; (8000a2c <MX_GPIO_Init+0x214>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b76      	ldr	r3, [pc, #472]	; (8000a2c <MX_GPIO_Init+0x214>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b73      	ldr	r3, [pc, #460]	; (8000a2c <MX_GPIO_Init+0x214>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a72      	ldr	r2, [pc, #456]	; (8000a2c <MX_GPIO_Init+0x214>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b70      	ldr	r3, [pc, #448]	; (8000a2c <MX_GPIO_Init+0x214>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b6d      	ldr	r3, [pc, #436]	; (8000a2c <MX_GPIO_Init+0x214>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a6c      	ldr	r2, [pc, #432]	; (8000a2c <MX_GPIO_Init+0x214>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b6a      	ldr	r3, [pc, #424]	; (8000a2c <MX_GPIO_Init+0x214>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	4b67      	ldr	r3, [pc, #412]	; (8000a2c <MX_GPIO_Init+0x214>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a66      	ldr	r2, [pc, #408]	; (8000a2c <MX_GPIO_Init+0x214>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b64      	ldr	r3, [pc, #400]	; (8000a2c <MX_GPIO_Init+0x214>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a6:	4b61      	ldr	r3, [pc, #388]	; (8000a2c <MX_GPIO_Init+0x214>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a60      	ldr	r2, [pc, #384]	; (8000a2c <MX_GPIO_Init+0x214>)
 80008ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b5e      	ldr	r3, [pc, #376]	; (8000a2c <MX_GPIO_Init+0x214>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008c4:	485a      	ldr	r0, [pc, #360]	; (8000a30 <MX_GPIO_Init+0x218>)
 80008c6:	f000 fd37 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2140      	movs	r1, #64	; 0x40
 80008ce:	4859      	ldr	r0, [pc, #356]	; (8000a34 <MX_GPIO_Init+0x21c>)
 80008d0:	f000 fd32 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4853      	ldr	r0, [pc, #332]	; (8000a38 <MX_GPIO_Init+0x220>)
 80008ec:	f000 fb78 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008f0:	2332      	movs	r3, #50	; 0x32
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000900:	230b      	movs	r3, #11
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	484b      	ldr	r0, [pc, #300]	; (8000a38 <MX_GPIO_Init+0x220>)
 800090c:	f000 fb68 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000910:	2386      	movs	r3, #134	; 0x86
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000920:	230b      	movs	r3, #11
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4844      	ldr	r0, [pc, #272]	; (8000a3c <MX_GPIO_Init+0x224>)
 800092c:	f000 fb58 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000930:	f244 0381 	movw	r3, #16513	; 0x4081
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4839      	ldr	r0, [pc, #228]	; (8000a30 <MX_GPIO_Init+0x218>)
 800094a:	f000 fb49 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000960:	230b      	movs	r3, #11
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4831      	ldr	r0, [pc, #196]	; (8000a30 <MX_GPIO_Init+0x218>)
 800096c:	f000 fb38 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000970:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000982:	2307      	movs	r3, #7
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	482c      	ldr	r0, [pc, #176]	; (8000a40 <MX_GPIO_Init+0x228>)
 800098e:	f000 fb27 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4822      	ldr	r0, [pc, #136]	; (8000a34 <MX_GPIO_Init+0x21c>)
 80009aa:	f000 fb19 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	481c      	ldr	r0, [pc, #112]	; (8000a34 <MX_GPIO_Init+0x21c>)
 80009c2:	f000 fb0d 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009c6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009d8:	230a      	movs	r3, #10
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4816      	ldr	r0, [pc, #88]	; (8000a3c <MX_GPIO_Init+0x224>)
 80009e4:	f000 fafc 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <MX_GPIO_Init+0x224>)
 80009fe:	f000 faef 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a14:	230b      	movs	r3, #11
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_GPIO_Init+0x21c>)
 8000a20:	f000 fade 	bl	8000fe0 <HAL_GPIO_Init>

}
 8000a24:	bf00      	nop
 8000a26:	3730      	adds	r7, #48	; 0x30
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400
 8000a34:	40021800 	.word	0x40021800
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	40020c00 	.word	0x40020c00

08000a44 <vAssertCalled>:

/* USER CODE BEGIN 4 */
/*-----------------------------------------------------------*/
void vAssertCalled(uint32_t ulLine, const char *pcFile)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
    volatile unsigned long ul = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
    (void)pcFile;
    (void)ulLine;
    taskENTER_CRITICAL();
 8000a52:	f003 fdc7 	bl	80045e4 <vPortEnterCritical>
    {
        /* Set ul to a non-zero value using the debugger to step out of this
        function. */
        while (ul == 0)
 8000a56:	e000      	b.n	8000a5a <vAssertCalled+0x16>
        {
            __NOP();
 8000a58:	bf00      	nop
        while (ul == 0)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0fb      	beq.n	8000a58 <vAssertCalled+0x14>
        }
    }
    taskEXIT_CRITICAL();
 8000a60:	f003 fdec 	bl	800463c <vPortExitCritical>
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <task1_handler>:

static void task1_handler (void *parameters)   // Static do function này chỉ sử dụng trong phạm vi fine này
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09c      	sub	sp, #112	; 0x70
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	char message[100];
	while(1)
	{
		 printf ("%s\n",(char*)parameters) ;
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f006 fbdf 	bl	8007238 <puts>
		snprintf (message,100,"%s\n",(char*)parameters); // �?ịnh dạng lại thành một chuỗi
 8000a7a:	f107 000c 	add.w	r0, r7, #12
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <task1_handler+0x30>)
 8000a82:	2164      	movs	r1, #100	; 0x64
 8000a84:	f006 fbe0 	bl	8007248 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(message);
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f006 fa93 	bl	8006fb8 <SEGGER_SYSVIEW_PrintfTarget>

		vTaskDelay(pdMS_TO_TICKS(1));
 8000a92:	2064      	movs	r0, #100	; 0x64
 8000a94:	f002 fbac 	bl	80031f0 <vTaskDelay>
		 printf ("%s\n",(char*)parameters) ;
 8000a98:	e7ec      	b.n	8000a74 <task1_handler+0x8>
 8000a9a:	bf00      	nop
 8000a9c:	0800828c 	.word	0x0800828c

08000aa0 <task2_handler>:

}

static void task2_handler(void *parameters) // Static do function này chỉ sử dụng trong phạm vi fine này

{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b09c      	sub	sp, #112	; 0x70
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	char message[100];
	while(1)
	{
		printf ("%s\n",(char*)parameters) ;
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f006 fbc5 	bl	8007238 <puts>
		snprintf (message,100,"%s\n",(char*)parameters); // �?ịnh dạng lại thành một chuỗi
 8000aae:	f107 000c 	add.w	r0, r7, #12
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <task2_handler+0x30>)
 8000ab6:	2164      	movs	r1, #100	; 0x64
 8000ab8:	f006 fbc6 	bl	8007248 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(message);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f006 fa79 	bl	8006fb8 <SEGGER_SYSVIEW_PrintfTarget>
		vTaskDelay(pdMS_TO_TICKS(2));
 8000ac6:	20c8      	movs	r0, #200	; 0xc8
 8000ac8:	f002 fb92 	bl	80031f0 <vTaskDelay>
		printf ("%s\n",(char*)parameters) ;
 8000acc:	e7ec      	b.n	8000aa8 <task2_handler+0x8>
 8000ace:	bf00      	nop
 8000ad0:	0800828c 	.word	0x0800828c

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae6:	f000 f979 	bl	8000ddc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40001000 	.word	0x40001000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_MspInit+0x44>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_MspInit+0x44>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_MspInit+0x44>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_MspInit+0x44>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x44>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x44>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
vInitPrioGroupValue();
 8000b3a:	f003 fcdd 	bl	80044f8 <vInitPrioGroupValue>
  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	2036      	movs	r0, #54	; 0x36
 8000b62:	f000 fa13 	bl	8000f8c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b66:	2036      	movs	r0, #54	; 0x36
 8000b68:	f000 fa2c 	bl	8000fc4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <HAL_InitTick+0xa0>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <HAL_InitTick+0xa0>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_InitTick+0xa0>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b84:	f107 0210 	add.w	r2, r7, #16
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 f8fa 	bl	8001d88 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b94:	f001 f8e4 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <HAL_InitTick+0xa4>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	0c9b      	lsrs	r3, r3, #18
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_InitTick+0xac>)
 8000bb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bbe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bce:	f001 f90d 	bl	8001dec <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d104      	bne.n	8000be2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bd8:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bda:	f001 f969 	bl	8001eb0 <HAL_TIM_Base_Start_IT>
 8000bde:	4603      	mov	r3, r0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3730      	adds	r7, #48	; 0x30
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	20000094 	.word	0x20000094
 8000bf8:	40001000 	.word	0x40001000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM6_DAC_IRQHandler+0x10>)
 8000c2e:	f001 f9b7 	bl	8001fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000094 	.word	0x20000094

08000c3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e00a      	b.n	8000c64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c4e:	f3af 8000 	nop.w
 8000c52:	4601      	mov	r1, r0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	b2ca      	uxtb	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf0      	blt.n	8000c4e <_read+0x12>
	}

return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <_isatty>:

int _isatty(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
	return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f006 f9d4 	bl	80070bc <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20080000 	.word	0x20080000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	200000e0 	.word	0x200000e0
 8000d48:	2000d120 	.word	0x2000d120

08000d4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d76:	490e      	ldr	r1, [pc, #56]	; (8000db0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d8c:	4c0b      	ldr	r4, [pc, #44]	; (8000dbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d9a:	f7ff ffd7 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f006 f993 	bl	80070c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da2:	f7ff fc6f 	bl	8000684 <main>
  bx  lr    
 8000da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000db4:	0800852c 	.word	0x0800852c
  ldr r2, =_sbss
 8000db8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000dbc:	2000d120 	.word	0x2000d120

08000dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC_IRQHandler>

08000dc2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f000 f8d5 	bl	8000f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dcc:	200f      	movs	r0, #15
 8000dce:	f7ff febd 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd2:	f7ff fe97 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	200000e4 	.word	0x200000e4

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200000e4 	.word	0x200000e4

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <__NVIC_SetPriorityGrouping+0x40>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x40>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00
 8000e60:	05fa0000 	.word	0x05fa0000

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff4c 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9e:	f7ff ff61 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	6978      	ldr	r0, [r7, #20]
 8000faa:	f7ff ffb1 	bl	8000f10 <NVIC_EncodePriority>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff80 	bl	8000ebc <__NVIC_SetPriority>
}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff54 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e175      	b.n	80012ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 8164 	bne.w	80012e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_GPIO_Init+0x56>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	69b9      	ldr	r1, [r7, #24]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80be 	beq.w	80012e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4b66      	ldr	r3, [pc, #408]	; (8001304 <HAL_GPIO_Init+0x324>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a65      	ldr	r2, [pc, #404]	; (8001304 <HAL_GPIO_Init+0x324>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b63      	ldr	r3, [pc, #396]	; (8001304 <HAL_GPIO_Init+0x324>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001182:	4a61      	ldr	r2, [pc, #388]	; (8001308 <HAL_GPIO_Init+0x328>)
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a58      	ldr	r2, [pc, #352]	; (800130c <HAL_GPIO_Init+0x32c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d037      	beq.n	800121e <HAL_GPIO_Init+0x23e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a57      	ldr	r2, [pc, #348]	; (8001310 <HAL_GPIO_Init+0x330>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d031      	beq.n	800121a <HAL_GPIO_Init+0x23a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a56      	ldr	r2, [pc, #344]	; (8001314 <HAL_GPIO_Init+0x334>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d02b      	beq.n	8001216 <HAL_GPIO_Init+0x236>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a55      	ldr	r2, [pc, #340]	; (8001318 <HAL_GPIO_Init+0x338>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d025      	beq.n	8001212 <HAL_GPIO_Init+0x232>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a54      	ldr	r2, [pc, #336]	; (800131c <HAL_GPIO_Init+0x33c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d01f      	beq.n	800120e <HAL_GPIO_Init+0x22e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a53      	ldr	r2, [pc, #332]	; (8001320 <HAL_GPIO_Init+0x340>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d019      	beq.n	800120a <HAL_GPIO_Init+0x22a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a52      	ldr	r2, [pc, #328]	; (8001324 <HAL_GPIO_Init+0x344>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0x226>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a51      	ldr	r2, [pc, #324]	; (8001328 <HAL_GPIO_Init+0x348>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00d      	beq.n	8001202 <HAL_GPIO_Init+0x222>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a50      	ldr	r2, [pc, #320]	; (800132c <HAL_GPIO_Init+0x34c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d007      	beq.n	80011fe <HAL_GPIO_Init+0x21e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <HAL_GPIO_Init+0x350>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d101      	bne.n	80011fa <HAL_GPIO_Init+0x21a>
 80011f6:	2309      	movs	r3, #9
 80011f8:	e012      	b.n	8001220 <HAL_GPIO_Init+0x240>
 80011fa:	230a      	movs	r3, #10
 80011fc:	e010      	b.n	8001220 <HAL_GPIO_Init+0x240>
 80011fe:	2308      	movs	r3, #8
 8001200:	e00e      	b.n	8001220 <HAL_GPIO_Init+0x240>
 8001202:	2307      	movs	r3, #7
 8001204:	e00c      	b.n	8001220 <HAL_GPIO_Init+0x240>
 8001206:	2306      	movs	r3, #6
 8001208:	e00a      	b.n	8001220 <HAL_GPIO_Init+0x240>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x240>
 800120e:	2304      	movs	r3, #4
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x240>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x240>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x240>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x240>
 800121e:	2300      	movs	r3, #0
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	; (8001308 <HAL_GPIO_Init+0x328>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <HAL_GPIO_Init+0x354>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001262:	4a34      	ldr	r2, [pc, #208]	; (8001334 <HAL_GPIO_Init+0x354>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001268:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_GPIO_Init+0x354>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800128c:	4a29      	ldr	r2, [pc, #164]	; (8001334 <HAL_GPIO_Init+0x354>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_GPIO_Init+0x354>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b6:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <HAL_GPIO_Init+0x354>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_GPIO_Init+0x354>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_GPIO_Init+0x354>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	f67f ae86 	bls.w	8001000 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40021400 	.word	0x40021400
 8001324:	40021800 	.word	0x40021800
 8001328:	40021c00 	.word	0x40021c00
 800132c:	40022000 	.word	0x40022000
 8001330:	40022400 	.word	0x40022400
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001354:	e003      	b.n	800135e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <HAL_PWREx_EnableOverDrive+0x98>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a22      	ldr	r2, [pc, #136]	; (8001404 <HAL_PWREx_EnableOverDrive+0x98>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_PWREx_EnableOverDrive+0x98>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800139a:	f7ff fd33 	bl	8000e04 <HAL_GetTick>
 800139e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013a0:	e009      	b.n	80013b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013a2:	f7ff fd2f 	bl	8000e04 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b0:	d901      	bls.n	80013b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e022      	b.n	80013fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c2:	d1ee      	bne.n	80013a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d0:	f7ff fd18 	bl	8000e04 <HAL_GetTick>
 80013d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013d6:	e009      	b.n	80013ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013d8:	f7ff fd14 	bl	8000e04 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013e6:	d901      	bls.n	80013ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e007      	b.n	80013fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013f8:	d1ee      	bne.n	80013d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000

0800140c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e29b      	b.n	800195a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 8087 	beq.w	800153e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001430:	4b96      	ldr	r3, [pc, #600]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b04      	cmp	r3, #4
 800143a:	d00c      	beq.n	8001456 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143c:	4b93      	ldr	r3, [pc, #588]	; (800168c <HAL_RCC_OscConfig+0x280>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b08      	cmp	r3, #8
 8001446:	d112      	bne.n	800146e <HAL_RCC_OscConfig+0x62>
 8001448:	4b90      	ldr	r3, [pc, #576]	; (800168c <HAL_RCC_OscConfig+0x280>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001454:	d10b      	bne.n	800146e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001456:	4b8d      	ldr	r3, [pc, #564]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d06c      	beq.n	800153c <HAL_RCC_OscConfig+0x130>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d168      	bne.n	800153c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e275      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x7a>
 8001478:	4b84      	ldr	r3, [pc, #528]	; (800168c <HAL_RCC_OscConfig+0x280>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a83      	ldr	r2, [pc, #524]	; (800168c <HAL_RCC_OscConfig+0x280>)
 800147e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e02e      	b.n	80014e4 <HAL_RCC_OscConfig+0xd8>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x9c>
 800148e:	4b7f      	ldr	r3, [pc, #508]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a7e      	ldr	r2, [pc, #504]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b7c      	ldr	r3, [pc, #496]	; (800168c <HAL_RCC_OscConfig+0x280>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a7b      	ldr	r2, [pc, #492]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80014a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0xd8>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0xc0>
 80014b2:	4b76      	ldr	r3, [pc, #472]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a75      	ldr	r2, [pc, #468]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b73      	ldr	r3, [pc, #460]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a72      	ldr	r2, [pc, #456]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0xd8>
 80014cc:	4b6f      	ldr	r3, [pc, #444]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a6e      	ldr	r2, [pc, #440]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b6c      	ldr	r3, [pc, #432]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a6b      	ldr	r2, [pc, #428]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc8a 	bl	8000e04 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fc86 	bl	8000e04 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e229      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b61      	ldr	r3, [pc, #388]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0xe8>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fc76 	bl	8000e04 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fc72 	bl	8000e04 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e215      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	4b57      	ldr	r3, [pc, #348]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x110>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d069      	beq.n	800161e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800154a:	4b50      	ldr	r3, [pc, #320]	; (800168c <HAL_RCC_OscConfig+0x280>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b4d      	ldr	r3, [pc, #308]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b08      	cmp	r3, #8
 8001560:	d11c      	bne.n	800159c <HAL_RCC_OscConfig+0x190>
 8001562:	4b4a      	ldr	r3, [pc, #296]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_RCC_OscConfig+0x17a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e1e9      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b41      	ldr	r3, [pc, #260]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	493d      	ldr	r1, [pc, #244]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	e040      	b.n	800161e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d023      	beq.n	80015ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	4b39      	ldr	r3, [pc, #228]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a38      	ldr	r2, [pc, #224]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fc28 	bl	8000e04 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fc24 	bl	8000e04 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1c7      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ca:	4b30      	ldr	r3, [pc, #192]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4929      	ldr	r1, [pc, #164]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
 80015ea:	e018      	b.n	800161e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a26      	ldr	r2, [pc, #152]	; (800168c <HAL_RCC_OscConfig+0x280>)
 80015f2:	f023 0301 	bic.w	r3, r3, #1
 80015f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fc04 	bl	8000e04 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001600:	f7ff fc00 	bl	8000e04 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1a3      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d038      	beq.n	800169c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d019      	beq.n	8001666 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001636:	4a15      	ldr	r2, [pc, #84]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163e:	f7ff fbe1 	bl	8000e04 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001646:	f7ff fbdd 	bl	8000e04 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e180      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_RCC_OscConfig+0x280>)
 800165a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x23a>
 8001664:	e01a      	b.n	800169c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <HAL_RCC_OscConfig+0x280>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff fbc7 	bl	8000e04 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167a:	f7ff fbc3 	bl	8000e04 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d903      	bls.n	8001690 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e166      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
 800168c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	4b92      	ldr	r3, [pc, #584]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1ee      	bne.n	800167a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80a4 	beq.w	80017f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016aa:	4b8c      	ldr	r3, [pc, #560]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10d      	bne.n	80016d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b89      	ldr	r3, [pc, #548]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a88      	ldr	r2, [pc, #544]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b86      	ldr	r3, [pc, #536]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ce:	2301      	movs	r3, #1
 80016d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d2:	4b83      	ldr	r3, [pc, #524]	; (80018e0 <HAL_RCC_OscConfig+0x4d4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d118      	bne.n	8001710 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016de:	4b80      	ldr	r3, [pc, #512]	; (80018e0 <HAL_RCC_OscConfig+0x4d4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a7f      	ldr	r2, [pc, #508]	; (80018e0 <HAL_RCC_OscConfig+0x4d4>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fb8b 	bl	8000e04 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff fb87 	bl	8000e04 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b64      	cmp	r3, #100	; 0x64
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e12a      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001704:	4b76      	ldr	r3, [pc, #472]	; (80018e0 <HAL_RCC_OscConfig+0x4d4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x31a>
 8001718:	4b70      	ldr	r3, [pc, #448]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	4a6f      	ldr	r2, [pc, #444]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6713      	str	r3, [r2, #112]	; 0x70
 8001724:	e02d      	b.n	8001782 <HAL_RCC_OscConfig+0x376>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x33c>
 800172e:	4b6b      	ldr	r3, [pc, #428]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	4a6a      	ldr	r2, [pc, #424]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	6713      	str	r3, [r2, #112]	; 0x70
 800173a:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	4a67      	ldr	r2, [pc, #412]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001740:	f023 0304 	bic.w	r3, r3, #4
 8001744:	6713      	str	r3, [r2, #112]	; 0x70
 8001746:	e01c      	b.n	8001782 <HAL_RCC_OscConfig+0x376>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b05      	cmp	r3, #5
 800174e:	d10c      	bne.n	800176a <HAL_RCC_OscConfig+0x35e>
 8001750:	4b62      	ldr	r3, [pc, #392]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001754:	4a61      	ldr	r2, [pc, #388]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6713      	str	r3, [r2, #112]	; 0x70
 800175c:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001760:	4a5e      	ldr	r2, [pc, #376]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6713      	str	r3, [r2, #112]	; 0x70
 8001768:	e00b      	b.n	8001782 <HAL_RCC_OscConfig+0x376>
 800176a:	4b5c      	ldr	r3, [pc, #368]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	4a5b      	ldr	r2, [pc, #364]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6713      	str	r3, [r2, #112]	; 0x70
 8001776:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d015      	beq.n	80017b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff fb3b 	bl	8000e04 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff fb37 	bl	8000e04 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e0d8      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ee      	beq.n	8001792 <HAL_RCC_OscConfig+0x386>
 80017b4:	e014      	b.n	80017e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fb25 	bl	8000e04 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff fb21 	bl	8000e04 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e0c2      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d4:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1ee      	bne.n	80017be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d105      	bne.n	80017f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a3c      	ldr	r2, [pc, #240]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 80017ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80ae 	beq.w	8001958 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fc:	4b37      	ldr	r3, [pc, #220]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b08      	cmp	r3, #8
 8001806:	d06d      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d14b      	bne.n	80018a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a31      	ldr	r2, [pc, #196]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800181a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff faf2 	bl	8000e04 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff faee 	bl	8000e04 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e091      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	4b29      	ldr	r3, [pc, #164]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	019b      	lsls	r3, r3, #6
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	3b01      	subs	r3, #1
 800185c:	041b      	lsls	r3, r3, #16
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	071b      	lsls	r3, r3, #28
 800186e:	491b      	ldr	r1, [pc, #108]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a18      	ldr	r2, [pc, #96]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 800187a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800187e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fac0 	bl	8000e04 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff fabc 	bl	8000e04 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e05f      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x47c>
 80018a6:	e057      	b.n	8001958 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 80018ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff faa6 	bl	8000e04 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff faa2 	bl	8000e04 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e045      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ce:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_RCC_OscConfig+0x4d0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x4b0>
 80018da:	e03d      	b.n	8001958 <HAL_RCC_OscConfig+0x54c>
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018e4:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <HAL_RCC_OscConfig+0x558>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d030      	beq.n	8001954 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d129      	bne.n	8001954 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d122      	bne.n	8001954 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001914:	4013      	ands	r3, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800191a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800191c:	4293      	cmp	r3, r2
 800191e:	d119      	bne.n	8001954 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	085b      	lsrs	r3, r3, #1
 800192c:	3b01      	subs	r3, #1
 800192e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001930:	429a      	cmp	r2, r3
 8001932:	d10f      	bne.n	8001954 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d107      	bne.n	8001954 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0d0      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d910      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 020f 	bic.w	r2, r3, #15
 8001996:	4965      	ldr	r1, [pc, #404]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0b8      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c8:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 80019ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 80019e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ec:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	494d      	ldr	r1, [pc, #308]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d040      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d115      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e07f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2a:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e073      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06b      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f023 0203 	bic.w	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4936      	ldr	r1, [pc, #216]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a5c:	f7ff f9d2 	bl	8000e04 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7ff f9ce 	bl	8000e04 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e053      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 020c 	and.w	r2, r3, #12
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1eb      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d210      	bcs.n	8001abc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 020f 	bic.w	r2, r3, #15
 8001aa2:	4922      	ldr	r1, [pc, #136]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e032      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4916      	ldr	r1, [pc, #88]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	490e      	ldr	r1, [pc, #56]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001afa:	f000 f821 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001afe:	4602      	mov	r2, r0
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	490a      	ldr	r1, [pc, #40]	; (8001b34 <HAL_RCC_ClockConfig+0x1cc>)
 8001b0c:	5ccb      	ldrb	r3, [r1, r3]
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_RCC_ClockConfig+0x1d0>)
 8001b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1d4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f816 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023c00 	.word	0x40023c00
 8001b30:	40023800 	.word	0x40023800
 8001b34:	08008448 	.word	0x08008448
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b44:	b094      	sub	sp, #80	; 0x50
 8001b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b50:	2300      	movs	r3, #0
 8001b52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b58:	4b79      	ldr	r3, [pc, #484]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d00d      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x40>
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	f200 80e1 	bhi.w	8001d2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x34>
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d003      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b72:	e0db      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b74:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b78:	e0db      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b7a:	4b72      	ldr	r3, [pc, #456]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b7e:	e0d8      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b80:	4b6f      	ldr	r3, [pc, #444]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b88:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d063      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b96:	4b6a      	ldr	r3, [pc, #424]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	099b      	lsrs	r3, r3, #6
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ba0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8001baa:	2300      	movs	r3, #0
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
 8001bae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bb2:	4622      	mov	r2, r4
 8001bb4:	462b      	mov	r3, r5
 8001bb6:	f04f 0000 	mov.w	r0, #0
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	0159      	lsls	r1, r3, #5
 8001bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc4:	0150      	lsls	r0, r2, #5
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4621      	mov	r1, r4
 8001bcc:	1a51      	subs	r1, r2, r1
 8001bce:	6139      	str	r1, [r7, #16]
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001be4:	4659      	mov	r1, fp
 8001be6:	018b      	lsls	r3, r1, #6
 8001be8:	4651      	mov	r1, sl
 8001bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bee:	4651      	mov	r1, sl
 8001bf0:	018a      	lsls	r2, r1, #6
 8001bf2:	4651      	mov	r1, sl
 8001bf4:	ebb2 0801 	subs.w	r8, r2, r1
 8001bf8:	4659      	mov	r1, fp
 8001bfa:	eb63 0901 	sbc.w	r9, r3, r1
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c12:	4690      	mov	r8, r2
 8001c14:	4699      	mov	r9, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	eb18 0303 	adds.w	r3, r8, r3
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	462b      	mov	r3, r5
 8001c20:	eb49 0303 	adc.w	r3, r9, r3
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c32:	4629      	mov	r1, r5
 8001c34:	028b      	lsls	r3, r1, #10
 8001c36:	4621      	mov	r1, r4
 8001c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	028a      	lsls	r2, r1, #10
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c46:	2200      	movs	r2, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c50:	f7fe fb96 	bl	8000380 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c5c:	e058      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	099b      	lsrs	r3, r3, #6
 8001c64:	2200      	movs	r2, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	4611      	mov	r1, r2
 8001c6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c6e:	623b      	str	r3, [r7, #32]
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
 8001c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c78:	4642      	mov	r2, r8
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	0159      	lsls	r1, r3, #5
 8001c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c8a:	0150      	lsls	r0, r2, #5
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4641      	mov	r1, r8
 8001c92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c96:	4649      	mov	r1, r9
 8001c98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ca8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cb0:	ebb2 040a 	subs.w	r4, r2, sl
 8001cb4:	eb63 050b 	sbc.w	r5, r3, fp
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	00eb      	lsls	r3, r5, #3
 8001cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cc6:	00e2      	lsls	r2, r4, #3
 8001cc8:	4614      	mov	r4, r2
 8001cca:	461d      	mov	r5, r3
 8001ccc:	4643      	mov	r3, r8
 8001cce:	18e3      	adds	r3, r4, r3
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	464b      	mov	r3, r9
 8001cd4:	eb45 0303 	adc.w	r3, r5, r3
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	028b      	lsls	r3, r1, #10
 8001cea:	4621      	mov	r1, r4
 8001cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	028a      	lsls	r2, r1, #10
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	61fa      	str	r2, [r7, #28]
 8001d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d04:	f7fe fb3c 	bl	8000380 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	0c1b      	lsrs	r3, r3, #16
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001d20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d2a:	e002      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3750      	adds	r7, #80	; 0x50
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	00f42400 	.word	0x00f42400

08001d48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000000 	.word	0x20000000

08001d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d64:	f7ff fff0 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4903      	ldr	r1, [pc, #12]	; (8001d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	08008458 	.word	0x08008458

08001d88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	220f      	movs	r2, #15
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0203 	and.w	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_RCC_GetClockConfig+0x5c>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_RCC_GetClockConfig+0x5c>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_GetClockConfig+0x5c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_RCC_GetClockConfig+0x60>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 020f 	and.w	r2, r3, #15
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	601a      	str	r2, [r3, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40023c00 	.word	0x40023c00

08001dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e049      	b.n	8001e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f841 	bl	8001e9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3304      	adds	r3, #4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	f000 fa00 	bl	8002230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d001      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e054      	b.n	8001f72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a26      	ldr	r2, [pc, #152]	; (8001f80 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d022      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef2:	d01d      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a22      	ldr	r2, [pc, #136]	; (8001f84 <HAL_TIM_Base_Start_IT+0xd4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d018      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_TIM_Base_Start_IT+0xdc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00e      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_TIM_Base_Start_IT+0xe0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d009      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <HAL_TIM_Base_Start_IT+0xe4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <HAL_TIM_Base_Start_IT+0xe8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d115      	bne.n	8001f5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_TIM_Base_Start_IT+0xec>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d015      	beq.n	8001f6e <HAL_TIM_Base_Start_IT+0xbe>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f48:	d011      	beq.n	8001f6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5a:	e008      	b.n	8001f6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e000      	b.n	8001f70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40000800 	.word	0x40000800
 8001f8c:	40000c00 	.word	0x40000c00
 8001f90:	40010400 	.word	0x40010400
 8001f94:	40014000 	.word	0x40014000
 8001f98:	40001800 	.word	0x40001800
 8001f9c:	00010007 	.word	0x00010007

08001fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d122      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d11b      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0202 	mvn.w	r2, #2
 8001fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f905 	bl	80021f2 <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8f7 	bl	80021de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f908 	bl	8002206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b04      	cmp	r3, #4
 8002008:	d122      	bne.n	8002050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d11b      	bne.n	8002050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0204 	mvn.w	r2, #4
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8db 	bl	80021f2 <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8cd 	bl	80021de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f8de 	bl	8002206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b08      	cmp	r3, #8
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b08      	cmp	r3, #8
 800206a:	d11b      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0208 	mvn.w	r2, #8
 8002074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2204      	movs	r2, #4
 800207a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8b1 	bl	80021f2 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8a3 	bl	80021de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8b4 	bl	8002206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d122      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d11b      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0210 	mvn.w	r2, #16
 80020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2208      	movs	r2, #8
 80020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f887 	bl	80021f2 <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f879 	bl	80021de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f88a 	bl	8002206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d107      	bne.n	8002124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0201 	mvn.w	r2, #1
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fcd8 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212e:	2b80      	cmp	r3, #128	; 0x80
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d107      	bne.n	8002150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f91a 	bl	8002384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215e:	d10e      	bne.n	800217e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	2b80      	cmp	r3, #128	; 0x80
 800216c:	d107      	bne.n	800217e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f90d 	bl	8002398 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d10e      	bne.n	80021aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d107      	bne.n	80021aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f838 	bl	800221a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d10e      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d107      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f06f 0220 	mvn.w	r2, #32
 80021ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f8cd 	bl	8002370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a40      	ldr	r2, [pc, #256]	; (8002344 <TIM_Base_SetConfig+0x114>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d013      	beq.n	8002270 <TIM_Base_SetConfig+0x40>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224e:	d00f      	beq.n	8002270 <TIM_Base_SetConfig+0x40>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a3d      	ldr	r2, [pc, #244]	; (8002348 <TIM_Base_SetConfig+0x118>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00b      	beq.n	8002270 <TIM_Base_SetConfig+0x40>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a3c      	ldr	r2, [pc, #240]	; (800234c <TIM_Base_SetConfig+0x11c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d007      	beq.n	8002270 <TIM_Base_SetConfig+0x40>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a3b      	ldr	r2, [pc, #236]	; (8002350 <TIM_Base_SetConfig+0x120>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d003      	beq.n	8002270 <TIM_Base_SetConfig+0x40>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3a      	ldr	r2, [pc, #232]	; (8002354 <TIM_Base_SetConfig+0x124>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d108      	bne.n	8002282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <TIM_Base_SetConfig+0x114>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d02b      	beq.n	80022e2 <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002290:	d027      	beq.n	80022e2 <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a2c      	ldr	r2, [pc, #176]	; (8002348 <TIM_Base_SetConfig+0x118>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d023      	beq.n	80022e2 <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2b      	ldr	r2, [pc, #172]	; (800234c <TIM_Base_SetConfig+0x11c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01f      	beq.n	80022e2 <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a2a      	ldr	r2, [pc, #168]	; (8002350 <TIM_Base_SetConfig+0x120>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01b      	beq.n	80022e2 <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a29      	ldr	r2, [pc, #164]	; (8002354 <TIM_Base_SetConfig+0x124>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d017      	beq.n	80022e2 <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a28      	ldr	r2, [pc, #160]	; (8002358 <TIM_Base_SetConfig+0x128>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a27      	ldr	r2, [pc, #156]	; (800235c <TIM_Base_SetConfig+0x12c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00f      	beq.n	80022e2 <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a26      	ldr	r2, [pc, #152]	; (8002360 <TIM_Base_SetConfig+0x130>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00b      	beq.n	80022e2 <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a25      	ldr	r2, [pc, #148]	; (8002364 <TIM_Base_SetConfig+0x134>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a24      	ldr	r2, [pc, #144]	; (8002368 <TIM_Base_SetConfig+0x138>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d003      	beq.n	80022e2 <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a23      	ldr	r2, [pc, #140]	; (800236c <TIM_Base_SetConfig+0x13c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d108      	bne.n	80022f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <TIM_Base_SetConfig+0x114>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d003      	beq.n	8002328 <TIM_Base_SetConfig+0xf8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <TIM_Base_SetConfig+0x124>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d103      	bne.n	8002330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	615a      	str	r2, [r3, #20]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40010000 	.word	0x40010000
 8002348:	40000400 	.word	0x40000400
 800234c:	40000800 	.word	0x40000800
 8002350:	40000c00 	.word	0x40000c00
 8002354:	40010400 	.word	0x40010400
 8002358:	40014000 	.word	0x40014000
 800235c:	40014400 	.word	0x40014400
 8002360:	40014800 	.word	0x40014800
 8002364:	40001800 	.word	0x40001800
 8002368:	40001c00 	.word	0x40001c00
 800236c:	40002000 	.word	0x40002000

08002370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f103 0208 	add.w	r2, r3, #8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f04f 32ff 	mov.w	r2, #4294967295
 80023c4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f103 0208 	add.w	r2, r3, #8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f103 0208 	add.w	r2, r3, #8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	601a      	str	r2, [r3, #0]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d103      	bne.n	800246e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e00c      	b.n	8002488 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3308      	adds	r3, #8
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e002      	b.n	800247c <vListInsert+0x2e>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	429a      	cmp	r2, r3
 8002486:	d2f6      	bcs.n	8002476 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	601a      	str	r2, [r3, #0]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6892      	ldr	r2, [r2, #8]
 80024d6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6852      	ldr	r2, [r2, #4]
 80024e0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d103      	bne.n	80024f4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1e5a      	subs	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <xQueueGenericReset+0x1e>
 8002528:	492a      	ldr	r1, [pc, #168]	; (80025d4 <xQueueGenericReset+0xc0>)
 800252a:	f240 100d 	movw	r0, #269	; 0x10d
 800252e:	f7fe fa89 	bl	8000a44 <vAssertCalled>

    taskENTER_CRITICAL();
 8002532:	f002 f857 	bl	80045e4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	68f9      	ldr	r1, [r7, #12]
 8002540:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	441a      	add	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	3b01      	subs	r3, #1
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	441a      	add	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	22ff      	movs	r2, #255	; 0xff
 8002576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	22ff      	movs	r2, #255	; 0xff
 800257e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d114      	bne.n	80025b2 <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01a      	beq.n	80025c6 <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3310      	adds	r3, #16
 8002594:	4618      	mov	r0, r3
 8002596:	f001 f8f3 	bl	8003780 <xTaskRemoveFromEventList>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d012      	beq.n	80025c6 <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80025a0:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <xQueueGenericReset+0xc4>)
 80025a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	e009      	b.n	80025c6 <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3310      	adds	r3, #16
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fef8 	bl	80023ac <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3324      	adds	r3, #36	; 0x24
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fef3 	bl	80023ac <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80025c6:	f002 f839 	bl	800463c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80025ca:	2301      	movs	r3, #1
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	08008290 	.word	0x08008290
 80025d8:	e000ed04 	.word	0xe000ed04

080025dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	; 0x28
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <xQueueGenericCreate+0x1e>
 80025f0:	4921      	ldr	r1, [pc, #132]	; (8002678 <xQueueGenericCreate+0x9c>)
 80025f2:	f44f 70c3 	mov.w	r0, #390	; 0x186
 80025f6:	f7fe fa25 	bl	8000a44 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
 8002602:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <xQueueGenericCreate+0x3c>
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	429a      	cmp	r2, r3
 8002616:	d101      	bne.n	800261c <xQueueGenericCreate+0x40>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <xQueueGenericCreate+0x42>
 800261c:	2300      	movs	r3, #0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d104      	bne.n	800262c <xQueueGenericCreate+0x50>
 8002622:	4915      	ldr	r1, [pc, #84]	; (8002678 <xQueueGenericCreate+0x9c>)
 8002624:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 8002628:	f7fe fa0c 	bl	8000a44 <vAssertCalled>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002632:	d904      	bls.n	800263e <xQueueGenericCreate+0x62>
 8002634:	4910      	ldr	r1, [pc, #64]	; (8002678 <xQueueGenericCreate+0x9c>)
 8002636:	f240 1091 	movw	r0, #401	; 0x191
 800263a:	f7fe fa03 	bl	8000a44 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3350      	adds	r3, #80	; 0x50
 8002642:	4618      	mov	r0, r3
 8002644:	f002 f8e8 	bl	8004818 <pvPortMalloc>
 8002648:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <xQueueGenericCreate+0x90>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3350      	adds	r3, #80	; 0x50
 8002658:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800265a:	79fa      	ldrb	r2, [r7, #7]
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	4613      	mov	r3, r2
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f808 	bl	800267c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800266c:	69bb      	ldr	r3, [r7, #24]
    }
 800266e:	4618      	mov	r0, r3
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	08008290 	.word	0x08008290

0800267c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d103      	bne.n	8002698 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e002      	b.n	800269e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026aa:	2101      	movs	r1, #1
 80026ac:	69b8      	ldr	r0, [r7, #24]
 80026ae:	f7ff ff31 	bl	8002514 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	68f9      	ldr	r1, [r7, #12]
 80026c0:	2073      	movs	r0, #115	; 0x73
 80026c2:	f003 fdff 	bl	80062c4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	; 0x30
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026de:	2300      	movs	r3, #0
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d104      	bne.n	80026f6 <xQueueGenericSend+0x26>
 80026ec:	497e      	ldr	r1, [pc, #504]	; (80028e8 <xQueueGenericSend+0x218>)
 80026ee:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80026f2:	f7fe f9a7 	bl	8000a44 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <xQueueGenericSend+0x34>
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <xQueueGenericSend+0x38>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <xQueueGenericSend+0x3a>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <xQueueGenericSend+0x48>
 800270e:	4976      	ldr	r1, [pc, #472]	; (80028e8 <xQueueGenericSend+0x218>)
 8002710:	f240 300d 	movw	r0, #781	; 0x30d
 8002714:	f7fe f996 	bl	8000a44 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d103      	bne.n	8002726 <xQueueGenericSend+0x56>
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <xQueueGenericSend+0x5a>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <xQueueGenericSend+0x5c>
 800272a:	2300      	movs	r3, #0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <xQueueGenericSend+0x6a>
 8002730:	496d      	ldr	r1, [pc, #436]	; (80028e8 <xQueueGenericSend+0x218>)
 8002732:	f240 300e 	movw	r0, #782	; 0x30e
 8002736:	f7fe f985 	bl	8000a44 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800273a:	f001 f9b3 	bl	8003aa4 <xTaskGetSchedulerState>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <xQueueGenericSend+0x7a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <xQueueGenericSend+0x7e>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <xQueueGenericSend+0x80>
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d104      	bne.n	800275e <xQueueGenericSend+0x8e>
 8002754:	4964      	ldr	r1, [pc, #400]	; (80028e8 <xQueueGenericSend+0x218>)
 8002756:	f240 3011 	movw	r0, #785	; 0x311
 800275a:	f7fe f973 	bl	8000a44 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800275e:	f001 ff41 	bl	80045e4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <xQueueGenericSend+0xa4>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d136      	bne.n	80027e2 <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	4618      	mov	r0, r3
 8002778:	f004 fb32 	bl	8006de0 <SEGGER_SYSVIEW_ShrinkId>
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	460b      	mov	r3, r1
 8002786:	4601      	mov	r1, r0
 8002788:	205a      	movs	r0, #90	; 0x5a
 800278a:	f003 fe11 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	6a38      	ldr	r0, [r7, #32]
 8002794:	f000 fa56 	bl	8002c44 <prvCopyDataToQueue>
 8002798:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d010      	beq.n	80027c4 <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	3324      	adds	r3, #36	; 0x24
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 ffea 	bl	8003780 <xTaskRemoveFromEventList>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d013      	beq.n	80027da <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80027b2:	4b4e      	ldr	r3, [pc, #312]	; (80028ec <xQueueGenericSend+0x21c>)
 80027b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	e00a      	b.n	80027da <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80027ca:	4b48      	ldr	r3, [pc, #288]	; (80028ec <xQueueGenericSend+0x21c>)
 80027cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80027da:	f001 ff2f 	bl	800463c <vPortExitCritical>
                return pdPASS;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07d      	b.n	80028de <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d110      	bne.n	800280a <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027e8:	f001 ff28 	bl	800463c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f004 faf6 	bl	8006de0 <SEGGER_SYSVIEW_ShrinkId>
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	460b      	mov	r3, r1
 80027fe:	4601      	mov	r1, r0
 8002800:	205a      	movs	r0, #90	; 0x5a
 8002802:	f003 fdd5 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002806:	2300      	movs	r3, #0
 8002808:	e069      	b.n	80028de <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4618      	mov	r0, r3
 8002816:	f001 f815 	bl	8003844 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800281a:	2301      	movs	r3, #1
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800281e:	f001 ff0d 	bl	800463c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002822:	f000 fd79 	bl	8003318 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002826:	f001 fedd 	bl	80045e4 <vPortEnterCritical>
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002830:	b25b      	sxtb	r3, r3
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d103      	bne.n	8002840 <xQueueGenericSend+0x170>
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002846:	b25b      	sxtb	r3, r3
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d103      	bne.n	8002856 <xQueueGenericSend+0x186>
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002856:	f001 fef1 	bl	800463c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800285a:	1d3a      	adds	r2, r7, #4
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f001 f804 	bl	8003870 <xTaskCheckForTimeOut>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d124      	bne.n	80028b8 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800286e:	6a38      	ldr	r0, [r7, #32]
 8002870:	f000 fae0 	bl	8002e34 <prvIsQueueFull>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d018      	beq.n	80028ac <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	3310      	adds	r3, #16
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f000 ff32 	bl	80036ec <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002888:	6a38      	ldr	r0, [r7, #32]
 800288a:	f000 fa6b 	bl	8002d64 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800288e:	f000 fd51 	bl	8003334 <xTaskResumeAll>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	f47f af62 	bne.w	800275e <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 800289a:	4b14      	ldr	r3, [pc, #80]	; (80028ec <xQueueGenericSend+0x21c>)
 800289c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	e758      	b.n	800275e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80028ac:	6a38      	ldr	r0, [r7, #32]
 80028ae:	f000 fa59 	bl	8002d64 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028b2:	f000 fd3f 	bl	8003334 <xTaskResumeAll>
 80028b6:	e752      	b.n	800275e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80028b8:	6a38      	ldr	r0, [r7, #32]
 80028ba:	f000 fa53 	bl	8002d64 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028be:	f000 fd39 	bl	8003334 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 fa8b 	bl	8006de0 <SEGGER_SYSVIEW_ShrinkId>
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	460b      	mov	r3, r1
 80028d4:	4601      	mov	r1, r0
 80028d6:	205a      	movs	r0, #90	; 0x5a
 80028d8:	f003 fd6a 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80028dc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3728      	adds	r7, #40	; 0x28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	08008290 	.word	0x08008290
 80028ec:	e000ed04 	.word	0xe000ed04

080028f0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	2b00      	cmp	r3, #0
 8002906:	d104      	bne.n	8002912 <xQueueGenericSendFromISR+0x22>
 8002908:	494d      	ldr	r1, [pc, #308]	; (8002a40 <xQueueGenericSendFromISR+0x150>)
 800290a:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 800290e:	f7fe f899 	bl	8000a44 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d103      	bne.n	8002920 <xQueueGenericSendFromISR+0x30>
 8002918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <xQueueGenericSendFromISR+0x34>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <xQueueGenericSendFromISR+0x36>
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d104      	bne.n	8002934 <xQueueGenericSendFromISR+0x44>
 800292a:	4945      	ldr	r1, [pc, #276]	; (8002a40 <xQueueGenericSendFromISR+0x150>)
 800292c:	f240 30e1 	movw	r0, #993	; 0x3e1
 8002930:	f7fe f888 	bl	8000a44 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d103      	bne.n	8002942 <xQueueGenericSendFromISR+0x52>
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <xQueueGenericSendFromISR+0x56>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <xQueueGenericSendFromISR+0x58>
 8002946:	2300      	movs	r3, #0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d104      	bne.n	8002956 <xQueueGenericSendFromISR+0x66>
 800294c:	493c      	ldr	r1, [pc, #240]	; (8002a40 <xQueueGenericSendFromISR+0x150>)
 800294e:	f240 30e2 	movw	r0, #994	; 0x3e2
 8002952:	f7fe f877 	bl	8000a44 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002956:	f001 ff2b 	bl	80047b0 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800295a:	f3ef 8211 	mrs	r2, BASEPRI
 800295e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002962:	b672      	cpsid	i
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	b662      	cpsie	i
 8002972:	61ba      	str	r2, [r7, #24]
 8002974:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002976:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	429a      	cmp	r2, r3
 8002984:	d302      	bcc.n	800298c <xQueueGenericSendFromISR+0x9c>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d142      	bne.n	8002a12 <xQueueGenericSendFromISR+0x122>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	61fb      	str	r3, [r7, #28]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	4618      	mov	r0, r3
 80029a0:	f004 fa1e 	bl	8006de0 <SEGGER_SYSVIEW_ShrinkId>
 80029a4:	4601      	mov	r1, r0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	461a      	mov	r2, r3
 80029aa:	2060      	movs	r0, #96	; 0x60
 80029ac:	f003 fc30 	bl	8006210 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b6:	f000 f945 	bl	8002c44 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80029ba:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c2:	d112      	bne.n	80029ea <xQueueGenericSendFromISR+0xfa>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01f      	beq.n	8002a0c <xQueueGenericSendFromISR+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	3324      	adds	r3, #36	; 0x24
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fed5 	bl	8003780 <xTaskRemoveFromEventList>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d017      	beq.n	8002a0c <xQueueGenericSendFromISR+0x11c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d014      	beq.n	8002a0c <xQueueGenericSendFromISR+0x11c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e010      	b.n	8002a0c <xQueueGenericSendFromISR+0x11c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80029ea:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80029ee:	2b7f      	cmp	r3, #127	; 0x7f
 80029f0:	d104      	bne.n	80029fc <xQueueGenericSendFromISR+0x10c>
 80029f2:	4913      	ldr	r1, [pc, #76]	; (8002a40 <xQueueGenericSendFromISR+0x150>)
 80029f4:	f240 406b 	movw	r0, #1131	; 0x46b
 80029f8:	f7fe f824 	bl	8000a44 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a00:	3301      	adds	r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	b25a      	sxtb	r2, r3
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        {
 8002a10:	e00b      	b.n	8002a2a <xQueueGenericSendFromISR+0x13a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	4618      	mov	r0, r3
 8002a16:	f004 f9e3 	bl	8006de0 <SEGGER_SYSVIEW_ShrinkId>
 8002a1a:	4601      	mov	r1, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2060      	movs	r0, #96	; 0x60
 8002a22:	f003 fbf5 	bl	8006210 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002a34:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3730      	adds	r7, #48	; 0x30
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	08008290 	.word	0x08008290

08002a44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b08d      	sub	sp, #52	; 0x34
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <xQueueReceive+0x24>
 8002a5e:	4977      	ldr	r1, [pc, #476]	; (8002c3c <xQueueReceive+0x1f8>)
 8002a60:	f240 502f 	movw	r0, #1327	; 0x52f
 8002a64:	f7fd ffee 	bl	8000a44 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <xQueueReceive+0x32>
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <xQueueReceive+0x36>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <xQueueReceive+0x38>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d104      	bne.n	8002a8a <xQueueReceive+0x46>
 8002a80:	496e      	ldr	r1, [pc, #440]	; (8002c3c <xQueueReceive+0x1f8>)
 8002a82:	f240 5033 	movw	r0, #1331	; 0x533
 8002a86:	f7fd ffdd 	bl	8000a44 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a8a:	f001 f80b 	bl	8003aa4 <xTaskGetSchedulerState>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <xQueueReceive+0x56>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <xQueueReceive+0x5a>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <xQueueReceive+0x5c>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d104      	bne.n	8002aae <xQueueReceive+0x6a>
 8002aa4:	4965      	ldr	r1, [pc, #404]	; (8002c3c <xQueueReceive+0x1f8>)
 8002aa6:	f44f 60a7 	mov.w	r0, #1336	; 0x538
 8002aaa:	f7fd ffcb 	bl	8000a44 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002aae:	f001 fd99 	bl	80045e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d02f      	beq.n	8002b1e <xQueueReceive+0xda>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	6a38      	ldr	r0, [r7, #32]
 8002ac2:	f000 f929 	bl	8002d18 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f004 f989 	bl	8006de0 <SEGGER_SYSVIEW_ShrinkId>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f004 f985 	bl	8006de0 <SEGGER_SYSVIEW_ShrinkId>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2101      	movs	r1, #1
 8002adc:	9100      	str	r1, [sp, #0]
 8002ade:	4621      	mov	r1, r4
 8002ae0:	205c      	movs	r0, #92	; 0x5c
 8002ae2:	f003 fc65 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00f      	beq.n	8002b16 <xQueueReceive+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	3310      	adds	r3, #16
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fe40 	bl	8003780 <xTaskRemoveFromEventList>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <xQueueReceive+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002b06:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <xQueueReceive+0x1fc>)
 8002b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b16:	f001 fd91 	bl	800463c <vPortExitCritical>
                return pdPASS;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e08a      	b.n	8002c34 <xQueueReceive+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d113      	bne.n	8002b4c <xQueueReceive+0x108>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b24:	f001 fd8a 	bl	800463c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 f958 	bl	8006de0 <SEGGER_SYSVIEW_ShrinkId>
 8002b30:	4604      	mov	r4, r0
 8002b32:	2000      	movs	r0, #0
 8002b34:	f004 f954 	bl	8006de0 <SEGGER_SYSVIEW_ShrinkId>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	9100      	str	r1, [sp, #0]
 8002b40:	4621      	mov	r1, r4
 8002b42:	205c      	movs	r0, #92	; 0x5c
 8002b44:	f003 fc34 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e073      	b.n	8002c34 <xQueueReceive+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b52:	f107 0314 	add.w	r3, r7, #20
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fe74 	bl	8003844 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b60:	f001 fd6c 	bl	800463c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b64:	f000 fbd8 	bl	8003318 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b68:	f001 fd3c 	bl	80045e4 <vPortEnterCritical>
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b72:	b25b      	sxtb	r3, r3
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d103      	bne.n	8002b82 <xQueueReceive+0x13e>
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8e:	d103      	bne.n	8002b98 <xQueueReceive+0x154>
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b98:	f001 fd50 	bl	800463c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b9c:	1d3a      	adds	r2, r7, #4
 8002b9e:	f107 0314 	add.w	r3, r7, #20
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fe63 	bl	8003870 <xTaskCheckForTimeOut>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d124      	bne.n	8002bfa <xQueueReceive+0x1b6>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bb0:	6a38      	ldr	r0, [r7, #32]
 8002bb2:	f000 f929 	bl	8002e08 <prvIsQueueEmpty>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d018      	beq.n	8002bee <xQueueReceive+0x1aa>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	3324      	adds	r3, #36	; 0x24
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fd91 	bl	80036ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002bca:	6a38      	ldr	r0, [r7, #32]
 8002bcc:	f000 f8ca 	bl	8002d64 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002bd0:	f000 fbb0 	bl	8003334 <xTaskResumeAll>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f47f af69 	bne.w	8002aae <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <xQueueReceive+0x1fc>)
 8002bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	e75f      	b.n	8002aae <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002bee:	6a38      	ldr	r0, [r7, #32]
 8002bf0:	f000 f8b8 	bl	8002d64 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002bf4:	f000 fb9e 	bl	8003334 <xTaskResumeAll>
 8002bf8:	e759      	b.n	8002aae <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002bfa:	6a38      	ldr	r0, [r7, #32]
 8002bfc:	f000 f8b2 	bl	8002d64 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c00:	f000 fb98 	bl	8003334 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c04:	6a38      	ldr	r0, [r7, #32]
 8002c06:	f000 f8ff 	bl	8002e08 <prvIsQueueEmpty>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f43f af4e 	beq.w	8002aae <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 f8e3 	bl	8006de0 <SEGGER_SYSVIEW_ShrinkId>
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f004 f8df 	bl	8006de0 <SEGGER_SYSVIEW_ShrinkId>
 8002c22:	4602      	mov	r2, r0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2101      	movs	r1, #1
 8002c28:	9100      	str	r1, [sp, #0]
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	205c      	movs	r0, #92	; 0x5c
 8002c2e:	f003 fbbf 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002c32:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	372c      	adds	r7, #44	; 0x2c
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd90      	pop	{r4, r7, pc}
 8002c3c:	08008290 	.word	0x08008290
 8002c40:	e000ed04 	.word	0xe000ed04

08002c44 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d14d      	bne.n	8002d06 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 ff36 	bl	8003ae0 <xTaskPriorityDisinherit>
 8002c74:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	e043      	b.n	8002d06 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d119      	bne.n	8002cb8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6858      	ldr	r0, [r3, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	f004 fa4e 	bl	8007130 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	441a      	add	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d32b      	bcc.n	8002d06 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	e026      	b.n	8002d06 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	68d8      	ldr	r0, [r3, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	f004 fa34 	bl	8007130 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	425b      	negs	r3, r3
 8002cd2:	441a      	add	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d207      	bcs.n	8002cf4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	425b      	negs	r3, r3
 8002cee:	441a      	add	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d105      	bne.n	8002d06 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002d0e:	697b      	ldr	r3, [r7, #20]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d018      	beq.n	8002d5c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	441a      	add	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d303      	bcc.n	8002d4c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68d9      	ldr	r1, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	461a      	mov	r2, r3
 8002d56:	6838      	ldr	r0, [r7, #0]
 8002d58:	f004 f9ea 	bl	8007130 <memcpy>
    }
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d6c:	f001 fc3a 	bl	80045e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d76:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d78:	e011      	b.n	8002d9e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3324      	adds	r3, #36	; 0x24
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fcfa 	bl	8003780 <xTaskRemoveFromEventList>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d92:	f000 fdc9 	bl	8003928 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	dce9      	bgt.n	8002d7a <prvUnlockQueue+0x16>
 8002da6:	e000      	b.n	8002daa <prvUnlockQueue+0x46>
                        break;
 8002da8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002db2:	f001 fc43 	bl	800463c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002db6:	f001 fc15 	bl	80045e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dc0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dc2:	e011      	b.n	8002de8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d012      	beq.n	8002df2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3310      	adds	r3, #16
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fcd5 	bl	8003780 <xTaskRemoveFromEventList>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002ddc:	f000 fda4 	bl	8003928 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002de0:	7bbb      	ldrb	r3, [r7, #14]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	dce9      	bgt.n	8002dc4 <prvUnlockQueue+0x60>
 8002df0:	e000      	b.n	8002df4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002df2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	22ff      	movs	r2, #255	; 0xff
 8002df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002dfc:	f001 fc1e 	bl	800463c <vPortExitCritical>
}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e10:	f001 fbe8 	bl	80045e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	e001      	b.n	8002e26 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e26:	f001 fc09 	bl	800463c <vPortExitCritical>

    return xReturn;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e3c:	f001 fbd2 	bl	80045e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d102      	bne.n	8002e52 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	e001      	b.n	8002e56 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e56:	f001 fbf1 	bl	800463c <vPortExitCritical>

    return xReturn;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e01e      	b.n	8002eb2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e74:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <vQueueAddToRegistry+0x60>)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d115      	bne.n	8002eac <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e80:	4910      	ldr	r1, [pc, #64]	; (8002ec4 <vQueueAddToRegistry+0x60>)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <vQueueAddToRegistry+0x60>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 ffa1 	bl	8006de0 <SEGGER_SYSVIEW_ShrinkId>
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2071      	movs	r0, #113	; 0x71
 8002ea6:	f003 f9b3 	bl	8006210 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002eaa:	e006      	b.n	8002eba <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b07      	cmp	r3, #7
 8002eb6:	d9dd      	bls.n	8002e74 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200000e8 	.word	0x200000e8

08002ec8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002ed8:	f001 fb84 	bl	80045e4 <vPortEnterCritical>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d103      	bne.n	8002ef2 <vQueueWaitForMessageRestricted+0x2a>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efe:	d103      	bne.n	8002f08 <vQueueWaitForMessageRestricted+0x40>
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f08:	f001 fb98 	bl	800463c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3324      	adds	r3, #36	; 0x24
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fc05 	bl	800372c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f7ff ff1e 	bl	8002d64 <prvUnlockQueue>
    }
 8002f28:	bf00      	nop
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08c      	sub	sp, #48	; 0x30
 8002f34:	af04      	add	r7, sp, #16
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 fc67 	bl	8004818 <pvPortMalloc>
 8002f4a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00e      	beq.n	8002f70 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f52:	2058      	movs	r0, #88	; 0x58
 8002f54:	f001 fc60 	bl	8004818 <pvPortMalloc>
 8002f58:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
 8002f66:	e005      	b.n	8002f74 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002f68:	6978      	ldr	r0, [r7, #20]
 8002f6a:	f001 fd23 	bl	80049b4 <vPortFree>
 8002f6e:	e001      	b.n	8002f74 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d013      	beq.n	8002fa2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f7a:	88fa      	ldrh	r2, [r7, #6]
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	9303      	str	r3, [sp, #12]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	9302      	str	r3, [sp, #8]
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f80f 	bl	8002fb4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f96:	69f8      	ldr	r0, [r7, #28]
 8002f98:	f000 f89e 	bl	80030d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	61bb      	str	r3, [r7, #24]
 8002fa0:	e002      	b.n	8002fa8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002fa8:	69bb      	ldr	r3, [r7, #24]
    }
 8002faa:	4618      	mov	r0, r3
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	461a      	mov	r2, r3
 8002fcc:	21a5      	movs	r1, #165	; 0xa5
 8002fce:	f004 f8bd 	bl	800714c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002fdc:	440b      	add	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f023 0307 	bic.w	r3, r3, #7
 8002fea:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d004      	beq.n	8003000 <prvInitialiseNewTask+0x4c>
 8002ff6:	4937      	ldr	r1, [pc, #220]	; (80030d4 <prvInitialiseNewTask+0x120>)
 8002ff8:	f240 3069 	movw	r0, #873	; 0x369
 8002ffc:	f7fd fd22 	bl	8000a44 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01f      	beq.n	8003046 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	e012      	b.n	8003032 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4413      	add	r3, r2
 8003012:	7819      	ldrb	r1, [r3, #0]
 8003014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	4413      	add	r3, r2
 800301a:	3334      	adds	r3, #52	; 0x34
 800301c:	460a      	mov	r2, r1
 800301e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	4413      	add	r3, r2
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3301      	adds	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b09      	cmp	r3, #9
 8003036:	d9e9      	bls.n	800300c <prvInitialiseNewTask+0x58>
 8003038:	e000      	b.n	800303c <prvInitialiseNewTask+0x88>
            {
                break;
 800303a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003044:	e003      	b.n	800304e <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d901      	bls.n	8003058 <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003054:	2304      	movs	r3, #4
 8003056:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	6a3a      	ldr	r2, [r7, #32]
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	6a3a      	ldr	r2, [r7, #32]
 8003062:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	2200      	movs	r2, #0
 8003068:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	3304      	adds	r3, #4
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff f9bc 	bl	80023ec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	3318      	adds	r3, #24
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f9b7 	bl	80023ec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003082:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	f1c3 0205 	rsb	r2, r3, #5
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003092:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	3350      	adds	r3, #80	; 0x50
 8003098:	2204      	movs	r2, #4
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f004 f855 	bl	800714c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	3354      	adds	r3, #84	; 0x54
 80030a6:	2201      	movs	r2, #1
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f004 f84e 	bl	800714c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	6938      	ldr	r0, [r7, #16]
 80030b6:	f001 f913 	bl	80042e0 <pxPortInitialiseStack>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ca:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030cc:	bf00      	nop
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	080082b0 	.word	0x080082b0

080030d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80030d8:	b5b0      	push	{r4, r5, r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af02      	add	r7, sp, #8
 80030de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80030e0:	f001 fa80 	bl	80045e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80030e4:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <prvAddNewTaskToReadyList+0xfc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	4a3a      	ldr	r2, [pc, #232]	; (80031d4 <prvAddNewTaskToReadyList+0xfc>)
 80030ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80030ee:	4b3a      	ldr	r3, [pc, #232]	; (80031d8 <prvAddNewTaskToReadyList+0x100>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80030f6:	4a38      	ldr	r2, [pc, #224]	; (80031d8 <prvAddNewTaskToReadyList+0x100>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <prvAddNewTaskToReadyList+0xfc>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d110      	bne.n	8003126 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003104:	f000 fc34 	bl	8003970 <prvInitialiseTaskLists>
 8003108:	e00d      	b.n	8003126 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800310a:	4b34      	ldr	r3, [pc, #208]	; (80031dc <prvAddNewTaskToReadyList+0x104>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003112:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <prvAddNewTaskToReadyList+0x100>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	429a      	cmp	r2, r3
 800311e:	d802      	bhi.n	8003126 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003120:	4a2d      	ldr	r2, [pc, #180]	; (80031d8 <prvAddNewTaskToReadyList+0x100>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003126:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <prvAddNewTaskToReadyList+0x108>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3301      	adds	r3, #1
 800312c:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <prvAddNewTaskToReadyList+0x108>)
 800312e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <prvAddNewTaskToReadyList+0x108>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d016      	beq.n	800316c <prvAddNewTaskToReadyList+0x94>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4618      	mov	r0, r3
 8003142:	f003 fd27 	bl	8006b94 <SEGGER_SYSVIEW_OnTaskCreate>
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	461d      	mov	r5, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	461c      	mov	r4, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	1ae3      	subs	r3, r4, r3
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	462b      	mov	r3, r5
 8003168:	f001 fdee 	bl	8004d48 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4618      	mov	r0, r3
 8003170:	f003 fd94 	bl	8006c9c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	2201      	movs	r2, #1
 800317a:	409a      	lsls	r2, r3
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <prvAddNewTaskToReadyList+0x10c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4313      	orrs	r3, r2
 8003182:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <prvAddNewTaskToReadyList+0x10c>)
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <prvAddNewTaskToReadyList+0x110>)
 8003194:	441a      	add	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3304      	adds	r3, #4
 800319a:	4619      	mov	r1, r3
 800319c:	4610      	mov	r0, r2
 800319e:	f7ff f932 	bl	8002406 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80031a2:	f001 fa4b 	bl	800463c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <prvAddNewTaskToReadyList+0x104>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00e      	beq.n	80031cc <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <prvAddNewTaskToReadyList+0x100>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d207      	bcs.n	80031cc <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <prvAddNewTaskToReadyList+0x114>)
 80031be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bdb0      	pop	{r4, r5, r7, pc}
 80031d4:	20000200 	.word	0x20000200
 80031d8:	20000128 	.word	0x20000128
 80031dc:	2000020c 	.word	0x2000020c
 80031e0:	2000021c 	.word	0x2000021c
 80031e4:	20000208 	.word	0x20000208
 80031e8:	2000012c 	.word	0x2000012c
 80031ec:	e000ed04 	.word	0xe000ed04

080031f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d015      	beq.n	800322e <vTaskDelay+0x3e>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <vTaskDelay+0x5c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d004      	beq.n	8003214 <vTaskDelay+0x24>
 800320a:	4911      	ldr	r1, [pc, #68]	; (8003250 <vTaskDelay+0x60>)
 800320c:	f240 504a 	movw	r0, #1354	; 0x54a
 8003210:	f7fd fc18 	bl	8000a44 <vAssertCalled>
            vTaskSuspendAll();
 8003214:	f000 f880 	bl	8003318 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	2023      	movs	r0, #35	; 0x23
 800321c:	f002 ffbc 	bl	8006198 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003220:	2100      	movs	r1, #0
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fcd2 	bl	8003bcc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003228:	f000 f884 	bl	8003334 <xTaskResumeAll>
 800322c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d107      	bne.n	8003244 <vTaskDelay+0x54>
        {
            portYIELD_WITHIN_API();
 8003234:	4b07      	ldr	r3, [pc, #28]	; (8003254 <vTaskDelay+0x64>)
 8003236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000228 	.word	0x20000228
 8003250:	080082b0 	.word	0x080082b0
 8003254:	e000ed04 	.word	0xe000ed04

08003258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800325e:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <vTaskStartScheduler+0x9c>)
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	2300      	movs	r3, #0
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2300      	movs	r3, #0
 8003268:	2282      	movs	r2, #130	; 0x82
 800326a:	4923      	ldr	r1, [pc, #140]	; (80032f8 <vTaskStartScheduler+0xa0>)
 800326c:	4823      	ldr	r0, [pc, #140]	; (80032fc <vTaskStartScheduler+0xa4>)
 800326e:	f7ff fe5f 	bl	8002f30 <xTaskCreate>
 8003272:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d102      	bne.n	8003280 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800327a:	f000 fd1f 	bl	8003cbc <xTimerCreateTimerTask>
 800327e:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d126      	bne.n	80032d4 <vTaskStartScheduler+0x7c>
        __asm volatile
 8003286:	f04f 0340 	mov.w	r3, #64	; 0x40
 800328a:	b672      	cpsid	i
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	b662      	cpsie	i
 800329a:	603b      	str	r3, [r7, #0]
    }
 800329c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800329e:	4b18      	ldr	r3, [pc, #96]	; (8003300 <vTaskStartScheduler+0xa8>)
 80032a0:	f04f 32ff 	mov.w	r2, #4294967295
 80032a4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80032a6:	4b17      	ldr	r3, [pc, #92]	; (8003304 <vTaskStartScheduler+0xac>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032ac:	4b16      	ldr	r3, [pc, #88]	; (8003308 <vTaskStartScheduler+0xb0>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <vTaskStartScheduler+0xb4>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <vTaskStartScheduler+0x9c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d102      	bne.n	80032c4 <vTaskStartScheduler+0x6c>
 80032be:	f003 fc4d 	bl	8006b5c <SEGGER_SYSVIEW_OnIdle>
 80032c2:	e004      	b.n	80032ce <vTaskStartScheduler+0x76>
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <vTaskStartScheduler+0xb4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 fca5 	bl	8006c18 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80032ce:	f001 f891 	bl	80043f4 <xPortStartScheduler>
 80032d2:	e008      	b.n	80032e6 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d104      	bne.n	80032e6 <vTaskStartScheduler+0x8e>
 80032dc:	490c      	ldr	r1, [pc, #48]	; (8003310 <vTaskStartScheduler+0xb8>)
 80032de:	f640 0041 	movw	r0, #2113	; 0x841
 80032e2:	f7fd fbaf 	bl	8000a44 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <vTaskStartScheduler+0xbc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000224 	.word	0x20000224
 80032f8:	080082d0 	.word	0x080082d0
 80032fc:	08003941 	.word	0x08003941
 8003300:	20000220 	.word	0x20000220
 8003304:	2000020c 	.word	0x2000020c
 8003308:	20000204 	.word	0x20000204
 800330c:	20000128 	.word	0x20000128
 8003310:	080082b0 	.word	0x080082b0
 8003314:	2000000c 	.word	0x2000000c

08003318 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <vTaskSuspendAll+0x18>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	4a03      	ldr	r2, [pc, #12]	; (8003330 <vTaskSuspendAll+0x18>)
 8003324:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	20000228 	.word	0x20000228

08003334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003342:	4b40      	ldr	r3, [pc, #256]	; (8003444 <xTaskResumeAll+0x110>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <xTaskResumeAll+0x20>
 800334a:	493f      	ldr	r1, [pc, #252]	; (8003448 <xTaskResumeAll+0x114>)
 800334c:	f640 00b4 	movw	r0, #2228	; 0x8b4
 8003350:	f7fd fb78 	bl	8000a44 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003354:	f001 f946 	bl	80045e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <xTaskResumeAll+0x110>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3b01      	subs	r3, #1
 800335e:	4a39      	ldr	r2, [pc, #228]	; (8003444 <xTaskResumeAll+0x110>)
 8003360:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003362:	4b38      	ldr	r3, [pc, #224]	; (8003444 <xTaskResumeAll+0x110>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d165      	bne.n	8003436 <xTaskResumeAll+0x102>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800336a:	4b38      	ldr	r3, [pc, #224]	; (800344c <xTaskResumeAll+0x118>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d061      	beq.n	8003436 <xTaskResumeAll+0x102>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003372:	e032      	b.n	80033da <xTaskResumeAll+0xa6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003374:	4b36      	ldr	r3, [pc, #216]	; (8003450 <xTaskResumeAll+0x11c>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3318      	adds	r3, #24
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff f89d 	bl	80024c0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3304      	adds	r3, #4
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff f898 	bl	80024c0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fc82 	bl	8006c9c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	2201      	movs	r2, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <xTaskResumeAll+0x120>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	4a2b      	ldr	r2, [pc, #172]	; (8003454 <xTaskResumeAll+0x120>)
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4a28      	ldr	r2, [pc, #160]	; (8003458 <xTaskResumeAll+0x124>)
 80033b8:	441a      	add	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3304      	adds	r3, #4
 80033be:	4619      	mov	r1, r3
 80033c0:	4610      	mov	r0, r2
 80033c2:	f7ff f820 	bl	8002406 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ca:	4b24      	ldr	r3, [pc, #144]	; (800345c <xTaskResumeAll+0x128>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d302      	bcc.n	80033da <xTaskResumeAll+0xa6>
                    {
                        xYieldPending = pdTRUE;
 80033d4:	4b22      	ldr	r3, [pc, #136]	; (8003460 <xTaskResumeAll+0x12c>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033da:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <xTaskResumeAll+0x11c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1c8      	bne.n	8003374 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <xTaskResumeAll+0xb8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80033e8:	f000 fb40 	bl	8003a6c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <xTaskResumeAll+0x130>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d010      	beq.n	800341a <xTaskResumeAll+0xe6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80033f8:	f000 f85a 	bl	80034b0 <xTaskIncrementTick>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <xTaskResumeAll+0xd4>
                            {
                                xYieldPending = pdTRUE;
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <xTaskResumeAll+0x12c>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f1      	bne.n	80033f8 <xTaskResumeAll+0xc4>

                        xPendedTicks = 0;
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <xTaskResumeAll+0x130>)
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800341a:	4b11      	ldr	r3, [pc, #68]	; (8003460 <xTaskResumeAll+0x12c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <xTaskResumeAll+0x102>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003422:	2301      	movs	r3, #1
 8003424:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <xTaskResumeAll+0x134>)
 8003428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003436:	f001 f901 	bl	800463c <vPortExitCritical>

    return xAlreadyYielded;
 800343a:	68bb      	ldr	r3, [r7, #8]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000228 	.word	0x20000228
 8003448:	080082b0 	.word	0x080082b0
 800344c:	20000200 	.word	0x20000200
 8003450:	200001c0 	.word	0x200001c0
 8003454:	20000208 	.word	0x20000208
 8003458:	2000012c 	.word	0x2000012c
 800345c:	20000128 	.word	0x20000128
 8003460:	20000214 	.word	0x20000214
 8003464:	20000210 	.word	0x20000210
 8003468:	e000ed04 	.word	0xe000ed04

0800346c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <xTaskGetTickCount+0x1c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003478:	687b      	ldr	r3, [r7, #4]
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000204 	.word	0x20000204

0800348c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003492:	f001 f98d 	bl	80047b0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800349a:	4b04      	ldr	r3, [pc, #16]	; (80034ac <xTaskGetTickCountFromISR+0x20>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80034a0:	683b      	ldr	r3, [r7, #0]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000204 	.word	0x20000204

080034b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ba:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <xTaskIncrementTick+0x140>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f040 808c 	bne.w	80035dc <xTaskIncrementTick+0x12c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034c4:	4b4b      	ldr	r3, [pc, #300]	; (80035f4 <xTaskIncrementTick+0x144>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3301      	adds	r3, #1
 80034ca:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80034cc:	4a49      	ldr	r2, [pc, #292]	; (80035f4 <xTaskIncrementTick+0x144>)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d11a      	bne.n	800350e <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 80034d8:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <xTaskIncrementTick+0x148>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d004      	beq.n	80034ec <xTaskIncrementTick+0x3c>
 80034e2:	4946      	ldr	r1, [pc, #280]	; (80035fc <xTaskIncrementTick+0x14c>)
 80034e4:	f640 20c7 	movw	r0, #2759	; 0xac7
 80034e8:	f7fd faac 	bl	8000a44 <vAssertCalled>
 80034ec:	4b42      	ldr	r3, [pc, #264]	; (80035f8 <xTaskIncrementTick+0x148>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	4b43      	ldr	r3, [pc, #268]	; (8003600 <xTaskIncrementTick+0x150>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a40      	ldr	r2, [pc, #256]	; (80035f8 <xTaskIncrementTick+0x148>)
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4a41      	ldr	r2, [pc, #260]	; (8003600 <xTaskIncrementTick+0x150>)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b40      	ldr	r3, [pc, #256]	; (8003604 <xTaskIncrementTick+0x154>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	4a3f      	ldr	r2, [pc, #252]	; (8003604 <xTaskIncrementTick+0x154>)
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	f000 faaf 	bl	8003a6c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800350e:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <xTaskIncrementTick+0x158>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	429a      	cmp	r2, r3
 8003516:	d34c      	bcc.n	80035b2 <xTaskIncrementTick+0x102>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003518:	4b37      	ldr	r3, [pc, #220]	; (80035f8 <xTaskIncrementTick+0x148>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d104      	bne.n	800352c <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003522:	4b39      	ldr	r3, [pc, #228]	; (8003608 <xTaskIncrementTick+0x158>)
 8003524:	f04f 32ff 	mov.w	r2, #4294967295
 8003528:	601a      	str	r2, [r3, #0]
                    break;
 800352a:	e042      	b.n	80035b2 <xTaskIncrementTick+0x102>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <xTaskIncrementTick+0x148>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	429a      	cmp	r2, r3
 8003542:	d203      	bcs.n	800354c <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003544:	4a30      	ldr	r2, [pc, #192]	; (8003608 <xTaskIncrementTick+0x158>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800354a:	e032      	b.n	80035b2 <xTaskIncrementTick+0x102>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3304      	adds	r3, #4
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe ffb5 	bl	80024c0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	3318      	adds	r3, #24
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe ffac 	bl	80024c0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4618      	mov	r0, r3
 800356c:	f003 fb96 	bl	8006c9c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	2201      	movs	r2, #1
 8003576:	409a      	lsls	r2, r3
 8003578:	4b24      	ldr	r3, [pc, #144]	; (800360c <xTaskIncrementTick+0x15c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4313      	orrs	r3, r2
 800357e:	4a23      	ldr	r2, [pc, #140]	; (800360c <xTaskIncrementTick+0x15c>)
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4a20      	ldr	r2, [pc, #128]	; (8003610 <xTaskIncrementTick+0x160>)
 8003590:	441a      	add	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3304      	adds	r3, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f7fe ff34 	bl	8002406 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a2:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <xTaskIncrementTick+0x164>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d3b5      	bcc.n	8003518 <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035b0:	e7b2      	b.n	8003518 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <xTaskIncrementTick+0x164>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b8:	4915      	ldr	r1, [pc, #84]	; (8003610 <xTaskIncrementTick+0x160>)
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d901      	bls.n	80035ce <xTaskIncrementTick+0x11e>
                {
                    xSwitchRequired = pdTRUE;
 80035ca:	2301      	movs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <xTaskIncrementTick+0x168>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <xTaskIncrementTick+0x136>
                {
                    xSwitchRequired = pdTRUE;
 80035d6:	2301      	movs	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e004      	b.n	80035e6 <xTaskIncrementTick+0x136>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <xTaskIncrementTick+0x16c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3301      	adds	r3, #1
 80035e2:	4a0e      	ldr	r2, [pc, #56]	; (800361c <xTaskIncrementTick+0x16c>)
 80035e4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80035e6:	697b      	ldr	r3, [r7, #20]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000228 	.word	0x20000228
 80035f4:	20000204 	.word	0x20000204
 80035f8:	200001b8 	.word	0x200001b8
 80035fc:	080082b0 	.word	0x080082b0
 8003600:	200001bc 	.word	0x200001bc
 8003604:	20000218 	.word	0x20000218
 8003608:	20000220 	.word	0x20000220
 800360c:	20000208 	.word	0x20000208
 8003610:	2000012c 	.word	0x2000012c
 8003614:	20000128 	.word	0x20000128
 8003618:	20000214 	.word	0x20000214
 800361c:	20000210 	.word	0x20000210

08003620 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003626:	4b2a      	ldr	r3, [pc, #168]	; (80036d0 <vTaskSwitchContext+0xb0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800362e:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <vTaskSwitchContext+0xb4>)
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003634:	e047      	b.n	80036c6 <vTaskSwitchContext+0xa6>
        xYieldPending = pdFALSE;
 8003636:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <vTaskSwitchContext+0xb4>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800363c:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <vTaskSwitchContext+0xb8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	f1c3 031f 	rsb	r3, r3, #31
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	4922      	ldr	r1, [pc, #136]	; (80036dc <vTaskSwitchContext+0xbc>)
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <vTaskSwitchContext+0x50>
 8003666:	491e      	ldr	r1, [pc, #120]	; (80036e0 <vTaskSwitchContext+0xc0>)
 8003668:	f640 4002 	movw	r0, #3074	; 0xc02
 800366c:	f7fd f9ea 	bl	8000a44 <vAssertCalled>
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4a18      	ldr	r2, [pc, #96]	; (80036dc <vTaskSwitchContext+0xbc>)
 800367c:	4413      	add	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3308      	adds	r3, #8
 8003692:	429a      	cmp	r2, r3
 8003694:	d104      	bne.n	80036a0 <vTaskSwitchContext+0x80>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4a0f      	ldr	r2, [pc, #60]	; (80036e4 <vTaskSwitchContext+0xc4>)
 80036a8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80036aa:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <vTaskSwitchContext+0xc4>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <vTaskSwitchContext+0xc8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d102      	bne.n	80036bc <vTaskSwitchContext+0x9c>
 80036b6:	f003 fa51 	bl	8006b5c <SEGGER_SYSVIEW_OnIdle>
}
 80036ba:	e004      	b.n	80036c6 <vTaskSwitchContext+0xa6>
        traceTASK_SWITCHED_IN();
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <vTaskSwitchContext+0xc4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f003 faa9 	bl	8006c18 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000228 	.word	0x20000228
 80036d4:	20000214 	.word	0x20000214
 80036d8:	20000208 	.word	0x20000208
 80036dc:	2000012c 	.word	0x2000012c
 80036e0:	080082b0 	.word	0x080082b0
 80036e4:	20000128 	.word	0x20000128
 80036e8:	20000224 	.word	0x20000224

080036ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d104      	bne.n	8003706 <vTaskPlaceOnEventList+0x1a>
 80036fc:	4909      	ldr	r1, [pc, #36]	; (8003724 <vTaskPlaceOnEventList+0x38>)
 80036fe:	f640 401c 	movw	r0, #3100	; 0xc1c
 8003702:	f7fd f99f 	bl	8000a44 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <vTaskPlaceOnEventList+0x3c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3318      	adds	r3, #24
 800370c:	4619      	mov	r1, r3
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fe fe9d 	bl	800244e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003714:	2101      	movs	r1, #1
 8003716:	6838      	ldr	r0, [r7, #0]
 8003718:	f000 fa58 	bl	8003bcc <prvAddCurrentTaskToDelayedList>
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	080082b0 	.word	0x080082b0
 8003728:	20000128 	.word	0x20000128

0800372c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <vTaskPlaceOnEventListRestricted+0x1c>
 800373e:	490e      	ldr	r1, [pc, #56]	; (8003778 <vTaskPlaceOnEventListRestricted+0x4c>)
 8003740:	f640 404b 	movw	r0, #3147	; 0xc4b
 8003744:	f7fd f97e 	bl	8000a44 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <vTaskPlaceOnEventListRestricted+0x50>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3318      	adds	r3, #24
 800374e:	4619      	mov	r1, r3
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7fe fe58 	bl	8002406 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295
 8003760:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003762:	2024      	movs	r0, #36	; 0x24
 8003764:	f002 fcfa 	bl	800615c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	68b8      	ldr	r0, [r7, #8]
 800376c:	f000 fa2e 	bl	8003bcc <prvAddCurrentTaskToDelayedList>
    }
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	080082b0 	.word	0x080082b0
 800377c:	20000128 	.word	0x20000128

08003780 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <xTaskRemoveFromEventList+0x20>
 8003796:	4924      	ldr	r1, [pc, #144]	; (8003828 <xTaskRemoveFromEventList+0xa8>)
 8003798:	f640 407b 	movw	r0, #3195	; 0xc7b
 800379c:	f7fd f952 	bl	8000a44 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3318      	adds	r3, #24
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe fe8b 	bl	80024c0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037aa:	4b20      	ldr	r3, [pc, #128]	; (800382c <xTaskRemoveFromEventList+0xac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d120      	bne.n	80037f4 <xTaskRemoveFromEventList+0x74>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	3304      	adds	r3, #4
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fe82 	bl	80024c0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 fa6c 	bl	8006c9c <SEGGER_SYSVIEW_OnTaskStartReady>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	2201      	movs	r2, #1
 80037ca:	409a      	lsls	r2, r3
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <xTaskRemoveFromEventList+0xb0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	4a17      	ldr	r2, [pc, #92]	; (8003830 <xTaskRemoveFromEventList+0xb0>)
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4a14      	ldr	r2, [pc, #80]	; (8003834 <xTaskRemoveFromEventList+0xb4>)
 80037e4:	441a      	add	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f7fe fe0a 	bl	8002406 <vListInsertEnd>
 80037f2:	e005      	b.n	8003800 <xTaskRemoveFromEventList+0x80>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	3318      	adds	r3, #24
 80037f8:	4619      	mov	r1, r3
 80037fa:	480f      	ldr	r0, [pc, #60]	; (8003838 <xTaskRemoveFromEventList+0xb8>)
 80037fc:	f7fe fe03 	bl	8002406 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <xTaskRemoveFromEventList+0xbc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	429a      	cmp	r2, r3
 800380c:	d905      	bls.n	800381a <xTaskRemoveFromEventList+0x9a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800380e:	2301      	movs	r3, #1
 8003810:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003812:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <xTaskRemoveFromEventList+0xc0>)
 8003814:	2201      	movs	r2, #1
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e001      	b.n	800381e <xTaskRemoveFromEventList+0x9e>
    }
    else
    {
        xReturn = pdFALSE;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	080082b0 	.word	0x080082b0
 800382c:	20000228 	.word	0x20000228
 8003830:	20000208 	.word	0x20000208
 8003834:	2000012c 	.word	0x2000012c
 8003838:	200001c0 	.word	0x200001c0
 800383c:	20000128 	.word	0x20000128
 8003840:	20000214 	.word	0x20000214

08003844 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <vTaskInternalSetTimeOutState+0x24>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <vTaskInternalSetTimeOutState+0x28>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	605a      	str	r2, [r3, #4]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	20000218 	.word	0x20000218
 800386c:	20000204 	.word	0x20000204

08003870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <xTaskCheckForTimeOut+0x1a>
 8003880:	4926      	ldr	r1, [pc, #152]	; (800391c <xTaskCheckForTimeOut+0xac>)
 8003882:	f640 40f6 	movw	r0, #3318	; 0xcf6
 8003886:	f7fd f8dd 	bl	8000a44 <vAssertCalled>
    configASSERT( pxTicksToWait );
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <xTaskCheckForTimeOut+0x2a>
 8003890:	4922      	ldr	r1, [pc, #136]	; (800391c <xTaskCheckForTimeOut+0xac>)
 8003892:	f640 40f7 	movw	r0, #3319	; 0xcf7
 8003896:	f7fd f8d5 	bl	8000a44 <vAssertCalled>

    taskENTER_CRITICAL();
 800389a:	f000 fea3 	bl	80045e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <xTaskCheckForTimeOut+0xb0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d102      	bne.n	80038be <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	e026      	b.n	800390c <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <xTaskCheckForTimeOut+0xb4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d00a      	beq.n	80038e0 <xTaskCheckForTimeOut+0x70>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d305      	bcc.n	80038e0 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80038d4:	2301      	movs	r3, #1
 80038d6:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	e015      	b.n	800390c <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d20b      	bcs.n	8003902 <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad2      	subs	r2, r2, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ffa4 	bl	8003844 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	e004      	b.n	800390c <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003908:	2301      	movs	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800390c:	f000 fe96 	bl	800463c <vPortExitCritical>

    return xReturn;
 8003910:	697b      	ldr	r3, [r7, #20]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	080082b0 	.word	0x080082b0
 8003920:	20000204 	.word	0x20000204
 8003924:	20000218 	.word	0x20000218

08003928 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <vTaskMissedYield+0x14>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	20000214 	.word	0x20000214

08003940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003948:	f000 f852 	bl	80039f0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <prvIdleTask+0x28>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d9f9      	bls.n	8003948 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <prvIdleTask+0x2c>)
 8003956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003964:	e7f0      	b.n	8003948 <prvIdleTask+0x8>
 8003966:	bf00      	nop
 8003968:	2000012c 	.word	0x2000012c
 800396c:	e000ed04 	.word	0xe000ed04

08003970 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	e00c      	b.n	8003996 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <prvInitialiseTaskLists+0x60>)
 8003988:	4413      	add	r3, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fd0e 	bl	80023ac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3301      	adds	r3, #1
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d9ef      	bls.n	800397c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800399c:	480d      	ldr	r0, [pc, #52]	; (80039d4 <prvInitialiseTaskLists+0x64>)
 800399e:	f7fe fd05 	bl	80023ac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80039a2:	480d      	ldr	r0, [pc, #52]	; (80039d8 <prvInitialiseTaskLists+0x68>)
 80039a4:	f7fe fd02 	bl	80023ac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80039a8:	480c      	ldr	r0, [pc, #48]	; (80039dc <prvInitialiseTaskLists+0x6c>)
 80039aa:	f7fe fcff 	bl	80023ac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80039ae:	480c      	ldr	r0, [pc, #48]	; (80039e0 <prvInitialiseTaskLists+0x70>)
 80039b0:	f7fe fcfc 	bl	80023ac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80039b4:	480b      	ldr	r0, [pc, #44]	; (80039e4 <prvInitialiseTaskLists+0x74>)
 80039b6:	f7fe fcf9 	bl	80023ac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <prvInitialiseTaskLists+0x78>)
 80039bc:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <prvInitialiseTaskLists+0x64>)
 80039be:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <prvInitialiseTaskLists+0x7c>)
 80039c2:	4a05      	ldr	r2, [pc, #20]	; (80039d8 <prvInitialiseTaskLists+0x68>)
 80039c4:	601a      	str	r2, [r3, #0]
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	2000012c 	.word	0x2000012c
 80039d4:	20000190 	.word	0x20000190
 80039d8:	200001a4 	.word	0x200001a4
 80039dc:	200001c0 	.word	0x200001c0
 80039e0:	200001d4 	.word	0x200001d4
 80039e4:	200001ec 	.word	0x200001ec
 80039e8:	200001b8 	.word	0x200001b8
 80039ec:	200001bc 	.word	0x200001bc

080039f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039f6:	e019      	b.n	8003a2c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80039f8:	f000 fdf4 	bl	80045e4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039fc:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <prvCheckTasksWaitingTermination+0x50>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fd59 	bl	80024c0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <prvCheckTasksWaitingTermination+0x54>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <prvCheckTasksWaitingTermination+0x54>)
 8003a16:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <prvCheckTasksWaitingTermination+0x58>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <prvCheckTasksWaitingTermination+0x58>)
 8003a20:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003a22:	f000 fe0b 	bl	800463c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f810 	bl	8003a4c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <prvCheckTasksWaitingTermination+0x58>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e1      	bne.n	80039f8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200001d4 	.word	0x200001d4
 8003a44:	20000200 	.word	0x20000200
 8003a48:	200001e8 	.word	0x200001e8

08003a4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 ffab 	bl	80049b4 <vPortFree>
                vPortFree( pxTCB );
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 ffa8 	bl	80049b4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <prvResetNextTaskUnblockTime+0x30>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d104      	bne.n	8003a84 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <prvResetNextTaskUnblockTime+0x34>)
 8003a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a80:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a82:	e005      	b.n	8003a90 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <prvResetNextTaskUnblockTime+0x30>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <prvResetNextTaskUnblockTime+0x34>)
 8003a8e:	6013      	str	r3, [r2, #0]
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	200001b8 	.word	0x200001b8
 8003aa0:	20000220 	.word	0x20000220

08003aa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <xTaskGetSchedulerState+0x34>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	607b      	str	r3, [r7, #4]
 8003ab6:	e008      	b.n	8003aca <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <xTaskGetSchedulerState+0x38>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	e001      	b.n	8003aca <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003aca:	687b      	ldr	r3, [r7, #4]
    }
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	2000020c 	.word	0x2000020c
 8003adc:	20000228 	.word	0x20000228

08003ae0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d05c      	beq.n	8003bb0 <xTaskPriorityDisinherit+0xd0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <xTaskPriorityDisinherit+0xdc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d004      	beq.n	8003b0a <xTaskPriorityDisinherit+0x2a>
 8003b00:	492f      	ldr	r1, [pc, #188]	; (8003bc0 <xTaskPriorityDisinherit+0xe0>)
 8003b02:	f241 0056 	movw	r0, #4182	; 0x1056
 8003b06:	f7fc ff9d 	bl	8000a44 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d104      	bne.n	8003b1c <xTaskPriorityDisinherit+0x3c>
 8003b12:	492b      	ldr	r1, [pc, #172]	; (8003bc0 <xTaskPriorityDisinherit+0xe0>)
 8003b14:	f241 0057 	movw	r0, #4183	; 0x1057
 8003b18:	f7fc ff94 	bl	8000a44 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b20:	1e5a      	subs	r2, r3, #1
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d03e      	beq.n	8003bb0 <xTaskPriorityDisinherit+0xd0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d13a      	bne.n	8003bb0 <xTaskPriorityDisinherit+0xd0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe fcbe 	bl	80024c0 <uxListRemove>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43da      	mvns	r2, r3
 8003b56:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <xTaskPriorityDisinherit+0xe4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <xTaskPriorityDisinherit+0xe4>)
 8003b5e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4619      	mov	r1, r3
 8003b64:	204a      	movs	r0, #74	; 0x4a
 8003b66:	f002 fb17 	bl	8006198 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f1c3 0205 	rsb	r2, r3, #5
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	2201      	movs	r2, #1
 8003b84:	409a      	lsls	r2, r3
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <xTaskPriorityDisinherit+0xe4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	4a0d      	ldr	r2, [pc, #52]	; (8003bc4 <xTaskPriorityDisinherit+0xe4>)
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <xTaskPriorityDisinherit+0xe8>)
 8003b9e:	441a      	add	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f7fe fc2d 	bl	8002406 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003bac:	2301      	movs	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
    }
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000128 	.word	0x20000128
 8003bc0:	080082b0 	.word	0x080082b0
 8003bc4:	20000208 	.word	0x20000208
 8003bc8:	2000012c 	.word	0x2000012c

08003bcc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003bd6:	4b32      	ldr	r3, [pc, #200]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bdc:	4b31      	ldr	r3, [pc, #196]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fc6c 	bl	80024c0 <uxListRemove>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10b      	bne.n	8003c06 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003bee:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	4b2a      	ldr	r3, [pc, #168]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4013      	ands	r3, r2
 8003c02:	4a29      	ldr	r2, [pc, #164]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c04:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d110      	bne.n	8003c30 <prvAddCurrentTaskToDelayedList+0x64>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00d      	beq.n	8003c30 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	211b      	movs	r1, #27
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f003 f880 	bl	8006d20 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c20:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3304      	adds	r3, #4
 8003c26:	4619      	mov	r1, r3
 8003c28:	4820      	ldr	r0, [pc, #128]	; (8003cac <prvAddCurrentTaskToDelayedList+0xe0>)
 8003c2a:	f7fe fbec 	bl	8002406 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c2e:	e032      	b.n	8003c96 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d20f      	bcs.n	8003c68 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003c48:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2104      	movs	r1, #4
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f003 f866 	bl	8006d20 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c54:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f7fe fbf4 	bl	800244e <vListInsert>
}
 8003c66:	e016      	b.n	8003c96 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2104      	movs	r1, #4
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f003 f856 	bl	8006d20 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c74:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4610      	mov	r0, r2
 8003c82:	f7fe fbe4 	bl	800244e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d202      	bcs.n	8003c96 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003c90:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6013      	str	r3, [r2, #0]
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000204 	.word	0x20000204
 8003ca4:	20000128 	.word	0x20000128
 8003ca8:	20000208 	.word	0x20000208
 8003cac:	200001ec 	.word	0x200001ec
 8003cb0:	200001bc 	.word	0x200001bc
 8003cb4:	200001b8 	.word	0x200001b8
 8003cb8:	20000220 	.word	0x20000220

08003cbc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003cc6:	f000 fad5 	bl	8004274 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <xTimerCreateTimerTask+0x48>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <xTimerCreateTimerTask+0x4c>)
 8003cd4:	9301      	str	r3, [sp, #4]
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ce0:	490a      	ldr	r1, [pc, #40]	; (8003d0c <xTimerCreateTimerTask+0x50>)
 8003ce2:	480b      	ldr	r0, [pc, #44]	; (8003d10 <xTimerCreateTimerTask+0x54>)
 8003ce4:	f7ff f924 	bl	8002f30 <xTaskCreate>
 8003ce8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d104      	bne.n	8003cfa <xTimerCreateTimerTask+0x3e>
 8003cf0:	4908      	ldr	r1, [pc, #32]	; (8003d14 <xTimerCreateTimerTask+0x58>)
 8003cf2:	f240 100d 	movw	r0, #269	; 0x10d
 8003cf6:	f7fc fea5 	bl	8000a44 <vAssertCalled>
        return xReturn;
 8003cfa:	687b      	ldr	r3, [r7, #4]
    }
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000025c 	.word	0x2000025c
 8003d08:	20000260 	.word	0x20000260
 8003d0c:	080082e8 	.word	0x080082e8
 8003d10:	08003e41 	.word	0x08003e41
 8003d14:	080082f0 	.word	0x080082f0

08003d18 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <xTimerGenericCommand+0x22>
 8003d30:	491c      	ldr	r1, [pc, #112]	; (8003da4 <xTimerGenericCommand+0x8c>)
 8003d32:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8003d36:	f7fc fe85 	bl	8000a44 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <xTimerGenericCommand+0x90>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d02a      	beq.n	8003d98 <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	dc18      	bgt.n	8003d86 <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d54:	f7ff fea6 	bl	8003aa4 <xTaskGetSchedulerState>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d109      	bne.n	8003d72 <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <xTimerGenericCommand+0x90>)
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	f107 0114 	add.w	r1, r7, #20
 8003d66:	2300      	movs	r3, #0
 8003d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6a:	f7fe fcb1 	bl	80026d0 <xQueueGenericSend>
 8003d6e:	6278      	str	r0, [r7, #36]	; 0x24
 8003d70:	e012      	b.n	8003d98 <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <xTimerGenericCommand+0x90>)
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	f107 0114 	add.w	r1, r7, #20
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f7fe fca7 	bl	80026d0 <xQueueGenericSend>
 8003d82:	6278      	str	r0, [r7, #36]	; 0x24
 8003d84:	e008      	b.n	8003d98 <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <xTimerGenericCommand+0x90>)
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	f107 0114 	add.w	r1, r7, #20
 8003d8e:	2300      	movs	r3, #0
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	f7fe fdad 	bl	80028f0 <xQueueGenericSendFromISR>
 8003d96:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3728      	adds	r7, #40	; 0x28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	080082f0 	.word	0x080082f0
 8003da8:	2000025c 	.word	0x2000025c

08003dac <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <prvProcessExpiredTimer+0x8c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fe fb7b 	bl	80024c0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01d      	beq.n	8003e14 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	18d1      	adds	r1, r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f8cf 	bl	8003f88 <prvInsertTimerInActiveList>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01a      	beq.n	8003e26 <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003df0:	2300      	movs	r3, #0
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	2300      	movs	r3, #0
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	2100      	movs	r1, #0
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f7ff ff8c 	bl	8003d18 <xTimerGenericCommand>
 8003e00:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10e      	bne.n	8003e26 <prvProcessExpiredTimer+0x7a>
 8003e08:	490c      	ldr	r1, [pc, #48]	; (8003e3c <prvProcessExpiredTimer+0x90>)
 8003e0a:	f44f 7005 	mov.w	r0, #532	; 0x214
 8003e0e:	f7fc fe19 	bl	8000a44 <vAssertCalled>
 8003e12:	e008      	b.n	8003e26 <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	4798      	blx	r3
    }
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000254 	.word	0x20000254
 8003e3c:	080082f0 	.word	0x080082f0

08003e40 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e48:	f107 0308 	add.w	r3, r7, #8
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f857 	bl	8003f00 <prvGetNextExpireTime>
 8003e52:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4619      	mov	r1, r3
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f803 	bl	8003e64 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e5e:	f000 f8d5 	bl	800400c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e62:	e7f1      	b.n	8003e48 <prvTimerTask+0x8>

08003e64 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e6e:	f7ff fa53 	bl	8003318 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e72:	f107 0308 	add.w	r3, r7, #8
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f866 	bl	8003f48 <prvSampleTimeNow>
 8003e7c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d130      	bne.n	8003ee6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <prvProcessTimerOrBlockTask+0x3c>
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d806      	bhi.n	8003ea0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e92:	f7ff fa4f 	bl	8003334 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ff87 	bl	8003dac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e9e:	e024      	b.n	8003eea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <prvProcessTimerOrBlockTask+0x90>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <prvProcessTimerOrBlockTask+0x50>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <prvProcessTimerOrBlockTask+0x52>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <prvProcessTimerOrBlockTask+0x94>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f7fe ffff 	bl	8002ec8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003eca:	f7ff fa33 	bl	8003334 <xTaskResumeAll>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003ed4:	4b09      	ldr	r3, [pc, #36]	; (8003efc <prvProcessTimerOrBlockTask+0x98>)
 8003ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	f3bf 8f6f 	isb	sy
    }
 8003ee4:	e001      	b.n	8003eea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003ee6:	f7ff fa25 	bl	8003334 <xTaskResumeAll>
    }
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000258 	.word	0x20000258
 8003ef8:	2000025c 	.word	0x2000025c
 8003efc:	e000ed04 	.word	0xe000ed04

08003f00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f08:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <prvGetNextExpireTime+0x44>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <prvGetNextExpireTime+0x16>
 8003f12:	2201      	movs	r2, #1
 8003f14:	e000      	b.n	8003f18 <prvGetNextExpireTime+0x18>
 8003f16:	2200      	movs	r2, #0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <prvGetNextExpireTime+0x44>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e001      	b.n	8003f34 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003f34:	68fb      	ldr	r3, [r7, #12]
    }
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000254 	.word	0x20000254

08003f48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003f50:	f7ff fa8c 	bl	800346c <xTaskGetTickCount>
 8003f54:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <prvSampleTimeNow+0x3c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d205      	bcs.n	8003f6c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003f60:	f000 f928 	bl	80041b4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e002      	b.n	8003f72 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f72:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <prvSampleTimeNow+0x3c>)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f78:	68fb      	ldr	r3, [r7, #12]
    }
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000264 	.word	0x20000264

08003f88 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d812      	bhi.n	8003fd4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	1ad2      	subs	r2, r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d302      	bcc.n	8003fc2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e01b      	b.n	8003ffa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <prvInsertTimerInActiveList+0x7c>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f7fe fa3e 	bl	800244e <vListInsert>
 8003fd2:	e012      	b.n	8003ffa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d206      	bcs.n	8003fea <prvInsertTimerInActiveList+0x62>
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d302      	bcc.n	8003fea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e007      	b.n	8003ffa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <prvInsertTimerInActiveList+0x80>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7fe fa2a 	bl	800244e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003ffa:	697b      	ldr	r3, [r7, #20]
    }
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000258 	.word	0x20000258
 8004008:	20000254 	.word	0x20000254

0800400c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800400c:	b580      	push	{r7, lr}
 800400e:	b08c      	sub	sp, #48	; 0x30
 8004010:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004012:	e0b9      	b.n	8004188 <prvProcessReceivedCommands+0x17c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	da13      	bge.n	8004042 <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800401a:	f107 0308 	add.w	r3, r7, #8
 800401e:	3304      	adds	r3, #4
 8004020:	627b      	str	r3, [r7, #36]	; 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <prvProcessReceivedCommands+0x26>
 8004028:	4960      	ldr	r1, [pc, #384]	; (80041ac <prvProcessReceivedCommands+0x1a0>)
 800402a:	f240 20fa 	movw	r0, #762	; 0x2fa
 800402e:	f7fc fd09 	bl	8000a44 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004038:	6850      	ldr	r0, [r2, #4]
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	6892      	ldr	r2, [r2, #8]
 800403e:	4611      	mov	r1, r2
 8004040:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f2c0 809e 	blt.w	8004186 <prvProcessReceivedCommands+0x17a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d004      	beq.n	8004060 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	3304      	adds	r3, #4
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fa30 	bl	80024c0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004060:	1d3b      	adds	r3, r7, #4
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff ff70 	bl	8003f48 <prvSampleTimeNow>
 8004068:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b09      	cmp	r3, #9
 800406e:	f200 808b 	bhi.w	8004188 <prvProcessReceivedCommands+0x17c>
 8004072:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <prvProcessReceivedCommands+0x6c>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	080040a1 	.word	0x080040a1
 800407c:	080040a1 	.word	0x080040a1
 8004080:	080040a1 	.word	0x080040a1
 8004084:	0800410b 	.word	0x0800410b
 8004088:	0800411f 	.word	0x0800411f
 800408c:	0800415d 	.word	0x0800415d
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040a1 	.word	0x080040a1
 8004098:	0800410b 	.word	0x0800410b
 800409c:	0800411f 	.word	0x0800411f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	18d1      	adds	r1, r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	6a38      	ldr	r0, [r7, #32]
 80040c0:	f7ff ff62 	bl	8003f88 <prvInsertTimerInActiveList>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d05e      	beq.n	8004188 <prvProcessReceivedCommands+0x17c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	6a38      	ldr	r0, [r7, #32]
 80040d0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d053      	beq.n	8004188 <prvProcessReceivedCommands+0x17c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	441a      	add	r2, r3
 80040e8:	2300      	movs	r3, #0
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2300      	movs	r3, #0
 80040ee:	2100      	movs	r1, #0
 80040f0:	6a38      	ldr	r0, [r7, #32]
 80040f2:	f7ff fe11 	bl	8003d18 <xTimerGenericCommand>
 80040f6:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d144      	bne.n	8004188 <prvProcessReceivedCommands+0x17c>
 80040fe:	492b      	ldr	r1, [pc, #172]	; (80041ac <prvProcessReceivedCommands+0x1a0>)
 8004100:	f240 3036 	movw	r0, #822	; 0x336
 8004104:	f7fc fc9e 	bl	8000a44 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004108:	e03e      	b.n	8004188 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	b2da      	uxtb	r2, r3
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800411c:	e034      	b.n	8004188 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	b2da      	uxtb	r2, r3
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <prvProcessReceivedCommands+0x13c>
 800413e:	491b      	ldr	r1, [pc, #108]	; (80041ac <prvProcessReceivedCommands+0x1a0>)
 8004140:	f240 304f 	movw	r0, #847	; 0x34f
 8004144:	f7fc fc7e 	bl	8000a44 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	18d1      	adds	r1, r2, r3
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	6a38      	ldr	r0, [r7, #32]
 8004156:	f7ff ff17 	bl	8003f88 <prvInsertTimerInActiveList>
                        break;
 800415a:	e015      	b.n	8004188 <prvProcessReceivedCommands+0x17c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 800416a:	6a38      	ldr	r0, [r7, #32]
 800416c:	f000 fc22 	bl	80049b4 <vPortFree>
 8004170:	e00a      	b.n	8004188 <prvProcessReceivedCommands+0x17c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	b2da      	uxtb	r2, r3
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004184:	e000      	b.n	8004188 <prvProcessReceivedCommands+0x17c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004186:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <prvProcessReceivedCommands+0x1a4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f107 0108 	add.w	r1, r7, #8
 8004190:	2200      	movs	r2, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fc56 	bl	8002a44 <xQueueReceive>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	f47f af3a 	bne.w	8004014 <prvProcessReceivedCommands+0x8>
        }
    }
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3728      	adds	r7, #40	; 0x28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	080082f0 	.word	0x080082f0
 80041b0:	2000025c 	.word	0x2000025c

080041b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041ba:	e042      	b.n	8004242 <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041bc:	4b2a      	ldr	r3, [pc, #168]	; (8004268 <prvSwitchTimerLists+0xb4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041c6:	4b28      	ldr	r3, [pc, #160]	; (8004268 <prvSwitchTimerLists+0xb4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fe f973 	bl	80024c0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d028      	beq.n	8004242 <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4413      	add	r3, r2
 80041f8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d90e      	bls.n	8004220 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800420e:	4b16      	ldr	r3, [pc, #88]	; (8004268 <prvSwitchTimerLists+0xb4>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3304      	adds	r3, #4
 8004216:	4619      	mov	r1, r3
 8004218:	4610      	mov	r0, r2
 800421a:	f7fe f918 	bl	800244e <vListInsert>
 800421e:	e010      	b.n	8004242 <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004220:	2300      	movs	r3, #0
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	2100      	movs	r1, #0
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff fd74 	bl	8003d18 <xTimerGenericCommand>
 8004230:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d104      	bne.n	8004242 <prvSwitchTimerLists+0x8e>
 8004238:	490c      	ldr	r1, [pc, #48]	; (800426c <prvSwitchTimerLists+0xb8>)
 800423a:	f240 30a9 	movw	r0, #937	; 0x3a9
 800423e:	f7fc fc01 	bl	8000a44 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <prvSwitchTimerLists+0xb4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1b7      	bne.n	80041bc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <prvSwitchTimerLists+0xb4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004252:	4b07      	ldr	r3, [pc, #28]	; (8004270 <prvSwitchTimerLists+0xbc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a04      	ldr	r2, [pc, #16]	; (8004268 <prvSwitchTimerLists+0xb4>)
 8004258:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800425a:	4a05      	ldr	r2, [pc, #20]	; (8004270 <prvSwitchTimerLists+0xbc>)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	6013      	str	r3, [r2, #0]
    }
 8004260:	bf00      	nop
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000254 	.word	0x20000254
 800426c:	080082f0 	.word	0x080082f0
 8004270:	20000258 	.word	0x20000258

08004274 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004278:	f000 f9b4 	bl	80045e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800427c:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <prvCheckForValidListAndQueue+0x54>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d11d      	bne.n	80042c0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004284:	4811      	ldr	r0, [pc, #68]	; (80042cc <prvCheckForValidListAndQueue+0x58>)
 8004286:	f7fe f891 	bl	80023ac <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800428a:	4811      	ldr	r0, [pc, #68]	; (80042d0 <prvCheckForValidListAndQueue+0x5c>)
 800428c:	f7fe f88e 	bl	80023ac <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <prvCheckForValidListAndQueue+0x60>)
 8004292:	4a0e      	ldr	r2, [pc, #56]	; (80042cc <prvCheckForValidListAndQueue+0x58>)
 8004294:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004296:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <prvCheckForValidListAndQueue+0x64>)
 8004298:	4a0d      	ldr	r2, [pc, #52]	; (80042d0 <prvCheckForValidListAndQueue+0x5c>)
 800429a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800429c:	2200      	movs	r2, #0
 800429e:	2110      	movs	r1, #16
 80042a0:	2005      	movs	r0, #5
 80042a2:	f7fe f99b 	bl	80025dc <xQueueGenericCreate>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4a07      	ldr	r2, [pc, #28]	; (80042c8 <prvCheckForValidListAndQueue+0x54>)
 80042aa:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <prvCheckForValidListAndQueue+0x54>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <prvCheckForValidListAndQueue+0x54>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4908      	ldr	r1, [pc, #32]	; (80042dc <prvCheckForValidListAndQueue+0x68>)
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe fdd2 	bl	8002e64 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80042c0:	f000 f9bc 	bl	800463c <vPortExitCritical>
    }
 80042c4:	bf00      	nop
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	2000025c 	.word	0x2000025c
 80042cc:	2000022c 	.word	0x2000022c
 80042d0:	20000240 	.word	0x20000240
 80042d4:	20000254 	.word	0x20000254
 80042d8:	20000258 	.word	0x20000258
 80042dc:	08008310 	.word	0x08008310

080042e0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3b04      	subs	r3, #4
 80042f0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3b04      	subs	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f023 0201 	bic.w	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3b04      	subs	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004310:	4a0c      	ldr	r2, [pc, #48]	; (8004344 <pxPortInitialiseStack+0x64>)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b14      	subs	r3, #20
 800431a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b04      	subs	r3, #4
 8004326:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f06f 0202 	mvn.w	r2, #2
 800432e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	3b20      	subs	r3, #32
 8004334:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004336:	68fb      	ldr	r3, [r7, #12]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	08004349 	.word	0x08004349

08004348 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004352:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <prvTaskExitError+0x48>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d003      	beq.n	8004364 <prvTaskExitError+0x1c>
 800435c:	490d      	ldr	r1, [pc, #52]	; (8004394 <prvTaskExitError+0x4c>)
 800435e:	20e3      	movs	r0, #227	; 0xe3
 8004360:	f7fc fb70 	bl	8000a44 <vAssertCalled>
        __asm volatile
 8004364:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004368:	b672      	cpsid	i
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	b662      	cpsie	i
 8004378:	607b      	str	r3, [r7, #4]
    }
 800437a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800437c:	bf00      	nop
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0fc      	beq.n	800437e <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000010 	.word	0x20000010
 8004394:	08008318 	.word	0x08008318
	...

080043a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80043a0:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <pxCurrentTCBConst2>)
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	6808      	ldr	r0, [r1, #0]
 80043a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043aa:	f380 8809 	msr	PSP, r0
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f380 8811 	msr	BASEPRI, r0
 80043ba:	4770      	bx	lr
 80043bc:	f3af 8000 	nop.w

080043c0 <pxCurrentTCBConst2>:
 80043c0:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop

080043c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80043c8:	4808      	ldr	r0, [pc, #32]	; (80043ec <prvPortStartFirstTask+0x24>)
 80043ca:	6800      	ldr	r0, [r0, #0]
 80043cc:	6800      	ldr	r0, [r0, #0]
 80043ce:	f380 8808 	msr	MSP, r0
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f380 8814 	msr	CONTROL, r0
 80043da:	b662      	cpsie	i
 80043dc:	b661      	cpsie	f
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	df00      	svc	0
 80043e8:	bf00      	nop
 80043ea:	0000      	.short	0x0000
 80043ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop

080043f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043fa:	4b38      	ldr	r3, [pc, #224]	; (80044dc <xPortStartScheduler+0xe8>)
 80043fc:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	22ff      	movs	r2, #255	; 0xff
 800440a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4b30      	ldr	r3, [pc, #192]	; (80044e0 <xPortStartScheduler+0xec>)
 8004420:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004422:	4b30      	ldr	r3, [pc, #192]	; (80044e4 <xPortStartScheduler+0xf0>)
 8004424:	2207      	movs	r2, #7
 8004426:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004428:	e009      	b.n	800443e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800442a:	4b2e      	ldr	r3, [pc, #184]	; (80044e4 <xPortStartScheduler+0xf0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3b01      	subs	r3, #1
 8004430:	4a2c      	ldr	r2, [pc, #176]	; (80044e4 <xPortStartScheduler+0xf0>)
 8004432:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	b2db      	uxtb	r3, r3
 800443c:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	2b80      	cmp	r3, #128	; 0x80
 8004448:	d0ef      	beq.n	800442a <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800444a:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <xPortStartScheduler+0xf0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f1c3 0307 	rsb	r3, r3, #7
 8004452:	2b04      	cmp	r3, #4
 8004454:	d004      	beq.n	8004460 <xPortStartScheduler+0x6c>
 8004456:	4924      	ldr	r1, [pc, #144]	; (80044e8 <xPortStartScheduler+0xf4>)
 8004458:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800445c:	f7fc faf2 	bl	8000a44 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004460:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <xPortStartScheduler+0xf0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f1c3 0307 	rsb	r3, r3, #7
 8004468:	2b04      	cmp	r3, #4
 800446a:	d004      	beq.n	8004476 <xPortStartScheduler+0x82>
 800446c:	491e      	ldr	r1, [pc, #120]	; (80044e8 <xPortStartScheduler+0xf4>)
 800446e:	f240 1057 	movw	r0, #343	; 0x157
 8004472:	f7fc fae7 	bl	8000a44 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004476:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <xPortStartScheduler+0xf0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <xPortStartScheduler+0xf0>)
 800447e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <xPortStartScheduler+0xf0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004488:	4a16      	ldr	r2, [pc, #88]	; (80044e4 <xPortStartScheduler+0xf0>)
 800448a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004494:	4b15      	ldr	r3, [pc, #84]	; (80044ec <xPortStartScheduler+0xf8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a14      	ldr	r2, [pc, #80]	; (80044ec <xPortStartScheduler+0xf8>)
 800449a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800449e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80044a0:	4b12      	ldr	r3, [pc, #72]	; (80044ec <xPortStartScheduler+0xf8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a11      	ldr	r2, [pc, #68]	; (80044ec <xPortStartScheduler+0xf8>)
 80044a6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044aa:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80044ac:	f000 f950 	bl	8004750 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80044b0:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <xPortStartScheduler+0xfc>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80044b6:	f000 f96f 	bl	8004798 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044ba:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <xPortStartScheduler+0x100>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a0d      	ldr	r2, [pc, #52]	; (80044f4 <xPortStartScheduler+0x100>)
 80044c0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044c4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80044c6:	f7ff ff7f 	bl	80043c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044ca:	f7ff f8a9 	bl	8003620 <vTaskSwitchContext>
    prvTaskExitError();
 80044ce:	f7ff ff3b 	bl	8004348 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	e000e400 	.word	0xe000e400
 80044e0:	20000268 	.word	0x20000268
 80044e4:	2000026c 	.word	0x2000026c
 80044e8:	08008318 	.word	0x08008318
 80044ec:	e000ed20 	.word	0xe000ed20
 80044f0:	20000010 	.word	0x20000010
 80044f4:	e000ef34 	.word	0xe000ef34

080044f8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044fe:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <vInitPrioGroupValue+0xd0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a32      	ldr	r2, [pc, #200]	; (80045cc <vInitPrioGroupValue+0xd4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d104      	bne.n	8004512 <vInitPrioGroupValue+0x1a>
 8004508:	4931      	ldr	r1, [pc, #196]	; (80045d0 <vInitPrioGroupValue+0xd8>)
 800450a:	f44f 70c9 	mov.w	r0, #402	; 0x192
 800450e:	f7fc fa99 	bl	8000a44 <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004512:	4b2d      	ldr	r3, [pc, #180]	; (80045c8 <vInitPrioGroupValue+0xd0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2f      	ldr	r2, [pc, #188]	; (80045d4 <vInitPrioGroupValue+0xdc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d104      	bne.n	8004526 <vInitPrioGroupValue+0x2e>
 800451c:	492c      	ldr	r1, [pc, #176]	; (80045d0 <vInitPrioGroupValue+0xd8>)
 800451e:	f240 1093 	movw	r0, #403	; 0x193
 8004522:	f7fc fa8f 	bl	8000a44 <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004526:	4b2c      	ldr	r3, [pc, #176]	; (80045d8 <vInitPrioGroupValue+0xe0>)
 8004528:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	22ff      	movs	r2, #255	; 0xff
 8004536:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	b2da      	uxtb	r2, r3
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <vInitPrioGroupValue+0xe4>)
 800454c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800454e:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <vInitPrioGroupValue+0xe8>)
 8004550:	2207      	movs	r2, #7
 8004552:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004554:	e009      	b.n	800456a <vInitPrioGroupValue+0x72>
            {
                ulMaxPRIGROUPValue--;
 8004556:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <vInitPrioGroupValue+0xe8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3b01      	subs	r3, #1
 800455c:	4a20      	ldr	r2, [pc, #128]	; (80045e0 <vInitPrioGroupValue+0xe8>)
 800455e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004560:	79fb      	ldrb	r3, [r7, #7]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	b2db      	uxtb	r3, r3
 8004568:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	2b80      	cmp	r3, #128	; 0x80
 8004574:	d0ef      	beq.n	8004556 <vInitPrioGroupValue+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8004576:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <vInitPrioGroupValue+0xe8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1c3 0307 	rsb	r3, r3, #7
 800457e:	2b04      	cmp	r3, #4
 8004580:	d004      	beq.n	800458c <vInitPrioGroupValue+0x94>
 8004582:	4913      	ldr	r1, [pc, #76]	; (80045d0 <vInitPrioGroupValue+0xd8>)
 8004584:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8004588:	f7fc fa5c 	bl	8000a44 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800458c:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <vInitPrioGroupValue+0xe8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f1c3 0307 	rsb	r3, r3, #7
 8004594:	2b04      	cmp	r3, #4
 8004596:	d004      	beq.n	80045a2 <vInitPrioGroupValue+0xaa>
 8004598:	490d      	ldr	r1, [pc, #52]	; (80045d0 <vInitPrioGroupValue+0xd8>)
 800459a:	f240 10c5 	movw	r0, #453	; 0x1c5
 800459e:	f7fc fa51 	bl	8000a44 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <vInitPrioGroupValue+0xe8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	4a0d      	ldr	r2, [pc, #52]	; (80045e0 <vInitPrioGroupValue+0xe8>)
 80045aa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045ac:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <vInitPrioGroupValue+0xe8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045b4:	4a0a      	ldr	r2, [pc, #40]	; (80045e0 <vInitPrioGroupValue+0xe8>)
 80045b6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	e000ed00 	.word	0xe000ed00
 80045cc:	410fc271 	.word	0x410fc271
 80045d0:	08008318 	.word	0x08008318
 80045d4:	410fc270 	.word	0x410fc270
 80045d8:	e000e400 	.word	0xe000e400
 80045dc:	20000268 	.word	0x20000268
 80045e0:	2000026c 	.word	0x2000026c

080045e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
        __asm volatile
 80045ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 80045ee:	b672      	cpsid	i
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	b662      	cpsie	i
 80045fe:	607b      	str	r3, [r7, #4]
    }
 8004600:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <vPortEnterCritical+0x4c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3301      	adds	r3, #1
 8004608:	4a09      	ldr	r2, [pc, #36]	; (8004630 <vPortEnterCritical+0x4c>)
 800460a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <vPortEnterCritical+0x4c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d109      	bne.n	8004628 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004614:	4b07      	ldr	r3, [pc, #28]	; (8004634 <vPortEnterCritical+0x50>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <vPortEnterCritical+0x44>
 800461e:	4906      	ldr	r1, [pc, #24]	; (8004638 <vPortEnterCritical+0x54>)
 8004620:	f240 10e9 	movw	r0, #489	; 0x1e9
 8004624:	f7fc fa0e 	bl	8000a44 <vAssertCalled>
    }
}
 8004628:	bf00      	nop
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20000010 	.word	0x20000010
 8004634:	e000ed04 	.word	0xe000ed04
 8004638:	08008318 	.word	0x08008318

0800463c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004642:	4b0e      	ldr	r3, [pc, #56]	; (800467c <vPortExitCritical+0x40>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <vPortExitCritical+0x18>
 800464a:	490d      	ldr	r1, [pc, #52]	; (8004680 <vPortExitCritical+0x44>)
 800464c:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 8004650:	f7fc f9f8 	bl	8000a44 <vAssertCalled>
    uxCriticalNesting--;
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <vPortExitCritical+0x40>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3b01      	subs	r3, #1
 800465a:	4a08      	ldr	r2, [pc, #32]	; (800467c <vPortExitCritical+0x40>)
 800465c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800465e:	4b07      	ldr	r3, [pc, #28]	; (800467c <vPortExitCritical+0x40>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d105      	bne.n	8004672 <vPortExitCritical+0x36>
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]
        __asm volatile
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f383 8811 	msr	BASEPRI, r3
    }
 8004670:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000010 	.word	0x20000010
 8004680:	08008318 	.word	0x08008318
	...

08004690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004690:	f3ef 8009 	mrs	r0, PSP
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <pxCurrentTCBConst>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	f01e 0f10 	tst.w	lr, #16
 80046a0:	bf08      	it	eq
 80046a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046aa:	6010      	str	r0, [r2, #0]
 80046ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046b0:	f04f 0040 	mov.w	r0, #64	; 0x40
 80046b4:	b672      	cpsid	i
 80046b6:	f380 8811 	msr	BASEPRI, r0
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	b662      	cpsie	i
 80046c4:	f7fe ffac 	bl	8003620 <vTaskSwitchContext>
 80046c8:	f04f 0000 	mov.w	r0, #0
 80046cc:	f380 8811 	msr	BASEPRI, r0
 80046d0:	bc09      	pop	{r0, r3}
 80046d2:	6819      	ldr	r1, [r3, #0]
 80046d4:	6808      	ldr	r0, [r1, #0]
 80046d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046da:	f01e 0f10 	tst.w	lr, #16
 80046de:	bf08      	it	eq
 80046e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046e4:	f380 8809 	msr	PSP, r0
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop

080046f0 <pxCurrentTCBConst>:
 80046f0:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop

080046f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
        __asm volatile
 80046fe:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004702:	b672      	cpsid	i
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	b662      	cpsie	i
 8004712:	607b      	str	r3, [r7, #4]
    }
 8004714:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004716:	f002 f9a7 	bl	8006a68 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800471a:	f7fe fec9 	bl	80034b0 <xTaskIncrementTick>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d006      	beq.n	8004732 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004724:	f002 f9fe 	bl	8006b24 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004728:	4b08      	ldr	r3, [pc, #32]	; (800474c <SysTick_Handler+0x54>)
 800472a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e001      	b.n	8004736 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 8004732:	f002 f9db 	bl	8006aec <SEGGER_SYSVIEW_RecordExitISR>
 8004736:	2300      	movs	r3, #0
 8004738:	603b      	str	r3, [r7, #0]
        __asm volatile
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f383 8811 	msr	BASEPRI, r3
    }
 8004740:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <vPortSetupTimerInterrupt+0x34>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <vPortSetupTimerInterrupt+0x38>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004760:	4b0a      	ldr	r3, [pc, #40]	; (800478c <vPortSetupTimerInterrupt+0x3c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <vPortSetupTimerInterrupt+0x40>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	09db      	lsrs	r3, r3, #7
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <vPortSetupTimerInterrupt+0x44>)
 8004770:	3b01      	subs	r3, #1
 8004772:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004774:	4b03      	ldr	r3, [pc, #12]	; (8004784 <vPortSetupTimerInterrupt+0x34>)
 8004776:	2207      	movs	r2, #7
 8004778:	601a      	str	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	e000e010 	.word	0xe000e010
 8004788:	e000e018 	.word	0xe000e018
 800478c:	20000000 	.word	0x20000000
 8004790:	0a7c5ac5 	.word	0x0a7c5ac5
 8004794:	e000e014 	.word	0xe000e014

08004798 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004798:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047a8 <vPortEnableVFP+0x10>
 800479c:	6801      	ldr	r1, [r0, #0]
 800479e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047a2:	6001      	str	r1, [r0, #0]
 80047a4:	4770      	bx	lr
 80047a6:	0000      	.short	0x0000
 80047a8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80047ac:	bf00      	nop
 80047ae:	bf00      	nop

080047b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80047b6:	f3ef 8305 	mrs	r3, IPSR
 80047ba:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b0f      	cmp	r3, #15
 80047c0:	d90e      	bls.n	80047e0 <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047c2:	4a10      	ldr	r2, [pc, #64]	; (8004804 <vPortValidateInterruptPriority+0x54>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4413      	add	r3, r2
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <vPortValidateInterruptPriority+0x58>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	78fa      	ldrb	r2, [r7, #3]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d204      	bcs.n	80047e0 <vPortValidateInterruptPriority+0x30>
 80047d6:	490d      	ldr	r1, [pc, #52]	; (800480c <vPortValidateInterruptPriority+0x5c>)
 80047d8:	f240 3049 	movw	r0, #841	; 0x349
 80047dc:	f7fc f932 	bl	8000a44 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <vPortValidateInterruptPriority+0x60>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047e8:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <vPortValidateInterruptPriority+0x64>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d904      	bls.n	80047fa <vPortValidateInterruptPriority+0x4a>
 80047f0:	4906      	ldr	r1, [pc, #24]	; (800480c <vPortValidateInterruptPriority+0x5c>)
 80047f2:	f240 3059 	movw	r0, #857	; 0x359
 80047f6:	f7fc f925 	bl	8000a44 <vAssertCalled>
    }
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	e000e3f0 	.word	0xe000e3f0
 8004808:	20000268 	.word	0x20000268
 800480c:	08008318 	.word	0x08008318
 8004810:	e000ed0c 	.word	0xe000ed0c
 8004814:	2000026c 	.word	0x2000026c

08004818 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8004824:	f7fe fd78 	bl	8003318 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004828:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <pvPortMalloc+0x180>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004830:	f000 f918 	bl	8004a64 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004834:	4b59      	ldr	r3, [pc, #356]	; (800499c <pvPortMalloc+0x184>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 809a 	bne.w	8004976 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d027      	beq.n	8004898 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004848:	2208      	movs	r2, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	429a      	cmp	r2, r3
 8004852:	d221      	bcs.n	8004898 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 8004854:	2208      	movs	r2, #8
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01b      	beq.n	800489e <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f023 0307 	bic.w	r3, r3, #7
 800486c:	3308      	adds	r3, #8
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	d20e      	bcs.n	8004892 <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f023 0307 	bic.w	r3, r3, #7
 800487a:	3308      	adds	r3, #8
 800487c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <pvPortMalloc+0x86>
 8004888:	4945      	ldr	r1, [pc, #276]	; (80049a0 <pvPortMalloc+0x188>)
 800488a:	209a      	movs	r0, #154	; 0x9a
 800488c:	f7fc f8da 	bl	8000a44 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004890:	e005      	b.n	800489e <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004896:	e002      	b.n	800489e <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	607b      	str	r3, [r7, #4]
 800489c:	e000      	b.n	80048a0 <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800489e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d067      	beq.n	8004976 <pvPortMalloc+0x15e>
 80048a6:	4b3f      	ldr	r3, [pc, #252]	; (80049a4 <pvPortMalloc+0x18c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d862      	bhi.n	8004976 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80048b0:	4b3d      	ldr	r3, [pc, #244]	; (80049a8 <pvPortMalloc+0x190>)
 80048b2:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 80048b4:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <pvPortMalloc+0x190>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048ba:	e004      	b.n	80048c6 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d903      	bls.n	80048d8 <pvPortMalloc+0xc0>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f1      	bne.n	80048bc <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80048d8:	4b2f      	ldr	r3, [pc, #188]	; (8004998 <pvPortMalloc+0x180>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d049      	beq.n	8004976 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2208      	movs	r2, #8
 80048e8:	4413      	add	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	1ad2      	subs	r2, r2, r3
 80048fc:	2308      	movs	r3, #8
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	429a      	cmp	r2, r3
 8004902:	d918      	bls.n	8004936 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4413      	add	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <pvPortMalloc+0x106>
 8004916:	4922      	ldr	r1, [pc, #136]	; (80049a0 <pvPortMalloc+0x188>)
 8004918:	20cd      	movs	r0, #205	; 0xcd
 800491a:	f7fc f893 	bl	8000a44 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	1ad2      	subs	r2, r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004930:	68b8      	ldr	r0, [r7, #8]
 8004932:	f000 f8f9 	bl	8004b28 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004936:	4b1b      	ldr	r3, [pc, #108]	; (80049a4 <pvPortMalloc+0x18c>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <pvPortMalloc+0x18c>)
 8004942:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004944:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <pvPortMalloc+0x18c>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b18      	ldr	r3, [pc, #96]	; (80049ac <pvPortMalloc+0x194>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d203      	bcs.n	8004958 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004950:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <pvPortMalloc+0x18c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a15      	ldr	r2, [pc, #84]	; (80049ac <pvPortMalloc+0x194>)
 8004956:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	4b0f      	ldr	r3, [pc, #60]	; (800499c <pvPortMalloc+0x184>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	431a      	orrs	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800496c:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <pvPortMalloc+0x198>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <pvPortMalloc+0x198>)
 8004974:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004976:	f7fe fcdd 	bl	8003334 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <pvPortMalloc+0x176>
 8004984:	4906      	ldr	r1, [pc, #24]	; (80049a0 <pvPortMalloc+0x188>)
 8004986:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800498a:	f7fc f85b 	bl	8000a44 <vAssertCalled>
    return pvReturn;
 800498e:	68fb      	ldr	r3, [r7, #12]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	2000ba78 	.word	0x2000ba78
 800499c:	2000ba8c 	.word	0x2000ba8c
 80049a0:	08008350 	.word	0x08008350
 80049a4:	2000ba7c 	.word	0x2000ba7c
 80049a8:	2000ba70 	.word	0x2000ba70
 80049ac:	2000ba80 	.word	0x2000ba80
 80049b0:	2000ba84 	.word	0x2000ba84

080049b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d041      	beq.n	8004a4a <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80049c6:	2308      	movs	r3, #8
 80049c8:	425b      	negs	r3, r3
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4413      	add	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <vPortFree+0xa0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4013      	ands	r3, r2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d104      	bne.n	80049ec <vPortFree+0x38>
 80049e2:	491d      	ldr	r1, [pc, #116]	; (8004a58 <vPortFree+0xa4>)
 80049e4:	f44f 7091 	mov.w	r0, #290	; 0x122
 80049e8:	f7fc f82c 	bl	8000a44 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d004      	beq.n	80049fe <vPortFree+0x4a>
 80049f4:	4918      	ldr	r1, [pc, #96]	; (8004a58 <vPortFree+0xa4>)
 80049f6:	f240 1023 	movw	r0, #291	; 0x123
 80049fa:	f7fc f823 	bl	8000a44 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <vPortFree+0xa0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01e      	beq.n	8004a4a <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11a      	bne.n	8004a4a <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <vPortFree+0xa0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	401a      	ands	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004a24:	f7fe fc78 	bl	8003318 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <vPortFree+0xa8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4413      	add	r3, r2
 8004a32:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <vPortFree+0xa8>)
 8004a34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a36:	68b8      	ldr	r0, [r7, #8]
 8004a38:	f000 f876 	bl	8004b28 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004a3c:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <vPortFree+0xac>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	4a07      	ldr	r2, [pc, #28]	; (8004a60 <vPortFree+0xac>)
 8004a44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004a46:	f7fe fc75 	bl	8003334 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000ba8c 	.word	0x2000ba8c
 8004a58:	08008350 	.word	0x08008350
 8004a5c:	2000ba7c 	.word	0x2000ba7c
 8004a60:	2000ba88 	.word	0x2000ba88

08004a64 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a6a:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8004a6e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <prvHeapInit+0xac>)
 8004a72:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3307      	adds	r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0307 	bic.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <prvHeapInit+0xac>)
 8004a94:	4413      	add	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a9c:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <prvHeapInit+0xb0>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <prvHeapInit+0xb0>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4413      	add	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0307 	bic.w	r3, r3, #7
 8004abe:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <prvHeapInit+0xb4>)
 8004ac4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004ac6:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <prvHeapInit+0xb4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <prvHeapInit+0xb4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <prvHeapInit+0xb4>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <prvHeapInit+0xb8>)
 8004af2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <prvHeapInit+0xbc>)
 8004afa:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <prvHeapInit+0xc0>)
 8004afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	20000270 	.word	0x20000270
 8004b14:	2000ba70 	.word	0x2000ba70
 8004b18:	2000ba78 	.word	0x2000ba78
 8004b1c:	2000ba80 	.word	0x2000ba80
 8004b20:	2000ba7c 	.word	0x2000ba7c
 8004b24:	2000ba8c 	.word	0x2000ba8c

08004b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <prvInsertBlockIntoFreeList+0xac>)
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e002      	b.n	8004b3c <prvInsertBlockIntoFreeList+0x14>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d8f7      	bhi.n	8004b36 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4413      	add	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d108      	bne.n	8004b6a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	441a      	add	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	441a      	add	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d118      	bne.n	8004bb0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d00d      	beq.n	8004ba6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e008      	b.n	8004bb8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e003      	b.n	8004bb8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d002      	beq.n	8004bc6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	2000ba70 	.word	0x2000ba70
 8004bd8:	2000ba78 	.word	0x2000ba78

08004bdc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004be0:	4803      	ldr	r0, [pc, #12]	; (8004bf0 <_cbSendSystemDesc+0x14>)
 8004be2:	f001 feeb 	bl	80069bc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004be6:	4803      	ldr	r0, [pc, #12]	; (8004bf4 <_cbSendSystemDesc+0x18>)
 8004be8:	f001 fee8 	bl	80069bc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004bec:	bf00      	nop
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	08008384 	.word	0x08008384
 8004bf4:	080083c0 	.word	0x080083c0

08004bf8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <SEGGER_SYSVIEW_Conf+0x20>)
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <SEGGER_SYSVIEW_Conf+0x24>)
 8004c06:	4a06      	ldr	r2, [pc, #24]	; (8004c20 <SEGGER_SYSVIEW_Conf+0x28>)
 8004c08:	f001 fa54 	bl	80060b4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004c0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004c10:	f001 fa94 	bl	800613c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004c14:	bf00      	nop
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000000 	.word	0x20000000
 8004c1c:	08004bdd 	.word	0x08004bdd
 8004c20:	08008460 	.word	0x08008460

08004c24 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	e033      	b.n	8004c98 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004c30:	491e      	ldr	r1, [pc, #120]	; (8004cac <_cbSendTaskList+0x88>)
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	491a      	ldr	r1, [pc, #104]	; (8004cac <_cbSendTaskList+0x88>)
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3304      	adds	r3, #4
 8004c50:	6819      	ldr	r1, [r3, #0]
 8004c52:	4c16      	ldr	r4, [pc, #88]	; (8004cac <_cbSendTaskList+0x88>)
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4423      	add	r3, r4
 8004c60:	3308      	adds	r3, #8
 8004c62:	681c      	ldr	r4, [r3, #0]
 8004c64:	4d11      	ldr	r5, [pc, #68]	; (8004cac <_cbSendTaskList+0x88>)
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	442b      	add	r3, r5
 8004c72:	330c      	adds	r3, #12
 8004c74:	681d      	ldr	r5, [r3, #0]
 8004c76:	4e0d      	ldr	r6, [pc, #52]	; (8004cac <_cbSendTaskList+0x88>)
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4433      	add	r3, r6
 8004c84:	3310      	adds	r3, #16
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	462b      	mov	r3, r5
 8004c8c:	4622      	mov	r2, r4
 8004c8e:	f000 f8c3 	bl	8004e18 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3301      	adds	r3, #1
 8004c96:	607b      	str	r3, [r7, #4]
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <_cbSendTaskList+0x8c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d3c6      	bcc.n	8004c30 <_cbSendTaskList+0xc>
  }
}
 8004ca2:	bf00      	nop
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cac:	2000ba90 	.word	0x2000ba90
 8004cb0:	2000bb30 	.word	0x2000bb30

08004cb4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004cbc:	f7fe fbe6 	bl	800348c <xTaskGetTickCountFromISR>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	469a      	mov	sl, r3
 8004cc6:	4693      	mov	fp, r2
 8004cc8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= 1000;
 8004cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	f04f 0a00 	mov.w	sl, #0
 8004ce4:	f04f 0b00 	mov.w	fp, #0
 8004ce8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004cec:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004cf0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	465b      	mov	r3, fp
 8004cf8:	1a14      	subs	r4, r2, r0
 8004cfa:	eb63 0501 	sbc.w	r5, r3, r1
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	00ab      	lsls	r3, r5, #2
 8004d08:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004d0c:	00a2      	lsls	r2, r4, #2
 8004d0e:	4614      	mov	r4, r2
 8004d10:	461d      	mov	r5, r3
 8004d12:	eb14 0800 	adds.w	r8, r4, r0
 8004d16:	eb45 0901 	adc.w	r9, r5, r1
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d2e:	4690      	mov	r8, r2
 8004d30:	4699      	mov	r9, r3
 8004d32:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004d36:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004d48 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004d56:	2205      	movs	r2, #5
 8004d58:	492b      	ldr	r1, [pc, #172]	; (8004e08 <SYSVIEW_AddTask+0xc0>)
 8004d5a:	68b8      	ldr	r0, [r7, #8]
 8004d5c:	f002 f9d8 	bl	8007110 <memcmp>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d04b      	beq.n	8004dfe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004d66:	4b29      	ldr	r3, [pc, #164]	; (8004e0c <SYSVIEW_AddTask+0xc4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b07      	cmp	r3, #7
 8004d6c:	d903      	bls.n	8004d76 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004d6e:	4828      	ldr	r0, [pc, #160]	; (8004e10 <SYSVIEW_AddTask+0xc8>)
 8004d70:	f002 f936 	bl	8006fe0 <SEGGER_SYSVIEW_Warn>
    return;
 8004d74:	e044      	b.n	8004e00 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d76:	4b25      	ldr	r3, [pc, #148]	; (8004e0c <SYSVIEW_AddTask+0xc4>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4926      	ldr	r1, [pc, #152]	; (8004e14 <SYSVIEW_AddTask+0xcc>)
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d8a:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <SYSVIEW_AddTask+0xc4>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4921      	ldr	r1, [pc, #132]	; (8004e14 <SYSVIEW_AddTask+0xcc>)
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004da0:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <SYSVIEW_AddTask+0xc4>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	491b      	ldr	r1, [pc, #108]	; (8004e14 <SYSVIEW_AddTask+0xcc>)
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	3308      	adds	r3, #8
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004db6:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <SYSVIEW_AddTask+0xc4>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4916      	ldr	r1, [pc, #88]	; (8004e14 <SYSVIEW_AddTask+0xcc>)
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <SYSVIEW_AddTask+0xc4>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4910      	ldr	r1, [pc, #64]	; (8004e14 <SYSVIEW_AddTask+0xcc>)
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	3310      	adds	r3, #16
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004de2:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <SYSVIEW_AddTask+0xc4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3301      	adds	r3, #1
 8004de8:	4a08      	ldr	r2, [pc, #32]	; (8004e0c <SYSVIEW_AddTask+0xc4>)
 8004dea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f80e 	bl	8004e18 <SYSVIEW_SendTaskInfo>
 8004dfc:	e000      	b.n	8004e00 <SYSVIEW_AddTask+0xb8>
    return;
 8004dfe:	bf00      	nop

}
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	080083d0 	.word	0x080083d0
 8004e0c:	2000bb30 	.word	0x2000bb30
 8004e10:	080083d8 	.word	0x080083d8
 8004e14:	2000ba90 	.word	0x2000ba90

08004e18 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08a      	sub	sp, #40	; 0x28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004e26:	f107 0314 	add.w	r3, r7, #20
 8004e2a:	2214      	movs	r2, #20
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f002 f98c 	bl	800714c <memset>
  TaskInfo.TaskID     = TaskID;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004e48:	f107 0314 	add.w	r3, r7, #20
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f001 fcbd 	bl	80067cc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004e52:	bf00      	nop
 8004e54:	3728      	adds	r7, #40	; 0x28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004e62:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <USART2_IRQHandler+0x80>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d011      	beq.n	8004e96 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004e72:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <USART2_IRQHandler+0x84>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 030b 	and.w	r3, r3, #11
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d108      	bne.n	8004e96 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004e84:	4b17      	ldr	r3, [pc, #92]	; (8004ee4 <USART2_IRQHandler+0x88>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004e8c:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <USART2_IRQHandler+0x88>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	79fa      	ldrb	r2, [r7, #7]
 8004e92:	4610      	mov	r0, r2
 8004e94:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01a      	beq.n	8004ed6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <USART2_IRQHandler+0x8c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d015      	beq.n	8004ed4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <USART2_IRQHandler+0x8c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	1dfa      	adds	r2, r7, #7
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4798      	blx	r3
 8004eb2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004eba:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <USART2_IRQHandler+0x90>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a0b      	ldr	r2, [pc, #44]	; (8004eec <USART2_IRQHandler+0x90>)
 8004ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e006      	b.n	8004ed6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <USART2_IRQHandler+0x80>)
 8004eca:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004ecc:	79fa      	ldrb	r2, [r7, #7]
 8004ece:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <USART2_IRQHandler+0x84>)
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e000      	b.n	8004ed6 <USART2_IRQHandler+0x7a>
      return;
 8004ed4:	bf00      	nop
    }
  }
}
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40004400 	.word	0x40004400
 8004ee0:	40004404 	.word	0x40004404
 8004ee4:	2000bb34 	.word	0x2000bb34
 8004ee8:	2000bb38 	.word	0x2000bb38
 8004eec:	4000440c 	.word	0x4000440c

08004ef0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004ef4:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a04      	ldr	r2, [pc, #16]	; (8004f0c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efe:	6013      	str	r3, [r2, #0]
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	4000440c 	.word	0x4000440c

08004f10 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f16:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <_DoInit+0x98>)
 8004f18:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2203      	movs	r2, #3
 8004f1e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2203      	movs	r2, #3
 8004f24:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a20      	ldr	r2, [pc, #128]	; (8004fac <_DoInit+0x9c>)
 8004f2a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a20      	ldr	r2, [pc, #128]	; (8004fb0 <_DoInit+0xa0>)
 8004f30:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f38:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a17      	ldr	r2, [pc, #92]	; (8004fac <_DoInit+0x9c>)
 8004f50:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a17      	ldr	r2, [pc, #92]	; (8004fb4 <_DoInit+0xa4>)
 8004f56:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2210      	movs	r2, #16
 8004f5c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3307      	adds	r3, #7
 8004f74:	4a10      	ldr	r2, [pc, #64]	; (8004fb8 <_DoInit+0xa8>)
 8004f76:	6810      	ldr	r0, [r2, #0]
 8004f78:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f7a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a0e      	ldr	r2, [pc, #56]	; (8004fbc <_DoInit+0xac>)
 8004f82:	6810      	ldr	r0, [r2, #0]
 8004f84:	6018      	str	r0, [r3, #0]
 8004f86:	8891      	ldrh	r1, [r2, #4]
 8004f88:	7992      	ldrb	r2, [r2, #6]
 8004f8a:	8099      	strh	r1, [r3, #4]
 8004f8c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f8e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f98:	f3bf 8f5f 	dmb	sy
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	2000bb3c 	.word	0x2000bb3c
 8004fac:	08008428 	.word	0x08008428
 8004fb0:	2000bbe4 	.word	0x2000bbe4
 8004fb4:	2000bfe4 	.word	0x2000bfe4
 8004fb8:	08008434 	.word	0x08008434
 8004fbc:	08008438 	.word	0x08008438

08004fc0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d905      	bls.n	8004ff0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
 8004fee:	e007      	b.n	8005000 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	69b9      	ldr	r1, [r7, #24]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	1acb      	subs	r3, r1, r3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	4293      	cmp	r3, r2
 800500c:	bf28      	it	cs
 800500e:	4613      	movcs	r3, r2
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4293      	cmp	r3, r2
 8005018:	bf28      	it	cs
 800501a:	4613      	movcs	r3, r2
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	6978      	ldr	r0, [r7, #20]
 800502e:	f002 f87f 	bl	8007130 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005032:	6a3a      	ldr	r2, [r7, #32]
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	4413      	add	r3, r2
 8005038:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	4413      	add	r3, r2
 8005040:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	4413      	add	r3, r2
 8005050:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	429a      	cmp	r2, r3
 800505a:	d101      	bne.n	8005060 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005060:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1b2      	bne.n	8004fd6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005070:	6a3b      	ldr	r3, [r7, #32]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3728      	adds	r7, #40	; 0x28
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800507a:	b580      	push	{r7, lr}
 800507c:	b088      	sub	sp, #32
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	429a      	cmp	r2, r3
 800509c:	d911      	bls.n	80050c2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	6938      	ldr	r0, [r7, #16]
 80050ae:	f002 f83f 	bl	8007130 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050b2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	441a      	add	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80050c0:	e01f      	b.n	8005102 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	6938      	ldr	r0, [r7, #16]
 80050d6:	f002 f82b 	bl	8007130 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	4413      	add	r3, r2
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4619      	mov	r1, r3
 80050f2:	6938      	ldr	r0, [r7, #16]
 80050f4:	f002 f81c 	bl	8007130 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050f8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	60da      	str	r2, [r3, #12]
}
 8005102:	bf00      	nop
 8005104:	3720      	adds	r7, #32
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800510a:	b480      	push	{r7}
 800510c:	b087      	sub	sp, #28
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	429a      	cmp	r2, r3
 8005124:	d808      	bhi.n	8005138 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad2      	subs	r2, r2, r3
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4413      	add	r3, r2
 8005132:	3b01      	subs	r3, #1
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	e004      	b.n	8005142 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005142:	697b      	ldr	r3, [r7, #20]
}
 8005144:	4618      	mov	r0, r3
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b08c      	sub	sp, #48	; 0x30
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800515c:	4b3e      	ldr	r3, [pc, #248]	; (8005258 <SEGGER_RTT_ReadNoLock+0x108>)
 800515e:	623b      	str	r3, [r7, #32]
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <SEGGER_RTT_ReadNoLock+0x1e>
 800516a:	f7ff fed1 	bl	8004f10 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4613      	mov	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	3360      	adds	r3, #96	; 0x60
 800517a:	4a37      	ldr	r2, [pc, #220]	; (8005258 <SEGGER_RTT_ReadNoLock+0x108>)
 800517c:	4413      	add	r3, r2
 800517e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005190:	2300      	movs	r3, #0
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	429a      	cmp	r2, r3
 800519a:	d92b      	bls.n	80051f4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4293      	cmp	r3, r2
 80051ac:	bf28      	it	cs
 80051ae:	4613      	movcs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	4413      	add	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	6939      	ldr	r1, [r7, #16]
 80051c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051c2:	f001 ffb5 	bl	8007130 <memcpy>
    NumBytesRead += NumBytesRem;
 80051c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	4413      	add	r3, r2
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	4413      	add	r3, r2
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	4413      	add	r3, r2
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d101      	bne.n	80051f4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80051f0:	2300      	movs	r3, #0
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4293      	cmp	r3, r2
 8005202:	bf28      	it	cs
 8005204:	4613      	movcs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d019      	beq.n	8005242 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	4413      	add	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	6939      	ldr	r1, [r7, #16]
 800521c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800521e:	f001 ff87 	bl	8007130 <memcpy>
    NumBytesRead += NumBytesRem;
 8005222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4413      	add	r3, r2
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	4413      	add	r3, r2
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800523a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4413      	add	r3, r2
 8005240:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800524c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005250:	4618      	mov	r0, r3
 8005252:	3730      	adds	r7, #48	; 0x30
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	2000bb3c 	.word	0x2000bb3c

0800525c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	4613      	mov	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4413      	add	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <SEGGER_RTT_WriteNoLock+0x9c>)
 800527a:	4413      	add	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d029      	beq.n	80052da <SEGGER_RTT_WriteNoLock+0x7e>
 8005286:	2b02      	cmp	r3, #2
 8005288:	d82e      	bhi.n	80052e8 <SEGGER_RTT_WriteNoLock+0x8c>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <SEGGER_RTT_WriteNoLock+0x38>
 800528e:	2b01      	cmp	r3, #1
 8005290:	d013      	beq.n	80052ba <SEGGER_RTT_WriteNoLock+0x5e>
 8005292:	e029      	b.n	80052e8 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005294:	6978      	ldr	r0, [r7, #20]
 8005296:	f7ff ff38 	bl	800510a <_GetAvailWriteSpace>
 800529a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d202      	bcs.n	80052aa <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80052a8:	e021      	b.n	80052ee <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	69b9      	ldr	r1, [r7, #24]
 80052b2:	6978      	ldr	r0, [r7, #20]
 80052b4:	f7ff fee1 	bl	800507a <_WriteNoCheck>
    break;
 80052b8:	e019      	b.n	80052ee <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80052ba:	6978      	ldr	r0, [r7, #20]
 80052bc:	f7ff ff25 	bl	800510a <_GetAvailWriteSpace>
 80052c0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4293      	cmp	r3, r2
 80052c8:	bf28      	it	cs
 80052ca:	4613      	movcs	r3, r2
 80052cc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	69b9      	ldr	r1, [r7, #24]
 80052d2:	6978      	ldr	r0, [r7, #20]
 80052d4:	f7ff fed1 	bl	800507a <_WriteNoCheck>
    break;
 80052d8:	e009      	b.n	80052ee <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	69b9      	ldr	r1, [r7, #24]
 80052de:	6978      	ldr	r0, [r7, #20]
 80052e0:	f7ff fe6e 	bl	8004fc0 <_WriteBlocking>
 80052e4:	61f8      	str	r0, [r7, #28]
    break;
 80052e6:	e002      	b.n	80052ee <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
    break;
 80052ec:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80052ee:	69fb      	ldr	r3, [r7, #28]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	2000bb3c 	.word	0x2000bb3c

080052fc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005308:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <SEGGER_RTT_Write+0x48>)
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <SEGGER_RTT_Write+0x1e>
 8005316:	f7ff fdfb 	bl	8004f10 <_DoInit>
  SEGGER_RTT_LOCK();
 800531a:	f3ef 8311 	mrs	r3, BASEPRI
 800531e:	f04f 0120 	mov.w	r1, #32
 8005322:	f381 8811 	msr	BASEPRI, r1
 8005326:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f7ff ff95 	bl	800525c <SEGGER_RTT_WriteNoLock>
 8005332:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800533a:	697b      	ldr	r3, [r7, #20]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	2000bb3c 	.word	0x2000bb3c

08005348 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005356:	4b3d      	ldr	r3, [pc, #244]	; (800544c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005364:	f7ff fdd4 	bl	8004f10 <_DoInit>
  SEGGER_RTT_LOCK();
 8005368:	f3ef 8311 	mrs	r3, BASEPRI
 800536c:	f04f 0120 	mov.w	r1, #32
 8005370:	f381 8811 	msr	BASEPRI, r1
 8005374:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005376:	4b35      	ldr	r3, [pc, #212]	; (800544c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005378:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800537e:	6939      	ldr	r1, [r7, #16]
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	4613      	mov	r3, r2
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	4413      	add	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	440b      	add	r3, r1
 800538e:	3304      	adds	r3, #4
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3301      	adds	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	dbeb      	blt.n	800537e <SEGGER_RTT_AllocUpBuffer+0x36>
 80053a6:	e000      	b.n	80053aa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80053a8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	da3f      	bge.n	8005434 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80053b4:	6939      	ldr	r1, [r7, #16]
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	4613      	mov	r3, r2
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	4413      	add	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	440b      	add	r3, r1
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80053c8:	6939      	ldr	r1, [r7, #16]
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	4613      	mov	r3, r2
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	4413      	add	r3, r2
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	440b      	add	r3, r1
 80053d8:	3304      	adds	r3, #4
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80053de:	6939      	ldr	r1, [r7, #16]
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	4613      	mov	r3, r2
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	4413      	add	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	440b      	add	r3, r1
 80053ec:	3320      	adds	r3, #32
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80053f2:	6939      	ldr	r1, [r7, #16]
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	4613      	mov	r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4413      	add	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	440b      	add	r3, r1
 8005400:	3328      	adds	r3, #40	; 0x28
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005406:	6939      	ldr	r1, [r7, #16]
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	4613      	mov	r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	4413      	add	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	440b      	add	r3, r1
 8005414:	3324      	adds	r3, #36	; 0x24
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800541a:	6939      	ldr	r1, [r7, #16]
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	4613      	mov	r3, r2
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	4413      	add	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	440b      	add	r3, r1
 8005428:	332c      	adds	r3, #44	; 0x2c
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800542e:	f3bf 8f5f 	dmb	sy
 8005432:	e002      	b.n	800543a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005434:	f04f 33ff 	mov.w	r3, #4294967295
 8005438:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005440:	69fb      	ldr	r3, [r7, #28]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3720      	adds	r7, #32
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	2000bb3c 	.word	0x2000bb3c

08005450 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800545e:	4b33      	ldr	r3, [pc, #204]	; (800552c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800546c:	f7ff fd50 	bl	8004f10 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005470:	4b2e      	ldr	r3, [pc, #184]	; (800552c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005472:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	461a      	mov	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4293      	cmp	r3, r2
 800547e:	d24d      	bcs.n	800551c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005480:	f3ef 8311 	mrs	r3, BASEPRI
 8005484:	f04f 0120 	mov.w	r1, #32
 8005488:	f381 8811 	msr	BASEPRI, r1
 800548c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d031      	beq.n	80054f8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005494:	6979      	ldr	r1, [r7, #20]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4613      	mov	r3, r2
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	440b      	add	r3, r1
 80054a2:	3360      	adds	r3, #96	; 0x60
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80054a8:	6979      	ldr	r1, [r7, #20]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4613      	mov	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	4413      	add	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	440b      	add	r3, r1
 80054b6:	3364      	adds	r3, #100	; 0x64
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80054bc:	6979      	ldr	r1, [r7, #20]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4613      	mov	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	4413      	add	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	440b      	add	r3, r1
 80054ca:	3368      	adds	r3, #104	; 0x68
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80054d0:	6979      	ldr	r1, [r7, #20]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4613      	mov	r3, r2
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4413      	add	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	440b      	add	r3, r1
 80054de:	3370      	adds	r3, #112	; 0x70
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80054e4:	6979      	ldr	r1, [r7, #20]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4613      	mov	r3, r2
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	4413      	add	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	440b      	add	r3, r1
 80054f2:	336c      	adds	r3, #108	; 0x6c
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80054f8:	6979      	ldr	r1, [r7, #20]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4613      	mov	r3, r2
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	4413      	add	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	440b      	add	r3, r1
 8005506:	3374      	adds	r3, #116	; 0x74
 8005508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800550a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800550c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	e002      	b.n	8005522 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800551c:	f04f 33ff 	mov.w	r3, #4294967295
 8005520:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005522:	69fb      	ldr	r3, [r7, #28]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3720      	adds	r7, #32
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	2000bb3c 	.word	0x2000bb3c

08005530 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005540:	e002      	b.n	8005548 <_EncodeStr+0x18>
    Len++;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	3301      	adds	r3, #1
 8005546:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	4413      	add	r3, r2
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f6      	bne.n	8005542 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	d901      	bls.n	8005560 <_EncodeStr+0x30>
    Len = Limit;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2bfe      	cmp	r3, #254	; 0xfe
 8005564:	d806      	bhi.n	8005574 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	60fa      	str	r2, [r7, #12]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e011      	b.n	8005598 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	60fa      	str	r2, [r7, #12]
 800557a:	22ff      	movs	r2, #255	; 0xff
 800557c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	60fa      	str	r2, [r7, #12]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	0a19      	lsrs	r1, r3, #8
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	60fa      	str	r2, [r7, #12]
 8005594:	b2ca      	uxtb	r2, r1
 8005596:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800559c:	e00a      	b.n	80055b4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	1c53      	adds	r3, r2, #1
 80055a2:	60bb      	str	r3, [r7, #8]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	1c59      	adds	r1, r3, #1
 80055a8:	60f9      	str	r1, [r7, #12]
 80055aa:	7812      	ldrb	r2, [r2, #0]
 80055ac:	701a      	strb	r2, [r3, #0]
    n++;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	3301      	adds	r3, #1
 80055b2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d3f0      	bcc.n	800559e <_EncodeStr+0x6e>
  }
  return pPayload;
 80055bc:	68fb      	ldr	r3, [r7, #12]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3304      	adds	r3, #4
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055ea:	4b36      	ldr	r3, [pc, #216]	; (80056c4 <_HandleIncomingPacket+0xe0>)
 80055ec:	7e1b      	ldrb	r3, [r3, #24]
 80055ee:	4618      	mov	r0, r3
 80055f0:	1cfb      	adds	r3, r7, #3
 80055f2:	2201      	movs	r2, #1
 80055f4:	4619      	mov	r1, r3
 80055f6:	f7ff fdab 	bl	8005150 <SEGGER_RTT_ReadNoLock>
 80055fa:	4603      	mov	r3, r0
 80055fc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	dd54      	ble.n	80056ae <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	2b80      	cmp	r3, #128	; 0x80
 8005608:	d032      	beq.n	8005670 <_HandleIncomingPacket+0x8c>
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	dc42      	bgt.n	8005694 <_HandleIncomingPacket+0xb0>
 800560e:	2b07      	cmp	r3, #7
 8005610:	dc16      	bgt.n	8005640 <_HandleIncomingPacket+0x5c>
 8005612:	2b00      	cmp	r3, #0
 8005614:	dd3e      	ble.n	8005694 <_HandleIncomingPacket+0xb0>
 8005616:	3b01      	subs	r3, #1
 8005618:	2b06      	cmp	r3, #6
 800561a:	d83b      	bhi.n	8005694 <_HandleIncomingPacket+0xb0>
 800561c:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <_HandleIncomingPacket+0x40>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005647 	.word	0x08005647
 8005628:	0800564d 	.word	0x0800564d
 800562c:	08005653 	.word	0x08005653
 8005630:	08005659 	.word	0x08005659
 8005634:	0800565f 	.word	0x0800565f
 8005638:	08005665 	.word	0x08005665
 800563c:	0800566b 	.word	0x0800566b
 8005640:	2b7f      	cmp	r3, #127	; 0x7f
 8005642:	d036      	beq.n	80056b2 <_HandleIncomingPacket+0xce>
 8005644:	e026      	b.n	8005694 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005646:	f000 ff45 	bl	80064d4 <SEGGER_SYSVIEW_Start>
      break;
 800564a:	e037      	b.n	80056bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800564c:	f000 fffe 	bl	800664c <SEGGER_SYSVIEW_Stop>
      break;
 8005650:	e034      	b.n	80056bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005652:	f001 f9d7 	bl	8006a04 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005656:	e031      	b.n	80056bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005658:	f001 f99c 	bl	8006994 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800565c:	e02e      	b.n	80056bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800565e:	f001 f81b 	bl	8006698 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005662:	e02b      	b.n	80056bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005664:	f001 fc6a 	bl	8006f3c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005668:	e028      	b.n	80056bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800566a:	f001 fc49 	bl	8006f00 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800566e:	e025      	b.n	80056bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005670:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <_HandleIncomingPacket+0xe0>)
 8005672:	7e1b      	ldrb	r3, [r3, #24]
 8005674:	4618      	mov	r0, r3
 8005676:	1cfb      	adds	r3, r7, #3
 8005678:	2201      	movs	r2, #1
 800567a:	4619      	mov	r1, r3
 800567c:	f7ff fd68 	bl	8005150 <SEGGER_RTT_ReadNoLock>
 8005680:	4603      	mov	r3, r0
 8005682:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	dd15      	ble.n	80056b6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	4618      	mov	r0, r3
 800568e:	f001 fbb7 	bl	8006e00 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005692:	e010      	b.n	80056b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	b25b      	sxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	da0e      	bge.n	80056ba <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <_HandleIncomingPacket+0xe0>)
 800569e:	7e1b      	ldrb	r3, [r3, #24]
 80056a0:	4618      	mov	r0, r3
 80056a2:	1cfb      	adds	r3, r7, #3
 80056a4:	2201      	movs	r2, #1
 80056a6:	4619      	mov	r1, r3
 80056a8:	f7ff fd52 	bl	8005150 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80056ac:	e005      	b.n	80056ba <_HandleIncomingPacket+0xd6>
    }
  }
 80056ae:	bf00      	nop
 80056b0:	e004      	b.n	80056bc <_HandleIncomingPacket+0xd8>
      break;
 80056b2:	bf00      	nop
 80056b4:	e002      	b.n	80056bc <_HandleIncomingPacket+0xd8>
      break;
 80056b6:	bf00      	nop
 80056b8:	e000      	b.n	80056bc <_HandleIncomingPacket+0xd8>
      break;
 80056ba:	bf00      	nop
}
 80056bc:	bf00      	nop
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	2000cffc 	.word	0x2000cffc

080056c8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08c      	sub	sp, #48	; 0x30
 80056cc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80056ce:	2301      	movs	r3, #1
 80056d0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80056d2:	1d3b      	adds	r3, r7, #4
 80056d4:	3301      	adds	r3, #1
 80056d6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056dc:	4b32      	ldr	r3, [pc, #200]	; (80057a8 <_TrySendOverflowPacket+0xe0>)
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e2:	e00b      	b.n	80056fc <_TrySendOverflowPacket+0x34>
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ea:	1c59      	adds	r1, r3, #1
 80056ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	09db      	lsrs	r3, r3, #7
 80056fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005700:	d8f0      	bhi.n	80056e4 <_TrySendOverflowPacket+0x1c>
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005710:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005712:	4b26      	ldr	r3, [pc, #152]	; (80057ac <_TrySendOverflowPacket+0xe4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005718:	4b23      	ldr	r3, [pc, #140]	; (80057a8 <_TrySendOverflowPacket+0xe0>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	623b      	str	r3, [r7, #32]
 800572a:	e00b      	b.n	8005744 <_TrySendOverflowPacket+0x7c>
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	b2da      	uxtb	r2, r3
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	1c59      	adds	r1, r3, #1
 8005734:	6279      	str	r1, [r7, #36]	; 0x24
 8005736:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	09db      	lsrs	r3, r3, #7
 8005742:	623b      	str	r3, [r7, #32]
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	2b7f      	cmp	r3, #127	; 0x7f
 8005748:	d8f0      	bhi.n	800572c <_TrySendOverflowPacket+0x64>
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	627a      	str	r2, [r7, #36]	; 0x24
 8005750:	6a3a      	ldr	r2, [r7, #32]
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800575a:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <_TrySendOverflowPacket+0xe0>)
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	4618      	mov	r0, r3
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	461a      	mov	r2, r3
 8005768:	1d3b      	adds	r3, r7, #4
 800576a:	4619      	mov	r1, r3
 800576c:	f7fa fd68 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005770:	4603      	mov	r3, r0
 8005772:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005774:	f7ff fbbc 	bl	8004ef0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800577e:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <_TrySendOverflowPacket+0xe0>)
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005784:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <_TrySendOverflowPacket+0xe0>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	3b01      	subs	r3, #1
 800578a:	b2da      	uxtb	r2, r3
 800578c:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <_TrySendOverflowPacket+0xe0>)
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	e004      	b.n	800579c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005792:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <_TrySendOverflowPacket+0xe0>)
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	3301      	adds	r3, #1
 8005798:	4a03      	ldr	r2, [pc, #12]	; (80057a8 <_TrySendOverflowPacket+0xe0>)
 800579a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800579c:	693b      	ldr	r3, [r7, #16]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3730      	adds	r7, #48	; 0x30
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	2000cffc 	.word	0x2000cffc
 80057ac:	e0001004 	.word	0xe0001004

080057b0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	; 0x28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80057bc:	4b6d      	ldr	r3, [pc, #436]	; (8005974 <_SendPacket+0x1c4>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d010      	beq.n	80057e6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80057c4:	4b6b      	ldr	r3, [pc, #428]	; (8005974 <_SendPacket+0x1c4>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80a5 	beq.w	8005918 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80057ce:	4b69      	ldr	r3, [pc, #420]	; (8005974 <_SendPacket+0x1c4>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d109      	bne.n	80057ea <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80057d6:	f7ff ff77 	bl	80056c8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80057da:	4b66      	ldr	r3, [pc, #408]	; (8005974 <_SendPacket+0x1c4>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	f040 809c 	bne.w	800591c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80057e4:	e001      	b.n	80057ea <_SendPacket+0x3a>
    goto Send;
 80057e6:	bf00      	nop
 80057e8:	e000      	b.n	80057ec <_SendPacket+0x3c>
Send:
 80057ea:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b1f      	cmp	r3, #31
 80057f0:	d809      	bhi.n	8005806 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80057f2:	4b60      	ldr	r3, [pc, #384]	; (8005974 <_SendPacket+0x1c4>)
 80057f4:	69da      	ldr	r2, [r3, #28]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	f040 808d 	bne.w	8005920 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b17      	cmp	r3, #23
 800580a:	d807      	bhi.n	800581c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3b01      	subs	r3, #1
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	e03d      	b.n	8005898 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b7f      	cmp	r3, #127	; 0x7f
 8005828:	d912      	bls.n	8005850 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	09da      	lsrs	r2, r3, #7
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3b01      	subs	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	3a01      	subs	r2, #1
 8005842:	60fa      	str	r2, [r7, #12]
 8005844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005848:	b2da      	uxtb	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	e006      	b.n	800585e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3b01      	subs	r3, #1
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	b2da      	uxtb	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b7f      	cmp	r3, #127	; 0x7f
 8005862:	d912      	bls.n	800588a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	09da      	lsrs	r2, r3, #7
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3b01      	subs	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	3a01      	subs	r2, #1
 800587c:	60fa      	str	r2, [r7, #12]
 800587e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005882:	b2da      	uxtb	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	e006      	b.n	8005898 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3b01      	subs	r3, #1
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	b2da      	uxtb	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005898:	4b37      	ldr	r3, [pc, #220]	; (8005978 <_SendPacket+0x1c8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800589e:	4b35      	ldr	r3, [pc, #212]	; (8005974 <_SendPacket+0x1c4>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	623b      	str	r3, [r7, #32]
 80058b0:	e00b      	b.n	80058ca <_SendPacket+0x11a>
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	1c59      	adds	r1, r3, #1
 80058ba:	6279      	str	r1, [r7, #36]	; 0x24
 80058bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	09db      	lsrs	r3, r3, #7
 80058c8:	623b      	str	r3, [r7, #32]
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	2b7f      	cmp	r3, #127	; 0x7f
 80058ce:	d8f0      	bhi.n	80058b2 <_SendPacket+0x102>
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	627a      	str	r2, [r7, #36]	; 0x24
 80058d6:	6a3a      	ldr	r2, [r7, #32]
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80058e0:	4b24      	ldr	r3, [pc, #144]	; (8005974 <_SendPacket+0x1c4>)
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	4618      	mov	r0, r3
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	68f9      	ldr	r1, [r7, #12]
 80058f0:	f7fa fca6 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058f4:	4603      	mov	r3, r0
 80058f6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80058f8:	f7ff fafa 	bl	8004ef0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005902:	4a1c      	ldr	r2, [pc, #112]	; (8005974 <_SendPacket+0x1c4>)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	60d3      	str	r3, [r2, #12]
 8005908:	e00b      	b.n	8005922 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800590a:	4b1a      	ldr	r3, [pc, #104]	; (8005974 <_SendPacket+0x1c4>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	3301      	adds	r3, #1
 8005910:	b2da      	uxtb	r2, r3
 8005912:	4b18      	ldr	r3, [pc, #96]	; (8005974 <_SendPacket+0x1c4>)
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	e004      	b.n	8005922 <_SendPacket+0x172>
    goto SendDone;
 8005918:	bf00      	nop
 800591a:	e002      	b.n	8005922 <_SendPacket+0x172>
      goto SendDone;
 800591c:	bf00      	nop
 800591e:	e000      	b.n	8005922 <_SendPacket+0x172>
      goto SendDone;
 8005920:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005922:	4b14      	ldr	r3, [pc, #80]	; (8005974 <_SendPacket+0x1c4>)
 8005924:	7e1b      	ldrb	r3, [r3, #24]
 8005926:	4619      	mov	r1, r3
 8005928:	4a14      	ldr	r2, [pc, #80]	; (800597c <_SendPacket+0x1cc>)
 800592a:	460b      	mov	r3, r1
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	440b      	add	r3, r1
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4413      	add	r3, r2
 8005934:	336c      	adds	r3, #108	; 0x6c
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4b0e      	ldr	r3, [pc, #56]	; (8005974 <_SendPacket+0x1c4>)
 800593a:	7e1b      	ldrb	r3, [r3, #24]
 800593c:	4618      	mov	r0, r3
 800593e:	490f      	ldr	r1, [pc, #60]	; (800597c <_SendPacket+0x1cc>)
 8005940:	4603      	mov	r3, r0
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	4403      	add	r3, r0
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	440b      	add	r3, r1
 800594a:	3370      	adds	r3, #112	; 0x70
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d00b      	beq.n	800596a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005952:	4b08      	ldr	r3, [pc, #32]	; (8005974 <_SendPacket+0x1c4>)
 8005954:	789b      	ldrb	r3, [r3, #2]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d107      	bne.n	800596a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <_SendPacket+0x1c4>)
 800595c:	2201      	movs	r2, #1
 800595e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005960:	f7ff fe40 	bl	80055e4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005964:	4b03      	ldr	r3, [pc, #12]	; (8005974 <_SendPacket+0x1c4>)
 8005966:	2200      	movs	r2, #0
 8005968:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800596a:	bf00      	nop
 800596c:	3728      	adds	r7, #40	; 0x28
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	2000cffc 	.word	0x2000cffc
 8005978:	e0001004 	.word	0xe0001004
 800597c:	2000bb3c 	.word	0x2000bb3c

08005980 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	3301      	adds	r3, #1
 8005996:	2b80      	cmp	r3, #128	; 0x80
 8005998:	d80a      	bhi.n	80059b0 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	1c59      	adds	r1, r3, #1
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6051      	str	r1, [r2, #4]
 80059a4:	78fa      	ldrb	r2, [r7, #3]
 80059a6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b80      	cmp	r3, #128	; 0x80
 80059b6:	d15a      	bne.n	8005a6e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	623b      	str	r3, [r7, #32]
 80059d8:	e00b      	b.n	80059f2 <_StoreChar+0x72>
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	1c59      	adds	r1, r3, #1
 80059e2:	6279      	str	r1, [r7, #36]	; 0x24
 80059e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	09db      	lsrs	r3, r3, #7
 80059f0:	623b      	str	r3, [r7, #32]
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	2b7f      	cmp	r3, #127	; 0x7f
 80059f6:	d8f0      	bhi.n	80059da <_StoreChar+0x5a>
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	627a      	str	r2, [r7, #36]	; 0x24
 80059fe:	6a3a      	ldr	r2, [r7, #32]
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61bb      	str	r3, [r7, #24]
 8005a10:	e00b      	b.n	8005a2a <_StoreChar+0xaa>
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	1c59      	adds	r1, r3, #1
 8005a1a:	61f9      	str	r1, [r7, #28]
 8005a1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	09db      	lsrs	r3, r3, #7
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2e:	d8f0      	bhi.n	8005a12 <_StoreChar+0x92>
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	61fa      	str	r2, [r7, #28]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	221a      	movs	r2, #26
 8005a46:	6939      	ldr	r1, [r7, #16]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff feb1 	bl	80057b0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff fdb9 	bl	80055ca <_PreparePacket>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	611a      	str	r2, [r3, #16]
  }
}
 8005a6e:	bf00      	nop
 8005a70:	3728      	adds	r7, #40	; 0x28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	; 0x28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a92:	e007      	b.n	8005aa4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005a94:	6a3a      	ldr	r2, [r7, #32]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	623b      	str	r3, [r7, #32]
    Width++;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005aa4:	6a3a      	ldr	r2, [r7, #32]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d2f3      	bcs.n	8005a94 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d901      	bls.n	8005ab8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d11f      	bne.n	8005b02 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01c      	beq.n	8005b02 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <_PrintUnsigned+0x66>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d102      	bne.n	8005ade <_PrintUnsigned+0x66>
        c = '0';
 8005ad8:	2330      	movs	r3, #48	; 0x30
 8005ada:	76fb      	strb	r3, [r7, #27]
 8005adc:	e001      	b.n	8005ae2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005ade:	2320      	movs	r3, #32
 8005ae0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ae2:	e007      	b.n	8005af4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005aea:	7efb      	ldrb	r3, [r7, #27]
 8005aec:	4619      	mov	r1, r3
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7ff ff46 	bl	8005980 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <_PrintUnsigned+0x8a>
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d3f0      	bcc.n	8005ae4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d903      	bls.n	8005b10 <_PrintUnsigned+0x98>
      NumDigits--;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	603b      	str	r3, [r7, #0]
 8005b0e:	e009      	b.n	8005b24 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d200      	bcs.n	8005b24 <_PrintUnsigned+0xac>
        break;
 8005b22:	e005      	b.n	8005b30 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	fb02 f303 	mul.w	r3, r2, r3
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b2e:	e7e8      	b.n	8005b02 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b38:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3e:	fb02 f303 	mul.w	r3, r2, r3
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005b48:	4a15      	ldr	r2, [pc, #84]	; (8005ba0 <_PrintUnsigned+0x128>)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	4619      	mov	r1, r3
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff ff14 	bl	8005980 <_StoreChar>
    Digit /= Base;
 8005b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e3      	bne.n	8005b30 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d011      	beq.n	8005b96 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00e      	beq.n	8005b96 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b78:	e006      	b.n	8005b88 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005b80:	2120      	movs	r1, #32
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff fefc 	bl	8005980 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <_PrintUnsigned+0x11e>
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d3f1      	bcc.n	8005b7a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005b96:	bf00      	nop
 8005b98:	3728      	adds	r7, #40	; 0x28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08008474 	.word	0x08008474

08005ba4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	bfb8      	it	lt
 8005bb8:	425b      	neglt	r3, r3
 8005bba:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bc0:	e007      	b.n	8005bd2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bca:	613b      	str	r3, [r7, #16]
    Width++;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	daf3      	bge.n	8005bc2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d901      	bls.n	8005be6 <_PrintInt+0x42>
    Width = NumDigits;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <_PrintInt+0x5e>
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	db04      	blt.n	8005bfc <_PrintInt+0x58>
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <_PrintInt+0x5e>
    FieldWidth--;
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <_PrintInt+0x6e>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d016      	beq.n	8005c40 <_PrintInt+0x9c>
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d111      	bne.n	8005c40 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00e      	beq.n	8005c40 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c22:	e006      	b.n	8005c32 <_PrintInt+0x8e>
        FieldWidth--;
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005c2a:	2120      	movs	r1, #32
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7ff fea7 	bl	8005980 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <_PrintInt+0x9c>
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d3f1      	bcc.n	8005c24 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	da07      	bge.n	8005c56 <_PrintInt+0xb2>
    v = -v;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	425b      	negs	r3, r3
 8005c4a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005c4c:	212d      	movs	r1, #45	; 0x2d
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff fe96 	bl	8005980 <_StoreChar>
 8005c54:	e008      	b.n	8005c68 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005c60:	212b      	movs	r1, #43	; 0x2b
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f7ff fe8c 	bl	8005980 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d019      	beq.n	8005ca6 <_PrintInt+0x102>
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d114      	bne.n	8005ca6 <_PrintInt+0x102>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d111      	bne.n	8005ca6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00e      	beq.n	8005ca6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c88:	e006      	b.n	8005c98 <_PrintInt+0xf4>
        FieldWidth--;
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005c90:	2130      	movs	r1, #48	; 0x30
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f7ff fe74 	bl	8005980 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <_PrintInt+0x102>
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d3f1      	bcc.n	8005c8a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	9301      	str	r3, [sp, #4]
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7ff fedf 	bl	8005a78 <_PrintUnsigned>
}
 8005cba:	bf00      	nop
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b098      	sub	sp, #96	; 0x60
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd4:	f04f 0120 	mov.w	r1, #32
 8005cd8:	f381 8811 	msr	BASEPRI, r1
 8005cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8005cde:	48b7      	ldr	r0, [pc, #732]	; (8005fbc <_VPrintTarget+0x2f8>)
 8005ce0:	f7ff fc73 	bl	80055ca <_PreparePacket>
 8005ce4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005ce6:	4bb5      	ldr	r3, [pc, #724]	; (8005fbc <_VPrintTarget+0x2f8>)
 8005ce8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005cea:	2300      	movs	r3, #0
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3301      	adds	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005d0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8183 	beq.w	800601a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005d14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d18:	2b25      	cmp	r3, #37	; 0x25
 8005d1a:	f040 8170 	bne.w	8005ffe <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005d22:	2301      	movs	r3, #1
 8005d24:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005d2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d32:	3b23      	subs	r3, #35	; 0x23
 8005d34:	2b0d      	cmp	r3, #13
 8005d36:	d83f      	bhi.n	8005db8 <_VPrintTarget+0xf4>
 8005d38:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <_VPrintTarget+0x7c>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005da9 	.word	0x08005da9
 8005d44:	08005db9 	.word	0x08005db9
 8005d48:	08005db9 	.word	0x08005db9
 8005d4c:	08005db9 	.word	0x08005db9
 8005d50:	08005db9 	.word	0x08005db9
 8005d54:	08005db9 	.word	0x08005db9
 8005d58:	08005db9 	.word	0x08005db9
 8005d5c:	08005db9 	.word	0x08005db9
 8005d60:	08005d99 	.word	0x08005d99
 8005d64:	08005db9 	.word	0x08005db9
 8005d68:	08005d79 	.word	0x08005d79
 8005d6c:	08005db9 	.word	0x08005db9
 8005d70:	08005db9 	.word	0x08005db9
 8005d74:	08005d89 	.word	0x08005d89
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3301      	adds	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	e01a      	b.n	8005dbe <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8a:	f043 0302 	orr.w	r3, r3, #2
 8005d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3301      	adds	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	e012      	b.n	8005dbe <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d9a:	f043 0304 	orr.w	r3, r3, #4
 8005d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	e00a      	b.n	8005dbe <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005daa:	f043 0308 	orr.w	r3, r3, #8
 8005dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	e002      	b.n	8005dbe <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005db8:	2300      	movs	r3, #0
 8005dba:	653b      	str	r3, [r7, #80]	; 0x50
 8005dbc:	bf00      	nop
        }
      } while (v);
 8005dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1b0      	bne.n	8005d26 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dd4:	2b2f      	cmp	r3, #47	; 0x2f
 8005dd6:	d912      	bls.n	8005dfe <_VPrintTarget+0x13a>
 8005dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ddc:	2b39      	cmp	r3, #57	; 0x39
 8005dde:	d80e      	bhi.n	8005dfe <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3301      	adds	r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	461a      	mov	r2, r3
 8005df2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005df6:	4413      	add	r3, r2
 8005df8:	3b30      	subs	r3, #48	; 0x30
 8005dfa:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005dfc:	e7e4      	b.n	8005dc8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005e0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e10:	d11d      	bne.n	8005e4e <_VPrintTarget+0x18a>
        sFormat++;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3301      	adds	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005e20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e24:	2b2f      	cmp	r3, #47	; 0x2f
 8005e26:	d912      	bls.n	8005e4e <_VPrintTarget+0x18a>
 8005e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e2c:	2b39      	cmp	r3, #57	; 0x39
 8005e2e:	d80e      	bhi.n	8005e4e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3301      	adds	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005e36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	461a      	mov	r2, r3
 8005e42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e46:	4413      	add	r3, r2
 8005e48:	3b30      	subs	r3, #48	; 0x30
 8005e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005e4c:	e7e4      	b.n	8005e18 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005e56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e5a:	2b6c      	cmp	r3, #108	; 0x6c
 8005e5c:	d003      	beq.n	8005e66 <_VPrintTarget+0x1a2>
 8005e5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e62:	2b68      	cmp	r3, #104	; 0x68
 8005e64:	d107      	bne.n	8005e76 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3301      	adds	r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005e74:	e7ef      	b.n	8005e56 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005e76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e7a:	2b25      	cmp	r3, #37	; 0x25
 8005e7c:	f000 80b3 	beq.w	8005fe6 <_VPrintTarget+0x322>
 8005e80:	2b25      	cmp	r3, #37	; 0x25
 8005e82:	f2c0 80b7 	blt.w	8005ff4 <_VPrintTarget+0x330>
 8005e86:	2b78      	cmp	r3, #120	; 0x78
 8005e88:	f300 80b4 	bgt.w	8005ff4 <_VPrintTarget+0x330>
 8005e8c:	2b58      	cmp	r3, #88	; 0x58
 8005e8e:	f2c0 80b1 	blt.w	8005ff4 <_VPrintTarget+0x330>
 8005e92:	3b58      	subs	r3, #88	; 0x58
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	f200 80ad 	bhi.w	8005ff4 <_VPrintTarget+0x330>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <_VPrintTarget+0x1dc>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005f97 	.word	0x08005f97
 8005ea4:	08005ff5 	.word	0x08005ff5
 8005ea8:	08005ff5 	.word	0x08005ff5
 8005eac:	08005ff5 	.word	0x08005ff5
 8005eb0:	08005ff5 	.word	0x08005ff5
 8005eb4:	08005ff5 	.word	0x08005ff5
 8005eb8:	08005ff5 	.word	0x08005ff5
 8005ebc:	08005ff5 	.word	0x08005ff5
 8005ec0:	08005ff5 	.word	0x08005ff5
 8005ec4:	08005ff5 	.word	0x08005ff5
 8005ec8:	08005ff5 	.word	0x08005ff5
 8005ecc:	08005f25 	.word	0x08005f25
 8005ed0:	08005f4b 	.word	0x08005f4b
 8005ed4:	08005ff5 	.word	0x08005ff5
 8005ed8:	08005ff5 	.word	0x08005ff5
 8005edc:	08005ff5 	.word	0x08005ff5
 8005ee0:	08005ff5 	.word	0x08005ff5
 8005ee4:	08005ff5 	.word	0x08005ff5
 8005ee8:	08005ff5 	.word	0x08005ff5
 8005eec:	08005ff5 	.word	0x08005ff5
 8005ef0:	08005ff5 	.word	0x08005ff5
 8005ef4:	08005ff5 	.word	0x08005ff5
 8005ef8:	08005ff5 	.word	0x08005ff5
 8005efc:	08005ff5 	.word	0x08005ff5
 8005f00:	08005fc1 	.word	0x08005fc1
 8005f04:	08005ff5 	.word	0x08005ff5
 8005f08:	08005ff5 	.word	0x08005ff5
 8005f0c:	08005ff5 	.word	0x08005ff5
 8005f10:	08005ff5 	.word	0x08005ff5
 8005f14:	08005f71 	.word	0x08005f71
 8005f18:	08005ff5 	.word	0x08005ff5
 8005f1c:	08005ff5 	.word	0x08005ff5
 8005f20:	08005f97 	.word	0x08005f97
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	1d19      	adds	r1, r3, #4
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6011      	str	r1, [r2, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005f38:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005f3c:	f107 0314 	add.w	r3, r7, #20
 8005f40:	4611      	mov	r1, r2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fd1c 	bl	8005980 <_StoreChar>
        break;
 8005f48:	e055      	b.n	8005ff6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	1d19      	adds	r1, r3, #4
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6011      	str	r1, [r2, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f58:	f107 0014 	add.w	r0, r7, #20
 8005f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f66:	220a      	movs	r2, #10
 8005f68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f6a:	f7ff fe1b 	bl	8005ba4 <_PrintInt>
        break;
 8005f6e:	e042      	b.n	8005ff6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	1d19      	adds	r1, r3, #4
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f80:	f107 0014 	add.w	r0, r7, #20
 8005f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8e:	220a      	movs	r2, #10
 8005f90:	f7ff fd72 	bl	8005a78 <_PrintUnsigned>
        break;
 8005f94:	e02f      	b.n	8005ff6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	1d19      	adds	r1, r3, #4
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6011      	str	r1, [r2, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005fa4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fa6:	f107 0014 	add.w	r0, r7, #20
 8005faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fac:	9301      	str	r3, [sp, #4]
 8005fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb4:	2210      	movs	r2, #16
 8005fb6:	f7ff fd5f 	bl	8005a78 <_PrintUnsigned>
        break;
 8005fba:	e01c      	b.n	8005ff6 <_VPrintTarget+0x332>
 8005fbc:	2000d02c 	.word	0x2000d02c
      case 'p':
        v = va_arg(*pParamList, int);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	1d19      	adds	r1, r3, #4
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6011      	str	r1, [r2, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005fce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fd0:	f107 0014 	add.w	r0, r7, #20
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	2308      	movs	r3, #8
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	2308      	movs	r3, #8
 8005fde:	2210      	movs	r2, #16
 8005fe0:	f7ff fd4a 	bl	8005a78 <_PrintUnsigned>
        break;
 8005fe4:	e007      	b.n	8005ff6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005fe6:	f107 0314 	add.w	r3, r7, #20
 8005fea:	2125      	movs	r1, #37	; 0x25
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff fcc7 	bl	8005980 <_StoreChar>
        break;
 8005ff2:	e000      	b.n	8005ff6 <_VPrintTarget+0x332>
      default:
        break;
 8005ff4:	bf00      	nop
      }
      sFormat++;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	e007      	b.n	800600e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005ffe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006002:	f107 0314 	add.w	r3, r7, #20
 8006006:	4611      	mov	r1, r2
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff fcb9 	bl	8005980 <_StoreChar>
    }
  } while (*sFormat);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	f47f ae72 	bne.w	8005cfc <_VPrintTarget+0x38>
 8006018:	e000      	b.n	800601c <_VPrintTarget+0x358>
      break;
 800601a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	d041      	beq.n	80060a6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	643b      	str	r3, [r7, #64]	; 0x40
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006032:	e00b      	b.n	800604c <_VPrintTarget+0x388>
 8006034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006036:	b2da      	uxtb	r2, r3
 8006038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800603a:	1c59      	adds	r1, r3, #1
 800603c:	6439      	str	r1, [r7, #64]	; 0x40
 800603e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006048:	09db      	lsrs	r3, r3, #7
 800604a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800604c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800604e:	2b7f      	cmp	r3, #127	; 0x7f
 8006050:	d8f0      	bhi.n	8006034 <_VPrintTarget+0x370>
 8006052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	643a      	str	r2, [r7, #64]	; 0x40
 8006058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006060:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	63bb      	str	r3, [r7, #56]	; 0x38
 8006066:	2300      	movs	r3, #0
 8006068:	637b      	str	r3, [r7, #52]	; 0x34
 800606a:	e00b      	b.n	8006084 <_VPrintTarget+0x3c0>
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	b2da      	uxtb	r2, r3
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	1c59      	adds	r1, r3, #1
 8006074:	63b9      	str	r1, [r7, #56]	; 0x38
 8006076:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	09db      	lsrs	r3, r3, #7
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
 8006084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006086:	2b7f      	cmp	r3, #127	; 0x7f
 8006088:	d8f0      	bhi.n	800606c <_VPrintTarget+0x3a8>
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	69b9      	ldr	r1, [r7, #24]
 800609e:	221a      	movs	r2, #26
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff fb85 	bl	80057b0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80060ac:	bf00      	nop
 80060ae:	3758      	adds	r7, #88	; 0x58
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060c2:	2300      	movs	r3, #0
 80060c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060c8:	4917      	ldr	r1, [pc, #92]	; (8006128 <SEGGER_SYSVIEW_Init+0x74>)
 80060ca:	4818      	ldr	r0, [pc, #96]	; (800612c <SEGGER_SYSVIEW_Init+0x78>)
 80060cc:	f7ff f93c 	bl	8005348 <SEGGER_RTT_AllocUpBuffer>
 80060d0:	4603      	mov	r3, r0
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	4b16      	ldr	r3, [pc, #88]	; (8006130 <SEGGER_SYSVIEW_Init+0x7c>)
 80060d6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80060d8:	4b15      	ldr	r3, [pc, #84]	; (8006130 <SEGGER_SYSVIEW_Init+0x7c>)
 80060da:	785a      	ldrb	r2, [r3, #1]
 80060dc:	4b14      	ldr	r3, [pc, #80]	; (8006130 <SEGGER_SYSVIEW_Init+0x7c>)
 80060de:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060e0:	4b13      	ldr	r3, [pc, #76]	; (8006130 <SEGGER_SYSVIEW_Init+0x7c>)
 80060e2:	7e1b      	ldrb	r3, [r3, #24]
 80060e4:	4618      	mov	r0, r3
 80060e6:	2300      	movs	r3, #0
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	2308      	movs	r3, #8
 80060ec:	4a11      	ldr	r2, [pc, #68]	; (8006134 <SEGGER_SYSVIEW_Init+0x80>)
 80060ee:	490f      	ldr	r1, [pc, #60]	; (800612c <SEGGER_SYSVIEW_Init+0x78>)
 80060f0:	f7ff f9ae 	bl	8005450 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80060f4:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <SEGGER_SYSVIEW_Init+0x7c>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80060fa:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <SEGGER_SYSVIEW_Init+0x84>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a0c      	ldr	r2, [pc, #48]	; (8006130 <SEGGER_SYSVIEW_Init+0x7c>)
 8006100:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006102:	4a0b      	ldr	r2, [pc, #44]	; (8006130 <SEGGER_SYSVIEW_Init+0x7c>)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <SEGGER_SYSVIEW_Init+0x7c>)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800610e:	4a08      	ldr	r2, [pc, #32]	; (8006130 <SEGGER_SYSVIEW_Init+0x7c>)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006114:	4a06      	ldr	r2, [pc, #24]	; (8006130 <SEGGER_SYSVIEW_Init+0x7c>)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800611a:	4b05      	ldr	r3, [pc, #20]	; (8006130 <SEGGER_SYSVIEW_Init+0x7c>)
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	2000bff4 	.word	0x2000bff4
 800612c:	08008440 	.word	0x08008440
 8006130:	2000cffc 	.word	0x2000cffc
 8006134:	2000cff4 	.word	0x2000cff4
 8006138:	e0001004 	.word	0xe0001004

0800613c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006144:	4a04      	ldr	r2, [pc, #16]	; (8006158 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6113      	str	r3, [r2, #16]
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	2000cffc 	.word	0x2000cffc

0800615c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006164:	f3ef 8311 	mrs	r3, BASEPRI
 8006168:	f04f 0120 	mov.w	r1, #32
 800616c:	f381 8811 	msr	BASEPRI, r1
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	4808      	ldr	r0, [pc, #32]	; (8006194 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006174:	f7ff fa29 	bl	80055ca <_PreparePacket>
 8006178:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	68b8      	ldr	r0, [r7, #8]
 8006180:	f7ff fb16 	bl	80057b0 <_SendPacket>
  RECORD_END();
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f383 8811 	msr	BASEPRI, r3
}
 800618a:	bf00      	nop
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	2000d02c 	.word	0x2000d02c

08006198 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061a2:	f3ef 8311 	mrs	r3, BASEPRI
 80061a6:	f04f 0120 	mov.w	r1, #32
 80061aa:	f381 8811 	msr	BASEPRI, r1
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	4816      	ldr	r0, [pc, #88]	; (800620c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80061b2:	f7ff fa0a 	bl	80055ca <_PreparePacket>
 80061b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	e00b      	b.n	80061de <SEGGER_SYSVIEW_RecordU32+0x46>
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	1c59      	adds	r1, r3, #1
 80061ce:	61f9      	str	r1, [r7, #28]
 80061d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	09db      	lsrs	r3, r3, #7
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	2b7f      	cmp	r3, #127	; 0x7f
 80061e2:	d8f0      	bhi.n	80061c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	61fa      	str	r2, [r7, #28]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68f9      	ldr	r1, [r7, #12]
 80061f8:	6938      	ldr	r0, [r7, #16]
 80061fa:	f7ff fad9 	bl	80057b0 <_SendPacket>
  RECORD_END();
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f383 8811 	msr	BASEPRI, r3
}
 8006204:	bf00      	nop
 8006206:	3720      	adds	r7, #32
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	2000d02c 	.word	0x2000d02c

08006210 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b08c      	sub	sp, #48	; 0x30
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800621c:	f3ef 8311 	mrs	r3, BASEPRI
 8006220:	f04f 0120 	mov.w	r1, #32
 8006224:	f381 8811 	msr	BASEPRI, r1
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	4825      	ldr	r0, [pc, #148]	; (80062c0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800622c:	f7ff f9cd 	bl	80055ca <_PreparePacket>
 8006230:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	62bb      	str	r3, [r7, #40]	; 0x28
 800623e:	e00b      	b.n	8006258 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	b2da      	uxtb	r2, r3
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	1c59      	adds	r1, r3, #1
 8006248:	62f9      	str	r1, [r7, #44]	; 0x2c
 800624a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	09db      	lsrs	r3, r3, #7
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	2b7f      	cmp	r3, #127	; 0x7f
 800625c:	d8f0      	bhi.n	8006240 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	623b      	str	r3, [r7, #32]
 8006276:	e00b      	b.n	8006290 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	1c59      	adds	r1, r3, #1
 8006280:	6279      	str	r1, [r7, #36]	; 0x24
 8006282:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	09db      	lsrs	r3, r3, #7
 800628e:	623b      	str	r3, [r7, #32]
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	2b7f      	cmp	r3, #127	; 0x7f
 8006294:	d8f0      	bhi.n	8006278 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	627a      	str	r2, [r7, #36]	; 0x24
 800629c:	6a3a      	ldr	r2, [r7, #32]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	6979      	ldr	r1, [r7, #20]
 80062aa:	69b8      	ldr	r0, [r7, #24]
 80062ac:	f7ff fa80 	bl	80057b0 <_SendPacket>
  RECORD_END();
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f383 8811 	msr	BASEPRI, r3
}
 80062b6:	bf00      	nop
 80062b8:	3730      	adds	r7, #48	; 0x30
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	2000d02c 	.word	0x2000d02c

080062c4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08e      	sub	sp, #56	; 0x38
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80062d2:	f3ef 8311 	mrs	r3, BASEPRI
 80062d6:	f04f 0120 	mov.w	r1, #32
 80062da:	f381 8811 	msr	BASEPRI, r1
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	4832      	ldr	r0, [pc, #200]	; (80063ac <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80062e2:	f7ff f972 	bl	80055ca <_PreparePacket>
 80062e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	637b      	str	r3, [r7, #52]	; 0x34
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	633b      	str	r3, [r7, #48]	; 0x30
 80062f4:	e00b      	b.n	800630e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fc:	1c59      	adds	r1, r3, #1
 80062fe:	6379      	str	r1, [r7, #52]	; 0x34
 8006300:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	09db      	lsrs	r3, r3, #7
 800630c:	633b      	str	r3, [r7, #48]	; 0x30
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	2b7f      	cmp	r3, #127	; 0x7f
 8006312:	d8f0      	bhi.n	80062f6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	637a      	str	r2, [r7, #52]	; 0x34
 800631a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
 800632c:	e00b      	b.n	8006346 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	b2da      	uxtb	r2, r3
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	1c59      	adds	r1, r3, #1
 8006336:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	09db      	lsrs	r3, r3, #7
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	2b7f      	cmp	r3, #127	; 0x7f
 800634a:	d8f0      	bhi.n	800632e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	627b      	str	r3, [r7, #36]	; 0x24
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	623b      	str	r3, [r7, #32]
 8006364:	e00b      	b.n	800637e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	1c59      	adds	r1, r3, #1
 800636e:	6279      	str	r1, [r7, #36]	; 0x24
 8006370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	09db      	lsrs	r3, r3, #7
 800637c:	623b      	str	r3, [r7, #32]
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	2b7f      	cmp	r3, #127	; 0x7f
 8006382:	d8f0      	bhi.n	8006366 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	627a      	str	r2, [r7, #36]	; 0x24
 800638a:	6a3a      	ldr	r2, [r7, #32]
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	6979      	ldr	r1, [r7, #20]
 8006398:	69b8      	ldr	r0, [r7, #24]
 800639a:	f7ff fa09 	bl	80057b0 <_SendPacket>
  RECORD_END();
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f383 8811 	msr	BASEPRI, r3
}
 80063a4:	bf00      	nop
 80063a6:	3738      	adds	r7, #56	; 0x38
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	2000d02c 	.word	0x2000d02c

080063b0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b090      	sub	sp, #64	; 0x40
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063be:	f3ef 8311 	mrs	r3, BASEPRI
 80063c2:	f04f 0120 	mov.w	r1, #32
 80063c6:	f381 8811 	msr	BASEPRI, r1
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	4840      	ldr	r0, [pc, #256]	; (80064d0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80063ce:	f7ff f8fc 	bl	80055ca <_PreparePacket>
 80063d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	63bb      	str	r3, [r7, #56]	; 0x38
 80063e0:	e00b      	b.n	80063fa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e8:	1c59      	adds	r1, r3, #1
 80063ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80063ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	09db      	lsrs	r3, r3, #7
 80063f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	2b7f      	cmp	r3, #127	; 0x7f
 80063fe:	d8f0      	bhi.n	80063e2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	637b      	str	r3, [r7, #52]	; 0x34
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	633b      	str	r3, [r7, #48]	; 0x30
 8006418:	e00b      	b.n	8006432 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	b2da      	uxtb	r2, r3
 800641e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006420:	1c59      	adds	r1, r3, #1
 8006422:	6379      	str	r1, [r7, #52]	; 0x34
 8006424:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	09db      	lsrs	r3, r3, #7
 8006430:	633b      	str	r3, [r7, #48]	; 0x30
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	2b7f      	cmp	r3, #127	; 0x7f
 8006436:	d8f0      	bhi.n	800641a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	637a      	str	r2, [r7, #52]	; 0x34
 800643e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006450:	e00b      	b.n	800646a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	b2da      	uxtb	r2, r3
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	1c59      	adds	r1, r3, #1
 800645a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800645c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	09db      	lsrs	r3, r3, #7
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	2b7f      	cmp	r3, #127	; 0x7f
 800646e:	d8f0      	bhi.n	8006452 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
 8006484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006486:	623b      	str	r3, [r7, #32]
 8006488:	e00b      	b.n	80064a2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	1c59      	adds	r1, r3, #1
 8006492:	6279      	str	r1, [r7, #36]	; 0x24
 8006494:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	09db      	lsrs	r3, r3, #7
 80064a0:	623b      	str	r3, [r7, #32]
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	2b7f      	cmp	r3, #127	; 0x7f
 80064a6:	d8f0      	bhi.n	800648a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	627a      	str	r2, [r7, #36]	; 0x24
 80064ae:	6a3a      	ldr	r2, [r7, #32]
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	6979      	ldr	r1, [r7, #20]
 80064bc:	69b8      	ldr	r0, [r7, #24]
 80064be:	f7ff f977 	bl	80057b0 <_SendPacket>
  RECORD_END();
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	f383 8811 	msr	BASEPRI, r3
}
 80064c8:	bf00      	nop
 80064ca:	3740      	adds	r7, #64	; 0x40
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	2000d02c 	.word	0x2000d02c

080064d4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08c      	sub	sp, #48	; 0x30
 80064d8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80064da:	4b59      	ldr	r3, [pc, #356]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 80064dc:	2201      	movs	r2, #1
 80064de:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80064e0:	f3ef 8311 	mrs	r3, BASEPRI
 80064e4:	f04f 0120 	mov.w	r1, #32
 80064e8:	f381 8811 	msr	BASEPRI, r1
 80064ec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80064ee:	4b54      	ldr	r3, [pc, #336]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	220a      	movs	r2, #10
 80064f4:	4953      	ldr	r1, [pc, #332]	; (8006644 <SEGGER_SYSVIEW_Start+0x170>)
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7f9 fea2 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006502:	f7fe fcf5 	bl	8004ef0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006506:	200a      	movs	r0, #10
 8006508:	f7ff fe28 	bl	800615c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800650c:	f3ef 8311 	mrs	r3, BASEPRI
 8006510:	f04f 0120 	mov.w	r1, #32
 8006514:	f381 8811 	msr	BASEPRI, r1
 8006518:	60bb      	str	r3, [r7, #8]
 800651a:	484b      	ldr	r0, [pc, #300]	; (8006648 <SEGGER_SYSVIEW_Start+0x174>)
 800651c:	f7ff f855 	bl	80055ca <_PreparePacket>
 8006520:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800652a:	4b45      	ldr	r3, [pc, #276]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006530:	e00b      	b.n	800654a <SEGGER_SYSVIEW_Start+0x76>
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	b2da      	uxtb	r2, r3
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	1c59      	adds	r1, r3, #1
 800653a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800653c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	09db      	lsrs	r3, r3, #7
 8006548:	62bb      	str	r3, [r7, #40]	; 0x28
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	2b7f      	cmp	r3, #127	; 0x7f
 800654e:	d8f0      	bhi.n	8006532 <SEGGER_SYSVIEW_Start+0x5e>
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
 8006564:	4b36      	ldr	r3, [pc, #216]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	623b      	str	r3, [r7, #32]
 800656a:	e00b      	b.n	8006584 <SEGGER_SYSVIEW_Start+0xb0>
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	b2da      	uxtb	r2, r3
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	1c59      	adds	r1, r3, #1
 8006574:	6279      	str	r1, [r7, #36]	; 0x24
 8006576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	09db      	lsrs	r3, r3, #7
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	2b7f      	cmp	r3, #127	; 0x7f
 8006588:	d8f0      	bhi.n	800656c <SEGGER_SYSVIEW_Start+0x98>
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	627a      	str	r2, [r7, #36]	; 0x24
 8006590:	6a3a      	ldr	r2, [r7, #32]
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	4b28      	ldr	r3, [pc, #160]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	e00b      	b.n	80065be <SEGGER_SYSVIEW_Start+0xea>
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	1c59      	adds	r1, r3, #1
 80065ae:	61f9      	str	r1, [r7, #28]
 80065b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	09db      	lsrs	r3, r3, #7
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b7f      	cmp	r3, #127	; 0x7f
 80065c2:	d8f0      	bhi.n	80065a6 <SEGGER_SYSVIEW_Start+0xd2>
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	61fa      	str	r2, [r7, #28]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	2300      	movs	r3, #0
 80065da:	613b      	str	r3, [r7, #16]
 80065dc:	e00b      	b.n	80065f6 <SEGGER_SYSVIEW_Start+0x122>
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	1c59      	adds	r1, r3, #1
 80065e6:	6179      	str	r1, [r7, #20]
 80065e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	09db      	lsrs	r3, r3, #7
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2b7f      	cmp	r3, #127	; 0x7f
 80065fa:	d8f0      	bhi.n	80065de <SEGGER_SYSVIEW_Start+0x10a>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	617a      	str	r2, [r7, #20]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800660c:	2218      	movs	r2, #24
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff f8cd 	bl	80057b0 <_SendPacket>
      RECORD_END();
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800661c:	4b08      	ldr	r3, [pc, #32]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006624:	4b06      	ldr	r3, [pc, #24]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800662a:	f000 f9eb 	bl	8006a04 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800662e:	f000 f9b1 	bl	8006994 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006632:	f000 fc83 	bl	8006f3c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006636:	bf00      	nop
 8006638:	3730      	adds	r7, #48	; 0x30
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	2000cffc 	.word	0x2000cffc
 8006644:	08008468 	.word	0x08008468
 8006648:	2000d02c 	.word	0x2000d02c

0800664c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006652:	f3ef 8311 	mrs	r3, BASEPRI
 8006656:	f04f 0120 	mov.w	r1, #32
 800665a:	f381 8811 	msr	BASEPRI, r1
 800665e:	607b      	str	r3, [r7, #4]
 8006660:	480b      	ldr	r0, [pc, #44]	; (8006690 <SEGGER_SYSVIEW_Stop+0x44>)
 8006662:	f7fe ffb2 	bl	80055ca <_PreparePacket>
 8006666:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <SEGGER_SYSVIEW_Stop+0x48>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006670:	220b      	movs	r2, #11
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6838      	ldr	r0, [r7, #0]
 8006676:	f7ff f89b 	bl	80057b0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800667a:	4b06      	ldr	r3, [pc, #24]	; (8006694 <SEGGER_SYSVIEW_Stop+0x48>)
 800667c:	2200      	movs	r2, #0
 800667e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f383 8811 	msr	BASEPRI, r3
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	2000d02c 	.word	0x2000d02c
 8006694:	2000cffc 	.word	0x2000cffc

08006698 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006698:	b580      	push	{r7, lr}
 800669a:	b08c      	sub	sp, #48	; 0x30
 800669c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800669e:	f3ef 8311 	mrs	r3, BASEPRI
 80066a2:	f04f 0120 	mov.w	r1, #32
 80066a6:	f381 8811 	msr	BASEPRI, r1
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	4845      	ldr	r0, [pc, #276]	; (80067c4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80066ae:	f7fe ff8c 	bl	80055ca <_PreparePacket>
 80066b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066bc:	4b42      	ldr	r3, [pc, #264]	; (80067c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c2:	e00b      	b.n	80066dc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	1c59      	adds	r1, r3, #1
 80066cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	09db      	lsrs	r3, r3, #7
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	2b7f      	cmp	r3, #127	; 0x7f
 80066e0:	d8f0      	bhi.n	80066c4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
 80066f6:	4b34      	ldr	r3, [pc, #208]	; (80067c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	623b      	str	r3, [r7, #32]
 80066fc:	e00b      	b.n	8006716 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	1c59      	adds	r1, r3, #1
 8006706:	6279      	str	r1, [r7, #36]	; 0x24
 8006708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	09db      	lsrs	r3, r3, #7
 8006714:	623b      	str	r3, [r7, #32]
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	2b7f      	cmp	r3, #127	; 0x7f
 800671a:	d8f0      	bhi.n	80066fe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	627a      	str	r2, [r7, #36]	; 0x24
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	701a      	strb	r2, [r3, #0]
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	61fb      	str	r3, [r7, #28]
 8006730:	4b25      	ldr	r3, [pc, #148]	; (80067c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	e00b      	b.n	8006750 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	1c59      	adds	r1, r3, #1
 8006740:	61f9      	str	r1, [r7, #28]
 8006742:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	09db      	lsrs	r3, r3, #7
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2b7f      	cmp	r3, #127	; 0x7f
 8006754:	d8f0      	bhi.n	8006738 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	61fa      	str	r2, [r7, #28]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	e00b      	b.n	8006788 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	1c59      	adds	r1, r3, #1
 8006778:	6179      	str	r1, [r7, #20]
 800677a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	09db      	lsrs	r3, r3, #7
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b7f      	cmp	r3, #127	; 0x7f
 800678c:	d8f0      	bhi.n	8006770 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	617a      	str	r2, [r7, #20]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800679e:	2218      	movs	r2, #24
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	68b8      	ldr	r0, [r7, #8]
 80067a4:	f7ff f804 	bl	80057b0 <_SendPacket>
  RECORD_END();
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067ae:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80067b6:	4b04      	ldr	r3, [pc, #16]	; (80067c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	4798      	blx	r3
  }
}
 80067bc:	bf00      	nop
 80067be:	3730      	adds	r7, #48	; 0x30
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	2000d02c 	.word	0x2000d02c
 80067c8:	2000cffc 	.word	0x2000cffc

080067cc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b092      	sub	sp, #72	; 0x48
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80067d4:	f3ef 8311 	mrs	r3, BASEPRI
 80067d8:	f04f 0120 	mov.w	r1, #32
 80067dc:	f381 8811 	msr	BASEPRI, r1
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	486a      	ldr	r0, [pc, #424]	; (800698c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80067e4:	f7fe fef1 	bl	80055ca <_PreparePacket>
 80067e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	647b      	str	r3, [r7, #68]	; 0x44
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	4b66      	ldr	r3, [pc, #408]	; (8006990 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	643b      	str	r3, [r7, #64]	; 0x40
 80067fe:	e00b      	b.n	8006818 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006802:	b2da      	uxtb	r2, r3
 8006804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006806:	1c59      	adds	r1, r3, #1
 8006808:	6479      	str	r1, [r7, #68]	; 0x44
 800680a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006814:	09db      	lsrs	r3, r3, #7
 8006816:	643b      	str	r3, [r7, #64]	; 0x40
 8006818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681a:	2b7f      	cmp	r3, #127	; 0x7f
 800681c:	d8f0      	bhi.n	8006800 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800681e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	647a      	str	r2, [r7, #68]	; 0x44
 8006824:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800682c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	63bb      	str	r3, [r7, #56]	; 0x38
 8006838:	e00b      	b.n	8006852 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	b2da      	uxtb	r2, r3
 800683e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006840:	1c59      	adds	r1, r3, #1
 8006842:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	09db      	lsrs	r3, r3, #7
 8006850:	63bb      	str	r3, [r7, #56]	; 0x38
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	2b7f      	cmp	r3, #127	; 0x7f
 8006856:	d8f0      	bhi.n	800683a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800685e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	4619      	mov	r1, r3
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7fe fe5d 	bl	8005530 <_EncodeStr>
 8006876:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006878:	2209      	movs	r2, #9
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	6938      	ldr	r0, [r7, #16]
 800687e:	f7fe ff97 	bl	80057b0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	637b      	str	r3, [r7, #52]	; 0x34
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	4b40      	ldr	r3, [pc, #256]	; (8006990 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	633b      	str	r3, [r7, #48]	; 0x30
 8006896:	e00b      	b.n	80068b0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	b2da      	uxtb	r2, r3
 800689c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689e:	1c59      	adds	r1, r3, #1
 80068a0:	6379      	str	r1, [r7, #52]	; 0x34
 80068a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	09db      	lsrs	r3, r3, #7
 80068ae:	633b      	str	r3, [r7, #48]	; 0x30
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	2b7f      	cmp	r3, #127	; 0x7f
 80068b4:	d8f0      	bhi.n	8006898 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	637a      	str	r2, [r7, #52]	; 0x34
 80068bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d0:	e00b      	b.n	80068ea <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	1c59      	adds	r1, r3, #1
 80068da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	09db      	lsrs	r3, r3, #7
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	2b7f      	cmp	r3, #127	; 0x7f
 80068ee:	d8f0      	bhi.n	80068d2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80068f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	623b      	str	r3, [r7, #32]
 800690a:	e00b      	b.n	8006924 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	b2da      	uxtb	r2, r3
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	6279      	str	r1, [r7, #36]	; 0x24
 8006916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	09db      	lsrs	r3, r3, #7
 8006922:	623b      	str	r3, [r7, #32]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	2b7f      	cmp	r3, #127	; 0x7f
 8006928:	d8f0      	bhi.n	800690c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	627a      	str	r2, [r7, #36]	; 0x24
 8006930:	6a3a      	ldr	r2, [r7, #32]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	61fb      	str	r3, [r7, #28]
 800693e:	2300      	movs	r3, #0
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	e00b      	b.n	800695c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	b2da      	uxtb	r2, r3
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	1c59      	adds	r1, r3, #1
 800694c:	61f9      	str	r1, [r7, #28]
 800694e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	09db      	lsrs	r3, r3, #7
 800695a:	61bb      	str	r3, [r7, #24]
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	2b7f      	cmp	r3, #127	; 0x7f
 8006960:	d8f0      	bhi.n	8006944 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	61fa      	str	r2, [r7, #28]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006972:	2215      	movs	r2, #21
 8006974:	68f9      	ldr	r1, [r7, #12]
 8006976:	6938      	ldr	r0, [r7, #16]
 8006978:	f7fe ff1a 	bl	80057b0 <_SendPacket>
  RECORD_END();
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f383 8811 	msr	BASEPRI, r3
}
 8006982:	bf00      	nop
 8006984:	3748      	adds	r7, #72	; 0x48
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	2000d02c 	.word	0x2000d02c
 8006990:	2000cffc 	.word	0x2000cffc

08006994 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006998:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80069a0:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80069aa:	4b03      	ldr	r3, [pc, #12]	; (80069b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	4798      	blx	r3
  }
}
 80069b2:	bf00      	nop
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	2000cffc 	.word	0x2000cffc

080069bc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069c4:	f3ef 8311 	mrs	r3, BASEPRI
 80069c8:	f04f 0120 	mov.w	r1, #32
 80069cc:	f381 8811 	msr	BASEPRI, r1
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	480b      	ldr	r0, [pc, #44]	; (8006a00 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80069d4:	f7fe fdf9 	bl	80055ca <_PreparePacket>
 80069d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069da:	2280      	movs	r2, #128	; 0x80
 80069dc:	6879      	ldr	r1, [r7, #4]
 80069de:	6938      	ldr	r0, [r7, #16]
 80069e0:	f7fe fda6 	bl	8005530 <_EncodeStr>
 80069e4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80069e6:	220e      	movs	r2, #14
 80069e8:	68f9      	ldr	r1, [r7, #12]
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f7fe fee0 	bl	80057b0 <_SendPacket>
  RECORD_END();
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f383 8811 	msr	BASEPRI, r3
}
 80069f6:	bf00      	nop
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	2000d02c 	.word	0x2000d02c

08006a04 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006a04:	b590      	push	{r4, r7, lr}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006a0a:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01a      	beq.n	8006a48 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006a12:	4b13      	ldr	r3, [pc, #76]	; (8006a60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d015      	beq.n	8006a48 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006a1c:	4b10      	ldr	r3, [pc, #64]	; (8006a60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4798      	blx	r3
 8006a24:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a28:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006a2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	000a      	movs	r2, r1
 8006a38:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4621      	mov	r1, r4
 8006a40:	200d      	movs	r0, #13
 8006a42:	f7ff fbe5 	bl	8006210 <SEGGER_SYSVIEW_RecordU32x2>
 8006a46:	e006      	b.n	8006a56 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006a48:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	200c      	movs	r0, #12
 8006a50:	f7ff fba2 	bl	8006198 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd90      	pop	{r4, r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	2000cffc 	.word	0x2000cffc
 8006a64:	e0001004 	.word	0xe0001004

08006a68 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a72:	f04f 0120 	mov.w	r1, #32
 8006a76:	f381 8811 	msr	BASEPRI, r1
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	4819      	ldr	r0, [pc, #100]	; (8006ae4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006a7e:	f7fe fda4 	bl	80055ca <_PreparePacket>
 8006a82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006a88:	4b17      	ldr	r3, [pc, #92]	; (8006ae8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a90:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	613b      	str	r3, [r7, #16]
 8006a9a:	e00b      	b.n	8006ab4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	1c59      	adds	r1, r3, #1
 8006aa4:	6179      	str	r1, [r7, #20]
 8006aa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	09db      	lsrs	r3, r3, #7
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ab8:	d8f0      	bhi.n	8006a9c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	617a      	str	r2, [r7, #20]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006aca:	2202      	movs	r2, #2
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	68b8      	ldr	r0, [r7, #8]
 8006ad0:	f7fe fe6e 	bl	80057b0 <_SendPacket>
  RECORD_END();
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f383 8811 	msr	BASEPRI, r3
}
 8006ada:	bf00      	nop
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	2000d02c 	.word	0x2000d02c
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006af2:	f3ef 8311 	mrs	r3, BASEPRI
 8006af6:	f04f 0120 	mov.w	r1, #32
 8006afa:	f381 8811 	msr	BASEPRI, r1
 8006afe:	607b      	str	r3, [r7, #4]
 8006b00:	4807      	ldr	r0, [pc, #28]	; (8006b20 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006b02:	f7fe fd62 	bl	80055ca <_PreparePacket>
 8006b06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006b08:	2203      	movs	r2, #3
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6838      	ldr	r0, [r7, #0]
 8006b0e:	f7fe fe4f 	bl	80057b0 <_SendPacket>
  RECORD_END();
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f383 8811 	msr	BASEPRI, r3
}
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	2000d02c 	.word	0x2000d02c

08006b24 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b2e:	f04f 0120 	mov.w	r1, #32
 8006b32:	f381 8811 	msr	BASEPRI, r1
 8006b36:	607b      	str	r3, [r7, #4]
 8006b38:	4807      	ldr	r0, [pc, #28]	; (8006b58 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006b3a:	f7fe fd46 	bl	80055ca <_PreparePacket>
 8006b3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006b40:	2212      	movs	r2, #18
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6838      	ldr	r0, [r7, #0]
 8006b46:	f7fe fe33 	bl	80057b0 <_SendPacket>
  RECORD_END();
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f383 8811 	msr	BASEPRI, r3
}
 8006b50:	bf00      	nop
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	2000d02c 	.word	0x2000d02c

08006b5c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b62:	f3ef 8311 	mrs	r3, BASEPRI
 8006b66:	f04f 0120 	mov.w	r1, #32
 8006b6a:	f381 8811 	msr	BASEPRI, r1
 8006b6e:	607b      	str	r3, [r7, #4]
 8006b70:	4807      	ldr	r0, [pc, #28]	; (8006b90 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006b72:	f7fe fd2a 	bl	80055ca <_PreparePacket>
 8006b76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006b78:	2211      	movs	r2, #17
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6838      	ldr	r0, [r7, #0]
 8006b7e:	f7fe fe17 	bl	80057b0 <_SendPacket>
  RECORD_END();
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f383 8811 	msr	BASEPRI, r3
}
 8006b88:	bf00      	nop
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	2000d02c 	.word	0x2000d02c

08006b94 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba0:	f04f 0120 	mov.w	r1, #32
 8006ba4:	f381 8811 	msr	BASEPRI, r1
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	4819      	ldr	r0, [pc, #100]	; (8006c10 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006bac:	f7fe fd0d 	bl	80055ca <_PreparePacket>
 8006bb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bb6:	4b17      	ldr	r3, [pc, #92]	; (8006c14 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	e00b      	b.n	8006be2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	1c59      	adds	r1, r3, #1
 8006bd2:	61f9      	str	r1, [r7, #28]
 8006bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	09db      	lsrs	r3, r3, #7
 8006be0:	61bb      	str	r3, [r7, #24]
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	2b7f      	cmp	r3, #127	; 0x7f
 8006be6:	d8f0      	bhi.n	8006bca <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	61fa      	str	r2, [r7, #28]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	6938      	ldr	r0, [r7, #16]
 8006bfe:	f7fe fdd7 	bl	80057b0 <_SendPacket>
  RECORD_END();
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f383 8811 	msr	BASEPRI, r3
}
 8006c08:	bf00      	nop
 8006c0a:	3720      	adds	r7, #32
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	2000d02c 	.word	0x2000d02c
 8006c14:	2000cffc 	.word	0x2000cffc

08006c18 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c20:	f3ef 8311 	mrs	r3, BASEPRI
 8006c24:	f04f 0120 	mov.w	r1, #32
 8006c28:	f381 8811 	msr	BASEPRI, r1
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	4819      	ldr	r0, [pc, #100]	; (8006c94 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c30:	f7fe fccb 	bl	80055ca <_PreparePacket>
 8006c34:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c3a:	4b17      	ldr	r3, [pc, #92]	; (8006c98 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	e00b      	b.n	8006c66 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	1c59      	adds	r1, r3, #1
 8006c56:	61f9      	str	r1, [r7, #28]
 8006c58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	09db      	lsrs	r3, r3, #7
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	2b7f      	cmp	r3, #127	; 0x7f
 8006c6a:	d8f0      	bhi.n	8006c4e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	61fa      	str	r2, [r7, #28]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	6938      	ldr	r0, [r7, #16]
 8006c82:	f7fe fd95 	bl	80057b0 <_SendPacket>
  RECORD_END();
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f383 8811 	msr	BASEPRI, r3
}
 8006c8c:	bf00      	nop
 8006c8e:	3720      	adds	r7, #32
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	2000d02c 	.word	0x2000d02c
 8006c98:	2000cffc 	.word	0x2000cffc

08006c9c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ca8:	f04f 0120 	mov.w	r1, #32
 8006cac:	f381 8811 	msr	BASEPRI, r1
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	4819      	ldr	r0, [pc, #100]	; (8006d18 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006cb4:	f7fe fc89 	bl	80055ca <_PreparePacket>
 8006cb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cbe:	4b17      	ldr	r3, [pc, #92]	; (8006d1c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	61fb      	str	r3, [r7, #28]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	e00b      	b.n	8006cea <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	1c59      	adds	r1, r3, #1
 8006cda:	61f9      	str	r1, [r7, #28]
 8006cdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	09db      	lsrs	r3, r3, #7
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	2b7f      	cmp	r3, #127	; 0x7f
 8006cee:	d8f0      	bhi.n	8006cd2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	61fa      	str	r2, [r7, #28]
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d00:	2206      	movs	r2, #6
 8006d02:	68f9      	ldr	r1, [r7, #12]
 8006d04:	6938      	ldr	r0, [r7, #16]
 8006d06:	f7fe fd53 	bl	80057b0 <_SendPacket>
  RECORD_END();
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f383 8811 	msr	BASEPRI, r3
}
 8006d10:	bf00      	nop
 8006d12:	3720      	adds	r7, #32
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	2000d02c 	.word	0x2000d02c
 8006d1c:	2000cffc 	.word	0x2000cffc

08006d20 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	; 0x28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d2e:	f04f 0120 	mov.w	r1, #32
 8006d32:	f381 8811 	msr	BASEPRI, r1
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	4827      	ldr	r0, [pc, #156]	; (8006dd8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006d3a:	f7fe fc46 	bl	80055ca <_PreparePacket>
 8006d3e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d44:	4b25      	ldr	r3, [pc, #148]	; (8006ddc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	623b      	str	r3, [r7, #32]
 8006d56:	e00b      	b.n	8006d70 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	1c59      	adds	r1, r3, #1
 8006d60:	6279      	str	r1, [r7, #36]	; 0x24
 8006d62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	09db      	lsrs	r3, r3, #7
 8006d6e:	623b      	str	r3, [r7, #32]
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	2b7f      	cmp	r3, #127	; 0x7f
 8006d74:	d8f0      	bhi.n	8006d58 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	627a      	str	r2, [r7, #36]	; 0x24
 8006d7c:	6a3a      	ldr	r2, [r7, #32]
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	e00b      	b.n	8006da8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	1c59      	adds	r1, r3, #1
 8006d98:	61f9      	str	r1, [r7, #28]
 8006d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	701a      	strb	r2, [r3, #0]
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	09db      	lsrs	r3, r3, #7
 8006da6:	61bb      	str	r3, [r7, #24]
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2b7f      	cmp	r3, #127	; 0x7f
 8006dac:	d8f0      	bhi.n	8006d90 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	61fa      	str	r2, [r7, #28]
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006dbe:	2207      	movs	r2, #7
 8006dc0:	68f9      	ldr	r1, [r7, #12]
 8006dc2:	6938      	ldr	r0, [r7, #16]
 8006dc4:	f7fe fcf4 	bl	80057b0 <_SendPacket>
  RECORD_END();
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f383 8811 	msr	BASEPRI, r3
}
 8006dce:	bf00      	nop
 8006dd0:	3728      	adds	r7, #40	; 0x28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	2000d02c 	.word	0x2000d02c
 8006ddc:	2000cffc 	.word	0x2000cffc

08006de0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006de8:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	1ad3      	subs	r3, r2, r3
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	2000cffc 	.word	0x2000cffc

08006e00 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08c      	sub	sp, #48	; 0x30
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006e0a:	4b3b      	ldr	r3, [pc, #236]	; (8006ef8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d06d      	beq.n	8006eee <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006e12:	4b39      	ldr	r3, [pc, #228]	; (8006ef8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006e18:	2300      	movs	r3, #0
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e1c:	e008      	b.n	8006e30 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d007      	beq.n	8006e3a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d3f2      	bcc.n	8006e1e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006e38:	e000      	b.n	8006e3c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006e3a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d055      	beq.n	8006eee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e42:	f3ef 8311 	mrs	r3, BASEPRI
 8006e46:	f04f 0120 	mov.w	r1, #32
 8006e4a:	f381 8811 	msr	BASEPRI, r1
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	482a      	ldr	r0, [pc, #168]	; (8006efc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006e52:	f7fe fbba 	bl	80055ca <_PreparePacket>
 8006e56:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	623b      	str	r3, [r7, #32]
 8006e64:	e00b      	b.n	8006e7e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	1c59      	adds	r1, r3, #1
 8006e6e:	6279      	str	r1, [r7, #36]	; 0x24
 8006e70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	09db      	lsrs	r3, r3, #7
 8006e7c:	623b      	str	r3, [r7, #32]
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	2b7f      	cmp	r3, #127	; 0x7f
 8006e82:	d8f0      	bhi.n	8006e66 <SEGGER_SYSVIEW_SendModule+0x66>
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	627a      	str	r2, [r7, #36]	; 0x24
 8006e8a:	6a3a      	ldr	r2, [r7, #32]
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	e00b      	b.n	8006eb8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	1c59      	adds	r1, r3, #1
 8006ea8:	61f9      	str	r1, [r7, #28]
 8006eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	09db      	lsrs	r3, r3, #7
 8006eb6:	61bb      	str	r3, [r7, #24]
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2b7f      	cmp	r3, #127	; 0x7f
 8006ebc:	d8f0      	bhi.n	8006ea0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	61fa      	str	r2, [r7, #28]
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2280      	movs	r2, #128	; 0x80
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7fe fb2a 	bl	8005530 <_EncodeStr>
 8006edc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006ede:	2216      	movs	r2, #22
 8006ee0:	68f9      	ldr	r1, [r7, #12]
 8006ee2:	6938      	ldr	r0, [r7, #16]
 8006ee4:	f7fe fc64 	bl	80057b0 <_SendPacket>
      RECORD_END();
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006eee:	bf00      	nop
 8006ef0:	3730      	adds	r7, #48	; 0x30
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	2000d024 	.word	0x2000d024
 8006efc:	2000d02c 	.word	0x2000d02c

08006f00 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006f06:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00f      	beq.n	8006f2e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1f2      	bne.n	8006f14 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	2000d024 	.word	0x2000d024

08006f3c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006f42:	f3ef 8311 	mrs	r3, BASEPRI
 8006f46:	f04f 0120 	mov.w	r1, #32
 8006f4a:	f381 8811 	msr	BASEPRI, r1
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	4817      	ldr	r0, [pc, #92]	; (8006fb0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006f52:	f7fe fb3a 	bl	80055ca <_PreparePacket>
 8006f56:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	4b14      	ldr	r3, [pc, #80]	; (8006fb4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	613b      	str	r3, [r7, #16]
 8006f66:	e00b      	b.n	8006f80 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	1c59      	adds	r1, r3, #1
 8006f70:	6179      	str	r1, [r7, #20]
 8006f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	09db      	lsrs	r3, r3, #7
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2b7f      	cmp	r3, #127	; 0x7f
 8006f84:	d8f0      	bhi.n	8006f68 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	617a      	str	r2, [r7, #20]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006f96:	221b      	movs	r2, #27
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	68b8      	ldr	r0, [r7, #8]
 8006f9c:	f7fe fc08 	bl	80057b0 <_SendPacket>
  RECORD_END();
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f383 8811 	msr	BASEPRI, r3
}
 8006fa6:	bf00      	nop
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	2000d02c 	.word	0x2000d02c
 8006fb4:	2000d028 	.word	0x2000d028

08006fb8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006fb8:	b40f      	push	{r0, r1, r2, r3}
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006fc0:	f107 0314 	add.w	r3, r7, #20
 8006fc4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006fc6:	1d3b      	adds	r3, r7, #4
 8006fc8:	461a      	mov	r2, r3
 8006fca:	2100      	movs	r1, #0
 8006fcc:	6938      	ldr	r0, [r7, #16]
 8006fce:	f7fe fe79 	bl	8005cc4 <_VPrintTarget>
  va_end(ParamList);
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fdc:	b004      	add	sp, #16
 8006fde:	4770      	bx	lr

08006fe0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08a      	sub	sp, #40	; 0x28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fe8:	f3ef 8311 	mrs	r3, BASEPRI
 8006fec:	f04f 0120 	mov.w	r1, #32
 8006ff0:	f381 8811 	msr	BASEPRI, r1
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	4827      	ldr	r0, [pc, #156]	; (8007094 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006ff8:	f7fe fae7 	bl	80055ca <_PreparePacket>
 8006ffc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ffe:	2280      	movs	r2, #128	; 0x80
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	6938      	ldr	r0, [r7, #16]
 8007004:	f7fe fa94 	bl	8005530 <_EncodeStr>
 8007008:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
 800700e:	2301      	movs	r3, #1
 8007010:	623b      	str	r3, [r7, #32]
 8007012:	e00b      	b.n	800702c <SEGGER_SYSVIEW_Warn+0x4c>
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	b2da      	uxtb	r2, r3
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	1c59      	adds	r1, r3, #1
 800701c:	6279      	str	r1, [r7, #36]	; 0x24
 800701e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007022:	b2d2      	uxtb	r2, r2
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	09db      	lsrs	r3, r3, #7
 800702a:	623b      	str	r3, [r7, #32]
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	2b7f      	cmp	r3, #127	; 0x7f
 8007030:	d8f0      	bhi.n	8007014 <SEGGER_SYSVIEW_Warn+0x34>
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	627a      	str	r2, [r7, #36]	; 0x24
 8007038:	6a3a      	ldr	r2, [r7, #32]
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	61fb      	str	r3, [r7, #28]
 8007046:	2300      	movs	r3, #0
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	e00b      	b.n	8007064 <SEGGER_SYSVIEW_Warn+0x84>
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	b2da      	uxtb	r2, r3
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	1c59      	adds	r1, r3, #1
 8007054:	61f9      	str	r1, [r7, #28]
 8007056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	09db      	lsrs	r3, r3, #7
 8007062:	61bb      	str	r3, [r7, #24]
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	2b7f      	cmp	r3, #127	; 0x7f
 8007068:	d8f0      	bhi.n	800704c <SEGGER_SYSVIEW_Warn+0x6c>
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	61fa      	str	r2, [r7, #28]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800707a:	221a      	movs	r2, #26
 800707c:	68f9      	ldr	r1, [r7, #12]
 800707e:	6938      	ldr	r0, [r7, #16]
 8007080:	f7fe fb96 	bl	80057b0 <_SendPacket>
  RECORD_END();
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f383 8811 	msr	BASEPRI, r3
}
 800708a:	bf00      	nop
 800708c:	3728      	adds	r7, #40	; 0x28
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	2000d02c 	.word	0x2000d02c

08007098 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	2000      	movs	r0, #0
 80070ac:	f7fe f926 	bl	80052fc <SEGGER_RTT_Write>
  return len;
 80070b0:	683b      	ldr	r3, [r7, #0]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <__errno>:
 80070bc:	4b01      	ldr	r3, [pc, #4]	; (80070c4 <__errno+0x8>)
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000014 	.word	0x20000014

080070c8 <__libc_init_array>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	4d0d      	ldr	r5, [pc, #52]	; (8007100 <__libc_init_array+0x38>)
 80070cc:	4c0d      	ldr	r4, [pc, #52]	; (8007104 <__libc_init_array+0x3c>)
 80070ce:	1b64      	subs	r4, r4, r5
 80070d0:	10a4      	asrs	r4, r4, #2
 80070d2:	2600      	movs	r6, #0
 80070d4:	42a6      	cmp	r6, r4
 80070d6:	d109      	bne.n	80070ec <__libc_init_array+0x24>
 80070d8:	4d0b      	ldr	r5, [pc, #44]	; (8007108 <__libc_init_array+0x40>)
 80070da:	4c0c      	ldr	r4, [pc, #48]	; (800710c <__libc_init_array+0x44>)
 80070dc:	f001 f8a0 	bl	8008220 <_init>
 80070e0:	1b64      	subs	r4, r4, r5
 80070e2:	10a4      	asrs	r4, r4, #2
 80070e4:	2600      	movs	r6, #0
 80070e6:	42a6      	cmp	r6, r4
 80070e8:	d105      	bne.n	80070f6 <__libc_init_array+0x2e>
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
 80070ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f0:	4798      	blx	r3
 80070f2:	3601      	adds	r6, #1
 80070f4:	e7ee      	b.n	80070d4 <__libc_init_array+0xc>
 80070f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070fa:	4798      	blx	r3
 80070fc:	3601      	adds	r6, #1
 80070fe:	e7f2      	b.n	80070e6 <__libc_init_array+0x1e>
 8007100:	08008524 	.word	0x08008524
 8007104:	08008524 	.word	0x08008524
 8007108:	08008524 	.word	0x08008524
 800710c:	08008528 	.word	0x08008528

08007110 <memcmp>:
 8007110:	b510      	push	{r4, lr}
 8007112:	3901      	subs	r1, #1
 8007114:	4402      	add	r2, r0
 8007116:	4290      	cmp	r0, r2
 8007118:	d101      	bne.n	800711e <memcmp+0xe>
 800711a:	2000      	movs	r0, #0
 800711c:	e005      	b.n	800712a <memcmp+0x1a>
 800711e:	7803      	ldrb	r3, [r0, #0]
 8007120:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007124:	42a3      	cmp	r3, r4
 8007126:	d001      	beq.n	800712c <memcmp+0x1c>
 8007128:	1b18      	subs	r0, r3, r4
 800712a:	bd10      	pop	{r4, pc}
 800712c:	3001      	adds	r0, #1
 800712e:	e7f2      	b.n	8007116 <memcmp+0x6>

08007130 <memcpy>:
 8007130:	440a      	add	r2, r1
 8007132:	4291      	cmp	r1, r2
 8007134:	f100 33ff 	add.w	r3, r0, #4294967295
 8007138:	d100      	bne.n	800713c <memcpy+0xc>
 800713a:	4770      	bx	lr
 800713c:	b510      	push	{r4, lr}
 800713e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007142:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007146:	4291      	cmp	r1, r2
 8007148:	d1f9      	bne.n	800713e <memcpy+0xe>
 800714a:	bd10      	pop	{r4, pc}

0800714c <memset>:
 800714c:	4402      	add	r2, r0
 800714e:	4603      	mov	r3, r0
 8007150:	4293      	cmp	r3, r2
 8007152:	d100      	bne.n	8007156 <memset+0xa>
 8007154:	4770      	bx	lr
 8007156:	f803 1b01 	strb.w	r1, [r3], #1
 800715a:	e7f9      	b.n	8007150 <memset+0x4>

0800715c <_puts_r>:
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	460e      	mov	r6, r1
 8007160:	4605      	mov	r5, r0
 8007162:	b118      	cbz	r0, 800716c <_puts_r+0x10>
 8007164:	6983      	ldr	r3, [r0, #24]
 8007166:	b90b      	cbnz	r3, 800716c <_puts_r+0x10>
 8007168:	f000 fa7c 	bl	8007664 <__sinit>
 800716c:	69ab      	ldr	r3, [r5, #24]
 800716e:	68ac      	ldr	r4, [r5, #8]
 8007170:	b913      	cbnz	r3, 8007178 <_puts_r+0x1c>
 8007172:	4628      	mov	r0, r5
 8007174:	f000 fa76 	bl	8007664 <__sinit>
 8007178:	4b2c      	ldr	r3, [pc, #176]	; (800722c <_puts_r+0xd0>)
 800717a:	429c      	cmp	r4, r3
 800717c:	d120      	bne.n	80071c0 <_puts_r+0x64>
 800717e:	686c      	ldr	r4, [r5, #4]
 8007180:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007182:	07db      	lsls	r3, r3, #31
 8007184:	d405      	bmi.n	8007192 <_puts_r+0x36>
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	0598      	lsls	r0, r3, #22
 800718a:	d402      	bmi.n	8007192 <_puts_r+0x36>
 800718c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800718e:	f000 fb07 	bl	80077a0 <__retarget_lock_acquire_recursive>
 8007192:	89a3      	ldrh	r3, [r4, #12]
 8007194:	0719      	lsls	r1, r3, #28
 8007196:	d51d      	bpl.n	80071d4 <_puts_r+0x78>
 8007198:	6923      	ldr	r3, [r4, #16]
 800719a:	b1db      	cbz	r3, 80071d4 <_puts_r+0x78>
 800719c:	3e01      	subs	r6, #1
 800719e:	68a3      	ldr	r3, [r4, #8]
 80071a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071a4:	3b01      	subs	r3, #1
 80071a6:	60a3      	str	r3, [r4, #8]
 80071a8:	bb39      	cbnz	r1, 80071fa <_puts_r+0x9e>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	da38      	bge.n	8007220 <_puts_r+0xc4>
 80071ae:	4622      	mov	r2, r4
 80071b0:	210a      	movs	r1, #10
 80071b2:	4628      	mov	r0, r5
 80071b4:	f000 f87c 	bl	80072b0 <__swbuf_r>
 80071b8:	3001      	adds	r0, #1
 80071ba:	d011      	beq.n	80071e0 <_puts_r+0x84>
 80071bc:	250a      	movs	r5, #10
 80071be:	e011      	b.n	80071e4 <_puts_r+0x88>
 80071c0:	4b1b      	ldr	r3, [pc, #108]	; (8007230 <_puts_r+0xd4>)
 80071c2:	429c      	cmp	r4, r3
 80071c4:	d101      	bne.n	80071ca <_puts_r+0x6e>
 80071c6:	68ac      	ldr	r4, [r5, #8]
 80071c8:	e7da      	b.n	8007180 <_puts_r+0x24>
 80071ca:	4b1a      	ldr	r3, [pc, #104]	; (8007234 <_puts_r+0xd8>)
 80071cc:	429c      	cmp	r4, r3
 80071ce:	bf08      	it	eq
 80071d0:	68ec      	ldreq	r4, [r5, #12]
 80071d2:	e7d5      	b.n	8007180 <_puts_r+0x24>
 80071d4:	4621      	mov	r1, r4
 80071d6:	4628      	mov	r0, r5
 80071d8:	f000 f8bc 	bl	8007354 <__swsetup_r>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d0dd      	beq.n	800719c <_puts_r+0x40>
 80071e0:	f04f 35ff 	mov.w	r5, #4294967295
 80071e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071e6:	07da      	lsls	r2, r3, #31
 80071e8:	d405      	bmi.n	80071f6 <_puts_r+0x9a>
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	059b      	lsls	r3, r3, #22
 80071ee:	d402      	bmi.n	80071f6 <_puts_r+0x9a>
 80071f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071f2:	f000 fad6 	bl	80077a2 <__retarget_lock_release_recursive>
 80071f6:	4628      	mov	r0, r5
 80071f8:	bd70      	pop	{r4, r5, r6, pc}
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da04      	bge.n	8007208 <_puts_r+0xac>
 80071fe:	69a2      	ldr	r2, [r4, #24]
 8007200:	429a      	cmp	r2, r3
 8007202:	dc06      	bgt.n	8007212 <_puts_r+0xb6>
 8007204:	290a      	cmp	r1, #10
 8007206:	d004      	beq.n	8007212 <_puts_r+0xb6>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	6022      	str	r2, [r4, #0]
 800720e:	7019      	strb	r1, [r3, #0]
 8007210:	e7c5      	b.n	800719e <_puts_r+0x42>
 8007212:	4622      	mov	r2, r4
 8007214:	4628      	mov	r0, r5
 8007216:	f000 f84b 	bl	80072b0 <__swbuf_r>
 800721a:	3001      	adds	r0, #1
 800721c:	d1bf      	bne.n	800719e <_puts_r+0x42>
 800721e:	e7df      	b.n	80071e0 <_puts_r+0x84>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	250a      	movs	r5, #10
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	701d      	strb	r5, [r3, #0]
 800722a:	e7db      	b.n	80071e4 <_puts_r+0x88>
 800722c:	080084a8 	.word	0x080084a8
 8007230:	080084c8 	.word	0x080084c8
 8007234:	08008488 	.word	0x08008488

08007238 <puts>:
 8007238:	4b02      	ldr	r3, [pc, #8]	; (8007244 <puts+0xc>)
 800723a:	4601      	mov	r1, r0
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	f7ff bf8d 	b.w	800715c <_puts_r>
 8007242:	bf00      	nop
 8007244:	20000014 	.word	0x20000014

08007248 <sniprintf>:
 8007248:	b40c      	push	{r2, r3}
 800724a:	b530      	push	{r4, r5, lr}
 800724c:	4b17      	ldr	r3, [pc, #92]	; (80072ac <sniprintf+0x64>)
 800724e:	1e0c      	subs	r4, r1, #0
 8007250:	681d      	ldr	r5, [r3, #0]
 8007252:	b09d      	sub	sp, #116	; 0x74
 8007254:	da08      	bge.n	8007268 <sniprintf+0x20>
 8007256:	238b      	movs	r3, #139	; 0x8b
 8007258:	602b      	str	r3, [r5, #0]
 800725a:	f04f 30ff 	mov.w	r0, #4294967295
 800725e:	b01d      	add	sp, #116	; 0x74
 8007260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007264:	b002      	add	sp, #8
 8007266:	4770      	bx	lr
 8007268:	f44f 7302 	mov.w	r3, #520	; 0x208
 800726c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007270:	bf14      	ite	ne
 8007272:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007276:	4623      	moveq	r3, r4
 8007278:	9304      	str	r3, [sp, #16]
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007280:	9002      	str	r0, [sp, #8]
 8007282:	9006      	str	r0, [sp, #24]
 8007284:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007288:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800728a:	ab21      	add	r3, sp, #132	; 0x84
 800728c:	a902      	add	r1, sp, #8
 800728e:	4628      	mov	r0, r5
 8007290:	9301      	str	r3, [sp, #4]
 8007292:	f000 fc29 	bl	8007ae8 <_svfiprintf_r>
 8007296:	1c43      	adds	r3, r0, #1
 8007298:	bfbc      	itt	lt
 800729a:	238b      	movlt	r3, #139	; 0x8b
 800729c:	602b      	strlt	r3, [r5, #0]
 800729e:	2c00      	cmp	r4, #0
 80072a0:	d0dd      	beq.n	800725e <sniprintf+0x16>
 80072a2:	9b02      	ldr	r3, [sp, #8]
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
 80072a8:	e7d9      	b.n	800725e <sniprintf+0x16>
 80072aa:	bf00      	nop
 80072ac:	20000014 	.word	0x20000014

080072b0 <__swbuf_r>:
 80072b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b2:	460e      	mov	r6, r1
 80072b4:	4614      	mov	r4, r2
 80072b6:	4605      	mov	r5, r0
 80072b8:	b118      	cbz	r0, 80072c2 <__swbuf_r+0x12>
 80072ba:	6983      	ldr	r3, [r0, #24]
 80072bc:	b90b      	cbnz	r3, 80072c2 <__swbuf_r+0x12>
 80072be:	f000 f9d1 	bl	8007664 <__sinit>
 80072c2:	4b21      	ldr	r3, [pc, #132]	; (8007348 <__swbuf_r+0x98>)
 80072c4:	429c      	cmp	r4, r3
 80072c6:	d12b      	bne.n	8007320 <__swbuf_r+0x70>
 80072c8:	686c      	ldr	r4, [r5, #4]
 80072ca:	69a3      	ldr	r3, [r4, #24]
 80072cc:	60a3      	str	r3, [r4, #8]
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	071a      	lsls	r2, r3, #28
 80072d2:	d52f      	bpl.n	8007334 <__swbuf_r+0x84>
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	b36b      	cbz	r3, 8007334 <__swbuf_r+0x84>
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	6820      	ldr	r0, [r4, #0]
 80072dc:	1ac0      	subs	r0, r0, r3
 80072de:	6963      	ldr	r3, [r4, #20]
 80072e0:	b2f6      	uxtb	r6, r6
 80072e2:	4283      	cmp	r3, r0
 80072e4:	4637      	mov	r7, r6
 80072e6:	dc04      	bgt.n	80072f2 <__swbuf_r+0x42>
 80072e8:	4621      	mov	r1, r4
 80072ea:	4628      	mov	r0, r5
 80072ec:	f000 f926 	bl	800753c <_fflush_r>
 80072f0:	bb30      	cbnz	r0, 8007340 <__swbuf_r+0x90>
 80072f2:	68a3      	ldr	r3, [r4, #8]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	60a3      	str	r3, [r4, #8]
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	6022      	str	r2, [r4, #0]
 80072fe:	701e      	strb	r6, [r3, #0]
 8007300:	6963      	ldr	r3, [r4, #20]
 8007302:	3001      	adds	r0, #1
 8007304:	4283      	cmp	r3, r0
 8007306:	d004      	beq.n	8007312 <__swbuf_r+0x62>
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	07db      	lsls	r3, r3, #31
 800730c:	d506      	bpl.n	800731c <__swbuf_r+0x6c>
 800730e:	2e0a      	cmp	r6, #10
 8007310:	d104      	bne.n	800731c <__swbuf_r+0x6c>
 8007312:	4621      	mov	r1, r4
 8007314:	4628      	mov	r0, r5
 8007316:	f000 f911 	bl	800753c <_fflush_r>
 800731a:	b988      	cbnz	r0, 8007340 <__swbuf_r+0x90>
 800731c:	4638      	mov	r0, r7
 800731e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <__swbuf_r+0x9c>)
 8007322:	429c      	cmp	r4, r3
 8007324:	d101      	bne.n	800732a <__swbuf_r+0x7a>
 8007326:	68ac      	ldr	r4, [r5, #8]
 8007328:	e7cf      	b.n	80072ca <__swbuf_r+0x1a>
 800732a:	4b09      	ldr	r3, [pc, #36]	; (8007350 <__swbuf_r+0xa0>)
 800732c:	429c      	cmp	r4, r3
 800732e:	bf08      	it	eq
 8007330:	68ec      	ldreq	r4, [r5, #12]
 8007332:	e7ca      	b.n	80072ca <__swbuf_r+0x1a>
 8007334:	4621      	mov	r1, r4
 8007336:	4628      	mov	r0, r5
 8007338:	f000 f80c 	bl	8007354 <__swsetup_r>
 800733c:	2800      	cmp	r0, #0
 800733e:	d0cb      	beq.n	80072d8 <__swbuf_r+0x28>
 8007340:	f04f 37ff 	mov.w	r7, #4294967295
 8007344:	e7ea      	b.n	800731c <__swbuf_r+0x6c>
 8007346:	bf00      	nop
 8007348:	080084a8 	.word	0x080084a8
 800734c:	080084c8 	.word	0x080084c8
 8007350:	08008488 	.word	0x08008488

08007354 <__swsetup_r>:
 8007354:	4b32      	ldr	r3, [pc, #200]	; (8007420 <__swsetup_r+0xcc>)
 8007356:	b570      	push	{r4, r5, r6, lr}
 8007358:	681d      	ldr	r5, [r3, #0]
 800735a:	4606      	mov	r6, r0
 800735c:	460c      	mov	r4, r1
 800735e:	b125      	cbz	r5, 800736a <__swsetup_r+0x16>
 8007360:	69ab      	ldr	r3, [r5, #24]
 8007362:	b913      	cbnz	r3, 800736a <__swsetup_r+0x16>
 8007364:	4628      	mov	r0, r5
 8007366:	f000 f97d 	bl	8007664 <__sinit>
 800736a:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <__swsetup_r+0xd0>)
 800736c:	429c      	cmp	r4, r3
 800736e:	d10f      	bne.n	8007390 <__swsetup_r+0x3c>
 8007370:	686c      	ldr	r4, [r5, #4]
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007378:	0719      	lsls	r1, r3, #28
 800737a:	d42c      	bmi.n	80073d6 <__swsetup_r+0x82>
 800737c:	06dd      	lsls	r5, r3, #27
 800737e:	d411      	bmi.n	80073a4 <__swsetup_r+0x50>
 8007380:	2309      	movs	r3, #9
 8007382:	6033      	str	r3, [r6, #0]
 8007384:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007388:	81a3      	strh	r3, [r4, #12]
 800738a:	f04f 30ff 	mov.w	r0, #4294967295
 800738e:	e03e      	b.n	800740e <__swsetup_r+0xba>
 8007390:	4b25      	ldr	r3, [pc, #148]	; (8007428 <__swsetup_r+0xd4>)
 8007392:	429c      	cmp	r4, r3
 8007394:	d101      	bne.n	800739a <__swsetup_r+0x46>
 8007396:	68ac      	ldr	r4, [r5, #8]
 8007398:	e7eb      	b.n	8007372 <__swsetup_r+0x1e>
 800739a:	4b24      	ldr	r3, [pc, #144]	; (800742c <__swsetup_r+0xd8>)
 800739c:	429c      	cmp	r4, r3
 800739e:	bf08      	it	eq
 80073a0:	68ec      	ldreq	r4, [r5, #12]
 80073a2:	e7e6      	b.n	8007372 <__swsetup_r+0x1e>
 80073a4:	0758      	lsls	r0, r3, #29
 80073a6:	d512      	bpl.n	80073ce <__swsetup_r+0x7a>
 80073a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073aa:	b141      	cbz	r1, 80073be <__swsetup_r+0x6a>
 80073ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073b0:	4299      	cmp	r1, r3
 80073b2:	d002      	beq.n	80073ba <__swsetup_r+0x66>
 80073b4:	4630      	mov	r0, r6
 80073b6:	f000 fa5b 	bl	8007870 <_free_r>
 80073ba:	2300      	movs	r3, #0
 80073bc:	6363      	str	r3, [r4, #52]	; 0x34
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	2300      	movs	r3, #0
 80073c8:	6063      	str	r3, [r4, #4]
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	89a3      	ldrh	r3, [r4, #12]
 80073d0:	f043 0308 	orr.w	r3, r3, #8
 80073d4:	81a3      	strh	r3, [r4, #12]
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	b94b      	cbnz	r3, 80073ee <__swsetup_r+0x9a>
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e4:	d003      	beq.n	80073ee <__swsetup_r+0x9a>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4630      	mov	r0, r6
 80073ea:	f000 fa01 	bl	80077f0 <__smakebuf_r>
 80073ee:	89a0      	ldrh	r0, [r4, #12]
 80073f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f4:	f010 0301 	ands.w	r3, r0, #1
 80073f8:	d00a      	beq.n	8007410 <__swsetup_r+0xbc>
 80073fa:	2300      	movs	r3, #0
 80073fc:	60a3      	str	r3, [r4, #8]
 80073fe:	6963      	ldr	r3, [r4, #20]
 8007400:	425b      	negs	r3, r3
 8007402:	61a3      	str	r3, [r4, #24]
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	b943      	cbnz	r3, 800741a <__swsetup_r+0xc6>
 8007408:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800740c:	d1ba      	bne.n	8007384 <__swsetup_r+0x30>
 800740e:	bd70      	pop	{r4, r5, r6, pc}
 8007410:	0781      	lsls	r1, r0, #30
 8007412:	bf58      	it	pl
 8007414:	6963      	ldrpl	r3, [r4, #20]
 8007416:	60a3      	str	r3, [r4, #8]
 8007418:	e7f4      	b.n	8007404 <__swsetup_r+0xb0>
 800741a:	2000      	movs	r0, #0
 800741c:	e7f7      	b.n	800740e <__swsetup_r+0xba>
 800741e:	bf00      	nop
 8007420:	20000014 	.word	0x20000014
 8007424:	080084a8 	.word	0x080084a8
 8007428:	080084c8 	.word	0x080084c8
 800742c:	08008488 	.word	0x08008488

08007430 <__sflush_r>:
 8007430:	898a      	ldrh	r2, [r1, #12]
 8007432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007436:	4605      	mov	r5, r0
 8007438:	0710      	lsls	r0, r2, #28
 800743a:	460c      	mov	r4, r1
 800743c:	d458      	bmi.n	80074f0 <__sflush_r+0xc0>
 800743e:	684b      	ldr	r3, [r1, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	dc05      	bgt.n	8007450 <__sflush_r+0x20>
 8007444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007446:	2b00      	cmp	r3, #0
 8007448:	dc02      	bgt.n	8007450 <__sflush_r+0x20>
 800744a:	2000      	movs	r0, #0
 800744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007452:	2e00      	cmp	r6, #0
 8007454:	d0f9      	beq.n	800744a <__sflush_r+0x1a>
 8007456:	2300      	movs	r3, #0
 8007458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800745c:	682f      	ldr	r7, [r5, #0]
 800745e:	602b      	str	r3, [r5, #0]
 8007460:	d032      	beq.n	80074c8 <__sflush_r+0x98>
 8007462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	075a      	lsls	r2, r3, #29
 8007468:	d505      	bpl.n	8007476 <__sflush_r+0x46>
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	1ac0      	subs	r0, r0, r3
 800746e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007470:	b10b      	cbz	r3, 8007476 <__sflush_r+0x46>
 8007472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007474:	1ac0      	subs	r0, r0, r3
 8007476:	2300      	movs	r3, #0
 8007478:	4602      	mov	r2, r0
 800747a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800747c:	6a21      	ldr	r1, [r4, #32]
 800747e:	4628      	mov	r0, r5
 8007480:	47b0      	blx	r6
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	d106      	bne.n	8007496 <__sflush_r+0x66>
 8007488:	6829      	ldr	r1, [r5, #0]
 800748a:	291d      	cmp	r1, #29
 800748c:	d82c      	bhi.n	80074e8 <__sflush_r+0xb8>
 800748e:	4a2a      	ldr	r2, [pc, #168]	; (8007538 <__sflush_r+0x108>)
 8007490:	40ca      	lsrs	r2, r1
 8007492:	07d6      	lsls	r6, r2, #31
 8007494:	d528      	bpl.n	80074e8 <__sflush_r+0xb8>
 8007496:	2200      	movs	r2, #0
 8007498:	6062      	str	r2, [r4, #4]
 800749a:	04d9      	lsls	r1, r3, #19
 800749c:	6922      	ldr	r2, [r4, #16]
 800749e:	6022      	str	r2, [r4, #0]
 80074a0:	d504      	bpl.n	80074ac <__sflush_r+0x7c>
 80074a2:	1c42      	adds	r2, r0, #1
 80074a4:	d101      	bne.n	80074aa <__sflush_r+0x7a>
 80074a6:	682b      	ldr	r3, [r5, #0]
 80074a8:	b903      	cbnz	r3, 80074ac <__sflush_r+0x7c>
 80074aa:	6560      	str	r0, [r4, #84]	; 0x54
 80074ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074ae:	602f      	str	r7, [r5, #0]
 80074b0:	2900      	cmp	r1, #0
 80074b2:	d0ca      	beq.n	800744a <__sflush_r+0x1a>
 80074b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074b8:	4299      	cmp	r1, r3
 80074ba:	d002      	beq.n	80074c2 <__sflush_r+0x92>
 80074bc:	4628      	mov	r0, r5
 80074be:	f000 f9d7 	bl	8007870 <_free_r>
 80074c2:	2000      	movs	r0, #0
 80074c4:	6360      	str	r0, [r4, #52]	; 0x34
 80074c6:	e7c1      	b.n	800744c <__sflush_r+0x1c>
 80074c8:	6a21      	ldr	r1, [r4, #32]
 80074ca:	2301      	movs	r3, #1
 80074cc:	4628      	mov	r0, r5
 80074ce:	47b0      	blx	r6
 80074d0:	1c41      	adds	r1, r0, #1
 80074d2:	d1c7      	bne.n	8007464 <__sflush_r+0x34>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d0c4      	beq.n	8007464 <__sflush_r+0x34>
 80074da:	2b1d      	cmp	r3, #29
 80074dc:	d001      	beq.n	80074e2 <__sflush_r+0xb2>
 80074de:	2b16      	cmp	r3, #22
 80074e0:	d101      	bne.n	80074e6 <__sflush_r+0xb6>
 80074e2:	602f      	str	r7, [r5, #0]
 80074e4:	e7b1      	b.n	800744a <__sflush_r+0x1a>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	e7ad      	b.n	800744c <__sflush_r+0x1c>
 80074f0:	690f      	ldr	r7, [r1, #16]
 80074f2:	2f00      	cmp	r7, #0
 80074f4:	d0a9      	beq.n	800744a <__sflush_r+0x1a>
 80074f6:	0793      	lsls	r3, r2, #30
 80074f8:	680e      	ldr	r6, [r1, #0]
 80074fa:	bf08      	it	eq
 80074fc:	694b      	ldreq	r3, [r1, #20]
 80074fe:	600f      	str	r7, [r1, #0]
 8007500:	bf18      	it	ne
 8007502:	2300      	movne	r3, #0
 8007504:	eba6 0807 	sub.w	r8, r6, r7
 8007508:	608b      	str	r3, [r1, #8]
 800750a:	f1b8 0f00 	cmp.w	r8, #0
 800750e:	dd9c      	ble.n	800744a <__sflush_r+0x1a>
 8007510:	6a21      	ldr	r1, [r4, #32]
 8007512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007514:	4643      	mov	r3, r8
 8007516:	463a      	mov	r2, r7
 8007518:	4628      	mov	r0, r5
 800751a:	47b0      	blx	r6
 800751c:	2800      	cmp	r0, #0
 800751e:	dc06      	bgt.n	800752e <__sflush_r+0xfe>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007526:	81a3      	strh	r3, [r4, #12]
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	e78e      	b.n	800744c <__sflush_r+0x1c>
 800752e:	4407      	add	r7, r0
 8007530:	eba8 0800 	sub.w	r8, r8, r0
 8007534:	e7e9      	b.n	800750a <__sflush_r+0xda>
 8007536:	bf00      	nop
 8007538:	20400001 	.word	0x20400001

0800753c <_fflush_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	690b      	ldr	r3, [r1, #16]
 8007540:	4605      	mov	r5, r0
 8007542:	460c      	mov	r4, r1
 8007544:	b913      	cbnz	r3, 800754c <_fflush_r+0x10>
 8007546:	2500      	movs	r5, #0
 8007548:	4628      	mov	r0, r5
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	b118      	cbz	r0, 8007556 <_fflush_r+0x1a>
 800754e:	6983      	ldr	r3, [r0, #24]
 8007550:	b90b      	cbnz	r3, 8007556 <_fflush_r+0x1a>
 8007552:	f000 f887 	bl	8007664 <__sinit>
 8007556:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <_fflush_r+0x6c>)
 8007558:	429c      	cmp	r4, r3
 800755a:	d11b      	bne.n	8007594 <_fflush_r+0x58>
 800755c:	686c      	ldr	r4, [r5, #4]
 800755e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0ef      	beq.n	8007546 <_fflush_r+0xa>
 8007566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007568:	07d0      	lsls	r0, r2, #31
 800756a:	d404      	bmi.n	8007576 <_fflush_r+0x3a>
 800756c:	0599      	lsls	r1, r3, #22
 800756e:	d402      	bmi.n	8007576 <_fflush_r+0x3a>
 8007570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007572:	f000 f915 	bl	80077a0 <__retarget_lock_acquire_recursive>
 8007576:	4628      	mov	r0, r5
 8007578:	4621      	mov	r1, r4
 800757a:	f7ff ff59 	bl	8007430 <__sflush_r>
 800757e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007580:	07da      	lsls	r2, r3, #31
 8007582:	4605      	mov	r5, r0
 8007584:	d4e0      	bmi.n	8007548 <_fflush_r+0xc>
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	059b      	lsls	r3, r3, #22
 800758a:	d4dd      	bmi.n	8007548 <_fflush_r+0xc>
 800758c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800758e:	f000 f908 	bl	80077a2 <__retarget_lock_release_recursive>
 8007592:	e7d9      	b.n	8007548 <_fflush_r+0xc>
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <_fflush_r+0x70>)
 8007596:	429c      	cmp	r4, r3
 8007598:	d101      	bne.n	800759e <_fflush_r+0x62>
 800759a:	68ac      	ldr	r4, [r5, #8]
 800759c:	e7df      	b.n	800755e <_fflush_r+0x22>
 800759e:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <_fflush_r+0x74>)
 80075a0:	429c      	cmp	r4, r3
 80075a2:	bf08      	it	eq
 80075a4:	68ec      	ldreq	r4, [r5, #12]
 80075a6:	e7da      	b.n	800755e <_fflush_r+0x22>
 80075a8:	080084a8 	.word	0x080084a8
 80075ac:	080084c8 	.word	0x080084c8
 80075b0:	08008488 	.word	0x08008488

080075b4 <std>:
 80075b4:	2300      	movs	r3, #0
 80075b6:	b510      	push	{r4, lr}
 80075b8:	4604      	mov	r4, r0
 80075ba:	e9c0 3300 	strd	r3, r3, [r0]
 80075be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075c2:	6083      	str	r3, [r0, #8]
 80075c4:	8181      	strh	r1, [r0, #12]
 80075c6:	6643      	str	r3, [r0, #100]	; 0x64
 80075c8:	81c2      	strh	r2, [r0, #14]
 80075ca:	6183      	str	r3, [r0, #24]
 80075cc:	4619      	mov	r1, r3
 80075ce:	2208      	movs	r2, #8
 80075d0:	305c      	adds	r0, #92	; 0x5c
 80075d2:	f7ff fdbb 	bl	800714c <memset>
 80075d6:	4b05      	ldr	r3, [pc, #20]	; (80075ec <std+0x38>)
 80075d8:	6263      	str	r3, [r4, #36]	; 0x24
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <std+0x3c>)
 80075dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80075de:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <std+0x40>)
 80075e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075e2:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <std+0x44>)
 80075e4:	6224      	str	r4, [r4, #32]
 80075e6:	6323      	str	r3, [r4, #48]	; 0x30
 80075e8:	bd10      	pop	{r4, pc}
 80075ea:	bf00      	nop
 80075ec:	08008031 	.word	0x08008031
 80075f0:	08008053 	.word	0x08008053
 80075f4:	0800808b 	.word	0x0800808b
 80075f8:	080080af 	.word	0x080080af

080075fc <_cleanup_r>:
 80075fc:	4901      	ldr	r1, [pc, #4]	; (8007604 <_cleanup_r+0x8>)
 80075fe:	f000 b8af 	b.w	8007760 <_fwalk_reent>
 8007602:	bf00      	nop
 8007604:	0800753d 	.word	0x0800753d

08007608 <__sfmoreglue>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	2268      	movs	r2, #104	; 0x68
 800760c:	1e4d      	subs	r5, r1, #1
 800760e:	4355      	muls	r5, r2
 8007610:	460e      	mov	r6, r1
 8007612:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007616:	f000 f997 	bl	8007948 <_malloc_r>
 800761a:	4604      	mov	r4, r0
 800761c:	b140      	cbz	r0, 8007630 <__sfmoreglue+0x28>
 800761e:	2100      	movs	r1, #0
 8007620:	e9c0 1600 	strd	r1, r6, [r0]
 8007624:	300c      	adds	r0, #12
 8007626:	60a0      	str	r0, [r4, #8]
 8007628:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800762c:	f7ff fd8e 	bl	800714c <memset>
 8007630:	4620      	mov	r0, r4
 8007632:	bd70      	pop	{r4, r5, r6, pc}

08007634 <__sfp_lock_acquire>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__sfp_lock_acquire+0x8>)
 8007636:	f000 b8b3 	b.w	80077a0 <__retarget_lock_acquire_recursive>
 800763a:	bf00      	nop
 800763c:	2000d110 	.word	0x2000d110

08007640 <__sfp_lock_release>:
 8007640:	4801      	ldr	r0, [pc, #4]	; (8007648 <__sfp_lock_release+0x8>)
 8007642:	f000 b8ae 	b.w	80077a2 <__retarget_lock_release_recursive>
 8007646:	bf00      	nop
 8007648:	2000d110 	.word	0x2000d110

0800764c <__sinit_lock_acquire>:
 800764c:	4801      	ldr	r0, [pc, #4]	; (8007654 <__sinit_lock_acquire+0x8>)
 800764e:	f000 b8a7 	b.w	80077a0 <__retarget_lock_acquire_recursive>
 8007652:	bf00      	nop
 8007654:	2000d111 	.word	0x2000d111

08007658 <__sinit_lock_release>:
 8007658:	4801      	ldr	r0, [pc, #4]	; (8007660 <__sinit_lock_release+0x8>)
 800765a:	f000 b8a2 	b.w	80077a2 <__retarget_lock_release_recursive>
 800765e:	bf00      	nop
 8007660:	2000d111 	.word	0x2000d111

08007664 <__sinit>:
 8007664:	b510      	push	{r4, lr}
 8007666:	4604      	mov	r4, r0
 8007668:	f7ff fff0 	bl	800764c <__sinit_lock_acquire>
 800766c:	69a3      	ldr	r3, [r4, #24]
 800766e:	b11b      	cbz	r3, 8007678 <__sinit+0x14>
 8007670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007674:	f7ff bff0 	b.w	8007658 <__sinit_lock_release>
 8007678:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800767c:	6523      	str	r3, [r4, #80]	; 0x50
 800767e:	4b13      	ldr	r3, [pc, #76]	; (80076cc <__sinit+0x68>)
 8007680:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <__sinit+0x6c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	62a2      	str	r2, [r4, #40]	; 0x28
 8007686:	42a3      	cmp	r3, r4
 8007688:	bf04      	itt	eq
 800768a:	2301      	moveq	r3, #1
 800768c:	61a3      	streq	r3, [r4, #24]
 800768e:	4620      	mov	r0, r4
 8007690:	f000 f820 	bl	80076d4 <__sfp>
 8007694:	6060      	str	r0, [r4, #4]
 8007696:	4620      	mov	r0, r4
 8007698:	f000 f81c 	bl	80076d4 <__sfp>
 800769c:	60a0      	str	r0, [r4, #8]
 800769e:	4620      	mov	r0, r4
 80076a0:	f000 f818 	bl	80076d4 <__sfp>
 80076a4:	2200      	movs	r2, #0
 80076a6:	60e0      	str	r0, [r4, #12]
 80076a8:	2104      	movs	r1, #4
 80076aa:	6860      	ldr	r0, [r4, #4]
 80076ac:	f7ff ff82 	bl	80075b4 <std>
 80076b0:	68a0      	ldr	r0, [r4, #8]
 80076b2:	2201      	movs	r2, #1
 80076b4:	2109      	movs	r1, #9
 80076b6:	f7ff ff7d 	bl	80075b4 <std>
 80076ba:	68e0      	ldr	r0, [r4, #12]
 80076bc:	2202      	movs	r2, #2
 80076be:	2112      	movs	r1, #18
 80076c0:	f7ff ff78 	bl	80075b4 <std>
 80076c4:	2301      	movs	r3, #1
 80076c6:	61a3      	str	r3, [r4, #24]
 80076c8:	e7d2      	b.n	8007670 <__sinit+0xc>
 80076ca:	bf00      	nop
 80076cc:	08008484 	.word	0x08008484
 80076d0:	080075fd 	.word	0x080075fd

080076d4 <__sfp>:
 80076d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d6:	4607      	mov	r7, r0
 80076d8:	f7ff ffac 	bl	8007634 <__sfp_lock_acquire>
 80076dc:	4b1e      	ldr	r3, [pc, #120]	; (8007758 <__sfp+0x84>)
 80076de:	681e      	ldr	r6, [r3, #0]
 80076e0:	69b3      	ldr	r3, [r6, #24]
 80076e2:	b913      	cbnz	r3, 80076ea <__sfp+0x16>
 80076e4:	4630      	mov	r0, r6
 80076e6:	f7ff ffbd 	bl	8007664 <__sinit>
 80076ea:	3648      	adds	r6, #72	; 0x48
 80076ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	d503      	bpl.n	80076fc <__sfp+0x28>
 80076f4:	6833      	ldr	r3, [r6, #0]
 80076f6:	b30b      	cbz	r3, 800773c <__sfp+0x68>
 80076f8:	6836      	ldr	r6, [r6, #0]
 80076fa:	e7f7      	b.n	80076ec <__sfp+0x18>
 80076fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007700:	b9d5      	cbnz	r5, 8007738 <__sfp+0x64>
 8007702:	4b16      	ldr	r3, [pc, #88]	; (800775c <__sfp+0x88>)
 8007704:	60e3      	str	r3, [r4, #12]
 8007706:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800770a:	6665      	str	r5, [r4, #100]	; 0x64
 800770c:	f000 f847 	bl	800779e <__retarget_lock_init_recursive>
 8007710:	f7ff ff96 	bl	8007640 <__sfp_lock_release>
 8007714:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007718:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800771c:	6025      	str	r5, [r4, #0]
 800771e:	61a5      	str	r5, [r4, #24]
 8007720:	2208      	movs	r2, #8
 8007722:	4629      	mov	r1, r5
 8007724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007728:	f7ff fd10 	bl	800714c <memset>
 800772c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007734:	4620      	mov	r0, r4
 8007736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007738:	3468      	adds	r4, #104	; 0x68
 800773a:	e7d9      	b.n	80076f0 <__sfp+0x1c>
 800773c:	2104      	movs	r1, #4
 800773e:	4638      	mov	r0, r7
 8007740:	f7ff ff62 	bl	8007608 <__sfmoreglue>
 8007744:	4604      	mov	r4, r0
 8007746:	6030      	str	r0, [r6, #0]
 8007748:	2800      	cmp	r0, #0
 800774a:	d1d5      	bne.n	80076f8 <__sfp+0x24>
 800774c:	f7ff ff78 	bl	8007640 <__sfp_lock_release>
 8007750:	230c      	movs	r3, #12
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	e7ee      	b.n	8007734 <__sfp+0x60>
 8007756:	bf00      	nop
 8007758:	08008484 	.word	0x08008484
 800775c:	ffff0001 	.word	0xffff0001

08007760 <_fwalk_reent>:
 8007760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007764:	4606      	mov	r6, r0
 8007766:	4688      	mov	r8, r1
 8007768:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800776c:	2700      	movs	r7, #0
 800776e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007772:	f1b9 0901 	subs.w	r9, r9, #1
 8007776:	d505      	bpl.n	8007784 <_fwalk_reent+0x24>
 8007778:	6824      	ldr	r4, [r4, #0]
 800777a:	2c00      	cmp	r4, #0
 800777c:	d1f7      	bne.n	800776e <_fwalk_reent+0xe>
 800777e:	4638      	mov	r0, r7
 8007780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007784:	89ab      	ldrh	r3, [r5, #12]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d907      	bls.n	800779a <_fwalk_reent+0x3a>
 800778a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800778e:	3301      	adds	r3, #1
 8007790:	d003      	beq.n	800779a <_fwalk_reent+0x3a>
 8007792:	4629      	mov	r1, r5
 8007794:	4630      	mov	r0, r6
 8007796:	47c0      	blx	r8
 8007798:	4307      	orrs	r7, r0
 800779a:	3568      	adds	r5, #104	; 0x68
 800779c:	e7e9      	b.n	8007772 <_fwalk_reent+0x12>

0800779e <__retarget_lock_init_recursive>:
 800779e:	4770      	bx	lr

080077a0 <__retarget_lock_acquire_recursive>:
 80077a0:	4770      	bx	lr

080077a2 <__retarget_lock_release_recursive>:
 80077a2:	4770      	bx	lr

080077a4 <__swhatbuf_r>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	460e      	mov	r6, r1
 80077a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ac:	2900      	cmp	r1, #0
 80077ae:	b096      	sub	sp, #88	; 0x58
 80077b0:	4614      	mov	r4, r2
 80077b2:	461d      	mov	r5, r3
 80077b4:	da08      	bge.n	80077c8 <__swhatbuf_r+0x24>
 80077b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	602a      	str	r2, [r5, #0]
 80077be:	061a      	lsls	r2, r3, #24
 80077c0:	d410      	bmi.n	80077e4 <__swhatbuf_r+0x40>
 80077c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c6:	e00e      	b.n	80077e6 <__swhatbuf_r+0x42>
 80077c8:	466a      	mov	r2, sp
 80077ca:	f000 fc85 	bl	80080d8 <_fstat_r>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	dbf1      	blt.n	80077b6 <__swhatbuf_r+0x12>
 80077d2:	9a01      	ldr	r2, [sp, #4]
 80077d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077dc:	425a      	negs	r2, r3
 80077de:	415a      	adcs	r2, r3
 80077e0:	602a      	str	r2, [r5, #0]
 80077e2:	e7ee      	b.n	80077c2 <__swhatbuf_r+0x1e>
 80077e4:	2340      	movs	r3, #64	; 0x40
 80077e6:	2000      	movs	r0, #0
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	b016      	add	sp, #88	; 0x58
 80077ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080077f0 <__smakebuf_r>:
 80077f0:	898b      	ldrh	r3, [r1, #12]
 80077f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077f4:	079d      	lsls	r5, r3, #30
 80077f6:	4606      	mov	r6, r0
 80077f8:	460c      	mov	r4, r1
 80077fa:	d507      	bpl.n	800780c <__smakebuf_r+0x1c>
 80077fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	6123      	str	r3, [r4, #16]
 8007804:	2301      	movs	r3, #1
 8007806:	6163      	str	r3, [r4, #20]
 8007808:	b002      	add	sp, #8
 800780a:	bd70      	pop	{r4, r5, r6, pc}
 800780c:	ab01      	add	r3, sp, #4
 800780e:	466a      	mov	r2, sp
 8007810:	f7ff ffc8 	bl	80077a4 <__swhatbuf_r>
 8007814:	9900      	ldr	r1, [sp, #0]
 8007816:	4605      	mov	r5, r0
 8007818:	4630      	mov	r0, r6
 800781a:	f000 f895 	bl	8007948 <_malloc_r>
 800781e:	b948      	cbnz	r0, 8007834 <__smakebuf_r+0x44>
 8007820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007824:	059a      	lsls	r2, r3, #22
 8007826:	d4ef      	bmi.n	8007808 <__smakebuf_r+0x18>
 8007828:	f023 0303 	bic.w	r3, r3, #3
 800782c:	f043 0302 	orr.w	r3, r3, #2
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	e7e3      	b.n	80077fc <__smakebuf_r+0xc>
 8007834:	4b0d      	ldr	r3, [pc, #52]	; (800786c <__smakebuf_r+0x7c>)
 8007836:	62b3      	str	r3, [r6, #40]	; 0x28
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	6020      	str	r0, [r4, #0]
 800783c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007840:	81a3      	strh	r3, [r4, #12]
 8007842:	9b00      	ldr	r3, [sp, #0]
 8007844:	6163      	str	r3, [r4, #20]
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	6120      	str	r0, [r4, #16]
 800784a:	b15b      	cbz	r3, 8007864 <__smakebuf_r+0x74>
 800784c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007850:	4630      	mov	r0, r6
 8007852:	f000 fc53 	bl	80080fc <_isatty_r>
 8007856:	b128      	cbz	r0, 8007864 <__smakebuf_r+0x74>
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	f043 0301 	orr.w	r3, r3, #1
 8007862:	81a3      	strh	r3, [r4, #12]
 8007864:	89a0      	ldrh	r0, [r4, #12]
 8007866:	4305      	orrs	r5, r0
 8007868:	81a5      	strh	r5, [r4, #12]
 800786a:	e7cd      	b.n	8007808 <__smakebuf_r+0x18>
 800786c:	080075fd 	.word	0x080075fd

08007870 <_free_r>:
 8007870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007872:	2900      	cmp	r1, #0
 8007874:	d044      	beq.n	8007900 <_free_r+0x90>
 8007876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800787a:	9001      	str	r0, [sp, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f1a1 0404 	sub.w	r4, r1, #4
 8007882:	bfb8      	it	lt
 8007884:	18e4      	addlt	r4, r4, r3
 8007886:	f000 fc75 	bl	8008174 <__malloc_lock>
 800788a:	4a1e      	ldr	r2, [pc, #120]	; (8007904 <_free_r+0x94>)
 800788c:	9801      	ldr	r0, [sp, #4]
 800788e:	6813      	ldr	r3, [r2, #0]
 8007890:	b933      	cbnz	r3, 80078a0 <_free_r+0x30>
 8007892:	6063      	str	r3, [r4, #4]
 8007894:	6014      	str	r4, [r2, #0]
 8007896:	b003      	add	sp, #12
 8007898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800789c:	f000 bc70 	b.w	8008180 <__malloc_unlock>
 80078a0:	42a3      	cmp	r3, r4
 80078a2:	d908      	bls.n	80078b6 <_free_r+0x46>
 80078a4:	6825      	ldr	r5, [r4, #0]
 80078a6:	1961      	adds	r1, r4, r5
 80078a8:	428b      	cmp	r3, r1
 80078aa:	bf01      	itttt	eq
 80078ac:	6819      	ldreq	r1, [r3, #0]
 80078ae:	685b      	ldreq	r3, [r3, #4]
 80078b0:	1949      	addeq	r1, r1, r5
 80078b2:	6021      	streq	r1, [r4, #0]
 80078b4:	e7ed      	b.n	8007892 <_free_r+0x22>
 80078b6:	461a      	mov	r2, r3
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	b10b      	cbz	r3, 80078c0 <_free_r+0x50>
 80078bc:	42a3      	cmp	r3, r4
 80078be:	d9fa      	bls.n	80078b6 <_free_r+0x46>
 80078c0:	6811      	ldr	r1, [r2, #0]
 80078c2:	1855      	adds	r5, r2, r1
 80078c4:	42a5      	cmp	r5, r4
 80078c6:	d10b      	bne.n	80078e0 <_free_r+0x70>
 80078c8:	6824      	ldr	r4, [r4, #0]
 80078ca:	4421      	add	r1, r4
 80078cc:	1854      	adds	r4, r2, r1
 80078ce:	42a3      	cmp	r3, r4
 80078d0:	6011      	str	r1, [r2, #0]
 80078d2:	d1e0      	bne.n	8007896 <_free_r+0x26>
 80078d4:	681c      	ldr	r4, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	6053      	str	r3, [r2, #4]
 80078da:	4421      	add	r1, r4
 80078dc:	6011      	str	r1, [r2, #0]
 80078de:	e7da      	b.n	8007896 <_free_r+0x26>
 80078e0:	d902      	bls.n	80078e8 <_free_r+0x78>
 80078e2:	230c      	movs	r3, #12
 80078e4:	6003      	str	r3, [r0, #0]
 80078e6:	e7d6      	b.n	8007896 <_free_r+0x26>
 80078e8:	6825      	ldr	r5, [r4, #0]
 80078ea:	1961      	adds	r1, r4, r5
 80078ec:	428b      	cmp	r3, r1
 80078ee:	bf04      	itt	eq
 80078f0:	6819      	ldreq	r1, [r3, #0]
 80078f2:	685b      	ldreq	r3, [r3, #4]
 80078f4:	6063      	str	r3, [r4, #4]
 80078f6:	bf04      	itt	eq
 80078f8:	1949      	addeq	r1, r1, r5
 80078fa:	6021      	streq	r1, [r4, #0]
 80078fc:	6054      	str	r4, [r2, #4]
 80078fe:	e7ca      	b.n	8007896 <_free_r+0x26>
 8007900:	b003      	add	sp, #12
 8007902:	bd30      	pop	{r4, r5, pc}
 8007904:	2000d114 	.word	0x2000d114

08007908 <sbrk_aligned>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	4e0e      	ldr	r6, [pc, #56]	; (8007944 <sbrk_aligned+0x3c>)
 800790c:	460c      	mov	r4, r1
 800790e:	6831      	ldr	r1, [r6, #0]
 8007910:	4605      	mov	r5, r0
 8007912:	b911      	cbnz	r1, 800791a <sbrk_aligned+0x12>
 8007914:	f000 fb7c 	bl	8008010 <_sbrk_r>
 8007918:	6030      	str	r0, [r6, #0]
 800791a:	4621      	mov	r1, r4
 800791c:	4628      	mov	r0, r5
 800791e:	f000 fb77 	bl	8008010 <_sbrk_r>
 8007922:	1c43      	adds	r3, r0, #1
 8007924:	d00a      	beq.n	800793c <sbrk_aligned+0x34>
 8007926:	1cc4      	adds	r4, r0, #3
 8007928:	f024 0403 	bic.w	r4, r4, #3
 800792c:	42a0      	cmp	r0, r4
 800792e:	d007      	beq.n	8007940 <sbrk_aligned+0x38>
 8007930:	1a21      	subs	r1, r4, r0
 8007932:	4628      	mov	r0, r5
 8007934:	f000 fb6c 	bl	8008010 <_sbrk_r>
 8007938:	3001      	adds	r0, #1
 800793a:	d101      	bne.n	8007940 <sbrk_aligned+0x38>
 800793c:	f04f 34ff 	mov.w	r4, #4294967295
 8007940:	4620      	mov	r0, r4
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	2000d118 	.word	0x2000d118

08007948 <_malloc_r>:
 8007948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794c:	1ccd      	adds	r5, r1, #3
 800794e:	f025 0503 	bic.w	r5, r5, #3
 8007952:	3508      	adds	r5, #8
 8007954:	2d0c      	cmp	r5, #12
 8007956:	bf38      	it	cc
 8007958:	250c      	movcc	r5, #12
 800795a:	2d00      	cmp	r5, #0
 800795c:	4607      	mov	r7, r0
 800795e:	db01      	blt.n	8007964 <_malloc_r+0x1c>
 8007960:	42a9      	cmp	r1, r5
 8007962:	d905      	bls.n	8007970 <_malloc_r+0x28>
 8007964:	230c      	movs	r3, #12
 8007966:	603b      	str	r3, [r7, #0]
 8007968:	2600      	movs	r6, #0
 800796a:	4630      	mov	r0, r6
 800796c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007970:	4e2e      	ldr	r6, [pc, #184]	; (8007a2c <_malloc_r+0xe4>)
 8007972:	f000 fbff 	bl	8008174 <__malloc_lock>
 8007976:	6833      	ldr	r3, [r6, #0]
 8007978:	461c      	mov	r4, r3
 800797a:	bb34      	cbnz	r4, 80079ca <_malloc_r+0x82>
 800797c:	4629      	mov	r1, r5
 800797e:	4638      	mov	r0, r7
 8007980:	f7ff ffc2 	bl	8007908 <sbrk_aligned>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	4604      	mov	r4, r0
 8007988:	d14d      	bne.n	8007a26 <_malloc_r+0xde>
 800798a:	6834      	ldr	r4, [r6, #0]
 800798c:	4626      	mov	r6, r4
 800798e:	2e00      	cmp	r6, #0
 8007990:	d140      	bne.n	8007a14 <_malloc_r+0xcc>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	4631      	mov	r1, r6
 8007996:	4638      	mov	r0, r7
 8007998:	eb04 0803 	add.w	r8, r4, r3
 800799c:	f000 fb38 	bl	8008010 <_sbrk_r>
 80079a0:	4580      	cmp	r8, r0
 80079a2:	d13a      	bne.n	8007a1a <_malloc_r+0xd2>
 80079a4:	6821      	ldr	r1, [r4, #0]
 80079a6:	3503      	adds	r5, #3
 80079a8:	1a6d      	subs	r5, r5, r1
 80079aa:	f025 0503 	bic.w	r5, r5, #3
 80079ae:	3508      	adds	r5, #8
 80079b0:	2d0c      	cmp	r5, #12
 80079b2:	bf38      	it	cc
 80079b4:	250c      	movcc	r5, #12
 80079b6:	4629      	mov	r1, r5
 80079b8:	4638      	mov	r0, r7
 80079ba:	f7ff ffa5 	bl	8007908 <sbrk_aligned>
 80079be:	3001      	adds	r0, #1
 80079c0:	d02b      	beq.n	8007a1a <_malloc_r+0xd2>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	442b      	add	r3, r5
 80079c6:	6023      	str	r3, [r4, #0]
 80079c8:	e00e      	b.n	80079e8 <_malloc_r+0xa0>
 80079ca:	6822      	ldr	r2, [r4, #0]
 80079cc:	1b52      	subs	r2, r2, r5
 80079ce:	d41e      	bmi.n	8007a0e <_malloc_r+0xc6>
 80079d0:	2a0b      	cmp	r2, #11
 80079d2:	d916      	bls.n	8007a02 <_malloc_r+0xba>
 80079d4:	1961      	adds	r1, r4, r5
 80079d6:	42a3      	cmp	r3, r4
 80079d8:	6025      	str	r5, [r4, #0]
 80079da:	bf18      	it	ne
 80079dc:	6059      	strne	r1, [r3, #4]
 80079de:	6863      	ldr	r3, [r4, #4]
 80079e0:	bf08      	it	eq
 80079e2:	6031      	streq	r1, [r6, #0]
 80079e4:	5162      	str	r2, [r4, r5]
 80079e6:	604b      	str	r3, [r1, #4]
 80079e8:	4638      	mov	r0, r7
 80079ea:	f104 060b 	add.w	r6, r4, #11
 80079ee:	f000 fbc7 	bl	8008180 <__malloc_unlock>
 80079f2:	f026 0607 	bic.w	r6, r6, #7
 80079f6:	1d23      	adds	r3, r4, #4
 80079f8:	1af2      	subs	r2, r6, r3
 80079fa:	d0b6      	beq.n	800796a <_malloc_r+0x22>
 80079fc:	1b9b      	subs	r3, r3, r6
 80079fe:	50a3      	str	r3, [r4, r2]
 8007a00:	e7b3      	b.n	800796a <_malloc_r+0x22>
 8007a02:	6862      	ldr	r2, [r4, #4]
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	bf0c      	ite	eq
 8007a08:	6032      	streq	r2, [r6, #0]
 8007a0a:	605a      	strne	r2, [r3, #4]
 8007a0c:	e7ec      	b.n	80079e8 <_malloc_r+0xa0>
 8007a0e:	4623      	mov	r3, r4
 8007a10:	6864      	ldr	r4, [r4, #4]
 8007a12:	e7b2      	b.n	800797a <_malloc_r+0x32>
 8007a14:	4634      	mov	r4, r6
 8007a16:	6876      	ldr	r6, [r6, #4]
 8007a18:	e7b9      	b.n	800798e <_malloc_r+0x46>
 8007a1a:	230c      	movs	r3, #12
 8007a1c:	603b      	str	r3, [r7, #0]
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f000 fbae 	bl	8008180 <__malloc_unlock>
 8007a24:	e7a1      	b.n	800796a <_malloc_r+0x22>
 8007a26:	6025      	str	r5, [r4, #0]
 8007a28:	e7de      	b.n	80079e8 <_malloc_r+0xa0>
 8007a2a:	bf00      	nop
 8007a2c:	2000d114 	.word	0x2000d114

08007a30 <__ssputs_r>:
 8007a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a34:	688e      	ldr	r6, [r1, #8]
 8007a36:	429e      	cmp	r6, r3
 8007a38:	4682      	mov	sl, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	4690      	mov	r8, r2
 8007a3e:	461f      	mov	r7, r3
 8007a40:	d838      	bhi.n	8007ab4 <__ssputs_r+0x84>
 8007a42:	898a      	ldrh	r2, [r1, #12]
 8007a44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a48:	d032      	beq.n	8007ab0 <__ssputs_r+0x80>
 8007a4a:	6825      	ldr	r5, [r4, #0]
 8007a4c:	6909      	ldr	r1, [r1, #16]
 8007a4e:	eba5 0901 	sub.w	r9, r5, r1
 8007a52:	6965      	ldr	r5, [r4, #20]
 8007a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	444b      	add	r3, r9
 8007a60:	106d      	asrs	r5, r5, #1
 8007a62:	429d      	cmp	r5, r3
 8007a64:	bf38      	it	cc
 8007a66:	461d      	movcc	r5, r3
 8007a68:	0553      	lsls	r3, r2, #21
 8007a6a:	d531      	bpl.n	8007ad0 <__ssputs_r+0xa0>
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	f7ff ff6b 	bl	8007948 <_malloc_r>
 8007a72:	4606      	mov	r6, r0
 8007a74:	b950      	cbnz	r0, 8007a8c <__ssputs_r+0x5c>
 8007a76:	230c      	movs	r3, #12
 8007a78:	f8ca 3000 	str.w	r3, [sl]
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295
 8007a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8c:	6921      	ldr	r1, [r4, #16]
 8007a8e:	464a      	mov	r2, r9
 8007a90:	f7ff fb4e 	bl	8007130 <memcpy>
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a9e:	81a3      	strh	r3, [r4, #12]
 8007aa0:	6126      	str	r6, [r4, #16]
 8007aa2:	6165      	str	r5, [r4, #20]
 8007aa4:	444e      	add	r6, r9
 8007aa6:	eba5 0509 	sub.w	r5, r5, r9
 8007aaa:	6026      	str	r6, [r4, #0]
 8007aac:	60a5      	str	r5, [r4, #8]
 8007aae:	463e      	mov	r6, r7
 8007ab0:	42be      	cmp	r6, r7
 8007ab2:	d900      	bls.n	8007ab6 <__ssputs_r+0x86>
 8007ab4:	463e      	mov	r6, r7
 8007ab6:	6820      	ldr	r0, [r4, #0]
 8007ab8:	4632      	mov	r2, r6
 8007aba:	4641      	mov	r1, r8
 8007abc:	f000 fb40 	bl	8008140 <memmove>
 8007ac0:	68a3      	ldr	r3, [r4, #8]
 8007ac2:	1b9b      	subs	r3, r3, r6
 8007ac4:	60a3      	str	r3, [r4, #8]
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	4433      	add	r3, r6
 8007aca:	6023      	str	r3, [r4, #0]
 8007acc:	2000      	movs	r0, #0
 8007ace:	e7db      	b.n	8007a88 <__ssputs_r+0x58>
 8007ad0:	462a      	mov	r2, r5
 8007ad2:	f000 fb5b 	bl	800818c <_realloc_r>
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d1e1      	bne.n	8007aa0 <__ssputs_r+0x70>
 8007adc:	6921      	ldr	r1, [r4, #16]
 8007ade:	4650      	mov	r0, sl
 8007ae0:	f7ff fec6 	bl	8007870 <_free_r>
 8007ae4:	e7c7      	b.n	8007a76 <__ssputs_r+0x46>
	...

08007ae8 <_svfiprintf_r>:
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	4698      	mov	r8, r3
 8007aee:	898b      	ldrh	r3, [r1, #12]
 8007af0:	061b      	lsls	r3, r3, #24
 8007af2:	b09d      	sub	sp, #116	; 0x74
 8007af4:	4607      	mov	r7, r0
 8007af6:	460d      	mov	r5, r1
 8007af8:	4614      	mov	r4, r2
 8007afa:	d50e      	bpl.n	8007b1a <_svfiprintf_r+0x32>
 8007afc:	690b      	ldr	r3, [r1, #16]
 8007afe:	b963      	cbnz	r3, 8007b1a <_svfiprintf_r+0x32>
 8007b00:	2140      	movs	r1, #64	; 0x40
 8007b02:	f7ff ff21 	bl	8007948 <_malloc_r>
 8007b06:	6028      	str	r0, [r5, #0]
 8007b08:	6128      	str	r0, [r5, #16]
 8007b0a:	b920      	cbnz	r0, 8007b16 <_svfiprintf_r+0x2e>
 8007b0c:	230c      	movs	r3, #12
 8007b0e:	603b      	str	r3, [r7, #0]
 8007b10:	f04f 30ff 	mov.w	r0, #4294967295
 8007b14:	e0d1      	b.n	8007cba <_svfiprintf_r+0x1d2>
 8007b16:	2340      	movs	r3, #64	; 0x40
 8007b18:	616b      	str	r3, [r5, #20]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1e:	2320      	movs	r3, #32
 8007b20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b24:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b28:	2330      	movs	r3, #48	; 0x30
 8007b2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007cd4 <_svfiprintf_r+0x1ec>
 8007b2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b32:	f04f 0901 	mov.w	r9, #1
 8007b36:	4623      	mov	r3, r4
 8007b38:	469a      	mov	sl, r3
 8007b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b3e:	b10a      	cbz	r2, 8007b44 <_svfiprintf_r+0x5c>
 8007b40:	2a25      	cmp	r2, #37	; 0x25
 8007b42:	d1f9      	bne.n	8007b38 <_svfiprintf_r+0x50>
 8007b44:	ebba 0b04 	subs.w	fp, sl, r4
 8007b48:	d00b      	beq.n	8007b62 <_svfiprintf_r+0x7a>
 8007b4a:	465b      	mov	r3, fp
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4638      	mov	r0, r7
 8007b52:	f7ff ff6d 	bl	8007a30 <__ssputs_r>
 8007b56:	3001      	adds	r0, #1
 8007b58:	f000 80aa 	beq.w	8007cb0 <_svfiprintf_r+0x1c8>
 8007b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b5e:	445a      	add	r2, fp
 8007b60:	9209      	str	r2, [sp, #36]	; 0x24
 8007b62:	f89a 3000 	ldrb.w	r3, [sl]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 80a2 	beq.w	8007cb0 <_svfiprintf_r+0x1c8>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b76:	f10a 0a01 	add.w	sl, sl, #1
 8007b7a:	9304      	str	r3, [sp, #16]
 8007b7c:	9307      	str	r3, [sp, #28]
 8007b7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b82:	931a      	str	r3, [sp, #104]	; 0x68
 8007b84:	4654      	mov	r4, sl
 8007b86:	2205      	movs	r2, #5
 8007b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b8c:	4851      	ldr	r0, [pc, #324]	; (8007cd4 <_svfiprintf_r+0x1ec>)
 8007b8e:	f7f8 fba7 	bl	80002e0 <memchr>
 8007b92:	9a04      	ldr	r2, [sp, #16]
 8007b94:	b9d8      	cbnz	r0, 8007bce <_svfiprintf_r+0xe6>
 8007b96:	06d0      	lsls	r0, r2, #27
 8007b98:	bf44      	itt	mi
 8007b9a:	2320      	movmi	r3, #32
 8007b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ba0:	0711      	lsls	r1, r2, #28
 8007ba2:	bf44      	itt	mi
 8007ba4:	232b      	movmi	r3, #43	; 0x2b
 8007ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007baa:	f89a 3000 	ldrb.w	r3, [sl]
 8007bae:	2b2a      	cmp	r3, #42	; 0x2a
 8007bb0:	d015      	beq.n	8007bde <_svfiprintf_r+0xf6>
 8007bb2:	9a07      	ldr	r2, [sp, #28]
 8007bb4:	4654      	mov	r4, sl
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	f04f 0c0a 	mov.w	ip, #10
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bc2:	3b30      	subs	r3, #48	; 0x30
 8007bc4:	2b09      	cmp	r3, #9
 8007bc6:	d94e      	bls.n	8007c66 <_svfiprintf_r+0x17e>
 8007bc8:	b1b0      	cbz	r0, 8007bf8 <_svfiprintf_r+0x110>
 8007bca:	9207      	str	r2, [sp, #28]
 8007bcc:	e014      	b.n	8007bf8 <_svfiprintf_r+0x110>
 8007bce:	eba0 0308 	sub.w	r3, r0, r8
 8007bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	9304      	str	r3, [sp, #16]
 8007bda:	46a2      	mov	sl, r4
 8007bdc:	e7d2      	b.n	8007b84 <_svfiprintf_r+0x9c>
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	1d19      	adds	r1, r3, #4
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	9103      	str	r1, [sp, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bfbb      	ittet	lt
 8007bea:	425b      	neglt	r3, r3
 8007bec:	f042 0202 	orrlt.w	r2, r2, #2
 8007bf0:	9307      	strge	r3, [sp, #28]
 8007bf2:	9307      	strlt	r3, [sp, #28]
 8007bf4:	bfb8      	it	lt
 8007bf6:	9204      	strlt	r2, [sp, #16]
 8007bf8:	7823      	ldrb	r3, [r4, #0]
 8007bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8007bfc:	d10c      	bne.n	8007c18 <_svfiprintf_r+0x130>
 8007bfe:	7863      	ldrb	r3, [r4, #1]
 8007c00:	2b2a      	cmp	r3, #42	; 0x2a
 8007c02:	d135      	bne.n	8007c70 <_svfiprintf_r+0x188>
 8007c04:	9b03      	ldr	r3, [sp, #12]
 8007c06:	1d1a      	adds	r2, r3, #4
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	9203      	str	r2, [sp, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	bfb8      	it	lt
 8007c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c14:	3402      	adds	r4, #2
 8007c16:	9305      	str	r3, [sp, #20]
 8007c18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ce4 <_svfiprintf_r+0x1fc>
 8007c1c:	7821      	ldrb	r1, [r4, #0]
 8007c1e:	2203      	movs	r2, #3
 8007c20:	4650      	mov	r0, sl
 8007c22:	f7f8 fb5d 	bl	80002e0 <memchr>
 8007c26:	b140      	cbz	r0, 8007c3a <_svfiprintf_r+0x152>
 8007c28:	2340      	movs	r3, #64	; 0x40
 8007c2a:	eba0 000a 	sub.w	r0, r0, sl
 8007c2e:	fa03 f000 	lsl.w	r0, r3, r0
 8007c32:	9b04      	ldr	r3, [sp, #16]
 8007c34:	4303      	orrs	r3, r0
 8007c36:	3401      	adds	r4, #1
 8007c38:	9304      	str	r3, [sp, #16]
 8007c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c3e:	4826      	ldr	r0, [pc, #152]	; (8007cd8 <_svfiprintf_r+0x1f0>)
 8007c40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c44:	2206      	movs	r2, #6
 8007c46:	f7f8 fb4b 	bl	80002e0 <memchr>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d038      	beq.n	8007cc0 <_svfiprintf_r+0x1d8>
 8007c4e:	4b23      	ldr	r3, [pc, #140]	; (8007cdc <_svfiprintf_r+0x1f4>)
 8007c50:	bb1b      	cbnz	r3, 8007c9a <_svfiprintf_r+0x1b2>
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	3307      	adds	r3, #7
 8007c56:	f023 0307 	bic.w	r3, r3, #7
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	9303      	str	r3, [sp, #12]
 8007c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c60:	4433      	add	r3, r6
 8007c62:	9309      	str	r3, [sp, #36]	; 0x24
 8007c64:	e767      	b.n	8007b36 <_svfiprintf_r+0x4e>
 8007c66:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	2001      	movs	r0, #1
 8007c6e:	e7a5      	b.n	8007bbc <_svfiprintf_r+0xd4>
 8007c70:	2300      	movs	r3, #0
 8007c72:	3401      	adds	r4, #1
 8007c74:	9305      	str	r3, [sp, #20]
 8007c76:	4619      	mov	r1, r3
 8007c78:	f04f 0c0a 	mov.w	ip, #10
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c82:	3a30      	subs	r2, #48	; 0x30
 8007c84:	2a09      	cmp	r2, #9
 8007c86:	d903      	bls.n	8007c90 <_svfiprintf_r+0x1a8>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0c5      	beq.n	8007c18 <_svfiprintf_r+0x130>
 8007c8c:	9105      	str	r1, [sp, #20]
 8007c8e:	e7c3      	b.n	8007c18 <_svfiprintf_r+0x130>
 8007c90:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c94:	4604      	mov	r4, r0
 8007c96:	2301      	movs	r3, #1
 8007c98:	e7f0      	b.n	8007c7c <_svfiprintf_r+0x194>
 8007c9a:	ab03      	add	r3, sp, #12
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	462a      	mov	r2, r5
 8007ca0:	4b0f      	ldr	r3, [pc, #60]	; (8007ce0 <_svfiprintf_r+0x1f8>)
 8007ca2:	a904      	add	r1, sp, #16
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f3af 8000 	nop.w
 8007caa:	1c42      	adds	r2, r0, #1
 8007cac:	4606      	mov	r6, r0
 8007cae:	d1d6      	bne.n	8007c5e <_svfiprintf_r+0x176>
 8007cb0:	89ab      	ldrh	r3, [r5, #12]
 8007cb2:	065b      	lsls	r3, r3, #25
 8007cb4:	f53f af2c 	bmi.w	8007b10 <_svfiprintf_r+0x28>
 8007cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cba:	b01d      	add	sp, #116	; 0x74
 8007cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc0:	ab03      	add	r3, sp, #12
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <_svfiprintf_r+0x1f8>)
 8007cc8:	a904      	add	r1, sp, #16
 8007cca:	4638      	mov	r0, r7
 8007ccc:	f000 f87a 	bl	8007dc4 <_printf_i>
 8007cd0:	e7eb      	b.n	8007caa <_svfiprintf_r+0x1c2>
 8007cd2:	bf00      	nop
 8007cd4:	080084e8 	.word	0x080084e8
 8007cd8:	080084f2 	.word	0x080084f2
 8007cdc:	00000000 	.word	0x00000000
 8007ce0:	08007a31 	.word	0x08007a31
 8007ce4:	080084ee 	.word	0x080084ee

08007ce8 <_printf_common>:
 8007ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cec:	4616      	mov	r6, r2
 8007cee:	4699      	mov	r9, r3
 8007cf0:	688a      	ldr	r2, [r1, #8]
 8007cf2:	690b      	ldr	r3, [r1, #16]
 8007cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	bfb8      	it	lt
 8007cfc:	4613      	movlt	r3, r2
 8007cfe:	6033      	str	r3, [r6, #0]
 8007d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d04:	4607      	mov	r7, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	b10a      	cbz	r2, 8007d0e <_printf_common+0x26>
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	6033      	str	r3, [r6, #0]
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	0699      	lsls	r1, r3, #26
 8007d12:	bf42      	ittt	mi
 8007d14:	6833      	ldrmi	r3, [r6, #0]
 8007d16:	3302      	addmi	r3, #2
 8007d18:	6033      	strmi	r3, [r6, #0]
 8007d1a:	6825      	ldr	r5, [r4, #0]
 8007d1c:	f015 0506 	ands.w	r5, r5, #6
 8007d20:	d106      	bne.n	8007d30 <_printf_common+0x48>
 8007d22:	f104 0a19 	add.w	sl, r4, #25
 8007d26:	68e3      	ldr	r3, [r4, #12]
 8007d28:	6832      	ldr	r2, [r6, #0]
 8007d2a:	1a9b      	subs	r3, r3, r2
 8007d2c:	42ab      	cmp	r3, r5
 8007d2e:	dc26      	bgt.n	8007d7e <_printf_common+0x96>
 8007d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d34:	1e13      	subs	r3, r2, #0
 8007d36:	6822      	ldr	r2, [r4, #0]
 8007d38:	bf18      	it	ne
 8007d3a:	2301      	movne	r3, #1
 8007d3c:	0692      	lsls	r2, r2, #26
 8007d3e:	d42b      	bmi.n	8007d98 <_printf_common+0xb0>
 8007d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d44:	4649      	mov	r1, r9
 8007d46:	4638      	mov	r0, r7
 8007d48:	47c0      	blx	r8
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d01e      	beq.n	8007d8c <_printf_common+0xa4>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	68e5      	ldr	r5, [r4, #12]
 8007d52:	6832      	ldr	r2, [r6, #0]
 8007d54:	f003 0306 	and.w	r3, r3, #6
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	bf08      	it	eq
 8007d5c:	1aad      	subeq	r5, r5, r2
 8007d5e:	68a3      	ldr	r3, [r4, #8]
 8007d60:	6922      	ldr	r2, [r4, #16]
 8007d62:	bf0c      	ite	eq
 8007d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d68:	2500      	movne	r5, #0
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	bfc4      	itt	gt
 8007d6e:	1a9b      	subgt	r3, r3, r2
 8007d70:	18ed      	addgt	r5, r5, r3
 8007d72:	2600      	movs	r6, #0
 8007d74:	341a      	adds	r4, #26
 8007d76:	42b5      	cmp	r5, r6
 8007d78:	d11a      	bne.n	8007db0 <_printf_common+0xc8>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e008      	b.n	8007d90 <_printf_common+0xa8>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	4652      	mov	r2, sl
 8007d82:	4649      	mov	r1, r9
 8007d84:	4638      	mov	r0, r7
 8007d86:	47c0      	blx	r8
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d103      	bne.n	8007d94 <_printf_common+0xac>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d94:	3501      	adds	r5, #1
 8007d96:	e7c6      	b.n	8007d26 <_printf_common+0x3e>
 8007d98:	18e1      	adds	r1, r4, r3
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	2030      	movs	r0, #48	; 0x30
 8007d9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007da2:	4422      	add	r2, r4
 8007da4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007da8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dac:	3302      	adds	r3, #2
 8007dae:	e7c7      	b.n	8007d40 <_printf_common+0x58>
 8007db0:	2301      	movs	r3, #1
 8007db2:	4622      	mov	r2, r4
 8007db4:	4649      	mov	r1, r9
 8007db6:	4638      	mov	r0, r7
 8007db8:	47c0      	blx	r8
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d0e6      	beq.n	8007d8c <_printf_common+0xa4>
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	e7d9      	b.n	8007d76 <_printf_common+0x8e>
	...

08007dc4 <_printf_i>:
 8007dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	7e0f      	ldrb	r7, [r1, #24]
 8007dca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dcc:	2f78      	cmp	r7, #120	; 0x78
 8007dce:	4691      	mov	r9, r2
 8007dd0:	4680      	mov	r8, r0
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	469a      	mov	sl, r3
 8007dd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dda:	d807      	bhi.n	8007dec <_printf_i+0x28>
 8007ddc:	2f62      	cmp	r7, #98	; 0x62
 8007dde:	d80a      	bhi.n	8007df6 <_printf_i+0x32>
 8007de0:	2f00      	cmp	r7, #0
 8007de2:	f000 80d8 	beq.w	8007f96 <_printf_i+0x1d2>
 8007de6:	2f58      	cmp	r7, #88	; 0x58
 8007de8:	f000 80a3 	beq.w	8007f32 <_printf_i+0x16e>
 8007dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007df4:	e03a      	b.n	8007e6c <_printf_i+0xa8>
 8007df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dfa:	2b15      	cmp	r3, #21
 8007dfc:	d8f6      	bhi.n	8007dec <_printf_i+0x28>
 8007dfe:	a101      	add	r1, pc, #4	; (adr r1, 8007e04 <_printf_i+0x40>)
 8007e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e04:	08007e5d 	.word	0x08007e5d
 8007e08:	08007e71 	.word	0x08007e71
 8007e0c:	08007ded 	.word	0x08007ded
 8007e10:	08007ded 	.word	0x08007ded
 8007e14:	08007ded 	.word	0x08007ded
 8007e18:	08007ded 	.word	0x08007ded
 8007e1c:	08007e71 	.word	0x08007e71
 8007e20:	08007ded 	.word	0x08007ded
 8007e24:	08007ded 	.word	0x08007ded
 8007e28:	08007ded 	.word	0x08007ded
 8007e2c:	08007ded 	.word	0x08007ded
 8007e30:	08007f7d 	.word	0x08007f7d
 8007e34:	08007ea1 	.word	0x08007ea1
 8007e38:	08007f5f 	.word	0x08007f5f
 8007e3c:	08007ded 	.word	0x08007ded
 8007e40:	08007ded 	.word	0x08007ded
 8007e44:	08007f9f 	.word	0x08007f9f
 8007e48:	08007ded 	.word	0x08007ded
 8007e4c:	08007ea1 	.word	0x08007ea1
 8007e50:	08007ded 	.word	0x08007ded
 8007e54:	08007ded 	.word	0x08007ded
 8007e58:	08007f67 	.word	0x08007f67
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	1d1a      	adds	r2, r3, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	602a      	str	r2, [r5, #0]
 8007e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e0a3      	b.n	8007fb8 <_printf_i+0x1f4>
 8007e70:	6820      	ldr	r0, [r4, #0]
 8007e72:	6829      	ldr	r1, [r5, #0]
 8007e74:	0606      	lsls	r6, r0, #24
 8007e76:	f101 0304 	add.w	r3, r1, #4
 8007e7a:	d50a      	bpl.n	8007e92 <_printf_i+0xce>
 8007e7c:	680e      	ldr	r6, [r1, #0]
 8007e7e:	602b      	str	r3, [r5, #0]
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	da03      	bge.n	8007e8c <_printf_i+0xc8>
 8007e84:	232d      	movs	r3, #45	; 0x2d
 8007e86:	4276      	negs	r6, r6
 8007e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e8c:	485e      	ldr	r0, [pc, #376]	; (8008008 <_printf_i+0x244>)
 8007e8e:	230a      	movs	r3, #10
 8007e90:	e019      	b.n	8007ec6 <_printf_i+0x102>
 8007e92:	680e      	ldr	r6, [r1, #0]
 8007e94:	602b      	str	r3, [r5, #0]
 8007e96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e9a:	bf18      	it	ne
 8007e9c:	b236      	sxthne	r6, r6
 8007e9e:	e7ef      	b.n	8007e80 <_printf_i+0xbc>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	6820      	ldr	r0, [r4, #0]
 8007ea4:	1d19      	adds	r1, r3, #4
 8007ea6:	6029      	str	r1, [r5, #0]
 8007ea8:	0601      	lsls	r1, r0, #24
 8007eaa:	d501      	bpl.n	8007eb0 <_printf_i+0xec>
 8007eac:	681e      	ldr	r6, [r3, #0]
 8007eae:	e002      	b.n	8007eb6 <_printf_i+0xf2>
 8007eb0:	0646      	lsls	r6, r0, #25
 8007eb2:	d5fb      	bpl.n	8007eac <_printf_i+0xe8>
 8007eb4:	881e      	ldrh	r6, [r3, #0]
 8007eb6:	4854      	ldr	r0, [pc, #336]	; (8008008 <_printf_i+0x244>)
 8007eb8:	2f6f      	cmp	r7, #111	; 0x6f
 8007eba:	bf0c      	ite	eq
 8007ebc:	2308      	moveq	r3, #8
 8007ebe:	230a      	movne	r3, #10
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ec6:	6865      	ldr	r5, [r4, #4]
 8007ec8:	60a5      	str	r5, [r4, #8]
 8007eca:	2d00      	cmp	r5, #0
 8007ecc:	bfa2      	ittt	ge
 8007ece:	6821      	ldrge	r1, [r4, #0]
 8007ed0:	f021 0104 	bicge.w	r1, r1, #4
 8007ed4:	6021      	strge	r1, [r4, #0]
 8007ed6:	b90e      	cbnz	r6, 8007edc <_printf_i+0x118>
 8007ed8:	2d00      	cmp	r5, #0
 8007eda:	d04d      	beq.n	8007f78 <_printf_i+0x1b4>
 8007edc:	4615      	mov	r5, r2
 8007ede:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ee2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ee6:	5dc7      	ldrb	r7, [r0, r7]
 8007ee8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007eec:	4637      	mov	r7, r6
 8007eee:	42bb      	cmp	r3, r7
 8007ef0:	460e      	mov	r6, r1
 8007ef2:	d9f4      	bls.n	8007ede <_printf_i+0x11a>
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d10b      	bne.n	8007f10 <_printf_i+0x14c>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	07de      	lsls	r6, r3, #31
 8007efc:	d508      	bpl.n	8007f10 <_printf_i+0x14c>
 8007efe:	6923      	ldr	r3, [r4, #16]
 8007f00:	6861      	ldr	r1, [r4, #4]
 8007f02:	4299      	cmp	r1, r3
 8007f04:	bfde      	ittt	le
 8007f06:	2330      	movle	r3, #48	; 0x30
 8007f08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f10:	1b52      	subs	r2, r2, r5
 8007f12:	6122      	str	r2, [r4, #16]
 8007f14:	f8cd a000 	str.w	sl, [sp]
 8007f18:	464b      	mov	r3, r9
 8007f1a:	aa03      	add	r2, sp, #12
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	4640      	mov	r0, r8
 8007f20:	f7ff fee2 	bl	8007ce8 <_printf_common>
 8007f24:	3001      	adds	r0, #1
 8007f26:	d14c      	bne.n	8007fc2 <_printf_i+0x1fe>
 8007f28:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2c:	b004      	add	sp, #16
 8007f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f32:	4835      	ldr	r0, [pc, #212]	; (8008008 <_printf_i+0x244>)
 8007f34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f38:	6829      	ldr	r1, [r5, #0]
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f40:	6029      	str	r1, [r5, #0]
 8007f42:	061d      	lsls	r5, r3, #24
 8007f44:	d514      	bpl.n	8007f70 <_printf_i+0x1ac>
 8007f46:	07df      	lsls	r7, r3, #31
 8007f48:	bf44      	itt	mi
 8007f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f4e:	6023      	strmi	r3, [r4, #0]
 8007f50:	b91e      	cbnz	r6, 8007f5a <_printf_i+0x196>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	f023 0320 	bic.w	r3, r3, #32
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	2310      	movs	r3, #16
 8007f5c:	e7b0      	b.n	8007ec0 <_printf_i+0xfc>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	f043 0320 	orr.w	r3, r3, #32
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	2378      	movs	r3, #120	; 0x78
 8007f68:	4828      	ldr	r0, [pc, #160]	; (800800c <_printf_i+0x248>)
 8007f6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f6e:	e7e3      	b.n	8007f38 <_printf_i+0x174>
 8007f70:	0659      	lsls	r1, r3, #25
 8007f72:	bf48      	it	mi
 8007f74:	b2b6      	uxthmi	r6, r6
 8007f76:	e7e6      	b.n	8007f46 <_printf_i+0x182>
 8007f78:	4615      	mov	r5, r2
 8007f7a:	e7bb      	b.n	8007ef4 <_printf_i+0x130>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	6826      	ldr	r6, [r4, #0]
 8007f80:	6961      	ldr	r1, [r4, #20]
 8007f82:	1d18      	adds	r0, r3, #4
 8007f84:	6028      	str	r0, [r5, #0]
 8007f86:	0635      	lsls	r5, r6, #24
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	d501      	bpl.n	8007f90 <_printf_i+0x1cc>
 8007f8c:	6019      	str	r1, [r3, #0]
 8007f8e:	e002      	b.n	8007f96 <_printf_i+0x1d2>
 8007f90:	0670      	lsls	r0, r6, #25
 8007f92:	d5fb      	bpl.n	8007f8c <_printf_i+0x1c8>
 8007f94:	8019      	strh	r1, [r3, #0]
 8007f96:	2300      	movs	r3, #0
 8007f98:	6123      	str	r3, [r4, #16]
 8007f9a:	4615      	mov	r5, r2
 8007f9c:	e7ba      	b.n	8007f14 <_printf_i+0x150>
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	1d1a      	adds	r2, r3, #4
 8007fa2:	602a      	str	r2, [r5, #0]
 8007fa4:	681d      	ldr	r5, [r3, #0]
 8007fa6:	6862      	ldr	r2, [r4, #4]
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4628      	mov	r0, r5
 8007fac:	f7f8 f998 	bl	80002e0 <memchr>
 8007fb0:	b108      	cbz	r0, 8007fb6 <_printf_i+0x1f2>
 8007fb2:	1b40      	subs	r0, r0, r5
 8007fb4:	6060      	str	r0, [r4, #4]
 8007fb6:	6863      	ldr	r3, [r4, #4]
 8007fb8:	6123      	str	r3, [r4, #16]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc0:	e7a8      	b.n	8007f14 <_printf_i+0x150>
 8007fc2:	6923      	ldr	r3, [r4, #16]
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	4640      	mov	r0, r8
 8007fca:	47d0      	blx	sl
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d0ab      	beq.n	8007f28 <_printf_i+0x164>
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	079b      	lsls	r3, r3, #30
 8007fd4:	d413      	bmi.n	8007ffe <_printf_i+0x23a>
 8007fd6:	68e0      	ldr	r0, [r4, #12]
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	4298      	cmp	r0, r3
 8007fdc:	bfb8      	it	lt
 8007fde:	4618      	movlt	r0, r3
 8007fe0:	e7a4      	b.n	8007f2c <_printf_i+0x168>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	4640      	mov	r0, r8
 8007fea:	47d0      	blx	sl
 8007fec:	3001      	adds	r0, #1
 8007fee:	d09b      	beq.n	8007f28 <_printf_i+0x164>
 8007ff0:	3501      	adds	r5, #1
 8007ff2:	68e3      	ldr	r3, [r4, #12]
 8007ff4:	9903      	ldr	r1, [sp, #12]
 8007ff6:	1a5b      	subs	r3, r3, r1
 8007ff8:	42ab      	cmp	r3, r5
 8007ffa:	dcf2      	bgt.n	8007fe2 <_printf_i+0x21e>
 8007ffc:	e7eb      	b.n	8007fd6 <_printf_i+0x212>
 8007ffe:	2500      	movs	r5, #0
 8008000:	f104 0619 	add.w	r6, r4, #25
 8008004:	e7f5      	b.n	8007ff2 <_printf_i+0x22e>
 8008006:	bf00      	nop
 8008008:	080084f9 	.word	0x080084f9
 800800c:	0800850a 	.word	0x0800850a

08008010 <_sbrk_r>:
 8008010:	b538      	push	{r3, r4, r5, lr}
 8008012:	4d06      	ldr	r5, [pc, #24]	; (800802c <_sbrk_r+0x1c>)
 8008014:	2300      	movs	r3, #0
 8008016:	4604      	mov	r4, r0
 8008018:	4608      	mov	r0, r1
 800801a:	602b      	str	r3, [r5, #0]
 800801c:	f7f8 fe60 	bl	8000ce0 <_sbrk>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d102      	bne.n	800802a <_sbrk_r+0x1a>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b103      	cbz	r3, 800802a <_sbrk_r+0x1a>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	2000d11c 	.word	0x2000d11c

08008030 <__sread>:
 8008030:	b510      	push	{r4, lr}
 8008032:	460c      	mov	r4, r1
 8008034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008038:	f000 f8d8 	bl	80081ec <_read_r>
 800803c:	2800      	cmp	r0, #0
 800803e:	bfab      	itete	ge
 8008040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008042:	89a3      	ldrhlt	r3, [r4, #12]
 8008044:	181b      	addge	r3, r3, r0
 8008046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800804a:	bfac      	ite	ge
 800804c:	6563      	strge	r3, [r4, #84]	; 0x54
 800804e:	81a3      	strhlt	r3, [r4, #12]
 8008050:	bd10      	pop	{r4, pc}

08008052 <__swrite>:
 8008052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008056:	461f      	mov	r7, r3
 8008058:	898b      	ldrh	r3, [r1, #12]
 800805a:	05db      	lsls	r3, r3, #23
 800805c:	4605      	mov	r5, r0
 800805e:	460c      	mov	r4, r1
 8008060:	4616      	mov	r6, r2
 8008062:	d505      	bpl.n	8008070 <__swrite+0x1e>
 8008064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008068:	2302      	movs	r3, #2
 800806a:	2200      	movs	r2, #0
 800806c:	f000 f856 	bl	800811c <_lseek_r>
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800807a:	81a3      	strh	r3, [r4, #12]
 800807c:	4632      	mov	r2, r6
 800807e:	463b      	mov	r3, r7
 8008080:	4628      	mov	r0, r5
 8008082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008086:	f7ff b807 	b.w	8007098 <_write_r>

0800808a <__sseek>:
 800808a:	b510      	push	{r4, lr}
 800808c:	460c      	mov	r4, r1
 800808e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008092:	f000 f843 	bl	800811c <_lseek_r>
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	bf15      	itete	ne
 800809c:	6560      	strne	r0, [r4, #84]	; 0x54
 800809e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080a6:	81a3      	strheq	r3, [r4, #12]
 80080a8:	bf18      	it	ne
 80080aa:	81a3      	strhne	r3, [r4, #12]
 80080ac:	bd10      	pop	{r4, pc}

080080ae <__sclose>:
 80080ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b2:	f000 b801 	b.w	80080b8 <_close_r>
	...

080080b8 <_close_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4d06      	ldr	r5, [pc, #24]	; (80080d4 <_close_r+0x1c>)
 80080bc:	2300      	movs	r3, #0
 80080be:	4604      	mov	r4, r0
 80080c0:	4608      	mov	r0, r1
 80080c2:	602b      	str	r3, [r5, #0]
 80080c4:	f7f8 fdd7 	bl	8000c76 <_close>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_close_r+0x1a>
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_close_r+0x1a>
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	2000d11c 	.word	0x2000d11c

080080d8 <_fstat_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4d07      	ldr	r5, [pc, #28]	; (80080f8 <_fstat_r+0x20>)
 80080dc:	2300      	movs	r3, #0
 80080de:	4604      	mov	r4, r0
 80080e0:	4608      	mov	r0, r1
 80080e2:	4611      	mov	r1, r2
 80080e4:	602b      	str	r3, [r5, #0]
 80080e6:	f7f8 fdd2 	bl	8000c8e <_fstat>
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	d102      	bne.n	80080f4 <_fstat_r+0x1c>
 80080ee:	682b      	ldr	r3, [r5, #0]
 80080f0:	b103      	cbz	r3, 80080f4 <_fstat_r+0x1c>
 80080f2:	6023      	str	r3, [r4, #0]
 80080f4:	bd38      	pop	{r3, r4, r5, pc}
 80080f6:	bf00      	nop
 80080f8:	2000d11c 	.word	0x2000d11c

080080fc <_isatty_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	4d06      	ldr	r5, [pc, #24]	; (8008118 <_isatty_r+0x1c>)
 8008100:	2300      	movs	r3, #0
 8008102:	4604      	mov	r4, r0
 8008104:	4608      	mov	r0, r1
 8008106:	602b      	str	r3, [r5, #0]
 8008108:	f7f8 fdd1 	bl	8000cae <_isatty>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_isatty_r+0x1a>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_isatty_r+0x1a>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	2000d11c 	.word	0x2000d11c

0800811c <_lseek_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	4d07      	ldr	r5, [pc, #28]	; (800813c <_lseek_r+0x20>)
 8008120:	4604      	mov	r4, r0
 8008122:	4608      	mov	r0, r1
 8008124:	4611      	mov	r1, r2
 8008126:	2200      	movs	r2, #0
 8008128:	602a      	str	r2, [r5, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	f7f8 fdca 	bl	8000cc4 <_lseek>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	d102      	bne.n	800813a <_lseek_r+0x1e>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b103      	cbz	r3, 800813a <_lseek_r+0x1e>
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	bd38      	pop	{r3, r4, r5, pc}
 800813c:	2000d11c 	.word	0x2000d11c

08008140 <memmove>:
 8008140:	4288      	cmp	r0, r1
 8008142:	b510      	push	{r4, lr}
 8008144:	eb01 0402 	add.w	r4, r1, r2
 8008148:	d902      	bls.n	8008150 <memmove+0x10>
 800814a:	4284      	cmp	r4, r0
 800814c:	4623      	mov	r3, r4
 800814e:	d807      	bhi.n	8008160 <memmove+0x20>
 8008150:	1e43      	subs	r3, r0, #1
 8008152:	42a1      	cmp	r1, r4
 8008154:	d008      	beq.n	8008168 <memmove+0x28>
 8008156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800815a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800815e:	e7f8      	b.n	8008152 <memmove+0x12>
 8008160:	4402      	add	r2, r0
 8008162:	4601      	mov	r1, r0
 8008164:	428a      	cmp	r2, r1
 8008166:	d100      	bne.n	800816a <memmove+0x2a>
 8008168:	bd10      	pop	{r4, pc}
 800816a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800816e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008172:	e7f7      	b.n	8008164 <memmove+0x24>

08008174 <__malloc_lock>:
 8008174:	4801      	ldr	r0, [pc, #4]	; (800817c <__malloc_lock+0x8>)
 8008176:	f7ff bb13 	b.w	80077a0 <__retarget_lock_acquire_recursive>
 800817a:	bf00      	nop
 800817c:	2000d10f 	.word	0x2000d10f

08008180 <__malloc_unlock>:
 8008180:	4801      	ldr	r0, [pc, #4]	; (8008188 <__malloc_unlock+0x8>)
 8008182:	f7ff bb0e 	b.w	80077a2 <__retarget_lock_release_recursive>
 8008186:	bf00      	nop
 8008188:	2000d10f 	.word	0x2000d10f

0800818c <_realloc_r>:
 800818c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008190:	4680      	mov	r8, r0
 8008192:	4614      	mov	r4, r2
 8008194:	460e      	mov	r6, r1
 8008196:	b921      	cbnz	r1, 80081a2 <_realloc_r+0x16>
 8008198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800819c:	4611      	mov	r1, r2
 800819e:	f7ff bbd3 	b.w	8007948 <_malloc_r>
 80081a2:	b92a      	cbnz	r2, 80081b0 <_realloc_r+0x24>
 80081a4:	f7ff fb64 	bl	8007870 <_free_r>
 80081a8:	4625      	mov	r5, r4
 80081aa:	4628      	mov	r0, r5
 80081ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b0:	f000 f82e 	bl	8008210 <_malloc_usable_size_r>
 80081b4:	4284      	cmp	r4, r0
 80081b6:	4607      	mov	r7, r0
 80081b8:	d802      	bhi.n	80081c0 <_realloc_r+0x34>
 80081ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081be:	d812      	bhi.n	80081e6 <_realloc_r+0x5a>
 80081c0:	4621      	mov	r1, r4
 80081c2:	4640      	mov	r0, r8
 80081c4:	f7ff fbc0 	bl	8007948 <_malloc_r>
 80081c8:	4605      	mov	r5, r0
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d0ed      	beq.n	80081aa <_realloc_r+0x1e>
 80081ce:	42bc      	cmp	r4, r7
 80081d0:	4622      	mov	r2, r4
 80081d2:	4631      	mov	r1, r6
 80081d4:	bf28      	it	cs
 80081d6:	463a      	movcs	r2, r7
 80081d8:	f7fe ffaa 	bl	8007130 <memcpy>
 80081dc:	4631      	mov	r1, r6
 80081de:	4640      	mov	r0, r8
 80081e0:	f7ff fb46 	bl	8007870 <_free_r>
 80081e4:	e7e1      	b.n	80081aa <_realloc_r+0x1e>
 80081e6:	4635      	mov	r5, r6
 80081e8:	e7df      	b.n	80081aa <_realloc_r+0x1e>
	...

080081ec <_read_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4d07      	ldr	r5, [pc, #28]	; (800820c <_read_r+0x20>)
 80081f0:	4604      	mov	r4, r0
 80081f2:	4608      	mov	r0, r1
 80081f4:	4611      	mov	r1, r2
 80081f6:	2200      	movs	r2, #0
 80081f8:	602a      	str	r2, [r5, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f7f8 fd1e 	bl	8000c3c <_read>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d102      	bne.n	800820a <_read_r+0x1e>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	b103      	cbz	r3, 800820a <_read_r+0x1e>
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	bd38      	pop	{r3, r4, r5, pc}
 800820c:	2000d11c 	.word	0x2000d11c

08008210 <_malloc_usable_size_r>:
 8008210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008214:	1f18      	subs	r0, r3, #4
 8008216:	2b00      	cmp	r3, #0
 8008218:	bfbc      	itt	lt
 800821a:	580b      	ldrlt	r3, [r1, r0]
 800821c:	18c0      	addlt	r0, r0, r3
 800821e:	4770      	bx	lr

08008220 <_init>:
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008222:	bf00      	nop
 8008224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008226:	bc08      	pop	{r3}
 8008228:	469e      	mov	lr, r3
 800822a:	4770      	bx	lr

0800822c <_fini>:
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822e:	bf00      	nop
 8008230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008232:	bc08      	pop	{r3}
 8008234:	469e      	mov	lr, r3
 8008236:	4770      	bx	lr
