
LED_Notification_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006780  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af8  08006af8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b00  08006b00  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b04  08006b04  00016b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014428  2000001c  08006b24  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014444  08006b24  00024444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138d7  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3b  00000000  00000000  00033923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00036760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00037978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a40  00000000  00000000  00038a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001487f  00000000  00000000  0005c448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db44e  00000000  00000000  00070cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c115  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004acc  00000000  00000000  0014c168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006938 	.word	0x08006938

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08006938 	.word	0x08006938

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012e70 	.word	0x20012e70

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b974 	b.w	80005a4 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468e      	mov	lr, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14d      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4694      	mov	ip, r2
 80002e6:	d969      	bls.n	80003bc <__udivmoddi4+0xe8>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b152      	cbz	r2, 8000304 <__udivmoddi4+0x30>
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	f1c2 0120 	rsb	r1, r2, #32
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000302:	4094      	lsls	r4, r2
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	0c21      	lsrs	r1, r4, #16
 800030a:	fbbe f6f8 	udiv	r6, lr, r8
 800030e:	fa1f f78c 	uxth.w	r7, ip
 8000312:	fb08 e316 	mls	r3, r8, r6, lr
 8000316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800031a:	fb06 f107 	mul.w	r1, r6, r7
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 30ff 	add.w	r0, r6, #4294967295
 800032a:	f080 811f 	bcs.w	800056c <__udivmoddi4+0x298>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 811c 	bls.w	800056c <__udivmoddi4+0x298>
 8000334:	3e02      	subs	r6, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a5b      	subs	r3, r3, r1
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000340:	fb08 3310 	mls	r3, r8, r0, r3
 8000344:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000348:	fb00 f707 	mul.w	r7, r0, r7
 800034c:	42a7      	cmp	r7, r4
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x92>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 33ff 	add.w	r3, r0, #4294967295
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x29c>
 800035c:	42a7      	cmp	r7, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x29c>
 8000362:	4464      	add	r4, ip
 8000364:	3802      	subs	r0, #2
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	1be4      	subs	r4, r4, r7
 800036c:	2600      	movs	r6, #0
 800036e:	b11d      	cbz	r5, 8000378 <__udivmoddi4+0xa4>
 8000370:	40d4      	lsrs	r4, r2
 8000372:	2300      	movs	r3, #0
 8000374:	e9c5 4300 	strd	r4, r3, [r5]
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0xc2>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80ef 	beq.w	8000566 <__udivmoddi4+0x292>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x160>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xd4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80f9 	bhi.w	800059a <__udivmoddi4+0x2c6>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0303 	sbc.w	r3, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	469e      	mov	lr, r3
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e0      	beq.n	8000378 <__udivmoddi4+0xa4>
 80003b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ba:	e7dd      	b.n	8000378 <__udivmoddi4+0xa4>
 80003bc:	b902      	cbnz	r2, 80003c0 <__udivmoddi4+0xec>
 80003be:	deff      	udf	#255	; 0xff
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	f040 8092 	bne.w	80004ee <__udivmoddi4+0x21a>
 80003ca:	eba1 010c 	sub.w	r1, r1, ip
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2601      	movs	r6, #1
 80003d8:	0c20      	lsrs	r0, r4, #16
 80003da:	fbb1 f3f7 	udiv	r3, r1, r7
 80003de:	fb07 1113 	mls	r1, r7, r3, r1
 80003e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e6:	fb0e f003 	mul.w	r0, lr, r3
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x12c>
 80003ee:	eb1c 0101 	adds.w	r1, ip, r1
 80003f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x12a>
 80003f8:	4288      	cmp	r0, r1
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2c0>
 80003fe:	4643      	mov	r3, r8
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f7 	udiv	r0, r1, r7
 8000408:	fb07 1110 	mls	r1, r7, r0, r1
 800040c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x156>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x154>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2ca>
 8000428:	4608      	mov	r0, r1
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000432:	e79c      	b.n	800036e <__udivmoddi4+0x9a>
 8000434:	f1c6 0720 	rsb	r7, r6, #32
 8000438:	40b3      	lsls	r3, r6
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa20 f407 	lsr.w	r4, r0, r7
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	431c      	orrs	r4, r3
 800044c:	40f9      	lsrs	r1, r7
 800044e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000452:	fa00 f306 	lsl.w	r3, r0, r6
 8000456:	fbb1 f8f9 	udiv	r8, r1, r9
 800045a:	0c20      	lsrs	r0, r4, #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fb09 1118 	mls	r1, r9, r8, r1
 8000464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000468:	fb08 f00e 	mul.w	r0, r8, lr
 800046c:	4288      	cmp	r0, r1
 800046e:	fa02 f206 	lsl.w	r2, r2, r6
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b8>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2bc>
 8000480:	4288      	cmp	r0, r1
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2bc>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4461      	add	r1, ip
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f9 	udiv	r0, r1, r9
 8000494:	fb09 1110 	mls	r1, r9, r0, r1
 8000498:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049c:	fb00 fe0e 	mul.w	lr, r0, lr
 80004a0:	458e      	cmp	lr, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1e2>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2b4>
 80004ae:	458e      	cmp	lr, r1
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2b4>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ba:	fba0 9402 	umull	r9, r4, r0, r2
 80004be:	eba1 010e 	sub.w	r1, r1, lr
 80004c2:	42a1      	cmp	r1, r4
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46a6      	mov	lr, r4
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x2a4>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x2a0>
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x212>
 80004ce:	ebb3 0208 	subs.w	r2, r3, r8
 80004d2:	eb61 010e 	sbc.w	r1, r1, lr
 80004d6:	fa01 f707 	lsl.w	r7, r1, r7
 80004da:	fa22 f306 	lsr.w	r3, r2, r6
 80004de:	40f1      	lsrs	r1, r6
 80004e0:	431f      	orrs	r7, r3
 80004e2:	e9c5 7100 	strd	r7, r1, [r5]
 80004e6:	2600      	movs	r6, #0
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	40d8      	lsrs	r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa21 f303 	lsr.w	r3, r1, r3
 80004fc:	4091      	lsls	r1, r2
 80004fe:	4301      	orrs	r1, r0
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb3 f0f7 	udiv	r0, r3, r7
 800050c:	fb07 3610 	mls	r6, r7, r0, r3
 8000510:	0c0b      	lsrs	r3, r1, #16
 8000512:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000516:	fb00 f60e 	mul.w	r6, r0, lr
 800051a:	429e      	cmp	r6, r3
 800051c:	fa04 f402 	lsl.w	r4, r4, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x260>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b8>
 800052c:	429e      	cmp	r6, r3
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b8>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1b9b      	subs	r3, r3, r6
 8000536:	b289      	uxth	r1, r1
 8000538:	fbb3 f6f7 	udiv	r6, r3, r7
 800053c:	fb07 3316 	mls	r3, r7, r6, r3
 8000540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000544:	fb06 f30e 	mul.w	r3, r6, lr
 8000548:	428b      	cmp	r3, r1
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x28a>
 800054c:	eb1c 0101 	adds.w	r1, ip, r1
 8000550:	f106 38ff 	add.w	r8, r6, #4294967295
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000556:	428b      	cmp	r3, r1
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2b0>
 800055a:	3e02      	subs	r6, #2
 800055c:	4461      	add	r1, ip
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0x104>
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e705      	b.n	8000378 <__udivmoddi4+0xa4>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x64>
 8000570:	4618      	mov	r0, r3
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x92>
 8000574:	454b      	cmp	r3, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f8>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000580:	3801      	subs	r0, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f8>
 8000584:	4646      	mov	r6, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x28a>
 8000588:	4620      	mov	r0, r4
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1e2>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x260>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b8>
 8000594:	3b02      	subs	r3, #2
 8000596:	4461      	add	r1, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x12c>
 800059a:	4630      	mov	r0, r6
 800059c:	e709      	b.n	80003b2 <__udivmoddi4+0xde>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x156>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fb8f 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f885 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8f5 	bl	80007a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0) ;
 80005ba:	4b35      	ldr	r3, [pc, #212]	; (8000690 <main+0xe8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a34      	ldr	r2, [pc, #208]	; (8000690 <main+0xe8>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 80005c6:	4833      	ldr	r0, [pc, #204]	; (8000694 <main+0xec>)
 80005c8:	f003 fed6 	bl	8004378 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf() ;
 80005cc:	f003 fc42 	bl	8003e54 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start() ;


  status = xTaskCreate(led_orange_handler, "task-3", 200,NULL, 3, &orange_handle) ;
 80005d0:	4b31      	ldr	r3, [pc, #196]	; (8000698 <main+0xf0>)
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2303      	movs	r3, #3
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	22c8      	movs	r2, #200	; 0xc8
 80005dc:	492f      	ldr	r1, [pc, #188]	; (800069c <main+0xf4>)
 80005de:	4830      	ldr	r0, [pc, #192]	; (80006a0 <main+0xf8>)
 80005e0:	f002 f83e 	bl	8002660 <xTaskCreate>
 80005e4:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS) ;
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00a      	beq.n	8000602 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f0:	f383 8811 	msr	BASEPRI, r3
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005fe:	bf00      	nop
 8000600:	e7fe      	b.n	8000600 <main+0x58>
  next_task_handle = orange_handle ;
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <main+0xf0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <main+0xfc>)
 8000608:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_yellow_handler, "task-2", 200, NULL,2, &yellow_handle) ;
 800060a:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <main+0x100>)
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2302      	movs	r3, #2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	22c8      	movs	r2, #200	; 0xc8
 8000616:	4925      	ldr	r1, [pc, #148]	; (80006ac <main+0x104>)
 8000618:	4825      	ldr	r0, [pc, #148]	; (80006b0 <main+0x108>)
 800061a:	f002 f821 	bl	8002660 <xTaskCreate>
 800061e:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS) ;
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d00a      	beq.n	800063c <main+0x94>
        __asm volatile
 8000626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800062a:	f383 8811 	msr	BASEPRI, r3
 800062e:	f3bf 8f6f 	isb	sy
 8000632:	f3bf 8f4f 	dsb	sy
 8000636:	60fb      	str	r3, [r7, #12]
    }
 8000638:	bf00      	nop
 800063a:	e7fe      	b.n	800063a <main+0x92>

  status = xTaskCreate(led_green_handler, "task-1", 200, NULL, 1, &green_handle) ;
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <main+0x10c>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2301      	movs	r3, #1
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	491b      	ldr	r1, [pc, #108]	; (80006b8 <main+0x110>)
 800064a:	481c      	ldr	r0, [pc, #112]	; (80006bc <main+0x114>)
 800064c:	f002 f808 	bl	8002660 <xTaskCreate>
 8000650:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS) ;
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00a      	beq.n	800066e <main+0xc6>
        __asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065c:	f383 8811 	msr	BASEPRI, r3
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	f3bf 8f4f 	dsb	sy
 8000668:	60bb      	str	r3, [r7, #8]
    }
 800066a:	bf00      	nop
 800066c:	e7fe      	b.n	800066c <main+0xc4>


  configASSERT(status == pdPASS) ;
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d00a      	beq.n	800068a <main+0xe2>
        __asm volatile
 8000674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000678:	f383 8811 	msr	BASEPRI, r3
 800067c:	f3bf 8f6f 	isb	sy
 8000680:	f3bf 8f4f 	dsb	sy
 8000684:	607b      	str	r3, [r7, #4]
    }
 8000686:	bf00      	nop
 8000688:	e7fe      	b.n	8000688 <main+0xe0>

  // start the FreeRTOS scheduler
  vTaskStartScheduler();
 800068a:	f002 f9f5 	bl	8002a78 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068e:	e7fe      	b.n	800068e <main+0xe6>
 8000690:	e0001000 	.word	0xe0001000
 8000694:	0007a120 	.word	0x0007a120
 8000698:	2000003c 	.word	0x2000003c
 800069c:	08006950 	.word	0x08006950
 80006a0:	08000979 	.word	0x08000979
 80006a4:	20000038 	.word	0x20000038
 80006a8:	20000040 	.word	0x20000040
 80006ac:	08006958 	.word	0x08006958
 80006b0:	080009e9 	.word	0x080009e9
 80006b4:	20000044 	.word	0x20000044
 80006b8:	08006960 	.word	0x08006960
 80006bc:	08000a59 	.word	0x08000a59

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	; 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 f92a 	bl	8006928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemClock_Config+0xdc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a2b      	ldr	r2, [pc, #172]	; (800079c <SystemClock_Config+0xdc>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <SystemClock_Config+0xdc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <SystemClock_Config+0xe0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a25      	ldr	r2, [pc, #148]	; (80007a0 <SystemClock_Config+0xe0>)
 800070a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <SystemClock_Config+0xe0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000734:	23b4      	movs	r3, #180	; 0xb4
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f989 	bl	8001a60 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000754:	f000 f9ce 	bl	8000af4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000758:	f000 fdca 	bl	80012f0 <HAL_PWREx_EnableOverDrive>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000762:	f000 f9c7 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2302      	movs	r3, #2
 800076c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000772:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2105      	movs	r1, #5
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fe03 	bl	8001390 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000790:	f000 f9b0 	bl	8000af4 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	; 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b54      	ldr	r3, [pc, #336]	; (8000910 <MX_GPIO_Init+0x16c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a53      	ldr	r2, [pc, #332]	; (8000910 <MX_GPIO_Init+0x16c>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b51      	ldr	r3, [pc, #324]	; (8000910 <MX_GPIO_Init+0x16c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b4d      	ldr	r3, [pc, #308]	; (8000910 <MX_GPIO_Init+0x16c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a4c      	ldr	r2, [pc, #304]	; (8000910 <MX_GPIO_Init+0x16c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b4a      	ldr	r3, [pc, #296]	; (8000910 <MX_GPIO_Init+0x16c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b46      	ldr	r3, [pc, #280]	; (8000910 <MX_GPIO_Init+0x16c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a45      	ldr	r2, [pc, #276]	; (8000910 <MX_GPIO_Init+0x16c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b43      	ldr	r3, [pc, #268]	; (8000910 <MX_GPIO_Init+0x16c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b3f      	ldr	r3, [pc, #252]	; (8000910 <MX_GPIO_Init+0x16c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a3e      	ldr	r2, [pc, #248]	; (8000910 <MX_GPIO_Init+0x16c>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <MX_GPIO_Init+0x16c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <MX_GPIO_Init+0x16c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a37      	ldr	r2, [pc, #220]	; (8000910 <MX_GPIO_Init+0x16c>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <MX_GPIO_Init+0x16c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	4832      	ldr	r0, [pc, #200]	; (8000914 <MX_GPIO_Init+0x170>)
 800084c:	f000 fcf8 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000856:	4830      	ldr	r0, [pc, #192]	; (8000918 <MX_GPIO_Init+0x174>)
 8000858:	f000 fcf2 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2104      	movs	r1, #4
 8000860:	482e      	ldr	r0, [pc, #184]	; (800091c <MX_GPIO_Init+0x178>)
 8000862:	f000 fced 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4826      	ldr	r0, [pc, #152]	; (8000918 <MX_GPIO_Init+0x174>)
 800087e:	f000 fb4b 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000882:	230c      	movs	r3, #12
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000892:	2307      	movs	r3, #7
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	481d      	ldr	r0, [pc, #116]	; (8000914 <MX_GPIO_Init+0x170>)
 800089e:	f000 fb3b 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a2:	2320      	movs	r3, #32
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4816      	ldr	r0, [pc, #88]	; (8000914 <MX_GPIO_Init+0x170>)
 80008ba:	f000 fb2d 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4810      	ldr	r0, [pc, #64]	; (8000918 <MX_GPIO_Init+0x174>)
 80008d8:	f000 fb1e 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008dc:	2304      	movs	r3, #4
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	480a      	ldr	r0, [pc, #40]	; (800091c <MX_GPIO_Init+0x178>)
 80008f4:	f000 fb10 	bl	8000f18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2106      	movs	r1, #6
 80008fc:	2028      	movs	r0, #40	; 0x28
 80008fe:	f000 fae1 	bl	8000ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000902:	2028      	movs	r0, #40	; 0x28
 8000904:	f000 fafa 	bl	8000efc <HAL_NVIC_EnableIRQ>

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000
 8000918:	40020800 	.word	0x40020800
 800091c:	40020c00 	.word	0x40020c00

08000920 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */
void button_interrupt_handler (void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af02      	add	r7, sp, #8
	traceISR_ENTER() ;
 8000926:	f005 fc77 	bl	8006218 <SEGGER_SYSVIEW_RecordEnterISR>
	BaseType_t HigherPriorityTaskWoken ;
	HigherPriorityTaskWoken = pdFALSE ;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]

	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&HigherPriorityTaskWoken);
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <button_interrupt_handler+0x50>)
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	2300      	movs	r3, #0
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2300      	movs	r3, #0
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	f002 fc16 	bl	8003170 <xTaskGenericNotifyFromISR>

//  Once the ISR exits, this macro makes higher priority task which got unblocked to resume on the CPU.
	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d00a      	beq.n	8000960 <button_interrupt_handler+0x40>
 800094a:	f005 fcc3 	bl	80062d4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <button_interrupt_handler+0x54>)
 8000950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	f3bf 8f4f 	dsb	sy
 800095a:	f3bf 8f6f 	isb	sy
 800095e:	e001      	b.n	8000964 <button_interrupt_handler+0x44>
 8000960:	f005 fc9c 	bl	800629c <SEGGER_SYSVIEW_RecordExitISR>
	traceISR_EXIT() ;
 8000964:	f005 fc9a 	bl	800629c <SEGGER_SYSVIEW_RecordExitISR>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000038 	.word	0x20000038
 8000974:	e000ed04 	.word	0xe000ed04

08000978 <led_orange_handler>:

/* USER CODE END 4 */

static void led_orange_handler (void * prameters )
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af02      	add	r7, sp, #8
 800097e:	6078      	str	r0, [r7, #4]
	BaseType_t status ;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led") ;
 8000980:	4814      	ldr	r0, [pc, #80]	; (80009d4 <led_orange_handler+0x5c>)
 8000982:	f005 fef1 	bl	8006768 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000986:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800098a:	4813      	ldr	r0, [pc, #76]	; (80009d8 <led_orange_handler+0x60>)
 800098c:	f000 fc71 	bl	8001272 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(900));
 8000990:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2000      	movs	r0, #0
 800099e:	f002 fb5f 	bl	8003060 <xTaskGenericNotifyWait>
 80009a2:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d1ea      	bne.n	8000980 <led_orange_handler+0x8>
		{
			portENTER_CRITICAL() ;
 80009aa:	f002 ff1b 	bl	80037e4 <vPortEnterCritical>
			next_task_handle = yellow_handle ;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <led_orange_handler+0x64>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <led_orange_handler+0x68>)
 80009b4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009bc:	4806      	ldr	r0, [pc, #24]	; (80009d8 <led_orange_handler+0x60>)
 80009be:	f000 fc3f 	bl	8001240 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange led task ") ;
 80009c2:	4808      	ldr	r0, [pc, #32]	; (80009e4 <led_orange_handler+0x6c>)
 80009c4:	f005 fed0 	bl	8006768 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL() ;
 80009c8:	f002 ff3c 	bl	8003844 <vPortExitCritical>
			vTaskDelete(NULL);
 80009cc:	2000      	movs	r0, #0
 80009ce:	f001 ffa9 	bl	8002924 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led") ;
 80009d2:	e7d5      	b.n	8000980 <led_orange_handler+0x8>
 80009d4:	08006968 	.word	0x08006968
 80009d8:	40020800 	.word	0x40020800
 80009dc:	20000040 	.word	0x20000040
 80009e0:	20000038 	.word	0x20000038
 80009e4:	0800697c 	.word	0x0800697c

080009e8 <led_yellow_handler>:
		}

	}
}
static void led_yellow_handler (void * prameters )
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	6078      	str	r0, [r7, #4]
	BaseType_t status ;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling yellow led") ;
 80009f0:	4814      	ldr	r0, [pc, #80]	; (8000a44 <led_yellow_handler+0x5c>)
 80009f2:	f005 feb9 	bl	8006768 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80009f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fa:	4813      	ldr	r0, [pc, #76]	; (8000a48 <led_yellow_handler+0x60>)
 80009fc:	f000 fc39 	bl	8001272 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(600));
 8000a00:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f002 fb27 	bl	8003060 <xTaskGenericNotifyWait>
 8000a12:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d1ea      	bne.n	80009f0 <led_yellow_handler+0x8>
		{
			portENTER_CRITICAL() ;
 8000a1a:	f002 fee3 	bl	80037e4 <vPortEnterCritical>
			next_task_handle = green_handle ;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <led_yellow_handler+0x64>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <led_yellow_handler+0x68>)
 8000a24:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2c:	4806      	ldr	r0, [pc, #24]	; (8000a48 <led_yellow_handler+0x60>)
 8000a2e:	f000 fc07 	bl	8001240 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete yellow led task ") ;
 8000a32:	4808      	ldr	r0, [pc, #32]	; (8000a54 <led_yellow_handler+0x6c>)
 8000a34:	f005 fe98 	bl	8006768 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL() ;
 8000a38:	f002 ff04 	bl	8003844 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f001 ff71 	bl	8002924 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling yellow led") ;
 8000a42:	e7d5      	b.n	80009f0 <led_yellow_handler+0x8>
 8000a44:	08006994 	.word	0x08006994
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	20000044 	.word	0x20000044
 8000a50:	20000038 	.word	0x20000038
 8000a54:	080069a8 	.word	0x080069a8

08000a58 <led_green_handler>:
		}

	}
}
static void led_green_handler (void * prameters )
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	6078      	str	r0, [r7, #4]
	BaseType_t status ;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led") ;
 8000a60:	4816      	ldr	r0, [pc, #88]	; (8000abc <led_green_handler+0x64>)
 8000a62:	f005 fe81 	bl	8006768 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 8000a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6a:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <led_green_handler+0x68>)
 8000a6c:	f000 fc01 	bl	8001272 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(300));
 8000a70:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2300      	movs	r3, #0
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f002 faef 	bl	8003060 <xTaskGenericNotifyWait>
 8000a82:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d1ea      	bne.n	8000a60 <led_green_handler+0x8>
		{
			portENTER_CRITICAL() ;
 8000a8a:	f002 feab 	bl	80037e4 <vPortEnterCritical>
			next_task_handle = NULL ;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <led_green_handler+0x6c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9a:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <led_green_handler+0x68>)
 8000a9c:	f000 fbd0 	bl	8001240 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green led task ") ;
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <led_green_handler+0x70>)
 8000aa2:	f005 fe61 	bl	8006768 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL() ;
 8000aa6:	f002 fecd 	bl	8003844 <vPortExitCritical>
			vTaskDelete(bt_handle);
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <led_green_handler+0x74>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 ff38 	bl	8002924 <vTaskDelete>
			vTaskDelete(NULL);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f001 ff35 	bl	8002924 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led") ;
 8000aba:	e7d1      	b.n	8000a60 <led_green_handler+0x8>
 8000abc:	080069c0 	.word	0x080069c0
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	20000038 	.word	0x20000038
 8000ac8:	080069d4 	.word	0x080069d4
 8000acc:	20000048 	.word	0x20000048

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 f917 	bl	8000d14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40001000 	.word	0x40001000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	e7fe      	b.n	8000afc <Error_Handler+0x8>
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  vInitPrioGroupValue();
 8000b3e:	f002 fdd3 	bl	80036e8 <vInitPrioGroupValue>
  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	2036      	movs	r0, #54	; 0x36
 8000b66:	f000 f9ad 	bl	8000ec4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b6a:	2036      	movs	r0, #54	; 0x36
 8000b6c:	f000 f9c6 	bl	8000efc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a1e      	ldr	r2, [pc, #120]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8c:	f107 0210 	add.w	r2, r7, #16
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 fd00 	bl	800159c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b9c:	f000 fcea 	bl	8001574 <HAL_RCC_GetPCLK1Freq>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba8:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <HAL_InitTick+0xa8>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	0c9b      	lsrs	r3, r3, #18
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_InitTick+0xac>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <HAL_InitTick+0xb0>)
 8000bb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_InitTick+0xac>)
 8000bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_InitTick+0xac>)
 8000bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_InitTick+0xac>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_InitTick+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <HAL_InitTick+0xac>)
 8000bd6:	f001 f9e1 	bl	8001f9c <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <HAL_InitTick+0xac>)
 8000be2:	f001 fa35 	bl	8002050 <HAL_TIM_Base_Start_IT>
 8000be6:	4603      	mov	r3, r0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3730      	adds	r7, #48	; 0x30
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	431bde83 	.word	0x431bde83
 8000bfc:	2000004c 	.word	0x2000004c
 8000c00:	40001000 	.word	0x40001000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	button_interrupt_handler();
 8000c34:	f7ff fe74 	bl	8000920 <button_interrupt_handler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c3c:	f000 fb34 	bl	80012a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <TIM6_DAC_IRQHandler+0x10>)
 8000c4a:	f001 fa71 	bl	8002130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000004c 	.word	0x2000004c

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c82:	490e      	ldr	r1, [pc, #56]	; (8000cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c84:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c98:	4c0b      	ldr	r4, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca6:	f7ff ffd7 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000caa:	f005 fdfb 	bl	80068a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fc7b 	bl	80005a8 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cc0:	08006b08 	.word	0x08006b08
  ldr r2, =_sbss
 8000cc4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000cc8:	20014444 	.word	0x20014444

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f8d8 	bl	8000eae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f7ff ff26 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fefc 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000094 	.word	0x20000094

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000094 	.word	0x20000094

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ff4c 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed6:	f7ff ff61 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000eda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	68b9      	ldr	r1, [r7, #8]
 8000ee0:	6978      	ldr	r0, [r7, #20]
 8000ee2:	f7ff ffb1 	bl	8000e48 <NVIC_EncodePriority>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff80 	bl	8000df4 <__NVIC_SetPriority>
}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff54 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e165      	b.n	8001200 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8154 	bne.w	80011fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d005      	beq.n	8000f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d130      	bne.n	8000fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	f003 0201 	and.w	r2, r3, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d017      	beq.n	8001008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d123      	bne.n	800105c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	69b9      	ldr	r1, [r7, #24]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80ae 	beq.w	80011fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b5d      	ldr	r3, [pc, #372]	; (8001218 <HAL_GPIO_Init+0x300>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a5c      	ldr	r2, [pc, #368]	; (8001218 <HAL_GPIO_Init+0x300>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b5a      	ldr	r3, [pc, #360]	; (8001218 <HAL_GPIO_Init+0x300>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ba:	4a58      	ldr	r2, [pc, #352]	; (800121c <HAL_GPIO_Init+0x304>)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4f      	ldr	r2, [pc, #316]	; (8001220 <HAL_GPIO_Init+0x308>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x21a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <HAL_GPIO_Init+0x30c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x216>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4d      	ldr	r2, [pc, #308]	; (8001228 <HAL_GPIO_Init+0x310>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x212>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4c      	ldr	r2, [pc, #304]	; (800122c <HAL_GPIO_Init+0x314>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x20e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <HAL_GPIO_Init+0x318>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x20a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4a      	ldr	r2, [pc, #296]	; (8001234 <HAL_GPIO_Init+0x31c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x206>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a49      	ldr	r2, [pc, #292]	; (8001238 <HAL_GPIO_Init+0x320>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x202>
 8001116:	2306      	movs	r3, #6
 8001118:	e00c      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 800111a:	2307      	movs	r3, #7
 800111c:	e00a      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 800111e:	2305      	movs	r3, #5
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 8001122:	2304      	movs	r3, #4
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 8001132:	2300      	movs	r3, #0
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001144:	4935      	ldr	r1, [pc, #212]	; (800121c <HAL_GPIO_Init+0x304>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001152:	4b3a      	ldr	r3, [pc, #232]	; (800123c <HAL_GPIO_Init+0x324>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001176:	4a31      	ldr	r2, [pc, #196]	; (800123c <HAL_GPIO_Init+0x324>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800117c:	4b2f      	ldr	r3, [pc, #188]	; (800123c <HAL_GPIO_Init+0x324>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a0:	4a26      	ldr	r2, [pc, #152]	; (800123c <HAL_GPIO_Init+0x324>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a6:	4b25      	ldr	r3, [pc, #148]	; (800123c <HAL_GPIO_Init+0x324>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <HAL_GPIO_Init+0x324>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_GPIO_Init+0x324>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f4:	4a11      	ldr	r2, [pc, #68]	; (800123c <HAL_GPIO_Init+0x324>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	f67f ae96 	bls.w	8000f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40021000 	.word	0x40021000
 8001234:	40021400 	.word	0x40021400
 8001238:	40021800 	.word	0x40021800
 800123c:	40013c00 	.word	0x40013c00

08001240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
 800124c:	4613      	mov	r3, r2
 800124e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800125c:	e003      	b.n	8001266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001272:	b480      	push	{r7}
 8001274:	b085      	sub	sp, #20
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	460b      	mov	r3, r1
 800127c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001284:	887a      	ldrh	r2, [r7, #2]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4013      	ands	r3, r2
 800128a:	041a      	lsls	r2, r3, #16
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43d9      	mvns	r1, r3
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	400b      	ands	r3, r1
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f806 	bl	80012d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <HAL_PWREx_EnableOverDrive+0x90>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a1f      	ldr	r2, [pc, #124]	; (8001380 <HAL_PWREx_EnableOverDrive+0x90>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <HAL_PWREx_EnableOverDrive+0x90>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_PWREx_EnableOverDrive+0x94>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800131c:	f7ff fd0e 	bl	8000d3c <HAL_GetTick>
 8001320:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001322:	e009      	b.n	8001338 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001324:	f7ff fd0a 	bl	8000d3c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001332:	d901      	bls.n	8001338 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e01f      	b.n	8001378 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_PWREx_EnableOverDrive+0x98>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d1ee      	bne.n	8001324 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800134c:	f7ff fcf6 	bl	8000d3c <HAL_GetTick>
 8001350:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001352:	e009      	b.n	8001368 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001354:	f7ff fcf2 	bl	8000d3c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001362:	d901      	bls.n	8001368 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e007      	b.n	8001378 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_PWREx_EnableOverDrive+0x98>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001374:	d1ee      	bne.n	8001354 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	420e0040 	.word	0x420e0040
 8001388:	40007000 	.word	0x40007000
 800138c:	420e0044 	.word	0x420e0044

08001390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0cc      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013a4:	4b68      	ldr	r3, [pc, #416]	; (8001548 <HAL_RCC_ClockConfig+0x1b8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d90c      	bls.n	80013cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b65      	ldr	r3, [pc, #404]	; (8001548 <HAL_RCC_ClockConfig+0x1b8>)
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b63      	ldr	r3, [pc, #396]	; (8001548 <HAL_RCC_ClockConfig+0x1b8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0b8      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d020      	beq.n	800141a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e4:	4b59      	ldr	r3, [pc, #356]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4a58      	ldr	r2, [pc, #352]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013fc:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001408:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	494d      	ldr	r1, [pc, #308]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	4313      	orrs	r3, r2
 8001418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d044      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d107      	bne.n	800143e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d119      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e07f      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d003      	beq.n	800144e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800144a:	2b03      	cmp	r3, #3
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	4b3f      	ldr	r3, [pc, #252]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e06f      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e067      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f023 0203 	bic.w	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4934      	ldr	r1, [pc, #208]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 800147c:	4313      	orrs	r3, r2
 800147e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff fc5c 	bl	8000d3c <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	e00a      	b.n	800149e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001488:	f7ff fc58 	bl	8000d3c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e04f      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	4b2b      	ldr	r3, [pc, #172]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 020c 	and.w	r2, r3, #12
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1eb      	bne.n	8001488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_RCC_ClockConfig+0x1b8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d20c      	bcs.n	80014d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_RCC_ClockConfig+0x1b8>)
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_RCC_ClockConfig+0x1b8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e032      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4916      	ldr	r1, [pc, #88]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	490e      	ldr	r1, [pc, #56]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	4313      	orrs	r3, r2
 8001514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001516:	f000 f873 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 800151a:	4602      	mov	r2, r0
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	490a      	ldr	r1, [pc, #40]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	5ccb      	ldrb	r3, [r1, r3]
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_RCC_ClockConfig+0x1c8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fb0a 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023c00 	.word	0x40023c00
 800154c:	40023800 	.word	0x40023800
 8001550:	08006ab8 	.word	0x08006ab8
 8001554:	20000000 	.word	0x20000000
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_RCC_GetHCLKFreq+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000000 	.word	0x20000000

08001574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001578:	f7ff fff0 	bl	800155c <HAL_RCC_GetHCLKFreq>
 800157c:	4602      	mov	r2, r0
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	0a9b      	lsrs	r3, r3, #10
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	4903      	ldr	r1, [pc, #12]	; (8001598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800158a:	5ccb      	ldrb	r3, [r1, r3]
 800158c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001590:	4618      	mov	r0, r3
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40023800 	.word	0x40023800
 8001598:	08006ac8 	.word	0x08006ac8

0800159c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	220f      	movs	r2, #15
 80015aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_RCC_GetClockConfig+0x5c>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0203 	and.w	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_RCC_GetClockConfig+0x5c>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_RCC_GetClockConfig+0x5c>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_RCC_GetClockConfig+0x5c>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <HAL_RCC_GetClockConfig+0x60>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 020f 	and.w	r2, r3, #15
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	601a      	str	r2, [r3, #0]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40023c00 	.word	0x40023c00

08001600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001604:	b0ae      	sub	sp, #184	; 0xb8
 8001606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001626:	4bcb      	ldr	r3, [pc, #812]	; (8001954 <HAL_RCC_GetSysClockFreq+0x354>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b0c      	cmp	r3, #12
 8001630:	f200 8206 	bhi.w	8001a40 <HAL_RCC_GetSysClockFreq+0x440>
 8001634:	a201      	add	r2, pc, #4	; (adr r2, 800163c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163a:	bf00      	nop
 800163c:	08001671 	.word	0x08001671
 8001640:	08001a41 	.word	0x08001a41
 8001644:	08001a41 	.word	0x08001a41
 8001648:	08001a41 	.word	0x08001a41
 800164c:	08001679 	.word	0x08001679
 8001650:	08001a41 	.word	0x08001a41
 8001654:	08001a41 	.word	0x08001a41
 8001658:	08001a41 	.word	0x08001a41
 800165c:	08001681 	.word	0x08001681
 8001660:	08001a41 	.word	0x08001a41
 8001664:	08001a41 	.word	0x08001a41
 8001668:	08001a41 	.word	0x08001a41
 800166c:	08001871 	.word	0x08001871
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001670:	4bb9      	ldr	r3, [pc, #740]	; (8001958 <HAL_RCC_GetSysClockFreq+0x358>)
 8001672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001676:	e1e7      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001678:	4bb8      	ldr	r3, [pc, #736]	; (800195c <HAL_RCC_GetSysClockFreq+0x35c>)
 800167a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800167e:	e1e3      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001680:	4bb4      	ldr	r3, [pc, #720]	; (8001954 <HAL_RCC_GetSysClockFreq+0x354>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800168c:	4bb1      	ldr	r3, [pc, #708]	; (8001954 <HAL_RCC_GetSysClockFreq+0x354>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d071      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001698:	4bae      	ldr	r3, [pc, #696]	; (8001954 <HAL_RCC_GetSysClockFreq+0x354>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	2200      	movs	r2, #0
 80016a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016a4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016be:	4622      	mov	r2, r4
 80016c0:	462b      	mov	r3, r5
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	0159      	lsls	r1, r3, #5
 80016cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d0:	0150      	lsls	r0, r2, #5
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4621      	mov	r1, r4
 80016d8:	1a51      	subs	r1, r2, r1
 80016da:	6439      	str	r1, [r7, #64]	; 0x40
 80016dc:	4629      	mov	r1, r5
 80016de:	eb63 0301 	sbc.w	r3, r3, r1
 80016e2:	647b      	str	r3, [r7, #68]	; 0x44
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016f0:	4649      	mov	r1, r9
 80016f2:	018b      	lsls	r3, r1, #6
 80016f4:	4641      	mov	r1, r8
 80016f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016fa:	4641      	mov	r1, r8
 80016fc:	018a      	lsls	r2, r1, #6
 80016fe:	4641      	mov	r1, r8
 8001700:	1a51      	subs	r1, r2, r1
 8001702:	63b9      	str	r1, [r7, #56]	; 0x38
 8001704:	4649      	mov	r1, r9
 8001706:	eb63 0301 	sbc.w	r3, r3, r1
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001718:	4649      	mov	r1, r9
 800171a:	00cb      	lsls	r3, r1, #3
 800171c:	4641      	mov	r1, r8
 800171e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001722:	4641      	mov	r1, r8
 8001724:	00ca      	lsls	r2, r1, #3
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	4603      	mov	r3, r0
 800172c:	4622      	mov	r2, r4
 800172e:	189b      	adds	r3, r3, r2
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
 8001732:	462b      	mov	r3, r5
 8001734:	460a      	mov	r2, r1
 8001736:	eb42 0303 	adc.w	r3, r2, r3
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001748:	4629      	mov	r1, r5
 800174a:	024b      	lsls	r3, r1, #9
 800174c:	4621      	mov	r1, r4
 800174e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001752:	4621      	mov	r1, r4
 8001754:	024a      	lsls	r2, r1, #9
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800175e:	2200      	movs	r2, #0
 8001760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001764:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001768:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800176c:	f7fe fd9a 	bl	80002a4 <__aeabi_uldivmod>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4613      	mov	r3, r2
 8001776:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800177a:	e067      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177c:	4b75      	ldr	r3, [pc, #468]	; (8001954 <HAL_RCC_GetSysClockFreq+0x354>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	2200      	movs	r2, #0
 8001784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001788:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800178c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001794:	67bb      	str	r3, [r7, #120]	; 0x78
 8001796:	2300      	movs	r3, #0
 8001798:	67fb      	str	r3, [r7, #124]	; 0x7c
 800179a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800179e:	4622      	mov	r2, r4
 80017a0:	462b      	mov	r3, r5
 80017a2:	f04f 0000 	mov.w	r0, #0
 80017a6:	f04f 0100 	mov.w	r1, #0
 80017aa:	0159      	lsls	r1, r3, #5
 80017ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b0:	0150      	lsls	r0, r2, #5
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4621      	mov	r1, r4
 80017b8:	1a51      	subs	r1, r2, r1
 80017ba:	62b9      	str	r1, [r7, #40]	; 0x28
 80017bc:	4629      	mov	r1, r5
 80017be:	eb63 0301 	sbc.w	r3, r3, r1
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80017d0:	4649      	mov	r1, r9
 80017d2:	018b      	lsls	r3, r1, #6
 80017d4:	4641      	mov	r1, r8
 80017d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017da:	4641      	mov	r1, r8
 80017dc:	018a      	lsls	r2, r1, #6
 80017de:	4641      	mov	r1, r8
 80017e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80017e4:	4649      	mov	r1, r9
 80017e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017fe:	4692      	mov	sl, r2
 8001800:	469b      	mov	fp, r3
 8001802:	4623      	mov	r3, r4
 8001804:	eb1a 0303 	adds.w	r3, sl, r3
 8001808:	623b      	str	r3, [r7, #32]
 800180a:	462b      	mov	r3, r5
 800180c:	eb4b 0303 	adc.w	r3, fp, r3
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800181e:	4629      	mov	r1, r5
 8001820:	028b      	lsls	r3, r1, #10
 8001822:	4621      	mov	r1, r4
 8001824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001828:	4621      	mov	r1, r4
 800182a:	028a      	lsls	r2, r1, #10
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001834:	2200      	movs	r2, #0
 8001836:	673b      	str	r3, [r7, #112]	; 0x70
 8001838:	677a      	str	r2, [r7, #116]	; 0x74
 800183a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800183e:	f7fe fd31 	bl	80002a4 <__aeabi_uldivmod>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4613      	mov	r3, r2
 8001848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800184c:	4b41      	ldr	r3, [pc, #260]	; (8001954 <HAL_RCC_GetSysClockFreq+0x354>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	0c1b      	lsrs	r3, r3, #16
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	3301      	adds	r3, #1
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800185e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800186e:	e0eb      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001870:	4b38      	ldr	r3, [pc, #224]	; (8001954 <HAL_RCC_GetSysClockFreq+0x354>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800187c:	4b35      	ldr	r3, [pc, #212]	; (8001954 <HAL_RCC_GetSysClockFreq+0x354>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d06b      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001888:	4b32      	ldr	r3, [pc, #200]	; (8001954 <HAL_RCC_GetSysClockFreq+0x354>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	099b      	lsrs	r3, r3, #6
 800188e:	2200      	movs	r2, #0
 8001890:	66bb      	str	r3, [r7, #104]	; 0x68
 8001892:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001894:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800189a:	663b      	str	r3, [r7, #96]	; 0x60
 800189c:	2300      	movs	r3, #0
 800189e:	667b      	str	r3, [r7, #100]	; 0x64
 80018a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018a4:	4622      	mov	r2, r4
 80018a6:	462b      	mov	r3, r5
 80018a8:	f04f 0000 	mov.w	r0, #0
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	0159      	lsls	r1, r3, #5
 80018b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b6:	0150      	lsls	r0, r2, #5
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4621      	mov	r1, r4
 80018be:	1a51      	subs	r1, r2, r1
 80018c0:	61b9      	str	r1, [r7, #24]
 80018c2:	4629      	mov	r1, r5
 80018c4:	eb63 0301 	sbc.w	r3, r3, r1
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018d6:	4659      	mov	r1, fp
 80018d8:	018b      	lsls	r3, r1, #6
 80018da:	4651      	mov	r1, sl
 80018dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018e0:	4651      	mov	r1, sl
 80018e2:	018a      	lsls	r2, r1, #6
 80018e4:	4651      	mov	r1, sl
 80018e6:	ebb2 0801 	subs.w	r8, r2, r1
 80018ea:	4659      	mov	r1, fp
 80018ec:	eb63 0901 	sbc.w	r9, r3, r1
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001900:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001904:	4690      	mov	r8, r2
 8001906:	4699      	mov	r9, r3
 8001908:	4623      	mov	r3, r4
 800190a:	eb18 0303 	adds.w	r3, r8, r3
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	462b      	mov	r3, r5
 8001912:	eb49 0303 	adc.w	r3, r9, r3
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001924:	4629      	mov	r1, r5
 8001926:	024b      	lsls	r3, r1, #9
 8001928:	4621      	mov	r1, r4
 800192a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800192e:	4621      	mov	r1, r4
 8001930:	024a      	lsls	r2, r1, #9
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800193a:	2200      	movs	r2, #0
 800193c:	65bb      	str	r3, [r7, #88]	; 0x58
 800193e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001940:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001944:	f7fe fcae 	bl	80002a4 <__aeabi_uldivmod>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4613      	mov	r3, r2
 800194e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001952:	e065      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x420>
 8001954:	40023800 	.word	0x40023800
 8001958:	00f42400 	.word	0x00f42400
 800195c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001960:	4b3d      	ldr	r3, [pc, #244]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x458>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	099b      	lsrs	r3, r3, #6
 8001966:	2200      	movs	r2, #0
 8001968:	4618      	mov	r0, r3
 800196a:	4611      	mov	r1, r2
 800196c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001970:	653b      	str	r3, [r7, #80]	; 0x50
 8001972:	2300      	movs	r3, #0
 8001974:	657b      	str	r3, [r7, #84]	; 0x54
 8001976:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800197a:	4642      	mov	r2, r8
 800197c:	464b      	mov	r3, r9
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	0159      	lsls	r1, r3, #5
 8001988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198c:	0150      	lsls	r0, r2, #5
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4641      	mov	r1, r8
 8001994:	1a51      	subs	r1, r2, r1
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	4649      	mov	r1, r9
 800199a:	eb63 0301 	sbc.w	r3, r3, r1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019ac:	4659      	mov	r1, fp
 80019ae:	018b      	lsls	r3, r1, #6
 80019b0:	4651      	mov	r1, sl
 80019b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019b6:	4651      	mov	r1, sl
 80019b8:	018a      	lsls	r2, r1, #6
 80019ba:	4651      	mov	r1, sl
 80019bc:	1a54      	subs	r4, r2, r1
 80019be:	4659      	mov	r1, fp
 80019c0:	eb63 0501 	sbc.w	r5, r3, r1
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	00eb      	lsls	r3, r5, #3
 80019ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019d2:	00e2      	lsls	r2, r4, #3
 80019d4:	4614      	mov	r4, r2
 80019d6:	461d      	mov	r5, r3
 80019d8:	4643      	mov	r3, r8
 80019da:	18e3      	adds	r3, r4, r3
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	464b      	mov	r3, r9
 80019e0:	eb45 0303 	adc.w	r3, r5, r3
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019f2:	4629      	mov	r1, r5
 80019f4:	028b      	lsls	r3, r1, #10
 80019f6:	4621      	mov	r1, r4
 80019f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019fc:	4621      	mov	r1, r4
 80019fe:	028a      	lsls	r2, r1, #10
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a08:	2200      	movs	r2, #0
 8001a0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a0c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a12:	f7fe fc47 	bl	80002a4 <__aeabi_uldivmod>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	0f1b      	lsrs	r3, r3, #28
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a3e:	e003      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	37b8      	adds	r7, #184	; 0xb8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	00f42400 	.word	0x00f42400

08001a60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e28d      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8083 	beq.w	8001b86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a80:	4b94      	ldr	r3, [pc, #592]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d019      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a8c:	4b91      	ldr	r3, [pc, #580]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a98:	4b8e      	ldr	r3, [pc, #568]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aa4:	d00c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d112      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001abe:	d10b      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d05b      	beq.n	8001b84 <HAL_RCC_OscConfig+0x124>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d157      	bne.n	8001b84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e25a      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae0:	d106      	bne.n	8001af0 <HAL_RCC_OscConfig+0x90>
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7b      	ldr	r2, [pc, #492]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e01d      	b.n	8001b2c <HAL_RCC_OscConfig+0xcc>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0xb4>
 8001afa:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a75      	ldr	r2, [pc, #468]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b73      	ldr	r3, [pc, #460]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a72      	ldr	r2, [pc, #456]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0xcc>
 8001b14:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a6e      	ldr	r2, [pc, #440]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b6c      	ldr	r3, [pc, #432]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6b      	ldr	r2, [pc, #428]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f902 	bl	8000d3c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff f8fe 	bl	8000d3c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e21f      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b61      	ldr	r3, [pc, #388]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0xdc>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f8ee 	bl	8000d3c <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff f8ea 	bl	8000d3c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e20b      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	4b57      	ldr	r3, [pc, #348]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x104>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d06f      	beq.n	8001c72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b92:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d017      	beq.n	8001bce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b9e:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d105      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001baa:	4b4a      	ldr	r3, [pc, #296]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d11c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc2:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d116      	bne.n	8001bfc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_RCC_OscConfig+0x186>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e1d3      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be6:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4937      	ldr	r1, [pc, #220]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	e03a      	b.n	8001c72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c04:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_OscConfig+0x278>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f897 	bl	8000d3c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c12:	f7ff f893 	bl	8000d3c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e1b4      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4925      	ldr	r1, [pc, #148]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
 8001c44:	e015      	b.n	8001c72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c46:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_RCC_OscConfig+0x278>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f876 	bl	8000d3c <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff f872 	bl	8000d3c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e193      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d036      	beq.n	8001cec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d016      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_RCC_OscConfig+0x27c>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7ff f856 	bl	8000d3c <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c94:	f7ff f852 	bl	8000d3c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e173      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x234>
 8001cb2:	e01b      	b.n	8001cec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7ff f83f 	bl	8000d3c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	e00e      	b.n	8001ce0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc2:	f7ff f83b 	bl	8000d3c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d907      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e15c      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	42470000 	.word	0x42470000
 8001cdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce0:	4b8a      	ldr	r3, [pc, #552]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ea      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 8097 	beq.w	8001e28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b83      	ldr	r3, [pc, #524]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10f      	bne.n	8001d2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	4b7f      	ldr	r3, [pc, #508]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a7e      	ldr	r2, [pc, #504]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b7c      	ldr	r3, [pc, #496]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	4b79      	ldr	r3, [pc, #484]	; (8001f10 <HAL_RCC_OscConfig+0x4b0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d118      	bne.n	8001d68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d36:	4b76      	ldr	r3, [pc, #472]	; (8001f10 <HAL_RCC_OscConfig+0x4b0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a75      	ldr	r2, [pc, #468]	; (8001f10 <HAL_RCC_OscConfig+0x4b0>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7fe fffb 	bl	8000d3c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7fe fff7 	bl	8000d3c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e118      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	4b6c      	ldr	r3, [pc, #432]	; (8001f10 <HAL_RCC_OscConfig+0x4b0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x31e>
 8001d70:	4b66      	ldr	r3, [pc, #408]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d74:	4a65      	ldr	r2, [pc, #404]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7c:	e01c      	b.n	8001db8 <HAL_RCC_OscConfig+0x358>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x340>
 8001d86:	4b61      	ldr	r3, [pc, #388]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	4a60      	ldr	r2, [pc, #384]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	6713      	str	r3, [r2, #112]	; 0x70
 8001d92:	4b5e      	ldr	r3, [pc, #376]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	4a5d      	ldr	r2, [pc, #372]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0x358>
 8001da0:	4b5a      	ldr	r3, [pc, #360]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	4a59      	ldr	r2, [pc, #356]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dac:	4b57      	ldr	r3, [pc, #348]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	4a56      	ldr	r2, [pc, #344]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	f023 0304 	bic.w	r3, r3, #4
 8001db6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d015      	beq.n	8001dec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7fe ffbc 	bl	8000d3c <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7fe ffb8 	bl	8000d3c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e0d7      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dde:	4b4b      	ldr	r3, [pc, #300]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0ee      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x368>
 8001dea:	e014      	b.n	8001e16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7fe ffa6 	bl	8000d3c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7fe ffa2 	bl	8000d3c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0c1      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0a:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1ee      	bne.n	8001df4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d105      	bne.n	8001e28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1c:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	4a3a      	ldr	r2, [pc, #232]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80ad 	beq.w	8001f8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e32:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d060      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d145      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <HAL_RCC_OscConfig+0x4b4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe ff76 	bl	8000d3c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe ff72 	bl	8000d3c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e093      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69da      	ldr	r2, [r3, #28]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	019b      	lsls	r3, r3, #6
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	085b      	lsrs	r3, r3, #1
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	061b      	lsls	r3, r3, #24
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	071b      	lsls	r3, r3, #28
 8001e9e:	491b      	ldr	r1, [pc, #108]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_RCC_OscConfig+0x4b4>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7fe ff47 	bl	8000d3c <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7fe ff43 	bl	8000d3c <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e064      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x452>
 8001ed0:	e05c      	b.n	8001f8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_RCC_OscConfig+0x4b4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7fe ff30 	bl	8000d3c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7fe ff2c 	bl	8000d3c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e04d      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x480>
 8001efe:	e045      	b.n	8001f8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e040      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40007000 	.word	0x40007000
 8001f14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f18:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <HAL_RCC_OscConfig+0x538>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d030      	beq.n	8001f88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d129      	bne.n	8001f88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d122      	bne.n	8001f88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d119      	bne.n	8001f88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	3b01      	subs	r3, #1
 8001f62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d10f      	bne.n	8001f88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800

08001f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e041      	b.n	8002032 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f839 	bl	800203a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4610      	mov	r0, r2
 8001fdc:	f000 f9d8 	bl	8002390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d001      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e04e      	b.n	8002106 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a23      	ldr	r2, [pc, #140]	; (8002114 <HAL_TIM_Base_Start_IT+0xc4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d022      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002092:	d01d      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <HAL_TIM_Base_Start_IT+0xc8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d018      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_TIM_Base_Start_IT+0xcc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d013      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_TIM_Base_Start_IT+0xd0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00e      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <HAL_TIM_Base_Start_IT+0xd4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d009      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a19      	ldr	r2, [pc, #100]	; (8002128 <HAL_TIM_Base_Start_IT+0xd8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d004      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a18      	ldr	r2, [pc, #96]	; (800212c <HAL_TIM_Base_Start_IT+0xdc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d111      	bne.n	80020f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d010      	beq.n	8002104 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0201 	orr.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f2:	e007      	b.n	8002104 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40010000 	.word	0x40010000
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800
 8002120:	40000c00 	.word	0x40000c00
 8002124:	40010400 	.word	0x40010400
 8002128:	40014000 	.word	0x40014000
 800212c:	40001800 	.word	0x40001800

08002130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b02      	cmp	r3, #2
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0202 	mvn.w	r2, #2
 800215c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f8ee 	bl	8002354 <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f8e0 	bl	8002340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f8f1 	bl	8002368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b04      	cmp	r3, #4
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0204 	mvn.w	r2, #4
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f8c4 	bl	8002354 <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f8b6 	bl	8002340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f8c7 	bl	8002368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d122      	bne.n	8002234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d11b      	bne.n	8002234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0208 	mvn.w	r2, #8
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2204      	movs	r2, #4
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f89a 	bl	8002354 <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f88c 	bl	8002340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f89d 	bl	8002368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b10      	cmp	r3, #16
 8002240:	d122      	bne.n	8002288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b10      	cmp	r3, #16
 800224e:	d11b      	bne.n	8002288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0210 	mvn.w	r2, #16
 8002258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2208      	movs	r2, #8
 800225e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f870 	bl	8002354 <HAL_TIM_IC_CaptureCallback>
 8002274:	e005      	b.n	8002282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f862 	bl	8002340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f873 	bl	8002368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0201 	mvn.w	r2, #1
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fc0e 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	2b80      	cmp	r3, #128	; 0x80
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d107      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f902 	bl	80024e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d107      	bne.n	800230c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f838 	bl	800237c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b20      	cmp	r3, #32
 8002318:	d10e      	bne.n	8002338 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b20      	cmp	r3, #32
 8002326:	d107      	bne.n	8002338 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0220 	mvn.w	r2, #32
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f8cc 	bl	80024d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <TIM_Base_SetConfig+0x114>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d013      	beq.n	80023d0 <TIM_Base_SetConfig+0x40>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ae:	d00f      	beq.n	80023d0 <TIM_Base_SetConfig+0x40>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a3d      	ldr	r2, [pc, #244]	; (80024a8 <TIM_Base_SetConfig+0x118>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d00b      	beq.n	80023d0 <TIM_Base_SetConfig+0x40>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a3c      	ldr	r2, [pc, #240]	; (80024ac <TIM_Base_SetConfig+0x11c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d007      	beq.n	80023d0 <TIM_Base_SetConfig+0x40>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a3b      	ldr	r2, [pc, #236]	; (80024b0 <TIM_Base_SetConfig+0x120>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d003      	beq.n	80023d0 <TIM_Base_SetConfig+0x40>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <TIM_Base_SetConfig+0x124>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d108      	bne.n	80023e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a2f      	ldr	r2, [pc, #188]	; (80024a4 <TIM_Base_SetConfig+0x114>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d02b      	beq.n	8002442 <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f0:	d027      	beq.n	8002442 <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a2c      	ldr	r2, [pc, #176]	; (80024a8 <TIM_Base_SetConfig+0x118>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d023      	beq.n	8002442 <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a2b      	ldr	r2, [pc, #172]	; (80024ac <TIM_Base_SetConfig+0x11c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01f      	beq.n	8002442 <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a2a      	ldr	r2, [pc, #168]	; (80024b0 <TIM_Base_SetConfig+0x120>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01b      	beq.n	8002442 <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a29      	ldr	r2, [pc, #164]	; (80024b4 <TIM_Base_SetConfig+0x124>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d017      	beq.n	8002442 <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <TIM_Base_SetConfig+0x128>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <TIM_Base_SetConfig+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <TIM_Base_SetConfig+0x12c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00f      	beq.n	8002442 <TIM_Base_SetConfig+0xb2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a26      	ldr	r2, [pc, #152]	; (80024c0 <TIM_Base_SetConfig+0x130>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00b      	beq.n	8002442 <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <TIM_Base_SetConfig+0x134>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d007      	beq.n	8002442 <TIM_Base_SetConfig+0xb2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <TIM_Base_SetConfig+0x138>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d003      	beq.n	8002442 <TIM_Base_SetConfig+0xb2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a23      	ldr	r2, [pc, #140]	; (80024cc <TIM_Base_SetConfig+0x13c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d108      	bne.n	8002454 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <TIM_Base_SetConfig+0x114>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d003      	beq.n	8002488 <TIM_Base_SetConfig+0xf8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <TIM_Base_SetConfig+0x124>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d103      	bne.n	8002490 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	615a      	str	r2, [r3, #20]
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40010000 	.word	0x40010000
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40000800 	.word	0x40000800
 80024b0:	40000c00 	.word	0x40000c00
 80024b4:	40010400 	.word	0x40010400
 80024b8:	40014000 	.word	0x40014000
 80024bc:	40014400 	.word	0x40014400
 80024c0:	40014800 	.word	0x40014800
 80024c4:	40001800 	.word	0x40001800
 80024c8:	40001c00 	.word	0x40001c00
 80024cc:	40002000 	.word	0x40002000

080024d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f103 0208 	add.w	r2, r3, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f04f 32ff 	mov.w	r2, #4294967295
 8002510:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f103 0208 	add.w	r2, r3, #8
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 0208 	add.w	r2, r3, #8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d103      	bne.n	80025ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e00c      	b.n	80025d4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3308      	adds	r3, #8
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	e002      	b.n	80025c8 <vListInsert+0x2e>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d2f6      	bcs.n	80025c2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	601a      	str	r2, [r3, #0]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6892      	ldr	r2, [r2, #8]
 8002622:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6852      	ldr	r2, [r2, #4]
 800262c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	d103      	bne.n	8002640 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1e5a      	subs	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002660:	b580      	push	{r7, lr}
 8002662:	b08c      	sub	sp, #48	; 0x30
 8002664:	af04      	add	r7, sp, #16
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4618      	mov	r0, r3
 8002674:	f001 f9e2 	bl	8003a3c <pvPortMalloc>
 8002678:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00e      	beq.n	800269e <xTaskCreate+0x3e>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002680:	2058      	movs	r0, #88	; 0x58
 8002682:	f001 f9db 	bl	8003a3c <pvPortMalloc>
 8002686:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <xTaskCreate+0x36>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
 8002694:	e005      	b.n	80026a2 <xTaskCreate+0x42>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002696:	6978      	ldr	r0, [r7, #20]
 8002698:	f001 fab0 	bl	8003bfc <vPortFree>
 800269c:	e001      	b.n	80026a2 <xTaskCreate+0x42>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <xTaskCreate+0x70>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026a8:	2300      	movs	r3, #0
 80026aa:	9303      	str	r3, [sp, #12]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	9302      	str	r3, [sp, #8]
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f80e 	bl	80026e0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80026c4:	69f8      	ldr	r0, [r7, #28]
 80026c6:	f000 f8a1 	bl	800280c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	e002      	b.n	80026d6 <xTaskCreate+0x76>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295
 80026d4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80026d6:	69bb      	ldr	r3, [r7, #24]
    }
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	461a      	mov	r2, r3
 80026f8:	21a5      	movs	r1, #165	; 0xa5
 80026fa:	f004 f915 	bl	8006928 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002708:	3b01      	subs	r3, #1
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f023 0307 	bic.w	r3, r3, #7
 8002716:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	617b      	str	r3, [r7, #20]
    }
 8002734:	bf00      	nop
 8002736:	e7fe      	b.n	8002736 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01f      	beq.n	800277e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	e012      	b.n	800276a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	7819      	ldrb	r1, [r3, #0]
 800274c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	4413      	add	r3, r2
 8002752:	3334      	adds	r3, #52	; 0x34
 8002754:	460a      	mov	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	4413      	add	r3, r2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	3301      	adds	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2b09      	cmp	r3, #9
 800276e:	d9e9      	bls.n	8002744 <prvInitialiseNewTask+0x64>
 8002770:	e000      	b.n	8002774 <prvInitialiseNewTask+0x94>
            {
                break;
 8002772:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800277c:	e003      	b.n	8002786 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	2b04      	cmp	r3, #4
 800278a:	d901      	bls.n	8002790 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800278c:	2304      	movs	r3, #4
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800279a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	2200      	movs	r2, #0
 80027a0:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	3304      	adds	r3, #4
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fec6 	bl	8002538 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ae:	3318      	adds	r3, #24
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fec1 	bl	8002538 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ba:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027be:	f1c3 0205 	rsb	r2, r3, #5
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80027cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ce:	3350      	adds	r3, #80	; 0x50
 80027d0:	2204      	movs	r2, #4
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f004 f8a7 	bl	8006928 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	3354      	adds	r3, #84	; 0x54
 80027de:	2201      	movs	r2, #1
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 f8a0 	bl	8006928 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	68f9      	ldr	r1, [r7, #12]
 80027ec:	69b8      	ldr	r0, [r7, #24]
 80027ee:	f000 fe4d 	bl	800348c <pxPortInitialiseStack>
 80027f2:	4602      	mov	r2, r0
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002802:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002804:	bf00      	nop
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800280c:	b5b0      	push	{r4, r5, r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af02      	add	r7, sp, #8
 8002812:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002814:	f000 ffe6 	bl	80037e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002818:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <prvAddNewTaskToReadyList+0xfc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	4a3a      	ldr	r2, [pc, #232]	; (8002908 <prvAddNewTaskToReadyList+0xfc>)
 8002820:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002822:	4b3a      	ldr	r3, [pc, #232]	; (800290c <prvAddNewTaskToReadyList+0x100>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800282a:	4a38      	ldr	r2, [pc, #224]	; (800290c <prvAddNewTaskToReadyList+0x100>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002830:	4b35      	ldr	r3, [pc, #212]	; (8002908 <prvAddNewTaskToReadyList+0xfc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d110      	bne.n	800285a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002838:	f000 fb78 	bl	8002f2c <prvInitialiseTaskLists>
 800283c:	e00d      	b.n	800285a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800283e:	4b34      	ldr	r3, [pc, #208]	; (8002910 <prvAddNewTaskToReadyList+0x104>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002846:	4b31      	ldr	r3, [pc, #196]	; (800290c <prvAddNewTaskToReadyList+0x100>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	429a      	cmp	r2, r3
 8002852:	d802      	bhi.n	800285a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002854:	4a2d      	ldr	r2, [pc, #180]	; (800290c <prvAddNewTaskToReadyList+0x100>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800285a:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <prvAddNewTaskToReadyList+0x108>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	4a2c      	ldr	r2, [pc, #176]	; (8002914 <prvAddNewTaskToReadyList+0x108>)
 8002862:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002864:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <prvAddNewTaskToReadyList+0x108>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <prvAddNewTaskToReadyList+0x94>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4618      	mov	r0, r3
 8002876:	f003 fd65 	bl	8006344 <SEGGER_SYSVIEW_OnTaskCreate>
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	461d      	mov	r5, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	461c      	mov	r4, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	1ae3      	subs	r3, r4, r3
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	462b      	mov	r3, r5
 800289c:	f001 fb7c 	bl	8003f98 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 fdd2 	bl	800644c <SEGGER_SYSVIEW_OnTaskStartReady>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	2201      	movs	r2, #1
 80028ae:	409a      	lsls	r2, r3
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <prvAddNewTaskToReadyList+0x10c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	4a18      	ldr	r2, [pc, #96]	; (8002918 <prvAddNewTaskToReadyList+0x10c>)
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4a15      	ldr	r2, [pc, #84]	; (800291c <prvAddNewTaskToReadyList+0x110>)
 80028c8:	441a      	add	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3304      	adds	r3, #4
 80028ce:	4619      	mov	r1, r3
 80028d0:	4610      	mov	r0, r2
 80028d2:	f7ff fe3e 	bl	8002552 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80028d6:	f000 ffb5 	bl	8003844 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <prvAddNewTaskToReadyList+0x104>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00e      	beq.n	8002900 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <prvAddNewTaskToReadyList+0x100>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d207      	bcs.n	8002900 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <prvAddNewTaskToReadyList+0x114>)
 80028f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bdb0      	pop	{r4, r5, r7, pc}
 8002908:	20000170 	.word	0x20000170
 800290c:	20000098 	.word	0x20000098
 8002910:	2000017c 	.word	0x2000017c
 8002914:	2000018c 	.word	0x2000018c
 8002918:	20000178 	.word	0x20000178
 800291c:	2000009c 	.word	0x2000009c
 8002920:	e000ed04 	.word	0xe000ed04

08002924 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800292c:	f000 ff5a 	bl	80037e4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <vTaskDelete+0x18>
 8002936:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <vTaskDelete+0x12c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	e000      	b.n	800293e <vTaskDelete+0x1a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3304      	adds	r3, #4
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fe61 	bl	800260c <uxListRemove>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d115      	bne.n	800297c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002954:	493f      	ldr	r1, [pc, #252]	; (8002a54 <vTaskDelete+0x130>)
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10a      	bne.n	800297c <vTaskDelete+0x58>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	2201      	movs	r2, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43da      	mvns	r2, r3
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <vTaskDelete+0x134>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4013      	ands	r3, r2
 8002978:	4a37      	ldr	r2, [pc, #220]	; (8002a58 <vTaskDelete+0x134>)
 800297a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	d004      	beq.n	800298e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3318      	adds	r3, #24
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fe3f 	bl	800260c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800298e:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <vTaskDelete+0x138>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	4a31      	ldr	r2, [pc, #196]	; (8002a5c <vTaskDelete+0x138>)
 8002996:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002998:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <vTaskDelete+0x12c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d118      	bne.n	80029d4 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3304      	adds	r3, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	482d      	ldr	r0, [pc, #180]	; (8002a60 <vTaskDelete+0x13c>)
 80029aa:	f7ff fdd2 	bl	8002552 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80029ae:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <vTaskDelete+0x140>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3301      	adds	r3, #1
 80029b4:	4a2b      	ldr	r2, [pc, #172]	; (8002a64 <vTaskDelete+0x140>)
 80029b6:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 fde8 	bl	8006590 <SEGGER_SYSVIEW_ShrinkId>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4619      	mov	r1, r3
 80029c4:	2022      	movs	r0, #34	; 0x22
 80029c6:	f002 ff87 	bl	80058d8 <SEGGER_SYSVIEW_RecordU32>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 fb4b 	bl	8004068 <SYSVIEW_DeleteTask>
 80029d2:	e016      	b.n	8002a02 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80029d4:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <vTaskDelete+0x144>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3b01      	subs	r3, #1
 80029da:	4a23      	ldr	r2, [pc, #140]	; (8002a68 <vTaskDelete+0x144>)
 80029dc:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f003 fdd5 	bl	8006590 <SEGGER_SYSVIEW_ShrinkId>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4619      	mov	r1, r3
 80029ea:	2022      	movs	r0, #34	; 0x22
 80029ec:	f002 ff74 	bl	80058d8 <SEGGER_SYSVIEW_RecordU32>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 fb38 	bl	8004068 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fb05 	bl	8003008 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80029fe:	f000 fb13 	bl	8003028 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002a02:	f000 ff1f 	bl	8003844 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <vTaskDelete+0x148>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01b      	beq.n	8002a46 <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <vTaskDelete+0x12c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d116      	bne.n	8002a46 <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <vTaskDelete+0x14c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <vTaskDelete+0x112>
        __asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	60bb      	str	r3, [r7, #8]
    }
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <vTaskDelete+0x150>)
 8002a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000098 	.word	0x20000098
 8002a54:	2000009c 	.word	0x2000009c
 8002a58:	20000178 	.word	0x20000178
 8002a5c:	2000018c 	.word	0x2000018c
 8002a60:	20000144 	.word	0x20000144
 8002a64:	20000158 	.word	0x20000158
 8002a68:	20000170 	.word	0x20000170
 8002a6c:	2000017c 	.word	0x2000017c
 8002a70:	20000198 	.word	0x20000198
 8002a74:	e000ed04 	.word	0xe000ed04

08002a78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002a7e:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <vTaskStartScheduler+0x98>)
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2300      	movs	r3, #0
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	2300      	movs	r3, #0
 8002a88:	2282      	movs	r2, #130	; 0x82
 8002a8a:	4922      	ldr	r1, [pc, #136]	; (8002b14 <vTaskStartScheduler+0x9c>)
 8002a8c:	4822      	ldr	r0, [pc, #136]	; (8002b18 <vTaskStartScheduler+0xa0>)
 8002a8e:	f7ff fde7 	bl	8002660 <xTaskCreate>
 8002a92:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d124      	bne.n	8002ae4 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	60bb      	str	r3, [r7, #8]
    }
 8002aac:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <vTaskStartScheduler+0xa4>)
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <vTaskStartScheduler+0xa8>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002abc:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <vTaskStartScheduler+0xac>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <vTaskStartScheduler+0xb0>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <vTaskStartScheduler+0x98>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d102      	bne.n	8002ad4 <vTaskStartScheduler+0x5c>
 8002ace:	f003 fc1d 	bl	800630c <SEGGER_SYSVIEW_OnIdle>
 8002ad2:	e004      	b.n	8002ade <vTaskStartScheduler+0x66>
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <vTaskStartScheduler+0xb0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 fc75 	bl	80063c8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002ade:	f000 fd61 	bl	80035a4 <xPortStartScheduler>
 8002ae2:	e00e      	b.n	8002b02 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d10a      	bne.n	8002b02 <vTaskStartScheduler+0x8a>
        __asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	607b      	str	r3, [r7, #4]
    }
 8002afe:	bf00      	nop
 8002b00:	e7fe      	b.n	8002b00 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <vTaskStartScheduler+0xb4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000194 	.word	0x20000194
 8002b14:	080069ec 	.word	0x080069ec
 8002b18:	08002efd 	.word	0x08002efd
 8002b1c:	20000190 	.word	0x20000190
 8002b20:	2000017c 	.word	0x2000017c
 8002b24:	20000174 	.word	0x20000174
 8002b28:	20000098 	.word	0x20000098
 8002b2c:	2000000c 	.word	0x2000000c

08002b30 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <vTaskSuspendAll+0x18>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <vTaskSuspendAll+0x18>)
 8002b3c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	20000198 	.word	0x20000198

08002b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b5a:	4b43      	ldr	r3, [pc, #268]	; (8002c68 <xTaskResumeAll+0x11c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <xTaskResumeAll+0x2c>
        __asm volatile
 8002b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	603b      	str	r3, [r7, #0]
    }
 8002b74:	bf00      	nop
 8002b76:	e7fe      	b.n	8002b76 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b78:	f000 fe34 	bl	80037e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b7c:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <xTaskResumeAll+0x11c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	4a39      	ldr	r2, [pc, #228]	; (8002c68 <xTaskResumeAll+0x11c>)
 8002b84:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b86:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <xTaskResumeAll+0x11c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d165      	bne.n	8002c5a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b8e:	4b37      	ldr	r3, [pc, #220]	; (8002c6c <xTaskResumeAll+0x120>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d061      	beq.n	8002c5a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b96:	e032      	b.n	8002bfe <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b98:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <xTaskResumeAll+0x124>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3318      	adds	r3, #24
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fd31 	bl	800260c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3304      	adds	r3, #4
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fd2c 	bl	800260c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 fc48 	bl	800644c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <xTaskResumeAll+0x128>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <xTaskResumeAll+0x128>)
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4a27      	ldr	r2, [pc, #156]	; (8002c78 <xTaskResumeAll+0x12c>)
 8002bdc:	441a      	add	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3304      	adds	r3, #4
 8002be2:	4619      	mov	r1, r3
 8002be4:	4610      	mov	r0, r2
 8002be6:	f7ff fcb4 	bl	8002552 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bee:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <xTaskResumeAll+0x130>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d302      	bcc.n	8002bfe <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <xTaskResumeAll+0x134>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <xTaskResumeAll+0x124>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1c8      	bne.n	8002b98 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002c0c:	f000 fa0c 	bl	8003028 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c10:	4b1c      	ldr	r3, [pc, #112]	; (8002c84 <xTaskResumeAll+0x138>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d010      	beq.n	8002c3e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c1c:	f000 f848 	bl	8002cb0 <xTaskIncrementTick>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <xTaskResumeAll+0x134>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f1      	bne.n	8002c1c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <xTaskResumeAll+0x138>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <xTaskResumeAll+0x134>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d009      	beq.n	8002c5a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002c46:	2301      	movs	r3, #1
 8002c48:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <xTaskResumeAll+0x13c>)
 8002c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c5a:	f000 fdf3 	bl	8003844 <vPortExitCritical>

    return xAlreadyYielded;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000198 	.word	0x20000198
 8002c6c:	20000170 	.word	0x20000170
 8002c70:	20000130 	.word	0x20000130
 8002c74:	20000178 	.word	0x20000178
 8002c78:	2000009c 	.word	0x2000009c
 8002c7c:	20000098 	.word	0x20000098
 8002c80:	20000184 	.word	0x20000184
 8002c84:	20000180 	.word	0x20000180
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c92:	f000 fe93 	bl	80039bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <xTaskGetTickCountFromISR+0x20>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ca0:	683b      	ldr	r3, [r7, #0]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000174 	.word	0x20000174

08002cb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cba:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <xTaskIncrementTick+0x14c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 8092 	bne.w	8002de8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cc4:	4b4e      	ldr	r3, [pc, #312]	; (8002e00 <xTaskIncrementTick+0x150>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ccc:	4a4c      	ldr	r2, [pc, #304]	; (8002e00 <xTaskIncrementTick+0x150>)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d120      	bne.n	8002d1a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002cd8:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <xTaskIncrementTick+0x154>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	603b      	str	r3, [r7, #0]
    }
 8002cf4:	bf00      	nop
 8002cf6:	e7fe      	b.n	8002cf6 <xTaskIncrementTick+0x46>
 8002cf8:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <xTaskIncrementTick+0x154>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b42      	ldr	r3, [pc, #264]	; (8002e08 <xTaskIncrementTick+0x158>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a40      	ldr	r2, [pc, #256]	; (8002e04 <xTaskIncrementTick+0x154>)
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4a40      	ldr	r2, [pc, #256]	; (8002e08 <xTaskIncrementTick+0x158>)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <xTaskIncrementTick+0x15c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	4a3e      	ldr	r2, [pc, #248]	; (8002e0c <xTaskIncrementTick+0x15c>)
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	f000 f987 	bl	8003028 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <xTaskIncrementTick+0x160>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d34c      	bcc.n	8002dbe <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d24:	4b37      	ldr	r3, [pc, #220]	; (8002e04 <xTaskIncrementTick+0x154>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d2e:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <xTaskIncrementTick+0x160>)
 8002d30:	f04f 32ff 	mov.w	r2, #4294967295
 8002d34:	601a      	str	r2, [r3, #0]
                    break;
 8002d36:	e042      	b.n	8002dbe <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d38:	4b32      	ldr	r3, [pc, #200]	; (8002e04 <xTaskIncrementTick+0x154>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d203      	bcs.n	8002d58 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d50:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <xTaskIncrementTick+0x160>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d56:	e032      	b.n	8002dbe <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fc55 	bl	800260c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d004      	beq.n	8002d74 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	3318      	adds	r3, #24
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fc4c 	bl	800260c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 fb68 	bl	800644c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	2201      	movs	r2, #1
 8002d82:	409a      	lsls	r2, r3
 8002d84:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <xTaskIncrementTick+0x164>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <xTaskIncrementTick+0x164>)
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <xTaskIncrementTick+0x168>)
 8002d9c:	441a      	add	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	3304      	adds	r3, #4
 8002da2:	4619      	mov	r1, r3
 8002da4:	4610      	mov	r0, r2
 8002da6:	f7ff fbd4 	bl	8002552 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dae:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <xTaskIncrementTick+0x16c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d3b5      	bcc.n	8002d24 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002db8:	2301      	movs	r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dbc:	e7b2      	b.n	8002d24 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <xTaskIncrementTick+0x16c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	4914      	ldr	r1, [pc, #80]	; (8002e18 <xTaskIncrementTick+0x168>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d901      	bls.n	8002dda <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <xTaskIncrementTick+0x170>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002de2:	2301      	movs	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	e004      	b.n	8002df2 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <xTaskIncrementTick+0x174>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <xTaskIncrementTick+0x174>)
 8002df0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002df2:	697b      	ldr	r3, [r7, #20]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000198 	.word	0x20000198
 8002e00:	20000174 	.word	0x20000174
 8002e04:	20000128 	.word	0x20000128
 8002e08:	2000012c 	.word	0x2000012c
 8002e0c:	20000188 	.word	0x20000188
 8002e10:	20000190 	.word	0x20000190
 8002e14:	20000178 	.word	0x20000178
 8002e18:	2000009c 	.word	0x2000009c
 8002e1c:	20000098 	.word	0x20000098
 8002e20:	20000184 	.word	0x20000184
 8002e24:	20000180 	.word	0x20000180

08002e28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <vTaskSwitchContext+0xbc>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002e36:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <vTaskSwitchContext+0xc0>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002e3c:	e04d      	b.n	8002eda <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002e3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <vTaskSwitchContext+0xc0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e44:	4b29      	ldr	r3, [pc, #164]	; (8002eec <vTaskSwitchContext+0xc4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	f1c3 031f 	rsb	r3, r3, #31
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	4925      	ldr	r1, [pc, #148]	; (8002ef0 <vTaskSwitchContext+0xc8>)
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	607b      	str	r3, [r7, #4]
    }
 8002e80:	bf00      	nop
 8002e82:	e7fe      	b.n	8002e82 <vTaskSwitchContext+0x5a>
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <vTaskSwitchContext+0xc8>)
 8002e90:	4413      	add	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d104      	bne.n	8002eb4 <vTaskSwitchContext+0x8c>
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <vTaskSwitchContext+0xcc>)
 8002ebc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <vTaskSwitchContext+0xcc>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <vTaskSwitchContext+0xd0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d102      	bne.n	8002ed0 <vTaskSwitchContext+0xa8>
 8002eca:	f003 fa1f 	bl	800630c <SEGGER_SYSVIEW_OnIdle>
}
 8002ece:	e004      	b.n	8002eda <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <vTaskSwitchContext+0xcc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f003 fa77 	bl	80063c8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002eda:	bf00      	nop
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000198 	.word	0x20000198
 8002ee8:	20000184 	.word	0x20000184
 8002eec:	20000178 	.word	0x20000178
 8002ef0:	2000009c 	.word	0x2000009c
 8002ef4:	20000098 	.word	0x20000098
 8002ef8:	20000194 	.word	0x20000194

08002efc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002f04:	f000 f852 	bl	8002fac <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <prvIdleTask+0x28>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d9f9      	bls.n	8002f04 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <prvIdleTask+0x2c>)
 8002f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002f20:	e7f0      	b.n	8002f04 <prvIdleTask+0x8>
 8002f22:	bf00      	nop
 8002f24:	2000009c 	.word	0x2000009c
 8002f28:	e000ed04 	.word	0xe000ed04

08002f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	e00c      	b.n	8002f52 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <prvInitialiseTaskLists+0x60>)
 8002f44:	4413      	add	r3, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fad6 	bl	80024f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d9ef      	bls.n	8002f38 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002f58:	480d      	ldr	r0, [pc, #52]	; (8002f90 <prvInitialiseTaskLists+0x64>)
 8002f5a:	f7ff facd 	bl	80024f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002f5e:	480d      	ldr	r0, [pc, #52]	; (8002f94 <prvInitialiseTaskLists+0x68>)
 8002f60:	f7ff faca 	bl	80024f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002f64:	480c      	ldr	r0, [pc, #48]	; (8002f98 <prvInitialiseTaskLists+0x6c>)
 8002f66:	f7ff fac7 	bl	80024f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002f6a:	480c      	ldr	r0, [pc, #48]	; (8002f9c <prvInitialiseTaskLists+0x70>)
 8002f6c:	f7ff fac4 	bl	80024f8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002f70:	480b      	ldr	r0, [pc, #44]	; (8002fa0 <prvInitialiseTaskLists+0x74>)
 8002f72:	f7ff fac1 	bl	80024f8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <prvInitialiseTaskLists+0x78>)
 8002f78:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <prvInitialiseTaskLists+0x64>)
 8002f7a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <prvInitialiseTaskLists+0x7c>)
 8002f7e:	4a05      	ldr	r2, [pc, #20]	; (8002f94 <prvInitialiseTaskLists+0x68>)
 8002f80:	601a      	str	r2, [r3, #0]
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	2000009c 	.word	0x2000009c
 8002f90:	20000100 	.word	0x20000100
 8002f94:	20000114 	.word	0x20000114
 8002f98:	20000130 	.word	0x20000130
 8002f9c:	20000144 	.word	0x20000144
 8002fa0:	2000015c 	.word	0x2000015c
 8002fa4:	20000128 	.word	0x20000128
 8002fa8:	2000012c 	.word	0x2000012c

08002fac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fb2:	e019      	b.n	8002fe8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002fb4:	f000 fc16 	bl	80037e4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fb8:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <prvCheckTasksWaitingTermination+0x50>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fb21 	bl	800260c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <prvCheckTasksWaitingTermination+0x54>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <prvCheckTasksWaitingTermination+0x54>)
 8002fd2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <prvCheckTasksWaitingTermination+0x58>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <prvCheckTasksWaitingTermination+0x58>)
 8002fdc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002fde:	f000 fc31 	bl	8003844 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f810 	bl	8003008 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <prvCheckTasksWaitingTermination+0x58>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e1      	bne.n	8002fb4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000144 	.word	0x20000144
 8003000:	20000170 	.word	0x20000170
 8003004:	20000158 	.word	0x20000158

08003008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fdf1 	bl	8003bfc <vPortFree>
                vPortFree( pxTCB );
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fdee 	bl	8003bfc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <prvResetNextTaskUnblockTime+0x30>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <prvResetNextTaskUnblockTime+0x34>)
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800303e:	e005      	b.n	800304c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <prvResetNextTaskUnblockTime+0x30>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a04      	ldr	r2, [pc, #16]	; (800305c <prvResetNextTaskUnblockTime+0x34>)
 800304a:	6013      	str	r3, [r2, #0]
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000128 	.word	0x20000128
 800305c:	20000190 	.word	0x20000190

08003060 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	613b      	str	r3, [r7, #16]
    }
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800308a:	f000 fbab 	bl	80037e4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <xTaskGenericNotifyWait+0x108>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4413      	add	r3, r2
 8003096:	3354      	adds	r3, #84	; 0x54
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d022      	beq.n	80030e6 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80030a0:	4b31      	ldr	r3, [pc, #196]	; (8003168 <xTaskGenericNotifyWait+0x108>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	3214      	adds	r2, #20
 80030a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	43d2      	mvns	r2, r2
 80030b0:	4011      	ands	r1, r2
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	3214      	adds	r2, #20
 80030b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80030ba:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <xTaskGenericNotifyWait+0x108>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4413      	add	r3, r2
 80030c2:	3354      	adds	r3, #84	; 0x54
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030ce:	2101      	movs	r1, #1
 80030d0:	6a38      	ldr	r0, [r7, #32]
 80030d2:	f000 f963 	bl	800339c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80030d6:	4b25      	ldr	r3, [pc, #148]	; (800316c <xTaskGenericNotifyWait+0x10c>)
 80030d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80030e6:	f000 fbad 	bl	8003844 <vPortExitCritical>

        taskENTER_CRITICAL();
 80030ea:	f000 fb7b 	bl	80037e4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	2040      	movs	r0, #64	; 0x40
 80030fc:	f002 fc82 	bl	8005a04 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003106:	4b18      	ldr	r3, [pc, #96]	; (8003168 <xTaskGenericNotifyWait+0x108>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	3214      	adds	r2, #20
 800310e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <xTaskGenericNotifyWait+0x108>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4413      	add	r3, r2
 800311e:	3354      	adds	r3, #84	; 0x54
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d002      	beq.n	800312e <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	e00e      	b.n	800314c <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <xTaskGenericNotifyWait+0x108>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	3214      	adds	r2, #20
 8003136:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	43d2      	mvns	r2, r2
 800313e:	4011      	ands	r1, r2
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	3214      	adds	r2, #20
 8003144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <xTaskGenericNotifyWait+0x108>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	3354      	adds	r3, #84	; 0x54
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800315a:	f000 fb73 	bl	8003844 <vPortExitCritical>

        return xReturn;
 800315e:	697b      	ldr	r3, [r7, #20]
    }
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000098 	.word	0x20000098
 800316c:	e000ed04 	.word	0xe000ed04

08003170 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003170:	b580      	push	{r7, lr}
 8003172:	b092      	sub	sp, #72	; 0x48
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800317e:	2301      	movs	r3, #1
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031ba:	f000 fbff 	bl	80039bc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	63bb      	str	r3, [r7, #56]	; 0x38

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80031c2:	f3ef 8211 	mrs	r2, BASEPRI
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	627a      	str	r2, [r7, #36]	; 0x24
 80031d8:	623b      	str	r3, [r7, #32]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80031de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d006      	beq.n	80031f2 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80031e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	3214      	adds	r2, #20
 80031ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80031f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4413      	add	r3, r2
 80031f8:	3354      	adds	r3, #84	; 0x54
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4413      	add	r3, r2
 8003206:	3354      	adds	r3, #84	; 0x54
 8003208:	2202      	movs	r2, #2
 800320a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	2b04      	cmp	r3, #4
 8003210:	d83b      	bhi.n	800328a <xTaskGenericNotifyFromISR+0x11a>
 8003212:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <xTaskGenericNotifyFromISR+0xa8>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	080032a9 	.word	0x080032a9
 800321c:	0800322d 	.word	0x0800322d
 8003220:	08003249 	.word	0x08003249
 8003224:	08003261 	.word	0x08003261
 8003228:	0800326f 	.word	0x0800326f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	3214      	adds	r2, #20
 8003232:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	ea42 0103 	orr.w	r1, r2, r3
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	3214      	adds	r2, #20
 8003242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003246:	e032      	b.n	80032ae <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	3214      	adds	r2, #20
 800324e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003252:	1c59      	adds	r1, r3, #1
 8003254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	3214      	adds	r2, #20
 800325a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800325e:	e026      	b.n	80032ae <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	3214      	adds	r2, #20
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800326c:	e01f      	b.n	80032ae <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800326e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003272:	2b02      	cmp	r3, #2
 8003274:	d006      	beq.n	8003284 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	3214      	adds	r2, #20
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003282:	e014      	b.n	80032ae <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003284:	2300      	movs	r3, #0
 8003286:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8003288:	e011      	b.n	80032ae <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800328a:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <xTaskGenericNotifyFromISR+0x210>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00c      	beq.n	80032ac <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	61fb      	str	r3, [r7, #28]
    }
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80032a8:	bf00      	nop
 80032aa:	e000      	b.n	80032ae <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80032ac:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	4618      	mov	r0, r3
 80032b2:	f003 f96d 	bl	8006590 <SEGGER_SYSVIEW_ShrinkId>
 80032b6:	78f9      	ldrb	r1, [r7, #3]
 80032b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032bc:	9201      	str	r2, [sp, #4]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	460b      	mov	r3, r1
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4601      	mov	r1, r0
 80032c6:	203f      	movs	r0, #63	; 0x3f
 80032c8:	f002 fc2e 	bl	8005b28 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80032cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d149      	bne.n	8003368 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80032d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	61bb      	str	r3, [r7, #24]
    }
 80032ee:	bf00      	nop
 80032f0:	e7fe      	b.n	80032f0 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <xTaskGenericNotifyFromISR+0x214>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d120      	bne.n	800333c <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	3304      	adds	r3, #4
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff f984 	bl	800260c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	4618      	mov	r0, r3
 8003308:	f003 f8a0 	bl	800644c <SEGGER_SYSVIEW_OnTaskStartReady>
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	2201      	movs	r2, #1
 8003312:	409a      	lsls	r2, r3
 8003314:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <xTaskGenericNotifyFromISR+0x218>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4313      	orrs	r3, r2
 800331a:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <xTaskGenericNotifyFromISR+0x218>)
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4a18      	ldr	r2, [pc, #96]	; (800338c <xTaskGenericNotifyFromISR+0x21c>)
 800332c:	441a      	add	r2, r3
 800332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003330:	3304      	adds	r3, #4
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f7ff f90c 	bl	8002552 <vListInsertEnd>
 800333a:	e005      	b.n	8003348 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	3318      	adds	r3, #24
 8003340:	4619      	mov	r1, r3
 8003342:	4813      	ldr	r0, [pc, #76]	; (8003390 <xTaskGenericNotifyFromISR+0x220>)
 8003344:	f7ff f905 	bl	8002552 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <xTaskGenericNotifyFromISR+0x224>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	429a      	cmp	r2, r3
 8003354:	d908      	bls.n	8003368 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800335c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <xTaskGenericNotifyFromISR+0x228>)
 8003364:	2201      	movs	r2, #1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003372:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8003376:	4618      	mov	r0, r3
 8003378:	3740      	adds	r7, #64	; 0x40
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000174 	.word	0x20000174
 8003384:	20000198 	.word	0x20000198
 8003388:	20000178 	.word	0x20000178
 800338c:	2000009c 	.word	0x2000009c
 8003390:	20000130 	.word	0x20000130
 8003394:	20000098 	.word	0x20000098
 8003398:	20000184 	.word	0x20000184

0800339c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80033a6:	4b32      	ldr	r3, [pc, #200]	; (8003470 <prvAddCurrentTaskToDelayedList+0xd4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033ac:	4b31      	ldr	r3, [pc, #196]	; (8003474 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3304      	adds	r3, #4
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f92a 	bl	800260c <uxListRemove>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033be:	4b2d      	ldr	r3, [pc, #180]	; (8003474 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2201      	movs	r2, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <prvAddCurrentTaskToDelayedList+0xdc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4013      	ands	r3, r2
 80033d2:	4a29      	ldr	r2, [pc, #164]	; (8003478 <prvAddCurrentTaskToDelayedList+0xdc>)
 80033d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d110      	bne.n	8003400 <prvAddCurrentTaskToDelayedList+0x64>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	211b      	movs	r1, #27
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 f870 	bl	80064d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033f0:	4b20      	ldr	r3, [pc, #128]	; (8003474 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	4820      	ldr	r0, [pc, #128]	; (800347c <prvAddCurrentTaskToDelayedList+0xe0>)
 80033fa:	f7ff f8aa 	bl	8002552 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80033fe:	e032      	b.n	8003466 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <prvAddCurrentTaskToDelayedList+0xd8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	429a      	cmp	r2, r3
 8003416:	d20f      	bcs.n	8003438 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003418:	4b16      	ldr	r3, [pc, #88]	; (8003474 <prvAddCurrentTaskToDelayedList+0xd8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2104      	movs	r1, #4
 800341e:	4618      	mov	r0, r3
 8003420:	f003 f856 	bl	80064d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003424:	4b16      	ldr	r3, [pc, #88]	; (8003480 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <prvAddCurrentTaskToDelayedList+0xd8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3304      	adds	r3, #4
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f7ff f8b2 	bl	800259a <vListInsert>
}
 8003436:	e016      	b.n	8003466 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003438:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <prvAddCurrentTaskToDelayedList+0xd8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2104      	movs	r1, #4
 800343e:	4618      	mov	r0, r3
 8003440:	f003 f846 	bl	80064d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <prvAddCurrentTaskToDelayedList+0xd8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3304      	adds	r3, #4
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f7ff f8a2 	bl	800259a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003456:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <prvAddCurrentTaskToDelayedList+0xec>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	d202      	bcs.n	8003466 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003460:	4a09      	ldr	r2, [pc, #36]	; (8003488 <prvAddCurrentTaskToDelayedList+0xec>)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6013      	str	r3, [r2, #0]
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000174 	.word	0x20000174
 8003474:	20000098 	.word	0x20000098
 8003478:	20000178 	.word	0x20000178
 800347c:	2000015c 	.word	0x2000015c
 8003480:	2000012c 	.word	0x2000012c
 8003484:	20000128 	.word	0x20000128
 8003488:	20000190 	.word	0x20000190

0800348c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3b04      	subs	r3, #4
 800349c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	3b04      	subs	r3, #4
 80034aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f023 0201 	bic.w	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3b04      	subs	r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80034bc:	4a0c      	ldr	r2, [pc, #48]	; (80034f0 <pxPortInitialiseStack+0x64>)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3b14      	subs	r3, #20
 80034c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3b04      	subs	r3, #4
 80034d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f06f 0202 	mvn.w	r2, #2
 80034da:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3b20      	subs	r3, #32
 80034e0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80034e2:	68fb      	ldr	r3, [r7, #12]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	080034f5 	.word	0x080034f5

080034f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80034fe:	4b12      	ldr	r3, [pc, #72]	; (8003548 <prvTaskExitError+0x54>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d00a      	beq.n	800351e <prvTaskExitError+0x2a>
        __asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	60fb      	str	r3, [r7, #12]
    }
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <prvTaskExitError+0x28>
        __asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	60bb      	str	r3, [r7, #8]
    }
 8003530:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003532:	bf00      	nop
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0fc      	beq.n	8003534 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800353a:	bf00      	nop
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	20000010 	.word	0x20000010
 800354c:	00000000 	.word	0x00000000

08003550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003550:	4b07      	ldr	r3, [pc, #28]	; (8003570 <pxCurrentTCBConst2>)
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	6808      	ldr	r0, [r1, #0]
 8003556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800355a:	f380 8809 	msr	PSP, r0
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f04f 0000 	mov.w	r0, #0
 8003566:	f380 8811 	msr	BASEPRI, r0
 800356a:	4770      	bx	lr
 800356c:	f3af 8000 	nop.w

08003570 <pxCurrentTCBConst2>:
 8003570:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop

08003578 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003578:	4808      	ldr	r0, [pc, #32]	; (800359c <prvPortStartFirstTask+0x24>)
 800357a:	6800      	ldr	r0, [r0, #0]
 800357c:	6800      	ldr	r0, [r0, #0]
 800357e:	f380 8808 	msr	MSP, r0
 8003582:	f04f 0000 	mov.w	r0, #0
 8003586:	f380 8814 	msr	CONTROL, r0
 800358a:	b662      	cpsie	i
 800358c:	b661      	cpsie	f
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	df00      	svc	0
 8003598:	bf00      	nop
 800359a:	0000      	.short	0x0000
 800359c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop

080035a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035aa:	4b46      	ldr	r3, [pc, #280]	; (80036c4 <xPortStartScheduler+0x120>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a46      	ldr	r2, [pc, #280]	; (80036c8 <xPortStartScheduler+0x124>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d10a      	bne.n	80035ca <xPortStartScheduler+0x26>
        __asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	613b      	str	r3, [r7, #16]
    }
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035ca:	4b3e      	ldr	r3, [pc, #248]	; (80036c4 <xPortStartScheduler+0x120>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a3f      	ldr	r2, [pc, #252]	; (80036cc <xPortStartScheduler+0x128>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10a      	bne.n	80035ea <xPortStartScheduler+0x46>
        __asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	60fb      	str	r3, [r7, #12]
    }
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035ea:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <xPortStartScheduler+0x12c>)
 80035ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	22ff      	movs	r2, #255	; 0xff
 80035fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <xPortStartScheduler+0x130>)
 8003610:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003612:	4b31      	ldr	r3, [pc, #196]	; (80036d8 <xPortStartScheduler+0x134>)
 8003614:	2207      	movs	r2, #7
 8003616:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003618:	e009      	b.n	800362e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800361a:	4b2f      	ldr	r3, [pc, #188]	; (80036d8 <xPortStartScheduler+0x134>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3b01      	subs	r3, #1
 8003620:	4a2d      	ldr	r2, [pc, #180]	; (80036d8 <xPortStartScheduler+0x134>)
 8003622:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	b2db      	uxtb	r3, r3
 800362c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b80      	cmp	r3, #128	; 0x80
 8003638:	d0ef      	beq.n	800361a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800363a:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <xPortStartScheduler+0x134>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f1c3 0307 	rsb	r3, r3, #7
 8003642:	2b04      	cmp	r3, #4
 8003644:	d00a      	beq.n	800365c <xPortStartScheduler+0xb8>
        __asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	60bb      	str	r3, [r7, #8]
    }
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800365c:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <xPortStartScheduler+0x134>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <xPortStartScheduler+0x134>)
 8003664:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003666:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <xPortStartScheduler+0x134>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800366e:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <xPortStartScheduler+0x134>)
 8003670:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800367a:	4b18      	ldr	r3, [pc, #96]	; (80036dc <xPortStartScheduler+0x138>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a17      	ldr	r2, [pc, #92]	; (80036dc <xPortStartScheduler+0x138>)
 8003680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003684:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003686:	4b15      	ldr	r3, [pc, #84]	; (80036dc <xPortStartScheduler+0x138>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a14      	ldr	r2, [pc, #80]	; (80036dc <xPortStartScheduler+0x138>)
 800368c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003690:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003692:	f000 f963 	bl	800395c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003696:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <xPortStartScheduler+0x13c>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800369c:	f000 f982 	bl	80039a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036a0:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <xPortStartScheduler+0x140>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a0f      	ldr	r2, [pc, #60]	; (80036e4 <xPortStartScheduler+0x140>)
 80036a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80036ac:	f7ff ff64 	bl	8003578 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80036b0:	f7ff fbba 	bl	8002e28 <vTaskSwitchContext>
    prvTaskExitError();
 80036b4:	f7ff ff1e 	bl	80034f4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000ed00 	.word	0xe000ed00
 80036c8:	410fc271 	.word	0x410fc271
 80036cc:	410fc270 	.word	0x410fc270
 80036d0:	e000e400 	.word	0xe000e400
 80036d4:	2000019c 	.word	0x2000019c
 80036d8:	200001a0 	.word	0x200001a0
 80036dc:	e000ed20 	.word	0xe000ed20
 80036e0:	20000010 	.word	0x20000010
 80036e4:	e000ef34 	.word	0xe000ef34

080036e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036ee:	4b37      	ldr	r3, [pc, #220]	; (80037cc <vInitPrioGroupValue+0xe4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a37      	ldr	r2, [pc, #220]	; (80037d0 <vInitPrioGroupValue+0xe8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d10a      	bne.n	800370e <vInitPrioGroupValue+0x26>
        __asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	613b      	str	r3, [r7, #16]
    }
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800370e:	4b2f      	ldr	r3, [pc, #188]	; (80037cc <vInitPrioGroupValue+0xe4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a30      	ldr	r2, [pc, #192]	; (80037d4 <vInitPrioGroupValue+0xec>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d10a      	bne.n	800372e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	60fb      	str	r3, [r7, #12]
    }
 800372a:	bf00      	nop
 800372c:	e7fe      	b.n	800372c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800372e:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <vInitPrioGroupValue+0xf0>)
 8003730:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	22ff      	movs	r2, #255	; 0xff
 800373e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4b22      	ldr	r3, [pc, #136]	; (80037dc <vInitPrioGroupValue+0xf4>)
 8003754:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <vInitPrioGroupValue+0xf8>)
 8003758:	2207      	movs	r2, #7
 800375a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800375c:	e009      	b.n	8003772 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <vInitPrioGroupValue+0xf8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3b01      	subs	r3, #1
 8003764:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <vInitPrioGroupValue+0xf8>)
 8003766:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377a:	2b80      	cmp	r3, #128	; 0x80
 800377c:	d0ef      	beq.n	800375e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <vInitPrioGroupValue+0xf8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f1c3 0307 	rsb	r3, r3, #7
 8003786:	2b04      	cmp	r3, #4
 8003788:	d00a      	beq.n	80037a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	60bb      	str	r3, [r7, #8]
    }
 800379c:	bf00      	nop
 800379e:	e7fe      	b.n	800379e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <vInitPrioGroupValue+0xf8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <vInitPrioGroupValue+0xf8>)
 80037a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <vInitPrioGroupValue+0xf8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037b2:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <vInitPrioGroupValue+0xf8>)
 80037b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000ed00 	.word	0xe000ed00
 80037d0:	410fc271 	.word	0x410fc271
 80037d4:	410fc270 	.word	0x410fc270
 80037d8:	e000e400 	.word	0xe000e400
 80037dc:	2000019c 	.word	0x2000019c
 80037e0:	200001a0 	.word	0x200001a0

080037e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
        __asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	607b      	str	r3, [r7, #4]
    }
 80037fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <vPortEnterCritical+0x58>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	4a0d      	ldr	r2, [pc, #52]	; (800383c <vPortEnterCritical+0x58>)
 8003806:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <vPortEnterCritical+0x58>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10f      	bne.n	8003830 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <vPortEnterCritical+0x5c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <vPortEnterCritical+0x4c>
        __asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	603b      	str	r3, [r7, #0]
    }
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <vPortEnterCritical+0x4a>
    }
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	20000010 	.word	0x20000010
 8003840:	e000ed04 	.word	0xe000ed04

08003844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800384a:	4b12      	ldr	r3, [pc, #72]	; (8003894 <vPortExitCritical+0x50>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10a      	bne.n	8003868 <vPortExitCritical+0x24>
        __asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	607b      	str	r3, [r7, #4]
    }
 8003864:	bf00      	nop
 8003866:	e7fe      	b.n	8003866 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003868:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <vPortExitCritical+0x50>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3b01      	subs	r3, #1
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <vPortExitCritical+0x50>)
 8003870:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003872:	4b08      	ldr	r3, [pc, #32]	; (8003894 <vPortExitCritical+0x50>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <vPortExitCritical+0x42>
 800387a:	2300      	movs	r3, #0
 800387c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f383 8811 	msr	BASEPRI, r3
    }
 8003884:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000010 	.word	0x20000010
	...

080038a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80038a0:	f3ef 8009 	mrs	r0, PSP
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <pxCurrentTCBConst>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	f01e 0f10 	tst.w	lr, #16
 80038b0:	bf08      	it	eq
 80038b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80038b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ba:	6010      	str	r0, [r2, #0]
 80038bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80038c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038c4:	f380 8811 	msr	BASEPRI, r0
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f7ff faaa 	bl	8002e28 <vTaskSwitchContext>
 80038d4:	f04f 0000 	mov.w	r0, #0
 80038d8:	f380 8811 	msr	BASEPRI, r0
 80038dc:	bc09      	pop	{r0, r3}
 80038de:	6819      	ldr	r1, [r3, #0]
 80038e0:	6808      	ldr	r0, [r1, #0]
 80038e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e6:	f01e 0f10 	tst.w	lr, #16
 80038ea:	bf08      	it	eq
 80038ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038f0:	f380 8809 	msr	PSP, r0
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	f3af 8000 	nop.w

08003900 <pxCurrentTCBConst>:
 8003900:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop

08003908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
        __asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	607b      	str	r3, [r7, #4]
    }
 8003920:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003922:	f002 fc79 	bl	8006218 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003926:	f7ff f9c3 	bl	8002cb0 <xTaskIncrementTick>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d006      	beq.n	800393e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003930:	f002 fcd0 	bl	80062d4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <SysTick_Handler+0x50>)
 8003936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e001      	b.n	8003942 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800393e:	f002 fcad 	bl	800629c <SEGGER_SYSVIEW_RecordExitISR>
 8003942:	2300      	movs	r3, #0
 8003944:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	f383 8811 	msr	BASEPRI, r3
    }
 800394c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <vPortSetupTimerInterrupt+0x34>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <vPortSetupTimerInterrupt+0x38>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <vPortSetupTimerInterrupt+0x3c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0a      	ldr	r2, [pc, #40]	; (800399c <vPortSetupTimerInterrupt+0x40>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	099b      	lsrs	r3, r3, #6
 8003978:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <vPortSetupTimerInterrupt+0x44>)
 800397a:	3b01      	subs	r3, #1
 800397c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <vPortSetupTimerInterrupt+0x34>)
 8003980:	2207      	movs	r2, #7
 8003982:	601a      	str	r2, [r3, #0]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000e010 	.word	0xe000e010
 8003994:	e000e018 	.word	0xe000e018
 8003998:	20000000 	.word	0x20000000
 800399c:	10624dd3 	.word	0x10624dd3
 80039a0:	e000e014 	.word	0xe000e014

080039a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80039a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80039b4 <vPortEnableVFP+0x10>
 80039a8:	6801      	ldr	r1, [r0, #0]
 80039aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80039ae:	6001      	str	r1, [r0, #0]
 80039b0:	4770      	bx	lr
 80039b2:	0000      	.short	0x0000
 80039b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop

080039bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80039c2:	f3ef 8305 	mrs	r3, IPSR
 80039c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	d914      	bls.n	80039f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80039ce:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <vPortValidateInterruptPriority+0x70>)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80039d8:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <vPortValidateInterruptPriority+0x74>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	7afa      	ldrb	r2, [r7, #11]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d20a      	bcs.n	80039f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	607b      	str	r3, [r7, #4]
    }
 80039f4:	bf00      	nop
 80039f6:	e7fe      	b.n	80039f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039f8:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <vPortValidateInterruptPriority+0x78>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <vPortValidateInterruptPriority+0x7c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d90a      	bls.n	8003a1e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	603b      	str	r3, [r7, #0]
    }
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <vPortValidateInterruptPriority+0x60>
    }
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	e000e3f0 	.word	0xe000e3f0
 8003a30:	2000019c 	.word	0x2000019c
 8003a34:	e000ed0c 	.word	0xe000ed0c
 8003a38:	200001a0 	.word	0x200001a0

08003a3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003a48:	f7ff f872 	bl	8002b30 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003a4c:	4b65      	ldr	r3, [pc, #404]	; (8003be4 <pvPortMalloc+0x1a8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003a54:	f000 f934 	bl	8003cc0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a58:	4b63      	ldr	r3, [pc, #396]	; (8003be8 <pvPortMalloc+0x1ac>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f040 80a7 	bne.w	8003bb4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02d      	beq.n	8003ac8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d227      	bcs.n	8003ac8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003a78:	2208      	movs	r2, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d021      	beq.n	8003ace <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f023 0307 	bic.w	r3, r3, #7
 8003a90:	3308      	adds	r3, #8
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d214      	bcs.n	8003ac2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f023 0307 	bic.w	r3, r3, #7
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d010      	beq.n	8003ace <pvPortMalloc+0x92>
        __asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	617b      	str	r3, [r7, #20]
    }
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ac6:	e002      	b.n	8003ace <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	607b      	str	r3, [r7, #4]
 8003acc:	e000      	b.n	8003ad0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ace:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d06e      	beq.n	8003bb4 <pvPortMalloc+0x178>
 8003ad6:	4b45      	ldr	r3, [pc, #276]	; (8003bec <pvPortMalloc+0x1b0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d869      	bhi.n	8003bb4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003ae0:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <pvPortMalloc+0x1b4>)
 8003ae2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003ae4:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <pvPortMalloc+0x1b4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003aea:	e004      	b.n	8003af6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d903      	bls.n	8003b08 <pvPortMalloc+0xcc>
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f1      	bne.n	8003aec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003b08:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <pvPortMalloc+0x1a8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d050      	beq.n	8003bb4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2208      	movs	r2, #8
 8003b18:	4413      	add	r3, r2
 8003b1a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	1ad2      	subs	r2, r2, r3
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d91f      	bls.n	8003b74 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <pvPortMalloc+0x120>
        __asm volatile
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	613b      	str	r3, [r7, #16]
    }
 8003b58:	bf00      	nop
 8003b5a:	e7fe      	b.n	8003b5a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	1ad2      	subs	r2, r2, r3
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b6e:	69b8      	ldr	r0, [r7, #24]
 8003b70:	f000 f908 	bl	8003d84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <pvPortMalloc+0x1b0>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	4a1b      	ldr	r2, [pc, #108]	; (8003bec <pvPortMalloc+0x1b0>)
 8003b80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b82:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <pvPortMalloc+0x1b0>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <pvPortMalloc+0x1b8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d203      	bcs.n	8003b96 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b8e:	4b17      	ldr	r3, [pc, #92]	; (8003bec <pvPortMalloc+0x1b0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a18      	ldr	r2, [pc, #96]	; (8003bf4 <pvPortMalloc+0x1b8>)
 8003b94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <pvPortMalloc+0x1ac>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <pvPortMalloc+0x1bc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <pvPortMalloc+0x1bc>)
 8003bb2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003bb4:	f7fe ffca 	bl	8002b4c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <pvPortMalloc+0x19c>
        __asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	60fb      	str	r3, [r7, #12]
    }
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <pvPortMalloc+0x19a>
    return pvReturn;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3728      	adds	r7, #40	; 0x28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20012dac 	.word	0x20012dac
 8003be8:	20012dc0 	.word	0x20012dc0
 8003bec:	20012db0 	.word	0x20012db0
 8003bf0:	20012da4 	.word	0x20012da4
 8003bf4:	20012db4 	.word	0x20012db4
 8003bf8:	20012db8 	.word	0x20012db8

08003bfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d04d      	beq.n	8003caa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003c0e:	2308      	movs	r3, #8
 8003c10:	425b      	negs	r3, r3
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4413      	add	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <vPortFree+0xb8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10a      	bne.n	8003c40 <vPortFree+0x44>
        __asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	60fb      	str	r3, [r7, #12]
    }
 8003c3c:	bf00      	nop
 8003c3e:	e7fe      	b.n	8003c3e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <vPortFree+0x62>
        __asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	60bb      	str	r3, [r7, #8]
    }
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <vPortFree+0xb8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01e      	beq.n	8003caa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d11a      	bne.n	8003caa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <vPortFree+0xb8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	401a      	ands	r2, r3
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c84:	f7fe ff54 	bl	8002b30 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <vPortFree+0xbc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4413      	add	r3, r2
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <vPortFree+0xbc>)
 8003c94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c96:	6938      	ldr	r0, [r7, #16]
 8003c98:	f000 f874 	bl	8003d84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c9c:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <vPortFree+0xc0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	4a06      	ldr	r2, [pc, #24]	; (8003cbc <vPortFree+0xc0>)
 8003ca4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003ca6:	f7fe ff51 	bl	8002b4c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003caa:	bf00      	nop
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20012dc0 	.word	0x20012dc0
 8003cb8:	20012db0 	.word	0x20012db0
 8003cbc:	20012dbc 	.word	0x20012dbc

08003cc0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cc6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003cca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003ccc:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <prvHeapInit+0xac>)
 8003cce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00c      	beq.n	8003cf4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3307      	adds	r3, #7
 8003cde:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0307 	bic.w	r3, r3, #7
 8003ce6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	4a1f      	ldr	r2, [pc, #124]	; (8003d6c <prvHeapInit+0xac>)
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003cf8:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <prvHeapInit+0xb0>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003cfe:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <prvHeapInit+0xb0>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	4413      	add	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0307 	bic.w	r3, r3, #7
 8003d1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <prvHeapInit+0xb4>)
 8003d20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003d22:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <prvHeapInit+0xb4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2200      	movs	r2, #0
 8003d28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003d2a:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <prvHeapInit+0xb4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	1ad2      	subs	r2, r2, r3
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <prvHeapInit+0xb4>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <prvHeapInit+0xb8>)
 8003d4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <prvHeapInit+0xbc>)
 8003d56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <prvHeapInit+0xc0>)
 8003d5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d5e:	601a      	str	r2, [r3, #0]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	200001a4 	.word	0x200001a4
 8003d70:	20012da4 	.word	0x20012da4
 8003d74:	20012dac 	.word	0x20012dac
 8003d78:	20012db4 	.word	0x20012db4
 8003d7c:	20012db0 	.word	0x20012db0
 8003d80:	20012dc0 	.word	0x20012dc0

08003d84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d8c:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <prvInsertBlockIntoFreeList+0xac>)
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e002      	b.n	8003d98 <prvInsertBlockIntoFreeList+0x14>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d8f7      	bhi.n	8003d92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	4413      	add	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d108      	bne.n	8003dc6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	441a      	add	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d118      	bne.n	8003e0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <prvInsertBlockIntoFreeList+0xb0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d00d      	beq.n	8003e02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	441a      	add	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e008      	b.n	8003e14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <prvInsertBlockIntoFreeList+0xb0>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e003      	b.n	8003e14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d002      	beq.n	8003e22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20012da4 	.word	0x20012da4
 8003e34:	20012dac 	.word	0x20012dac

08003e38 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003e3c:	4803      	ldr	r0, [pc, #12]	; (8003e4c <_cbSendSystemDesc+0x14>)
 8003e3e:	f002 f995 	bl	800616c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003e42:	4803      	ldr	r0, [pc, #12]	; (8003e50 <_cbSendSystemDesc+0x18>)
 8003e44:	f002 f992 	bl	800616c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003e48:	bf00      	nop
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	080069f4 	.word	0x080069f4
 8003e50:	08006a30 	.word	0x08006a30

08003e54 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <SEGGER_SYSVIEW_Conf+0x20>)
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <SEGGER_SYSVIEW_Conf+0x20>)
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <SEGGER_SYSVIEW_Conf+0x24>)
 8003e62:	4a06      	ldr	r2, [pc, #24]	; (8003e7c <SEGGER_SYSVIEW_Conf+0x28>)
 8003e64:	f001 fcc6 	bl	80057f4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003e68:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003e6c:	f001 fd06 	bl	800587c <SEGGER_SYSVIEW_SetRAMBase>
}
 8003e70:	bf00      	nop
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000000 	.word	0x20000000
 8003e78:	08003e39 	.word	0x08003e39
 8003e7c:	08006ad0 	.word	0x08006ad0

08003e80 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]
 8003e8a:	e033      	b.n	8003ef4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003e8c:	491e      	ldr	r1, [pc, #120]	; (8003f08 <_cbSendTaskList+0x88>)
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	491a      	ldr	r1, [pc, #104]	; (8003f08 <_cbSendTaskList+0x88>)
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	3304      	adds	r3, #4
 8003eac:	6819      	ldr	r1, [r3, #0]
 8003eae:	4c16      	ldr	r4, [pc, #88]	; (8003f08 <_cbSendTaskList+0x88>)
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4423      	add	r3, r4
 8003ebc:	3308      	adds	r3, #8
 8003ebe:	681c      	ldr	r4, [r3, #0]
 8003ec0:	4d11      	ldr	r5, [pc, #68]	; (8003f08 <_cbSendTaskList+0x88>)
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	442b      	add	r3, r5
 8003ece:	330c      	adds	r3, #12
 8003ed0:	681d      	ldr	r5, [r3, #0]
 8003ed2:	4e0d      	ldr	r6, [pc, #52]	; (8003f08 <_cbSendTaskList+0x88>)
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4433      	add	r3, r6
 8003ee0:	3310      	adds	r3, #16
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	462b      	mov	r3, r5
 8003ee8:	4622      	mov	r2, r4
 8003eea:	f000 f979 	bl	80041e0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	607b      	str	r3, [r7, #4]
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <_cbSendTaskList+0x8c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d3c6      	bcc.n	8003e8c <_cbSendTaskList+0xc>
  }
}
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f08:	20012dc4 	.word	0x20012dc4
 8003f0c:	20012e64 	.word	0x20012e64

08003f10 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003f18:	f7fe feb8 	bl	8002c8c <xTaskGetTickCountFromISR>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2200      	movs	r2, #0
 8003f20:	469a      	mov	sl, r3
 8003f22:	4693      	mov	fp, r2
 8003f24:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003f28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	f04f 0a00 	mov.w	sl, #0
 8003f34:	f04f 0b00 	mov.w	fp, #0
 8003f38:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003f3c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003f40:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003f44:	4652      	mov	r2, sl
 8003f46:	465b      	mov	r3, fp
 8003f48:	1a14      	subs	r4, r2, r0
 8003f4a:	eb63 0501 	sbc.w	r5, r3, r1
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	00ab      	lsls	r3, r5, #2
 8003f58:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003f5c:	00a2      	lsls	r2, r4, #2
 8003f5e:	4614      	mov	r4, r2
 8003f60:	461d      	mov	r5, r3
 8003f62:	eb14 0800 	adds.w	r8, r4, r0
 8003f66:	eb45 0901 	adc.w	r9, r5, r1
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f7e:	4690      	mov	r8, r2
 8003f80:	4699      	mov	r9, r3
 8003f82:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003f86:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003f98 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003fa6:	2205      	movs	r2, #5
 8003fa8:	492b      	ldr	r1, [pc, #172]	; (8004058 <SYSVIEW_AddTask+0xc0>)
 8003faa:	68b8      	ldr	r0, [r7, #8]
 8003fac:	f002 fc9e 	bl	80068ec <memcmp>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d04b      	beq.n	800404e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003fb6:	4b29      	ldr	r3, [pc, #164]	; (800405c <SYSVIEW_AddTask+0xc4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b07      	cmp	r3, #7
 8003fbc:	d903      	bls.n	8003fc6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003fbe:	4828      	ldr	r0, [pc, #160]	; (8004060 <SYSVIEW_AddTask+0xc8>)
 8003fc0:	f002 fbe6 	bl	8006790 <SEGGER_SYSVIEW_Warn>
    return;
 8003fc4:	e044      	b.n	8004050 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003fc6:	4b25      	ldr	r3, [pc, #148]	; (800405c <SYSVIEW_AddTask+0xc4>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4926      	ldr	r1, [pc, #152]	; (8004064 <SYSVIEW_AddTask+0xcc>)
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <SYSVIEW_AddTask+0xc4>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4921      	ldr	r1, [pc, #132]	; (8004064 <SYSVIEW_AddTask+0xcc>)
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	3304      	adds	r3, #4
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	; (800405c <SYSVIEW_AddTask+0xc4>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	491b      	ldr	r1, [pc, #108]	; (8004064 <SYSVIEW_AddTask+0xcc>)
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	3308      	adds	r3, #8
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <SYSVIEW_AddTask+0xc4>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4916      	ldr	r1, [pc, #88]	; (8004064 <SYSVIEW_AddTask+0xcc>)
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	330c      	adds	r3, #12
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <SYSVIEW_AddTask+0xc4>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4910      	ldr	r1, [pc, #64]	; (8004064 <SYSVIEW_AddTask+0xcc>)
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	3310      	adds	r3, #16
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <SYSVIEW_AddTask+0xc4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3301      	adds	r3, #1
 8004038:	4a08      	ldr	r2, [pc, #32]	; (800405c <SYSVIEW_AddTask+0xc4>)
 800403a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f8ca 	bl	80041e0 <SYSVIEW_SendTaskInfo>
 800404c:	e000      	b.n	8004050 <SYSVIEW_AddTask+0xb8>
    return;
 800404e:	bf00      	nop

}
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	08006a40 	.word	0x08006a40
 800405c:	20012e64 	.word	0x20012e64
 8004060:	08006a48 	.word	0x08006a48
 8004064:	20012dc4 	.word	0x20012dc4

08004068 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80ab 	beq.w	80041d0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e00d      	b.n	800409c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004080:	4956      	ldr	r1, [pc, #344]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d008      	beq.n	80040a8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3301      	adds	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	4b4e      	ldr	r3, [pc, #312]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d3ec      	bcc.n	8004080 <SYSVIEW_DeleteTask+0x18>
 80040a6:	e000      	b.n	80040aa <SYSVIEW_DeleteTask+0x42>
      break;
 80040a8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80040aa:	4b4b      	ldr	r3, [pc, #300]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d111      	bne.n	80040da <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4a46      	ldr	r2, [pc, #280]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 80040c2:	4413      	add	r3, r2
 80040c4:	2214      	movs	r2, #20
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f002 fc2d 	bl	8006928 <memset>
    _NumTasks--;
 80040ce:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	4a40      	ldr	r2, [pc, #256]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e07b      	b.n	80041d2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80040da:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d276      	bcs.n	80041d2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80040e4:	4b3c      	ldr	r3, [pc, #240]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	1e5a      	subs	r2, r3, #1
 80040ea:	493c      	ldr	r1, [pc, #240]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	6819      	ldr	r1, [r3, #0]
 80040f8:	4838      	ldr	r0, [pc, #224]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4403      	add	r3, r0
 8004106:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004108:	4b33      	ldr	r3, [pc, #204]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	1e5a      	subs	r2, r3, #1
 800410e:	4933      	ldr	r1, [pc, #204]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	3304      	adds	r3, #4
 800411c:	6819      	ldr	r1, [r3, #0]
 800411e:	482f      	ldr	r0, [pc, #188]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4403      	add	r3, r0
 800412c:	3304      	adds	r3, #4
 800412e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004130:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	1e5a      	subs	r2, r3, #1
 8004136:	4929      	ldr	r1, [pc, #164]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	3308      	adds	r3, #8
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	4825      	ldr	r0, [pc, #148]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4403      	add	r3, r0
 8004154:	3308      	adds	r3, #8
 8004156:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004158:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	1e5a      	subs	r2, r3, #1
 800415e:	491f      	ldr	r1, [pc, #124]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	330c      	adds	r3, #12
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	481b      	ldr	r0, [pc, #108]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4403      	add	r3, r0
 800417c:	330c      	adds	r3, #12
 800417e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004180:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	1e5a      	subs	r2, r3, #1
 8004186:	4915      	ldr	r1, [pc, #84]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	3310      	adds	r3, #16
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	4811      	ldr	r0, [pc, #68]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4403      	add	r3, r0
 80041a4:	3310      	adds	r3, #16
 80041a6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	1e5a      	subs	r2, r3, #1
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4a09      	ldr	r2, [pc, #36]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 80041b8:	4413      	add	r3, r2
 80041ba:	2214      	movs	r2, #20
 80041bc:	2100      	movs	r1, #0
 80041be:	4618      	mov	r0, r3
 80041c0:	f002 fbb2 	bl	8006928 <memset>
    _NumTasks--;
 80041c4:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	4a03      	ldr	r2, [pc, #12]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e000      	b.n	80041d2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80041d0:	bf00      	nop
  }
}
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20012e64 	.word	0x20012e64
 80041dc:	20012dc4 	.word	0x20012dc4

080041e0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80041ee:	f107 0314 	add.w	r3, r7, #20
 80041f2:	2214      	movs	r2, #20
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f002 fb96 	bl	8006928 <memset>
  TaskInfo.TaskID     = TaskID;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004210:	f107 0314 	add.w	r3, r7, #20
 8004214:	4618      	mov	r0, r3
 8004216:	f001 feb1 	bl	8005f7c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800421a:	bf00      	nop
 800421c:	3728      	adds	r7, #40	; 0x28
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <__NVIC_EnableIRQ>:
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	2b00      	cmp	r3, #0
 8004234:	db0b      	blt.n	800424e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	f003 021f 	and.w	r2, r3, #31
 800423c:	4907      	ldr	r1, [pc, #28]	; (800425c <__NVIC_EnableIRQ+0x38>)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2001      	movs	r0, #1
 8004246:	fa00 f202 	lsl.w	r2, r0, r2
 800424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	e000e100 	.word	0xe000e100

08004260 <__NVIC_SetPriority>:
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	6039      	str	r1, [r7, #0]
 800426a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800426c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004270:	2b00      	cmp	r3, #0
 8004272:	db0a      	blt.n	800428a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	490c      	ldr	r1, [pc, #48]	; (80042ac <__NVIC_SetPriority+0x4c>)
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	0112      	lsls	r2, r2, #4
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	440b      	add	r3, r1
 8004284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004288:	e00a      	b.n	80042a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4908      	ldr	r1, [pc, #32]	; (80042b0 <__NVIC_SetPriority+0x50>)
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	3b04      	subs	r3, #4
 8004298:	0112      	lsls	r2, r2, #4
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	440b      	add	r3, r1
 800429e:	761a      	strb	r2, [r3, #24]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000e100 	.word	0xe000e100
 80042b0:	e000ed00 	.word	0xe000ed00

080042b4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80042ba:	f002 fac5 	bl	8006848 <SEGGER_SYSVIEW_IsStarted>
 80042be:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80042c6:	f001 fcdd 	bl	8005c84 <SEGGER_SYSVIEW_Start>
  }
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <_cbOnUARTRx+0x3c>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d806      	bhi.n	80042f4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80042e6:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <_cbOnUARTRx+0x3c>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	3301      	adds	r3, #1
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4b08      	ldr	r3, [pc, #32]	; (8004310 <_cbOnUARTRx+0x3c>)
 80042f0:	701a      	strb	r2, [r3, #0]
    goto Done;
 80042f2:	e009      	b.n	8004308 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80042f4:	f7ff ffde 	bl	80042b4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <_cbOnUARTRx+0x3c>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4618      	mov	r0, r3
 80042fe:	1dfb      	adds	r3, r7, #7
 8004300:	2201      	movs	r2, #1
 8004302:	4619      	mov	r1, r3
 8004304:	f000 fb9a 	bl	8004a3c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004308:	bf00      	nop
}
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000014 	.word	0x20000014

08004314 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <_cbOnUARTTx+0x5c>)
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d80f      	bhi.n	8004344 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <_cbOnUARTTx+0x5c>)
 8004326:	785b      	ldrb	r3, [r3, #1]
 8004328:	461a      	mov	r2, r3
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <_cbOnUARTTx+0x60>)
 800432c:	5c9a      	ldrb	r2, [r3, r2]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004332:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <_cbOnUARTTx+0x5c>)
 8004334:	785b      	ldrb	r3, [r3, #1]
 8004336:	3301      	adds	r3, #1
 8004338:	b2da      	uxtb	r2, r3
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <_cbOnUARTTx+0x5c>)
 800433c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800433e:	2301      	movs	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004342:	e00f      	b.n	8004364 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <_cbOnUARTTx+0x5c>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fa19 	bl	8004784 <SEGGER_RTT_ReadUpBufferNoLock>
 8004352:	4603      	mov	r3, r0
 8004354:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	da02      	bge.n	8004362 <_cbOnUARTTx+0x4e>
    r = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e000      	b.n	8004364 <_cbOnUARTTx+0x50>
  }
Done:
 8004362:	bf00      	nop
  return r;
 8004364:	68fb      	ldr	r3, [r7, #12]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000014 	.word	0x20000014
 8004374:	08006ad8 	.word	0x08006ad8

08004378 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <SEGGER_UART_init+0x1c>)
 8004382:	4905      	ldr	r1, [pc, #20]	; (8004398 <SEGGER_UART_init+0x20>)
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f863 	bl	8004450 <HIF_UART_Init>
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	080042d5 	.word	0x080042d5
 8004398:	08004315 	.word	0x08004315

0800439c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80043a2:	4b1e      	ldr	r3, [pc, #120]	; (800441c <USART2_IRQHandler+0x80>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d011      	beq.n	80043d6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <USART2_IRQHandler+0x84>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 030b 	and.w	r3, r3, #11
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d108      	bne.n	80043d6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <USART2_IRQHandler+0x88>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d004      	beq.n	80043d6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80043cc:	4b15      	ldr	r3, [pc, #84]	; (8004424 <USART2_IRQHandler+0x88>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	79fa      	ldrb	r2, [r7, #7]
 80043d2:	4610      	mov	r0, r2
 80043d4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01a      	beq.n	8004416 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <USART2_IRQHandler+0x8c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d015      	beq.n	8004414 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80043e8:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <USART2_IRQHandler+0x8c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	1dfa      	adds	r2, r7, #7
 80043ee:	4610      	mov	r0, r2
 80043f0:	4798      	blx	r3
 80043f2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80043fa:	4b0c      	ldr	r3, [pc, #48]	; (800442c <USART2_IRQHandler+0x90>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a0b      	ldr	r2, [pc, #44]	; (800442c <USART2_IRQHandler+0x90>)
 8004400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e006      	b.n	8004416 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004408:	4b04      	ldr	r3, [pc, #16]	; (800441c <USART2_IRQHandler+0x80>)
 800440a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800440c:	79fa      	ldrb	r2, [r7, #7]
 800440e:	4b04      	ldr	r3, [pc, #16]	; (8004420 <USART2_IRQHandler+0x84>)
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e000      	b.n	8004416 <USART2_IRQHandler+0x7a>
      return;
 8004414:	bf00      	nop
    }
  }
}
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40004400 	.word	0x40004400
 8004420:	40004404 	.word	0x40004404
 8004424:	20012e68 	.word	0x20012e68
 8004428:	20012e6c 	.word	0x20012e6c
 800442c:	4000440c 	.word	0x4000440c

08004430 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800443a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800443e:	6013      	str	r3, [r2, #0]
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	4000440c 	.word	0x4000440c

08004450 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 800445c:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <HIF_UART_Init+0xc8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a2d      	ldr	r2, [pc, #180]	; (8004518 <HIF_UART_Init+0xc8>)
 8004462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004466:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004468:	4b2c      	ldr	r3, [pc, #176]	; (800451c <HIF_UART_Init+0xcc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2b      	ldr	r2, [pc, #172]	; (800451c <HIF_UART_Init+0xcc>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004474:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <HIF_UART_Init+0xd0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004480:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004488:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800448a:	4a25      	ldr	r2, [pc, #148]	; (8004520 <HIF_UART_Init+0xd0>)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004490:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HIF_UART_Init+0xd4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800449c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80044a4:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80044a6:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <HIF_UART_Init+0xd4>)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80044ac:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <HIF_UART_Init+0xd8>)
 80044ae:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80044b2:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80044b4:	4b1d      	ldr	r3, [pc, #116]	; (800452c <HIF_UART_Init+0xdc>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80044ba:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <HIF_UART_Init+0xe0>)
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80044c6:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <HIF_UART_Init+0xe4>)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	3301      	adds	r3, #1
 80044d0:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	085b      	lsrs	r3, r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044de:	d302      	bcc.n	80044e6 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80044e0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80044e4:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	4a11      	ldr	r2, [pc, #68]	; (8004538 <HIF_UART_Init+0xe8>)
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80044f6:	4a11      	ldr	r2, [pc, #68]	; (800453c <HIF_UART_Init+0xec>)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80044fc:	4a10      	ldr	r2, [pc, #64]	; (8004540 <HIF_UART_Init+0xf0>)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004502:	2106      	movs	r1, #6
 8004504:	2026      	movs	r0, #38	; 0x26
 8004506:	f7ff feab 	bl	8004260 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800450a:	2026      	movs	r0, #38	; 0x26
 800450c:	f7ff fe8a 	bl	8004224 <__NVIC_EnableIRQ>
}
 8004510:	bf00      	nop
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40023840 	.word	0x40023840
 800451c:	40023830 	.word	0x40023830
 8004520:	40020020 	.word	0x40020020
 8004524:	40020000 	.word	0x40020000
 8004528:	4000440c 	.word	0x4000440c
 800452c:	40004410 	.word	0x40004410
 8004530:	40004414 	.word	0x40004414
 8004534:	055d4a80 	.word	0x055d4a80
 8004538:	40004408 	.word	0x40004408
 800453c:	20012e68 	.word	0x20012e68
 8004540:	20012e6c 	.word	0x20012e6c

08004544 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <_DoInit+0x98>)
 800454c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2203      	movs	r2, #3
 8004552:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2203      	movs	r2, #3
 8004558:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a20      	ldr	r2, [pc, #128]	; (80045e0 <_DoInit+0x9c>)
 800455e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a20      	ldr	r2, [pc, #128]	; (80045e4 <_DoInit+0xa0>)
 8004564:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800456c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <_DoInit+0x9c>)
 8004584:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <_DoInit+0xa4>)
 800458a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2210      	movs	r2, #16
 8004590:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3307      	adds	r3, #7
 80045a8:	4a10      	ldr	r2, [pc, #64]	; (80045ec <_DoInit+0xa8>)
 80045aa:	6810      	ldr	r0, [r2, #0]
 80045ac:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80045ae:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a0e      	ldr	r2, [pc, #56]	; (80045f0 <_DoInit+0xac>)
 80045b6:	6810      	ldr	r0, [r2, #0]
 80045b8:	6018      	str	r0, [r3, #0]
 80045ba:	8891      	ldrh	r1, [r2, #4]
 80045bc:	7992      	ldrb	r2, [r2, #6]
 80045be:	8099      	strh	r1, [r3, #4]
 80045c0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80045c2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80045cc:	f3bf 8f5f 	dmb	sy
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	20012e70 	.word	0x20012e70
 80045e0:	08006a98 	.word	0x08006a98
 80045e4:	20012f18 	.word	0x20012f18
 80045e8:	20013318 	.word	0x20013318
 80045ec:	08006aa4 	.word	0x08006aa4
 80045f0:	08006aa8 	.word	0x08006aa8

080045f4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004600:	2300      	movs	r3, #0
 8004602:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	429a      	cmp	r2, r3
 8004616:	d905      	bls.n	8004624 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
 8004622:	e007      	b.n	8004634 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	69b9      	ldr	r1, [r7, #24]
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	1acb      	subs	r3, r1, r3
 800462e:	4413      	add	r3, r2
 8004630:	3b01      	subs	r3, #1
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463e:	4293      	cmp	r3, r2
 8004640:	bf28      	it	cs
 8004642:	4613      	movcs	r3, r2
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4293      	cmp	r3, r2
 800464c:	bf28      	it	cs
 800464e:	4613      	movcs	r3, r2
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800465c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	6978      	ldr	r0, [r7, #20]
 8004662:	f002 f953 	bl	800690c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004666:	6a3a      	ldr	r2, [r7, #32]
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	4413      	add	r3, r2
 800466c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	4413      	add	r3, r2
 8004674:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	4413      	add	r3, r2
 8004684:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	429a      	cmp	r2, r3
 800468e:	d101      	bne.n	8004694 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004690:	2300      	movs	r3, #0
 8004692:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004694:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1b2      	bne.n	800460a <_WriteBlocking+0x16>
  return NumBytesWritten;
 80046a4:	6a3b      	ldr	r3, [r7, #32]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3728      	adds	r7, #40	; 0x28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b088      	sub	sp, #32
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d911      	bls.n	80046f6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	6938      	ldr	r0, [r7, #16]
 80046e2:	f002 f913 	bl	800690c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046e6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	441a      	add	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80046f4:	e01f      	b.n	8004736 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	6938      	ldr	r0, [r7, #16]
 800470a:	f002 f8ff 	bl	800690c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	4413      	add	r3, r2
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4619      	mov	r1, r3
 8004726:	6938      	ldr	r0, [r7, #16]
 8004728:	f002 f8f0 	bl	800690c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800472c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	60da      	str	r2, [r3, #12]
}
 8004736:	bf00      	nop
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800473e:	b480      	push	{r7}
 8004740:	b087      	sub	sp, #28
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	429a      	cmp	r2, r3
 8004758:	d808      	bhi.n	800476c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1ad2      	subs	r2, r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4413      	add	r3, r2
 8004766:	3b01      	subs	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e004      	b.n	8004776 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004776:	697b      	ldr	r3, [r7, #20]
}
 8004778:	4618      	mov	r0, r3
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b08c      	sub	sp, #48	; 0x30
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004790:	4b3e      	ldr	r3, [pc, #248]	; (800488c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004792:	623b      	str	r3, [r7, #32]
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800479e:	f7ff fed1 	bl	8004544 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	4613      	mov	r3, r2
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	4413      	add	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4a37      	ldr	r2, [pc, #220]	; (800488c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80047b0:	4413      	add	r3, r2
 80047b2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80047c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d92b      	bls.n	8004828 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4293      	cmp	r3, r2
 80047e0:	bf28      	it	cs
 80047e2:	4613      	movcs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	4413      	add	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	6939      	ldr	r1, [r7, #16]
 80047f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047f6:	f002 f889 	bl	800690c <memcpy>
    NumBytesRead += NumBytesRem;
 80047fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4413      	add	r3, r2
 8004800:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	4413      	add	r3, r2
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	4413      	add	r3, r2
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004820:	429a      	cmp	r2, r3
 8004822:	d101      	bne.n	8004828 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004824:	2300      	movs	r3, #0
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4293      	cmp	r3, r2
 8004836:	bf28      	it	cs
 8004838:	4613      	movcs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d019      	beq.n	8004876 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	4413      	add	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	6939      	ldr	r1, [r7, #16]
 8004850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004852:	f002 f85b 	bl	800690c <memcpy>
    NumBytesRead += NumBytesRem;
 8004856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	4413      	add	r3, r2
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800485e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	4413      	add	r3, r2
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800486e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	4413      	add	r3, r2
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004880:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004884:	4618      	mov	r0, r3
 8004886:	3730      	adds	r7, #48	; 0x30
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20012e70 	.word	0x20012e70

08004890 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004890:	b580      	push	{r7, lr}
 8004892:	b08c      	sub	sp, #48	; 0x30
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800489c:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <SEGGER_RTT_ReadNoLock+0x108>)
 800489e:	623b      	str	r3, [r7, #32]
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <SEGGER_RTT_ReadNoLock+0x1e>
 80048aa:	f7ff fe4b 	bl	8004544 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4613      	mov	r3, r2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	3360      	adds	r3, #96	; 0x60
 80048ba:	4a37      	ldr	r2, [pc, #220]	; (8004998 <SEGGER_RTT_ReadNoLock+0x108>)
 80048bc:	4413      	add	r3, r2
 80048be:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80048d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d92b      	bls.n	8004934 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4293      	cmp	r3, r2
 80048ec:	bf28      	it	cs
 80048ee:	4613      	movcs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	4413      	add	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	6939      	ldr	r1, [r7, #16]
 8004900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004902:	f002 f803 	bl	800690c <memcpy>
    NumBytesRead += NumBytesRem;
 8004906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	4413      	add	r3, r2
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800490e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	4413      	add	r3, r2
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800491e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	4413      	add	r3, r2
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800492c:	429a      	cmp	r2, r3
 800492e:	d101      	bne.n	8004934 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004930:	2300      	movs	r3, #0
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4293      	cmp	r3, r2
 8004942:	bf28      	it	cs
 8004944:	4613      	movcs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d019      	beq.n	8004982 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	4413      	add	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	6939      	ldr	r1, [r7, #16]
 800495c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800495e:	f001 ffd5 	bl	800690c <memcpy>
    NumBytesRead += NumBytesRem;
 8004962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	4413      	add	r3, r2
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800496a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	4413      	add	r3, r2
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800497a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	4413      	add	r3, r2
 8004980:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800498c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004990:	4618      	mov	r0, r3
 8004992:	3730      	adds	r7, #48	; 0x30
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20012e70 	.word	0x20012e70

0800499c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4613      	mov	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	3360      	adds	r3, #96	; 0x60
 80049b8:	4a1f      	ldr	r2, [pc, #124]	; (8004a38 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80049ba:	4413      	add	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d029      	beq.n	8004a1a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d82e      	bhi.n	8004a28 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d013      	beq.n	80049fa <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80049d2:	e029      	b.n	8004a28 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80049d4:	6978      	ldr	r0, [r7, #20]
 80049d6:	f7ff feb2 	bl	800473e <_GetAvailWriteSpace>
 80049da:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d202      	bcs.n	80049ea <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80049e8:	e021      	b.n	8004a2e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	69b9      	ldr	r1, [r7, #24]
 80049f2:	6978      	ldr	r0, [r7, #20]
 80049f4:	f7ff fe5b 	bl	80046ae <_WriteNoCheck>
    break;
 80049f8:	e019      	b.n	8004a2e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80049fa:	6978      	ldr	r0, [r7, #20]
 80049fc:	f7ff fe9f 	bl	800473e <_GetAvailWriteSpace>
 8004a00:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4293      	cmp	r3, r2
 8004a08:	bf28      	it	cs
 8004a0a:	4613      	movcs	r3, r2
 8004a0c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	69b9      	ldr	r1, [r7, #24]
 8004a12:	6978      	ldr	r0, [r7, #20]
 8004a14:	f7ff fe4b 	bl	80046ae <_WriteNoCheck>
    break;
 8004a18:	e009      	b.n	8004a2e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	69b9      	ldr	r1, [r7, #24]
 8004a1e:	6978      	ldr	r0, [r7, #20]
 8004a20:	f7ff fde8 	bl	80045f4 <_WriteBlocking>
 8004a24:	61f8      	str	r0, [r7, #28]
    break;
 8004a26:	e002      	b.n	8004a2e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61fb      	str	r3, [r7, #28]
    break;
 8004a2c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20012e70 	.word	0x20012e70

08004a3c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004a48:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004a56:	f7ff fd75 	bl	8004544 <_DoInit>
  SEGGER_RTT_LOCK();
 8004a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a5e:	f04f 0120 	mov.w	r1, #32
 8004a62:	f381 8811 	msr	BASEPRI, r1
 8004a66:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff ff95 	bl	800499c <SEGGER_RTT_WriteDownBufferNoLock>
 8004a72:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004a7a:	697b      	ldr	r3, [r7, #20]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3720      	adds	r7, #32
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20012e70 	.word	0x20012e70

08004a88 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004a96:	4b3d      	ldr	r3, [pc, #244]	; (8004b8c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004aa4:	f7ff fd4e 	bl	8004544 <_DoInit>
  SEGGER_RTT_LOCK();
 8004aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8004aac:	f04f 0120 	mov.w	r1, #32
 8004ab0:	f381 8811 	msr	BASEPRI, r1
 8004ab4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ab6:	4b35      	ldr	r3, [pc, #212]	; (8004b8c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004ab8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004abe:	6939      	ldr	r1, [r7, #16]
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	440b      	add	r3, r1
 8004ace:	3304      	adds	r3, #4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	dbeb      	blt.n	8004abe <SEGGER_RTT_AllocUpBuffer+0x36>
 8004ae6:	e000      	b.n	8004aea <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004ae8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	da3f      	bge.n	8004b74 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004af4:	6939      	ldr	r1, [r7, #16]
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	4613      	mov	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	4413      	add	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	440b      	add	r3, r1
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004b08:	6939      	ldr	r1, [r7, #16]
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	4613      	mov	r3, r2
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	4413      	add	r3, r2
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	440b      	add	r3, r1
 8004b18:	3304      	adds	r3, #4
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004b1e:	6939      	ldr	r1, [r7, #16]
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	4613      	mov	r3, r2
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	4413      	add	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	440b      	add	r3, r1
 8004b2c:	3320      	adds	r3, #32
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004b32:	6939      	ldr	r1, [r7, #16]
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	4613      	mov	r3, r2
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	4413      	add	r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	440b      	add	r3, r1
 8004b40:	3328      	adds	r3, #40	; 0x28
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004b46:	6939      	ldr	r1, [r7, #16]
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	4413      	add	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	440b      	add	r3, r1
 8004b54:	3324      	adds	r3, #36	; 0x24
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004b5a:	6939      	ldr	r1, [r7, #16]
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	440b      	add	r3, r1
 8004b68:	332c      	adds	r3, #44	; 0x2c
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b6e:	f3bf 8f5f 	dmb	sy
 8004b72:	e002      	b.n	8004b7a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295
 8004b78:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004b80:	69fb      	ldr	r3, [r7, #28]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20012e70 	.word	0x20012e70

08004b90 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004b9e:	4b33      	ldr	r3, [pc, #204]	; (8004c6c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004bac:	f7ff fcca 	bl	8004544 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004bb0:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004bb2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d24d      	bcs.n	8004c5c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004bc0:	f3ef 8311 	mrs	r3, BASEPRI
 8004bc4:	f04f 0120 	mov.w	r1, #32
 8004bc8:	f381 8811 	msr	BASEPRI, r1
 8004bcc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d031      	beq.n	8004c38 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004bd4:	6979      	ldr	r1, [r7, #20]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4413      	add	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	440b      	add	r3, r1
 8004be2:	3360      	adds	r3, #96	; 0x60
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004be8:	6979      	ldr	r1, [r7, #20]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4613      	mov	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	4413      	add	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3364      	adds	r3, #100	; 0x64
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004bfc:	6979      	ldr	r1, [r7, #20]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4613      	mov	r3, r2
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	4413      	add	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	440b      	add	r3, r1
 8004c0a:	3368      	adds	r3, #104	; 0x68
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004c10:	6979      	ldr	r1, [r7, #20]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4613      	mov	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	440b      	add	r3, r1
 8004c1e:	3370      	adds	r3, #112	; 0x70
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004c24:	6979      	ldr	r1, [r7, #20]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	4413      	add	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	440b      	add	r3, r1
 8004c32:	336c      	adds	r3, #108	; 0x6c
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004c38:	6979      	ldr	r1, [r7, #20]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	4413      	add	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	440b      	add	r3, r1
 8004c46:	3374      	adds	r3, #116	; 0x74
 8004c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c4a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c4c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	e002      	b.n	8004c62 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c60:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004c62:	69fb      	ldr	r3, [r7, #28]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20012e70 	.word	0x20012e70

08004c70 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004c80:	e002      	b.n	8004c88 <_EncodeStr+0x18>
    Len++;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	3301      	adds	r3, #1
 8004c86:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f6      	bne.n	8004c82 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d901      	bls.n	8004ca0 <_EncodeStr+0x30>
    Len = Limit;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2bfe      	cmp	r3, #254	; 0xfe
 8004ca4:	d806      	bhi.n	8004cb4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	60fa      	str	r2, [r7, #12]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e011      	b.n	8004cd8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	60fa      	str	r2, [r7, #12]
 8004cba:	22ff      	movs	r2, #255	; 0xff
 8004cbc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	60fa      	str	r2, [r7, #12]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	0a19      	lsrs	r1, r3, #8
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	60fa      	str	r2, [r7, #12]
 8004cd4:	b2ca      	uxtb	r2, r1
 8004cd6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004cdc:	e00a      	b.n	8004cf4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	1c53      	adds	r3, r2, #1
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1c59      	adds	r1, r3, #1
 8004ce8:	60f9      	str	r1, [r7, #12]
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	701a      	strb	r2, [r3, #0]
    n++;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d3f0      	bcc.n	8004cde <_EncodeStr+0x6e>
  }
  return pPayload;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3304      	adds	r3, #4
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d2a:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <_HandleIncomingPacket+0xe0>)
 8004d2c:	7e1b      	ldrb	r3, [r3, #24]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	1cfb      	adds	r3, r7, #3
 8004d32:	2201      	movs	r2, #1
 8004d34:	4619      	mov	r1, r3
 8004d36:	f7ff fdab 	bl	8004890 <SEGGER_RTT_ReadNoLock>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	dd54      	ble.n	8004dee <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	2b80      	cmp	r3, #128	; 0x80
 8004d48:	d032      	beq.n	8004db0 <_HandleIncomingPacket+0x8c>
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	dc42      	bgt.n	8004dd4 <_HandleIncomingPacket+0xb0>
 8004d4e:	2b07      	cmp	r3, #7
 8004d50:	dc16      	bgt.n	8004d80 <_HandleIncomingPacket+0x5c>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	dd3e      	ble.n	8004dd4 <_HandleIncomingPacket+0xb0>
 8004d56:	3b01      	subs	r3, #1
 8004d58:	2b06      	cmp	r3, #6
 8004d5a:	d83b      	bhi.n	8004dd4 <_HandleIncomingPacket+0xb0>
 8004d5c:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <_HandleIncomingPacket+0x40>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004d87 	.word	0x08004d87
 8004d68:	08004d8d 	.word	0x08004d8d
 8004d6c:	08004d93 	.word	0x08004d93
 8004d70:	08004d99 	.word	0x08004d99
 8004d74:	08004d9f 	.word	0x08004d9f
 8004d78:	08004da5 	.word	0x08004da5
 8004d7c:	08004dab 	.word	0x08004dab
 8004d80:	2b7f      	cmp	r3, #127	; 0x7f
 8004d82:	d036      	beq.n	8004df2 <_HandleIncomingPacket+0xce>
 8004d84:	e026      	b.n	8004dd4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004d86:	f000 ff7d 	bl	8005c84 <SEGGER_SYSVIEW_Start>
      break;
 8004d8a:	e037      	b.n	8004dfc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004d8c:	f001 f836 	bl	8005dfc <SEGGER_SYSVIEW_Stop>
      break;
 8004d90:	e034      	b.n	8004dfc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004d92:	f001 fa0f 	bl	80061b4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004d96:	e031      	b.n	8004dfc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004d98:	f001 f9d4 	bl	8006144 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004d9c:	e02e      	b.n	8004dfc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004d9e:	f001 f853 	bl	8005e48 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004da2:	e02b      	b.n	8004dfc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004da4:	f001 fca2 	bl	80066ec <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004da8:	e028      	b.n	8004dfc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004daa:	f001 fc81 	bl	80066b0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004dae:	e025      	b.n	8004dfc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004db0:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <_HandleIncomingPacket+0xe0>)
 8004db2:	7e1b      	ldrb	r3, [r3, #24]
 8004db4:	4618      	mov	r0, r3
 8004db6:	1cfb      	adds	r3, r7, #3
 8004db8:	2201      	movs	r2, #1
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f7ff fd68 	bl	8004890 <SEGGER_RTT_ReadNoLock>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	dd15      	ble.n	8004df6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f001 fbef 	bl	80065b0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004dd2:	e010      	b.n	8004df6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	b25b      	sxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	da0e      	bge.n	8004dfa <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ddc:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <_HandleIncomingPacket+0xe0>)
 8004dde:	7e1b      	ldrb	r3, [r3, #24]
 8004de0:	4618      	mov	r0, r3
 8004de2:	1cfb      	adds	r3, r7, #3
 8004de4:	2201      	movs	r2, #1
 8004de6:	4619      	mov	r1, r3
 8004de8:	f7ff fd52 	bl	8004890 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004dec:	e005      	b.n	8004dfa <_HandleIncomingPacket+0xd6>
    }
  }
 8004dee:	bf00      	nop
 8004df0:	e004      	b.n	8004dfc <_HandleIncomingPacket+0xd8>
      break;
 8004df2:	bf00      	nop
 8004df4:	e002      	b.n	8004dfc <_HandleIncomingPacket+0xd8>
      break;
 8004df6:	bf00      	nop
 8004df8:	e000      	b.n	8004dfc <_HandleIncomingPacket+0xd8>
      break;
 8004dfa:	bf00      	nop
}
 8004dfc:	bf00      	nop
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20014330 	.word	0x20014330

08004e08 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08c      	sub	sp, #48	; 0x30
 8004e0c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004e0e:	2301      	movs	r3, #1
 8004e10:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004e12:	1d3b      	adds	r3, r7, #4
 8004e14:	3301      	adds	r3, #1
 8004e16:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1c:	4b32      	ldr	r3, [pc, #200]	; (8004ee8 <_TrySendOverflowPacket+0xe0>)
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e22:	e00b      	b.n	8004e3c <_TrySendOverflowPacket+0x34>
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	1c59      	adds	r1, r3, #1
 8004e2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	09db      	lsrs	r3, r3, #7
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e40:	d8f0      	bhi.n	8004e24 <_TrySendOverflowPacket+0x1c>
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e52:	4b26      	ldr	r3, [pc, #152]	; (8004eec <_TrySendOverflowPacket+0xe4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e58:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <_TrySendOverflowPacket+0xe0>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	623b      	str	r3, [r7, #32]
 8004e6a:	e00b      	b.n	8004e84 <_TrySendOverflowPacket+0x7c>
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	1c59      	adds	r1, r3, #1
 8004e74:	6279      	str	r1, [r7, #36]	; 0x24
 8004e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	09db      	lsrs	r3, r3, #7
 8004e82:	623b      	str	r3, [r7, #32]
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	2b7f      	cmp	r3, #127	; 0x7f
 8004e88:	d8f0      	bhi.n	8004e6c <_TrySendOverflowPacket+0x64>
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e90:	6a3a      	ldr	r2, [r7, #32]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004e9a:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <_TrySendOverflowPacket+0xe0>)
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	1d3b      	adds	r3, r7, #4
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	f7fb f9b0 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004eb4:	f7ff fabc 	bl	8004430 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d009      	beq.n	8004ed2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004ebe:	4a0a      	ldr	r2, [pc, #40]	; (8004ee8 <_TrySendOverflowPacket+0xe0>)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004ec4:	4b08      	ldr	r3, [pc, #32]	; (8004ee8 <_TrySendOverflowPacket+0xe0>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <_TrySendOverflowPacket+0xe0>)
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	e004      	b.n	8004edc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <_TrySendOverflowPacket+0xe0>)
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	4a03      	ldr	r2, [pc, #12]	; (8004ee8 <_TrySendOverflowPacket+0xe0>)
 8004eda:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004edc:	693b      	ldr	r3, [r7, #16]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3730      	adds	r7, #48	; 0x30
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20014330 	.word	0x20014330
 8004eec:	e0001004 	.word	0xe0001004

08004ef0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004efc:	4b6d      	ldr	r3, [pc, #436]	; (80050b4 <_SendPacket+0x1c4>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d010      	beq.n	8004f26 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004f04:	4b6b      	ldr	r3, [pc, #428]	; (80050b4 <_SendPacket+0x1c4>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80a5 	beq.w	8005058 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004f0e:	4b69      	ldr	r3, [pc, #420]	; (80050b4 <_SendPacket+0x1c4>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d109      	bne.n	8004f2a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004f16:	f7ff ff77 	bl	8004e08 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004f1a:	4b66      	ldr	r3, [pc, #408]	; (80050b4 <_SendPacket+0x1c4>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	f040 809c 	bne.w	800505c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004f24:	e001      	b.n	8004f2a <_SendPacket+0x3a>
    goto Send;
 8004f26:	bf00      	nop
 8004f28:	e000      	b.n	8004f2c <_SendPacket+0x3c>
Send:
 8004f2a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b1f      	cmp	r3, #31
 8004f30:	d809      	bhi.n	8004f46 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004f32:	4b60      	ldr	r3, [pc, #384]	; (80050b4 <_SendPacket+0x1c4>)
 8004f34:	69da      	ldr	r2, [r3, #28]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f040 808d 	bne.w	8005060 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b17      	cmp	r3, #23
 8004f4a:	d807      	bhi.n	8004f5c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	e03d      	b.n	8004fd8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	2b7f      	cmp	r3, #127	; 0x7f
 8004f68:	d912      	bls.n	8004f90 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	09da      	lsrs	r2, r3, #7
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	3a01      	subs	r2, #1
 8004f82:	60fa      	str	r2, [r7, #12]
 8004f84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e006      	b.n	8004f9e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa2:	d912      	bls.n	8004fca <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	09da      	lsrs	r2, r3, #7
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	3a01      	subs	r2, #1
 8004fbc:	60fa      	str	r2, [r7, #12]
 8004fbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	e006      	b.n	8004fd8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004fd8:	4b37      	ldr	r3, [pc, #220]	; (80050b8 <_SendPacket+0x1c8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004fde:	4b35      	ldr	r3, [pc, #212]	; (80050b4 <_SendPacket+0x1c4>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	623b      	str	r3, [r7, #32]
 8004ff0:	e00b      	b.n	800500a <_SendPacket+0x11a>
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	1c59      	adds	r1, r3, #1
 8004ffa:	6279      	str	r1, [r7, #36]	; 0x24
 8004ffc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	09db      	lsrs	r3, r3, #7
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	2b7f      	cmp	r3, #127	; 0x7f
 800500e:	d8f0      	bhi.n	8004ff2 <_SendPacket+0x102>
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	627a      	str	r2, [r7, #36]	; 0x24
 8005016:	6a3a      	ldr	r2, [r7, #32]
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005020:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <_SendPacket+0x1c4>)
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	4618      	mov	r0, r3
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	461a      	mov	r2, r3
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	f7fb f8ee 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005034:	4603      	mov	r3, r0
 8005036:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005038:	f7ff f9fa 	bl	8004430 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005042:	4a1c      	ldr	r2, [pc, #112]	; (80050b4 <_SendPacket+0x1c4>)
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	60d3      	str	r3, [r2, #12]
 8005048:	e00b      	b.n	8005062 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <_SendPacket+0x1c4>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	b2da      	uxtb	r2, r3
 8005052:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <_SendPacket+0x1c4>)
 8005054:	701a      	strb	r2, [r3, #0]
 8005056:	e004      	b.n	8005062 <_SendPacket+0x172>
    goto SendDone;
 8005058:	bf00      	nop
 800505a:	e002      	b.n	8005062 <_SendPacket+0x172>
      goto SendDone;
 800505c:	bf00      	nop
 800505e:	e000      	b.n	8005062 <_SendPacket+0x172>
      goto SendDone;
 8005060:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005062:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <_SendPacket+0x1c4>)
 8005064:	7e1b      	ldrb	r3, [r3, #24]
 8005066:	4619      	mov	r1, r3
 8005068:	4a14      	ldr	r2, [pc, #80]	; (80050bc <_SendPacket+0x1cc>)
 800506a:	460b      	mov	r3, r1
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	440b      	add	r3, r1
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	336c      	adds	r3, #108	; 0x6c
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <_SendPacket+0x1c4>)
 800507a:	7e1b      	ldrb	r3, [r3, #24]
 800507c:	4618      	mov	r0, r3
 800507e:	490f      	ldr	r1, [pc, #60]	; (80050bc <_SendPacket+0x1cc>)
 8005080:	4603      	mov	r3, r0
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	4403      	add	r3, r0
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	440b      	add	r3, r1
 800508a:	3370      	adds	r3, #112	; 0x70
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d00b      	beq.n	80050aa <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005092:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <_SendPacket+0x1c4>)
 8005094:	789b      	ldrb	r3, [r3, #2]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d107      	bne.n	80050aa <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <_SendPacket+0x1c4>)
 800509c:	2201      	movs	r2, #1
 800509e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80050a0:	f7ff fe40 	bl	8004d24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80050a4:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <_SendPacket+0x1c4>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80050aa:	bf00      	nop
 80050ac:	3728      	adds	r7, #40	; 0x28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20014330 	.word	0x20014330
 80050b8:	e0001004 	.word	0xe0001004
 80050bc:	20012e70 	.word	0x20012e70

080050c0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	3301      	adds	r3, #1
 80050d6:	2b80      	cmp	r3, #128	; 0x80
 80050d8:	d80a      	bhi.n	80050f0 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	1c59      	adds	r1, r3, #1
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6051      	str	r1, [r2, #4]
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b80      	cmp	r3, #128	; 0x80
 80050f6:	d15a      	bne.n	80051ae <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	623b      	str	r3, [r7, #32]
 8005118:	e00b      	b.n	8005132 <_StoreChar+0x72>
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	b2da      	uxtb	r2, r3
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	1c59      	adds	r1, r3, #1
 8005122:	6279      	str	r1, [r7, #36]	; 0x24
 8005124:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	09db      	lsrs	r3, r3, #7
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	2b7f      	cmp	r3, #127	; 0x7f
 8005136:	d8f0      	bhi.n	800511a <_StoreChar+0x5a>
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	627a      	str	r2, [r7, #36]	; 0x24
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	2300      	movs	r3, #0
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	e00b      	b.n	800516a <_StoreChar+0xaa>
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	1c59      	adds	r1, r3, #1
 800515a:	61f9      	str	r1, [r7, #28]
 800515c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	09db      	lsrs	r3, r3, #7
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b7f      	cmp	r3, #127	; 0x7f
 800516e:	d8f0      	bhi.n	8005152 <_StoreChar+0x92>
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	61fa      	str	r2, [r7, #28]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	221a      	movs	r2, #26
 8005186:	6939      	ldr	r1, [r7, #16]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff feb1 	bl	8004ef0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff fdb9 	bl	8004d0a <_PreparePacket>
 8005198:	4602      	mov	r2, r0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	611a      	str	r2, [r3, #16]
  }
}
 80051ae:	bf00      	nop
 80051b0:	3728      	adds	r7, #40	; 0x28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80051ca:	2301      	movs	r3, #1
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80051ce:	2301      	movs	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80051d2:	e007      	b.n	80051e4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80051d4:	6a3a      	ldr	r2, [r7, #32]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	623b      	str	r3, [r7, #32]
    Width++;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80051e4:	6a3a      	ldr	r2, [r7, #32]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d2f3      	bcs.n	80051d4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d901      	bls.n	80051f8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d11f      	bne.n	8005242 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01c      	beq.n	8005242 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <_PrintUnsigned+0x66>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <_PrintUnsigned+0x66>
        c = '0';
 8005218:	2330      	movs	r3, #48	; 0x30
 800521a:	76fb      	strb	r3, [r7, #27]
 800521c:	e001      	b.n	8005222 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800521e:	2320      	movs	r3, #32
 8005220:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005222:	e007      	b.n	8005234 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	3b01      	subs	r3, #1
 8005228:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800522a:	7efb      	ldrb	r3, [r7, #27]
 800522c:	4619      	mov	r1, r3
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff ff46 	bl	80050c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <_PrintUnsigned+0x8a>
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	429a      	cmp	r2, r3
 8005240:	d3f0      	bcc.n	8005224 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d903      	bls.n	8005250 <_PrintUnsigned+0x98>
      NumDigits--;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	3b01      	subs	r3, #1
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	e009      	b.n	8005264 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	429a      	cmp	r2, r3
 8005260:	d200      	bcs.n	8005264 <_PrintUnsigned+0xac>
        break;
 8005262:	e005      	b.n	8005270 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	fb02 f303 	mul.w	r3, r2, r3
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800526e:	e7e8      	b.n	8005242 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	fbb2 f3f3 	udiv	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005288:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <_PrintUnsigned+0x128>)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	4413      	add	r3, r2
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7ff ff14 	bl	80050c0 <_StoreChar>
    Digit /= Base;
 8005298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e3      	bne.n	8005270 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80052a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d011      	beq.n	80052d6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00e      	beq.n	80052d6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052b8:	e006      	b.n	80052c8 <_PrintUnsigned+0x110>
        FieldWidth--;
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	3b01      	subs	r3, #1
 80052be:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80052c0:	2120      	movs	r1, #32
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f7ff fefc 	bl	80050c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <_PrintUnsigned+0x11e>
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d3f1      	bcc.n	80052ba <_PrintUnsigned+0x102>
      }
    }
  }
}
 80052d6:	bf00      	nop
 80052d8:	3728      	adds	r7, #40	; 0x28
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	08006ae8 	.word	0x08006ae8

080052e4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bfb8      	it	lt
 80052f8:	425b      	neglt	r3, r3
 80052fa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80052fc:	2301      	movs	r3, #1
 80052fe:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005300:	e007      	b.n	8005312 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	fb92 f3f3 	sdiv	r3, r2, r3
 800530a:	613b      	str	r3, [r7, #16]
    Width++;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3301      	adds	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	429a      	cmp	r2, r3
 8005318:	daf3      	bge.n	8005302 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	429a      	cmp	r2, r3
 8005320:	d901      	bls.n	8005326 <_PrintInt+0x42>
    Width = NumDigits;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <_PrintInt+0x5e>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	db04      	blt.n	800533c <_PrintInt+0x58>
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <_PrintInt+0x5e>
    FieldWidth--;
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	3b01      	subs	r3, #1
 8005340:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <_PrintInt+0x6e>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d016      	beq.n	8005380 <_PrintInt+0x9c>
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d111      	bne.n	8005380 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00e      	beq.n	8005380 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005362:	e006      	b.n	8005372 <_PrintInt+0x8e>
        FieldWidth--;
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	3b01      	subs	r3, #1
 8005368:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800536a:	2120      	movs	r1, #32
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff fea7 	bl	80050c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <_PrintInt+0x9c>
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	429a      	cmp	r2, r3
 800537e:	d3f1      	bcc.n	8005364 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	da07      	bge.n	8005396 <_PrintInt+0xb2>
    v = -v;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	425b      	negs	r3, r3
 800538a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800538c:	212d      	movs	r1, #45	; 0x2d
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff fe96 	bl	80050c0 <_StoreChar>
 8005394:	e008      	b.n	80053a8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80053a0:	212b      	movs	r1, #43	; 0x2b
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff fe8c 	bl	80050c0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d019      	beq.n	80053e6 <_PrintInt+0x102>
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d114      	bne.n	80053e6 <_PrintInt+0x102>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d111      	bne.n	80053e6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00e      	beq.n	80053e6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053c8:	e006      	b.n	80053d8 <_PrintInt+0xf4>
        FieldWidth--;
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80053d0:	2130      	movs	r1, #48	; 0x30
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff fe74 	bl	80050c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <_PrintInt+0x102>
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d3f1      	bcc.n	80053ca <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f7ff fedf 	bl	80051b8 <_PrintUnsigned>
}
 80053fa:	bf00      	nop
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b098      	sub	sp, #96	; 0x60
 8005408:	af02      	add	r7, sp, #8
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005410:	f3ef 8311 	mrs	r3, BASEPRI
 8005414:	f04f 0120 	mov.w	r1, #32
 8005418:	f381 8811 	msr	BASEPRI, r1
 800541c:	633b      	str	r3, [r7, #48]	; 0x30
 800541e:	48b7      	ldr	r0, [pc, #732]	; (80056fc <_VPrintTarget+0x2f8>)
 8005420:	f7ff fc73 	bl	8004d0a <_PreparePacket>
 8005424:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005426:	4bb5      	ldr	r3, [pc, #724]	; (80056fc <_VPrintTarget+0x2f8>)
 8005428:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800542a:	2300      	movs	r3, #0
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3301      	adds	r3, #1
 8005436:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3301      	adds	r3, #1
 8005448:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800544a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 8183 	beq.w	800575a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005454:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005458:	2b25      	cmp	r3, #37	; 0x25
 800545a:	f040 8170 	bne.w	800573e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800545e:	2300      	movs	r3, #0
 8005460:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005462:	2301      	movs	r3, #1
 8005464:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800546e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005472:	3b23      	subs	r3, #35	; 0x23
 8005474:	2b0d      	cmp	r3, #13
 8005476:	d83f      	bhi.n	80054f8 <_VPrintTarget+0xf4>
 8005478:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <_VPrintTarget+0x7c>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	080054e9 	.word	0x080054e9
 8005484:	080054f9 	.word	0x080054f9
 8005488:	080054f9 	.word	0x080054f9
 800548c:	080054f9 	.word	0x080054f9
 8005490:	080054f9 	.word	0x080054f9
 8005494:	080054f9 	.word	0x080054f9
 8005498:	080054f9 	.word	0x080054f9
 800549c:	080054f9 	.word	0x080054f9
 80054a0:	080054d9 	.word	0x080054d9
 80054a4:	080054f9 	.word	0x080054f9
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	080054f9 	.word	0x080054f9
 80054b0:	080054f9 	.word	0x080054f9
 80054b4:	080054c9 	.word	0x080054c9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80054b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	e01a      	b.n	80054fe <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80054c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ca:	f043 0302 	orr.w	r3, r3, #2
 80054ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3301      	adds	r3, #1
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	e012      	b.n	80054fe <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80054d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054da:	f043 0304 	orr.w	r3, r3, #4
 80054de:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	e00a      	b.n	80054fe <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80054e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ea:	f043 0308 	orr.w	r3, r3, #8
 80054ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	e002      	b.n	80054fe <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80054f8:	2300      	movs	r3, #0
 80054fa:	653b      	str	r3, [r7, #80]	; 0x50
 80054fc:	bf00      	nop
        }
      } while (v);
 80054fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1b0      	bne.n	8005466 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005504:	2300      	movs	r3, #0
 8005506:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005514:	2b2f      	cmp	r3, #47	; 0x2f
 8005516:	d912      	bls.n	800553e <_VPrintTarget+0x13a>
 8005518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800551c:	2b39      	cmp	r3, #57	; 0x39
 800551e:	d80e      	bhi.n	800553e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	461a      	mov	r2, r3
 8005532:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005536:	4413      	add	r3, r2
 8005538:	3b30      	subs	r3, #48	; 0x30
 800553a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800553c:	e7e4      	b.n	8005508 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800553e:	2300      	movs	r3, #0
 8005540:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800554a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800554e:	2b2e      	cmp	r3, #46	; 0x2e
 8005550:	d11d      	bne.n	800558e <_VPrintTarget+0x18a>
        sFormat++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3301      	adds	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005564:	2b2f      	cmp	r3, #47	; 0x2f
 8005566:	d912      	bls.n	800558e <_VPrintTarget+0x18a>
 8005568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800556c:	2b39      	cmp	r3, #57	; 0x39
 800556e:	d80e      	bhi.n	800558e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3301      	adds	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	461a      	mov	r2, r3
 8005582:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005586:	4413      	add	r3, r2
 8005588:	3b30      	subs	r3, #48	; 0x30
 800558a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800558c:	e7e4      	b.n	8005558 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005596:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800559a:	2b6c      	cmp	r3, #108	; 0x6c
 800559c:	d003      	beq.n	80055a6 <_VPrintTarget+0x1a2>
 800559e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055a2:	2b68      	cmp	r3, #104	; 0x68
 80055a4:	d107      	bne.n	80055b6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3301      	adds	r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80055b4:	e7ef      	b.n	8005596 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80055b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055ba:	2b25      	cmp	r3, #37	; 0x25
 80055bc:	f000 80b3 	beq.w	8005726 <_VPrintTarget+0x322>
 80055c0:	2b25      	cmp	r3, #37	; 0x25
 80055c2:	f2c0 80b7 	blt.w	8005734 <_VPrintTarget+0x330>
 80055c6:	2b78      	cmp	r3, #120	; 0x78
 80055c8:	f300 80b4 	bgt.w	8005734 <_VPrintTarget+0x330>
 80055cc:	2b58      	cmp	r3, #88	; 0x58
 80055ce:	f2c0 80b1 	blt.w	8005734 <_VPrintTarget+0x330>
 80055d2:	3b58      	subs	r3, #88	; 0x58
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	f200 80ad 	bhi.w	8005734 <_VPrintTarget+0x330>
 80055da:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <_VPrintTarget+0x1dc>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	080056d7 	.word	0x080056d7
 80055e4:	08005735 	.word	0x08005735
 80055e8:	08005735 	.word	0x08005735
 80055ec:	08005735 	.word	0x08005735
 80055f0:	08005735 	.word	0x08005735
 80055f4:	08005735 	.word	0x08005735
 80055f8:	08005735 	.word	0x08005735
 80055fc:	08005735 	.word	0x08005735
 8005600:	08005735 	.word	0x08005735
 8005604:	08005735 	.word	0x08005735
 8005608:	08005735 	.word	0x08005735
 800560c:	08005665 	.word	0x08005665
 8005610:	0800568b 	.word	0x0800568b
 8005614:	08005735 	.word	0x08005735
 8005618:	08005735 	.word	0x08005735
 800561c:	08005735 	.word	0x08005735
 8005620:	08005735 	.word	0x08005735
 8005624:	08005735 	.word	0x08005735
 8005628:	08005735 	.word	0x08005735
 800562c:	08005735 	.word	0x08005735
 8005630:	08005735 	.word	0x08005735
 8005634:	08005735 	.word	0x08005735
 8005638:	08005735 	.word	0x08005735
 800563c:	08005735 	.word	0x08005735
 8005640:	08005701 	.word	0x08005701
 8005644:	08005735 	.word	0x08005735
 8005648:	08005735 	.word	0x08005735
 800564c:	08005735 	.word	0x08005735
 8005650:	08005735 	.word	0x08005735
 8005654:	080056b1 	.word	0x080056b1
 8005658:	08005735 	.word	0x08005735
 800565c:	08005735 	.word	0x08005735
 8005660:	080056d7 	.word	0x080056d7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	1d19      	adds	r1, r3, #4
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6011      	str	r1, [r2, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005678:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800567c:	f107 0314 	add.w	r3, r7, #20
 8005680:	4611      	mov	r1, r2
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff fd1c 	bl	80050c0 <_StoreChar>
        break;
 8005688:	e055      	b.n	8005736 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	1d19      	adds	r1, r3, #4
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6011      	str	r1, [r2, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005698:	f107 0014 	add.w	r0, r7, #20
 800569c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800569e:	9301      	str	r3, [sp, #4]
 80056a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a6:	220a      	movs	r2, #10
 80056a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056aa:	f7ff fe1b 	bl	80052e4 <_PrintInt>
        break;
 80056ae:	e042      	b.n	8005736 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	1d19      	adds	r1, r3, #4
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6011      	str	r1, [r2, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80056be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056c0:	f107 0014 	add.w	r0, r7, #20
 80056c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ce:	220a      	movs	r2, #10
 80056d0:	f7ff fd72 	bl	80051b8 <_PrintUnsigned>
        break;
 80056d4:	e02f      	b.n	8005736 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	1d19      	adds	r1, r3, #4
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6011      	str	r1, [r2, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80056e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056e6:	f107 0014 	add.w	r0, r7, #20
 80056ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f4:	2210      	movs	r2, #16
 80056f6:	f7ff fd5f 	bl	80051b8 <_PrintUnsigned>
        break;
 80056fa:	e01c      	b.n	8005736 <_VPrintTarget+0x332>
 80056fc:	20014360 	.word	0x20014360
      case 'p':
        v = va_arg(*pParamList, int);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	1d19      	adds	r1, r3, #4
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6011      	str	r1, [r2, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800570e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005710:	f107 0014 	add.w	r0, r7, #20
 8005714:	2300      	movs	r3, #0
 8005716:	9301      	str	r3, [sp, #4]
 8005718:	2308      	movs	r3, #8
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	2308      	movs	r3, #8
 800571e:	2210      	movs	r2, #16
 8005720:	f7ff fd4a 	bl	80051b8 <_PrintUnsigned>
        break;
 8005724:	e007      	b.n	8005736 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005726:	f107 0314 	add.w	r3, r7, #20
 800572a:	2125      	movs	r1, #37	; 0x25
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff fcc7 	bl	80050c0 <_StoreChar>
        break;
 8005732:	e000      	b.n	8005736 <_VPrintTarget+0x332>
      default:
        break;
 8005734:	bf00      	nop
      }
      sFormat++;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3301      	adds	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	e007      	b.n	800574e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800573e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005742:	f107 0314 	add.w	r3, r7, #20
 8005746:	4611      	mov	r1, r2
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff fcb9 	bl	80050c0 <_StoreChar>
    }
  } while (*sFormat);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f47f ae72 	bne.w	800543c <_VPrintTarget+0x38>
 8005758:	e000      	b.n	800575c <_VPrintTarget+0x358>
      break;
 800575a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d041      	beq.n	80057e6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	643b      	str	r3, [r7, #64]	; 0x40
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005772:	e00b      	b.n	800578c <_VPrintTarget+0x388>
 8005774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005776:	b2da      	uxtb	r2, r3
 8005778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577a:	1c59      	adds	r1, r3, #1
 800577c:	6439      	str	r1, [r7, #64]	; 0x40
 800577e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	09db      	lsrs	r3, r3, #7
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	2b7f      	cmp	r3, #127	; 0x7f
 8005790:	d8f0      	bhi.n	8005774 <_VPrintTarget+0x370>
 8005792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	643a      	str	r2, [r7, #64]	; 0x40
 8005798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057a6:	2300      	movs	r3, #0
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
 80057aa:	e00b      	b.n	80057c4 <_VPrintTarget+0x3c0>
 80057ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	1c59      	adds	r1, r3, #1
 80057b4:	63b9      	str	r1, [r7, #56]	; 0x38
 80057b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	09db      	lsrs	r3, r3, #7
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	2b7f      	cmp	r3, #127	; 0x7f
 80057c8:	d8f0      	bhi.n	80057ac <_VPrintTarget+0x3a8>
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80057d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	221a      	movs	r2, #26
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fb85 	bl	8004ef0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80057ec:	bf00      	nop
 80057ee:	3758      	adds	r7, #88	; 0x58
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005802:	2300      	movs	r3, #0
 8005804:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005808:	4917      	ldr	r1, [pc, #92]	; (8005868 <SEGGER_SYSVIEW_Init+0x74>)
 800580a:	4818      	ldr	r0, [pc, #96]	; (800586c <SEGGER_SYSVIEW_Init+0x78>)
 800580c:	f7ff f93c 	bl	8004a88 <SEGGER_RTT_AllocUpBuffer>
 8005810:	4603      	mov	r3, r0
 8005812:	b2da      	uxtb	r2, r3
 8005814:	4b16      	ldr	r3, [pc, #88]	; (8005870 <SEGGER_SYSVIEW_Init+0x7c>)
 8005816:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005818:	4b15      	ldr	r3, [pc, #84]	; (8005870 <SEGGER_SYSVIEW_Init+0x7c>)
 800581a:	785a      	ldrb	r2, [r3, #1]
 800581c:	4b14      	ldr	r3, [pc, #80]	; (8005870 <SEGGER_SYSVIEW_Init+0x7c>)
 800581e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005820:	4b13      	ldr	r3, [pc, #76]	; (8005870 <SEGGER_SYSVIEW_Init+0x7c>)
 8005822:	7e1b      	ldrb	r3, [r3, #24]
 8005824:	4618      	mov	r0, r3
 8005826:	2300      	movs	r3, #0
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	2308      	movs	r3, #8
 800582c:	4a11      	ldr	r2, [pc, #68]	; (8005874 <SEGGER_SYSVIEW_Init+0x80>)
 800582e:	490f      	ldr	r1, [pc, #60]	; (800586c <SEGGER_SYSVIEW_Init+0x78>)
 8005830:	f7ff f9ae 	bl	8004b90 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005834:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <SEGGER_SYSVIEW_Init+0x7c>)
 8005836:	2200      	movs	r2, #0
 8005838:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800583a:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <SEGGER_SYSVIEW_Init+0x84>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a0c      	ldr	r2, [pc, #48]	; (8005870 <SEGGER_SYSVIEW_Init+0x7c>)
 8005840:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005842:	4a0b      	ldr	r2, [pc, #44]	; (8005870 <SEGGER_SYSVIEW_Init+0x7c>)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005848:	4a09      	ldr	r2, [pc, #36]	; (8005870 <SEGGER_SYSVIEW_Init+0x7c>)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800584e:	4a08      	ldr	r2, [pc, #32]	; (8005870 <SEGGER_SYSVIEW_Init+0x7c>)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005854:	4a06      	ldr	r2, [pc, #24]	; (8005870 <SEGGER_SYSVIEW_Init+0x7c>)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <SEGGER_SYSVIEW_Init+0x7c>)
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20013328 	.word	0x20013328
 800586c:	08006ab0 	.word	0x08006ab0
 8005870:	20014330 	.word	0x20014330
 8005874:	20014328 	.word	0x20014328
 8005878:	e0001004 	.word	0xe0001004

0800587c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005884:	4a04      	ldr	r2, [pc, #16]	; (8005898 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6113      	str	r3, [r2, #16]
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	20014330 	.word	0x20014330

0800589c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058a4:	f3ef 8311 	mrs	r3, BASEPRI
 80058a8:	f04f 0120 	mov.w	r1, #32
 80058ac:	f381 8811 	msr	BASEPRI, r1
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	4808      	ldr	r0, [pc, #32]	; (80058d4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80058b4:	f7ff fa29 	bl	8004d0a <_PreparePacket>
 80058b8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68b8      	ldr	r0, [r7, #8]
 80058c0:	f7ff fb16 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f383 8811 	msr	BASEPRI, r3
}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20014360 	.word	0x20014360

080058d8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058e2:	f3ef 8311 	mrs	r3, BASEPRI
 80058e6:	f04f 0120 	mov.w	r1, #32
 80058ea:	f381 8811 	msr	BASEPRI, r1
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	4816      	ldr	r0, [pc, #88]	; (800594c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80058f2:	f7ff fa0a 	bl	8004d0a <_PreparePacket>
 80058f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e00b      	b.n	800591e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	1c59      	adds	r1, r3, #1
 800590e:	61f9      	str	r1, [r7, #28]
 8005910:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	09db      	lsrs	r3, r3, #7
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b7f      	cmp	r3, #127	; 0x7f
 8005922:	d8f0      	bhi.n	8005906 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	61fa      	str	r2, [r7, #28]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	6938      	ldr	r0, [r7, #16]
 800593a:	f7ff fad9 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f383 8811 	msr	BASEPRI, r3
}
 8005944:	bf00      	nop
 8005946:	3720      	adds	r7, #32
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20014360 	.word	0x20014360

08005950 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b08c      	sub	sp, #48	; 0x30
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800595c:	f3ef 8311 	mrs	r3, BASEPRI
 8005960:	f04f 0120 	mov.w	r1, #32
 8005964:	f381 8811 	msr	BASEPRI, r1
 8005968:	61fb      	str	r3, [r7, #28]
 800596a:	4825      	ldr	r0, [pc, #148]	; (8005a00 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800596c:	f7ff f9cd 	bl	8004d0a <_PreparePacket>
 8005970:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	62bb      	str	r3, [r7, #40]	; 0x28
 800597e:	e00b      	b.n	8005998 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	b2da      	uxtb	r2, r3
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	1c59      	adds	r1, r3, #1
 8005988:	62f9      	str	r1, [r7, #44]	; 0x2c
 800598a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	09db      	lsrs	r3, r3, #7
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	2b7f      	cmp	r3, #127	; 0x7f
 800599c:	d8f0      	bhi.n	8005980 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	623b      	str	r3, [r7, #32]
 80059b6:	e00b      	b.n	80059d0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	1c59      	adds	r1, r3, #1
 80059c0:	6279      	str	r1, [r7, #36]	; 0x24
 80059c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	09db      	lsrs	r3, r3, #7
 80059ce:	623b      	str	r3, [r7, #32]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	2b7f      	cmp	r3, #127	; 0x7f
 80059d4:	d8f0      	bhi.n	80059b8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	627a      	str	r2, [r7, #36]	; 0x24
 80059dc:	6a3a      	ldr	r2, [r7, #32]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	6979      	ldr	r1, [r7, #20]
 80059ea:	69b8      	ldr	r0, [r7, #24]
 80059ec:	f7ff fa80 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f383 8811 	msr	BASEPRI, r3
}
 80059f6:	bf00      	nop
 80059f8:	3730      	adds	r7, #48	; 0x30
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20014360 	.word	0x20014360

08005a04 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b090      	sub	sp, #64	; 0x40
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a12:	f3ef 8311 	mrs	r3, BASEPRI
 8005a16:	f04f 0120 	mov.w	r1, #32
 8005a1a:	f381 8811 	msr	BASEPRI, r1
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	4840      	ldr	r0, [pc, #256]	; (8005b24 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005a22:	f7ff f972 	bl	8004d0a <_PreparePacket>
 8005a26:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a34:	e00b      	b.n	8005a4e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3c:	1c59      	adds	r1, r3, #1
 8005a3e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	09db      	lsrs	r3, r3, #7
 8005a4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	2b7f      	cmp	r3, #127	; 0x7f
 8005a52:	d8f0      	bhi.n	8005a36 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	637b      	str	r3, [r7, #52]	; 0x34
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a6c:	e00b      	b.n	8005a86 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a74:	1c59      	adds	r1, r3, #1
 8005a76:	6379      	str	r1, [r7, #52]	; 0x34
 8005a78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	09db      	lsrs	r3, r3, #7
 8005a84:	633b      	str	r3, [r7, #48]	; 0x30
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	2b7f      	cmp	r3, #127	; 0x7f
 8005a8a:	d8f0      	bhi.n	8005a6e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	637a      	str	r2, [r7, #52]	; 0x34
 8005a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa4:	e00b      	b.n	8005abe <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	1c59      	adds	r1, r3, #1
 8005aae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ab0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	09db      	lsrs	r3, r3, #7
 8005abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac2:	d8f0      	bhi.n	8005aa6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ada:	623b      	str	r3, [r7, #32]
 8005adc:	e00b      	b.n	8005af6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	1c59      	adds	r1, r3, #1
 8005ae6:	6279      	str	r1, [r7, #36]	; 0x24
 8005ae8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	09db      	lsrs	r3, r3, #7
 8005af4:	623b      	str	r3, [r7, #32]
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	2b7f      	cmp	r3, #127	; 0x7f
 8005afa:	d8f0      	bhi.n	8005ade <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	627a      	str	r2, [r7, #36]	; 0x24
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	6979      	ldr	r1, [r7, #20]
 8005b10:	69b8      	ldr	r0, [r7, #24]
 8005b12:	f7ff f9ed 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f383 8811 	msr	BASEPRI, r3
}
 8005b1c:	bf00      	nop
 8005b1e:	3740      	adds	r7, #64	; 0x40
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20014360 	.word	0x20014360

08005b28 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b092      	sub	sp, #72	; 0x48
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b36:	f3ef 8311 	mrs	r3, BASEPRI
 8005b3a:	f04f 0120 	mov.w	r1, #32
 8005b3e:	f381 8811 	msr	BASEPRI, r1
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	484e      	ldr	r0, [pc, #312]	; (8005c80 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8005b46:	f7ff f8e0 	bl	8004d0a <_PreparePacket>
 8005b4a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	647b      	str	r3, [r7, #68]	; 0x44
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	643b      	str	r3, [r7, #64]	; 0x40
 8005b58:	e00b      	b.n	8005b72 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8005b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b60:	1c59      	adds	r1, r3, #1
 8005b62:	6479      	str	r1, [r7, #68]	; 0x44
 8005b64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6e:	09db      	lsrs	r3, r3, #7
 8005b70:	643b      	str	r3, [r7, #64]	; 0x40
 8005b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b74:	2b7f      	cmp	r3, #127	; 0x7f
 8005b76:	d8f0      	bhi.n	8005b5a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8005b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	647a      	str	r2, [r7, #68]	; 0x44
 8005b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b90:	e00b      	b.n	8005baa <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b98:	1c59      	adds	r1, r3, #1
 8005b9a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	09db      	lsrs	r3, r3, #7
 8005ba8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	2b7f      	cmp	r3, #127	; 0x7f
 8005bae:	d8f0      	bhi.n	8005b92 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8005bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc8:	e00b      	b.n	8005be2 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd0:	1c59      	adds	r1, r3, #1
 8005bd2:	6379      	str	r1, [r7, #52]	; 0x34
 8005bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	09db      	lsrs	r3, r3, #7
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	2b7f      	cmp	r3, #127	; 0x7f
 8005be6:	d8f0      	bhi.n	8005bca <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8005be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	637a      	str	r2, [r7, #52]	; 0x34
 8005bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c00:	e00b      	b.n	8005c1a <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	1c59      	adds	r1, r3, #1
 8005c0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	701a      	strb	r2, [r3, #0]
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	09db      	lsrs	r3, r3, #7
 8005c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c1e:	d8f0      	bhi.n	8005c02 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
 8005c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c36:	623b      	str	r3, [r7, #32]
 8005c38:	e00b      	b.n	8005c52 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	1c59      	adds	r1, r3, #1
 8005c42:	6279      	str	r1, [r7, #36]	; 0x24
 8005c44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	09db      	lsrs	r3, r3, #7
 8005c50:	623b      	str	r3, [r7, #32]
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	2b7f      	cmp	r3, #127	; 0x7f
 8005c56:	d8f0      	bhi.n	8005c3a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	627a      	str	r2, [r7, #36]	; 0x24
 8005c5e:	6a3a      	ldr	r2, [r7, #32]
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	6979      	ldr	r1, [r7, #20]
 8005c6c:	69b8      	ldr	r0, [r7, #24]
 8005c6e:	f7ff f93f 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f383 8811 	msr	BASEPRI, r3
}
 8005c78:	bf00      	nop
 8005c7a:	3748      	adds	r7, #72	; 0x48
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20014360 	.word	0x20014360

08005c84 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08c      	sub	sp, #48	; 0x30
 8005c88:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005c8a:	4b59      	ldr	r3, [pc, #356]	; (8005df0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005c90:	f3ef 8311 	mrs	r3, BASEPRI
 8005c94:	f04f 0120 	mov.w	r1, #32
 8005c98:	f381 8811 	msr	BASEPRI, r1
 8005c9c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005c9e:	4b54      	ldr	r3, [pc, #336]	; (8005df0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	220a      	movs	r2, #10
 8005ca4:	4953      	ldr	r1, [pc, #332]	; (8005df4 <SEGGER_SYSVIEW_Start+0x170>)
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fa fab2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005cb2:	f7fe fbbd 	bl	8004430 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005cb6:	200a      	movs	r0, #10
 8005cb8:	f7ff fdf0 	bl	800589c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005cc0:	f04f 0120 	mov.w	r1, #32
 8005cc4:	f381 8811 	msr	BASEPRI, r1
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	484b      	ldr	r0, [pc, #300]	; (8005df8 <SEGGER_SYSVIEW_Start+0x174>)
 8005ccc:	f7ff f81d 	bl	8004d0a <_PreparePacket>
 8005cd0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cda:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce0:	e00b      	b.n	8005cfa <SEGGER_SYSVIEW_Start+0x76>
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	1c59      	adds	r1, r3, #1
 8005cea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	09db      	lsrs	r3, r3, #7
 8005cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8005cfe:	d8f0      	bhi.n	8005ce2 <SEGGER_SYSVIEW_Start+0x5e>
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
 8005d14:	4b36      	ldr	r3, [pc, #216]	; (8005df0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	623b      	str	r3, [r7, #32]
 8005d1a:	e00b      	b.n	8005d34 <SEGGER_SYSVIEW_Start+0xb0>
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	1c59      	adds	r1, r3, #1
 8005d24:	6279      	str	r1, [r7, #36]	; 0x24
 8005d26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	09db      	lsrs	r3, r3, #7
 8005d32:	623b      	str	r3, [r7, #32]
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	2b7f      	cmp	r3, #127	; 0x7f
 8005d38:	d8f0      	bhi.n	8005d1c <SEGGER_SYSVIEW_Start+0x98>
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	627a      	str	r2, [r7, #36]	; 0x24
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	4b28      	ldr	r3, [pc, #160]	; (8005df0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	e00b      	b.n	8005d6e <SEGGER_SYSVIEW_Start+0xea>
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	1c59      	adds	r1, r3, #1
 8005d5e:	61f9      	str	r1, [r7, #28]
 8005d60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	09db      	lsrs	r3, r3, #7
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b7f      	cmp	r3, #127	; 0x7f
 8005d72:	d8f0      	bhi.n	8005d56 <SEGGER_SYSVIEW_Start+0xd2>
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	61fa      	str	r2, [r7, #28]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	e00b      	b.n	8005da6 <SEGGER_SYSVIEW_Start+0x122>
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	1c59      	adds	r1, r3, #1
 8005d96:	6179      	str	r1, [r7, #20]
 8005d98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	09db      	lsrs	r3, r3, #7
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b7f      	cmp	r3, #127	; 0x7f
 8005daa:	d8f0      	bhi.n	8005d8e <SEGGER_SYSVIEW_Start+0x10a>
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	617a      	str	r2, [r7, #20]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005dbc:	2218      	movs	r2, #24
 8005dbe:	6839      	ldr	r1, [r7, #0]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff f895 	bl	8004ef0 <_SendPacket>
      RECORD_END();
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005dcc:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005dd4:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005dda:	f000 f9eb 	bl	80061b4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005dde:	f000 f9b1 	bl	8006144 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005de2:	f000 fc83 	bl	80066ec <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005de6:	bf00      	nop
 8005de8:	3730      	adds	r7, #48	; 0x30
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20014330 	.word	0x20014330
 8005df4:	08006adc 	.word	0x08006adc
 8005df8:	20014360 	.word	0x20014360

08005dfc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e02:	f3ef 8311 	mrs	r3, BASEPRI
 8005e06:	f04f 0120 	mov.w	r1, #32
 8005e0a:	f381 8811 	msr	BASEPRI, r1
 8005e0e:	607b      	str	r3, [r7, #4]
 8005e10:	480b      	ldr	r0, [pc, #44]	; (8005e40 <SEGGER_SYSVIEW_Stop+0x44>)
 8005e12:	f7fe ff7a 	bl	8004d0a <_PreparePacket>
 8005e16:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <SEGGER_SYSVIEW_Stop+0x48>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005e20:	220b      	movs	r2, #11
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6838      	ldr	r0, [r7, #0]
 8005e26:	f7ff f863 	bl	8004ef0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005e2a:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <SEGGER_SYSVIEW_Stop+0x48>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f383 8811 	msr	BASEPRI, r3
}
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20014360 	.word	0x20014360
 8005e44:	20014330 	.word	0x20014330

08005e48 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08c      	sub	sp, #48	; 0x30
 8005e4c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e52:	f04f 0120 	mov.w	r1, #32
 8005e56:	f381 8811 	msr	BASEPRI, r1
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	4845      	ldr	r0, [pc, #276]	; (8005f74 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005e5e:	f7fe ff54 	bl	8004d0a <_PreparePacket>
 8005e62:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6c:	4b42      	ldr	r3, [pc, #264]	; (8005f78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e72:	e00b      	b.n	8005e8c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	1c59      	adds	r1, r3, #1
 8005e7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	09db      	lsrs	r3, r3, #7
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e90:	d8f0      	bhi.n	8005e74 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea6:	4b34      	ldr	r3, [pc, #208]	; (8005f78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	e00b      	b.n	8005ec6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	1c59      	adds	r1, r3, #1
 8005eb6:	6279      	str	r1, [r7, #36]	; 0x24
 8005eb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	09db      	lsrs	r3, r3, #7
 8005ec4:	623b      	str	r3, [r7, #32]
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eca:	d8f0      	bhi.n	8005eae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	627a      	str	r2, [r7, #36]	; 0x24
 8005ed2:	6a3a      	ldr	r2, [r7, #32]
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	4b25      	ldr	r3, [pc, #148]	; (8005f78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	e00b      	b.n	8005f00 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	1c59      	adds	r1, r3, #1
 8005ef0:	61f9      	str	r1, [r7, #28]
 8005ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	09db      	lsrs	r3, r3, #7
 8005efe:	61bb      	str	r3, [r7, #24]
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	2b7f      	cmp	r3, #127	; 0x7f
 8005f04:	d8f0      	bhi.n	8005ee8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	61fa      	str	r2, [r7, #28]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	e00b      	b.n	8005f38 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	6179      	str	r1, [r7, #20]
 8005f2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	09db      	lsrs	r3, r3, #7
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f3c:	d8f0      	bhi.n	8005f20 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	617a      	str	r2, [r7, #20]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005f4e:	2218      	movs	r2, #24
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	68b8      	ldr	r0, [r7, #8]
 8005f54:	f7fe ffcc 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005f66:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	4798      	blx	r3
  }
}
 8005f6c:	bf00      	nop
 8005f6e:	3730      	adds	r7, #48	; 0x30
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20014360 	.word	0x20014360
 8005f78:	20014330 	.word	0x20014330

08005f7c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b092      	sub	sp, #72	; 0x48
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005f84:	f3ef 8311 	mrs	r3, BASEPRI
 8005f88:	f04f 0120 	mov.w	r1, #32
 8005f8c:	f381 8811 	msr	BASEPRI, r1
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	486a      	ldr	r0, [pc, #424]	; (800613c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005f94:	f7fe feb9 	bl	8004d0a <_PreparePacket>
 8005f98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b66      	ldr	r3, [pc, #408]	; (8006140 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	643b      	str	r3, [r7, #64]	; 0x40
 8005fae:	e00b      	b.n	8005fc8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb6:	1c59      	adds	r1, r3, #1
 8005fb8:	6479      	str	r1, [r7, #68]	; 0x44
 8005fba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]
 8005fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc4:	09db      	lsrs	r3, r3, #7
 8005fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fca:	2b7f      	cmp	r3, #127	; 0x7f
 8005fcc:	d8f0      	bhi.n	8005fb0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	647a      	str	r2, [r7, #68]	; 0x44
 8005fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fe8:	e00b      	b.n	8006002 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffe:	09db      	lsrs	r3, r3, #7
 8006000:	63bb      	str	r3, [r7, #56]	; 0x38
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	2b7f      	cmp	r3, #127	; 0x7f
 8006006:	d8f0      	bhi.n	8005fea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800600e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006016:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	4619      	mov	r1, r3
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7fe fe25 	bl	8004c70 <_EncodeStr>
 8006026:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006028:	2209      	movs	r2, #9
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	6938      	ldr	r0, [r7, #16]
 800602e:	f7fe ff5f 	bl	8004ef0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	4b40      	ldr	r3, [pc, #256]	; (8006140 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	633b      	str	r3, [r7, #48]	; 0x30
 8006046:	e00b      	b.n	8006060 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	b2da      	uxtb	r2, r3
 800604c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604e:	1c59      	adds	r1, r3, #1
 8006050:	6379      	str	r1, [r7, #52]	; 0x34
 8006052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	09db      	lsrs	r3, r3, #7
 800605e:	633b      	str	r3, [r7, #48]	; 0x30
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	2b7f      	cmp	r3, #127	; 0x7f
 8006064:	d8f0      	bhi.n	8006048 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	637a      	str	r2, [r7, #52]	; 0x34
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006074:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006080:	e00b      	b.n	800609a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	b2da      	uxtb	r2, r3
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	1c59      	adds	r1, r3, #1
 800608a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800608c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	09db      	lsrs	r3, r3, #7
 8006098:	62bb      	str	r3, [r7, #40]	; 0x28
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	2b7f      	cmp	r3, #127	; 0x7f
 800609e:	d8f0      	bhi.n	8006082 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	623b      	str	r3, [r7, #32]
 80060ba:	e00b      	b.n	80060d4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	1c59      	adds	r1, r3, #1
 80060c4:	6279      	str	r1, [r7, #36]	; 0x24
 80060c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	09db      	lsrs	r3, r3, #7
 80060d2:	623b      	str	r3, [r7, #32]
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	2b7f      	cmp	r3, #127	; 0x7f
 80060d8:	d8f0      	bhi.n	80060bc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	627a      	str	r2, [r7, #36]	; 0x24
 80060e0:	6a3a      	ldr	r2, [r7, #32]
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	2300      	movs	r3, #0
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	e00b      	b.n	800610c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	61f9      	str	r1, [r7, #28]
 80060fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	09db      	lsrs	r3, r3, #7
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	2b7f      	cmp	r3, #127	; 0x7f
 8006110:	d8f0      	bhi.n	80060f4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	61fa      	str	r2, [r7, #28]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006122:	2215      	movs	r2, #21
 8006124:	68f9      	ldr	r1, [r7, #12]
 8006126:	6938      	ldr	r0, [r7, #16]
 8006128:	f7fe fee2 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f383 8811 	msr	BASEPRI, r3
}
 8006132:	bf00      	nop
 8006134:	3748      	adds	r7, #72	; 0x48
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20014360 	.word	0x20014360
 8006140:	20014330 	.word	0x20014330

08006144 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006148:	4b07      	ldr	r3, [pc, #28]	; (8006168 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800615a:	4b03      	ldr	r3, [pc, #12]	; (8006168 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	4798      	blx	r3
  }
}
 8006162:	bf00      	nop
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20014330 	.word	0x20014330

0800616c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006174:	f3ef 8311 	mrs	r3, BASEPRI
 8006178:	f04f 0120 	mov.w	r1, #32
 800617c:	f381 8811 	msr	BASEPRI, r1
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	480b      	ldr	r0, [pc, #44]	; (80061b0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006184:	f7fe fdc1 	bl	8004d0a <_PreparePacket>
 8006188:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800618a:	2280      	movs	r2, #128	; 0x80
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	6938      	ldr	r0, [r7, #16]
 8006190:	f7fe fd6e 	bl	8004c70 <_EncodeStr>
 8006194:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006196:	220e      	movs	r2, #14
 8006198:	68f9      	ldr	r1, [r7, #12]
 800619a:	6938      	ldr	r0, [r7, #16]
 800619c:	f7fe fea8 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f383 8811 	msr	BASEPRI, r3
}
 80061a6:	bf00      	nop
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20014360 	.word	0x20014360

080061b4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80061b4:	b590      	push	{r4, r7, lr}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80061ba:	4b15      	ldr	r3, [pc, #84]	; (8006210 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d01a      	beq.n	80061f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80061c2:	4b13      	ldr	r3, [pc, #76]	; (8006210 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d015      	beq.n	80061f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80061cc:	4b10      	ldr	r3, [pc, #64]	; (8006210 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4798      	blx	r3
 80061d4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80061d8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80061da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	000a      	movs	r2, r1
 80061e8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80061ea:	4613      	mov	r3, r2
 80061ec:	461a      	mov	r2, r3
 80061ee:	4621      	mov	r1, r4
 80061f0:	200d      	movs	r0, #13
 80061f2:	f7ff fbad 	bl	8005950 <SEGGER_SYSVIEW_RecordU32x2>
 80061f6:	e006      	b.n	8006206 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80061f8:	4b06      	ldr	r3, [pc, #24]	; (8006214 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4619      	mov	r1, r3
 80061fe:	200c      	movs	r0, #12
 8006200:	f7ff fb6a 	bl	80058d8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	bd90      	pop	{r4, r7, pc}
 800620e:	bf00      	nop
 8006210:	20014330 	.word	0x20014330
 8006214:	e0001004 	.word	0xe0001004

08006218 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800621e:	f3ef 8311 	mrs	r3, BASEPRI
 8006222:	f04f 0120 	mov.w	r1, #32
 8006226:	f381 8811 	msr	BASEPRI, r1
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	4819      	ldr	r0, [pc, #100]	; (8006294 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800622e:	f7fe fd6c 	bl	8004d0a <_PreparePacket>
 8006232:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006238:	4b17      	ldr	r3, [pc, #92]	; (8006298 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006240:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	e00b      	b.n	8006264 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	6179      	str	r1, [r7, #20]
 8006256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	09db      	lsrs	r3, r3, #7
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2b7f      	cmp	r3, #127	; 0x7f
 8006268:	d8f0      	bhi.n	800624c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	617a      	str	r2, [r7, #20]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800627a:	2202      	movs	r2, #2
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	68b8      	ldr	r0, [r7, #8]
 8006280:	f7fe fe36 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f383 8811 	msr	BASEPRI, r3
}
 800628a:	bf00      	nop
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20014360 	.word	0x20014360
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062a2:	f3ef 8311 	mrs	r3, BASEPRI
 80062a6:	f04f 0120 	mov.w	r1, #32
 80062aa:	f381 8811 	msr	BASEPRI, r1
 80062ae:	607b      	str	r3, [r7, #4]
 80062b0:	4807      	ldr	r0, [pc, #28]	; (80062d0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80062b2:	f7fe fd2a 	bl	8004d0a <_PreparePacket>
 80062b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80062b8:	2203      	movs	r2, #3
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6838      	ldr	r0, [r7, #0]
 80062be:	f7fe fe17 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f383 8811 	msr	BASEPRI, r3
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20014360 	.word	0x20014360

080062d4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062da:	f3ef 8311 	mrs	r3, BASEPRI
 80062de:	f04f 0120 	mov.w	r1, #32
 80062e2:	f381 8811 	msr	BASEPRI, r1
 80062e6:	607b      	str	r3, [r7, #4]
 80062e8:	4807      	ldr	r0, [pc, #28]	; (8006308 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80062ea:	f7fe fd0e 	bl	8004d0a <_PreparePacket>
 80062ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80062f0:	2212      	movs	r2, #18
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6838      	ldr	r0, [r7, #0]
 80062f6:	f7fe fdfb 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f383 8811 	msr	BASEPRI, r3
}
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20014360 	.word	0x20014360

0800630c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006312:	f3ef 8311 	mrs	r3, BASEPRI
 8006316:	f04f 0120 	mov.w	r1, #32
 800631a:	f381 8811 	msr	BASEPRI, r1
 800631e:	607b      	str	r3, [r7, #4]
 8006320:	4807      	ldr	r0, [pc, #28]	; (8006340 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006322:	f7fe fcf2 	bl	8004d0a <_PreparePacket>
 8006326:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006328:	2211      	movs	r2, #17
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	6838      	ldr	r0, [r7, #0]
 800632e:	f7fe fddf 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f383 8811 	msr	BASEPRI, r3
}
 8006338:	bf00      	nop
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20014360 	.word	0x20014360

08006344 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800634c:	f3ef 8311 	mrs	r3, BASEPRI
 8006350:	f04f 0120 	mov.w	r1, #32
 8006354:	f381 8811 	msr	BASEPRI, r1
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	4819      	ldr	r0, [pc, #100]	; (80063c0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800635c:	f7fe fcd5 	bl	8004d0a <_PreparePacket>
 8006360:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006366:	4b17      	ldr	r3, [pc, #92]	; (80063c4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	61fb      	str	r3, [r7, #28]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	e00b      	b.n	8006392 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	b2da      	uxtb	r2, r3
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	1c59      	adds	r1, r3, #1
 8006382:	61f9      	str	r1, [r7, #28]
 8006384:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	09db      	lsrs	r3, r3, #7
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b7f      	cmp	r3, #127	; 0x7f
 8006396:	d8f0      	bhi.n	800637a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	61fa      	str	r2, [r7, #28]
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80063a8:	2208      	movs	r2, #8
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	6938      	ldr	r0, [r7, #16]
 80063ae:	f7fe fd9f 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f383 8811 	msr	BASEPRI, r3
}
 80063b8:	bf00      	nop
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20014360 	.word	0x20014360
 80063c4:	20014330 	.word	0x20014330

080063c8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063d0:	f3ef 8311 	mrs	r3, BASEPRI
 80063d4:	f04f 0120 	mov.w	r1, #32
 80063d8:	f381 8811 	msr	BASEPRI, r1
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	4819      	ldr	r0, [pc, #100]	; (8006444 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80063e0:	f7fe fc93 	bl	8004d0a <_PreparePacket>
 80063e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063ea:	4b17      	ldr	r3, [pc, #92]	; (8006448 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	61fb      	str	r3, [r7, #28]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e00b      	b.n	8006416 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	b2da      	uxtb	r2, r3
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	1c59      	adds	r1, r3, #1
 8006406:	61f9      	str	r1, [r7, #28]
 8006408:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	09db      	lsrs	r3, r3, #7
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	2b7f      	cmp	r3, #127	; 0x7f
 800641a:	d8f0      	bhi.n	80063fe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	61fa      	str	r2, [r7, #28]
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800642c:	2204      	movs	r2, #4
 800642e:	68f9      	ldr	r1, [r7, #12]
 8006430:	6938      	ldr	r0, [r7, #16]
 8006432:	f7fe fd5d 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f383 8811 	msr	BASEPRI, r3
}
 800643c:	bf00      	nop
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20014360 	.word	0x20014360
 8006448:	20014330 	.word	0x20014330

0800644c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800644c:	b580      	push	{r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006454:	f3ef 8311 	mrs	r3, BASEPRI
 8006458:	f04f 0120 	mov.w	r1, #32
 800645c:	f381 8811 	msr	BASEPRI, r1
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	4819      	ldr	r0, [pc, #100]	; (80064c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006464:	f7fe fc51 	bl	8004d0a <_PreparePacket>
 8006468:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800646e:	4b17      	ldr	r3, [pc, #92]	; (80064cc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	e00b      	b.n	800649a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	b2da      	uxtb	r2, r3
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	1c59      	adds	r1, r3, #1
 800648a:	61f9      	str	r1, [r7, #28]
 800648c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	09db      	lsrs	r3, r3, #7
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b7f      	cmp	r3, #127	; 0x7f
 800649e:	d8f0      	bhi.n	8006482 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	61fa      	str	r2, [r7, #28]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80064b0:	2206      	movs	r2, #6
 80064b2:	68f9      	ldr	r1, [r7, #12]
 80064b4:	6938      	ldr	r0, [r7, #16]
 80064b6:	f7fe fd1b 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f383 8811 	msr	BASEPRI, r3
}
 80064c0:	bf00      	nop
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20014360 	.word	0x20014360
 80064cc:	20014330 	.word	0x20014330

080064d0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	; 0x28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80064da:	f3ef 8311 	mrs	r3, BASEPRI
 80064de:	f04f 0120 	mov.w	r1, #32
 80064e2:	f381 8811 	msr	BASEPRI, r1
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	4827      	ldr	r0, [pc, #156]	; (8006588 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80064ea:	f7fe fc0e 	bl	8004d0a <_PreparePacket>
 80064ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80064f4:	4b25      	ldr	r3, [pc, #148]	; (800658c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	623b      	str	r3, [r7, #32]
 8006506:	e00b      	b.n	8006520 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	b2da      	uxtb	r2, r3
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	1c59      	adds	r1, r3, #1
 8006510:	6279      	str	r1, [r7, #36]	; 0x24
 8006512:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	09db      	lsrs	r3, r3, #7
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	2b7f      	cmp	r3, #127	; 0x7f
 8006524:	d8f0      	bhi.n	8006508 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	627a      	str	r2, [r7, #36]	; 0x24
 800652c:	6a3a      	ldr	r2, [r7, #32]
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	e00b      	b.n	8006558 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	1c59      	adds	r1, r3, #1
 8006548:	61f9      	str	r1, [r7, #28]
 800654a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	09db      	lsrs	r3, r3, #7
 8006556:	61bb      	str	r3, [r7, #24]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b7f      	cmp	r3, #127	; 0x7f
 800655c:	d8f0      	bhi.n	8006540 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	61fa      	str	r2, [r7, #28]
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800656e:	2207      	movs	r2, #7
 8006570:	68f9      	ldr	r1, [r7, #12]
 8006572:	6938      	ldr	r0, [r7, #16]
 8006574:	f7fe fcbc 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f383 8811 	msr	BASEPRI, r3
}
 800657e:	bf00      	nop
 8006580:	3728      	adds	r7, #40	; 0x28
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20014360 	.word	0x20014360
 800658c:	20014330 	.word	0x20014330

08006590 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006598:	4b04      	ldr	r3, [pc, #16]	; (80065ac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	1ad3      	subs	r3, r2, r3
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20014330 	.word	0x20014330

080065b0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	; 0x30
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80065ba:	4b3b      	ldr	r3, [pc, #236]	; (80066a8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d06d      	beq.n	800669e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80065c2:	4b39      	ldr	r3, [pc, #228]	; (80066a8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80065c8:	2300      	movs	r3, #0
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80065cc:	e008      	b.n	80065e0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80065d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	3301      	adds	r3, #1
 80065de:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d3f2      	bcc.n	80065ce <SEGGER_SYSVIEW_SendModule+0x1e>
 80065e8:	e000      	b.n	80065ec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80065ea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d055      	beq.n	800669e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065f2:	f3ef 8311 	mrs	r3, BASEPRI
 80065f6:	f04f 0120 	mov.w	r1, #32
 80065fa:	f381 8811 	msr	BASEPRI, r1
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	482a      	ldr	r0, [pc, #168]	; (80066ac <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006602:	f7fe fb82 	bl	8004d0a <_PreparePacket>
 8006606:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	623b      	str	r3, [r7, #32]
 8006614:	e00b      	b.n	800662e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	b2da      	uxtb	r2, r3
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	1c59      	adds	r1, r3, #1
 800661e:	6279      	str	r1, [r7, #36]	; 0x24
 8006620:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	09db      	lsrs	r3, r3, #7
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	2b7f      	cmp	r3, #127	; 0x7f
 8006632:	d8f0      	bhi.n	8006616 <SEGGER_SYSVIEW_SendModule+0x66>
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	627a      	str	r2, [r7, #36]	; 0x24
 800663a:	6a3a      	ldr	r2, [r7, #32]
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	e00b      	b.n	8006668 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	b2da      	uxtb	r2, r3
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	1c59      	adds	r1, r3, #1
 8006658:	61f9      	str	r1, [r7, #28]
 800665a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	09db      	lsrs	r3, r3, #7
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b7f      	cmp	r3, #127	; 0x7f
 800666c:	d8f0      	bhi.n	8006650 <SEGGER_SYSVIEW_SendModule+0xa0>
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	61fa      	str	r2, [r7, #28]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2280      	movs	r2, #128	; 0x80
 8006684:	4619      	mov	r1, r3
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7fe faf2 	bl	8004c70 <_EncodeStr>
 800668c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800668e:	2216      	movs	r2, #22
 8006690:	68f9      	ldr	r1, [r7, #12]
 8006692:	6938      	ldr	r0, [r7, #16]
 8006694:	f7fe fc2c 	bl	8004ef0 <_SendPacket>
      RECORD_END();
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800669e:	bf00      	nop
 80066a0:	3730      	adds	r7, #48	; 0x30
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20014358 	.word	0x20014358
 80066ac:	20014360 	.word	0x20014360

080066b0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80066b6:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00f      	beq.n	80066de <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80066be:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f2      	bne.n	80066c4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20014358 	.word	0x20014358

080066ec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80066f2:	f3ef 8311 	mrs	r3, BASEPRI
 80066f6:	f04f 0120 	mov.w	r1, #32
 80066fa:	f381 8811 	msr	BASEPRI, r1
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	4817      	ldr	r0, [pc, #92]	; (8006760 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006702:	f7fe fb02 	bl	8004d0a <_PreparePacket>
 8006706:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	4b14      	ldr	r3, [pc, #80]	; (8006764 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	e00b      	b.n	8006730 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	b2da      	uxtb	r2, r3
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	1c59      	adds	r1, r3, #1
 8006720:	6179      	str	r1, [r7, #20]
 8006722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	09db      	lsrs	r3, r3, #7
 800672e:	613b      	str	r3, [r7, #16]
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2b7f      	cmp	r3, #127	; 0x7f
 8006734:	d8f0      	bhi.n	8006718 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	617a      	str	r2, [r7, #20]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006746:	221b      	movs	r2, #27
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	68b8      	ldr	r0, [r7, #8]
 800674c:	f7fe fbd0 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f383 8811 	msr	BASEPRI, r3
}
 8006756:	bf00      	nop
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20014360 	.word	0x20014360
 8006764:	2001435c 	.word	0x2001435c

08006768 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006768:	b40f      	push	{r0, r1, r2, r3}
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006770:	f107 0314 	add.w	r3, r7, #20
 8006774:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006776:	1d3b      	adds	r3, r7, #4
 8006778:	461a      	mov	r2, r3
 800677a:	2100      	movs	r1, #0
 800677c:	6938      	ldr	r0, [r7, #16]
 800677e:	f7fe fe41 	bl	8005404 <_VPrintTarget>
  va_end(ParamList);
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800678c:	b004      	add	sp, #16
 800678e:	4770      	bx	lr

08006790 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006798:	f3ef 8311 	mrs	r3, BASEPRI
 800679c:	f04f 0120 	mov.w	r1, #32
 80067a0:	f381 8811 	msr	BASEPRI, r1
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	4827      	ldr	r0, [pc, #156]	; (8006844 <SEGGER_SYSVIEW_Warn+0xb4>)
 80067a8:	f7fe faaf 	bl	8004d0a <_PreparePacket>
 80067ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067ae:	2280      	movs	r2, #128	; 0x80
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	6938      	ldr	r0, [r7, #16]
 80067b4:	f7fe fa5c 	bl	8004c70 <_EncodeStr>
 80067b8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
 80067be:	2301      	movs	r3, #1
 80067c0:	623b      	str	r3, [r7, #32]
 80067c2:	e00b      	b.n	80067dc <SEGGER_SYSVIEW_Warn+0x4c>
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	1c59      	adds	r1, r3, #1
 80067cc:	6279      	str	r1, [r7, #36]	; 0x24
 80067ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	09db      	lsrs	r3, r3, #7
 80067da:	623b      	str	r3, [r7, #32]
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	2b7f      	cmp	r3, #127	; 0x7f
 80067e0:	d8f0      	bhi.n	80067c4 <SEGGER_SYSVIEW_Warn+0x34>
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	627a      	str	r2, [r7, #36]	; 0x24
 80067e8:	6a3a      	ldr	r2, [r7, #32]
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	61fb      	str	r3, [r7, #28]
 80067f6:	2300      	movs	r3, #0
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	e00b      	b.n	8006814 <SEGGER_SYSVIEW_Warn+0x84>
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	1c59      	adds	r1, r3, #1
 8006804:	61f9      	str	r1, [r7, #28]
 8006806:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	09db      	lsrs	r3, r3, #7
 8006812:	61bb      	str	r3, [r7, #24]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	2b7f      	cmp	r3, #127	; 0x7f
 8006818:	d8f0      	bhi.n	80067fc <SEGGER_SYSVIEW_Warn+0x6c>
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	61fa      	str	r2, [r7, #28]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800682a:	221a      	movs	r2, #26
 800682c:	68f9      	ldr	r1, [r7, #12]
 800682e:	6938      	ldr	r0, [r7, #16]
 8006830:	f7fe fb5e 	bl	8004ef0 <_SendPacket>
  RECORD_END();
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f383 8811 	msr	BASEPRI, r3
}
 800683a:	bf00      	nop
 800683c:	3728      	adds	r7, #40	; 0x28
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20014360 	.word	0x20014360

08006848 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800684c:	4b13      	ldr	r3, [pc, #76]	; (800689c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800684e:	7e1b      	ldrb	r3, [r3, #24]
 8006850:	4619      	mov	r1, r3
 8006852:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006854:	460b      	mov	r3, r1
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	440b      	add	r3, r1
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	4413      	add	r3, r2
 800685e:	336c      	adds	r3, #108	; 0x6c
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	4b0e      	ldr	r3, [pc, #56]	; (800689c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006864:	7e1b      	ldrb	r3, [r3, #24]
 8006866:	4618      	mov	r0, r3
 8006868:	490d      	ldr	r1, [pc, #52]	; (80068a0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800686a:	4603      	mov	r3, r0
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	4403      	add	r3, r0
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	440b      	add	r3, r1
 8006874:	3370      	adds	r3, #112	; 0x70
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d00b      	beq.n	8006894 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800687c:	4b07      	ldr	r3, [pc, #28]	; (800689c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800687e:	789b      	ldrb	r3, [r3, #2]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d107      	bne.n	8006894 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006886:	2201      	movs	r2, #1
 8006888:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800688a:	f7fe fa4b 	bl	8004d24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800688e:	4b03      	ldr	r3, [pc, #12]	; (800689c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006890:	2200      	movs	r2, #0
 8006892:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006894:	4b01      	ldr	r3, [pc, #4]	; (800689c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006896:	781b      	ldrb	r3, [r3, #0]
}
 8006898:	4618      	mov	r0, r3
 800689a:	bd80      	pop	{r7, pc}
 800689c:	20014330 	.word	0x20014330
 80068a0:	20012e70 	.word	0x20012e70

080068a4 <__libc_init_array>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	4d0d      	ldr	r5, [pc, #52]	; (80068dc <__libc_init_array+0x38>)
 80068a8:	4c0d      	ldr	r4, [pc, #52]	; (80068e0 <__libc_init_array+0x3c>)
 80068aa:	1b64      	subs	r4, r4, r5
 80068ac:	10a4      	asrs	r4, r4, #2
 80068ae:	2600      	movs	r6, #0
 80068b0:	42a6      	cmp	r6, r4
 80068b2:	d109      	bne.n	80068c8 <__libc_init_array+0x24>
 80068b4:	4d0b      	ldr	r5, [pc, #44]	; (80068e4 <__libc_init_array+0x40>)
 80068b6:	4c0c      	ldr	r4, [pc, #48]	; (80068e8 <__libc_init_array+0x44>)
 80068b8:	f000 f83e 	bl	8006938 <_init>
 80068bc:	1b64      	subs	r4, r4, r5
 80068be:	10a4      	asrs	r4, r4, #2
 80068c0:	2600      	movs	r6, #0
 80068c2:	42a6      	cmp	r6, r4
 80068c4:	d105      	bne.n	80068d2 <__libc_init_array+0x2e>
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
 80068c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068cc:	4798      	blx	r3
 80068ce:	3601      	adds	r6, #1
 80068d0:	e7ee      	b.n	80068b0 <__libc_init_array+0xc>
 80068d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d6:	4798      	blx	r3
 80068d8:	3601      	adds	r6, #1
 80068da:	e7f2      	b.n	80068c2 <__libc_init_array+0x1e>
 80068dc:	08006b00 	.word	0x08006b00
 80068e0:	08006b00 	.word	0x08006b00
 80068e4:	08006b00 	.word	0x08006b00
 80068e8:	08006b04 	.word	0x08006b04

080068ec <memcmp>:
 80068ec:	b510      	push	{r4, lr}
 80068ee:	3901      	subs	r1, #1
 80068f0:	4402      	add	r2, r0
 80068f2:	4290      	cmp	r0, r2
 80068f4:	d101      	bne.n	80068fa <memcmp+0xe>
 80068f6:	2000      	movs	r0, #0
 80068f8:	e005      	b.n	8006906 <memcmp+0x1a>
 80068fa:	7803      	ldrb	r3, [r0, #0]
 80068fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006900:	42a3      	cmp	r3, r4
 8006902:	d001      	beq.n	8006908 <memcmp+0x1c>
 8006904:	1b18      	subs	r0, r3, r4
 8006906:	bd10      	pop	{r4, pc}
 8006908:	3001      	adds	r0, #1
 800690a:	e7f2      	b.n	80068f2 <memcmp+0x6>

0800690c <memcpy>:
 800690c:	440a      	add	r2, r1
 800690e:	4291      	cmp	r1, r2
 8006910:	f100 33ff 	add.w	r3, r0, #4294967295
 8006914:	d100      	bne.n	8006918 <memcpy+0xc>
 8006916:	4770      	bx	lr
 8006918:	b510      	push	{r4, lr}
 800691a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800691e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006922:	4291      	cmp	r1, r2
 8006924:	d1f9      	bne.n	800691a <memcpy+0xe>
 8006926:	bd10      	pop	{r4, pc}

08006928 <memset>:
 8006928:	4402      	add	r2, r0
 800692a:	4603      	mov	r3, r0
 800692c:	4293      	cmp	r3, r2
 800692e:	d100      	bne.n	8006932 <memset+0xa>
 8006930:	4770      	bx	lr
 8006932:	f803 1b01 	strb.w	r1, [r3], #1
 8006936:	e7f9      	b.n	800692c <memset+0x4>

08006938 <_init>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	bf00      	nop
 800693c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693e:	bc08      	pop	{r3}
 8006940:	469e      	mov	lr, r3
 8006942:	4770      	bx	lr

08006944 <_fini>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	bf00      	nop
 8006948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694a:	bc08      	pop	{r3}
 800694c:	469e      	mov	lr, r3
 800694e:	4770      	bx	lr
