
Led_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005cc8  08005cc8  00015cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e24  08005e24  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e2c  08005e2c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014414  2000001c  08005e50  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014430  08005e50  00024430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013472  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ddd  00000000  00000000  000334be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  000362a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  000374a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a3a  00000000  00000000  00038528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147fd  00000000  00000000  0005bf62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db3dc  00000000  00000000  0007075f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bb3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a8c  00000000  00000000  0014bb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005cb0 	.word	0x08005cb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08005cb0 	.word	0x08005cb0

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012e5c 	.word	0x20012e5c

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b974 	b.w	80005a4 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468e      	mov	lr, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14d      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4694      	mov	ip, r2
 80002e6:	d969      	bls.n	80003bc <__udivmoddi4+0xe8>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b152      	cbz	r2, 8000304 <__udivmoddi4+0x30>
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	f1c2 0120 	rsb	r1, r2, #32
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000302:	4094      	lsls	r4, r2
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	0c21      	lsrs	r1, r4, #16
 800030a:	fbbe f6f8 	udiv	r6, lr, r8
 800030e:	fa1f f78c 	uxth.w	r7, ip
 8000312:	fb08 e316 	mls	r3, r8, r6, lr
 8000316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800031a:	fb06 f107 	mul.w	r1, r6, r7
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 30ff 	add.w	r0, r6, #4294967295
 800032a:	f080 811f 	bcs.w	800056c <__udivmoddi4+0x298>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 811c 	bls.w	800056c <__udivmoddi4+0x298>
 8000334:	3e02      	subs	r6, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a5b      	subs	r3, r3, r1
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000340:	fb08 3310 	mls	r3, r8, r0, r3
 8000344:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000348:	fb00 f707 	mul.w	r7, r0, r7
 800034c:	42a7      	cmp	r7, r4
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x92>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 33ff 	add.w	r3, r0, #4294967295
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x29c>
 800035c:	42a7      	cmp	r7, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x29c>
 8000362:	4464      	add	r4, ip
 8000364:	3802      	subs	r0, #2
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	1be4      	subs	r4, r4, r7
 800036c:	2600      	movs	r6, #0
 800036e:	b11d      	cbz	r5, 8000378 <__udivmoddi4+0xa4>
 8000370:	40d4      	lsrs	r4, r2
 8000372:	2300      	movs	r3, #0
 8000374:	e9c5 4300 	strd	r4, r3, [r5]
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0xc2>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80ef 	beq.w	8000566 <__udivmoddi4+0x292>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x160>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xd4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80f9 	bhi.w	800059a <__udivmoddi4+0x2c6>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0303 	sbc.w	r3, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	469e      	mov	lr, r3
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e0      	beq.n	8000378 <__udivmoddi4+0xa4>
 80003b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ba:	e7dd      	b.n	8000378 <__udivmoddi4+0xa4>
 80003bc:	b902      	cbnz	r2, 80003c0 <__udivmoddi4+0xec>
 80003be:	deff      	udf	#255	; 0xff
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	f040 8092 	bne.w	80004ee <__udivmoddi4+0x21a>
 80003ca:	eba1 010c 	sub.w	r1, r1, ip
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2601      	movs	r6, #1
 80003d8:	0c20      	lsrs	r0, r4, #16
 80003da:	fbb1 f3f7 	udiv	r3, r1, r7
 80003de:	fb07 1113 	mls	r1, r7, r3, r1
 80003e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e6:	fb0e f003 	mul.w	r0, lr, r3
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x12c>
 80003ee:	eb1c 0101 	adds.w	r1, ip, r1
 80003f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x12a>
 80003f8:	4288      	cmp	r0, r1
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2c0>
 80003fe:	4643      	mov	r3, r8
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f7 	udiv	r0, r1, r7
 8000408:	fb07 1110 	mls	r1, r7, r0, r1
 800040c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x156>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x154>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2ca>
 8000428:	4608      	mov	r0, r1
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000432:	e79c      	b.n	800036e <__udivmoddi4+0x9a>
 8000434:	f1c6 0720 	rsb	r7, r6, #32
 8000438:	40b3      	lsls	r3, r6
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa20 f407 	lsr.w	r4, r0, r7
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	431c      	orrs	r4, r3
 800044c:	40f9      	lsrs	r1, r7
 800044e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000452:	fa00 f306 	lsl.w	r3, r0, r6
 8000456:	fbb1 f8f9 	udiv	r8, r1, r9
 800045a:	0c20      	lsrs	r0, r4, #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fb09 1118 	mls	r1, r9, r8, r1
 8000464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000468:	fb08 f00e 	mul.w	r0, r8, lr
 800046c:	4288      	cmp	r0, r1
 800046e:	fa02 f206 	lsl.w	r2, r2, r6
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b8>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2bc>
 8000480:	4288      	cmp	r0, r1
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2bc>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4461      	add	r1, ip
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f9 	udiv	r0, r1, r9
 8000494:	fb09 1110 	mls	r1, r9, r0, r1
 8000498:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049c:	fb00 fe0e 	mul.w	lr, r0, lr
 80004a0:	458e      	cmp	lr, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1e2>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2b4>
 80004ae:	458e      	cmp	lr, r1
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2b4>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ba:	fba0 9402 	umull	r9, r4, r0, r2
 80004be:	eba1 010e 	sub.w	r1, r1, lr
 80004c2:	42a1      	cmp	r1, r4
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46a6      	mov	lr, r4
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x2a4>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x2a0>
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x212>
 80004ce:	ebb3 0208 	subs.w	r2, r3, r8
 80004d2:	eb61 010e 	sbc.w	r1, r1, lr
 80004d6:	fa01 f707 	lsl.w	r7, r1, r7
 80004da:	fa22 f306 	lsr.w	r3, r2, r6
 80004de:	40f1      	lsrs	r1, r6
 80004e0:	431f      	orrs	r7, r3
 80004e2:	e9c5 7100 	strd	r7, r1, [r5]
 80004e6:	2600      	movs	r6, #0
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	40d8      	lsrs	r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa21 f303 	lsr.w	r3, r1, r3
 80004fc:	4091      	lsls	r1, r2
 80004fe:	4301      	orrs	r1, r0
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb3 f0f7 	udiv	r0, r3, r7
 800050c:	fb07 3610 	mls	r6, r7, r0, r3
 8000510:	0c0b      	lsrs	r3, r1, #16
 8000512:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000516:	fb00 f60e 	mul.w	r6, r0, lr
 800051a:	429e      	cmp	r6, r3
 800051c:	fa04 f402 	lsl.w	r4, r4, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x260>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b8>
 800052c:	429e      	cmp	r6, r3
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b8>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1b9b      	subs	r3, r3, r6
 8000536:	b289      	uxth	r1, r1
 8000538:	fbb3 f6f7 	udiv	r6, r3, r7
 800053c:	fb07 3316 	mls	r3, r7, r6, r3
 8000540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000544:	fb06 f30e 	mul.w	r3, r6, lr
 8000548:	428b      	cmp	r3, r1
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x28a>
 800054c:	eb1c 0101 	adds.w	r1, ip, r1
 8000550:	f106 38ff 	add.w	r8, r6, #4294967295
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000556:	428b      	cmp	r3, r1
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2b0>
 800055a:	3e02      	subs	r6, #2
 800055c:	4461      	add	r1, ip
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0x104>
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e705      	b.n	8000378 <__udivmoddi4+0xa4>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x64>
 8000570:	4618      	mov	r0, r3
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x92>
 8000574:	454b      	cmp	r3, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f8>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000580:	3801      	subs	r0, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f8>
 8000584:	4646      	mov	r6, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x28a>
 8000588:	4620      	mov	r0, r4
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1e2>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x260>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b8>
 8000594:	3b02      	subs	r3, #2
 8000596:	4461      	add	r1, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x12c>
 800059a:	4630      	mov	r0, r6
 800059c:	e709      	b.n	80003b2 <__udivmoddi4+0xde>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x156>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */
	BaseType_t status ;
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 faad 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f86d 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8dd 	bl	8000774 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0) ;
 80005ba:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <main+0xc8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a2c      	ldr	r2, [pc, #176]	; (8000670 <main+0xc8>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 80005c6:	482b      	ldr	r0, [pc, #172]	; (8000674 <main+0xcc>)
 80005c8:	f003 fa42 	bl	8003a50 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf() ;
 80005cc:	f003 f86a 	bl	80036a4 <SEGGER_SYSVIEW_Conf>
 // SEGGER_SYSVIEW_Start() ;



  status = xTaskCreate(led_green_handler, "Led green task", 200,NULL, 2, &task1_handle) ;
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2302      	movs	r3, #2
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	22c8      	movs	r2, #200	; 0xc8
 80005de:	4926      	ldr	r1, [pc, #152]	; (8000678 <main+0xd0>)
 80005e0:	4826      	ldr	r0, [pc, #152]	; (800067c <main+0xd4>)
 80005e2:	f001 ff22 	bl	800242a <xTaskCreate>
 80005e6:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS) ; // nếu tạo không thành công vẽ rơi vào vòng lặp vô hạn => có lỗi
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00a      	beq.n	8000604 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f2:	f383 8811 	msr	BASEPRI, r3
 80005f6:	f3bf 8f6f 	isb	sy
 80005fa:	f3bf 8f4f 	dsb	sy
 80005fe:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000600:	bf00      	nop
 8000602:	e7fe      	b.n	8000602 <main+0x5a>

  status = xTaskCreate(led_red_handler, "Led red task", 200, NULL, 2, &task2_handle) ;
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2302      	movs	r3, #2
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	22c8      	movs	r2, #200	; 0xc8
 8000612:	491b      	ldr	r1, [pc, #108]	; (8000680 <main+0xd8>)
 8000614:	481b      	ldr	r0, [pc, #108]	; (8000684 <main+0xdc>)
 8000616:	f001 ff08 	bl	800242a <xTaskCreate>
 800061a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS) ; // nếu tạo không thành công vẽ rơi vào vòng lặp vô hạn => có lỗi
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d00a      	beq.n	8000638 <main+0x90>
        __asm volatile
 8000622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000626:	f383 8811 	msr	BASEPRI, r3
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	617b      	str	r3, [r7, #20]
    }
 8000634:	bf00      	nop
 8000636:	e7fe      	b.n	8000636 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "Led orange task", 200, NULL, 2, &task3_handle) ;
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2302      	movs	r3, #2
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2300      	movs	r3, #0
 8000642:	22c8      	movs	r2, #200	; 0xc8
 8000644:	4910      	ldr	r1, [pc, #64]	; (8000688 <main+0xe0>)
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <main+0xe4>)
 8000648:	f001 feef 	bl	800242a <xTaskCreate>
 800064c:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS) ; // nếu tạo không thành công vẽ rơi vào vòng lặp vô hạn => có lỗi
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00a      	beq.n	800066a <main+0xc2>
        __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	613b      	str	r3, [r7, #16]
    }
 8000666:	bf00      	nop
 8000668:	e7fe      	b.n	8000668 <main+0xc0>


  // start the FreeRTOS scheduler
  vTaskStartScheduler();
 800066a:	f002 f841 	bl	80026f0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066e:	e7fe      	b.n	800066e <main+0xc6>
 8000670:	e0001000 	.word	0xe0001000
 8000674:	0007a120 	.word	0x0007a120
 8000678:	08005cc8 	.word	0x08005cc8
 800067c:	0800089d 	.word	0x0800089d
 8000680:	08005cd8 	.word	0x08005cd8
 8000684:	080008c9 	.word	0x080008c9
 8000688:	08005ce8 	.word	0x08005ce8
 800068c:	080008f5 	.word	0x080008f5

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fafe 	bl	8005ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a2b      	ldr	r2, [pc, #172]	; (800076c <SystemClock_Config+0xdc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xdc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <SystemClock_Config+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a25      	ldr	r2, [pc, #148]	; (8000770 <SystemClock_Config+0xe0>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xe0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000704:	23b4      	movs	r3, #180	; 0xb4
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f001 f8bf 	bl	800189c <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000724:	f000 f90e 	bl	8000944 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000728:	f000 fd00 	bl	800112c <HAL_PWREx_EnableOverDrive>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000732:	f000 f907 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000742:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2105      	movs	r1, #5
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fd39 	bl	80011cc <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000760:	f000 f8f0 	bl	8000944 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3750      	adds	r7, #80	; 0x50
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b40      	ldr	r3, [pc, #256]	; (8000890 <MX_GPIO_Init+0x11c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a3f      	ldr	r2, [pc, #252]	; (8000890 <MX_GPIO_Init+0x11c>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b3d      	ldr	r3, [pc, #244]	; (8000890 <MX_GPIO_Init+0x11c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b39      	ldr	r3, [pc, #228]	; (8000890 <MX_GPIO_Init+0x11c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a38      	ldr	r2, [pc, #224]	; (8000890 <MX_GPIO_Init+0x11c>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b36      	ldr	r3, [pc, #216]	; (8000890 <MX_GPIO_Init+0x11c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_GPIO_Init+0x11c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a31      	ldr	r2, [pc, #196]	; (8000890 <MX_GPIO_Init+0x11c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_GPIO_Init+0x11c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_GPIO_Init+0x11c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a2a      	ldr	r2, [pc, #168]	; (8000890 <MX_GPIO_Init+0x11c>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_GPIO_Init+0x11c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	4825      	ldr	r0, [pc, #148]	; (8000894 <MX_GPIO_Init+0x120>)
 8000800:	f000 fc60 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800080a:	4823      	ldr	r0, [pc, #140]	; (8000898 <MX_GPIO_Init+0x124>)
 800080c:	f000 fc5a 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000816:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	481c      	ldr	r0, [pc, #112]	; (8000898 <MX_GPIO_Init+0x124>)
 8000828:	f000 fab8 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800082c:	230c      	movs	r3, #12
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083c:	2307      	movs	r3, #7
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4813      	ldr	r0, [pc, #76]	; (8000894 <MX_GPIO_Init+0x120>)
 8000848:	f000 faa8 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084c:	2320      	movs	r3, #32
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_GPIO_Init+0x120>)
 8000864:	f000 fa9a 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000868:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_GPIO_Init+0x124>)
 8000882:	f000 fa8b 	bl	8000d9c <HAL_GPIO_Init>

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000
 8000898:	40020800 	.word	0x40020800

0800089c <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler (void *parameters)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Led green");
 80008a4:	4806      	ldr	r0, [pc, #24]	; (80008c0 <led_green_handler+0x24>)
 80008a6:	f005 f91b 	bl	8005ae0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 80008aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <led_green_handler+0x28>)
 80008b0:	f000 fc21 	bl	80010f6 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b8:	f000 f96a 	bl	8000b90 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Led green");
 80008bc:	e7f2      	b.n	80008a4 <led_green_handler+0x8>
 80008be:	bf00      	nop
 80008c0:	08005cf8 	.word	0x08005cf8
 80008c4:	40020800 	.word	0x40020800

080008c8 <led_red_handler>:
	}
}
static void led_red_handler (void *parameters)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Led red");
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <led_red_handler+0x24>)
 80008d2:	f005 f905 	bl	8005ae0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 80008d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <led_red_handler+0x28>)
 80008dc:	f000 fc0b 	bl	80010f6 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 80008e0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008e4:	f000 f954 	bl	8000b90 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Led red");
 80008e8:	e7f2      	b.n	80008d0 <led_red_handler+0x8>
 80008ea:	bf00      	nop
 80008ec:	08005d04 	.word	0x08005d04
 80008f0:	40020800 	.word	0x40020800

080008f4 <led_orange_handler>:
	}
}
static void led_orange_handler (void *parameters)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Led orange");
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <led_orange_handler+0x24>)
 80008fe:	f005 f8ef 	bl	8005ae0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <led_orange_handler+0x28>)
 8000908:	f000 fbf5 	bl	80010f6 <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 800090c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000910:	f000 f93e 	bl	8000b90 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Led orange");
 8000914:	e7f2      	b.n	80008fc <led_orange_handler+0x8>
 8000916:	bf00      	nop
 8000918:	08005d0c 	.word	0x08005d0c
 800091c:	40020800 	.word	0x40020800

08000920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d101      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000932:	f000 f90d 	bl	8000b50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40001000 	.word	0x40001000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_MspInit+0x4c>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_MspInit+0x4c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  vInitPrioGroupValue();
 800098e:	f002 fad3 	bl	8002f38 <vInitPrioGroupValue>
  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	2036      	movs	r0, #54	; 0x36
 80009b6:	f000 f9c7 	bl	8000d48 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009ba:	2036      	movs	r0, #54	; 0x36
 80009bc:	f000 f9e0 	bl	8000d80 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <HAL_InitTick+0xa4>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	4a1e      	ldr	r2, [pc, #120]	; (8000a44 <HAL_InitTick+0xa4>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6413      	str	r3, [r2, #64]	; 0x40
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <HAL_InitTick+0xa4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	f003 0310 	and.w	r3, r3, #16
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009dc:	f107 0210 	add.w	r2, r7, #16
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fcf6 	bl	80013d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009ec:	f000 fce0 	bl	80013b0 <HAL_RCC_GetPCLK1Freq>
 80009f0:	4603      	mov	r3, r0
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f8:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <HAL_InitTick+0xa8>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	0c9b      	lsrs	r3, r3, #18
 8000a00:	3b01      	subs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_InitTick+0xac>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <HAL_InitTick+0xb0>)
 8000a08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <HAL_InitTick+0xac>)
 8000a0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_InitTick+0xac>)
 8000a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_InitTick+0xac>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_InitTick+0xac>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <HAL_InitTick+0xac>)
 8000a26:	f001 f9d7 	bl	8001dd8 <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d104      	bne.n	8000a3a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <HAL_InitTick+0xac>)
 8000a32:	f001 fa2b 	bl	8001e8c <HAL_TIM_Base_Start_IT>
 8000a36:	4603      	mov	r3, r0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3730      	adds	r7, #48	; 0x30
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	431bde83 	.word	0x431bde83
 8000a4c:	20000038 	.word	0x20000038
 8000a50:	40001000 	.word	0x40001000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <TIM6_DAC_IRQHandler+0x10>)
 8000a86:	f001 fa71 	bl	8001f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000038 	.word	0x20000038

08000a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000abe:	490e      	ldr	r1, [pc, #56]	; (8000af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac0:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad4:	4c0b      	ldr	r4, [pc, #44]	; (8000b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ae2:	f7ff ffd7 	bl	8000a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f005 f899 	bl	8005c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fd5d 	bl	80005a8 <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000afc:	08005e34 	.word	0x08005e34
  ldr r2, =_sbss
 8000b00:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b04:	20014430 	.word	0x20014430

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_Init+0x40>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_Init+0x40>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x40>)
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f8fc 	bl	8000d32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ff30 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff ff06 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023c00 	.word	0x40023c00

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000080 	.word	0x20000080

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000080 	.word	0x20000080

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff ffee 	bl	8000b78 <HAL_GetTick>
 8000b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba8:	d005      	beq.n	8000bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_Delay+0x44>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb6:	bf00      	nop
 8000bb8:	f7ff ffde 	bl	8000b78 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d8f7      	bhi.n	8000bb8 <HAL_Delay+0x28>
  {
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4907      	ldr	r1, [pc, #28]	; (8000c74 <__NVIC_EnableIRQ+0x38>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	; 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ff4c 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5a:	f7ff ff61 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000d5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	6978      	ldr	r0, [r7, #20]
 8000d66:	f7ff ffb1 	bl	8000ccc <NVIC_EncodePriority>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff80 	bl	8000c78 <__NVIC_SetPriority>
}
 8000d78:	bf00      	nop
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff54 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	e165      	b.n	8001084 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f040 8154 	bne.w	800107e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d005      	beq.n	8000dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d130      	bne.n	8000e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	091b      	lsrs	r3, r3, #4
 8000e3a:	f003 0201 	and.w	r2, r3, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d017      	beq.n	8000e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d123      	bne.n	8000ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	220f      	movs	r2, #15
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	69b9      	ldr	r1, [r7, #24]
 8000edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0203 	and.w	r2, r3, #3
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 80ae 	beq.w	800107e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b5d      	ldr	r3, [pc, #372]	; (800109c <HAL_GPIO_Init+0x300>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a5c      	ldr	r2, [pc, #368]	; (800109c <HAL_GPIO_Init+0x300>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b5a      	ldr	r3, [pc, #360]	; (800109c <HAL_GPIO_Init+0x300>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3e:	4a58      	ldr	r2, [pc, #352]	; (80010a0 <HAL_GPIO_Init+0x304>)
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	220f      	movs	r2, #15
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4f      	ldr	r2, [pc, #316]	; (80010a4 <HAL_GPIO_Init+0x308>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d025      	beq.n	8000fb6 <HAL_GPIO_Init+0x21a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <HAL_GPIO_Init+0x30c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <HAL_GPIO_Init+0x216>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4d      	ldr	r2, [pc, #308]	; (80010ac <HAL_GPIO_Init+0x310>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x212>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <HAL_GPIO_Init+0x314>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x20e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4b      	ldr	r2, [pc, #300]	; (80010b4 <HAL_GPIO_Init+0x318>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x20a>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4a      	ldr	r2, [pc, #296]	; (80010b8 <HAL_GPIO_Init+0x31c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x206>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a49      	ldr	r2, [pc, #292]	; (80010bc <HAL_GPIO_Init+0x320>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x202>
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	e00c      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	e00a      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc8:	4935      	ldr	r1, [pc, #212]	; (80010a0 <HAL_GPIO_Init+0x304>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffa:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_GPIO_Init+0x324>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104e:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001078:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <HAL_GPIO_Init+0x324>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	f67f ae96 	bls.w	8000db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40021400 	.word	0x40021400
 80010bc:	40021800 	.word	0x40021800
 80010c0:	40013c00 	.word	0x40013c00

080010c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e0:	e003      	b.n	80010ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	041a      	lsls	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	619a      	str	r2, [r3, #24]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b085      	sub	sp, #20
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001108:	887a      	ldrh	r2, [r7, #2]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	041a      	lsls	r2, r3, #16
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43d9      	mvns	r1, r3
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	400b      	ands	r3, r1
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	619a      	str	r2, [r3, #24]
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_PWREx_EnableOverDrive+0x90>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <HAL_PWREx_EnableOverDrive+0x90>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_PWREx_EnableOverDrive+0x90>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001154:	2201      	movs	r2, #1
 8001156:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001158:	f7ff fd0e 	bl	8000b78 <HAL_GetTick>
 800115c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800115e:	e009      	b.n	8001174 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001160:	f7ff fd0a 	bl	8000b78 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800116e:	d901      	bls.n	8001174 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e01f      	b.n	80011b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001180:	d1ee      	bne.n	8001160 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001188:	f7ff fcf6 	bl	8000b78 <HAL_GetTick>
 800118c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800118e:	e009      	b.n	80011a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001190:	f7ff fcf2 	bl	8000b78 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800119e:	d901      	bls.n	80011a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e007      	b.n	80011b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011b0:	d1ee      	bne.n	8001190 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	420e0040 	.word	0x420e0040
 80011c4:	40007000 	.word	0x40007000
 80011c8:	420e0044 	.word	0x420e0044

080011cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e0cc      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011e0:	4b68      	ldr	r3, [pc, #416]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d90c      	bls.n	8001208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4b65      	ldr	r3, [pc, #404]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b63      	ldr	r3, [pc, #396]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0b8      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001220:	4b59      	ldr	r3, [pc, #356]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	4a58      	ldr	r2, [pc, #352]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800122a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001238:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001244:	4b50      	ldr	r3, [pc, #320]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	494d      	ldr	r1, [pc, #308]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	4313      	orrs	r3, r2
 8001254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d044      	beq.n	80012ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b47      	ldr	r3, [pc, #284]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d119      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e07f      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d003      	beq.n	800128a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001286:	2b03      	cmp	r3, #3
 8001288:	d107      	bne.n	800129a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128a:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e06f      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129a:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e067      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f023 0203 	bic.w	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4934      	ldr	r1, [pc, #208]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012bc:	f7ff fc5c 	bl	8000b78 <HAL_GetTick>
 80012c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c2:	e00a      	b.n	80012da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c4:	f7ff fc58 	bl	8000b78 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e04f      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 020c 	and.w	r2, r3, #12
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d1eb      	bne.n	80012c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012ec:	4b25      	ldr	r3, [pc, #148]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d20c      	bcs.n	8001314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d001      	beq.n	8001314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e032      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4916      	ldr	r1, [pc, #88]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800132e:	4313      	orrs	r3, r2
 8001330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	490e      	ldr	r1, [pc, #56]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	4313      	orrs	r3, r2
 8001350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001352:	f000 f873 	bl	800143c <HAL_RCC_GetSysClockFreq>
 8001356:	4602      	mov	r2, r0
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	490a      	ldr	r1, [pc, #40]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	5ccb      	ldrb	r3, [r1, r3]
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_RCC_ClockConfig+0x1c8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fb14 	bl	80009a0 <HAL_InitTick>

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023c00 	.word	0x40023c00
 8001388:	40023800 	.word	0x40023800
 800138c:	08005de4 	.word	0x08005de4
 8001390:	20000000 	.word	0x20000000
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_RCC_GetHCLKFreq+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000

080013b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013b4:	f7ff fff0 	bl	8001398 <HAL_RCC_GetHCLKFreq>
 80013b8:	4602      	mov	r2, r0
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	0a9b      	lsrs	r3, r3, #10
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	4903      	ldr	r1, [pc, #12]	; (80013d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013c6:	5ccb      	ldrb	r3, [r1, r3]
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	08005df4 	.word	0x08005df4

080013d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	220f      	movs	r2, #15
 80013e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_RCC_GetClockConfig+0x5c>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_RCC_GetClockConfig+0x5c>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_RCC_GetClockConfig+0x5c>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_RCC_GetClockConfig+0x5c>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_RCC_GetClockConfig+0x60>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 020f 	and.w	r2, r3, #15
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	601a      	str	r2, [r3, #0]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40023c00 	.word	0x40023c00

0800143c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800143c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001440:	b0ae      	sub	sp, #184	; 0xb8
 8001442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001462:	4bcb      	ldr	r3, [pc, #812]	; (8001790 <HAL_RCC_GetSysClockFreq+0x354>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b0c      	cmp	r3, #12
 800146c:	f200 8206 	bhi.w	800187c <HAL_RCC_GetSysClockFreq+0x440>
 8001470:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	080014ad 	.word	0x080014ad
 800147c:	0800187d 	.word	0x0800187d
 8001480:	0800187d 	.word	0x0800187d
 8001484:	0800187d 	.word	0x0800187d
 8001488:	080014b5 	.word	0x080014b5
 800148c:	0800187d 	.word	0x0800187d
 8001490:	0800187d 	.word	0x0800187d
 8001494:	0800187d 	.word	0x0800187d
 8001498:	080014bd 	.word	0x080014bd
 800149c:	0800187d 	.word	0x0800187d
 80014a0:	0800187d 	.word	0x0800187d
 80014a4:	0800187d 	.word	0x0800187d
 80014a8:	080016ad 	.word	0x080016ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014ac:	4bb9      	ldr	r3, [pc, #740]	; (8001794 <HAL_RCC_GetSysClockFreq+0x358>)
 80014ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80014b2:	e1e7      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014b4:	4bb8      	ldr	r3, [pc, #736]	; (8001798 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014ba:	e1e3      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014bc:	4bb4      	ldr	r3, [pc, #720]	; (8001790 <HAL_RCC_GetSysClockFreq+0x354>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c8:	4bb1      	ldr	r3, [pc, #708]	; (8001790 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d071      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d4:	4bae      	ldr	r3, [pc, #696]	; (8001790 <HAL_RCC_GetSysClockFreq+0x354>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	099b      	lsrs	r3, r3, #6
 80014da:	2200      	movs	r2, #0
 80014dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014fa:	4622      	mov	r2, r4
 80014fc:	462b      	mov	r3, r5
 80014fe:	f04f 0000 	mov.w	r0, #0
 8001502:	f04f 0100 	mov.w	r1, #0
 8001506:	0159      	lsls	r1, r3, #5
 8001508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800150c:	0150      	lsls	r0, r2, #5
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4621      	mov	r1, r4
 8001514:	1a51      	subs	r1, r2, r1
 8001516:	6439      	str	r1, [r7, #64]	; 0x40
 8001518:	4629      	mov	r1, r5
 800151a:	eb63 0301 	sbc.w	r3, r3, r1
 800151e:	647b      	str	r3, [r7, #68]	; 0x44
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800152c:	4649      	mov	r1, r9
 800152e:	018b      	lsls	r3, r1, #6
 8001530:	4641      	mov	r1, r8
 8001532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001536:	4641      	mov	r1, r8
 8001538:	018a      	lsls	r2, r1, #6
 800153a:	4641      	mov	r1, r8
 800153c:	1a51      	subs	r1, r2, r1
 800153e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001540:	4649      	mov	r1, r9
 8001542:	eb63 0301 	sbc.w	r3, r3, r1
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001554:	4649      	mov	r1, r9
 8001556:	00cb      	lsls	r3, r1, #3
 8001558:	4641      	mov	r1, r8
 800155a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800155e:	4641      	mov	r1, r8
 8001560:	00ca      	lsls	r2, r1, #3
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	4603      	mov	r3, r0
 8001568:	4622      	mov	r2, r4
 800156a:	189b      	adds	r3, r3, r2
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
 800156e:	462b      	mov	r3, r5
 8001570:	460a      	mov	r2, r1
 8001572:	eb42 0303 	adc.w	r3, r2, r3
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001584:	4629      	mov	r1, r5
 8001586:	024b      	lsls	r3, r1, #9
 8001588:	4621      	mov	r1, r4
 800158a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800158e:	4621      	mov	r1, r4
 8001590:	024a      	lsls	r2, r1, #9
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800159a:	2200      	movs	r2, #0
 800159c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015a8:	f7fe fe7c 	bl	80002a4 <__aeabi_uldivmod>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4613      	mov	r3, r2
 80015b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015b6:	e067      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b8:	4b75      	ldr	r3, [pc, #468]	; (8001790 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	2200      	movs	r2, #0
 80015c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015c4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80015d2:	2300      	movs	r3, #0
 80015d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015da:	4622      	mov	r2, r4
 80015dc:	462b      	mov	r3, r5
 80015de:	f04f 0000 	mov.w	r0, #0
 80015e2:	f04f 0100 	mov.w	r1, #0
 80015e6:	0159      	lsls	r1, r3, #5
 80015e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015ec:	0150      	lsls	r0, r2, #5
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4621      	mov	r1, r4
 80015f4:	1a51      	subs	r1, r2, r1
 80015f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80015f8:	4629      	mov	r1, r5
 80015fa:	eb63 0301 	sbc.w	r3, r3, r1
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800160c:	4649      	mov	r1, r9
 800160e:	018b      	lsls	r3, r1, #6
 8001610:	4641      	mov	r1, r8
 8001612:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001616:	4641      	mov	r1, r8
 8001618:	018a      	lsls	r2, r1, #6
 800161a:	4641      	mov	r1, r8
 800161c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001620:	4649      	mov	r1, r9
 8001622:	eb63 0b01 	sbc.w	fp, r3, r1
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001632:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001636:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800163a:	4692      	mov	sl, r2
 800163c:	469b      	mov	fp, r3
 800163e:	4623      	mov	r3, r4
 8001640:	eb1a 0303 	adds.w	r3, sl, r3
 8001644:	623b      	str	r3, [r7, #32]
 8001646:	462b      	mov	r3, r5
 8001648:	eb4b 0303 	adc.w	r3, fp, r3
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800165a:	4629      	mov	r1, r5
 800165c:	028b      	lsls	r3, r1, #10
 800165e:	4621      	mov	r1, r4
 8001660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001664:	4621      	mov	r1, r4
 8001666:	028a      	lsls	r2, r1, #10
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001670:	2200      	movs	r2, #0
 8001672:	673b      	str	r3, [r7, #112]	; 0x70
 8001674:	677a      	str	r2, [r7, #116]	; 0x74
 8001676:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800167a:	f7fe fe13 	bl	80002a4 <__aeabi_uldivmod>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4613      	mov	r3, r2
 8001684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001688:	4b41      	ldr	r3, [pc, #260]	; (8001790 <HAL_RCC_GetSysClockFreq+0x354>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	0c1b      	lsrs	r3, r3, #16
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	3301      	adds	r3, #1
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800169a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800169e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016aa:	e0eb      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ac:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016b8:	4b35      	ldr	r3, [pc, #212]	; (8001790 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d06b      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c4:	4b32      	ldr	r3, [pc, #200]	; (8001790 <HAL_RCC_GetSysClockFreq+0x354>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	099b      	lsrs	r3, r3, #6
 80016ca:	2200      	movs	r2, #0
 80016cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80016ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016d6:	663b      	str	r3, [r7, #96]	; 0x60
 80016d8:	2300      	movs	r3, #0
 80016da:	667b      	str	r3, [r7, #100]	; 0x64
 80016dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016e0:	4622      	mov	r2, r4
 80016e2:	462b      	mov	r3, r5
 80016e4:	f04f 0000 	mov.w	r0, #0
 80016e8:	f04f 0100 	mov.w	r1, #0
 80016ec:	0159      	lsls	r1, r3, #5
 80016ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016f2:	0150      	lsls	r0, r2, #5
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4621      	mov	r1, r4
 80016fa:	1a51      	subs	r1, r2, r1
 80016fc:	61b9      	str	r1, [r7, #24]
 80016fe:	4629      	mov	r1, r5
 8001700:	eb63 0301 	sbc.w	r3, r3, r1
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001712:	4659      	mov	r1, fp
 8001714:	018b      	lsls	r3, r1, #6
 8001716:	4651      	mov	r1, sl
 8001718:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800171c:	4651      	mov	r1, sl
 800171e:	018a      	lsls	r2, r1, #6
 8001720:	4651      	mov	r1, sl
 8001722:	ebb2 0801 	subs.w	r8, r2, r1
 8001726:	4659      	mov	r1, fp
 8001728:	eb63 0901 	sbc.w	r9, r3, r1
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001738:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800173c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001740:	4690      	mov	r8, r2
 8001742:	4699      	mov	r9, r3
 8001744:	4623      	mov	r3, r4
 8001746:	eb18 0303 	adds.w	r3, r8, r3
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	462b      	mov	r3, r5
 800174e:	eb49 0303 	adc.w	r3, r9, r3
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001760:	4629      	mov	r1, r5
 8001762:	024b      	lsls	r3, r1, #9
 8001764:	4621      	mov	r1, r4
 8001766:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800176a:	4621      	mov	r1, r4
 800176c:	024a      	lsls	r2, r1, #9
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001776:	2200      	movs	r2, #0
 8001778:	65bb      	str	r3, [r7, #88]	; 0x58
 800177a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800177c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001780:	f7fe fd90 	bl	80002a4 <__aeabi_uldivmod>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4613      	mov	r3, r2
 800178a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800178e:	e065      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x420>
 8001790:	40023800 	.word	0x40023800
 8001794:	00f42400 	.word	0x00f42400
 8001798:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800179c:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_RCC_GetSysClockFreq+0x458>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	099b      	lsrs	r3, r3, #6
 80017a2:	2200      	movs	r2, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	4611      	mov	r1, r2
 80017a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017ac:	653b      	str	r3, [r7, #80]	; 0x50
 80017ae:	2300      	movs	r3, #0
 80017b0:	657b      	str	r3, [r7, #84]	; 0x54
 80017b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017b6:	4642      	mov	r2, r8
 80017b8:	464b      	mov	r3, r9
 80017ba:	f04f 0000 	mov.w	r0, #0
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	0159      	lsls	r1, r3, #5
 80017c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c8:	0150      	lsls	r0, r2, #5
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4641      	mov	r1, r8
 80017d0:	1a51      	subs	r1, r2, r1
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	4649      	mov	r1, r9
 80017d6:	eb63 0301 	sbc.w	r3, r3, r1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017e8:	4659      	mov	r1, fp
 80017ea:	018b      	lsls	r3, r1, #6
 80017ec:	4651      	mov	r1, sl
 80017ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017f2:	4651      	mov	r1, sl
 80017f4:	018a      	lsls	r2, r1, #6
 80017f6:	4651      	mov	r1, sl
 80017f8:	1a54      	subs	r4, r2, r1
 80017fa:	4659      	mov	r1, fp
 80017fc:	eb63 0501 	sbc.w	r5, r3, r1
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	00eb      	lsls	r3, r5, #3
 800180a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800180e:	00e2      	lsls	r2, r4, #3
 8001810:	4614      	mov	r4, r2
 8001812:	461d      	mov	r5, r3
 8001814:	4643      	mov	r3, r8
 8001816:	18e3      	adds	r3, r4, r3
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	464b      	mov	r3, r9
 800181c:	eb45 0303 	adc.w	r3, r5, r3
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800182e:	4629      	mov	r1, r5
 8001830:	028b      	lsls	r3, r1, #10
 8001832:	4621      	mov	r1, r4
 8001834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001838:	4621      	mov	r1, r4
 800183a:	028a      	lsls	r2, r1, #10
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001844:	2200      	movs	r2, #0
 8001846:	64bb      	str	r3, [r7, #72]	; 0x48
 8001848:	64fa      	str	r2, [r7, #76]	; 0x4c
 800184a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800184e:	f7fe fd29 	bl	80002a4 <__aeabi_uldivmod>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4613      	mov	r3, r2
 8001858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <HAL_RCC_GetSysClockFreq+0x458>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	0f1b      	lsrs	r3, r3, #28
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800186a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800186e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800187a:	e003      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_RCC_GetSysClockFreq+0x45c>)
 800187e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001882:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001884:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001888:	4618      	mov	r0, r3
 800188a:	37b8      	adds	r7, #184	; 0xb8
 800188c:	46bd      	mov	sp, r7
 800188e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	00f42400 	.word	0x00f42400

0800189c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e28d      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8083 	beq.w	80019c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018bc:	4b94      	ldr	r3, [pc, #592]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d019      	beq.n	80018fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018c8:	4b91      	ldr	r3, [pc, #580]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018d4:	4b8e      	ldr	r3, [pc, #568]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e0:	d00c      	beq.n	80018fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e2:	4b8b      	ldr	r3, [pc, #556]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d112      	bne.n	8001914 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ee:	4b88      	ldr	r3, [pc, #544]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fa:	d10b      	bne.n	8001914 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	4b84      	ldr	r3, [pc, #528]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d05b      	beq.n	80019c0 <HAL_RCC_OscConfig+0x124>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d157      	bne.n	80019c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e25a      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	d106      	bne.n	800192c <HAL_RCC_OscConfig+0x90>
 800191e:	4b7c      	ldr	r3, [pc, #496]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a7b      	ldr	r2, [pc, #492]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0xcc>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0xb4>
 8001936:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a75      	ldr	r2, [pc, #468]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a72      	ldr	r2, [pc, #456]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0xcc>
 8001950:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a6e      	ldr	r2, [pc, #440]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b6c      	ldr	r3, [pc, #432]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff f902 	bl	8000b78 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff f8fe 	bl	8000b78 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e21f      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0xdc>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff f8ee 	bl	8000b78 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff f8ea 	bl	8000b78 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e20b      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x104>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d06f      	beq.n	8001aae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019ce:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d017      	beq.n	8001a0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019da:	4b4d      	ldr	r3, [pc, #308]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d105      	bne.n	80019f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019e6:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f2:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019fa:	2b0c      	cmp	r3, #12
 80019fc:	d11c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fe:	4b44      	ldr	r3, [pc, #272]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d116      	bne.n	8001a38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0a:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <HAL_RCC_OscConfig+0x186>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d001      	beq.n	8001a22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e1d3      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4937      	ldr	r1, [pc, #220]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	e03a      	b.n	8001aae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a40:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_RCC_OscConfig+0x278>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff f897 	bl	8000b78 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4e:	f7ff f893 	bl	8000b78 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e1b4      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4925      	ldr	r1, [pc, #148]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
 8001a80:	e015      	b.n	8001aae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_RCC_OscConfig+0x278>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff f876 	bl	8000b78 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a90:	f7ff f872 	bl	8000b78 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e193      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d036      	beq.n	8001b28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d016      	beq.n	8001af0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff f856 	bl	8000b78 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff f852 	bl	8000b78 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e173      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x234>
 8001aee:	e01b      	b.n	8001b28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af6:	f7ff f83f 	bl	8000b78 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	e00e      	b.n	8001b1c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afe:	f7ff f83b 	bl	8000b78 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d907      	bls.n	8001b1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e15c      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
 8001b10:	40023800 	.word	0x40023800
 8001b14:	42470000 	.word	0x42470000
 8001b18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1c:	4b8a      	ldr	r3, [pc, #552]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1ea      	bne.n	8001afe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8097 	beq.w	8001c64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3a:	4b83      	ldr	r3, [pc, #524]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10f      	bne.n	8001b66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	4b7f      	ldr	r3, [pc, #508]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4a7e      	ldr	r2, [pc, #504]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
 8001b56:	4b7c      	ldr	r3, [pc, #496]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b62:	2301      	movs	r3, #1
 8001b64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b66:	4b79      	ldr	r3, [pc, #484]	; (8001d4c <HAL_RCC_OscConfig+0x4b0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d118      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b72:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <HAL_RCC_OscConfig+0x4b0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a75      	ldr	r2, [pc, #468]	; (8001d4c <HAL_RCC_OscConfig+0x4b0>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7e:	f7fe fffb 	bl	8000b78 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b86:	f7fe fff7 	bl	8000b78 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e118      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	4b6c      	ldr	r3, [pc, #432]	; (8001d4c <HAL_RCC_OscConfig+0x4b0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x31e>
 8001bac:	4b66      	ldr	r3, [pc, #408]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	4a65      	ldr	r2, [pc, #404]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb8:	e01c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x358>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x340>
 8001bc2:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	4a60      	ldr	r2, [pc, #384]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bce:	4b5e      	ldr	r3, [pc, #376]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	4a5d      	ldr	r2, [pc, #372]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0x358>
 8001bdc:	4b5a      	ldr	r3, [pc, #360]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	4a59      	ldr	r2, [pc, #356]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	6713      	str	r3, [r2, #112]	; 0x70
 8001be8:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bec:	4a56      	ldr	r2, [pc, #344]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	f023 0304 	bic.w	r3, r3, #4
 8001bf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d015      	beq.n	8001c28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7fe ffbc 	bl	8000b78 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c04:	f7fe ffb8 	bl	8000b78 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e0d7      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1a:	4b4b      	ldr	r3, [pc, #300]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0ee      	beq.n	8001c04 <HAL_RCC_OscConfig+0x368>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7fe ffa6 	bl	8000b78 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c30:	f7fe ffa2 	bl	8000b78 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0c1      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c46:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1ee      	bne.n	8001c30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d105      	bne.n	8001c64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c58:	4b3b      	ldr	r3, [pc, #236]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	4a3a      	ldr	r2, [pc, #232]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80ad 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d060      	beq.n	8001d3c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d145      	bne.n	8001d0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b33      	ldr	r3, [pc, #204]	; (8001d50 <HAL_RCC_OscConfig+0x4b4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7fe ff76 	bl	8000b78 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c90:	f7fe ff72 	bl	8000b78 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e093      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	019b      	lsls	r3, r3, #6
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	041b      	lsls	r3, r3, #16
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	071b      	lsls	r3, r3, #28
 8001cda:	491b      	ldr	r1, [pc, #108]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_RCC_OscConfig+0x4b4>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7fe ff47 	bl	8000b78 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cee:	f7fe ff43 	bl	8000b78 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e064      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x452>
 8001d0c:	e05c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_RCC_OscConfig+0x4b4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7fe ff30 	bl	8000b78 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7fe ff2c 	bl	8000b78 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e04d      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_RCC_OscConfig+0x4ac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x480>
 8001d3a:	e045      	b.n	8001dc8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e040      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d54:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <HAL_RCC_OscConfig+0x538>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d030      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d129      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d122      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d84:	4013      	ands	r3, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d119      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d10f      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d107      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800

08001dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e041      	b.n	8001e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f839 	bl	8001e76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3304      	adds	r3, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f000 f9d8 	bl	80021cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d001      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e04e      	b.n	8001f42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a23      	ldr	r2, [pc, #140]	; (8001f50 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d022      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x80>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ece:	d01d      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x80>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d018      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x80>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d013      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x80>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_TIM_Base_Start_IT+0xd0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00e      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x80>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x80>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <HAL_TIM_Base_Start_IT+0xd8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d004      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x80>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d111      	bne.n	8001f30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d010      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2e:	e007      	b.n	8001f40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40000400 	.word	0x40000400
 8001f58:	40000800 	.word	0x40000800
 8001f5c:	40000c00 	.word	0x40000c00
 8001f60:	40010400 	.word	0x40010400
 8001f64:	40014000 	.word	0x40014000
 8001f68:	40001800 	.word	0x40001800

08001f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0202 	mvn.w	r2, #2
 8001f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8ee 	bl	8002190 <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8e0 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8f1 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0204 	mvn.w	r2, #4
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8c4 	bl	8002190 <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8b6 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8c7 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b08      	cmp	r3, #8
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b08      	cmp	r3, #8
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0208 	mvn.w	r2, #8
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2204      	movs	r2, #4
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f89a 	bl	8002190 <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f88c 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f89d 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b10      	cmp	r3, #16
 800207c:	d122      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b10      	cmp	r3, #16
 800208a:	d11b      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0210 	mvn.w	r2, #16
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2208      	movs	r2, #8
 800209a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f870 	bl	8002190 <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f862 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f873 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0201 	mvn.w	r2, #1
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fc18 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fa:	2b80      	cmp	r3, #128	; 0x80
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002108:	2b80      	cmp	r3, #128	; 0x80
 800210a:	d107      	bne.n	800211c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f902 	bl	8002320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d10e      	bne.n	8002148 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d107      	bne.n	8002148 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f838 	bl	80021b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b20      	cmp	r3, #32
 8002154:	d10e      	bne.n	8002174 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b20      	cmp	r3, #32
 8002162:	d107      	bne.n	8002174 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0220 	mvn.w	r2, #32
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8cc 	bl	800230c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a40      	ldr	r2, [pc, #256]	; (80022e0 <TIM_Base_SetConfig+0x114>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d013      	beq.n	800220c <TIM_Base_SetConfig+0x40>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ea:	d00f      	beq.n	800220c <TIM_Base_SetConfig+0x40>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a3d      	ldr	r2, [pc, #244]	; (80022e4 <TIM_Base_SetConfig+0x118>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00b      	beq.n	800220c <TIM_Base_SetConfig+0x40>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a3c      	ldr	r2, [pc, #240]	; (80022e8 <TIM_Base_SetConfig+0x11c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d007      	beq.n	800220c <TIM_Base_SetConfig+0x40>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a3b      	ldr	r2, [pc, #236]	; (80022ec <TIM_Base_SetConfig+0x120>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d003      	beq.n	800220c <TIM_Base_SetConfig+0x40>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3a      	ldr	r2, [pc, #232]	; (80022f0 <TIM_Base_SetConfig+0x124>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d108      	bne.n	800221e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2f      	ldr	r2, [pc, #188]	; (80022e0 <TIM_Base_SetConfig+0x114>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d02b      	beq.n	800227e <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222c:	d027      	beq.n	800227e <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a2c      	ldr	r2, [pc, #176]	; (80022e4 <TIM_Base_SetConfig+0x118>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d023      	beq.n	800227e <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a2b      	ldr	r2, [pc, #172]	; (80022e8 <TIM_Base_SetConfig+0x11c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01f      	beq.n	800227e <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a2a      	ldr	r2, [pc, #168]	; (80022ec <TIM_Base_SetConfig+0x120>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d01b      	beq.n	800227e <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <TIM_Base_SetConfig+0x124>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d017      	beq.n	800227e <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <TIM_Base_SetConfig+0x128>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <TIM_Base_SetConfig+0x12c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00f      	beq.n	800227e <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a26      	ldr	r2, [pc, #152]	; (80022fc <TIM_Base_SetConfig+0x130>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00b      	beq.n	800227e <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a25      	ldr	r2, [pc, #148]	; (8002300 <TIM_Base_SetConfig+0x134>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a24      	ldr	r2, [pc, #144]	; (8002304 <TIM_Base_SetConfig+0x138>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d003      	beq.n	800227e <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a23      	ldr	r2, [pc, #140]	; (8002308 <TIM_Base_SetConfig+0x13c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d108      	bne.n	8002290 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <TIM_Base_SetConfig+0x114>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d003      	beq.n	80022c4 <TIM_Base_SetConfig+0xf8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <TIM_Base_SetConfig+0x124>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d103      	bne.n	80022cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	615a      	str	r2, [r3, #20]
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40010000 	.word	0x40010000
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40000800 	.word	0x40000800
 80022ec:	40000c00 	.word	0x40000c00
 80022f0:	40010400 	.word	0x40010400
 80022f4:	40014000 	.word	0x40014000
 80022f8:	40014400 	.word	0x40014400
 80022fc:	40014800 	.word	0x40014800
 8002300:	40001800 	.word	0x40001800
 8002304:	40001c00 	.word	0x40001c00
 8002308:	40002000 	.word	0x40002000

0800230c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f103 0208 	add.w	r2, r3, #8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f04f 32ff 	mov.w	r2, #4294967295
 800234c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f103 0208 	add.w	r2, r3, #8
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f103 0208 	add.w	r2, r3, #8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6892      	ldr	r2, [r2, #8]
 80023ec:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6852      	ldr	r2, [r2, #4]
 80023f6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d103      	bne.n	800240a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	1e5a      	subs	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800242a:	b580      	push	{r7, lr}
 800242c:	b08c      	sub	sp, #48	; 0x30
 800242e:	af04      	add	r7, sp, #16
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f000 ff25 	bl	800328c <pvPortMalloc>
 8002442:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00e      	beq.n	8002468 <xTaskCreate+0x3e>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800244a:	2058      	movs	r0, #88	; 0x58
 800244c:	f000 ff1e 	bl	800328c <pvPortMalloc>
 8002450:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <xTaskCreate+0x36>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	631a      	str	r2, [r3, #48]	; 0x30
 800245e:	e005      	b.n	800246c <xTaskCreate+0x42>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002460:	6978      	ldr	r0, [r7, #20]
 8002462:	f000 fff3 	bl	800344c <vPortFree>
 8002466:	e001      	b.n	800246c <xTaskCreate+0x42>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d013      	beq.n	800249a <xTaskCreate+0x70>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002472:	2300      	movs	r3, #0
 8002474:	9303      	str	r3, [sp, #12]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	9302      	str	r3, [sp, #8]
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f80e 	bl	80024aa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800248e:	69f8      	ldr	r0, [r7, #28]
 8002490:	f000 f8a2 	bl	80025d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002494:	2301      	movs	r3, #1
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	e002      	b.n	80024a0 <xTaskCreate+0x76>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80024a0:	69bb      	ldr	r3, [r7, #24]
    }
 80024a2:	4618      	mov	r0, r3
 80024a4:	3720      	adds	r7, #32
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b088      	sub	sp, #32
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	461a      	mov	r2, r3
 80024c2:	21a5      	movs	r1, #165	; 0xa5
 80024c4:	f003 fbec 	bl	8005ca0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024d2:	3b01      	subs	r3, #1
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f023 0307 	bic.w	r3, r3, #7
 80024e0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <prvInitialiseNewTask+0x58>
        __asm volatile
 80024ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f0:	f383 8811 	msr	BASEPRI, r3
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	617b      	str	r3, [r7, #20]
    }
 80024fe:	bf00      	nop
 8002500:	e7fe      	b.n	8002500 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01f      	beq.n	8002548 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	e012      	b.n	8002534 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	7819      	ldrb	r1, [r3, #0]
 8002516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	3334      	adds	r3, #52	; 0x34
 800251e:	460a      	mov	r2, r1
 8002520:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b09      	cmp	r3, #9
 8002538:	d9e9      	bls.n	800250e <prvInitialiseNewTask+0x64>
 800253a:	e000      	b.n	800253e <prvInitialiseNewTask+0x94>
            {
                break;
 800253c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002546:	e003      	b.n	8002550 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	2b04      	cmp	r3, #4
 8002554:	d901      	bls.n	800255a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002556:	2304      	movs	r3, #4
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002564:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	2200      	movs	r2, #0
 800256a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	3304      	adds	r3, #4
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff feff 	bl	8002374 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	3318      	adds	r3, #24
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fefa 	bl	8002374 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002584:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	f1c3 0205 	rsb	r2, r3, #5
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	3350      	adds	r3, #80	; 0x50
 800259a:	2204      	movs	r2, #4
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fb7e 	bl	8005ca0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	3354      	adds	r3, #84	; 0x54
 80025a8:	2201      	movs	r2, #1
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fb77 	bl	8005ca0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	69b8      	ldr	r0, [r7, #24]
 80025b8:	f000 fb8e 	bl	8002cd8 <pxPortInitialiseStack>
 80025bc:	4602      	mov	r2, r0
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025ce:	bf00      	nop
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80025d8:	b5b0      	push	{r4, r5, r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af02      	add	r7, sp, #8
 80025de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80025e0:	f000 fd28 	bl	8003034 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80025e4:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <prvAddNewTaskToReadyList+0xfc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3301      	adds	r3, #1
 80025ea:	4a3a      	ldr	r2, [pc, #232]	; (80026d4 <prvAddNewTaskToReadyList+0xfc>)
 80025ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80025ee:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <prvAddNewTaskToReadyList+0x100>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80025f6:	4a38      	ldr	r2, [pc, #224]	; (80026d8 <prvAddNewTaskToReadyList+0x100>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <prvAddNewTaskToReadyList+0xfc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d110      	bne.n	8002626 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002604:	f000 face 	bl	8002ba4 <prvInitialiseTaskLists>
 8002608:	e00d      	b.n	8002626 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <prvAddNewTaskToReadyList+0x104>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002612:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <prvAddNewTaskToReadyList+0x100>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	429a      	cmp	r2, r3
 800261e:	d802      	bhi.n	8002626 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002620:	4a2d      	ldr	r2, [pc, #180]	; (80026d8 <prvAddNewTaskToReadyList+0x100>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002626:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <prvAddNewTaskToReadyList+0x108>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3301      	adds	r3, #1
 800262c:	4a2c      	ldr	r2, [pc, #176]	; (80026e0 <prvAddNewTaskToReadyList+0x108>)
 800262e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <prvAddNewTaskToReadyList+0x108>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <prvAddNewTaskToReadyList+0x94>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4618      	mov	r0, r3
 8002642:	f003 f8ab 	bl	800579c <SEGGER_SYSVIEW_OnTaskCreate>
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	461d      	mov	r5, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461c      	mov	r4, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	1ae3      	subs	r3, r4, r3
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	462b      	mov	r3, r5
 8002668:	f001 f8be 	bl	80037e8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4618      	mov	r0, r3
 8002670:	f003 f918 	bl	80058a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	2201      	movs	r2, #1
 800267a:	409a      	lsls	r2, r3
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <prvAddNewTaskToReadyList+0x10c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4313      	orrs	r3, r2
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <prvAddNewTaskToReadyList+0x10c>)
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <prvAddNewTaskToReadyList+0x110>)
 8002694:	441a      	add	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	4619      	mov	r1, r3
 800269c:	4610      	mov	r0, r2
 800269e:	f7ff fe76 	bl	800238e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80026a2:	f000 fcf7 	bl	8003094 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <prvAddNewTaskToReadyList+0x104>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00e      	beq.n	80026cc <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <prvAddNewTaskToReadyList+0x100>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d207      	bcs.n	80026cc <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <prvAddNewTaskToReadyList+0x114>)
 80026be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bdb0      	pop	{r4, r5, r7, pc}
 80026d4:	2000015c 	.word	0x2000015c
 80026d8:	20000084 	.word	0x20000084
 80026dc:	20000168 	.word	0x20000168
 80026e0:	20000178 	.word	0x20000178
 80026e4:	20000164 	.word	0x20000164
 80026e8:	20000088 	.word	0x20000088
 80026ec:	e000ed04 	.word	0xe000ed04

080026f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80026f6:	4b24      	ldr	r3, [pc, #144]	; (8002788 <vTaskStartScheduler+0x98>)
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	2300      	movs	r3, #0
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2300      	movs	r3, #0
 8002700:	2282      	movs	r2, #130	; 0x82
 8002702:	4922      	ldr	r1, [pc, #136]	; (800278c <vTaskStartScheduler+0x9c>)
 8002704:	4822      	ldr	r0, [pc, #136]	; (8002790 <vTaskStartScheduler+0xa0>)
 8002706:	f7ff fe90 	bl	800242a <xTaskCreate>
 800270a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d124      	bne.n	800275c <vTaskStartScheduler+0x6c>
        __asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	60bb      	str	r3, [r7, #8]
    }
 8002724:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <vTaskStartScheduler+0xa4>)
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <vTaskStartScheduler+0xa8>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <vTaskStartScheduler+0xac>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <vTaskStartScheduler+0xb0>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <vTaskStartScheduler+0x98>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d102      	bne.n	800274c <vTaskStartScheduler+0x5c>
 8002746:	f003 f80d 	bl	8005764 <SEGGER_SYSVIEW_OnIdle>
 800274a:	e004      	b.n	8002756 <vTaskStartScheduler+0x66>
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <vTaskStartScheduler+0xb0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f003 f865 	bl	8005820 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002756:	f000 fb4d 	bl	8002df4 <xPortStartScheduler>
 800275a:	e00e      	b.n	800277a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002762:	d10a      	bne.n	800277a <vTaskStartScheduler+0x8a>
        __asm volatile
 8002764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	607b      	str	r3, [r7, #4]
    }
 8002776:	bf00      	nop
 8002778:	e7fe      	b.n	8002778 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <vTaskStartScheduler+0xb4>)
 800277c:	681b      	ldr	r3, [r3, #0]
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000180 	.word	0x20000180
 800278c:	08005d18 	.word	0x08005d18
 8002790:	08002b75 	.word	0x08002b75
 8002794:	2000017c 	.word	0x2000017c
 8002798:	20000168 	.word	0x20000168
 800279c:	20000160 	.word	0x20000160
 80027a0:	20000084 	.word	0x20000084
 80027a4:	2000000c 	.word	0x2000000c

080027a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <vTaskSuspendAll+0x18>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	4a03      	ldr	r2, [pc, #12]	; (80027c0 <vTaskSuspendAll+0x18>)
 80027b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	20000184 	.word	0x20000184

080027c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80027d2:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <xTaskResumeAll+0x11c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10a      	bne.n	80027f0 <xTaskResumeAll+0x2c>
        __asm volatile
 80027da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027de:	f383 8811 	msr	BASEPRI, r3
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	603b      	str	r3, [r7, #0]
    }
 80027ec:	bf00      	nop
 80027ee:	e7fe      	b.n	80027ee <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80027f0:	f000 fc20 	bl	8003034 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80027f4:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <xTaskResumeAll+0x11c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	4a39      	ldr	r2, [pc, #228]	; (80028e0 <xTaskResumeAll+0x11c>)
 80027fc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027fe:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <xTaskResumeAll+0x11c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d165      	bne.n	80028d2 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002806:	4b37      	ldr	r3, [pc, #220]	; (80028e4 <xTaskResumeAll+0x120>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d061      	beq.n	80028d2 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800280e:	e032      	b.n	8002876 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <xTaskResumeAll+0x124>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3318      	adds	r3, #24
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fdda 	bl	80023d6 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3304      	adds	r3, #4
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fdd5 	bl	80023d6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4618      	mov	r0, r3
 8002830:	f003 f838 	bl	80058a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	2201      	movs	r2, #1
 800283a:	409a      	lsls	r2, r3
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <xTaskResumeAll+0x128>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4313      	orrs	r3, r2
 8002842:	4a2a      	ldr	r2, [pc, #168]	; (80028ec <xTaskResumeAll+0x128>)
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <xTaskResumeAll+0x12c>)
 8002854:	441a      	add	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3304      	adds	r3, #4
 800285a:	4619      	mov	r1, r3
 800285c:	4610      	mov	r0, r2
 800285e:	f7ff fd96 	bl	800238e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <xTaskResumeAll+0x130>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	429a      	cmp	r2, r3
 800286e:	d302      	bcc.n	8002876 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002870:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <xTaskResumeAll+0x134>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <xTaskResumeAll+0x124>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1c8      	bne.n	8002810 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002884:	f000 fa0c 	bl	8002ca0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002888:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <xTaskResumeAll+0x138>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002894:	f000 f848 	bl	8002928 <xTaskIncrementTick>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <xTaskResumeAll+0x134>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f1      	bne.n	8002894 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <xTaskResumeAll+0x138>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <xTaskResumeAll+0x134>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80028be:	2301      	movs	r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <xTaskResumeAll+0x13c>)
 80028c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80028d2:	f000 fbdf 	bl	8003094 <vPortExitCritical>

    return xAlreadyYielded;
 80028d6:	68bb      	ldr	r3, [r7, #8]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000184 	.word	0x20000184
 80028e4:	2000015c 	.word	0x2000015c
 80028e8:	2000011c 	.word	0x2000011c
 80028ec:	20000164 	.word	0x20000164
 80028f0:	20000088 	.word	0x20000088
 80028f4:	20000084 	.word	0x20000084
 80028f8:	20000170 	.word	0x20000170
 80028fc:	2000016c 	.word	0x2000016c
 8002900:	e000ed04 	.word	0xe000ed04

08002904 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800290a:	f000 fc7f 	bl	800320c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <xTaskGetTickCountFromISR+0x20>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002918:	683b      	ldr	r3, [r7, #0]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000160 	.word	0x20000160

08002928 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002932:	4b50      	ldr	r3, [pc, #320]	; (8002a74 <xTaskIncrementTick+0x14c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 8092 	bne.w	8002a60 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800293c:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <xTaskIncrementTick+0x150>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3301      	adds	r3, #1
 8002942:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002944:	4a4c      	ldr	r2, [pc, #304]	; (8002a78 <xTaskIncrementTick+0x150>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d120      	bne.n	8002992 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002950:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <xTaskIncrementTick+0x154>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <xTaskIncrementTick+0x48>
        __asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	603b      	str	r3, [r7, #0]
    }
 800296c:	bf00      	nop
 800296e:	e7fe      	b.n	800296e <xTaskIncrementTick+0x46>
 8002970:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <xTaskIncrementTick+0x154>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	4b42      	ldr	r3, [pc, #264]	; (8002a80 <xTaskIncrementTick+0x158>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <xTaskIncrementTick+0x154>)
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	4a40      	ldr	r2, [pc, #256]	; (8002a80 <xTaskIncrementTick+0x158>)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <xTaskIncrementTick+0x15c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	4a3e      	ldr	r2, [pc, #248]	; (8002a84 <xTaskIncrementTick+0x15c>)
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	f000 f987 	bl	8002ca0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <xTaskIncrementTick+0x160>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	429a      	cmp	r2, r3
 800299a:	d34c      	bcc.n	8002a36 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800299c:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <xTaskIncrementTick+0x154>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d104      	bne.n	80029b0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a6:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <xTaskIncrementTick+0x160>)
 80029a8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ac:	601a      	str	r2, [r3, #0]
                    break;
 80029ae:	e042      	b.n	8002a36 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029b0:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <xTaskIncrementTick+0x154>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d203      	bcs.n	80029d0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029c8:	4a2f      	ldr	r2, [pc, #188]	; (8002a88 <xTaskIncrementTick+0x160>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80029ce:	e032      	b.n	8002a36 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	3304      	adds	r3, #4
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fcfe 	bl	80023d6 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d004      	beq.n	80029ec <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3318      	adds	r3, #24
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fcf5 	bl	80023d6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f002 ff58 	bl	80058a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	2201      	movs	r2, #1
 80029fa:	409a      	lsls	r2, r3
 80029fc:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <xTaskIncrementTick+0x164>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	4a22      	ldr	r2, [pc, #136]	; (8002a8c <xTaskIncrementTick+0x164>)
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <xTaskIncrementTick+0x168>)
 8002a14:	441a      	add	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	f7ff fcb6 	bl	800238e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <xTaskIncrementTick+0x16c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d3b5      	bcc.n	800299c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002a30:	2301      	movs	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a34:	e7b2      	b.n	800299c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a36:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <xTaskIncrementTick+0x16c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	4914      	ldr	r1, [pc, #80]	; (8002a90 <xTaskIncrementTick+0x168>)
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d901      	bls.n	8002a52 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <xTaskIncrementTick+0x170>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e004      	b.n	8002a6a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <xTaskIncrementTick+0x174>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <xTaskIncrementTick+0x174>)
 8002a68:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a6a:	697b      	ldr	r3, [r7, #20]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000184 	.word	0x20000184
 8002a78:	20000160 	.word	0x20000160
 8002a7c:	20000114 	.word	0x20000114
 8002a80:	20000118 	.word	0x20000118
 8002a84:	20000174 	.word	0x20000174
 8002a88:	2000017c 	.word	0x2000017c
 8002a8c:	20000164 	.word	0x20000164
 8002a90:	20000088 	.word	0x20000088
 8002a94:	20000084 	.word	0x20000084
 8002a98:	20000170 	.word	0x20000170
 8002a9c:	2000016c 	.word	0x2000016c

08002aa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <vTaskSwitchContext+0xbc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002aae:	4b2c      	ldr	r3, [pc, #176]	; (8002b60 <vTaskSwitchContext+0xc0>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002ab4:	e04d      	b.n	8002b52 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002ab6:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <vTaskSwitchContext+0xc0>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002abc:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <vTaskSwitchContext+0xc4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002aca:	7afb      	ldrb	r3, [r7, #11]
 8002acc:	f1c3 031f 	rsb	r3, r3, #31
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	4925      	ldr	r1, [pc, #148]	; (8002b68 <vTaskSwitchContext+0xc8>)
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <vTaskSwitchContext+0x5c>
        __asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	607b      	str	r3, [r7, #4]
    }
 8002af8:	bf00      	nop
 8002afa:	e7fe      	b.n	8002afa <vTaskSwitchContext+0x5a>
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <vTaskSwitchContext+0xc8>)
 8002b08:	4413      	add	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d104      	bne.n	8002b2c <vTaskSwitchContext+0x8c>
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <vTaskSwitchContext+0xcc>)
 8002b34:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <vTaskSwitchContext+0xcc>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <vTaskSwitchContext+0xd0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d102      	bne.n	8002b48 <vTaskSwitchContext+0xa8>
 8002b42:	f002 fe0f 	bl	8005764 <SEGGER_SYSVIEW_OnIdle>
}
 8002b46:	e004      	b.n	8002b52 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <vTaskSwitchContext+0xcc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f002 fe67 	bl	8005820 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000184 	.word	0x20000184
 8002b60:	20000170 	.word	0x20000170
 8002b64:	20000164 	.word	0x20000164
 8002b68:	20000088 	.word	0x20000088
 8002b6c:	20000084 	.word	0x20000084
 8002b70:	20000180 	.word	0x20000180

08002b74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b7c:	f000 f852 	bl	8002c24 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <prvIdleTask+0x28>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d9f9      	bls.n	8002b7c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <prvIdleTask+0x2c>)
 8002b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b98:	e7f0      	b.n	8002b7c <prvIdleTask+0x8>
 8002b9a:	bf00      	nop
 8002b9c:	20000088 	.word	0x20000088
 8002ba0:	e000ed04 	.word	0xe000ed04

08002ba4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002baa:	2300      	movs	r3, #0
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	e00c      	b.n	8002bca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <prvInitialiseTaskLists+0x60>)
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fbb8 	bl	8002334 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d9ef      	bls.n	8002bb0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002bd0:	480d      	ldr	r0, [pc, #52]	; (8002c08 <prvInitialiseTaskLists+0x64>)
 8002bd2:	f7ff fbaf 	bl	8002334 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002bd6:	480d      	ldr	r0, [pc, #52]	; (8002c0c <prvInitialiseTaskLists+0x68>)
 8002bd8:	f7ff fbac 	bl	8002334 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002bdc:	480c      	ldr	r0, [pc, #48]	; (8002c10 <prvInitialiseTaskLists+0x6c>)
 8002bde:	f7ff fba9 	bl	8002334 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002be2:	480c      	ldr	r0, [pc, #48]	; (8002c14 <prvInitialiseTaskLists+0x70>)
 8002be4:	f7ff fba6 	bl	8002334 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002be8:	480b      	ldr	r0, [pc, #44]	; (8002c18 <prvInitialiseTaskLists+0x74>)
 8002bea:	f7ff fba3 	bl	8002334 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <prvInitialiseTaskLists+0x78>)
 8002bf0:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <prvInitialiseTaskLists+0x64>)
 8002bf2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <prvInitialiseTaskLists+0x7c>)
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <prvInitialiseTaskLists+0x68>)
 8002bf8:	601a      	str	r2, [r3, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000088 	.word	0x20000088
 8002c08:	200000ec 	.word	0x200000ec
 8002c0c:	20000100 	.word	0x20000100
 8002c10:	2000011c 	.word	0x2000011c
 8002c14:	20000130 	.word	0x20000130
 8002c18:	20000148 	.word	0x20000148
 8002c1c:	20000114 	.word	0x20000114
 8002c20:	20000118 	.word	0x20000118

08002c24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c2a:	e019      	b.n	8002c60 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002c2c:	f000 fa02 	bl	8003034 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c30:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <prvCheckTasksWaitingTermination+0x50>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fbca 	bl	80023d6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <prvCheckTasksWaitingTermination+0x54>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <prvCheckTasksWaitingTermination+0x54>)
 8002c4a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <prvCheckTasksWaitingTermination+0x58>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <prvCheckTasksWaitingTermination+0x58>)
 8002c54:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002c56:	f000 fa1d 	bl	8003094 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f810 	bl	8002c80 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <prvCheckTasksWaitingTermination+0x58>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e1      	bne.n	8002c2c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000130 	.word	0x20000130
 8002c78:	2000015c 	.word	0x2000015c
 8002c7c:	20000144 	.word	0x20000144

08002c80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fbdd 	bl	800344c <vPortFree>
                vPortFree( pxTCB );
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fbda 	bl	800344c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <prvResetNextTaskUnblockTime+0x30>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d104      	bne.n	8002cb8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <prvResetNextTaskUnblockTime+0x34>)
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002cb6:	e005      	b.n	8002cc4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <prvResetNextTaskUnblockTime+0x30>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <prvResetNextTaskUnblockTime+0x34>)
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000114 	.word	0x20000114
 8002cd4:	2000017c 	.word	0x2000017c

08002cd8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cf0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3b04      	subs	r3, #4
 8002cf6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f023 0201 	bic.w	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3b04      	subs	r3, #4
 8002d06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002d08:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <pxPortInitialiseStack+0x64>)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3b14      	subs	r3, #20
 8002d12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3b04      	subs	r3, #4
 8002d1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f06f 0202 	mvn.w	r2, #2
 8002d26:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3b20      	subs	r3, #32
 8002d2c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	08002d41 	.word	0x08002d41

08002d40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <prvTaskExitError+0x54>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d52:	d00a      	beq.n	8002d6a <prvTaskExitError+0x2a>
        __asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	60fb      	str	r3, [r7, #12]
    }
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <prvTaskExitError+0x28>
        __asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	60bb      	str	r3, [r7, #8]
    }
 8002d7c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d7e:	bf00      	nop
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0fc      	beq.n	8002d80 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d86:	bf00      	nop
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	20000010 	.word	0x20000010
	...

08002da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <pxCurrentTCBConst2>)
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	6808      	ldr	r0, [r1, #0]
 8002da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002daa:	f380 8809 	msr	PSP, r0
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f380 8811 	msr	BASEPRI, r0
 8002dba:	4770      	bx	lr
 8002dbc:	f3af 8000 	nop.w

08002dc0 <pxCurrentTCBConst2>:
 8002dc0:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop

08002dc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002dc8:	4808      	ldr	r0, [pc, #32]	; (8002dec <prvPortStartFirstTask+0x24>)
 8002dca:	6800      	ldr	r0, [r0, #0]
 8002dcc:	6800      	ldr	r0, [r0, #0]
 8002dce:	f380 8808 	msr	MSP, r0
 8002dd2:	f04f 0000 	mov.w	r0, #0
 8002dd6:	f380 8814 	msr	CONTROL, r0
 8002dda:	b662      	cpsie	i
 8002ddc:	b661      	cpsie	f
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	df00      	svc	0
 8002de8:	bf00      	nop
 8002dea:	0000      	.short	0x0000
 8002dec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop

08002df4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002dfa:	4b46      	ldr	r3, [pc, #280]	; (8002f14 <xPortStartScheduler+0x120>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a46      	ldr	r2, [pc, #280]	; (8002f18 <xPortStartScheduler+0x124>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d10a      	bne.n	8002e1a <xPortStartScheduler+0x26>
        __asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	613b      	str	r3, [r7, #16]
    }
 8002e16:	bf00      	nop
 8002e18:	e7fe      	b.n	8002e18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e1a:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <xPortStartScheduler+0x120>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a3f      	ldr	r2, [pc, #252]	; (8002f1c <xPortStartScheduler+0x128>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d10a      	bne.n	8002e3a <xPortStartScheduler+0x46>
        __asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	60fb      	str	r3, [r7, #12]
    }
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e3a:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <xPortStartScheduler+0x12c>)
 8002e3c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	22ff      	movs	r2, #255	; 0xff
 8002e4a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <xPortStartScheduler+0x130>)
 8002e60:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <xPortStartScheduler+0x134>)
 8002e64:	2207      	movs	r2, #7
 8002e66:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e68:	e009      	b.n	8002e7e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <xPortStartScheduler+0x134>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	4a2d      	ldr	r2, [pc, #180]	; (8002f28 <xPortStartScheduler+0x134>)
 8002e72:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b80      	cmp	r3, #128	; 0x80
 8002e88:	d0ef      	beq.n	8002e6a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e8a:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <xPortStartScheduler+0x134>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1c3 0307 	rsb	r3, r3, #7
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d00a      	beq.n	8002eac <xPortStartScheduler+0xb8>
        __asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	60bb      	str	r3, [r7, #8]
    }
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002eac:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <xPortStartScheduler+0x134>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <xPortStartScheduler+0x134>)
 8002eb4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <xPortStartScheduler+0x134>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ebe:	4a1a      	ldr	r2, [pc, #104]	; (8002f28 <xPortStartScheduler+0x134>)
 8002ec0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002eca:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <xPortStartScheduler+0x138>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <xPortStartScheduler+0x138>)
 8002ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ed4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <xPortStartScheduler+0x138>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <xPortStartScheduler+0x138>)
 8002edc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ee0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ee2:	f000 f963 	bl	80031ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <xPortStartScheduler+0x13c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002eec:	f000 f982 	bl	80031f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ef0:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <xPortStartScheduler+0x140>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <xPortStartScheduler+0x140>)
 8002ef6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002efa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002efc:	f7ff ff64 	bl	8002dc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002f00:	f7ff fdce 	bl	8002aa0 <vTaskSwitchContext>
    prvTaskExitError();
 8002f04:	f7ff ff1c 	bl	8002d40 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00
 8002f18:	410fc271 	.word	0x410fc271
 8002f1c:	410fc270 	.word	0x410fc270
 8002f20:	e000e400 	.word	0xe000e400
 8002f24:	20000188 	.word	0x20000188
 8002f28:	2000018c 	.word	0x2000018c
 8002f2c:	e000ed20 	.word	0xe000ed20
 8002f30:	20000010 	.word	0x20000010
 8002f34:	e000ef34 	.word	0xe000ef34

08002f38 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f3e:	4b37      	ldr	r3, [pc, #220]	; (800301c <vInitPrioGroupValue+0xe4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a37      	ldr	r2, [pc, #220]	; (8003020 <vInitPrioGroupValue+0xe8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10a      	bne.n	8002f5e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	613b      	str	r3, [r7, #16]
    }
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f5e:	4b2f      	ldr	r3, [pc, #188]	; (800301c <vInitPrioGroupValue+0xe4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a30      	ldr	r2, [pc, #192]	; (8003024 <vInitPrioGroupValue+0xec>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d10a      	bne.n	8002f7e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	60fb      	str	r3, [r7, #12]
    }
 8002f7a:	bf00      	nop
 8002f7c:	e7fe      	b.n	8002f7c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <vInitPrioGroupValue+0xf0>)
 8002f80:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	22ff      	movs	r2, #255	; 0xff
 8002f8e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4b22      	ldr	r3, [pc, #136]	; (800302c <vInitPrioGroupValue+0xf4>)
 8002fa4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fa6:	4b22      	ldr	r3, [pc, #136]	; (8003030 <vInitPrioGroupValue+0xf8>)
 8002fa8:	2207      	movs	r2, #7
 8002faa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fac:	e009      	b.n	8002fc2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002fae:	4b20      	ldr	r3, [pc, #128]	; (8003030 <vInitPrioGroupValue+0xf8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <vInitPrioGroupValue+0xf8>)
 8002fb6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	2b80      	cmp	r3, #128	; 0x80
 8002fcc:	d0ef      	beq.n	8002fae <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <vInitPrioGroupValue+0xf8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f1c3 0307 	rsb	r3, r3, #7
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d00a      	beq.n	8002ff0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	60bb      	str	r3, [r7, #8]
    }
 8002fec:	bf00      	nop
 8002fee:	e7fe      	b.n	8002fee <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <vInitPrioGroupValue+0xf8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	4a0e      	ldr	r2, [pc, #56]	; (8003030 <vInitPrioGroupValue+0xf8>)
 8002ff8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <vInitPrioGroupValue+0xf8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003002:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <vInitPrioGroupValue+0xf8>)
 8003004:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800300e:	bf00      	nop
 8003010:	371c      	adds	r7, #28
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00
 8003020:	410fc271 	.word	0x410fc271
 8003024:	410fc270 	.word	0x410fc270
 8003028:	e000e400 	.word	0xe000e400
 800302c:	20000188 	.word	0x20000188
 8003030:	2000018c 	.word	0x2000018c

08003034 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
        __asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	607b      	str	r3, [r7, #4]
    }
 800304c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800304e:	4b0f      	ldr	r3, [pc, #60]	; (800308c <vPortEnterCritical+0x58>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3301      	adds	r3, #1
 8003054:	4a0d      	ldr	r2, [pc, #52]	; (800308c <vPortEnterCritical+0x58>)
 8003056:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <vPortEnterCritical+0x58>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d10f      	bne.n	8003080 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <vPortEnterCritical+0x5c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <vPortEnterCritical+0x4c>
        __asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	603b      	str	r3, [r7, #0]
    }
 800307c:	bf00      	nop
 800307e:	e7fe      	b.n	800307e <vPortEnterCritical+0x4a>
    }
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	20000010 	.word	0x20000010
 8003090:	e000ed04 	.word	0xe000ed04

08003094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <vPortExitCritical+0x50>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <vPortExitCritical+0x24>
        __asm volatile
 80030a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	607b      	str	r3, [r7, #4]
    }
 80030b4:	bf00      	nop
 80030b6:	e7fe      	b.n	80030b6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <vPortExitCritical+0x50>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3b01      	subs	r3, #1
 80030be:	4a09      	ldr	r2, [pc, #36]	; (80030e4 <vPortExitCritical+0x50>)
 80030c0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <vPortExitCritical+0x50>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <vPortExitCritical+0x42>
 80030ca:	2300      	movs	r3, #0
 80030cc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80030d4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000010 	.word	0x20000010
	...

080030f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80030f0:	f3ef 8009 	mrs	r0, PSP
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	4b15      	ldr	r3, [pc, #84]	; (8003150 <pxCurrentTCBConst>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	f01e 0f10 	tst.w	lr, #16
 8003100:	bf08      	it	eq
 8003102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800310a:	6010      	str	r0, [r2, #0]
 800310c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003114:	f380 8811 	msr	BASEPRI, r0
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f7ff fcbe 	bl	8002aa0 <vTaskSwitchContext>
 8003124:	f04f 0000 	mov.w	r0, #0
 8003128:	f380 8811 	msr	BASEPRI, r0
 800312c:	bc09      	pop	{r0, r3}
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	6808      	ldr	r0, [r1, #0]
 8003132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003136:	f01e 0f10 	tst.w	lr, #16
 800313a:	bf08      	it	eq
 800313c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003140:	f380 8809 	msr	PSP, r0
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	f3af 8000 	nop.w

08003150 <pxCurrentTCBConst>:
 8003150:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop

08003158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
        __asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	607b      	str	r3, [r7, #4]
    }
 8003170:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003172:	f002 fa7d 	bl	8005670 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003176:	f7ff fbd7 	bl	8002928 <xTaskIncrementTick>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d006      	beq.n	800318e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003180:	f002 fad4 	bl	800572c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <SysTick_Handler+0x50>)
 8003186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e001      	b.n	8003192 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800318e:	f002 fab1 	bl	80056f4 <SEGGER_SYSVIEW_RecordExitISR>
 8003192:	2300      	movs	r3, #0
 8003194:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f383 8811 	msr	BASEPRI, r3
    }
 800319c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <vPortSetupTimerInterrupt+0x34>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <vPortSetupTimerInterrupt+0x38>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <vPortSetupTimerInterrupt+0x3c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <vPortSetupTimerInterrupt+0x40>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <vPortSetupTimerInterrupt+0x44>)
 80031ca:	3b01      	subs	r3, #1
 80031cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031ce:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <vPortSetupTimerInterrupt+0x34>)
 80031d0:	2207      	movs	r2, #7
 80031d2:	601a      	str	r2, [r3, #0]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000e010 	.word	0xe000e010
 80031e4:	e000e018 	.word	0xe000e018
 80031e8:	20000000 	.word	0x20000000
 80031ec:	10624dd3 	.word	0x10624dd3
 80031f0:	e000e014 	.word	0xe000e014

080031f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80031f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003204 <vPortEnableVFP+0x10>
 80031f8:	6801      	ldr	r1, [r0, #0]
 80031fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80031fe:	6001      	str	r1, [r0, #0]
 8003200:	4770      	bx	lr
 8003202:	0000      	.short	0x0000
 8003204:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop

0800320c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003212:	f3ef 8305 	mrs	r3, IPSR
 8003216:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b0f      	cmp	r3, #15
 800321c:	d914      	bls.n	8003248 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800321e:	4a17      	ldr	r2, [pc, #92]	; (800327c <vPortValidateInterruptPriority+0x70>)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003228:	4b15      	ldr	r3, [pc, #84]	; (8003280 <vPortValidateInterruptPriority+0x74>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	7afa      	ldrb	r2, [r7, #11]
 800322e:	429a      	cmp	r2, r3
 8003230:	d20a      	bcs.n	8003248 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	607b      	str	r3, [r7, #4]
    }
 8003244:	bf00      	nop
 8003246:	e7fe      	b.n	8003246 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <vPortValidateInterruptPriority+0x78>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <vPortValidateInterruptPriority+0x7c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d90a      	bls.n	800326e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	603b      	str	r3, [r7, #0]
    }
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <vPortValidateInterruptPriority+0x60>
    }
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000e3f0 	.word	0xe000e3f0
 8003280:	20000188 	.word	0x20000188
 8003284:	e000ed0c 	.word	0xe000ed0c
 8003288:	2000018c 	.word	0x2000018c

0800328c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003298:	f7ff fa86 	bl	80027a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800329c:	4b65      	ldr	r3, [pc, #404]	; (8003434 <pvPortMalloc+0x1a8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80032a4:	f000 f934 	bl	8003510 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80032a8:	4b63      	ldr	r3, [pc, #396]	; (8003438 <pvPortMalloc+0x1ac>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f040 80a7 	bne.w	8003404 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d02d      	beq.n	8003318 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80032bc:	2208      	movs	r2, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d227      	bcs.n	8003318 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80032c8:	2208      	movs	r2, #8
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d021      	beq.n	800331e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f023 0307 	bic.w	r3, r3, #7
 80032e0:	3308      	adds	r3, #8
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d214      	bcs.n	8003312 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f023 0307 	bic.w	r3, r3, #7
 80032ee:	3308      	adds	r3, #8
 80032f0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d010      	beq.n	800331e <pvPortMalloc+0x92>
        __asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	617b      	str	r3, [r7, #20]
    }
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003316:	e002      	b.n	800331e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	607b      	str	r3, [r7, #4]
 800331c:	e000      	b.n	8003320 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800331e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d06e      	beq.n	8003404 <pvPortMalloc+0x178>
 8003326:	4b45      	ldr	r3, [pc, #276]	; (800343c <pvPortMalloc+0x1b0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	429a      	cmp	r2, r3
 800332e:	d869      	bhi.n	8003404 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003330:	4b43      	ldr	r3, [pc, #268]	; (8003440 <pvPortMalloc+0x1b4>)
 8003332:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003334:	4b42      	ldr	r3, [pc, #264]	; (8003440 <pvPortMalloc+0x1b4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800333a:	e004      	b.n	8003346 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	d903      	bls.n	8003358 <pvPortMalloc+0xcc>
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f1      	bne.n	800333c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <pvPortMalloc+0x1a8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335e:	429a      	cmp	r2, r3
 8003360:	d050      	beq.n	8003404 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2208      	movs	r2, #8
 8003368:	4413      	add	r3, r2
 800336a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	1ad2      	subs	r2, r2, r3
 800337c:	2308      	movs	r3, #8
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	429a      	cmp	r2, r3
 8003382:	d91f      	bls.n	80033c4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <pvPortMalloc+0x120>
        __asm volatile
 8003396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339a:	f383 8811 	msr	BASEPRI, r3
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	613b      	str	r3, [r7, #16]
    }
 80033a8:	bf00      	nop
 80033aa:	e7fe      	b.n	80033aa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	1ad2      	subs	r2, r2, r3
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033be:	69b8      	ldr	r0, [r7, #24]
 80033c0:	f000 f908 	bl	80035d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <pvPortMalloc+0x1b0>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	4a1b      	ldr	r2, [pc, #108]	; (800343c <pvPortMalloc+0x1b0>)
 80033d0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033d2:	4b1a      	ldr	r3, [pc, #104]	; (800343c <pvPortMalloc+0x1b0>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <pvPortMalloc+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d203      	bcs.n	80033e6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033de:	4b17      	ldr	r3, [pc, #92]	; (800343c <pvPortMalloc+0x1b0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a18      	ldr	r2, [pc, #96]	; (8003444 <pvPortMalloc+0x1b8>)
 80033e4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	4b13      	ldr	r3, [pc, #76]	; (8003438 <pvPortMalloc+0x1ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <pvPortMalloc+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3301      	adds	r3, #1
 8003400:	4a11      	ldr	r2, [pc, #68]	; (8003448 <pvPortMalloc+0x1bc>)
 8003402:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003404:	f7ff f9de 	bl	80027c4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <pvPortMalloc+0x19c>
        __asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	60fb      	str	r3, [r7, #12]
    }
 8003424:	bf00      	nop
 8003426:	e7fe      	b.n	8003426 <pvPortMalloc+0x19a>
    return pvReturn;
 8003428:	69fb      	ldr	r3, [r7, #28]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3728      	adds	r7, #40	; 0x28
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20012d98 	.word	0x20012d98
 8003438:	20012dac 	.word	0x20012dac
 800343c:	20012d9c 	.word	0x20012d9c
 8003440:	20012d90 	.word	0x20012d90
 8003444:	20012da0 	.word	0x20012da0
 8003448:	20012da4 	.word	0x20012da4

0800344c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d04d      	beq.n	80034fa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800345e:	2308      	movs	r3, #8
 8003460:	425b      	negs	r3, r3
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4413      	add	r3, r2
 8003466:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4b24      	ldr	r3, [pc, #144]	; (8003504 <vPortFree+0xb8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <vPortFree+0x44>
        __asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	60fb      	str	r3, [r7, #12]
    }
 800348c:	bf00      	nop
 800348e:	e7fe      	b.n	800348e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <vPortFree+0x62>
        __asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	60bb      	str	r3, [r7, #8]
    }
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4b14      	ldr	r3, [pc, #80]	; (8003504 <vPortFree+0xb8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01e      	beq.n	80034fa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d11a      	bne.n	80034fa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <vPortFree+0xb8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	401a      	ands	r2, r3
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80034d4:	f7ff f968 	bl	80027a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <vPortFree+0xbc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4413      	add	r3, r2
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <vPortFree+0xbc>)
 80034e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80034e6:	6938      	ldr	r0, [r7, #16]
 80034e8:	f000 f874 	bl	80035d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <vPortFree+0xc0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3301      	adds	r3, #1
 80034f2:	4a06      	ldr	r2, [pc, #24]	; (800350c <vPortFree+0xc0>)
 80034f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80034f6:	f7ff f965 	bl	80027c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20012dac 	.word	0x20012dac
 8003508:	20012d9c 	.word	0x20012d9c
 800350c:	20012da8 	.word	0x20012da8

08003510 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003516:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800351a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800351c:	4b27      	ldr	r3, [pc, #156]	; (80035bc <prvHeapInit+0xac>)
 800351e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00c      	beq.n	8003544 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3307      	adds	r3, #7
 800352e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0307 	bic.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <prvHeapInit+0xac>)
 8003540:	4413      	add	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003548:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <prvHeapInit+0xb0>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800354e:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <prvHeapInit+0xb0>)
 8003550:	2200      	movs	r2, #0
 8003552:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	4413      	add	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800355c:	2208      	movs	r2, #8
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0307 	bic.w	r3, r3, #7
 800356a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <prvHeapInit+0xb4>)
 8003570:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003572:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <prvHeapInit+0xb4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2200      	movs	r2, #0
 8003578:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <prvHeapInit+0xb4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	1ad2      	subs	r2, r2, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <prvHeapInit+0xb4>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <prvHeapInit+0xb8>)
 800359e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a09      	ldr	r2, [pc, #36]	; (80035cc <prvHeapInit+0xbc>)
 80035a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <prvHeapInit+0xc0>)
 80035aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035ae:	601a      	str	r2, [r3, #0]
}
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	20000190 	.word	0x20000190
 80035c0:	20012d90 	.word	0x20012d90
 80035c4:	20012d98 	.word	0x20012d98
 80035c8:	20012da0 	.word	0x20012da0
 80035cc:	20012d9c 	.word	0x20012d9c
 80035d0:	20012dac 	.word	0x20012dac

080035d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035dc:	4b28      	ldr	r3, [pc, #160]	; (8003680 <prvInsertBlockIntoFreeList+0xac>)
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	e002      	b.n	80035e8 <prvInsertBlockIntoFreeList+0x14>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d8f7      	bhi.n	80035e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4413      	add	r3, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d108      	bne.n	8003616 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	441a      	add	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	441a      	add	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d118      	bne.n	800365c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b15      	ldr	r3, [pc, #84]	; (8003684 <prvInsertBlockIntoFreeList+0xb0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d00d      	beq.n	8003652 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	441a      	add	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e008      	b.n	8003664 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <prvInsertBlockIntoFreeList+0xb0>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e003      	b.n	8003664 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d002      	beq.n	8003672 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20012d90 	.word	0x20012d90
 8003684:	20012d98 	.word	0x20012d98

08003688 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800368c:	4803      	ldr	r0, [pc, #12]	; (800369c <_cbSendSystemDesc+0x14>)
 800368e:	f001 ff99 	bl	80055c4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003692:	4803      	ldr	r0, [pc, #12]	; (80036a0 <_cbSendSystemDesc+0x18>)
 8003694:	f001 ff96 	bl	80055c4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}
 800369c:	08005d20 	.word	0x08005d20
 80036a0:	08005d5c 	.word	0x08005d5c

080036a4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <SEGGER_SYSVIEW_Conf+0x24>)
 80036b2:	4a06      	ldr	r2, [pc, #24]	; (80036cc <SEGGER_SYSVIEW_Conf+0x28>)
 80036b4:	f001 fc0a 	bl	8004ecc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80036b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80036bc:	f001 fc4a 	bl	8004f54 <SEGGER_SYSVIEW_SetRAMBase>
}
 80036c0:	bf00      	nop
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000000 	.word	0x20000000
 80036c8:	08003689 	.word	0x08003689
 80036cc:	08005dfc 	.word	0x08005dfc

080036d0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80036d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80036d6:	2300      	movs	r3, #0
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	e033      	b.n	8003744 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80036dc:	491e      	ldr	r1, [pc, #120]	; (8003758 <_cbSendTaskList+0x88>)
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	491a      	ldr	r1, [pc, #104]	; (8003758 <_cbSendTaskList+0x88>)
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	3304      	adds	r3, #4
 80036fc:	6819      	ldr	r1, [r3, #0]
 80036fe:	4c16      	ldr	r4, [pc, #88]	; (8003758 <_cbSendTaskList+0x88>)
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4423      	add	r3, r4
 800370c:	3308      	adds	r3, #8
 800370e:	681c      	ldr	r4, [r3, #0]
 8003710:	4d11      	ldr	r5, [pc, #68]	; (8003758 <_cbSendTaskList+0x88>)
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	442b      	add	r3, r5
 800371e:	330c      	adds	r3, #12
 8003720:	681d      	ldr	r5, [r3, #0]
 8003722:	4e0d      	ldr	r6, [pc, #52]	; (8003758 <_cbSendTaskList+0x88>)
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4433      	add	r3, r6
 8003730:	3310      	adds	r3, #16
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	462b      	mov	r3, r5
 8003738:	4622      	mov	r2, r4
 800373a:	f000 f8bd 	bl	80038b8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3301      	adds	r3, #1
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <_cbSendTaskList+0x8c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	429a      	cmp	r2, r3
 800374c:	d3c6      	bcc.n	80036dc <_cbSendTaskList+0xc>
  }
}
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003758:	20012db0 	.word	0x20012db0
 800375c:	20012e50 	.word	0x20012e50

08003760 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003768:	f7ff f8cc 	bl	8002904 <xTaskGetTickCountFromISR>
 800376c:	4603      	mov	r3, r0
 800376e:	2200      	movs	r2, #0
 8003770:	469a      	mov	sl, r3
 8003772:	4693      	mov	fp, r2
 8003774:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	f04f 0a00 	mov.w	sl, #0
 8003784:	f04f 0b00 	mov.w	fp, #0
 8003788:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800378c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003790:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003794:	4652      	mov	r2, sl
 8003796:	465b      	mov	r3, fp
 8003798:	1a14      	subs	r4, r2, r0
 800379a:	eb63 0501 	sbc.w	r5, r3, r1
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	00ab      	lsls	r3, r5, #2
 80037a8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80037ac:	00a2      	lsls	r2, r4, #2
 80037ae:	4614      	mov	r4, r2
 80037b0:	461d      	mov	r5, r3
 80037b2:	eb14 0800 	adds.w	r8, r4, r0
 80037b6:	eb45 0901 	adc.w	r9, r5, r1
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ce:	4690      	mov	r8, r2
 80037d0:	4699      	mov	r9, r3
 80037d2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80037d6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080037e8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80037f6:	2205      	movs	r2, #5
 80037f8:	492b      	ldr	r1, [pc, #172]	; (80038a8 <SYSVIEW_AddTask+0xc0>)
 80037fa:	68b8      	ldr	r0, [r7, #8]
 80037fc:	f002 fa32 	bl	8005c64 <memcmp>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d04b      	beq.n	800389e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003806:	4b29      	ldr	r3, [pc, #164]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b07      	cmp	r3, #7
 800380c:	d903      	bls.n	8003816 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800380e:	4828      	ldr	r0, [pc, #160]	; (80038b0 <SYSVIEW_AddTask+0xc8>)
 8003810:	f002 f97a 	bl	8005b08 <SEGGER_SYSVIEW_Warn>
    return;
 8003814:	e044      	b.n	80038a0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003816:	4b25      	ldr	r3, [pc, #148]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4926      	ldr	r1, [pc, #152]	; (80038b4 <SYSVIEW_AddTask+0xcc>)
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4921      	ldr	r1, [pc, #132]	; (80038b4 <SYSVIEW_AddTask+0xcc>)
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3304      	adds	r3, #4
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003840:	4b1a      	ldr	r3, [pc, #104]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	491b      	ldr	r1, [pc, #108]	; (80038b4 <SYSVIEW_AddTask+0xcc>)
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3308      	adds	r3, #8
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4916      	ldr	r1, [pc, #88]	; (80038b4 <SYSVIEW_AddTask+0xcc>)
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	330c      	adds	r3, #12
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4910      	ldr	r1, [pc, #64]	; (80038b4 <SYSVIEW_AddTask+0xcc>)
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	3310      	adds	r3, #16
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	4a08      	ldr	r2, [pc, #32]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 800388a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f80e 	bl	80038b8 <SYSVIEW_SendTaskInfo>
 800389c:	e000      	b.n	80038a0 <SYSVIEW_AddTask+0xb8>
    return;
 800389e:	bf00      	nop

}
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	08005d6c 	.word	0x08005d6c
 80038ac:	20012e50 	.word	0x20012e50
 80038b0:	08005d74 	.word	0x08005d74
 80038b4:	20012db0 	.word	0x20012db0

080038b8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	; 0x28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80038c6:	f107 0314 	add.w	r3, r7, #20
 80038ca:	2214      	movs	r2, #20
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f002 f9e6 	bl	8005ca0 <memset>
  TaskInfo.TaskID     = TaskID;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 fd71 	bl	80053d4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80038f2:	bf00      	nop
 80038f4:	3728      	adds	r7, #40	; 0x28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <__NVIC_EnableIRQ>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db0b      	blt.n	8003926 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	4907      	ldr	r1, [pc, #28]	; (8003934 <__NVIC_EnableIRQ+0x38>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e100 	.word	0xe000e100

08003938 <__NVIC_SetPriority>:
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	2b00      	cmp	r3, #0
 800394a:	db0a      	blt.n	8003962 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	490c      	ldr	r1, [pc, #48]	; (8003984 <__NVIC_SetPriority+0x4c>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	440b      	add	r3, r1
 800395c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003960:	e00a      	b.n	8003978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4908      	ldr	r1, [pc, #32]	; (8003988 <__NVIC_SetPriority+0x50>)
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3b04      	subs	r3, #4
 8003970:	0112      	lsls	r2, r2, #4
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	440b      	add	r3, r1
 8003976:	761a      	strb	r2, [r3, #24]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000e100 	.word	0xe000e100
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003992:	f002 f915 	bl	8005bc0 <SEGGER_SYSVIEW_IsStarted>
 8003996:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800399e:	f001 fb9d 	bl	80050dc <SEGGER_SYSVIEW_Start>
  }
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80039b6:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <_cbOnUARTRx+0x3c>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d806      	bhi.n	80039cc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <_cbOnUARTRx+0x3c>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	3301      	adds	r3, #1
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <_cbOnUARTRx+0x3c>)
 80039c8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80039ca:	e009      	b.n	80039e0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80039cc:	f7ff ffde 	bl	800398c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <_cbOnUARTRx+0x3c>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4618      	mov	r0, r3
 80039d6:	1dfb      	adds	r3, r7, #7
 80039d8:	2201      	movs	r2, #1
 80039da:	4619      	mov	r1, r3
 80039dc:	f000 fb9a 	bl	8004114 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80039e0:	bf00      	nop
}
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000014 	.word	0x20000014

080039ec <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <_cbOnUARTTx+0x5c>)
 80039f6:	785b      	ldrb	r3, [r3, #1]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d80f      	bhi.n	8003a1c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80039fc:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <_cbOnUARTTx+0x5c>)
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <_cbOnUARTTx+0x60>)
 8003a04:	5c9a      	ldrb	r2, [r3, r2]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <_cbOnUARTTx+0x5c>)
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <_cbOnUARTTx+0x5c>)
 8003a14:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003a1a:	e00f      	b.n	8003a3c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <_cbOnUARTTx+0x5c>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fa19 	bl	8003e5c <SEGGER_RTT_ReadUpBufferNoLock>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	da02      	bge.n	8003a3a <_cbOnUARTTx+0x4e>
    r = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e000      	b.n	8003a3c <_cbOnUARTTx+0x50>
  }
Done:
 8003a3a:	bf00      	nop
  return r;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000014 	.word	0x20000014
 8003a4c:	08005e04 	.word	0x08005e04

08003a50 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003a58:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <SEGGER_UART_init+0x1c>)
 8003a5a:	4905      	ldr	r1, [pc, #20]	; (8003a70 <SEGGER_UART_init+0x20>)
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f863 	bl	8003b28 <HIF_UART_Init>
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	080039ad 	.word	0x080039ad
 8003a70:	080039ed 	.word	0x080039ed

08003a74 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003a7a:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <USART2_IRQHandler+0x80>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d011      	beq.n	8003aae <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <USART2_IRQHandler+0x84>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 030b 	and.w	r3, r3, #11
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d108      	bne.n	8003aae <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003a9c:	4b17      	ldr	r3, [pc, #92]	; (8003afc <USART2_IRQHandler+0x88>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003aa4:	4b15      	ldr	r3, [pc, #84]	; (8003afc <USART2_IRQHandler+0x88>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	79fa      	ldrb	r2, [r7, #7]
 8003aaa:	4610      	mov	r0, r2
 8003aac:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01a      	beq.n	8003aee <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <USART2_IRQHandler+0x8c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <USART2_IRQHandler+0x8c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	1dfa      	adds	r2, r7, #7
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4798      	blx	r3
 8003aca:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <USART2_IRQHandler+0x90>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a0b      	ldr	r2, [pc, #44]	; (8003b04 <USART2_IRQHandler+0x90>)
 8003ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e006      	b.n	8003aee <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <USART2_IRQHandler+0x80>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003ae4:	79fa      	ldrb	r2, [r7, #7]
 8003ae6:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <USART2_IRQHandler+0x84>)
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e000      	b.n	8003aee <USART2_IRQHandler+0x7a>
      return;
 8003aec:	bf00      	nop
    }
  }
}
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40004400 	.word	0x40004400
 8003af8:	40004404 	.word	0x40004404
 8003afc:	20012e54 	.word	0x20012e54
 8003b00:	20012e58 	.word	0x20012e58
 8003b04:	4000440c 	.word	0x4000440c

08003b08 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b16:	6013      	str	r3, [r2, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	4000440c 	.word	0x4000440c

08003b28 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003b34:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <HIF_UART_Init+0xc8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HIF_UART_Init+0xc8>)
 8003b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003b40:	4b2c      	ldr	r3, [pc, #176]	; (8003bf4 <HIF_UART_Init+0xcc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2b      	ldr	r2, [pc, #172]	; (8003bf4 <HIF_UART_Init+0xcc>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <HIF_UART_Init+0xd0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b58:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003b60:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003b62:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <HIF_UART_Init+0xd0>)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003b68:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <HIF_UART_Init+0xd4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b74:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003b7c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003b7e:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <HIF_UART_Init+0xd4>)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <HIF_UART_Init+0xd8>)
 8003b86:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003b8a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HIF_UART_Init+0xdc>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <HIF_UART_Init+0xe0>)
 8003b94:	2280      	movs	r2, #128	; 0x80
 8003b96:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003b9e:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <HIF_UART_Init+0xe4>)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	085b      	lsrs	r3, r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	d302      	bcc.n	8003bbe <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003bb8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003bbc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d004      	beq.n	8003bce <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	4a11      	ldr	r2, [pc, #68]	; (8003c10 <HIF_UART_Init+0xe8>)
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003bce:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <HIF_UART_Init+0xec>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003bd4:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <HIF_UART_Init+0xf0>)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003bda:	2106      	movs	r1, #6
 8003bdc:	2026      	movs	r0, #38	; 0x26
 8003bde:	f7ff feab 	bl	8003938 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003be2:	2026      	movs	r0, #38	; 0x26
 8003be4:	f7ff fe8a 	bl	80038fc <__NVIC_EnableIRQ>
}
 8003be8:	bf00      	nop
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40023840 	.word	0x40023840
 8003bf4:	40023830 	.word	0x40023830
 8003bf8:	40020020 	.word	0x40020020
 8003bfc:	40020000 	.word	0x40020000
 8003c00:	4000440c 	.word	0x4000440c
 8003c04:	40004410 	.word	0x40004410
 8003c08:	40004414 	.word	0x40004414
 8003c0c:	055d4a80 	.word	0x055d4a80
 8003c10:	40004408 	.word	0x40004408
 8003c14:	20012e54 	.word	0x20012e54
 8003c18:	20012e58 	.word	0x20012e58

08003c1c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003c22:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <_DoInit+0x98>)
 8003c24:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2203      	movs	r2, #3
 8003c2a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2203      	movs	r2, #3
 8003c30:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <_DoInit+0x9c>)
 8003c36:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a20      	ldr	r2, [pc, #128]	; (8003cbc <_DoInit+0xa0>)
 8003c3c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c44:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a17      	ldr	r2, [pc, #92]	; (8003cb8 <_DoInit+0x9c>)
 8003c5c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <_DoInit+0xa4>)
 8003c62:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2210      	movs	r2, #16
 8003c68:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3307      	adds	r3, #7
 8003c80:	4a10      	ldr	r2, [pc, #64]	; (8003cc4 <_DoInit+0xa8>)
 8003c82:	6810      	ldr	r0, [r2, #0]
 8003c84:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c86:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <_DoInit+0xac>)
 8003c8e:	6810      	ldr	r0, [r2, #0]
 8003c90:	6018      	str	r0, [r3, #0]
 8003c92:	8891      	ldrh	r1, [r2, #4]
 8003c94:	7992      	ldrb	r2, [r2, #6]
 8003c96:	8099      	strh	r1, [r3, #4]
 8003c98:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c9a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003ca4:	f3bf 8f5f 	dmb	sy
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	20012e5c 	.word	0x20012e5c
 8003cb8:	08005dc4 	.word	0x08005dc4
 8003cbc:	20012f04 	.word	0x20012f04
 8003cc0:	20013304 	.word	0x20013304
 8003cc4:	08005dd0 	.word	0x08005dd0
 8003cc8:	08005dd4 	.word	0x08005dd4

08003ccc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d905      	bls.n	8003cfc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	e007      	b.n	8003d0c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	69b9      	ldr	r1, [r7, #24]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	1acb      	subs	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	4293      	cmp	r3, r2
 8003d18:	bf28      	it	cs
 8003d1a:	4613      	movcs	r3, r2
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4293      	cmp	r3, r2
 8003d24:	bf28      	it	cs
 8003d26:	4613      	movcs	r3, r2
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	6978      	ldr	r0, [r7, #20]
 8003d3a:	f001 ffa3 	bl	8005c84 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003d3e:	6a3a      	ldr	r2, [r7, #32]
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	4413      	add	r3, r2
 8003d44:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	4413      	add	r3, r2
 8003d4c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	4413      	add	r3, r2
 8003d5c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d101      	bne.n	8003d6c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d6c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1b2      	bne.n	8003ce2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3728      	adds	r7, #40	; 0x28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b088      	sub	sp, #32
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d911      	bls.n	8003dce <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	6938      	ldr	r0, [r7, #16]
 8003dba:	f001 ff63 	bl	8005c84 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003dbe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	441a      	add	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003dcc:	e01f      	b.n	8003e0e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	6938      	ldr	r0, [r7, #16]
 8003de2:	f001 ff4f 	bl	8005c84 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	4413      	add	r3, r2
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6938      	ldr	r0, [r7, #16]
 8003e00:	f001 ff40 	bl	8005c84 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e04:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	60da      	str	r2, [r3, #12]
}
 8003e0e:	bf00      	nop
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003e16:	b480      	push	{r7}
 8003e18:	b087      	sub	sp, #28
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d808      	bhi.n	8003e44 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad2      	subs	r2, r2, r3
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	e004      	b.n	8003e4e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003e4e:	697b      	ldr	r3, [r7, #20]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08c      	sub	sp, #48	; 0x30
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003e68:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e6a:	623b      	str	r3, [r7, #32]
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003e76:	f7ff fed1 	bl	8003c1c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4a37      	ldr	r2, [pc, #220]	; (8003f64 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e88:	4413      	add	r3, r2
 8003e8a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d92b      	bls.n	8003f00 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	bf28      	it	cs
 8003eba:	4613      	movcs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	4413      	add	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	6939      	ldr	r1, [r7, #16]
 8003ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ece:	f001 fed9 	bl	8005c84 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	4413      	add	r3, r2
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	4413      	add	r3, r2
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d101      	bne.n	8003f00 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	bf28      	it	cs
 8003f10:	4613      	movcs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d019      	beq.n	8003f4e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	4413      	add	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	6939      	ldr	r1, [r7, #16]
 8003f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f2a:	f001 feab 	bl	8005c84 <memcpy>
    NumBytesRead += NumBytesRem;
 8003f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	4413      	add	r3, r2
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f58:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3730      	adds	r7, #48	; 0x30
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20012e5c 	.word	0x20012e5c

08003f68 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08c      	sub	sp, #48	; 0x30
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003f74:	4b3e      	ldr	r3, [pc, #248]	; (8004070 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <SEGGER_RTT_ReadNoLock+0x1e>
 8003f82:	f7ff fe4b 	bl	8003c1c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	4413      	add	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	3360      	adds	r3, #96	; 0x60
 8003f92:	4a37      	ldr	r2, [pc, #220]	; (8004070 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f94:	4413      	add	r3, r2
 8003f96:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d92b      	bls.n	800400c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	bf28      	it	cs
 8003fc6:	4613      	movcs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	4413      	add	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fda:	f001 fe53 	bl	8005c84 <memcpy>
    NumBytesRead += NumBytesRem;
 8003fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	4413      	add	r3, r2
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004004:	429a      	cmp	r2, r3
 8004006:	d101      	bne.n	800400c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004008:	2300      	movs	r3, #0
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4293      	cmp	r3, r2
 800401a:	bf28      	it	cs
 800401c:	4613      	movcs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d019      	beq.n	800405a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	4413      	add	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	6939      	ldr	r1, [r7, #16]
 8004034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004036:	f001 fe25 	bl	8005c84 <memcpy>
    NumBytesRead += NumBytesRem;
 800403a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	4413      	add	r3, r2
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4413      	add	r3, r2
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4413      	add	r3, r2
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004064:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004068:	4618      	mov	r0, r3
 800406a:	3730      	adds	r7, #48	; 0x30
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20012e5c 	.word	0x20012e5c

08004074 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	3360      	adds	r3, #96	; 0x60
 8004090:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004092:	4413      	add	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d029      	beq.n	80040f2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d82e      	bhi.n	8004100 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d013      	beq.n	80040d2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80040aa:	e029      	b.n	8004100 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80040ac:	6978      	ldr	r0, [r7, #20]
 80040ae:	f7ff feb2 	bl	8003e16 <_GetAvailWriteSpace>
 80040b2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d202      	bcs.n	80040c2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80040c0:	e021      	b.n	8004106 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	69b9      	ldr	r1, [r7, #24]
 80040ca:	6978      	ldr	r0, [r7, #20]
 80040cc:	f7ff fe5b 	bl	8003d86 <_WriteNoCheck>
    break;
 80040d0:	e019      	b.n	8004106 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80040d2:	6978      	ldr	r0, [r7, #20]
 80040d4:	f7ff fe9f 	bl	8003e16 <_GetAvailWriteSpace>
 80040d8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4293      	cmp	r3, r2
 80040e0:	bf28      	it	cs
 80040e2:	4613      	movcs	r3, r2
 80040e4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	69b9      	ldr	r1, [r7, #24]
 80040ea:	6978      	ldr	r0, [r7, #20]
 80040ec:	f7ff fe4b 	bl	8003d86 <_WriteNoCheck>
    break;
 80040f0:	e009      	b.n	8004106 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	69b9      	ldr	r1, [r7, #24]
 80040f6:	6978      	ldr	r0, [r7, #20]
 80040f8:	f7ff fde8 	bl	8003ccc <_WriteBlocking>
 80040fc:	61f8      	str	r0, [r7, #28]
    break;
 80040fe:	e002      	b.n	8004106 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004100:	2300      	movs	r3, #0
 8004102:	61fb      	str	r3, [r7, #28]
    break;
 8004104:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004106:	69fb      	ldr	r3, [r7, #28]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20012e5c 	.word	0x20012e5c

08004114 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004120:	4b0e      	ldr	r3, [pc, #56]	; (800415c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800412e:	f7ff fd75 	bl	8003c1c <_DoInit>
  SEGGER_RTT_LOCK();
 8004132:	f3ef 8311 	mrs	r3, BASEPRI
 8004136:	f04f 0120 	mov.w	r1, #32
 800413a:	f381 8811 	msr	BASEPRI, r1
 800413e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff ff95 	bl	8004074 <SEGGER_RTT_WriteDownBufferNoLock>
 800414a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004152:	697b      	ldr	r3, [r7, #20]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20012e5c 	.word	0x20012e5c

08004160 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <SEGGER_RTT_AllocUpBuffer+0x20>
 800417c:	f7ff fd4e 	bl	8003c1c <_DoInit>
  SEGGER_RTT_LOCK();
 8004180:	f3ef 8311 	mrs	r3, BASEPRI
 8004184:	f04f 0120 	mov.w	r1, #32
 8004188:	f381 8811 	msr	BASEPRI, r1
 800418c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800418e:	4b35      	ldr	r3, [pc, #212]	; (8004264 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004190:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004196:	6939      	ldr	r1, [r7, #16]
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	4613      	mov	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	440b      	add	r3, r1
 80041a6:	3304      	adds	r3, #4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3301      	adds	r3, #1
 80041b2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	dbeb      	blt.n	8004196 <SEGGER_RTT_AllocUpBuffer+0x36>
 80041be:	e000      	b.n	80041c2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80041c0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	da3f      	bge.n	800424c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80041cc:	6939      	ldr	r1, [r7, #16]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	4613      	mov	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	440b      	add	r3, r1
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80041e0:	6939      	ldr	r1, [r7, #16]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	4613      	mov	r3, r2
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	4413      	add	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	440b      	add	r3, r1
 80041f0:	3304      	adds	r3, #4
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80041f6:	6939      	ldr	r1, [r7, #16]
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	4613      	mov	r3, r2
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	4413      	add	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	440b      	add	r3, r1
 8004204:	3320      	adds	r3, #32
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800420a:	6939      	ldr	r1, [r7, #16]
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	4613      	mov	r3, r2
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	440b      	add	r3, r1
 8004218:	3328      	adds	r3, #40	; 0x28
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800421e:	6939      	ldr	r1, [r7, #16]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	4613      	mov	r3, r2
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	4413      	add	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	440b      	add	r3, r1
 800422c:	3324      	adds	r3, #36	; 0x24
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004232:	6939      	ldr	r1, [r7, #16]
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	4613      	mov	r3, r2
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	4413      	add	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	440b      	add	r3, r1
 8004240:	332c      	adds	r3, #44	; 0x2c
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004246:	f3bf 8f5f 	dmb	sy
 800424a:	e002      	b.n	8004252 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800424c:	f04f 33ff 	mov.w	r3, #4294967295
 8004250:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004258:	69fb      	ldr	r3, [r7, #28]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20012e5c 	.word	0x20012e5c

08004268 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004276:	4b33      	ldr	r3, [pc, #204]	; (8004344 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004284:	f7ff fcca 	bl	8003c1c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004288:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800428a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	461a      	mov	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4293      	cmp	r3, r2
 8004296:	d24d      	bcs.n	8004334 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004298:	f3ef 8311 	mrs	r3, BASEPRI
 800429c:	f04f 0120 	mov.w	r1, #32
 80042a0:	f381 8811 	msr	BASEPRI, r1
 80042a4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d031      	beq.n	8004310 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80042ac:	6979      	ldr	r1, [r7, #20]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4613      	mov	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	440b      	add	r3, r1
 80042ba:	3360      	adds	r3, #96	; 0x60
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80042c0:	6979      	ldr	r1, [r7, #20]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4613      	mov	r3, r2
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	440b      	add	r3, r1
 80042ce:	3364      	adds	r3, #100	; 0x64
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80042d4:	6979      	ldr	r1, [r7, #20]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	440b      	add	r3, r1
 80042e2:	3368      	adds	r3, #104	; 0x68
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80042e8:	6979      	ldr	r1, [r7, #20]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4613      	mov	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4413      	add	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	440b      	add	r3, r1
 80042f6:	3370      	adds	r3, #112	; 0x70
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80042fc:	6979      	ldr	r1, [r7, #20]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	440b      	add	r3, r1
 800430a:	336c      	adds	r3, #108	; 0x6c
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004310:	6979      	ldr	r1, [r7, #20]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4613      	mov	r3, r2
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	4413      	add	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	440b      	add	r3, r1
 800431e:	3374      	adds	r3, #116	; 0x74
 8004320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004322:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004324:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	e002      	b.n	800433a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004334:	f04f 33ff 	mov.w	r3, #4294967295
 8004338:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800433a:	69fb      	ldr	r3, [r7, #28]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20012e5c 	.word	0x20012e5c

08004348 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004358:	e002      	b.n	8004360 <_EncodeStr+0x18>
    Len++;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3301      	adds	r3, #1
 800435e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4413      	add	r3, r2
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f6      	bne.n	800435a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	d901      	bls.n	8004378 <_EncodeStr+0x30>
    Len = Limit;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2bfe      	cmp	r3, #254	; 0xfe
 800437c:	d806      	bhi.n	800438c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	60fa      	str	r2, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	e011      	b.n	80043b0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	60fa      	str	r2, [r7, #12]
 8004392:	22ff      	movs	r2, #255	; 0xff
 8004394:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	60fa      	str	r2, [r7, #12]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	0a19      	lsrs	r1, r3, #8
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	60fa      	str	r2, [r7, #12]
 80043ac:	b2ca      	uxtb	r2, r1
 80043ae:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80043b4:	e00a      	b.n	80043cc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	1c53      	adds	r3, r2, #1
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1c59      	adds	r1, r3, #1
 80043c0:	60f9      	str	r1, [r7, #12]
 80043c2:	7812      	ldrb	r2, [r2, #0]
 80043c4:	701a      	strb	r2, [r3, #0]
    n++;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	3301      	adds	r3, #1
 80043ca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d3f0      	bcc.n	80043b6 <_EncodeStr+0x6e>
  }
  return pPayload;
 80043d4:	68fb      	ldr	r3, [r7, #12]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3304      	adds	r3, #4
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004402:	4b36      	ldr	r3, [pc, #216]	; (80044dc <_HandleIncomingPacket+0xe0>)
 8004404:	7e1b      	ldrb	r3, [r3, #24]
 8004406:	4618      	mov	r0, r3
 8004408:	1cfb      	adds	r3, r7, #3
 800440a:	2201      	movs	r2, #1
 800440c:	4619      	mov	r1, r3
 800440e:	f7ff fdab 	bl	8003f68 <SEGGER_RTT_ReadNoLock>
 8004412:	4603      	mov	r3, r0
 8004414:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	dd54      	ble.n	80044c6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	2b80      	cmp	r3, #128	; 0x80
 8004420:	d032      	beq.n	8004488 <_HandleIncomingPacket+0x8c>
 8004422:	2b80      	cmp	r3, #128	; 0x80
 8004424:	dc42      	bgt.n	80044ac <_HandleIncomingPacket+0xb0>
 8004426:	2b07      	cmp	r3, #7
 8004428:	dc16      	bgt.n	8004458 <_HandleIncomingPacket+0x5c>
 800442a:	2b00      	cmp	r3, #0
 800442c:	dd3e      	ble.n	80044ac <_HandleIncomingPacket+0xb0>
 800442e:	3b01      	subs	r3, #1
 8004430:	2b06      	cmp	r3, #6
 8004432:	d83b      	bhi.n	80044ac <_HandleIncomingPacket+0xb0>
 8004434:	a201      	add	r2, pc, #4	; (adr r2, 800443c <_HandleIncomingPacket+0x40>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	0800445f 	.word	0x0800445f
 8004440:	08004465 	.word	0x08004465
 8004444:	0800446b 	.word	0x0800446b
 8004448:	08004471 	.word	0x08004471
 800444c:	08004477 	.word	0x08004477
 8004450:	0800447d 	.word	0x0800447d
 8004454:	08004483 	.word	0x08004483
 8004458:	2b7f      	cmp	r3, #127	; 0x7f
 800445a:	d036      	beq.n	80044ca <_HandleIncomingPacket+0xce>
 800445c:	e026      	b.n	80044ac <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800445e:	f000 fe3d 	bl	80050dc <SEGGER_SYSVIEW_Start>
      break;
 8004462:	e037      	b.n	80044d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004464:	f000 fef6 	bl	8005254 <SEGGER_SYSVIEW_Stop>
      break;
 8004468:	e034      	b.n	80044d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800446a:	f001 f8cf 	bl	800560c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800446e:	e031      	b.n	80044d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004470:	f001 f894 	bl	800559c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004474:	e02e      	b.n	80044d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004476:	f000 ff13 	bl	80052a0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800447a:	e02b      	b.n	80044d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800447c:	f001 faf2 	bl	8005a64 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004480:	e028      	b.n	80044d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004482:	f001 fad1 	bl	8005a28 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004486:	e025      	b.n	80044d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <_HandleIncomingPacket+0xe0>)
 800448a:	7e1b      	ldrb	r3, [r3, #24]
 800448c:	4618      	mov	r0, r3
 800448e:	1cfb      	adds	r3, r7, #3
 8004490:	2201      	movs	r2, #1
 8004492:	4619      	mov	r1, r3
 8004494:	f7ff fd68 	bl	8003f68 <SEGGER_RTT_ReadNoLock>
 8004498:	4603      	mov	r3, r0
 800449a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	dd15      	ble.n	80044ce <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f001 fa3f 	bl	8005928 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80044aa:	e010      	b.n	80044ce <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	b25b      	sxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	da0e      	bge.n	80044d2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <_HandleIncomingPacket+0xe0>)
 80044b6:	7e1b      	ldrb	r3, [r3, #24]
 80044b8:	4618      	mov	r0, r3
 80044ba:	1cfb      	adds	r3, r7, #3
 80044bc:	2201      	movs	r2, #1
 80044be:	4619      	mov	r1, r3
 80044c0:	f7ff fd52 	bl	8003f68 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80044c4:	e005      	b.n	80044d2 <_HandleIncomingPacket+0xd6>
    }
  }
 80044c6:	bf00      	nop
 80044c8:	e004      	b.n	80044d4 <_HandleIncomingPacket+0xd8>
      break;
 80044ca:	bf00      	nop
 80044cc:	e002      	b.n	80044d4 <_HandleIncomingPacket+0xd8>
      break;
 80044ce:	bf00      	nop
 80044d0:	e000      	b.n	80044d4 <_HandleIncomingPacket+0xd8>
      break;
 80044d2:	bf00      	nop
}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	2001431c 	.word	0x2001431c

080044e0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08c      	sub	sp, #48	; 0x30
 80044e4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80044e6:	2301      	movs	r3, #1
 80044e8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80044ea:	1d3b      	adds	r3, r7, #4
 80044ec:	3301      	adds	r3, #1
 80044ee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f4:	4b32      	ldr	r3, [pc, #200]	; (80045c0 <_TrySendOverflowPacket+0xe0>)
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fa:	e00b      	b.n	8004514 <_TrySendOverflowPacket+0x34>
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	1c59      	adds	r1, r3, #1
 8004504:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004506:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	09db      	lsrs	r3, r3, #7
 8004512:	62bb      	str	r3, [r7, #40]	; 0x28
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	2b7f      	cmp	r3, #127	; 0x7f
 8004518:	d8f0      	bhi.n	80044fc <_TrySendOverflowPacket+0x1c>
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800452a:	4b26      	ldr	r3, [pc, #152]	; (80045c4 <_TrySendOverflowPacket+0xe4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004530:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <_TrySendOverflowPacket+0xe0>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	623b      	str	r3, [r7, #32]
 8004542:	e00b      	b.n	800455c <_TrySendOverflowPacket+0x7c>
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	b2da      	uxtb	r2, r3
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	1c59      	adds	r1, r3, #1
 800454c:	6279      	str	r1, [r7, #36]	; 0x24
 800454e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	09db      	lsrs	r3, r3, #7
 800455a:	623b      	str	r3, [r7, #32]
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	2b7f      	cmp	r3, #127	; 0x7f
 8004560:	d8f0      	bhi.n	8004544 <_TrySendOverflowPacket+0x64>
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	627a      	str	r2, [r7, #36]	; 0x24
 8004568:	6a3a      	ldr	r2, [r7, #32]
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004572:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <_TrySendOverflowPacket+0xe0>)
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	4618      	mov	r0, r3
 8004578:	1d3b      	adds	r3, r7, #4
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	461a      	mov	r2, r3
 8004580:	1d3b      	adds	r3, r7, #4
 8004582:	4619      	mov	r1, r3
 8004584:	f7fb fe44 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004588:	4603      	mov	r3, r0
 800458a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800458c:	f7ff fabc 	bl	8003b08 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004596:	4a0a      	ldr	r2, [pc, #40]	; (80045c0 <_TrySendOverflowPacket+0xe0>)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800459c:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <_TrySendOverflowPacket+0xe0>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <_TrySendOverflowPacket+0xe0>)
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	e004      	b.n	80045b4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <_TrySendOverflowPacket+0xe0>)
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	3301      	adds	r3, #1
 80045b0:	4a03      	ldr	r2, [pc, #12]	; (80045c0 <_TrySendOverflowPacket+0xe0>)
 80045b2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80045b4:	693b      	ldr	r3, [r7, #16]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3730      	adds	r7, #48	; 0x30
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	2001431c 	.word	0x2001431c
 80045c4:	e0001004 	.word	0xe0001004

080045c8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80045d4:	4b6d      	ldr	r3, [pc, #436]	; (800478c <_SendPacket+0x1c4>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d010      	beq.n	80045fe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80045dc:	4b6b      	ldr	r3, [pc, #428]	; (800478c <_SendPacket+0x1c4>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80a5 	beq.w	8004730 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80045e6:	4b69      	ldr	r3, [pc, #420]	; (800478c <_SendPacket+0x1c4>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d109      	bne.n	8004602 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80045ee:	f7ff ff77 	bl	80044e0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80045f2:	4b66      	ldr	r3, [pc, #408]	; (800478c <_SendPacket+0x1c4>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	f040 809c 	bne.w	8004734 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80045fc:	e001      	b.n	8004602 <_SendPacket+0x3a>
    goto Send;
 80045fe:	bf00      	nop
 8004600:	e000      	b.n	8004604 <_SendPacket+0x3c>
Send:
 8004602:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b1f      	cmp	r3, #31
 8004608:	d809      	bhi.n	800461e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800460a:	4b60      	ldr	r3, [pc, #384]	; (800478c <_SendPacket+0x1c4>)
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 808d 	bne.w	8004738 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b17      	cmp	r3, #23
 8004622:	d807      	bhi.n	8004634 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3b01      	subs	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	e03d      	b.n	80046b0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b7f      	cmp	r3, #127	; 0x7f
 8004640:	d912      	bls.n	8004668 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	09da      	lsrs	r2, r3, #7
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3b01      	subs	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	3a01      	subs	r2, #1
 800465a:	60fa      	str	r2, [r7, #12]
 800465c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	e006      	b.n	8004676 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3b01      	subs	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b7f      	cmp	r3, #127	; 0x7f
 800467a:	d912      	bls.n	80046a2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	09da      	lsrs	r2, r3, #7
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	3b01      	subs	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	3a01      	subs	r2, #1
 8004694:	60fa      	str	r2, [r7, #12]
 8004696:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800469a:	b2da      	uxtb	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	e006      	b.n	80046b0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80046b0:	4b37      	ldr	r3, [pc, #220]	; (8004790 <_SendPacket+0x1c8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80046b6:	4b35      	ldr	r3, [pc, #212]	; (800478c <_SendPacket+0x1c4>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	623b      	str	r3, [r7, #32]
 80046c8:	e00b      	b.n	80046e2 <_SendPacket+0x11a>
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	1c59      	adds	r1, r3, #1
 80046d2:	6279      	str	r1, [r7, #36]	; 0x24
 80046d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	09db      	lsrs	r3, r3, #7
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	2b7f      	cmp	r3, #127	; 0x7f
 80046e6:	d8f0      	bhi.n	80046ca <_SendPacket+0x102>
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	627a      	str	r2, [r7, #36]	; 0x24
 80046ee:	6a3a      	ldr	r2, [r7, #32]
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80046f8:	4b24      	ldr	r3, [pc, #144]	; (800478c <_SendPacket+0x1c4>)
 80046fa:	785b      	ldrb	r3, [r3, #1]
 80046fc:	4618      	mov	r0, r3
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	461a      	mov	r2, r3
 8004706:	68f9      	ldr	r1, [r7, #12]
 8004708:	f7fb fd82 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800470c:	4603      	mov	r3, r0
 800470e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004710:	f7ff f9fa 	bl	8003b08 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800471a:	4a1c      	ldr	r2, [pc, #112]	; (800478c <_SendPacket+0x1c4>)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	60d3      	str	r3, [r2, #12]
 8004720:	e00b      	b.n	800473a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004722:	4b1a      	ldr	r3, [pc, #104]	; (800478c <_SendPacket+0x1c4>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	3301      	adds	r3, #1
 8004728:	b2da      	uxtb	r2, r3
 800472a:	4b18      	ldr	r3, [pc, #96]	; (800478c <_SendPacket+0x1c4>)
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	e004      	b.n	800473a <_SendPacket+0x172>
    goto SendDone;
 8004730:	bf00      	nop
 8004732:	e002      	b.n	800473a <_SendPacket+0x172>
      goto SendDone;
 8004734:	bf00      	nop
 8004736:	e000      	b.n	800473a <_SendPacket+0x172>
      goto SendDone;
 8004738:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800473a:	4b14      	ldr	r3, [pc, #80]	; (800478c <_SendPacket+0x1c4>)
 800473c:	7e1b      	ldrb	r3, [r3, #24]
 800473e:	4619      	mov	r1, r3
 8004740:	4a14      	ldr	r2, [pc, #80]	; (8004794 <_SendPacket+0x1cc>)
 8004742:	460b      	mov	r3, r1
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	440b      	add	r3, r1
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4413      	add	r3, r2
 800474c:	336c      	adds	r3, #108	; 0x6c
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	4b0e      	ldr	r3, [pc, #56]	; (800478c <_SendPacket+0x1c4>)
 8004752:	7e1b      	ldrb	r3, [r3, #24]
 8004754:	4618      	mov	r0, r3
 8004756:	490f      	ldr	r1, [pc, #60]	; (8004794 <_SendPacket+0x1cc>)
 8004758:	4603      	mov	r3, r0
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	4403      	add	r3, r0
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	440b      	add	r3, r1
 8004762:	3370      	adds	r3, #112	; 0x70
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d00b      	beq.n	8004782 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800476a:	4b08      	ldr	r3, [pc, #32]	; (800478c <_SendPacket+0x1c4>)
 800476c:	789b      	ldrb	r3, [r3, #2]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d107      	bne.n	8004782 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <_SendPacket+0x1c4>)
 8004774:	2201      	movs	r2, #1
 8004776:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004778:	f7ff fe40 	bl	80043fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800477c:	4b03      	ldr	r3, [pc, #12]	; (800478c <_SendPacket+0x1c4>)
 800477e:	2200      	movs	r2, #0
 8004780:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004782:	bf00      	nop
 8004784:	3728      	adds	r7, #40	; 0x28
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	2001431c 	.word	0x2001431c
 8004790:	e0001004 	.word	0xe0001004
 8004794:	20012e5c 	.word	0x20012e5c

08004798 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	; 0x28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	3301      	adds	r3, #1
 80047ae:	2b80      	cmp	r3, #128	; 0x80
 80047b0:	d80a      	bhi.n	80047c8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	1c59      	adds	r1, r3, #1
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6051      	str	r1, [r2, #4]
 80047bc:	78fa      	ldrb	r2, [r7, #3]
 80047be:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b80      	cmp	r3, #128	; 0x80
 80047ce:	d15a      	bne.n	8004886 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	623b      	str	r3, [r7, #32]
 80047f0:	e00b      	b.n	800480a <_StoreChar+0x72>
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	1c59      	adds	r1, r3, #1
 80047fa:	6279      	str	r1, [r7, #36]	; 0x24
 80047fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	09db      	lsrs	r3, r3, #7
 8004808:	623b      	str	r3, [r7, #32]
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	2b7f      	cmp	r3, #127	; 0x7f
 800480e:	d8f0      	bhi.n	80047f2 <_StoreChar+0x5a>
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	627a      	str	r2, [r7, #36]	; 0x24
 8004816:	6a3a      	ldr	r2, [r7, #32]
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	61fb      	str	r3, [r7, #28]
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	e00b      	b.n	8004842 <_StoreChar+0xaa>
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	1c59      	adds	r1, r3, #1
 8004832:	61f9      	str	r1, [r7, #28]
 8004834:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	09db      	lsrs	r3, r3, #7
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b7f      	cmp	r3, #127	; 0x7f
 8004846:	d8f0      	bhi.n	800482a <_StoreChar+0x92>
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	61fa      	str	r2, [r7, #28]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	221a      	movs	r2, #26
 800485e:	6939      	ldr	r1, [r7, #16]
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff feb1 	bl	80045c8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fdb9 	bl	80043e2 <_PreparePacket>
 8004870:	4602      	mov	r2, r0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]
  }
}
 8004886:	bf00      	nop
 8004888:	3728      	adds	r7, #40	; 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	; 0x28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80048a2:	2301      	movs	r3, #1
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80048a6:	2301      	movs	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80048aa:	e007      	b.n	80048bc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	623b      	str	r3, [r7, #32]
    Width++;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3301      	adds	r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80048bc:	6a3a      	ldr	r2, [r7, #32]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d2f3      	bcs.n	80048ac <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d901      	bls.n	80048d0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80048d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d11f      	bne.n	800491a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01c      	beq.n	800491a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80048e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <_PrintUnsigned+0x66>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <_PrintUnsigned+0x66>
        c = '0';
 80048f0:	2330      	movs	r3, #48	; 0x30
 80048f2:	76fb      	strb	r3, [r7, #27]
 80048f4:	e001      	b.n	80048fa <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80048f6:	2320      	movs	r3, #32
 80048f8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048fa:	e007      	b.n	800490c <_PrintUnsigned+0x7c>
        FieldWidth--;
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	3b01      	subs	r3, #1
 8004900:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004902:	7efb      	ldrb	r3, [r7, #27]
 8004904:	4619      	mov	r1, r3
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f7ff ff46 	bl	8004798 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <_PrintUnsigned+0x8a>
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	429a      	cmp	r2, r3
 8004918:	d3f0      	bcc.n	80048fc <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d903      	bls.n	8004928 <_PrintUnsigned+0x98>
      NumDigits--;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	3b01      	subs	r3, #1
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	e009      	b.n	800493c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d200      	bcs.n	800493c <_PrintUnsigned+0xac>
        break;
 800493a:	e005      	b.n	8004948 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004946:	e7e8      	b.n	800491a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004960:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <_PrintUnsigned+0x128>)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	4413      	add	r3, r2
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	4619      	mov	r1, r3
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff ff14 	bl	8004798 <_StoreChar>
    Digit /= Base;
 8004970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e3      	bne.n	8004948 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d011      	beq.n	80049ae <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00e      	beq.n	80049ae <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004990:	e006      	b.n	80049a0 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	3b01      	subs	r3, #1
 8004996:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004998:	2120      	movs	r1, #32
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7ff fefc 	bl	8004798 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <_PrintUnsigned+0x11e>
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3f1      	bcc.n	8004992 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80049ae:	bf00      	nop
 80049b0:	3728      	adds	r7, #40	; 0x28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	08005e14 	.word	0x08005e14

080049bc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bfb8      	it	lt
 80049d0:	425b      	neglt	r3, r3
 80049d2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80049d4:	2301      	movs	r3, #1
 80049d6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80049d8:	e007      	b.n	80049ea <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	fb92 f3f3 	sdiv	r3, r2, r3
 80049e2:	613b      	str	r3, [r7, #16]
    Width++;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	3301      	adds	r3, #1
 80049e8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	daf3      	bge.n	80049da <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d901      	bls.n	80049fe <_PrintInt+0x42>
    Width = NumDigits;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <_PrintInt+0x5e>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	db04      	blt.n	8004a14 <_PrintInt+0x58>
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <_PrintInt+0x5e>
    FieldWidth--;
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <_PrintInt+0x6e>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d016      	beq.n	8004a58 <_PrintInt+0x9c>
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d111      	bne.n	8004a58 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00e      	beq.n	8004a58 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a3a:	e006      	b.n	8004a4a <_PrintInt+0x8e>
        FieldWidth--;
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004a42:	2120      	movs	r1, #32
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff fea7 	bl	8004798 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <_PrintInt+0x9c>
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d3f1      	bcc.n	8004a3c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	da07      	bge.n	8004a6e <_PrintInt+0xb2>
    v = -v;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	425b      	negs	r3, r3
 8004a62:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004a64:	212d      	movs	r1, #45	; 0x2d
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff fe96 	bl	8004798 <_StoreChar>
 8004a6c:	e008      	b.n	8004a80 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004a78:	212b      	movs	r1, #43	; 0x2b
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff fe8c 	bl	8004798 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d019      	beq.n	8004abe <_PrintInt+0x102>
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d114      	bne.n	8004abe <_PrintInt+0x102>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d111      	bne.n	8004abe <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00e      	beq.n	8004abe <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004aa0:	e006      	b.n	8004ab0 <_PrintInt+0xf4>
        FieldWidth--;
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004aa8:	2130      	movs	r1, #48	; 0x30
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff fe74 	bl	8004798 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <_PrintInt+0x102>
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d3f1      	bcc.n	8004aa2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff fedf 	bl	8004890 <_PrintUnsigned>
}
 8004ad2:	bf00      	nop
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b098      	sub	sp, #96	; 0x60
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8004aec:	f04f 0120 	mov.w	r1, #32
 8004af0:	f381 8811 	msr	BASEPRI, r1
 8004af4:	633b      	str	r3, [r7, #48]	; 0x30
 8004af6:	48b7      	ldr	r0, [pc, #732]	; (8004dd4 <_VPrintTarget+0x2f8>)
 8004af8:	f7ff fc73 	bl	80043e2 <_PreparePacket>
 8004afc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004afe:	4bb5      	ldr	r3, [pc, #724]	; (8004dd4 <_VPrintTarget+0x2f8>)
 8004b00:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004b02:	2300      	movs	r3, #0
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004b22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 8183 	beq.w	8004e32 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b30:	2b25      	cmp	r3, #37	; 0x25
 8004b32:	f040 8170 	bne.w	8004e16 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004b36:	2300      	movs	r3, #0
 8004b38:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004b46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b4a:	3b23      	subs	r3, #35	; 0x23
 8004b4c:	2b0d      	cmp	r3, #13
 8004b4e:	d83f      	bhi.n	8004bd0 <_VPrintTarget+0xf4>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <_VPrintTarget+0x7c>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004bc1 	.word	0x08004bc1
 8004b5c:	08004bd1 	.word	0x08004bd1
 8004b60:	08004bd1 	.word	0x08004bd1
 8004b64:	08004bd1 	.word	0x08004bd1
 8004b68:	08004bd1 	.word	0x08004bd1
 8004b6c:	08004bd1 	.word	0x08004bd1
 8004b70:	08004bd1 	.word	0x08004bd1
 8004b74:	08004bd1 	.word	0x08004bd1
 8004b78:	08004bb1 	.word	0x08004bb1
 8004b7c:	08004bd1 	.word	0x08004bd1
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004bd1 	.word	0x08004bd1
 8004b88:	08004bd1 	.word	0x08004bd1
 8004b8c:	08004ba1 	.word	0x08004ba1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	e01a      	b.n	8004bd6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba2:	f043 0302 	orr.w	r3, r3, #2
 8004ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	e012      	b.n	8004bd6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb2:	f043 0304 	orr.w	r3, r3, #4
 8004bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	e00a      	b.n	8004bd6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc2:	f043 0308 	orr.w	r3, r3, #8
 8004bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	e002      	b.n	8004bd6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8004bd4:	bf00      	nop
        }
      } while (v);
 8004bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1b0      	bne.n	8004b3e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004be8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bec:	2b2f      	cmp	r3, #47	; 0x2f
 8004bee:	d912      	bls.n	8004c16 <_VPrintTarget+0x13a>
 8004bf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bf4:	2b39      	cmp	r3, #57	; 0x39
 8004bf6:	d80e      	bhi.n	8004c16 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004bfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c0e:	4413      	add	r3, r2
 8004c10:	3b30      	subs	r3, #48	; 0x30
 8004c12:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004c14:	e7e4      	b.n	8004be0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004c16:	2300      	movs	r3, #0
 8004c18:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004c22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c26:	2b2e      	cmp	r3, #46	; 0x2e
 8004c28:	d11d      	bne.n	8004c66 <_VPrintTarget+0x18a>
        sFormat++;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004c38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c3c:	2b2f      	cmp	r3, #47	; 0x2f
 8004c3e:	d912      	bls.n	8004c66 <_VPrintTarget+0x18a>
 8004c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c44:	2b39      	cmp	r3, #57	; 0x39
 8004c46:	d80e      	bhi.n	8004c66 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004c4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c5e:	4413      	add	r3, r2
 8004c60:	3b30      	subs	r3, #48	; 0x30
 8004c62:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004c64:	e7e4      	b.n	8004c30 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004c6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c72:	2b6c      	cmp	r3, #108	; 0x6c
 8004c74:	d003      	beq.n	8004c7e <_VPrintTarget+0x1a2>
 8004c76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c7a:	2b68      	cmp	r3, #104	; 0x68
 8004c7c:	d107      	bne.n	8004c8e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004c8c:	e7ef      	b.n	8004c6e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c92:	2b25      	cmp	r3, #37	; 0x25
 8004c94:	f000 80b3 	beq.w	8004dfe <_VPrintTarget+0x322>
 8004c98:	2b25      	cmp	r3, #37	; 0x25
 8004c9a:	f2c0 80b7 	blt.w	8004e0c <_VPrintTarget+0x330>
 8004c9e:	2b78      	cmp	r3, #120	; 0x78
 8004ca0:	f300 80b4 	bgt.w	8004e0c <_VPrintTarget+0x330>
 8004ca4:	2b58      	cmp	r3, #88	; 0x58
 8004ca6:	f2c0 80b1 	blt.w	8004e0c <_VPrintTarget+0x330>
 8004caa:	3b58      	subs	r3, #88	; 0x58
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	f200 80ad 	bhi.w	8004e0c <_VPrintTarget+0x330>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <_VPrintTarget+0x1dc>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004daf 	.word	0x08004daf
 8004cbc:	08004e0d 	.word	0x08004e0d
 8004cc0:	08004e0d 	.word	0x08004e0d
 8004cc4:	08004e0d 	.word	0x08004e0d
 8004cc8:	08004e0d 	.word	0x08004e0d
 8004ccc:	08004e0d 	.word	0x08004e0d
 8004cd0:	08004e0d 	.word	0x08004e0d
 8004cd4:	08004e0d 	.word	0x08004e0d
 8004cd8:	08004e0d 	.word	0x08004e0d
 8004cdc:	08004e0d 	.word	0x08004e0d
 8004ce0:	08004e0d 	.word	0x08004e0d
 8004ce4:	08004d3d 	.word	0x08004d3d
 8004ce8:	08004d63 	.word	0x08004d63
 8004cec:	08004e0d 	.word	0x08004e0d
 8004cf0:	08004e0d 	.word	0x08004e0d
 8004cf4:	08004e0d 	.word	0x08004e0d
 8004cf8:	08004e0d 	.word	0x08004e0d
 8004cfc:	08004e0d 	.word	0x08004e0d
 8004d00:	08004e0d 	.word	0x08004e0d
 8004d04:	08004e0d 	.word	0x08004e0d
 8004d08:	08004e0d 	.word	0x08004e0d
 8004d0c:	08004e0d 	.word	0x08004e0d
 8004d10:	08004e0d 	.word	0x08004e0d
 8004d14:	08004e0d 	.word	0x08004e0d
 8004d18:	08004dd9 	.word	0x08004dd9
 8004d1c:	08004e0d 	.word	0x08004e0d
 8004d20:	08004e0d 	.word	0x08004e0d
 8004d24:	08004e0d 	.word	0x08004e0d
 8004d28:	08004e0d 	.word	0x08004e0d
 8004d2c:	08004d89 	.word	0x08004d89
 8004d30:	08004e0d 	.word	0x08004e0d
 8004d34:	08004e0d 	.word	0x08004e0d
 8004d38:	08004daf 	.word	0x08004daf
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	1d19      	adds	r1, r3, #4
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6011      	str	r1, [r2, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004d50:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004d54:	f107 0314 	add.w	r3, r7, #20
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fd1c 	bl	8004798 <_StoreChar>
        break;
 8004d60:	e055      	b.n	8004e0e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	1d19      	adds	r1, r3, #4
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6011      	str	r1, [r2, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004d70:	f107 0014 	add.w	r0, r7, #20
 8004d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d7e:	220a      	movs	r2, #10
 8004d80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d82:	f7ff fe1b 	bl	80049bc <_PrintInt>
        break;
 8004d86:	e042      	b.n	8004e0e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	1d19      	adds	r1, r3, #4
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6011      	str	r1, [r2, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004d96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d98:	f107 0014 	add.w	r0, r7, #20
 8004d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da6:	220a      	movs	r2, #10
 8004da8:	f7ff fd72 	bl	8004890 <_PrintUnsigned>
        break;
 8004dac:	e02f      	b.n	8004e0e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	1d19      	adds	r1, r3, #4
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6011      	str	r1, [r2, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004dbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004dbe:	f107 0014 	add.w	r0, r7, #20
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	2210      	movs	r2, #16
 8004dce:	f7ff fd5f 	bl	8004890 <_PrintUnsigned>
        break;
 8004dd2:	e01c      	b.n	8004e0e <_VPrintTarget+0x332>
 8004dd4:	2001434c 	.word	0x2001434c
      case 'p':
        v = va_arg(*pParamList, int);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	1d19      	adds	r1, r3, #4
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6011      	str	r1, [r2, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004de6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004de8:	f107 0014 	add.w	r0, r7, #20
 8004dec:	2300      	movs	r3, #0
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	2308      	movs	r3, #8
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	2308      	movs	r3, #8
 8004df6:	2210      	movs	r2, #16
 8004df8:	f7ff fd4a 	bl	8004890 <_PrintUnsigned>
        break;
 8004dfc:	e007      	b.n	8004e0e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004dfe:	f107 0314 	add.w	r3, r7, #20
 8004e02:	2125      	movs	r1, #37	; 0x25
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fcc7 	bl	8004798 <_StoreChar>
        break;
 8004e0a:	e000      	b.n	8004e0e <_VPrintTarget+0x332>
      default:
        break;
 8004e0c:	bf00      	nop
      }
      sFormat++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e007      	b.n	8004e26 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004e16:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004e1a:	f107 0314 	add.w	r3, r7, #20
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fcb9 	bl	8004798 <_StoreChar>
    }
  } while (*sFormat);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f47f ae72 	bne.w	8004b14 <_VPrintTarget+0x38>
 8004e30:	e000      	b.n	8004e34 <_VPrintTarget+0x358>
      break;
 8004e32:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d041      	beq.n	8004ebe <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	643b      	str	r3, [r7, #64]	; 0x40
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4a:	e00b      	b.n	8004e64 <_VPrintTarget+0x388>
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e52:	1c59      	adds	r1, r3, #1
 8004e54:	6439      	str	r1, [r7, #64]	; 0x40
 8004e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e60:	09db      	lsrs	r3, r3, #7
 8004e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e66:	2b7f      	cmp	r3, #127	; 0x7f
 8004e68:	d8f0      	bhi.n	8004e4c <_VPrintTarget+0x370>
 8004e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	643a      	str	r2, [r7, #64]	; 0x40
 8004e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e78:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e7e:	2300      	movs	r3, #0
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
 8004e82:	e00b      	b.n	8004e9c <_VPrintTarget+0x3c0>
 8004e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	1c59      	adds	r1, r3, #1
 8004e8c:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e98:	09db      	lsrs	r3, r3, #7
 8004e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea0:	d8f0      	bhi.n	8004e84 <_VPrintTarget+0x3a8>
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	63ba      	str	r2, [r7, #56]	; 0x38
 8004ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	69b9      	ldr	r1, [r7, #24]
 8004eb6:	221a      	movs	r2, #26
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fb85 	bl	80045c8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004ec4:	bf00      	nop
 8004ec6:	3758      	adds	r7, #88	; 0x58
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004eda:	2300      	movs	r3, #0
 8004edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ee0:	4917      	ldr	r1, [pc, #92]	; (8004f40 <SEGGER_SYSVIEW_Init+0x74>)
 8004ee2:	4818      	ldr	r0, [pc, #96]	; (8004f44 <SEGGER_SYSVIEW_Init+0x78>)
 8004ee4:	f7ff f93c 	bl	8004160 <SEGGER_RTT_AllocUpBuffer>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	4b16      	ldr	r3, [pc, #88]	; (8004f48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004eee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004ef0:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ef2:	785a      	ldrb	r2, [r3, #1]
 8004ef4:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ef6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004ef8:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004efa:	7e1b      	ldrb	r3, [r3, #24]
 8004efc:	4618      	mov	r0, r3
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2308      	movs	r3, #8
 8004f04:	4a11      	ldr	r2, [pc, #68]	; (8004f4c <SEGGER_SYSVIEW_Init+0x80>)
 8004f06:	490f      	ldr	r1, [pc, #60]	; (8004f44 <SEGGER_SYSVIEW_Init+0x78>)
 8004f08:	f7ff f9ae 	bl	8004268 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004f12:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <SEGGER_SYSVIEW_Init+0x84>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f18:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004f1a:	4a0b      	ldr	r2, [pc, #44]	; (8004f48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004f20:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004f26:	4a08      	ldr	r2, [pc, #32]	; (8004f48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004f2c:	4a06      	ldr	r2, [pc, #24]	; (8004f48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004f32:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20013314 	.word	0x20013314
 8004f44:	08005ddc 	.word	0x08005ddc
 8004f48:	2001431c 	.word	0x2001431c
 8004f4c:	20014314 	.word	0x20014314
 8004f50:	e0001004 	.word	0xe0001004

08004f54 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004f5c:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6113      	str	r3, [r2, #16]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	2001431c 	.word	0x2001431c

08004f74 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f80:	f04f 0120 	mov.w	r1, #32
 8004f84:	f381 8811 	msr	BASEPRI, r1
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	4808      	ldr	r0, [pc, #32]	; (8004fac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004f8c:	f7ff fa29 	bl	80043e2 <_PreparePacket>
 8004f90:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	68b8      	ldr	r0, [r7, #8]
 8004f98:	f7ff fb16 	bl	80045c8 <_SendPacket>
  RECORD_END();
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f383 8811 	msr	BASEPRI, r3
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	2001434c 	.word	0x2001434c

08004fb0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fba:	f3ef 8311 	mrs	r3, BASEPRI
 8004fbe:	f04f 0120 	mov.w	r1, #32
 8004fc2:	f381 8811 	msr	BASEPRI, r1
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	4816      	ldr	r0, [pc, #88]	; (8005024 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004fca:	f7ff fa0a 	bl	80043e2 <_PreparePacket>
 8004fce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	61bb      	str	r3, [r7, #24]
 8004fdc:	e00b      	b.n	8004ff6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	1c59      	adds	r1, r3, #1
 8004fe6:	61f9      	str	r1, [r7, #28]
 8004fe8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	09db      	lsrs	r3, r3, #7
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b7f      	cmp	r3, #127	; 0x7f
 8004ffa:	d8f0      	bhi.n	8004fde <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	61fa      	str	r2, [r7, #28]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	68f9      	ldr	r1, [r7, #12]
 8005010:	6938      	ldr	r0, [r7, #16]
 8005012:	f7ff fad9 	bl	80045c8 <_SendPacket>
  RECORD_END();
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f383 8811 	msr	BASEPRI, r3
}
 800501c:	bf00      	nop
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	2001434c 	.word	0x2001434c

08005028 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b08c      	sub	sp, #48	; 0x30
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005034:	f3ef 8311 	mrs	r3, BASEPRI
 8005038:	f04f 0120 	mov.w	r1, #32
 800503c:	f381 8811 	msr	BASEPRI, r1
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	4825      	ldr	r0, [pc, #148]	; (80050d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005044:	f7ff f9cd 	bl	80043e2 <_PreparePacket>
 8005048:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
 8005056:	e00b      	b.n	8005070 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	b2da      	uxtb	r2, r3
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	1c59      	adds	r1, r3, #1
 8005060:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005062:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	09db      	lsrs	r3, r3, #7
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	2b7f      	cmp	r3, #127	; 0x7f
 8005074:	d8f0      	bhi.n	8005058 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800507c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	623b      	str	r3, [r7, #32]
 800508e:	e00b      	b.n	80050a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	1c59      	adds	r1, r3, #1
 8005098:	6279      	str	r1, [r7, #36]	; 0x24
 800509a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	09db      	lsrs	r3, r3, #7
 80050a6:	623b      	str	r3, [r7, #32]
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	2b7f      	cmp	r3, #127	; 0x7f
 80050ac:	d8f0      	bhi.n	8005090 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	627a      	str	r2, [r7, #36]	; 0x24
 80050b4:	6a3a      	ldr	r2, [r7, #32]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	6979      	ldr	r1, [r7, #20]
 80050c2:	69b8      	ldr	r0, [r7, #24]
 80050c4:	f7ff fa80 	bl	80045c8 <_SendPacket>
  RECORD_END();
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f383 8811 	msr	BASEPRI, r3
}
 80050ce:	bf00      	nop
 80050d0:	3730      	adds	r7, #48	; 0x30
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	2001434c 	.word	0x2001434c

080050dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08c      	sub	sp, #48	; 0x30
 80050e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80050e2:	4b59      	ldr	r3, [pc, #356]	; (8005248 <SEGGER_SYSVIEW_Start+0x16c>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80050e8:	f3ef 8311 	mrs	r3, BASEPRI
 80050ec:	f04f 0120 	mov.w	r1, #32
 80050f0:	f381 8811 	msr	BASEPRI, r1
 80050f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80050f6:	4b54      	ldr	r3, [pc, #336]	; (8005248 <SEGGER_SYSVIEW_Start+0x16c>)
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	220a      	movs	r2, #10
 80050fc:	4953      	ldr	r1, [pc, #332]	; (800524c <SEGGER_SYSVIEW_Start+0x170>)
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fb f886 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800510a:	f7fe fcfd 	bl	8003b08 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800510e:	200a      	movs	r0, #10
 8005110:	f7ff ff30 	bl	8004f74 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005114:	f3ef 8311 	mrs	r3, BASEPRI
 8005118:	f04f 0120 	mov.w	r1, #32
 800511c:	f381 8811 	msr	BASEPRI, r1
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	484b      	ldr	r0, [pc, #300]	; (8005250 <SEGGER_SYSVIEW_Start+0x174>)
 8005124:	f7ff f95d 	bl	80043e2 <_PreparePacket>
 8005128:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005132:	4b45      	ldr	r3, [pc, #276]	; (8005248 <SEGGER_SYSVIEW_Start+0x16c>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
 8005138:	e00b      	b.n	8005152 <SEGGER_SYSVIEW_Start+0x76>
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	b2da      	uxtb	r2, r3
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	1c59      	adds	r1, r3, #1
 8005142:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005144:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	09db      	lsrs	r3, r3, #7
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	2b7f      	cmp	r3, #127	; 0x7f
 8005156:	d8f0      	bhi.n	800513a <SEGGER_SYSVIEW_Start+0x5e>
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800515e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
 800516c:	4b36      	ldr	r3, [pc, #216]	; (8005248 <SEGGER_SYSVIEW_Start+0x16c>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	623b      	str	r3, [r7, #32]
 8005172:	e00b      	b.n	800518c <SEGGER_SYSVIEW_Start+0xb0>
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	1c59      	adds	r1, r3, #1
 800517c:	6279      	str	r1, [r7, #36]	; 0x24
 800517e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	09db      	lsrs	r3, r3, #7
 800518a:	623b      	str	r3, [r7, #32]
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	2b7f      	cmp	r3, #127	; 0x7f
 8005190:	d8f0      	bhi.n	8005174 <SEGGER_SYSVIEW_Start+0x98>
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	627a      	str	r2, [r7, #36]	; 0x24
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	4b28      	ldr	r3, [pc, #160]	; (8005248 <SEGGER_SYSVIEW_Start+0x16c>)
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	61bb      	str	r3, [r7, #24]
 80051ac:	e00b      	b.n	80051c6 <SEGGER_SYSVIEW_Start+0xea>
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	1c59      	adds	r1, r3, #1
 80051b6:	61f9      	str	r1, [r7, #28]
 80051b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	09db      	lsrs	r3, r3, #7
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ca:	d8f0      	bhi.n	80051ae <SEGGER_SYSVIEW_Start+0xd2>
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	61fa      	str	r2, [r7, #28]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	e00b      	b.n	80051fe <SEGGER_SYSVIEW_Start+0x122>
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	1c59      	adds	r1, r3, #1
 80051ee:	6179      	str	r1, [r7, #20]
 80051f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	09db      	lsrs	r3, r3, #7
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b7f      	cmp	r3, #127	; 0x7f
 8005202:	d8f0      	bhi.n	80051e6 <SEGGER_SYSVIEW_Start+0x10a>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	617a      	str	r2, [r7, #20]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005214:	2218      	movs	r2, #24
 8005216:	6839      	ldr	r1, [r7, #0]
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff f9d5 	bl	80045c8 <_SendPacket>
      RECORD_END();
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005224:	4b08      	ldr	r3, [pc, #32]	; (8005248 <SEGGER_SYSVIEW_Start+0x16c>)
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <SEGGER_SYSVIEW_Start+0x16c>)
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005232:	f000 f9eb 	bl	800560c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005236:	f000 f9b1 	bl	800559c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800523a:	f000 fc13 	bl	8005a64 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800523e:	bf00      	nop
 8005240:	3730      	adds	r7, #48	; 0x30
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	2001431c 	.word	0x2001431c
 800524c:	08005e08 	.word	0x08005e08
 8005250:	2001434c 	.word	0x2001434c

08005254 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800525a:	f3ef 8311 	mrs	r3, BASEPRI
 800525e:	f04f 0120 	mov.w	r1, #32
 8005262:	f381 8811 	msr	BASEPRI, r1
 8005266:	607b      	str	r3, [r7, #4]
 8005268:	480b      	ldr	r0, [pc, #44]	; (8005298 <SEGGER_SYSVIEW_Stop+0x44>)
 800526a:	f7ff f8ba 	bl	80043e2 <_PreparePacket>
 800526e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <SEGGER_SYSVIEW_Stop+0x48>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005278:	220b      	movs	r2, #11
 800527a:	6839      	ldr	r1, [r7, #0]
 800527c:	6838      	ldr	r0, [r7, #0]
 800527e:	f7ff f9a3 	bl	80045c8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <SEGGER_SYSVIEW_Stop+0x48>)
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f383 8811 	msr	BASEPRI, r3
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	2001434c 	.word	0x2001434c
 800529c:	2001431c 	.word	0x2001431c

080052a0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08c      	sub	sp, #48	; 0x30
 80052a4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80052a6:	f3ef 8311 	mrs	r3, BASEPRI
 80052aa:	f04f 0120 	mov.w	r1, #32
 80052ae:	f381 8811 	msr	BASEPRI, r1
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	4845      	ldr	r0, [pc, #276]	; (80053cc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80052b6:	f7ff f894 	bl	80043e2 <_PreparePacket>
 80052ba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c4:	4b42      	ldr	r3, [pc, #264]	; (80053d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ca:	e00b      	b.n	80052e4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	1c59      	adds	r1, r3, #1
 80052d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	09db      	lsrs	r3, r3, #7
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	2b7f      	cmp	r3, #127	; 0x7f
 80052e8:	d8f0      	bhi.n	80052cc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
 80052fe:	4b34      	ldr	r3, [pc, #208]	; (80053d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	623b      	str	r3, [r7, #32]
 8005304:	e00b      	b.n	800531e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	1c59      	adds	r1, r3, #1
 800530e:	6279      	str	r1, [r7, #36]	; 0x24
 8005310:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	09db      	lsrs	r3, r3, #7
 800531c:	623b      	str	r3, [r7, #32]
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	2b7f      	cmp	r3, #127	; 0x7f
 8005322:	d8f0      	bhi.n	8005306 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	627a      	str	r2, [r7, #36]	; 0x24
 800532a:	6a3a      	ldr	r2, [r7, #32]
 800532c:	b2d2      	uxtb	r2, r2
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	61fb      	str	r3, [r7, #28]
 8005338:	4b25      	ldr	r3, [pc, #148]	; (80053d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	e00b      	b.n	8005358 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	1c59      	adds	r1, r3, #1
 8005348:	61f9      	str	r1, [r7, #28]
 800534a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	09db      	lsrs	r3, r3, #7
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2b7f      	cmp	r3, #127	; 0x7f
 800535c:	d8f0      	bhi.n	8005340 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	61fa      	str	r2, [r7, #28]
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	e00b      	b.n	8005390 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	1c59      	adds	r1, r3, #1
 8005380:	6179      	str	r1, [r7, #20]
 8005382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	09db      	lsrs	r3, r3, #7
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b7f      	cmp	r3, #127	; 0x7f
 8005394:	d8f0      	bhi.n	8005378 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	617a      	str	r2, [r7, #20]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80053a6:	2218      	movs	r2, #24
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	68b8      	ldr	r0, [r7, #8]
 80053ac:	f7ff f90c 	bl	80045c8 <_SendPacket>
  RECORD_END();
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80053be:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	4798      	blx	r3
  }
}
 80053c4:	bf00      	nop
 80053c6:	3730      	adds	r7, #48	; 0x30
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	2001434c 	.word	0x2001434c
 80053d0:	2001431c 	.word	0x2001431c

080053d4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b092      	sub	sp, #72	; 0x48
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80053dc:	f3ef 8311 	mrs	r3, BASEPRI
 80053e0:	f04f 0120 	mov.w	r1, #32
 80053e4:	f381 8811 	msr	BASEPRI, r1
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	486a      	ldr	r0, [pc, #424]	; (8005594 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80053ec:	f7fe fff9 	bl	80043e2 <_PreparePacket>
 80053f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	647b      	str	r3, [r7, #68]	; 0x44
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4b66      	ldr	r3, [pc, #408]	; (8005598 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	643b      	str	r3, [r7, #64]	; 0x40
 8005406:	e00b      	b.n	8005420 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800540a:	b2da      	uxtb	r2, r3
 800540c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800540e:	1c59      	adds	r1, r3, #1
 8005410:	6479      	str	r1, [r7, #68]	; 0x44
 8005412:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800541c:	09db      	lsrs	r3, r3, #7
 800541e:	643b      	str	r3, [r7, #64]	; 0x40
 8005420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005422:	2b7f      	cmp	r3, #127	; 0x7f
 8005424:	d8f0      	bhi.n	8005408 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	647a      	str	r2, [r7, #68]	; 0x44
 800542c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005434:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005440:	e00b      	b.n	800545a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	b2da      	uxtb	r2, r3
 8005446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005448:	1c59      	adds	r1, r3, #1
 800544a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800544c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	09db      	lsrs	r3, r3, #7
 8005458:	63bb      	str	r3, [r7, #56]	; 0x38
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	2b7f      	cmp	r3, #127	; 0x7f
 800545e:	d8f0      	bhi.n	8005442 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	4619      	mov	r1, r3
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f7fe ff65 	bl	8004348 <_EncodeStr>
 800547e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005480:	2209      	movs	r2, #9
 8005482:	68f9      	ldr	r1, [r7, #12]
 8005484:	6938      	ldr	r0, [r7, #16]
 8005486:	f7ff f89f 	bl	80045c8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	637b      	str	r3, [r7, #52]	; 0x34
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b40      	ldr	r3, [pc, #256]	; (8005598 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	633b      	str	r3, [r7, #48]	; 0x30
 800549e:	e00b      	b.n	80054b8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a6:	1c59      	adds	r1, r3, #1
 80054a8:	6379      	str	r1, [r7, #52]	; 0x34
 80054aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	09db      	lsrs	r3, r3, #7
 80054b6:	633b      	str	r3, [r7, #48]	; 0x30
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	2b7f      	cmp	r3, #127	; 0x7f
 80054bc:	d8f0      	bhi.n	80054a0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80054be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	637a      	str	r2, [r7, #52]	; 0x34
 80054c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d8:	e00b      	b.n	80054f2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	1c59      	adds	r1, r3, #1
 80054e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	09db      	lsrs	r3, r3, #7
 80054f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	2b7f      	cmp	r3, #127	; 0x7f
 80054f6:	d8f0      	bhi.n	80054da <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	623b      	str	r3, [r7, #32]
 8005512:	e00b      	b.n	800552c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	b2da      	uxtb	r2, r3
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	1c59      	adds	r1, r3, #1
 800551c:	6279      	str	r1, [r7, #36]	; 0x24
 800551e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	09db      	lsrs	r3, r3, #7
 800552a:	623b      	str	r3, [r7, #32]
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	2b7f      	cmp	r3, #127	; 0x7f
 8005530:	d8f0      	bhi.n	8005514 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	627a      	str	r2, [r7, #36]	; 0x24
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	2300      	movs	r3, #0
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e00b      	b.n	8005564 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	b2da      	uxtb	r2, r3
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	1c59      	adds	r1, r3, #1
 8005554:	61f9      	str	r1, [r7, #28]
 8005556:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	09db      	lsrs	r3, r3, #7
 8005562:	61bb      	str	r3, [r7, #24]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b7f      	cmp	r3, #127	; 0x7f
 8005568:	d8f0      	bhi.n	800554c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	61fa      	str	r2, [r7, #28]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800557a:	2215      	movs	r2, #21
 800557c:	68f9      	ldr	r1, [r7, #12]
 800557e:	6938      	ldr	r0, [r7, #16]
 8005580:	f7ff f822 	bl	80045c8 <_SendPacket>
  RECORD_END();
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f383 8811 	msr	BASEPRI, r3
}
 800558a:	bf00      	nop
 800558c:	3748      	adds	r7, #72	; 0x48
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	2001434c 	.word	0x2001434c
 8005598:	2001431c 	.word	0x2001431c

0800559c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80055b2:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4798      	blx	r3
  }
}
 80055ba:	bf00      	nop
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	2001431c 	.word	0x2001431c

080055c4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055cc:	f3ef 8311 	mrs	r3, BASEPRI
 80055d0:	f04f 0120 	mov.w	r1, #32
 80055d4:	f381 8811 	msr	BASEPRI, r1
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	480b      	ldr	r0, [pc, #44]	; (8005608 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80055dc:	f7fe ff01 	bl	80043e2 <_PreparePacket>
 80055e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055e2:	2280      	movs	r2, #128	; 0x80
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	6938      	ldr	r0, [r7, #16]
 80055e8:	f7fe feae 	bl	8004348 <_EncodeStr>
 80055ec:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80055ee:	220e      	movs	r2, #14
 80055f0:	68f9      	ldr	r1, [r7, #12]
 80055f2:	6938      	ldr	r0, [r7, #16]
 80055f4:	f7fe ffe8 	bl	80045c8 <_SendPacket>
  RECORD_END();
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f383 8811 	msr	BASEPRI, r3
}
 80055fe:	bf00      	nop
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	2001434c 	.word	0x2001434c

0800560c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800560c:	b590      	push	{r4, r7, lr}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005612:	4b15      	ldr	r3, [pc, #84]	; (8005668 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d01a      	beq.n	8005650 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800561a:	4b13      	ldr	r3, [pc, #76]	; (8005668 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d015      	beq.n	8005650 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005624:	4b10      	ldr	r3, [pc, #64]	; (8005668 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4798      	blx	r3
 800562c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005630:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	000a      	movs	r2, r1
 8005640:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005642:	4613      	mov	r3, r2
 8005644:	461a      	mov	r2, r3
 8005646:	4621      	mov	r1, r4
 8005648:	200d      	movs	r0, #13
 800564a:	f7ff fced 	bl	8005028 <SEGGER_SYSVIEW_RecordU32x2>
 800564e:	e006      	b.n	800565e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4619      	mov	r1, r3
 8005656:	200c      	movs	r0, #12
 8005658:	f7ff fcaa 	bl	8004fb0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800565c:	bf00      	nop
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	bd90      	pop	{r4, r7, pc}
 8005666:	bf00      	nop
 8005668:	2001431c 	.word	0x2001431c
 800566c:	e0001004 	.word	0xe0001004

08005670 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005676:	f3ef 8311 	mrs	r3, BASEPRI
 800567a:	f04f 0120 	mov.w	r1, #32
 800567e:	f381 8811 	msr	BASEPRI, r1
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	4819      	ldr	r0, [pc, #100]	; (80056ec <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005686:	f7fe feac 	bl	80043e2 <_PreparePacket>
 800568a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005690:	4b17      	ldr	r3, [pc, #92]	; (80056f0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005698:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	e00b      	b.n	80056bc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	1c59      	adds	r1, r3, #1
 80056ac:	6179      	str	r1, [r7, #20]
 80056ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	09db      	lsrs	r3, r3, #7
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	2b7f      	cmp	r3, #127	; 0x7f
 80056c0:	d8f0      	bhi.n	80056a4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	617a      	str	r2, [r7, #20]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80056d2:	2202      	movs	r2, #2
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	68b8      	ldr	r0, [r7, #8]
 80056d8:	f7fe ff76 	bl	80045c8 <_SendPacket>
  RECORD_END();
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f383 8811 	msr	BASEPRI, r3
}
 80056e2:	bf00      	nop
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	2001434c 	.word	0x2001434c
 80056f0:	e000ed04 	.word	0xe000ed04

080056f4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056fa:	f3ef 8311 	mrs	r3, BASEPRI
 80056fe:	f04f 0120 	mov.w	r1, #32
 8005702:	f381 8811 	msr	BASEPRI, r1
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	4807      	ldr	r0, [pc, #28]	; (8005728 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800570a:	f7fe fe6a 	bl	80043e2 <_PreparePacket>
 800570e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005710:	2203      	movs	r2, #3
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6838      	ldr	r0, [r7, #0]
 8005716:	f7fe ff57 	bl	80045c8 <_SendPacket>
  RECORD_END();
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f383 8811 	msr	BASEPRI, r3
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	2001434c 	.word	0x2001434c

0800572c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005732:	f3ef 8311 	mrs	r3, BASEPRI
 8005736:	f04f 0120 	mov.w	r1, #32
 800573a:	f381 8811 	msr	BASEPRI, r1
 800573e:	607b      	str	r3, [r7, #4]
 8005740:	4807      	ldr	r0, [pc, #28]	; (8005760 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005742:	f7fe fe4e 	bl	80043e2 <_PreparePacket>
 8005746:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005748:	2212      	movs	r2, #18
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6838      	ldr	r0, [r7, #0]
 800574e:	f7fe ff3b 	bl	80045c8 <_SendPacket>
  RECORD_END();
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f383 8811 	msr	BASEPRI, r3
}
 8005758:	bf00      	nop
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	2001434c 	.word	0x2001434c

08005764 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800576a:	f3ef 8311 	mrs	r3, BASEPRI
 800576e:	f04f 0120 	mov.w	r1, #32
 8005772:	f381 8811 	msr	BASEPRI, r1
 8005776:	607b      	str	r3, [r7, #4]
 8005778:	4807      	ldr	r0, [pc, #28]	; (8005798 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800577a:	f7fe fe32 	bl	80043e2 <_PreparePacket>
 800577e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005780:	2211      	movs	r2, #17
 8005782:	6839      	ldr	r1, [r7, #0]
 8005784:	6838      	ldr	r0, [r7, #0]
 8005786:	f7fe ff1f 	bl	80045c8 <_SendPacket>
  RECORD_END();
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f383 8811 	msr	BASEPRI, r3
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	2001434c 	.word	0x2001434c

0800579c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057a4:	f3ef 8311 	mrs	r3, BASEPRI
 80057a8:	f04f 0120 	mov.w	r1, #32
 80057ac:	f381 8811 	msr	BASEPRI, r1
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	4819      	ldr	r0, [pc, #100]	; (8005818 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80057b4:	f7fe fe15 	bl	80043e2 <_PreparePacket>
 80057b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057be:	4b17      	ldr	r3, [pc, #92]	; (800581c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	e00b      	b.n	80057ea <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	1c59      	adds	r1, r3, #1
 80057da:	61f9      	str	r1, [r7, #28]
 80057dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	09db      	lsrs	r3, r3, #7
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b7f      	cmp	r3, #127	; 0x7f
 80057ee:	d8f0      	bhi.n	80057d2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	61fa      	str	r2, [r7, #28]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005800:	2208      	movs	r2, #8
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	6938      	ldr	r0, [r7, #16]
 8005806:	f7fe fedf 	bl	80045c8 <_SendPacket>
  RECORD_END();
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f383 8811 	msr	BASEPRI, r3
}
 8005810:	bf00      	nop
 8005812:	3720      	adds	r7, #32
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	2001434c 	.word	0x2001434c
 800581c:	2001431c 	.word	0x2001431c

08005820 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005828:	f3ef 8311 	mrs	r3, BASEPRI
 800582c:	f04f 0120 	mov.w	r1, #32
 8005830:	f381 8811 	msr	BASEPRI, r1
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	4819      	ldr	r0, [pc, #100]	; (800589c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005838:	f7fe fdd3 	bl	80043e2 <_PreparePacket>
 800583c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005842:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	61bb      	str	r3, [r7, #24]
 8005854:	e00b      	b.n	800586e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	b2da      	uxtb	r2, r3
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	1c59      	adds	r1, r3, #1
 800585e:	61f9      	str	r1, [r7, #28]
 8005860:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	09db      	lsrs	r3, r3, #7
 800586c:	61bb      	str	r3, [r7, #24]
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b7f      	cmp	r3, #127	; 0x7f
 8005872:	d8f0      	bhi.n	8005856 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	61fa      	str	r2, [r7, #28]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005884:	2204      	movs	r2, #4
 8005886:	68f9      	ldr	r1, [r7, #12]
 8005888:	6938      	ldr	r0, [r7, #16]
 800588a:	f7fe fe9d 	bl	80045c8 <_SendPacket>
  RECORD_END();
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f383 8811 	msr	BASEPRI, r3
}
 8005894:	bf00      	nop
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	2001434c 	.word	0x2001434c
 80058a0:	2001431c 	.word	0x2001431c

080058a4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058ac:	f3ef 8311 	mrs	r3, BASEPRI
 80058b0:	f04f 0120 	mov.w	r1, #32
 80058b4:	f381 8811 	msr	BASEPRI, r1
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	4819      	ldr	r0, [pc, #100]	; (8005920 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80058bc:	f7fe fd91 	bl	80043e2 <_PreparePacket>
 80058c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80058c6:	4b17      	ldr	r3, [pc, #92]	; (8005924 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	e00b      	b.n	80058f2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	1c59      	adds	r1, r3, #1
 80058e2:	61f9      	str	r1, [r7, #28]
 80058e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	09db      	lsrs	r3, r3, #7
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b7f      	cmp	r3, #127	; 0x7f
 80058f6:	d8f0      	bhi.n	80058da <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	61fa      	str	r2, [r7, #28]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005908:	2206      	movs	r2, #6
 800590a:	68f9      	ldr	r1, [r7, #12]
 800590c:	6938      	ldr	r0, [r7, #16]
 800590e:	f7fe fe5b 	bl	80045c8 <_SendPacket>
  RECORD_END();
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f383 8811 	msr	BASEPRI, r3
}
 8005918:	bf00      	nop
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	2001434c 	.word	0x2001434c
 8005924:	2001431c 	.word	0x2001431c

08005928 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b08c      	sub	sp, #48	; 0x30
 800592c:	af00      	add	r7, sp, #0
 800592e:	4603      	mov	r3, r0
 8005930:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005932:	4b3b      	ldr	r3, [pc, #236]	; (8005a20 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d06d      	beq.n	8005a16 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800593a:	4b39      	ldr	r3, [pc, #228]	; (8005a20 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005940:	2300      	movs	r3, #0
 8005942:	62bb      	str	r3, [r7, #40]	; 0x28
 8005944:	e008      	b.n	8005958 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005954:	3301      	adds	r3, #1
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800595c:	429a      	cmp	r2, r3
 800595e:	d3f2      	bcc.n	8005946 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005960:	e000      	b.n	8005964 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005962:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d055      	beq.n	8005a16 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800596a:	f3ef 8311 	mrs	r3, BASEPRI
 800596e:	f04f 0120 	mov.w	r1, #32
 8005972:	f381 8811 	msr	BASEPRI, r1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	482a      	ldr	r0, [pc, #168]	; (8005a24 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800597a:	f7fe fd32 	bl	80043e2 <_PreparePacket>
 800597e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	623b      	str	r3, [r7, #32]
 800598c:	e00b      	b.n	80059a6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	b2da      	uxtb	r2, r3
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	1c59      	adds	r1, r3, #1
 8005996:	6279      	str	r1, [r7, #36]	; 0x24
 8005998:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	09db      	lsrs	r3, r3, #7
 80059a4:	623b      	str	r3, [r7, #32]
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	2b7f      	cmp	r3, #127	; 0x7f
 80059aa:	d8f0      	bhi.n	800598e <SEGGER_SYSVIEW_SendModule+0x66>
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	627a      	str	r2, [r7, #36]	; 0x24
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	e00b      	b.n	80059e0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	1c59      	adds	r1, r3, #1
 80059d0:	61f9      	str	r1, [r7, #28]
 80059d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	09db      	lsrs	r3, r3, #7
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	2b7f      	cmp	r3, #127	; 0x7f
 80059e4:	d8f0      	bhi.n	80059c8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	61fa      	str	r2, [r7, #28]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2280      	movs	r2, #128	; 0x80
 80059fc:	4619      	mov	r1, r3
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7fe fca2 	bl	8004348 <_EncodeStr>
 8005a04:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005a06:	2216      	movs	r2, #22
 8005a08:	68f9      	ldr	r1, [r7, #12]
 8005a0a:	6938      	ldr	r0, [r7, #16]
 8005a0c:	f7fe fddc 	bl	80045c8 <_SendPacket>
      RECORD_END();
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005a16:	bf00      	nop
 8005a18:	3730      	adds	r7, #48	; 0x30
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20014344 	.word	0x20014344
 8005a24:	2001434c 	.word	0x2001434c

08005a28 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00f      	beq.n	8005a56 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005a36:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f2      	bne.n	8005a3c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20014344 	.word	0x20014344

08005a64 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a6e:	f04f 0120 	mov.w	r1, #32
 8005a72:	f381 8811 	msr	BASEPRI, r1
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	4817      	ldr	r0, [pc, #92]	; (8005ad8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005a7a:	f7fe fcb2 	bl	80043e2 <_PreparePacket>
 8005a7e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	4b14      	ldr	r3, [pc, #80]	; (8005adc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	e00b      	b.n	8005aa8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	1c59      	adds	r1, r3, #1
 8005a98:	6179      	str	r1, [r7, #20]
 8005a9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	09db      	lsrs	r3, r3, #7
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8005aac:	d8f0      	bhi.n	8005a90 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	617a      	str	r2, [r7, #20]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005abe:	221b      	movs	r2, #27
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	68b8      	ldr	r0, [r7, #8]
 8005ac4:	f7fe fd80 	bl	80045c8 <_SendPacket>
  RECORD_END();
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f383 8811 	msr	BASEPRI, r3
}
 8005ace:	bf00      	nop
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	2001434c 	.word	0x2001434c
 8005adc:	20014348 	.word	0x20014348

08005ae0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005ae0:	b40f      	push	{r0, r1, r2, r3}
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005ae8:	f107 0314 	add.w	r3, r7, #20
 8005aec:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005aee:	1d3b      	adds	r3, r7, #4
 8005af0:	461a      	mov	r2, r3
 8005af2:	2100      	movs	r1, #0
 8005af4:	6938      	ldr	r0, [r7, #16]
 8005af6:	f7fe fff1 	bl	8004adc <_VPrintTarget>
  va_end(ParamList);
}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b04:	b004      	add	sp, #16
 8005b06:	4770      	bx	lr

08005b08 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	; 0x28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b10:	f3ef 8311 	mrs	r3, BASEPRI
 8005b14:	f04f 0120 	mov.w	r1, #32
 8005b18:	f381 8811 	msr	BASEPRI, r1
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	4827      	ldr	r0, [pc, #156]	; (8005bbc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005b20:	f7fe fc5f 	bl	80043e2 <_PreparePacket>
 8005b24:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b26:	2280      	movs	r2, #128	; 0x80
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	6938      	ldr	r0, [r7, #16]
 8005b2c:	f7fe fc0c 	bl	8004348 <_EncodeStr>
 8005b30:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
 8005b36:	2301      	movs	r3, #1
 8005b38:	623b      	str	r3, [r7, #32]
 8005b3a:	e00b      	b.n	8005b54 <SEGGER_SYSVIEW_Warn+0x4c>
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	6279      	str	r1, [r7, #36]	; 0x24
 8005b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	09db      	lsrs	r3, r3, #7
 8005b52:	623b      	str	r3, [r7, #32]
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	2b7f      	cmp	r3, #127	; 0x7f
 8005b58:	d8f0      	bhi.n	8005b3c <SEGGER_SYSVIEW_Warn+0x34>
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	627a      	str	r2, [r7, #36]	; 0x24
 8005b60:	6a3a      	ldr	r2, [r7, #32]
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	e00b      	b.n	8005b8c <SEGGER_SYSVIEW_Warn+0x84>
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	1c59      	adds	r1, r3, #1
 8005b7c:	61f9      	str	r1, [r7, #28]
 8005b7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	09db      	lsrs	r3, r3, #7
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b90:	d8f0      	bhi.n	8005b74 <SEGGER_SYSVIEW_Warn+0x6c>
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	61fa      	str	r2, [r7, #28]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ba2:	221a      	movs	r2, #26
 8005ba4:	68f9      	ldr	r1, [r7, #12]
 8005ba6:	6938      	ldr	r0, [r7, #16]
 8005ba8:	f7fe fd0e 	bl	80045c8 <_SendPacket>
  RECORD_END();
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f383 8811 	msr	BASEPRI, r3
}
 8005bb2:	bf00      	nop
 8005bb4:	3728      	adds	r7, #40	; 0x28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	2001434c 	.word	0x2001434c

08005bc0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005bc4:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005bc6:	7e1b      	ldrb	r3, [r3, #24]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4a13      	ldr	r2, [pc, #76]	; (8005c18 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005bcc:	460b      	mov	r3, r1
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	440b      	add	r3, r1
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	336c      	adds	r3, #108	; 0x6c
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005bdc:	7e1b      	ldrb	r3, [r3, #24]
 8005bde:	4618      	mov	r0, r3
 8005be0:	490d      	ldr	r1, [pc, #52]	; (8005c18 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005be2:	4603      	mov	r3, r0
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	4403      	add	r3, r0
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	440b      	add	r3, r1
 8005bec:	3370      	adds	r3, #112	; 0x70
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d00b      	beq.n	8005c0c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005bf4:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005bf6:	789b      	ldrb	r3, [r3, #2]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d107      	bne.n	8005c0c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005c02:	f7fe fbfb 	bl	80043fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005c06:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005c0c:	4b01      	ldr	r3, [pc, #4]	; (8005c14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	2001431c 	.word	0x2001431c
 8005c18:	20012e5c 	.word	0x20012e5c

08005c1c <__libc_init_array>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	4d0d      	ldr	r5, [pc, #52]	; (8005c54 <__libc_init_array+0x38>)
 8005c20:	4c0d      	ldr	r4, [pc, #52]	; (8005c58 <__libc_init_array+0x3c>)
 8005c22:	1b64      	subs	r4, r4, r5
 8005c24:	10a4      	asrs	r4, r4, #2
 8005c26:	2600      	movs	r6, #0
 8005c28:	42a6      	cmp	r6, r4
 8005c2a:	d109      	bne.n	8005c40 <__libc_init_array+0x24>
 8005c2c:	4d0b      	ldr	r5, [pc, #44]	; (8005c5c <__libc_init_array+0x40>)
 8005c2e:	4c0c      	ldr	r4, [pc, #48]	; (8005c60 <__libc_init_array+0x44>)
 8005c30:	f000 f83e 	bl	8005cb0 <_init>
 8005c34:	1b64      	subs	r4, r4, r5
 8005c36:	10a4      	asrs	r4, r4, #2
 8005c38:	2600      	movs	r6, #0
 8005c3a:	42a6      	cmp	r6, r4
 8005c3c:	d105      	bne.n	8005c4a <__libc_init_array+0x2e>
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c44:	4798      	blx	r3
 8005c46:	3601      	adds	r6, #1
 8005c48:	e7ee      	b.n	8005c28 <__libc_init_array+0xc>
 8005c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4e:	4798      	blx	r3
 8005c50:	3601      	adds	r6, #1
 8005c52:	e7f2      	b.n	8005c3a <__libc_init_array+0x1e>
 8005c54:	08005e2c 	.word	0x08005e2c
 8005c58:	08005e2c 	.word	0x08005e2c
 8005c5c:	08005e2c 	.word	0x08005e2c
 8005c60:	08005e30 	.word	0x08005e30

08005c64 <memcmp>:
 8005c64:	b510      	push	{r4, lr}
 8005c66:	3901      	subs	r1, #1
 8005c68:	4402      	add	r2, r0
 8005c6a:	4290      	cmp	r0, r2
 8005c6c:	d101      	bne.n	8005c72 <memcmp+0xe>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e005      	b.n	8005c7e <memcmp+0x1a>
 8005c72:	7803      	ldrb	r3, [r0, #0]
 8005c74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	d001      	beq.n	8005c80 <memcmp+0x1c>
 8005c7c:	1b18      	subs	r0, r3, r4
 8005c7e:	bd10      	pop	{r4, pc}
 8005c80:	3001      	adds	r0, #1
 8005c82:	e7f2      	b.n	8005c6a <memcmp+0x6>

08005c84 <memcpy>:
 8005c84:	440a      	add	r2, r1
 8005c86:	4291      	cmp	r1, r2
 8005c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c8c:	d100      	bne.n	8005c90 <memcpy+0xc>
 8005c8e:	4770      	bx	lr
 8005c90:	b510      	push	{r4, lr}
 8005c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c9a:	4291      	cmp	r1, r2
 8005c9c:	d1f9      	bne.n	8005c92 <memcpy+0xe>
 8005c9e:	bd10      	pop	{r4, pc}

08005ca0 <memset>:
 8005ca0:	4402      	add	r2, r0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d100      	bne.n	8005caa <memset+0xa>
 8005ca8:	4770      	bx	lr
 8005caa:	f803 1b01 	strb.w	r1, [r3], #1
 8005cae:	e7f9      	b.n	8005ca4 <memset+0x4>

08005cb0 <_init>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	bf00      	nop
 8005cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb6:	bc08      	pop	{r3}
 8005cb8:	469e      	mov	lr, r3
 8005cba:	4770      	bx	lr

08005cbc <_fini>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	bf00      	nop
 8005cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc2:	bc08      	pop	{r3}
 8005cc4:	469e      	mov	lr, r3
 8005cc6:	4770      	bx	lr
